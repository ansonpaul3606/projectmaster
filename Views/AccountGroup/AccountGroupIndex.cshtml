
@{
    ViewBag.Title = "Account Group";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid">

    @Html.AntiForgeryToken()  @*//antiforgery token*@


    <div class="row">
        <div class="col-lg-12" id="jq_customerType_formContainer">

        </div>
    </div>


</div>

@section scripts{

<script type="text/javascript">
        var AccountGroupTransMode = '';
        const $formContainer = $('#jq_customerType_formContainer');

        $(document).ready(function () {
            InitailAccountGroup();
        });


        function InitailAccountGroup() {
            getSessionValue("lqEUtnAmcIi/N4D+lX6+nO/5d1gphfXDSs26xVgHp6U=", function (result) {
                AccountGroupTransMode = result;

               @if (ViewBag.PagedAccessRights.UsrrlTyView)
              {
                 <text>  fn_LoadAccountGroupList(this); </text>
              }
            });
                LoadFormAccountGroup();
        }





        function LoadFormAccountGroup() {
           // debugger;
             $formContainer.load('@Url.Action("LoadFormAccountGroup", "AccountGroup")?mtd=@ViewBag.mtd', function () {
                 let $thisForm = $(this).find('[perfect-class="form"]');
                $thisForm.validate({ messages: validationMessage });
                 $thisForm.attr('perfect-onFormSuccess', 'InitailAccountGroup');
            });
        }

        var validationMessage = {
            'AGName': {
                'required': 'Please Enter Name',
                'stringonly': 'Invalid Account Group Name',
            },
            'AGShortName': {
                'required': 'Please Enter Short Name',
                'stringonly': 'Invalid Account Group Short Name',
            },
            'AccType': {
                'required': 'Please Select Final Account Type',
                'stringonly': 'Invalid Final Account Group Type',
            },
            'AccGroupType': {
                'required': 'Please Select Account Group Type',
                //'stringonly': 'Invalid Account Group Type',
            },
            //'AGFinalAccGroupSubType': {
            //    'required': 'Please Select A/c Categorization'
            //}
        }
        function fn_LoadAccountGroupList(ele) {

            let $sidemenu = $sideMenuOptions.body;
            let $thisForm = $(ele).closest('.testSearchBox');
            let SearchName = $thisForm.find('input').val();


           
              $sideMenuOptions.title.find('h4').text('@ViewBag.PageTitles'+' '+'List');
          let pageUrl = '@Url.Action("GetAccountGroupList", "AccountGroup")';
            $.ajax({
                url:pageUrl,
                type: "POST",
                data: { pageSize: 15, pageIndex: 0, Name: SearchName, TransMode: AccountGroupTransMode },
                dataType: "json",
                contentType: "application/x-www-form-urlencoded; charset=utf-8",
                success: function (ajaxOutput) {


                          if (ajaxOutput.Process.IsProcess) {
                              console.log('AccountGroup', ajaxOutput);
                              $sidemenu.find('.jq_sidemenu_title').text("AccountGroup");

                              $sidemenu.empty().append('<div class="d-flex justify-content-end mb-2 position-relative"><div class="col-md-6 position-absolute top-1 z-index"> <div class="input-group testSearchBox"><input type="text" class="form-control " name="SearchName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input"  /><div class="input-group-append"><button id="addcountry-jq-searchButton6" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="fn_LoadAccountGroupList(this)"></button></div></div></div></div>', $('<div/>', {class:"col-md-12 table_temp_class"}).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))

                              let $table = $sidemenu.find('table');
                              $table.dataTable({
                                  "serverSide": true,
                                  "processing": true,
                                  "lengthMenu": [10, 15, 20, 25, 50, 100],
                                  "searching": false,
                                  "ordering": false,
                                  "deferLoading": ajaxOutput.totalrecord,
                                  "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,
                                  "pageLength": ajaxOutput.pageSize,
                                  "recordsFiltered": ajaxOutput.pageSize,
                                  "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize, searchkey: SearchName, TransMode: AccountGroupTransMode  }, tableOptions, $table)
                              });

                          }
                            else {
                              if (ajaxOutput.Process.Status = "NoData") {

                                  $sidemenu.find('.jq_sidemenu_title').text("AccountGroup");

                                  $sidemenu.empty().append('<div class="d-flex justify-content-end mb-2"><div class="col-md-6 position-absolute top-1 z-index"> <div class="input-group testSearchBox"><input type="text" class="form-control " name="SearchName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input"  /><div class="input-group-append"><button id="addcountry-jq-searchButton6" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="fn_LoadAccountGroupList(this)"></button></div></div></div></div>', $('<div/>', { class: "col-md-12 table_temp_class" }).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))

                        let $table = $sidemenu.find('table');
                        $table.dataTable({
                            "serverSide": true,
                            "processing": true,
                           "lengthMenu": [],
                            "searching": false,
                            "ordering": false,
                            "deferLoading": ajaxOutput.totalrecord,
                            "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,
                            "pageLength": ajaxOutput.pageSize,
                            "recordsFiltered": ajaxOutput.pageSize,

                            "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize }, tableOptions, $table)
                        });
                    }
                    else {
                        $.each(ajaxOutput.Process.Message, function (key, value) {
                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                        });
                    }
                }
            },
            complete: function () {

            }
        });
    }

    function returnajaxPagination(ajaxInfo, tableOptions, tableid) {

        return {
            url: ajaxInfo.apiurl,
            type: "post",
            data: function () {
                var info = tableid.DataTable().page.info();

                let input = { pageSize: info.length, pageIndex: info.page, TransMode: AccountGroupTransMode };
                if (ajaxInfo.searchkey) {
                    input["Name"] = ajaxInfo.searchkey;
                }
                return input
            },
            dataType: "json",
            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            success: function (dtajaxOutput) {

                let table = tableid.DataTable();
                table.destroy();
                pft_table_newTableBody(tableid, dtajaxOutput.Data, tableOptions);

                tableid.dataTable({
                    "serverSide": true,
                    "processing": true,
                    "lengthMenu": [10, 15, 20, 25, 50, 100],
                    "searching": false,
                    "ordering": false,
                    "deferLoading": dtajaxOutput.totalrecord,
                    "displayStart": dtajaxOutput.pageIndex * dtajaxOutput.pageSize,
                    "pageLength": dtajaxOutput.pageSize,
                    "recordsFiltered": dtajaxOutput.pageSize,
                    "ajax": returnajaxPagination(ajaxInfo, tableOptions, tableid)
                })

            },

        }
        }
         var tableOptions = {
            dropdown: {
                buttons: [

             @if (ViewBag.PagedAccessRights.UsrrlTyView)
               {
               <text> { displayName: "View", action: fn_EditAccountGroup },</text>
               }
                    { type: "divider" },

               @if (ViewBag.PagedAccessRights.UsrrlTyDel)
                {
                 <text> { displayName: "Delete", action: fn_DeleteAccountGroup },</text>
                }

                ],
                class: "btn btn-success light sharp"
            },
            onlyShowColumn: ["SlNo","AGName", "AGShortName"],
            hideColumn: [],

             rowClickAction: fn_EditAccountGroup,
           serialNo: false,

             renameHeader: { "SlNo": "Sl No", "AGName": "Name", "AGShortName": "ShortName" }

        };


        function fn_EditAccountGroup() {


             let $thisRow = $(this).closest('tr');
            let Saveddata = $thisRow.data('pData');


            $('.dataTable tr').removeClass("SelectForDelete");
            $(this).closest('tr').addClass('SelectForDelete');

            console.log('View click', Saveddata)
            let inputData = {
               __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(), //antiforgery token
                ID_AccountGroup: Saveddata.ID_AccountGroup
            };

            $.ajax({
                url: "@Url.Action("GetAccountGroupInfo", "AccountGroup")",
                type: "POST",
                data: inputData,
                // dataType: "json",
                contentType: "application/x-www-form-urlencoded; charset=utf-8",  //antiforgery token
                success: function (ajaxOutput) {

                    if (ajaxOutput.Process.IsProcess) {
                        $sideMenuOptions.close();
                        $formContainer.load('@Url.Action("LoadFormAccountGroup", "AccountGroup")?mtd=@ViewBag.mtd', function () {

                            let $thisForm = $(this).find('[perfect-class="form"]');

                            $(this).find('[perfect-class=formTitle]').text('update : ' + ajaxOutput.Data[0].AGName)
                            console.log('Inside load');

                            $thisForm.validate({ messages: validationMessage });

                            $thisForm.data({ pData: ajaxOutput.Data[0] });

                            $thisForm.find('[name="AGName"]').val(ajaxOutput.Data[0].AGName),
                                $thisForm.find('[name="AGShortName"]').val(ajaxOutput.Data[0].AGShortName),
                            
                            $("#cbTrading").attr("checked", ajaxOutput.Data[0].Trading);
                          
                            $("#cbProfitLoss").attr("checked", ajaxOutput.Data[0].ProfitLoss);
                           
                            $("#cbBalanceSheet").attr("checked", ajaxOutput.Data[0].BalanceSheet);

                            if (ajaxOutput.Data[0].Trading == true) {
                                $thisForm.find('[name="cbTrading"]').trigger('change');
                            }
                            else if (ajaxOutput.Data[0].ProfitLoss == true) {
                                $thisForm.find('[name="cbProfitLoss"]').trigger('change');
                            }
                            else if (ajaxOutput.Data[0].BalanceSheet == true) {
                                $thisForm.find('[name="cbBalanceSheet"]').trigger('change');
                            }
                            
                           
                            $thisForm.find('[name="AccGroupType"]').attr('perfect-onloadSelect', ajaxOutput.Data[0].AccGroupType);
                            $thisForm.find('[name="SortOrder"]').val(ajaxOutput.Data[0].SortOrder);
                            $thisForm.find('[name="AGFinalAccGroupSubType"]').attr('perfect-onloadSelect', ajaxOutput.Data[0].AGFinalAccGroupSubType);
                            $thisForm.find('[name="AGFinalAccGroupSubType"]').val(ajaxOutput.Data[0].AGFinalAccGroupSubType);
                           
                            
                          
                            
                            $sideMenuOptions.close();
                            $thisForm.find('button[name=add]').addClass('d-none');
                            $thisForm.find('button[name=update]').removeClass('d-none');

                            $thisForm.attr('perfect-onFormSuccess', 'InitailAccountGroup');
                           
                            $('#AccGroupType1').val(Saveddata.AccGroupType);
                            fn_ChangeDropValues(Saveddata.AccGroupType);
                        });                     
                    }
                    else {

                        $.each(ajaxOutput.Process.Message, function (key, value) {
                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                        });
                    }                  
                }
            });
    };

        function fn_DeleteAccountGroup() {

        let $row = $(this).closest('tr');

            let Saveddata = $row.data('pData');

            $('.dataTable tr').removeClass("SelectForDelete");
            $(this).closest('tr').addClass('SelectForDelete');

            let inputReason = {
                __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(), //antiforgery token
                FK_AccountGroup: Saveddata.ID_AccountGroup,
            };

            $.ajax({
                   url: "@Url.Action("GetAccountGroupDeleteReasonList", "AccountGroup")",
                   type: "GET",
                   data: inputReason,
                   contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                   success: function (ajaxReasonOutput) {
                       if (ajaxReasonOutput.Process.IsProcess) {

                           let confirmationDialogBoxOption = { heading: "Are you Sure?", body: "Do you want to remove    " + Saveddata.AGName + " ?", cancel: "No", confirm: "Yes", reason: ajaxReasonOutput.Data };

                           var res = ConfirmDialog(confirmationDialogBoxOption);
                            res.then(function (ret) {
                                if (ret) {

                                    let inputData = {
                                        __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(), //antiforgery token
                                        FK_AccountGroup: Saveddata.ID_AccountGroup,
                                        ReasonID: ret
                                    };


                                    $.ajax({
                                        url: "@Url.Action("DeleteAccountGroup", "AccountGroup")",
                                        type: "POST",
                                        data: inputData, //antiforgery token removed json.stringify
                                        contentType: "application/x-www-form-urlencoded; charset=utf-8",
                                        success: function (data) {

                                            if (data.Process.IsProcess) {
                                                let table = $row.closest('table').DataTable()
                                                table.row($row).remove().draw();
                                                $.each(data.Process.Message, function (key, value) {
                                                    NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': 'Deleted Successfully' });
                                                });
                                                $('.dataTable tr').removeClass("SelectForDelete");
                                            }
                                            else {
                                                $.each(data.Process.Message, function (key, value) {
                                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                                    $('.dataTable tr').removeClass("SelectForDelete");
                                                });
                                            }
                                        }
                                    });
                                }
                                else {
                                    NotificationMessage({ 'message': 'No option selected' });
                                }
                            });

                       }
                }

            });

        }
</script>
}