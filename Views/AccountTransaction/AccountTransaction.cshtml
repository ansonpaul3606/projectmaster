@{
    ViewBag.Title = "AccountTransaction";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid">

    <div class="row">
        <div class="col-lg-12" id="jq_AccountIndex_formContainer">

        </div>
    </div>


</div>
@section scripts{

    <script type="text/javascript">
        const LastIDSessionKey = 'AcTransLastID';
        var AcTransTransMode = '';
        var FK_BranchCode = '';
        var FK_Branch = '';
        var LastID_AcTrans = 0;
      
        const $formContainer = $('#jq_AccountIndex_formContainer');



        var validationMessage = {

            'AcctountType': {
                'required': 'Please Select Account Type',
                'stringonly': 'Special Characters are not Allowed in  Account Type'

            },
            'AccountHead': {
                'required': 'Please Select Account Head',
                'stringonly': 'Special Characters are not Allowed in  Account Head'

            },
           
            'TransDate': {
                'required': 'Please Select Transaction Date',
                'max': jQuery.validator.format('Please Enter a Valid Date')

            },
            'EffectDate': {
                'required': 'Please Select Effect Date',
                'max': jQuery.validator.format('Please Enter a Valid Date')

            },
           
            'AhstAmount': {
                'required': 'Please Enter Amount',

            },

        };

        // Initial load functions
        $(document).ready(function () {
            fn_Actionindex_load();

        });
        function fn_Actionindex_load() {
          //  getSessionValue("3mc4FH+fWOduSVJwDUFRJt/PgXG/lW4B1WUypGwsL9cf6hqDPLIvGjTJ1EgV2GC6", function (result) {
            AcTransTransMode = '@ViewBag.TransMode';
            FK_BranchCode = '@ViewBag.Fk_BranchCode';
            FK_Branch ='@ViewBag.Fk_Branch';
            

              
            fn_loadAccountTransactionList(this, fn_Action_loadAddForm); 

        }

          // Fucntion to load Customer ADD form
        function fn_Action_loadAddForm() {
        
            $formContainer.load('@Url.Action("LoadFormAccountTransaction", "AccountTransaction")?mtd=@ViewBag.mtd', function () {
               
                let $thisForm = $(this).find('[perfect-class="form"]');
                $thisForm.find('[name="TransDate"]').val(moment().format('YYYY-MM-DD'));
                $thisForm.find('[name="EffectDate"]').val(moment().format('YYYY-MM-DD')); 
                $thisForm.validate({  messages: validationMessage });
                $thisForm.attr('perfect-onFormSuccess', 'fn_Actionindex_load');
                initFunctions($thisForm);
                getSessionValue(LastIDSessionKey, function (result) {
                    LastID_AcTrans = result;
                });

            });

        };

        function fn_loadAccountTransactionList(ele,callback) {
           
        let $sidemenu = $sideMenuOptions.body;
            let $thisForm = $(ele).closest('.testSearchBox');
            let SearchName = $thisForm.find('input').val();
            if (SearchName == undefined) {
                SearchName = "";
            }
            $sideMenuOptions.title.find('h4').text('@ViewBag.PageTitles'+' ' + 'List');
             let pageUrl = '@Url.Action("GetAccountHeadSubTransactionList", "AccountTransaction")';
            $.ajax({
                url:pageUrl,
                type: "POST",
                data: { pageSize: 10, pageIndex: 0, Name: SearchName, TransMode: AcTransTransMode },
                dataType: "json",
                contentType: "application/x-www-form-urlencoded; charset=utf-8",
                success: function (ajaxOutput) {
                    if (ajaxOutput.Process.IsProcess) {
                     

                        setSessionValue(LastIDSessionKey, ajaxOutput.Data[0]["LastID"]);
                        
                        $sidemenu.find('.jq_sidemenu_title').text("Account Transaction List");
                        $sidemenu.empty().append('<div class="d-flex justify-content-end mb-2 position-relative"><div class="col-md-6 position-absolute top-1 z-index"> <div class="input-group testSearchBox"><input type="text" class="form-control " name="SearchName" value="' + SearchName + '" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input"  /><div class="input-group-append"><button id="addcountry-jq-searchButton6" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="fn_loadAccountTransactionList(this)"></button></div></div></div></div>', $('<div/>', {class:"col-md-12 table_temp_class"}).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))
                              let $table = $sidemenu.find('table');
                              $table.dataTable({
                                  "serverSide": true,
                                  "processing": true,
                                  "lengthMenu": [10, 15, 20, 25, 50, 100],
                                  "searching": false,
                                  "ordering": false,
                                  "deferLoading": ajaxOutput.totalrecord,
                                  "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,
                                  "pageLength": ajaxOutput.pageSize,
                                  "recordsFiltered": ajaxOutput.pageSize,
                                  "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize, searchkey: SearchName, TransMode: AcTransTransMode }, tableOptions, $table)
                              });
                          }
                          else
                          {
                        setSessionValue(LastIDSessionKey, 0);
                            if (ajaxOutput.Process.Status = "NoData") {
                                $sidemenu.find('.jq_sidemenu_title').text("Account Transaction List");

                                $sidemenu.empty().append('<div class="d-flex justify-content-end mb-2"><div class="col-md-6 position-absolute top-1 z-index"> <div class="input-group testSearchBox"><input type="text" class="form-control " name="SearchName" value="' + SearchName + '" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input"  /><div class="input-group-append"><button id="addcountry-jq-searchButton6" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="fn_loadAccountTransactionList(this)"></button></div></div></div></div>', $('<div/>', { class: "col-md-12 table_temp_class" }).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))

                                let $table = $sidemenu.find('table');
                                $table.dataTable({
                                    "language": {
                                        "emptyTable": "No data found to display."},
                                    "serverSide": true,
                                    "processing": true,
                                    "lengthMenu": [0],
                                    "searching": false,
                                    "ordering": false,
                                    "deferLoading": ajaxOutput.totalrecord,
                                    "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,
                                    "pageLength": ajaxOutput.pageSize,
                                    "recordsFiltered": ajaxOutput.pageSize,
                                    "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize, searchkey: SearchName, TransMode: AcTransTransMode }, tableOptions, $table)
                                });
                            }
                            else {
                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                });
                            }
                          }
            },
            complete: function () {
                if (callback) {


                    callback();
                }
            }
        });
        }

    function returnajaxPagination(ajaxInfo, tableOptions, tableid) {
        return {
            url: ajaxInfo.apiurl,
            type: "post",
            data: function () {
                var info = tableid.DataTable().page.info();
                let input = { pageSize: info.length, pageIndex: info.page,TransMode: ajaxInfo.TransMode};
                if (ajaxInfo.searchkey) {
                    input["Name"] = ajaxInfo.searchkey;
                }
                return input
            },
            dataType: "json",
            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            success: function (dtajaxOutput) {
                let table = tableid.DataTable();
                table.destroy();
                pft_table_newTableBody(tableid, dtajaxOutput.Data, tableOptions);
                tableid.dataTable({
                    "serverSide": true,
                    "processing": true,
                    "lengthMenu": [10, 15, 20, 25, 50, 100],
                    "searching": false,
                    "ordering": false,
                    "deferLoading": dtajaxOutput.totalrecord,
                    "displayStart": dtajaxOutput.pageIndex * dtajaxOutput.pageSize,
                    "pageLength": dtajaxOutput.pageSize,
                    "recordsFiltered": dtajaxOutput.pageSize,
                    "ajax": returnajaxPagination(ajaxInfo, tableOptions, tableid)
                })

            },

        }
    }

    var tableOptions = {
        dropdown: {
            buttons: [
                @if (ViewBag.PagedAccessRights.UsrrlMsView)
                {
                    <text> { displayName: "View", action: fn_editAccountTransaction },</text>
                }
                { type: "divider" },
               @if (ViewBag.PagedAccessRights.UsrrlMsDel)
                 {
                     <text> { displayName: "Delete", action: fn_deleteAccountTransaction },</text>
                 }
                ],   
            class: "btn btn-success light sharp"
        },
        onlyShowColumn: ["SlNo", "Voucher", "TransDate", "AccountHead", "TransType_d", "AhstAmount"],
        hideColumn: ["ID_AccountHeadSubTransaction", "FK_AccountHead", "FK_AccountSubHead", "TransDate", "EffectDate", "AccountType_d", "AccountType"],
        rowClickAction: fn_editAccountTransaction,
        renameHeader: {"SlNo": "Sl No", "Voucher":"Voucher","TransType_d": "Trans Type", "AccountHead": "A/c Head", "AccountSubHead": "A/c Sub Head","AhstNarration":"Remarks","AhstChequeDate":"Chq. Date","AhstChequeNo":"Chq. No","AhstParty":"Party","AhstAmount":"Amount","TaxAmount":"Tax Amount" },
        isDateType: ["TransDate", "EffectDate", "AhstChequeDate"],
        serialNo: false,
    };

        function fn_editAccountTransaction() {
           
        let row = $(this).closest('tr');
            let Saveddata = row.data('pData');

            $('.dataTable tr').removeClass("SelectForDelete");
            $(this).closest('tr').addClass('SelectForDelete');

            let inputData =
            {
                __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                ID_AccountHeadSubTransaction:Saveddata.ID_AccountHeadSubTransaction,
                AhstGroupID: Saveddata.AhstGroupID,
                TransMode: AcTransTransMode
            };
            fn_fillAccountTransactionDetails(inputData);
        }


        function fn_fillAccountTransactionDetails(inputData) {
     
         $.ajax({
                url: '@Url.Action("GetAccountTransactionInfo", "AccountTransaction")',
                        type: "POST",
                        data: inputData,
                        dataType: "json",
                        contentType: 'application/x-www-form-urlencoded;charset=utf-8',
                        success: function (ajaxOutput)
                        {
                            if (ajaxOutput.AccountTransactionItem.Process.IsProcess)
                            {
                                $sideMenuOptions.close();
                                $formContainer.load("@Url.Action("LoadFormAccountTransaction", "AccountTransaction")?mtd=@ViewBag.mtd", function () {
                                   
                                    let $thisForm = $(this).find('[perfect-class="form"]');
                                    $(this).find('[perfect-class=formTitle]').text('update')                                   
                                  
                               
                                  
                                    $thisForm.find('[name="AhstGroupID"]').val(ajaxOutput.AccountTransactionItem.Data[0]['AhstGroupID']);
                                    $thisForm.find('[name="Voucher"]').val(ajaxOutput.AccountTransactionItem.Data[0]['Voucher']);
                                    $thisForm.find('[name="TransDate"]').val(moment(ajaxOutput.AccountTransactionItem.Data[0]['TransDate']).format('YYYY-MM-DD'));
                                    $thisForm.find('[name="EffectDate"]').val(moment(ajaxOutput.AccountTransactionItem.Data[0]['EffectDate']).format('YYYY-MM-DD'));
                                  //  $thisForm.find('[name="AhstChequeDate"]').val(moment(ajaxOutput.AccountTransactionItem.Data[0]['AhstChequeDate']).format('YYYY-MM-DD'));

                                    if (ajaxOutput.AccountTransactionItem.Process.IsProcess) {
                                    
                                        $thisForm.data({pData: ajaxOutput.AccountTransactionItem.Data[0]});
                                        $thisForm.data({ purData: ajaxOutput.AccountTransactionItem.Data });
                                        $thisForm.data({ s: 0 });
                                             
                                        if (ajaxOutput.AccountTransactionItem.Data[0]['AhstChequeDate'] != "1900-01-01T00:00:00") {
                                            $thisForm.find('[name="AhstChequeDate"]').val(moment(ajaxOutput.AccountTransactionItem.Data[0]['AhstChequeDate']).format('YYYY-MM-DD'));
                                        }
                                        else {
                                            $thisForm.find('[name="AhstChequeDate"]').val('');
                                        }                                     
                                        

                                        fn_fillTransactionItem($thisForm, 'Account', ajaxOutput.AccountTransactionItem.Data, AccountTransactionTempOut);
                                        $thisForm.find('[perfect-tempTable="Account"]').find('table').dataTable({ searching: false, paging: false, ordering: false, info: false });
                                    }    

                                    if (ajaxOutput.datares.Process.IsProcess) {
                                       
                                        let taxinfos = ajaxOutput.datares.Data;
                                     
                                        tax1 = [];
                                        tax = [];
                                        tax = tax.concat(taxinfos);
                                      
                                        edit = 1;
                                        $thisForm.data({ prtTaxData: tax });
                                    }


                                    $thisForm.find('[name="Transfer"]').prop('checked', ajaxOutput.AccountTransactionItem.Data[0]['Transfer']);
                                    $thisForm.validate({ messages: validationMessage });
                                    $('#AhstAmount').removeAttr('disabled');
                                    $thisForm.attr('perfect-onFormSuccess', 'fn_loadAccountTransactionList');
                                    $sideMenuOptions.close();
                                    $thisForm.find('button[name=add]').addClass('d-none');
                                    $thisForm.find('button[name=update]').removeClass('d-none');
                                });
                            }
                           
                },

            });
        }

        function fn_fillTransactionItem(ele, tkey, data, tableOptionsTempOut) {
           
            let $thisForm = $(ele).closest('[perfect-class="form"]');
            let tableOptionsTemp = tableOptionsTempOut;
            let insertData = []
            let tableKey = tkey;

            let indexname = tkey + 'index';
            tableOptionsTemp.rowAttribute.push(indexname);
            tableOptionsTemp.hideColumn.push(indexname);

            let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');
            $.each(data, function (keyOne, valOne) {

                let pData = {};

                pData[indexname] = keyOne + 1;
                $tblcontainer.attr('perfect-tempTable-lastindex', pData[indexname])

                $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                    let $this = $(this);
                    let headerName = $this.attr('perfect-tempTable-' + tableKey);
                    let nameAttr = $this.attr('name');
                   
                    if (typeof valOne[nameAttr] !== undefined) {
                      
                        if ($this.is('select')) {
                            debugger;
                            switch (headerName) {
                                case "AhstPaymentMode_d":
                                    headerName = "Payment Mode";
                                    break;
                                case "AhstPaymentMode":
                                    headerName = "Payment Mode";
                                    break;
                                case "AhstBranch":
                                    headerName = "Branch";
                                    break;
                                case "	AhstBranch_d":
                                    headerName = "Branch"
                                
                                default:
                                    break
                            }


                            tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                           
                                tableOptionsTemp.hideColumn.push(nameAttr);
                             
                            pData[nameAttr + '_d'] = $this.find('[value="' + valOne[nameAttr] + '"]').text();
                            pData[nameAttr + '_d'] = valOne[nameAttr];
                        }
                        else if ($this.is('input')) {
                              let inputType = $this.attr('type').toLocaleLowerCase();
                            if (inputType == 'checkbox') {
                                pData[nameAttr] = valOne[nameAttr];
                                tableOptionsTemp.isCheckType.push(nameAttr);
                            }
                            else if (inputType == 'hidden') {
                                switch (nameAttr) {
                                    case "PaymentTotalAmount":
                                        break;
                                    default:
                                        tableOptionsTemp.hideColumn.push(nameAttr);
                                        break;
                                }
                                pData[nameAttr] = valOne[nameAttr];
                            }
                        
                            else if (inputType == 'date') {
                               
                                pData[nameAttr] = moment(valOne[nameAttr]).format('YYYY-MM-DD');


                            }
                            //    debugger;
                               
                            //    if ((nameAttr == "AhstChequeDate") && (valOne.AhstChequeDate =="1900-01-01T00:00:00")){
                            //        pData[nameAttr] = "";
                            //    }
                            //    else {
                            //        pData[nameAttr] = moment(valOne[nameAttr]).format('DD-MM-YYYY');
                            //    }
                            //}
                            else {
                                 pData[nameAttr] = valOne[nameAttr];
                            }
                        }
                        else {
                            pData[nameAttr] = valOne[nameAttr];
                        }
                    }
                });
                

                insertData.push(pData);
             
                
            });
            
            $tblcontainer.append(pft_table_createtable(insertData, tableOptionsTemp));
            BindTotalAmount(ele);

        }

        var AccountTransactionTempOut = {
            iconButton: {
                buttons: [

                    //{
                    //    icon: "fa fa-pencil btnPerfectGridEdit",
                    //    action: function () {
                    //        let savedData = $(this).closest('tr').data('pData')

                    //        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                    //        let tableKey = $tablecontainer.attr('perfect-tempTable');
                    //        let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                    //        //index attribute name in table row
                    //        let indexname = tableKey + 'index';

                    //        //index number in table row
                    //        let rindex = $(this).closest('tr').attr(indexname);

                    //        $tablecontainer.attr('perfect-tempTable-action', rindex);
                    //        BindTotalAmount($tablecontainer);
                    //        //filling data in available inputs
                    //        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                    //            let $thisNode = $(this);
                    //            let pf_name = $thisNode.attr('name');
                    //            if ($thisNode.is('select')) {

                    //                $thisNode.val(savedData[pf_name]).selectpicker('refresh');

                    //            }
                    //            else if ($thisNode.is('input')) {
                    //                let inputType = $thisNode.attr('type').toLocaleLowerCase();
                    //                if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                    //                    $thisNode.prop('checked', savedData[pf_name]);
                    //                }
                    //                //else if ($thisNode.attr('type').toLocaleLowerCase() == 'date') {
                    //                //    $thisNode.val(savedData[pf_name]);
                    //                //}
                    //                else {

                    //                    $thisNode.val(savedData[pf_name]);
                    //                }

                    //            }
                            
                    //            else {
                    //                $thisNode.val(savedData[pf_name]);
                    //            }


                    //        });


                    //        BindTotalAmount($tablecontainer);

                    //    }
                    //},
                    {
                        icon: "fa fa-trash btnPerfectGridDelete",
                        action: function () {
                         
                            let savedData = $(this).closest('tr').data('pData')
                            let $tablecontainer = $(this).closest('[perfect-tempTable]');
                            let $thistbl = $(this).closest('table');
                            let table = $thistbl.DataTable();
                            table.destroy();
                            if ($(this).closest('tbody').find('tr').length > 1) {
                                $(this).closest('tr').remove();
                                pft_table_slreset($thistbl);
                            }
                            else {
                                $thistbl.remove();
                            } $("#refresh").click();
                            BindTotalAmount($tablecontainer);
                            RemoveTaxArray(this, savedData.UID);
                        }
                    },
                ]
            },
            onlyShowColumn: ['Voucher', 'TransType_d', 'AccountHead', 'AccountSubHead', 'AhstNarration', 'AhstChequeNo', 'AhstAmount', 'AhstParty', 'TaxAmount', 'AhstReferenceNo', 'AhstPaymentMode_d', "AhstBranch_d", 'AhstBranch'],
            rowAttribute: [],
            renameHeader: { "Voucher": "Voucher", 'TransType_d': "Trans Type", "AccountHead": "A/c Head", "AccountSubHead": "A/c Sub Head", "AhstNarration": "Remarks", "AhstChequeDate": "Chq. Date", "AhstChequeNo": "Chq. No", "AhstAmount": "Amount", "AhstParty": "Party", "TaxAmount": "Tax", 'AhstReferenceNo': 'Receipt No', 'AhstPaymentMode_d': "Payment Method", "AhstBranch_d": "Branch", "PmMode": "PmMode","AhstBranch" :"Branch"},
            hideColumn: ['UID', 'ID_AccountHeadSubTransaction', 'FK_AccountHead', 'FK_AccountSubHead', 'AccountType_d', 'AccountType', "PmMode", "NetAmount"],
            serialNo: true,
            isDateType: ["TransDate", "EffectDate", "AhstChequeDate"]
        };

        function fn_deleteAccountTransaction() {
         
            let $row = $(this).closest('tr');
            let Saveddata = $row.data('pData');
            let TransMode = AcTransTransMode;

            $('.dataTable tr').removeClass("SelectForDelete");
            $(this).closest('tr').addClass('SelectForDelete');

               $.ajax({
                   url: "@Url.Action("GetAccountTransactionReasonList", "AccountTransaction")",
                   type: "GET",
                   contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                   success: function (ajaxReasonOutput) {
                       if (ajaxReasonOutput.Process.IsProcess) {
                        
                           let confirmationDialogBoxOption = { heading: "Are you Sure?", body: "Do you want to remove this record, Voucher: <b>" + Saveddata.Voucher + " </b>?", cancel: "No", confirm: "Yes", reason: ajaxReasonOutput.Data };
                           var confirmBoxObj = ConfirmDialog(confirmationDialogBoxOption);
                            confirmBoxObj.then(function (selectedOption) {
                                if (selectedOption) {
                                    let inputData = {
                                        __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                                        GroupID: Saveddata.AhstGroupID,
                                        FK_Reason: selectedOption,
                                        TransMode: TransMode
                                       
                                    };
                                    $.ajax({
                                        url: "@Url.Action("DeleteAccountTransaction", "AccountTransaction")",
                                        type: "POST",
                                        data: inputData,
                                        contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                                        success: function (ajaxOutput) {
                                            if (ajaxOutput.Process.IsProcess) {
                                              
                                                let table = $row.closest('table').DataTable()
                                                table.row($row).remove().draw();

                                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                                    NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': 'Deleted Successfully' });
                                                });
                                                fn_Actionindex_load();
                                                $('.dataTable tr').removeClass("SelectForDelete");
                                            }
                                            else {
                                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                                    $('.dataTable tr').removeClass("SelectForDelete");
                                                });
                                            }
                                        }
                                    });
                                }
                                else {
                                    NotificationMessage({'message': 'No option selected' });
                                }
                            });
                        }
                        else {
                        }
                   }

               });
        };
    </script>



}