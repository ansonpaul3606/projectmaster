
@{
    ViewBag.Title = "Index";
}


<div class="container-fluid">

    @Html.AntiForgeryToken()  @*//antiforgery token*@

    <div class="row">

        <div class="col-lg-12" id="jq_BOMProjectContainer">

        </div>
    </div>


</div>
@section scripts{
    <script type="text/javascript">

        $(document).ready(function () {

            fn_BOMProject_initialload();


        });
        function fn_BOMProject_initialload() {

            BOMProjectTransMode = "";

            BOMProjectTransMode = '@ViewBag.TransMode';
          
            fn_BOMProjectlist(this);
                fn_loadBOMProjectAddForm();


        }
        var LastID_BOMProject;
        const $formContainer = $('#jq_BOMProjectContainer');
        function fn_loadBOMProjectAddForm() {


            $formContainer.load('@Url.Action("LoadBOMProject", "BOMProject")?mtd=@ViewBag.mtd', function () {
                 let $thisForm = $(this).find('[perfect-class="form"]');


                $thisForm.find('[name="EffectDate"]').val(moment().format('YYYY-MM-DD'));
             
                $thisForm.validate({ messages: validationMessage });
                $thisForm.attr('perfect-onFormSuccess', 'fn_BOMProject_initialload');
                initFunctions($thisForm);
              

            });
        }
        var validationMessage = {

           

            'EffectDate': {
                'required': 'Please Enter Effect Date',
                'max': jQuery.validator.format('Future Date Not Allowed')
            },
            'CategoryID': {
                'required': 'Please Select  Category',

            },
            'BOMName': {
                'required': 'Enter Name',

            }


        };



        var tableOptions = {
        dropdown: {
            buttons: [



                    @if (ViewBag.PagedAccessRights.UsrrlMsView) {
        <text> { displayName: "View", action: editBOMProject },</text>
    }

    { type: "divider" },
    @if (ViewBag.PagedAccessRights.UsrrlMsDel) {
        <text> { displayName: "Delete", action: DeleteBOMProject },</text>

    }

         ],
         class: "btn btn-success light sharp"
     },
            onlyShowColumn: ["SlNo", "BOMDate", "CategoryName", "BOMName"],
     hideColumn: [],
     rowClickAction: editBOMProject,
     serialNo: false,
    renameHeader: {
        "SlNo": "SlNo", "BOMDate": "Date", "CategoryName": "Category","BOMName":"Name"},
     isDateType: ["BOMDate"],
        };




          function fn_BOMProjectlist(ele)
        {
            debugger
            let $sidemenu = $sideMenuOptions.body;
            let $thisForm = $(ele).closest('.testSearchBox');
            let SearchName = $thisForm.find('input').val();
     
             $sideMenuOptions.title.find('h4').text('@ViewBag.PageTitle'+' '+'List');
            let pageUrl = "@Url.Action("GetBOMProjectList", "BOMProject")";
            $.ajax({
                url:pageUrl,
                type: "POST",
                data: { pageSize: 15, pageIndex: 0, Name: SearchName, TransMode: BOMProjectTransMode},
                dataType: "json",
                contentType: "application/x-www-form-urlencoded; charset=utf-8",
                success: function (ajaxOutput) {

                    console.log(ajaxOutput, 'ajaxOutput>>>>2');
                    console.log("tableoption123", tableOptions)
                    if (ajaxOutput.Process.IsProcess) {
                       
                        $sidemenu.empty().append('<div class="d-flex justify-content-end mb-2 position-relative"><div class="col-md-6 position-absolute top-1 z-index"> <div class="input-group testSearchBox"><input type="text" class="form-control " name="SearchName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input"  /><div class="input-group-append"><button id="addcountry-jq-searchButton6" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="fn_BOMProjectlist(this)"></button></div></div></div></div>', $('<div/>', { class: "col-md-12 table_temp_class" }).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))
                        let $table = $sidemenu.find('table');
                        $table.dataTable({
                            "serverSide": true,
                            "processing": true,
                            "lengthMenu": [10, 15, 20, 25, 50, 100],
                            "searching": false,
                            "ordering": false,
                            "deferLoading": ajaxOutput.totalrecord,
                            "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,
                            "pageLength": ajaxOutput.pageSize,
                            "recordsFiltered": ajaxOutput.pageSize,
                            "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize, searchkey: SearchName, TransMode: BOMProjectTransMode }, tableOptions, $table)
                        });

                    }
                    else {
                        if (ajaxOutput.Process.Status = "NoData") {
                            $sidemenu.find('.jq_sidemenu_title').text("Language");
                            $sidemenu.empty().append('<div class="d-flex justify-content-end mb-2"><div class="col-md-6 position-absolute top-1 z-index"> <div class="input-group testSearchBox"><input type="text" class="form-control " name="SearchName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input"  /><div class="input-group-append"><button id="addcountry-jq-searchButton6" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="fn_BOMProjectlist(this)"></button></div></div></div></div>', $('<div/>', { class: "col-md-12 table_temp_class" }).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))

                            let $table = $sidemenu.find('table');
                            $table.dataTable({
                                "serverSide": true,
                                "processing": true,
                                "lengthMenu": [],
                                "searching": false,
                                "ordering": false,
                                "deferLoading": ajaxOutput.totalrecord,
                                "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,
                                "pageLength": ajaxOutput.pageSize,
                                "recordsFiltered": ajaxOutput.pageSize,

                                "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize, searchkey: SearchName, TransMode: BOMProjectTransMode }, tableOptions, $table)
                            });
                        }
                        else {
                            $.each(ajaxOutput.Process.Message, function (key, value) { NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value }); });
                        }
                    }
                },
                complete: function () {}
            })
            
        };

        function returnajaxPagination(ajaxInfo, tableOptions, tableid) {
            //{ apiurl, pageSize }
            return {
                url: ajaxInfo.apiurl,
                type: "post",
                data: function () {
                    var info = tableid.DataTable().page.info();
                    console.log('RETURN AJAX', info)

                    let input = { pageSize: info.length, pageIndex: info.page };
                    if (ajaxInfo.searchkey) {
                        input["Name"] = ajaxInfo.searchkey;
                    }
                    return input
                },
                dataType: "json",
                contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                success: function (dtajaxOutput) {

                    let table = tableid.DataTable();
                    table.destroy();
                    pft_table_newTableBody(tableid, dtajaxOutput.Data, tableOptions);

                    tableid.dataTable({
                        "serverSide": true,
                        "processing": true,

                        "lengthMenu": [10, 15, 20, 25, 50, 100],
                        "searching": false,
                        "ordering": false,
                        "deferLoading": dtajaxOutput.totalrecord,
                        "displayStart": dtajaxOutput.pageIndex * dtajaxOutput.pageSize,
                        "pageLength": dtajaxOutput.pageSize,
                        "recordsFiltered": dtajaxOutput.pageSize,
                        "ajax": returnajaxPagination(ajaxInfo, tableOptions, tableid)
                    })

                },

            }
        }


        function editBOMProject() {
             let row = $(this).closest('tr');

        let Saveddata = row.data('pData');
        $('.dataTable tr').removeClass("SelectForDelete");
        $(this).closest('tr').addClass('SelectForDelete');
           
        console.log("Saved data", Saveddata);
        let inputData = {
            __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
            FK_BOMProject: Saveddata.ID_BOMProject,
            TransMode: BOMProjectTransMode

        };

        $.ajax({
            url: '@Url.Action("GetBOMProjectInfoByID", "BOMProject")',
            type: "POST",

            data: inputData,
            dataType: "json",
            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            success: function (ajaxOutput) {
                debugger;

               // console.log("Return", ajaxOutput.ProductDetails.Data[0]);
                if (ajaxOutput) {

                    console.log('>_ Inside GetBOMProjectInfo', ajaxOutput)


                    $formContainer.load("@Url.Action("LoadBOMProject", "BOMProject")?mtd=@ViewBag.mtd", function () {

                        $(this).find('[perfect-class=formTitle]').text('update : ')
                        console.log('Inside load');

                        let $thisForm = $(this).find('[perfect-class="form"]');

                       

                        $thisForm.validate({ messages: validationMessage });

                        $thisForm.data({ pData: ajaxOutput.Data[0].BOMProjectProductDetails });
                      


                        $thisForm.find('[name="ID_BOMProject"]').val(ajaxOutput.Data[0].ID_BOMProject),
                       
                        
                         $thisForm.find('[name="EffectDate"]').val(moment(ajaxOutput.Data[0].BOMDate).format('YYYY-MM-DD'));
                        $thisForm.find('[name="CategoryID"]').val(ajaxOutput.Data[0].CategoryID),
                            $thisForm.find('[name="BOMName"]').val(ajaxOutput.Data[0].BOMName),
                       
                        fn_fillBOMProjectDetails($thisForm, 'ProductType', ajaxOutput.Data[0].BOMProjectProductDetails, tableOptionsTempOut);

                       
                        $sideMenuOptions.close();
                        $thisForm.find('button[name=add]').addClass('d-none');
                        $thisForm.find('button[name=update]').removeClass('d-none');
                        $thisForm.find('button[name=viewprint]').removeClass('d-none');
                        $thisForm.attr('perfect-onFormSuccess', 'fn_EmployeeRelieving_initialLoad');

                    });
                }
                else {
                    console.log('>_ Inside GetSiteVisitInfo :false')

                    $.each(ajaxOutput.Process.Message, function (key, value) {
                        NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                    });
                }

                //  loadSiteVisitList()
            },

        });

        }
        function fn_fillBOMProjectDetails(ele, tkey, data, tableOptionsTempOut) {

            let $thisForm = $(ele)

            let tableOptionsTemp = tableOptionsTempOut;
            let insertData = []
            let tableKey = tkey;

            let indexname = tkey + 'index';
            tableOptionsTemp.rowAttribute.push(indexname);
            tableOptionsTemp.hideColumn.push(indexname);

            let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');
            $thisForm.find('[perfect-tempTable="' + tableKey + '"]').empty();


            $.each(data, function (keyOne, valOne) {

                let pData = {};

                pData[indexname] = keyOne + 1;
                $tblcontainer.attr('perfect-tempTable-lastindex', pData[indexname])
                //---

                $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                    let $this = $(this);
                    let headerName = $this.attr('perfect-tempTable-' + tableKey);
                    let nameAttr = $this.attr('name');
                    console.log('name', valOne[nameAttr])
                    if (typeof valOne[nameAttr] !== undefined) {

                        if ($this.is('select')) {


                            tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                            tableOptionsTemp.hideColumn.push(nameAttr);
                            //displat text of select

                            let selectText = ($this.val().length == 1) ? '' : $this.find('[value="' + valOne[nameAttr] + '"]').text();

                            pData[nameAttr + '_d'] = selectText;
                            pData[nameAttr] = valOne[nameAttr];
                            console.log('select', $this.find('options[value="' + valOne[nameAttr] + '"]').text());
                            console.log('selectText', $this.find('[value="' + valOne[nameAttr] + '"]').text());

                        }
                        else if ($this.is('input')) {

                            let inputType = $this.attr('type').toLocaleLowerCase();
                            console.log('inputType', inputType)
                            if (inputType == 'checkbox') {

                                pData[nameAttr] = valOne[nameAttr];

                                tableOptionsTemp.isCheckType.push(nameAttr);

                                console.log('checkbox', nameAttr)


                            }
                            else if (inputType == 'hidden') {

                                tableOptionsTemp.hideColumn.push(nameAttr);
                                pData[nameAttr] = valOne[nameAttr];


                            }

                            else if (inputType == 'date') {


                                pData[nameAttr] = moment(valOne[nameAttr]).format('DD-MM-YYYY');


                            }
                            else {
                                pData[nameAttr] = valOne[nameAttr];


                            }
                        }
                        else {
                            pData[nameAttr] = valOne[nameAttr];


                        }
                    }



                });

                insertData.push(pData);
                console.log('insertdata', insertData)

                //----

            });

            $tblcontainer.append(pft_table_createtable(insertData, tableOptionsTemp));


        }
        function DeleteBOMProject() {
            let $row = $(this).closest('tr');


            let Saveddata = $row.data('pData');
               console.log("Saved data", Saveddata);
               $('.dataTable tr').removeClass("SelectForDelete");
               $(this).closest('tr').addClass('SelectForDelete');
                $.ajax({
                    url: "@Url.Action("GetBOMProjectReasonList", "BOMProject")",
                    type: "GET",
                    // data: inputReason,
                    contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                    success: function (ajaxReasonOutput) {
                        if (ajaxReasonOutput.Process.IsProcess) {

                            console.log('Inside res ajax', ajaxReasonOutput.Data)


                            //delete code

                            let confirmationDialogBoxOption = { heading: "Are you Sure?", body: "Do you want to remove  " + '' + " ?", cancel: "No", confirm: "Yes", reason: ajaxReasonOutput.Data };

                            var res = ConfirmDialog(confirmationDialogBoxOption);



                            res.then(function (ret) {
                                if (ret) {

                                    let inputData = {
                                        __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                                        ID_BOMProject: Saveddata.ID_BOMProject,
                                        ReasonID: ret
                                    };


                                    $.ajax({
                                        url: "@Url.Action("DeleteBOMProject", "BOMProject")",
                                        type: "POST",
                                        data: inputData,
                                        contentType: 'application/x-www-form-urlencoded;charset=utf-8',
                                        success: function (ajaxOutput) {

                                            if (ajaxOutput.Process.IsProcess) {

                                                $.each(ajaxOutput.Process.Message, function (key, value) {

                                                    NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': 'Deleted Successfully' });
                                                });

                                                //removing a data
                                                let table = $row.closest('table').DataTable()
                                                table.row($row).remove().draw();
                                                $('.dataTable tr').removeClass("SelectForDelete");
                                            }
                                            else {
                                                $.each(ajaxOutput.Process.Message, function (key, value) {

                                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                                    $('.dataTable tr').removeClass("SelectForDelete");
                                                });
                                            }

                                        }
                                    });


                                }
                                else {

                                    NotificationMessage({ 'message': 'No option selected' });
                                }

                            });

                            //-----delete code

                        }
                    }
                    });

        };
      </script>  
        }


