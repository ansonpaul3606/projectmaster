
@{
    ViewBag.Title = "Complaint List";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="container-fluid">

    <div class="row">
        <div class="col-lg-12" id="complaint-sample-form">

        </div>
    </div>


</div>
@section scripts{
    <script>

        $(document).ready(function () {
            Innitialcomplaintform();
        });

        function Innitialcomplaintform() {
           
               @if (ViewBag.PagedAccessRights.UsrrlMsView)
              {
                 <text> loadComplaintList(this); </text>
              }
            loadcomplaintlistForm();
        }



        var tableOptions = {
            dropdown: {
                buttons: [

                
               @if (ViewBag.PagedAccessRights.UsrrlMsView) {
        <text> { displayName: "View", action: editComplaint },</text>
    }

                    { type: "divider" },
     @if (ViewBag.PagedAccessRights.UsrrlMsDel)
             {
                 <text> { displayName: "Delete", action: deleteComplaint },</text>

              }
                    
                ],
                class: "btn btn-success light sharp"
            },
            onlyShowColumn: ["ComplaintName", "ShortName","ComplaintTypeName","ComplaintPriority"],
            hideColumn: [], 
            rowClickAction: editComplaint,
            renameHeader: { "SlNo": "SL NO", "ComplaintName": "Name", "CountryShortName": "ShortName", "ComplaintTypeName": "Complaint Type","ComplaintPriority":"Priority"},
            serialNo: true,
        };
        var validationMessage = {
            'ComplaintName': {
                'required': 'Please Enter  Name',
                'stringonly': 'Invalid Complaint Name selected',
            },
            'ComplaintShortName': {
                'required': 'Please Enter Short Name',
                'alphanumeric': 'Invalid Complaint Short Name selected',
            },           
            'ComplaintType': {
                'required': 'Please Select Complaint Type',
            },
            'Priority': {
                'required': 'Please Enter Priority',
                'alphanumeric': 'Invalid Priority selected',

            },
        }


       

        

        function loadcomplaintlistForm()
        {

            $('#complaint-sample-form').load("@Url.Action("LoadComplaintListForm", "ComplaintList")?mtd=@ViewBag.mtd", function () {


                let $thisForm = $(this).find('[perfect-class="form"]');
                $thisForm.validate({ messages: validationMessage});
                $thisForm.attr('perfect-onFormSuccess', 'Innitialcomplaintform');
                initFunctions($thisForm);
               
            });
        }

        @*function loadComplaintList() {
            debugger
            let $sidemenu = $sideMenuOptions.body;
            $sideMenuOptions.title.find('h4').text('Complaint list');
        //    alert("ss")

            $.ajax({
                url: "@Url.Action("GetComplaintList", "ComplaintList")",
                type: "Get",
                headers: { "token_key": "1234" },
                //data: { branchID: id },
                dataType: "json",
                contentType: "application/json",
                success: function (ajaxOutput) {
                    if (ajaxOutput.Process.IsProcess) {


                        $sideMenuOptions.body.html(pft_table_createtable(ajaxOutput.Data, tableOptions))
                        $sidemenu.find('table').dataTable({ searching: false, paging: false, ordering: false, info: false });

                        console.log('Load Complaint List', ajaxOutput);
                        $.each(ajaxOutput.Process.Message, function (key, value) {
                        });
                    }
                    else {
                        if (ajaxOutput.Process.Status == 'NoData') { }
                        else {
                            $.each(ajaxOutput.Process.Message, function (key, value) {
                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                            });
                        }
                    }

                    console.log('Complaint Load', ajaxOutput);
                },
                complete: function () {

                }
            });
        }*@

        function loadComplaintList(ele) {
            debugger;
        let $sidemenu = $sideMenuOptions.body;
            let $thisForm = $(ele).closest('.testSearchBox');
            let SearchName = $thisForm.find('input').val();
            if (SearchName == undefined) {
                SearchName = "";
            }
          //  $sideMenuOptions.title.find('h4').text('Complaint List');
             $sideMenuOptions.title.find('h4').text('@ViewBag.PageTitle'+' '+'List');
             let pageUrl = '@Url.Action("GetComplaintList", "ComplaintList")';
            $.ajax({
                url:pageUrl,
                type: "POST",
                data: { pageSize: 15, pageIndex: 0, Name: SearchName},
                dataType: "json",
                contentType: "application/x-www-form-urlencoded; charset=utf-8",
                success: function (ajaxOutput) {
                    if (ajaxOutput.Process.IsProcess) {

                    
                        $sidemenu.find('.jq_sidemenu_title').text("Complaint List");
                        $sidemenu.empty().append('<div class="d-flex justify-content-end mb-2 position-relative"><div class="col-md-6 position-absolute top-1 z-index"> <div class="input-group testSearchBox"><input type="text" class="form-control " name="SearchName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input"  /><div class="input-group-append"><button id="addcountry-jq-searchButton6" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="loadComplaintList(this)"></button></div></div></div></div>', $('<div/>', {class:"col-md-12 table_temp_class"}).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))
                              let $table = $sidemenu.find('table');
                              $table.dataTable({
                                  "serverSide": true,
                                  "processing": true,
                                  "lengthMenu": [10, 15, 20, 25, 50, 100],
                                  "searching": false,
                                  "ordering": false,
                                  "deferLoading": ajaxOutput.totalrecord,
                                  "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,
                                  "pageLength": ajaxOutput.pageSize,
                                  "recordsFiltered": ajaxOutput.pageSize,
                                  "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize, searchkey: SearchName}, tableOptions, $table)
                              });
                          }
                          else
                          {
                            if (ajaxOutput.Process.Status = "NoData") {
                                $sidemenu.find('.jq_sidemenu_title').text("Complaint List");

                                $sidemenu.empty().append('<div class="d-flex justify-content-end mb-2"><div class="col-md-6 position-absolute top-1 z-index"> <div class="input-group testSearchBox"><input type="text" class="form-control " name="SearchName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input"  /><div class="input-group-append"><button id="addcountry-jq-searchButton6" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="loadComplaintList(this)"></button></div></div></div></div>', $('<div/>', { class: "col-md-12 table_temp_class" }).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))

                                let $table = $sidemenu.find('table');
                                $table.dataTable({
                                    "serverSide": true,
                                    "processing": true,
                                    "lengthMenu": [0],
                                    "searching": false,
                                    "ordering": false,
                                    "deferLoading": ajaxOutput.totalrecord,
                                    "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,
                                    "pageLength": ajaxOutput.pageSize,
                                    "recordsFiltered": ajaxOutput.pageSize,
                                    "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize, searchkey: SearchName}, tableOptions, $table)
                                });
                            }
                            else {
                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                });
                            }
                          }
            },
            complete: function () {

            }
        });
        }
        function returnajaxPagination(ajaxInfo, tableOptions, tableid) {
            //{ apiurl, pageSize }
            return {
                url: ajaxInfo.apiurl,
                type: "post",
                data: function () {
                    var info = tableid.DataTable().page.info();
                    console.log('RETURN AJAX', info)
                    //return { <antiforgery>:<antiforgery>, length: ajaxInfo.pageSize, page: info.page }
                    let input = { pageSize: info.length, pageIndex: info.page };
                    if (ajaxInfo.searchkey) {
                        input["Name"] = ajaxInfo.searchkey;
                    }
                    return input
                },
                dataType: "json",
                contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                success: function (dtajaxOutput) {
                    // $sideMenuOptions.body.html(pft_table_createtable(dtajaxOutput.Data, tableOptions));
                    let table = tableid.DataTable();
                    table.destroy();
                    pft_table_newTableBody(tableid, dtajaxOutput.Data, tableOptions);

                    tableid.dataTable({
                        "serverSide": true,
                        "processing": true,
                        //"lengthChange": false,
                        "lengthMenu": [10, 15, 20, 25, 50, 100],
                        "searching": false,
                        "ordering": false,
                        "deferLoading": dtajaxOutput.totalrecord,
                        "displayStart": dtajaxOutput.pageIndex * dtajaxOutput.pageSize,
                        "pageLength": dtajaxOutput.pageSize,
                        "recordsFiltered": dtajaxOutput.pageSize,
                        "ajax": returnajaxPagination(ajaxInfo, tableOptions, tableid)
                    })

                },

            }
        }
        function editComplaint() {  


            let $thisUser = $(this).closest('tr');
             let savedData = $thisUser.data('pData');


             $('.dataTable tr').removeClass("SelectForDelete");
             $(this).closest('tr').addClass('SelectForDelete');
            
            let inputData = {
                __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                ID_ComplaintList: savedData.ID_ComplaintList
            };
             console.log(inputData);
            //dbcall
           //$('#complaint-sample-form').empty();
                    $.ajax({
                 url: '@Url.Action("GetComplaintInfo", "ComplaintList")',//<----- Controller URL : url path in our controller eq: /Home/InsertSampleData or http://localhost:64212/Home/InsertSampleData
                type: "POST",
                 // headers: { "token_key": "1234" },
                 data: JSON.stringify(inputData),//<---- Input json : data passed to controller
                dataType: "json",
                contentType: "application/json",
                        success: function (ajaxOutput) {//<----- if ajax method executed succesfully,  we get the data passed from controller in this variable  => success: function (variable) {

                         ///success
                            if (ajaxOutput.Process.IsProcess) {

                                $('#complaint-sample-form').load("@Url.Action("LoadComplaintListForm", "ComplaintList")?mtd=@ViewBag.mtd", function () {
                                    $(this).find('[perfect-class=formTitle]').text('update : ' + ajaxOutput.Data[0].ComplaintName)
                                    console.log('Inside load');
                                    let $thisForm = $(this).find('[perfect-class="form"]');

                                    $thisForm.data({ 'pData': ajaxOutput.Data[0] });//setting pdata : which is used to get PostID when updating the  form in partial page

                                    $thisForm.validate({ messages: validationMessage });
                                    $thisForm.find('[name=ComplaintName]').val(ajaxOutput.Data[0].ComplaintName),
                                        $thisForm.find('[name=ComplaintShortName]').val(ajaxOutput.Data[0].ShortName),
                                        $thisForm.find('[name=SortOrder]').val(ajaxOutput.Data[0].SortOrder),
                                        $thisForm.find('[name=Priority]').val(ajaxOutput.Data[0].ComplaintPriority)
                                    $thisForm.find('[name="ComplaintType"]').val(ajaxOutput.Data[0].ComplaintType).selectpicker('refresh'); 
                                    $thisForm.find('button[name=add]').addClass('d-none');
                                    $thisForm.find('button[name=update]').removeClass('d-none');

                                    $thisForm.attr('perfect-onFormSuccess', 'Innitialcomplaintform');

                                    $sideMenuOptions.close();

                                });
                            }
                            else {
                                $.each(ajaxOutput.Process.Message, function (key, value) {

                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                    //$('.dataTable tr').removeClass("SelectForDelete");
                                });
                            }

                },


            });

        }





        function deleteComplaint() {
            let $row = $(this).closest('tr');

            let Saveddata = $row.data('pData');

            $('.dataTable tr').removeClass("SelectForDelete");
            $(this).closest('tr').addClass('SelectForDelete');
    
               $.ajax({
                   url: "@Url.Action("GetComplaintDeleteReasonList", "ComplaintList")",
                   type: "GET",
                   contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                   success: function (ajaxReasonOutput) {
                       if (ajaxReasonOutput.Process.IsProcess) {

                          //old delete section


                           let confirmationDialogBoxOption = { heading: "Are you Sure?", body: "Do you want to remove " + Saveddata.ComplaintName + " ?", cancel: "No", confirm: "Yes", reason: ajaxReasonOutput.Data };
                            var res = ConfirmDialog(confirmationDialogBoxOption);
                            res.then(function (ret) {
                                if (ret) {

                                    let inputData = {
                                       __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(), //antiforgery token
                                        ID_ComplaintList: Saveddata.ID_ComplaintList,
                                        ReasonID: ret
                                    };

                                    $.ajax({
                                        url: "@Url.Action("DeleteComplaint", "ComplaintList")",
                                        type: "POST",
                                        data: inputData, //antiforgery token removed json.stringify
                                        contentType: "application/x-www-form-urlencoded; charset=utf-8",//antiforgery token changed json->x-www-form-urlencode...
                                        success: function (data) {

                                            if (data.Process.IsProcess) {
                                                let table = $row.closest('table').DataTable()
                                                table.row($row).remove().draw();
                                                //loadcomplaintlistForm();
                                                Innitialcomplaintform();
                                                $.each(data.Process.Message, function (key, value) {
                                                    //toastr.success(value, "Success");
                                                    NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message':'Deleted Successfully' });
                                                });
                                                $('.dataTable tr').removeClass("SelectForDelete");
                                            }
                                            else {
                                                $.each(data.Process.Message, function (key, value) {
                                                    // toastr.warning(value, "Error");
                                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                                    $('.dataTable tr').removeClass("SelectForDelete");
                                                });
                                            }
                                            //row.remove();
                                            //$(row).closest('table').reload()
                                            
                           
                                        }
                                    });
                                }
                                else {
                                    //toastr.warning("Clicked no in comfirmation box", "Confirmation Box in table");
                                    NotificationMessage({ 'message': 'No option selected' });
                                }
                            });

                           //old delete section

                    }
                }

            });




        };


















        

    </script>




}
