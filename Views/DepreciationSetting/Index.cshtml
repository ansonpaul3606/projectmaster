
@{
    ViewBag.Title = "";
}

<div class="container-fluid">
    @Html.AntiForgeryToken()

    <div class="row">
        <div class="col-lg-12" id="DepreciationSettings-form">
        </div>
    </div>
</div>
@section scripts{

    <script type="text/javascript">
    const $formContainer = $('#DepreciationSettings-form');


        $(document).ready(function () {
            DepreciationSettingsInitialLoad();


        });
    function DepreciationSettingsInitialLoad() {
            loadDepreciationSettingsListAddForm();
            @if (ViewBag.PagedAccessRights.UsrrlMsView)
             {
                <text> DepreciationSettingsList(this); </text>
             }
        }

    function loadDepreciationSettingsListAddForm() {

            $formContainer.load('@Url.Action("LoadDepreciationSettings", "DepreciationSetting")',function () {

                let $thisForm = $(this).find('[perfect-class="form"]');
                $thisForm.find('[name="EffectDate"]').val(moment().format('YYYY-MM-DD'));
                $thisForm.validate({ messages: validationMessage });
                var today = new Date().toISOString().split('T')[0];
                document.getElementsByName("EffectDate")[0].setAttribute('min', today);

                $thisForm.attr('perfect-onFormSuccess', 'DepreciationSettingsInitialLoad');

            });
        }

    var validationMessage = {

        'EffectDate': {
            'required': 'Please Enter Effect Date',
            'min': jQuery.validator.format('Please Enter a Valid Date')
        },
  
        'ModeType': {
            'required': 'Please Select Mode',
            'digits': 'Invalid Mode selected'
        }
      

    };

        
        function DepreciationSettingsList(ele) {


        let $sidemenu = $sideMenuOptions.body;
       
      

        let $thisForm = $(ele).closest('.testSearchBox');
        let SearchName = $thisForm.find('input').val();
        console.log("GH",SearchName)
            $sideMenuOptions.title.find('h4').text('Depreciation Settings List');
          let pageUrl = '@Url.Action("GetDepreciationSettingsList", "DepreciationSetting")';
            $.ajax({
                url:pageUrl,
                type: "POST",
                data: { pageSize: 15, pageIndex: 0, Name: SearchName },
                dataType: "json",
                contentType: "application/x-www-form-urlencoded; charset=utf-8",
                success: function (ajaxOutput) {

                    debugger
                          if (ajaxOutput.Process.IsProcess) {
                              //console.log('ProductRateSettings', ajaxOutput);
                              $sidemenu.find('.jq_sidemenu_title').text("DepreciationSetting");

                              $sidemenu.empty().append('<div class="d-flex justify-content-end mb-2 position-relative"><div class="col-md-6 position-absolute top-1 z-index"> <div class="input-group testSearchBox"><input type="text" class="form-control " name="SearchName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input"  /><div class="input-group-append"><button id="addcountry-jq-searchButton6" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="DepreciationSettingsList(this)"></button></div></div></div></div>', $('<div/>', {class:"col-md-12 table_temp_class"}).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))
                             // $sidemenu.find('table').dataTable({ paging: true });


                              let $table = $sidemenu.find('table');
                              $table.dataTable({
                                  "serverSide": true,//no change
                                  "processing": true,//-- process text when clicked
                                  //"lengthChange": false,
                                  "lengthMenu": [10, 15, 20, 25, 50, 100],//---drop down page size
                                  "searching": false,//--no change
                                  "ordering": false,//--sorting
                                  "deferLoading": ajaxOutput.totalrecord,//<----to total number of record from db
                                  "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,//<----starting record
                                  "pageLength": ajaxOutput.pageSize,//<----page size
                                  "recordsFiltered": ajaxOutput.pageSize,//<---page size

                                  "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize, searchkey: SearchName }, tableOptions, $table)
                              });

                          }
                else {
                              if (ajaxOutput.Process.Status = "NoData") {
                                 
                                  $sidemenu.find('.jq_sidemenu_title').text("DepreciationSetting");

                                  $sidemenu.empty().append('<div class="d-flex justify-content-end mb-2"><div class="col-md-6 position-absolute top-1 z-index"> <div class="input-group testSearchBox"><input type="text" class="form-control " name="SearchName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input"  /><div class="input-group-append"><button id="addcountry-jq-searchButton6" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="DepreciationSettingsList(this)"></button></div></div></div></div>', $('<div/>', { class: "col-md-12 table_temp_class" }).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))
                        // $sidemenu.find('table').dataTable({ paging: true });


                        let $table = $sidemenu.find('table');
                        $table.dataTable({
                            "serverSide": true,//no change
                            "processing": true,//-- process text when clicked
                           // "lengthChange": false,
                           "lengthMenu": [0],//---drop down page size
                            "searching": false,//--no change
                            "ordering": false,//--sorting
                            "deferLoading": ajaxOutput.totalrecord,//<----to total number of record from db
                            "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,//<----starting record
                            "pageLength": ajaxOutput.pageSize,//<----page size
                            "recordsFiltered": ajaxOutput.pageSize,//<---page size

                            "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize }, tableOptions, $table)
                        });
                    }
                    else {
                        $.each(ajaxOutput.Process.Message, function (key, value) {
                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                        });
                    }
                }




            },
            complete: function () {

            }
        });
    }


        function returnajaxPagination(ajaxInfo, tableOptions, tableid) {
            //{ apiurl, pageSize }
            return {
                url: ajaxInfo.apiurl,
                type: "post",
                data: function () {
                    var info = tableid.DataTable().page.info();
                    console.log('RETURN AJAX', info)
                    //return { <antiforgery>:<antiforgery>, length: ajaxInfo.pageSize, page: info.page }
                    let input = { pageSize: info.length, pageIndex: info.page };
                    if (ajaxInfo.searchkey) {
                        input["Name"] = ajaxInfo.searchkey;
                    }
                    return input
                },
                dataType: "json",
                contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                success: function (dtajaxOutput) {
                    // $sideMenuOptions.body.html(pft_table_createtable(dtajaxOutput.Data, tableOptions));
                    let table = tableid.DataTable();
                    table.destroy();
                    pft_table_newTableBody(tableid, dtajaxOutput.Data, tableOptions);

                    tableid.dataTable({
                        "serverSide": true,
                        "processing": true,
                        //"lengthChange": false,
                        "lengthMenu": [10, 15, 20, 25, 50, 100],
                        "searching": false,
                        "ordering": false,
                        "deferLoading": dtajaxOutput.totalrecord,
                        "displayStart": dtajaxOutput.pageIndex * dtajaxOutput.pageSize,
                        "pageLength": dtajaxOutput.pageSize,
                        "recordsFiltered": dtajaxOutput.pageSize,
                        "ajax": returnajaxPagination(ajaxInfo, tableOptions, tableid)
                    })

                },

            }
        }


            var tableOptions = {
            dropdown: {
                buttons: [
                  @if (ViewBag.PagedAccessRights.UsrrlStView)
                   {
                     <text> { displayName: "View", action: editDepreciationSettings },</text>
                   }
                    { type: "divider" },
                   @if (ViewBag.PagedAccessRights.UsrrlStDel)
                    {
                     <text>{ displayName: "Delete", action: deleteDepreciationSettings },</text>
                    }
                ],
                class: "btn btn-success light sharp"
                }, 
                
         onlyShowColumn: ["SlNo", "EffectDate","ModeType"],
        hideColumn: [],
                rowClickAction: editDepreciationSettings,
        isDateType: ["EffectDate"],
                renameHeader: {"ModeType":"Mode" }

    };

        function editDepreciationSettings()
        {          
            let $thisMenu = $(this).closest('tr');
            let savedData = $thisMenu.data('pData');

            $('.dataTable tr').removeClass("SelectForDelete");
            $(this).closest('tr').addClass('SelectForDelete');            

            let inputData =
            {
                __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                FK_DepreciationSettings: savedData.ID_DepreciationSettings
            };

                $.ajax({
                 url: '@Url.Action("GetDepreciationsettingsInfo", "DepreciationSetting")',
                type: "POST",
                 data: inputData,
                dataType: "json",
                    contentType: 'application/x-www-form-urlencoded;charset=utf-8',
                    success: function (ajaxOutput) {                      
                        if (ajaxOutput.Process.IsProcess) {
                            debugger
                            console.log('ajaxOutput', ajaxOutput)
                            $formContainer.load('@Url.Action("LoadDepreciationSettings", "DepreciationSetting")', function () 
                            {                               
                                $(this).find('[perfect-class=formTitle]').text('update')
                              
                                let $thisForm = $(this).find('[perfect-class="form"]');
                                $thisForm.validate({ messages: validationMessage });
                                $thisForm.data({ pData: ajaxOutput.Data[0] });
                                $thisForm.find('[name=ID_DepreciationSettings]').val(ajaxOutput.Data[0].ID_DepreciationSettings);
                                $thisForm.find('[name="EffectDate"]').val(moment(ajaxOutput.Data[0].EffectDate).format('YYYY-MM-DD'));
                                $thisForm.find('[name=Mode]').val(ajaxOutput.Data[0].Mode).selectpicker('refresh'),
                                $thisForm.find('[name=Mode]').val(ajaxOutput.Data[0].Mode);
                                $thisForm.find('[name=ModeType]').val(ajaxOutput.Data[0].ModeType),

                                $thisForm.find('[name=MnuLstVisible]').prop('checked', ajaxOutput.Data[0].Active)
                                
                              
                                ComDetailsTable_Fill($thisForm, 'DepreciationDT', ajaxOutput.Data[0].DepreciationSettingsDetails, tableOptionsTempOutFill)
                               
                                $sideMenuOptions.close();
                                $thisForm.attr('perfect-onFormSuccess', 'DepreciationSettingsInitialLoad');
                                $thisForm.find('button[name=add]').addClass('d-none');
                                $thisForm.find('button[name=update]').removeClass('d-none');
                              
                                $("#divTempTableDepreciationSettings").find("*").prop("disabled", true);
                     });
                 }
                 else {
                     $.each(ajaxOutput.Process.Message, function (key, value) {
                         NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                         $('.dataTable tr').removeClass("SelectForDelete");
                     });
                 }
             },

            });

    }


        var tableOptionsTempOutFill = {
            //iconButton: {
            //    buttons: [

            //        {
            //            icon: "fa fa-pencil btnPerfectGridEdit",
            //            action: function () {
            //                let savedData = $(this).closest('tr').data('pData')

            //                let $tablecontainer = $(this).closest('[perfect-tempTable]');
            //                let tableKey = $tablecontainer.attr('perfect-tempTable');
            //                let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
            //                //index attribute name in table row
            //                let indexname = tableKey + 'index';
            //                //index number in table row
            //                let rindex = $(this).closest('tr').attr(indexname);
            //                $tablecontainer.attr('perfect-tempTable-action', rindex);

            //                console.log('Editclick', savedData);
            //                //filling data in available inputs
            //                $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
            //                    let $thisNode = $(this);
            //                    let pf_name = $thisNode.attr('name'); console.log(pf_name);
            //                    if ($thisNode.is('select')) {

            //                        // $thisNode.val(savedData[pf_name]).selectpicker();
            //                        $thisNode.val(savedData[pf_name]).selectpicker('refresh');
            //                    }
            //                    else if ($thisNode.is('input')) {

            //                        if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

            //                            $thisNode.prop('checked', savedData[pf_name]);
            //                        }
            //                        else {
            //                            $thisNode.val(savedData[pf_name]);
            //                        }

            //                    }
            //                    else {
            //                        $thisNode.val(savedData[pf_name]);
            //                    }


            //                });



            //            }
            //        },
            //        {
            //            icon: "fa fa-trash btnPerfectGridDelete",
            //            action: function () {
            //                let $thistbl = $(this).closest('table');
            //                let table = $thistbl.DataTable();
            //                table.destroy();
            //                if ($(this).closest('tbody').find('tr').length > 1) {
            //                    $(this).closest('tr').remove();
            //                    pft_table_slreset($thistbl);


            //                }
            //                else {
            //                    $thistbl.remove();
            //                }

            //            }
            //        },
            //    ]
            //},
            onlyShowColumn: [],
            hideColumn: [],
            serialNo: true,
            renameHeader: {},
            rowAttribute: [],
            isCheckType: []
        };





        function deleteDepreciationSettings()
        {
            $sideMenuOptions.close();
             let $row = $(this).closest('tr');
            let Saveddata = $row.data('pData');
          
            $('.dataTable tr').removeClass("SelectForDelete");
            $(this).closest('tr').addClass('SelectForDelete');
            debugger
               $.ajax({
                   url: "@Url.Action("GetDepreciationsettingsDeleteReasonList", "DepreciationSetting")",
                   type: "GET",
                   contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                   success: function (ajaxReasonOutput) {
                       if (ajaxReasonOutput.Process.IsProcess) {
                           let confirmationDialogBoxOption = { heading: "Are you Sure?", body: "Do you want to remove this record  ?", cancel: "No", confirm: "Yes", reason: ajaxReasonOutput.Data };
                           var confirmBoxObj = ConfirmDialog(confirmationDialogBoxOption);
                            confirmBoxObj.then(function (selectedOption) {
                                if (selectedOption) {
                                 
                                    let inputData = {
                                        __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                                        ID_DepreciationSettings: Saveddata.ID_DepreciationSettings,
                                        ReasonID: selectedOption
                                    };

                                    $.ajax({
                                        url: "@Url.Action("DeleteDepreciationSettings", "DepreciationSetting")",
                                        type: "POST",
                                        data: inputData,
                                        contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                                        success: function (ajaxOutput) {
                                            if (ajaxOutput.Process.IsProcess) {
                                                let table = $row.closest('table').DataTable()
                                                table.row($row).remove().draw();

                                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                                    NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': 'Deleted Successfully' });
                                                });
                                                DepreciationSettingsInitialLoad();
                                                $('.dataTable tr').removeClass("SelectForDelete");
                                            }
                                            else {
                                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                                    $('.dataTable tr').removeClass("SelectForDelete");
                                                });
                                            }
                                        }
                                    });
                                }
                                else {
                                    NotificationMessage({'message': 'No option selected' });
                                }
                            });
                        }
                        else {
                        }
                   }

               });
        };

        //function ComDetailsTable_Fill(ele, tkey, data, tableOptionsTempOut) {

        //    let $thisForm = $(ele)

        //    let tableOptionsTemp = tableOptionsTempOut;
        //    let insertData = []
        //    let tableKey = tkey;

        //    let indexname = tkey + 'index';
        //    tableOptionsTemp.rowAttribute.push(indexname);
        //    tableOptionsTemp.hideColumn.push(indexname);

        //    let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');


        //    $.each(data, function (keyOne, valOne) {

        //        let pData = {};

        //        pData[indexname] = keyOne + 1;
        //        $tblcontainer.attr('perfect-tempTable-lastindex', pData[indexname])
        //        //---

        //        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
        //            let $this = $(this);
        //            let headerName = $this.attr('perfect-tempTable-' + tableKey);
        //            let nameAttr = $this.attr('name');
        //           // console.log('name', valOne[nameAttr])
        //            if (typeof valOne[nameAttr] !== undefined) {
                       
        //                if ($this.is('select')) {

        //                    console.log(nameAttr);
        //                    tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
        //                    //tableOptionsTemp.hideColumn.push(nameAttr + '_d');
        //                    //displat text of select

        //                    let selectText = ($this.val().length == 1) ? '' : $this.find('[value="' + valOne[nameAttr] + '"]').text();
        //                    pData[nameAttr] = selectText;
                            
        //                    //if (nameAttr == "FK_Category") {
                               
        //                        //pData[nameAttr + '_d'] = valOne[];
        //                    //} else {
                               
        //                    pData[nameAttr] = valOne[nameAttr];
        //                    //}
                          
        //                    //console.log('select', $this.find('options[value="' + valOne[nameAttr] + '"]').text());
        //                    //console.log('selectText', $this.find('[value="' + valOne[nameAttr] + '"]').text());
        //                    console.log(valOne[nameAttr] + "-Category");
        //                }
        //                else if ($this.is('input')) {

        //                    let inputType = $this.attr('type').toLocaleLowerCase();
                           
        //                    if (inputType == 'checkbox') {

        //                        pData[nameAttr] = valOne[nameAttr];

        //                        tableOptionsTemp.isCheckType.push(nameAttr);

                               


        //                    }
        //                    else if (inputType == 'hidden') {

        //                        tableOptionsTemp.hideColumn.push(nameAttr);
        //                        pData[nameAttr] = valOne[nameAttr];


        //                    }

        //                    else if (inputType == 'date') {


        //                        pData[nameAttr] = moment(valOne[nameAttr]).format('DD-MM-YYYY');


        //                    }
        //                    else {
        //                        pData[nameAttr] = valOne[nameAttr];


        //                    }
        //                }
        //                else {
        //                    pData[nameAttr] = valOne[nameAttr];


        //                }
        //            }



        //        });

        //        insertData.push(pData);
        //        console.log('insertdata', insertData)

        //        //----

        //    });

        //    $tblcontainer.append(pft_table_createtable(insertData, tableOptionsTemp));
        //    // $tblcontainer.find('table').dataTable({ paging: true });

        //}


        

        function ComDetailsTable_Fill(ele, tkey, data, tableOptionsTempOut) {
            console.log("data", data)
            let $thisForm = $(ele)

            let tableOptionsTemp = tableOptionsTempOut;
            let insertData = []
            let tableKey = tkey;

            let indexname = tkey + 'index';
            tableOptionsTemp.rowAttribute.push(indexname);
            tableOptionsTemp.hideColumn.push(indexname);

            let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');


            $.each(data, function (keyOne, valOne) {

                let pData = {};

                pData[indexname] = keyOne + 1;
                $tblcontainer.attr('perfect-tempTable-lastindex', pData[indexname])
                //---

                $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                    let $this = $(this);
                    let headerName = $this.attr('perfect-tempTable-' + tableKey);
                    let nameAttr = $this.attr('name');
                    console.log('name', valOne[nameAttr])
                    if (typeof valOne[nameAttr] !== undefined) {

                        if ($this.is('select')) {

                           
                            tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                            tableOptionsTemp.hideColumn.push(nameAttr);
                            //displat text of select

                            if (nameAttr == "FK_Category") {

                                //console.log('ssss',valOne);
                                pData[nameAttr + '_d'] = valOne["Category"];
                                pData[nameAttr] = valOne[nameAttr];
                            }
                            else {
                                let selectText = ($this.val().length == 1) ? '' : $this.find('[value="' + valOne[nameAttr] + '"]').text();

                                pData[nameAttr + '_d'] = selectText;
                                pData[nameAttr] = valOne[nameAttr];
                                console.log('select', $this.find('options[value="' + valOne[nameAttr] + '"]').text());
                                console.log('selectText', $this.find('[value="' + valOne[nameAttr] + '"]').text());
                            }

                            

                        }
                        else if ($this.is('input')) {

                            let inputType = $this.attr('type').toLocaleLowerCase();
                            console.log('inputType', inputType)
                            if (inputType == 'checkbox') {

                                pData[nameAttr] = valOne[nameAttr];

                                tableOptionsTemp.isCheckType.push(nameAttr);

                                console.log('checkbox', nameAttr)


                            }
                            else if (inputType == 'hidden') {

                                tableOptionsTemp.hideColumn.push(nameAttr);
                                pData[nameAttr] = valOne[nameAttr];


                            }

                            else if (inputType == 'date') {


                                pData[nameAttr] = moment(valOne[nameAttr]).format('DD-MM-YYYY');


                            }
                            else {
                                pData[nameAttr] = valOne[nameAttr];


                            }
                        }
                        else {
                            pData[nameAttr] = valOne[nameAttr];


                        }
                    }



                });

                insertData.push(pData);
                console.log('insertdata', insertData)

                //----

            });

            $tblcontainer.append(pft_table_createtable(insertData, tableOptionsTemp));
            // $tblcontainer.find('table').dataTable({ paging: true });

        }











    </script>
    }