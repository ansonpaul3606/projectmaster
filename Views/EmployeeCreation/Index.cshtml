
@{
    ViewBag.Title = "Employee";
    Layout = "~/Views/Shared/_Layout.cshtml";
}



<div class="container-fluid">
    @Html.AntiForgeryToken()
    <div class="row">
        <div class="col-lg-12" id="jq_employeeIndex_formContainer">

        </div>
    </div>


</div>

@section scripts{

    <script type="text/javascript">

        //--- Form
        const $formContainer = $('#jq_employeeIndex_formContainer');
        //--- Common table settings for this page
        var tableOptions = {
            dropdown: {
                buttons: [

                
               @if (ViewBag.PagedAccessRights.UsrrlMsView) {
               <text> { displayName: "View", action: fn_employeeIndex_loadEmployeeUpdateForm },</text>

               }
 
                    { type: "divider" },
                @if (ViewBag.PagedAccessRights.UsrrlMsDel)
             {
                 <text> { displayName: "Delete", action: fn_employeeIndex_deleteEmployee },</text>

              }

                   
                ],
                class: "btn btn-success light sharp"
            },
            onlyShowColumn: ["SlNo", "EmployeeName", 'EmployeeMobile', 'EmployeeType', 'Branch', 'Designation','Department'],
            hideColumn: [],
          //  isDateType: [],
            //isCheckType: ["Individual"],
            rowClickAction: fn_employeeIndex_loadEmployeeUpdateForm,
            serialNo: false,
            renameHeader: { "SlNo": "Sl No.", "EmployeeName":"Name","EmployeeMobile": "Mobile", "EmployeeType":"Employee Type"}
        };


        var validationMessage = {
            'BranchID': {
                'required': 'Please Select a Branch',
                'digits': 'Invalid Branch selected'
            },
            'EmployeeTypeID': {
                'required': 'Please Select a Employee Type',
                'digits': 'Invalid Employee Type selected'
            },
           
            'DesignationID': {
                'required': 'Please Select Designation ',
                'digits': 'Invalid Designation selected'
            },
            'EmployeeName': {
                'required': 'Please Enter Name',
                'maxlength': jQuery.validator.format('Employee name should be less than {0} characters'),
                'stringonly': 'Special characters are not allowed in employee name'
            },
            'EmployeeAddress': {
                'required': 'Please Enter  Address',
                'maxlength': jQuery.validator.format('Address should be less than {0} characters'),
                'stringonly': 'Special characters are not allowed in Address '
            },

            'CountryID': {
                'required': 'Please Select Country',
                'digits': 'Invalid Country selected'
            },
            'StatesID': {
                'required': 'Please Select State',
                'digits': 'Invalid State selected'
            },
            'DistrictID': {
                'required': 'Please Select District',
                'digits': 'Invalid District selected'
            },
           
            'PlaceID': {
                
                'digits': 'Invalid Place selected'
            },

            'PostID': {
               
                'digits': 'Invalid Post selected'
            },
            'EmployeeMobile': {
                'required': 'Please Enter  Mobile',
                'anyphonenumber': 'Invalid mobile number',
                'minlength': jQuery.validator.format('Employee mobile should be more than {0} characters'),
                'maxlength': jQuery.validator.format('Employee mobile should be less than {0} characters')
            },
            'EmployeePhone': {
                'required': 'Please Enter Phone',
                'anyphonenumber': 'Invalid phone number',
                'minlength': jQuery.validator.format('Employee phone should be more than {0} characters'),
                'maxlength': jQuery.validator.format('Employee phone should be less than {0} characters')
            },
            'EmployeeEmail': {
               // 'required': 'Please enter Email',
                'emailRegex': 'Please Enter Valid Email'
            },
            'BranchTypeID': {
                'required': 'Please Select a Branch Type',
                'digits': 'Invalid Branch Type selected'
            },
         
            'DepartmentID': {
                'required': 'Please Select a Department',
                'digits': 'Invalid Department selected'
            },
            'LEmployeeName': {
                'required': 'Please Enter Last Name',
                'maxlength': jQuery.validator.format('Employee Last Name Should be Less than {0} Characters'),
                'stringonly': 'Special characters are not allowed in employee last name'
            },


        };

        // Initial load functions
        $(document).ready(function () {
            fn_employeeIndex_initialLoad()



        });
        var EmployeeTransMode = '';
        function fn_employeeIndex_initialLoad() {
            EmployeeTransMode = "";
            EmployeeTransMode = '@ViewBag.TransMode';
              @if (ViewBag.PagedAccessRights.UsrrlMsView)
              {
                 <text>  fn_employeeIndex_loadEmployee(this); </text>
              }
           
            
            fn_employeeIndex_loadEmployeeAddForm();

        }


        // Fucntion to load EmployeeList


        function fn_employeeIndex_loadEmployee(ele) {
        let $sidemenu = $sideMenuOptions.body;
       
       // let $thisForm = $(ele).closest('.Search-Control');

        let $thisForm = $(ele).closest('.testSearchBox');
        let SearchName = $thisForm.find('input').val();
      
        $sideMenuOptions.title.find('h4').text('Employee List');
          let pageUrl = '@Url.Action("GetEmployeeList", "EmployeeCreation")';
            $.ajax({
                url:pageUrl,
                type: "POST",
                data: { pageSize: 15, pageIndex: 0, Name: SearchName },
                dataType: "json",
                contentType: "application/x-www-form-urlencoded; charset=utf-8",
                success: function (ajaxOutput) {


                          if (ajaxOutput.Process.IsProcess) {
                              console.log('Employee', ajaxOutput);
                              $sidemenu.find('.jq_sidemenu_title').text("Employee");

                              $sidemenu.empty().append('<div class="d-flex justify-content-end mb-2 position-relative"><div class="col-md-6 position-absolute top-1 z-index"> <div class="input-group testSearchBox"><input type="text" class="form-control " name="SearchName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input"  /><div class="input-group-append"><button id="addcountry-jq-searchButton6" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="fn_employeeIndex_loadEmployee(this)"></button></div></div></div></div>', $('<div/>', {class:"col-md-12 table_temp_class"}).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))
                             // $sidemenu.find('table').dataTable({ paging: true });


                              let $table = $sidemenu.find('table');
                              $table.dataTable({
                                  "serverSide": true,//no change
                                  "processing": true,//-- process text when clicked
                                  //"lengthChange": false,
                                  "lengthMenu": [10, 15, 20, 25, 50, 100],//---drop down page size
                                  "searching": false,//--no change
                                  "ordering": false,//--sorting
                                  "deferLoading": ajaxOutput.totalrecord,//<----to total number of record from db
                                  "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,//<----starting record
                                  "pageLength": ajaxOutput.pageSize,//<----page size
                                  "recordsFiltered": ajaxOutput.pageSize,//<---page size

                                  "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize, searchkey: SearchName }, tableOptions, $table)
                              });

                          }
                else {
                              if (ajaxOutput.Process.Status = "NoData") {
                                 
                        $sidemenu.find('.jq_sidemenu_title').text("Employee");

                                  $sidemenu.empty().append('<div class="d-flex justify-content-end mb-2"><div class="col-md-6 position-absolute top-1 z-index"> <div class="input-group testSearchBox"><input type="text" class="form-control " name="SearchName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input"  /><div class="input-group-append"><button id="addcountry-jq-searchButton6" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="fn_employeeIndex_loadEmployee(this)"></button></div></div></div></div>', $('<div/>', { class: "col-md-12 table_temp_class" }).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))
                        // $sidemenu.find('table').dataTable({ paging: true });


                        let $table = $sidemenu.find('table');
                        $table.dataTable({
                            "serverSide": true,//no change
                            "processing": true,//-- process text when clicked
                           // "lengthChange": false,
                           "lengthMenu": [],//---drop down page size
                            "searching": false,//--no change
                            "ordering": false,//--sorting
                            "deferLoading": ajaxOutput.totalrecord,//<----to total number of record from db
                            "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,//<----starting record
                            "pageLength": ajaxOutput.pageSize,//<----page size
                            "recordsFiltered": ajaxOutput.pageSize,//<---page size

                            "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize }, tableOptions, $table)
                        });
                    }
                    else {
                        $.each(ajaxOutput.Process.Message, function (key, value) {
                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                        });
                    }
                }




            },
            complete: function () {

            }
        });
    }
    function returnajaxPagination(ajaxInfo, tableOptions, tableid) {
        //{ apiurl, pageSize }
        return {
            url: ajaxInfo.apiurl,
            type: "post",
            data: function () {
                var info = tableid.DataTable().page.info();
                console.log('RETURN AJAX', info)
                //return { <antiforgery>:<antiforgery>, length: ajaxInfo.pageSize, page: info.page }
                let input = { pageSize: info.length, pageIndex: info.page };
                if (ajaxInfo.searchkey) {
                    input["Name"] = ajaxInfo.searchkey;
                }
                return input
            },
            dataType: "json",
            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            success: function (dtajaxOutput) {
                // $sideMenuOptions.body.html(pft_table_createtable(dtajaxOutput.Data, tableOptions));
                let table = tableid.DataTable();
                table.destroy();
                pft_table_newTableBody(tableid, dtajaxOutput.Data, tableOptions);

                tableid.dataTable({
                    "serverSide": true,
                    "processing": true,
                    //"lengthChange": false,
                    "lengthMenu": [10, 15, 20, 25, 50, 100],
                    "searching": false,
                    "ordering": false,
                    "deferLoading": dtajaxOutput.totalrecord,
                    "displayStart": dtajaxOutput.pageIndex * dtajaxOutput.pageSize,
                    "pageLength": dtajaxOutput.pageSize,
                    "recordsFiltered": dtajaxOutput.pageSize,
                    "ajax": returnajaxPagination(ajaxInfo, tableOptions, tableid)
                })

            },

        }
    }


        // Fucntion to load Employee ADD form
        function fn_employeeIndex_loadEmployeeAddForm() {

            $formContainer.load('@Url.Action("LoadEmployeeForm", "EmployeeCreation")?mtd=@ViewBag.mtd', function () {
                let $thisForm = $(this).find('[perfect-class="form"]');
                // ... Custom validation message
                $thisForm.validate({
                    // ...
                    messages: validationMessage
                    // ...
                });
                // ... Custom validation message
                $thisForm.attr('perfect-onFormSuccess', 'fn_employeeIndex_initialLoad');

                initFunctions($thisForm);
                getNumberGeneration(EmployeeTransMode, 0, $thisForm, 'EmployeeNo')
            });

        };
        // Function to load employee Update from
        function fn_employeeIndex_loadEmployeeUpdateForm() {

            let $thisRow = $(this).closest('tr');
            let saveddata = $thisRow.data('pData');

            $('.dataTable tr').removeClass("SelectForDelete");
            $(this).closest('tr').addClass('SelectForDelete');
            let inputData = {
                __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                EmployeeID: saveddata.EmployeeID
            };

            $.ajax({
                url: '@Url.Action("GetEmployeeInfoByID", "EmployeeCreation")',
                type: "POST",
                // headers: { "token_key": "1234" },
                data: inputData,
                dataType: "json",
                contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                success: function (ajaxOutput) {

                   
                        //process is success 
                        $formContainer.load('@Url.Action("LoadEmployeeForm", "EmployeeCreation")?mtd=@ViewBag.mtd', function () {

                       
                            console.log('Inside load');

                            let $thisForm = $(this).find('[perfect-class="form"]');
                           // initFunctions($thisForm);


                            $thisForm.validate({ messages: validationMessage });
                            if (ajaxOutput.employeeInfo.Process.IsProcess)
                            {
                                $thisForm.data({ pData: ajaxOutput.employeeInfo.Data[0] });
                                console.log('dat', ajaxOutput)
                                $(this).find('[perfect-class=formTitle]').text('update : ' + ajaxOutput.employeeInfo.Data[0].EmployeeName)
                                $thisForm.find('[perfect-elemet="Branchtype"]').prop('disabled', true).selectpicker('refresh');
                                $thisForm.find('[perfect-elemet="Branch"]').prop('disabled', true).selectpicker('refresh');
                                $thisForm.find('[perfect-elemet="Designation"]').prop('disabled', true).selectpicker('refresh');
                                $thisForm.find('[perfect-elemet="Department"]').prop('disabled', true).selectpicker('refresh');
                            // Fill fields

                                $thisForm.find('[name="BranchTypeID"]').val(ajaxOutput.employeeInfo.Data[0]['BranchTypeID']).selectpicker('refresh');
                                $thisForm.find('[name="BranchType"]').val(ajaxOutput.employeeInfo.Data[0]['BranchType']);
                                $thisForm.find('[name="BranchID"]').val(ajaxOutput.employeeInfo.Data[0]['BranchID']).selectpicker('refresh');                            
                                $thisForm.find('[name="EmployeeTypeID"]').val(ajaxOutput.employeeInfo.Data[0]['EmployeeTypeID']).selectpicker('refresh');
                                $thisForm.find('[name="EmployeeType"]').val(ajaxOutput.employeeInfo.Data[0]['EmployeeType']);
                                $thisForm.find('[name="EmployeeNo"]').val(ajaxOutput.employeeInfo.Data[0]['EmployeeNo']);
                                $thisForm.find('[name="EmployeeName"]').val(ajaxOutput.employeeInfo.Data[0]['EmployeeName']);
                                $thisForm.find('[name="EmployeeAddress"]').val(ajaxOutput.employeeInfo.Data[0]['EmployeeAddress']);
                                $thisForm.find('[name="CountryID"]').val(ajaxOutput.employeeInfo.Data[0]['CountryID']);
                                $thisForm.find('[name="StatesID"]').val(ajaxOutput.employeeInfo.Data[0]['StatesID']);
                                $thisForm.find('[name="DistrictID"]').val(ajaxOutput.employeeInfo.Data[0]['DistrictID']);
                                $thisForm.find('[name="PostID"]').val(ajaxOutput.employeeInfo.Data[0]['PostID']);
                                $thisForm.find('[name="AreaID"]').val(ajaxOutput.employeeInfo.Data[0]['AreaID']);
                                $thisForm.find('[name="PlaceID"]').val(ajaxOutput.employeeInfo.Data[0]['PlaceID']);
                                $thisForm.find('[name="PinCode"]').val(ajaxOutput.employeeInfo.Data[0]['PinCode']);
                                $thisForm.find('[name="Country"]').val(ajaxOutput.employeeInfo.Data[0]['Country']);
                                $thisForm.find('[name="States"]').val(ajaxOutput.employeeInfo.Data[0]['States']);
                                $thisForm.find('[name="District"]').val(ajaxOutput.employeeInfo.Data[0]['District']);
                                $thisForm.find('[name="Post"]').val(ajaxOutput.employeeInfo.Data[0]['Post']);
                                $thisForm.find('[name="Area"]').val(ajaxOutput.employeeInfo.Data[0]['Area']);
                                $thisForm.find('[name="Place"]').val(ajaxOutput.employeeInfo.Data[0]['Place']);
                                $thisForm.find('[name="EmployeeMobile"]').val(ajaxOutput.employeeInfo.Data[0]['EmployeeMobile'])
                                $thisForm.find('[name="EmployeePhone"]').val(ajaxOutput.employeeInfo.Data[0]['EmployeePhone']);
                                $thisForm.find('[name="EmployeeEmail"]').val(ajaxOutput.employeeInfo.Data[0]['EmployeeEmail']);
                                $thisForm.find('[name="DesignationID"]').val(ajaxOutput.employeeInfo.Data[0]['DesignationID']).selectpicker('refresh');
                                $thisForm.find('[name="Designation"]').val(ajaxOutput.employeeInfo.Data[0]['DesignationID']);
                                $thisForm.find('[name="DepartmentID"]').val(ajaxOutput.employeeInfo.Data[0]['DepartmentID']).selectpicker('refresh');
                                $thisForm.find('[name="Department"]').val(ajaxOutput.employeeInfo.Data[0]['DepartmentID']);
                                $thisForm.find('[name="LEmployeeName"]').val(ajaxOutput.employeeInfo.Data[0]['LEmployeeName']);
                          
                            let $dropdown = $thisForm.find('[name="BranchID"]');
                                let branch = ajaxOutput.employeeInfo.Data[0].BranchID;
                            let inputData = {
                                __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                                BranchTypeID: $thisForm.find('[name="BranchTypeID"]').val()
                            }
                          
                           // alert(branch);
                            $.ajax({
                                url: '@Url.Action("GetBranchDetails", "EmployeeCreation")',
                                type: "POST",
                                data: inputData,//<---- Input json : data passed to controller
                                dataType: "json",
                                contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                                success: function (ajaxOutput) {//<----- if ajax method executed succesfully,  we get the data passed from controller in this variable  => success: function (variable) {
                                    // console.log("Data", data);

                                    if (ajaxOutput.Process.IsProcess) {

                                        $.each(ajaxOutput.Data, function (key, value) {
                                            $dropdown.append($('<option/>', { value: value.BranchID }).text(value.Branch)).selectpicker('refresh');
                                            $dropdown.val(branch).selectpicker('refresh');
                                        });
                                    }
                                },
                            });
                            }
                            if (ajaxOutput.subeimg.Process.IsProcess)
                            {
                                Getsubimg(ajaxOutput.subeimg.Data);
                            }
                            
                            // stuff to do after filling data
                            $sideMenuOptions.close();//<---  Close side menu
                            $thisForm.find('button[name=add]').addClass('d-none');//<--- hide add employee button
                            $thisForm.find('button[name=update]').removeClass('d-none');//<--- show update employee button

                            $thisForm.attr('perfect-onFormSuccess', 'fn_employeeIndex_initialLoad');

                        });
                   
                }
            });
        };
        function FillBranch(ele) {
            let $thisForm = $(ele).closest('[perfect-class="form"]');

           
            console.log("Input data", inputData)
          


        }

        // Function to delete employee
        function fn_employeeIndex_deleteEmployee() {
             let $row = $(this).closest('tr');
            let Saveddata = $row.data('pData');


            console.log('Delete function', Saveddata)

            $('.dataTable tr').removeClass("SelectForDelete");
            $(this).closest('tr').addClass('SelectForDelete');

            //get reason list-

               $.ajax({
                   url: '@Url.Action("GetEmployeeReasonList", "EmployeeCreation")',
                   type: "GET",
                  // data: inputReason,
                   contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                   success: function (ajaxReasonOutput) {
                       if (ajaxReasonOutput.Process.IsProcess) {

                           console.log('Inside res ajax', ajaxReasonOutput.Data)

                           //let confirmationDialogBoxOption = {  body: "Do you want to remove  ?", cancel: "No", confirm: "Yes", reason: ajaxReasonOutput.Data };
                           // var confirmBoxObj = ConfirmDialog(confirmationDialogBoxOption);
                           let confirmationDialogBoxOption = { heading: "Are you Sure?", body: "Do you want to remove " + Saveddata.EmployeeName + " ?", cancel: "No", confirm: "Yes", reason: ajaxReasonOutput.Data };
                           var confirmBoxObj = ConfirmDialog(confirmationDialogBoxOption);
                            confirmBoxObj.then(function (selectedOption) {
                                if (selectedOption) {
                                     console.log('employeeIndex> delete function:',selectedOption)

                                    let inputData = {
                                        __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                                        EmployeeID: Saveddata['EmployeeID'],
                                        ReasonID: selectedOption
                                    };
                                    $.ajax({
                                        url: '@Url.Action("DeleteEmployee", "EmployeeCreation")',
                                        type: "POST",
                                        data: inputData,
                                        contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                                        success: function (ajaxOutput) {
                                            if (ajaxOutput.Process.IsProcess) {

                                                let table = $row.closest('table').DataTable()
                                                table.row($row).remove().draw();

                                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                                    NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': 'Deleted Successfully' });
                                                });

                                                //removing a data

                                                $('.dataTable tr').removeClass("SelectForDelete");

                                            }
                                            else {
                                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });

                                                    $('.dataTable tr').removeClass("SelectForDelete");
                                                });
                                            }
                                        }
                                    });
                                }
                                else {
                                    NotificationMessage({ 'message': 'No option selected' });
                                }

                            });


                        }
                        else {



                        }
                   }

               });




        };

    </script>



}
