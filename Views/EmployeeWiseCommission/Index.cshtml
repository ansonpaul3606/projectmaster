
@{
    ViewBag.Title = "Index";
}



<div class="col-lg-12" id="Employee-wise-commision">

</div>

@section scripts {
    <script type="text/javascript">


        //var IncTransMode = '';
        const $formContainer = $('#Employee-wise-commision');
        $(document).ready(function () {

            fn_Employee_wise_commision(this);

        });

        function fn_Employee_wise_commision() {
          //  IncTransMode ='@ViewBag.TransMode';
            Employee_wise_commision();

               @if (ViewBag.PagedAccessRights.UsrrlStView)
            {
                <text>LoadIncetivedetailsList(this);</text>
            }
           // LoadIncetivedetailsList(this)
            
        }

        function Employee_wise_commision() {

            $formContainer.load('@Url.Action("LoadEmployeeWiseCommission", "EmployeeWiseCommission")', function () {

                let $thisForm = $(this).find('[perfect-class="form"]');
                $thisForm.validate({ messages: validationMessage });
                $thisForm.find('[name="UptoDate"]').val(moment().format('YYYY-MM-DD'));
                $thisForm.find('[name="TransDate"]').val(moment().format('YYYY-MM-DD'));
                var maxDate = moment().format('YYYY-MM-DD');
                $('input[name="UptoDate"]').attr('max', maxDate);
                $('input[name="TransDate"]').attr('max', maxDate);
                // $thisForm.attr('perfect-onFormSuccess', 'fn_incentive_initialLoad');

            });
        }

        var validationMessage = {
            'EmployeeID': {
                'required':'Please Select Employee',
            },
            //'IncTrTotalAmount': {
            //    'required': 'Please enter Amount',
            //    'maxlength': 'Please enter no more than 12 Numbers'
            //},
            'ct_Amount': {
                'required': 'Please enter Amount'
            },
            'TransDate': {
                'required': 'Please select Trans date',
                'max': `Date can't be grater than current date`
            },
            'PAmount': {
                'maxlength': 'Please enter no more than 12 Numbers.'
            },  
            'UptoDate': {
                'required': 'Please select Up to date',
                'max': `Date can't be grater than current date`
            }


        }
        function LoadIncetivedetailsList(ele) {

            debugger
            let $sidemenu = $sideMenuOptions.body;
            let $thisForm = $(ele).closest('.testSearchBox');
            let SearchName = $thisForm.find('input').val();
            $sideMenuOptions.title.find('h4').text('Employee wise commission List');
            let pageUrl = "@Url.Action("GetEmployeeWiseDataList", "EmployeeWiseCommission")";
            $.ajax({
                url:pageUrl,
                type: "POST",
                data: { pageSize: 15, pageIndex: 0, Name: SearchName},
                dataType: "json",
                contentType: "application/x-www-form-urlencoded; charset=utf-8",
                success: function (ajaxOutput) {
                    debugger
                    console.log(ajaxOutput, 'ajaxOutput>>>>2');
                    console.log("tableoption123", tableOptions)
                    if (ajaxOutput.Process.IsProcess) {
                        $sidemenu.find('.jq_sidemenu_title').text("IncentiveSettings List");
                        $sidemenu.empty().append('<div class="d-flex justify-content-end mb-2 position-relative"><div class="col-md-6 position-absolute top-1 z-index"> <div class="input-group testSearchBox"><input type="text" class="form-control " name="SearchName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input"  /><div class="input-group-append"><button id="addcountry-jq-searchButton6" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="LoadIncetivedetailsList   (this)"></button></div></div></div></div>', $('<div/>', { class: "col-md-12 table_temp_class" }).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))
                        let $table = $sidemenu.find('table');
                        $table.dataTable({
                            "serverSide": true,
                            "processing": true,
                            "lengthMenu": [10, 15, 20, 25, 50, 100],
                            "searching": false,
                            "ordering": false,
                            "deferLoading": ajaxOutput.totalrecord,
                            "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,
                            "pageLength": ajaxOutput.pageSize,
                            "recordsFiltered": ajaxOutput.pageSize,
                            "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize }, tableOptions, $table)
                        });

                    }
                    else {
                        if (ajaxOutput.Process.Status = "NoData") {
                            $sidemenu.find('.jq_sidemenu_title').text("Language");
                            $sidemenu.empty().append('<div class="d-flex justify-content-end mb-2"><div class="col-md-6 position-absolute top-1 z-index"> <div class="input-group testSearchBox"><input type="text" class="form-control " name="SearchName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input"  /><div class="input-group-append"><button id="addcountry-jq-searchButton6" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="LoadIncetivedetailsList(this)"></button></div></div></div></div>', $('<div/>', { class: "col-md-12 table_temp_class" }).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))

                            let $table = $sidemenu.find('table');
                            $table.dataTable({
                                "serverSide": true,
                                "processing": true,
                                "lengthMenu": [],
                                "searching": false,
                                "ordering": false,
                                "deferLoading": ajaxOutput.totalrecord,
                                "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,
                                "pageLength": ajaxOutput.pageSize,
                                "recordsFiltered": ajaxOutput.pageSize,

                                "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize }, tableOptions, $table)
                            });
                        }
                        else {
                            $.each(ajaxOutput.Process.Message, function (key, value) { NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value }); });
                        }
                    }
                },
                complete: function () {}
            })
            
        };

        function returnajaxPagination(ajaxInfo, tableOptions, tableid) {
            debugger
            return {
                url: ajaxInfo.apiurl,
                type: "post",
                data: function () {
                    var info = tableid.DataTable().page.info();
                    let input = { pageSize: info.length, pageIndex: info.page };
                    if (ajaxInfo.searchkey) {
                        input["Name"] = ajaxInfo.searchkey;
                    }
                    return input
                },
                dataType: "json",
                contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                success: function (dtajaxOutput) {
                    let table = tableid.DataTable();
                    table.destroy();
                    pft_table_newTableBody(tableid, dtajaxOutput.Data, tableOptions);
                    tableid.dataTable({
                        "serverSide": true,
                        "processing": true,
                        "lengthMenu": [10, 15, 20, 25, 50, 100],
                        "searching": false,
                        "ordering": false,
                        "deferLoading": dtajaxOutput.totalrecord,
                        "displayStart": dtajaxOutput.pageIndex * dtajaxOutput.pageSize,
                        "pageLength": dtajaxOutput.pageSize,
                        "recordsFiltered": dtajaxOutput.pageSize,
                        "ajax": returnajaxPagination(ajaxInfo, tableOptions, tableid)
                    })

                },

            }
        }

        var tableOptions = {
            dropdown: {
                buttons: [
                      @*@if (ViewBag.PagedAccessRights.UsrrlStView)
                       {
                         <text> { displayName: "View", action: editIncentiveSettingsData },</text>
                       }
                    { type: "divider" },*@
                       @if (ViewBag.PagedAccessRights.UsrrlStDel)
                        {
                         <text>{ displayName: "Delete", action: deleteIncentiveSettingsData },</text>
                        }
                ],
                class: "btn btn-success light sharp"
            },
            onlyShowColumn: ["SlNo", "EmpFname", "TransDate","UptoDate","NetAmount"],
            hideColumn: [],
            rowClickAction: editIncentiveSettingsData,
            isDateType: ["TransDate","UptoDate"],
            renameHeader: { "EmpFname": "Employee Name ", "UptoDate": "Up to Date", "TransDate":"Trans Date" }
        };

        function editIncentiveSettingsData() {

        }
        
        function deleteIncentiveSettingsData()
        {
            debugger

            $sideMenuOptions.close();
             let $row = $(this).closest('tr');
            let Saveddata = $row.data('pData');
            console.log(Saveddata,'Saveddata>><')
          
            $('.dataTable tr').removeClass("SelectForDelete");
            $(this).closest('tr').addClass('SelectForDelete');

               $.ajax({
                   url: "@Url.Action("GetReasonList", "EmployeeWiseCommission")",
                   type: "GET",
                   contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                   success: function (ajaxReasonOutput) {
                       if (ajaxReasonOutput.Process.IsProcess) {
                           console.log(ajaxReasonOutput,'ajaxReasonOutput,,,...')
                           let confirmationDialogBoxOption = { heading: "Are you Sure?", body: "Do you want to remove this record  ?", cancel: "No", confirm: "Yes", reason: ajaxReasonOutput.Data };
                           var confirmBoxObj = ConfirmDialog(confirmationDialogBoxOption);
                           confirmBoxObj.then(function (selectedOption) {
                               console.log(selectedOption, 'selectedOption>><<');
                                if (selectedOption) {
                                 
                                    let inputData = {
                                        __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                                        ID_IncentiveTransaction: Saveddata.ID_IncentiveTransaction,
                                        FK_Reason: selectedOption
                                    };

                                    $.ajax({
                                        url: "@Url.Action("DeleateEmployeeWiseData", "EmployeeWiseCommission")",
                                        type: "POST",
                                        data: inputData,
                                        contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                                        success: function (ajaxOutput) {
                                            if (ajaxOutput.Process.IsProcess) {
                                                let table = $row.closest('table').DataTable()
                                                table.row($row).remove().draw();

                                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                                    NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': 'Deleted Successfully' });
                                                });
                                                AuthorizationlevelInitialLoad();
                                                $('.dataTable tr').removeClass("SelectForDelete");
                                            }
                                            else {
                                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                                    $('.dataTable tr').removeClass("SelectForDelete");
                                                });
                                            }
                                        }
                                    });
                                }
                                else {
                                    NotificationMessage({'message': 'No option selected' });
                                }
                            });
                        }
                        else {
                        }
                   }

               });
        };


    </script>

}