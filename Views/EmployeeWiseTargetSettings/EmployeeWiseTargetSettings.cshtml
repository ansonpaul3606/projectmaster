
@{
    ViewBag.Title = "EmployeeWiseTargetsettings";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid">

    @Html.AntiForgeryToken()  @*//antiforgery token*@

    <div class="row">

        <div class="col-lg-12" id="jq_EmployeeWiseTargetsettings_formContainer">

        </div>
    </div>


</div>
@section scripts{
<script type="text/javascript">
    const $formContainer = $('#jq_EmployeeWiseTargetsettings_formContainer');

    $(document).ready(function () {
        fn_EmployeeWiseTargetsettings_initialload();
    });

    function fn_EmployeeWiseTargetsettings_initialload() {
        EmployeeTargetTransMode = "";
        fn_loadEmployeeTargetsAddForm();
        fn_loadEmployeeWiseTargetSettingsList(this);
    }
    var validationMessage = {
        'Module': {
            'required': 'Please Select Module',
        },
        'EffectDate': {
            'required': 'Please select Effect Date ',
        },
        'PeriodType': {
            'required': 'Please select Period Type ',
        },
        'Period': {
            'required': 'Please enter Period'
        },
        'Mode': {
            'required': 'Please select Mode',
        },
        ///Target Amount/Target Count
        'TargetAmount': {
            'required': 'Please enter Target Amount',
        },
        'TargetCount': {
            'required': 'Please enter Total Count',
        },
    };
    function fn_loadEmployeeTargetsAddForm() {

        $formContainer.load('@Url.Action("LoadEmployeeWiseTargetSettingsForm", "EmployeeWiseTargetSettings")?mtd=@ViewBag.mtd', function () {
            let $thisForm = $(this).find('[perfect-class="form"]');

            $thisForm.find('[name="EffectDate"]').val(moment().format('YYYY-MM-DD'));
            $thisForm.validate({ messages: validationMessage });
            $thisForm.attr('perfect-onFormSuccess', 'fn_EmployeeWiseTargetsettings_initialload');

        });
    }
    function fn_loadEmployeeWiseTargetSettingsList(ele)

    {

        let $sidemenu = $sideMenuOptions.body;
        let $thisForm = $(ele).closest('.testSearchBox');
        let SearchName = $thisForm.find('input').val();

        if (SearchName == undefined) {
            SearchName = "";
        }
        $sideMenuOptions.title.find('h4').text('@ViewBag.PageTitles' + ' ' + 'List');

        let pageUrl = '@Url.Action("GetEmployeeWiseTargetSettingsList", "EmployeeWiseTargetSettings")';

            $.ajax({
                url:pageUrl,
                type: "POST",
                data: { pageSize: 10, pageIndex: 0, Name: SearchName},
                dataType: "json",
                contentType: "application/x-www-form-urlencoded; charset=utf-8",
                success: function (ajaxOutput) {
                    if (ajaxOutput.Process.IsProcess) {

                        $sidemenu.find('.jq_sidemenu_title').text("Quotation List");
                        $sidemenu.empty().append('<div class="d-flex justify-content-end mb-2 position-relative"><div class="col-md-6 position-absolute top-1 z-index"> <div class="input-group testSearchBox"><input type="text" class="form-control " name="SearchName" value="' + SearchName+'" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input"  /><div class="input-group-append"><button id="addcountry-jq-searchButton6" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="fn_loadEmployeeWiseTargetSettingsList(this)"></button></div></div></div></div>', $('<div/>', { class: "col-md-12 table_temp_class" }).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))
                        let $table = $sidemenu.find('table');
                        $table.dataTable({
                            "serverSide": true,
                            "processing": true,
                            "lengthMenu": [10, 15, 20, 25, 50, 100],
                            "searching": false,
                            "ordering": false,
                            "deferLoading": ajaxOutput.totalrecord,
                            "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,
                            "pageLength": ajaxOutput.pageSize,
                            "recordsFiltered": ajaxOutput.pageSize,
                            "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize }, tableOptions, $table)
                        });
                    }
                    else {
                        if (ajaxOutput.Process.Status = "NoData") {
                            $sidemenu.find('.jq_sidemenu_title').text("Quotation List");
                            $sidemenu.empty().append('<div class="d-flex justify-content-end mb-2"><div class="col-md-6 position-absolute top-1 z-index"> <div class="input-group testSearchBox"><input type="text" class="form-control " name="SearchName" value="' + SearchName +'" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input"  /><div class="input-group-append"><button id="addcountry-jq-searchButton6" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="fn_loadEmployeeWiseTargetSettingsList(this)"></button></div></div></div></div>', $('<div/>', { class: "col-md-12 table_temp_class" }).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))

                            let $table = $sidemenu.find('table');
                            $table.dataTable({
                                "serverSide": true,
                                "processing": true,
                                "lengthMenu": [0],
                                "searching": false,
                                "ordering": false,
                                "deferLoading": ajaxOutput.totalrecord,
                                "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,
                                "pageLength": ajaxOutput.pageSize,
                                "recordsFiltered": ajaxOutput.pageSize,
                                "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize }, tableOptions, $table)
                            });
                        }
                        else {
                            $.each(ajaxOutput.Process.Message, function (key, value) {
                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                            });
                        }
                    }
                },
                complete: function () {

                }
            });
    }


    function returnajaxPagination(ajaxInfo, tableOptions, tableid) {
        return {
            url: ajaxInfo.apiurl,
            type: "post",
            data: function () {
                var info = tableid.DataTable().page.info();
                let input = { pageSize: info.length, pageIndex: info.page};
                if (ajaxInfo.searchkey) {
                    input["Name"] = ajaxInfo.searchkey;
                }
                return input
            },
            dataType: "json",
            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            success: function (dtajaxOutput) {
                let table = tableid.DataTable();
                table.destroy();
                pft_table_newTableBody(tableid, dtajaxOutput.Data, tableOptions);
                tableid.dataTable({
                    "serverSide": true,
                    "processing": true,
                    "lengthMenu": [10, 15, 20, 25, 50, 100],
                    "searching": false,
                    "ordering": false,
                    "deferLoading": dtajaxOutput.totalrecord,
                    "displayStart": dtajaxOutput.pageIndex * dtajaxOutput.pageSize,
                    "pageLength": dtajaxOutput.pageSize,
                    "recordsFiltered": dtajaxOutput.pageSize,
                    "ajax": returnajaxPagination(ajaxInfo, tableOptions, tableid)
                })
            },
        }
    }

    var tableOptions = {
        dropdown: {
            buttons: [
                @if (ViewBag.PagedAccessRights.UsrrlMsView)
                {
                    <text> { displayName: "View", action: fn_EditEmployeeWiseTargetSettings },</text>
                }
                { type: "divider" },
                @if (ViewBag.PagedAccessRights.UsrrlMsDel)
                 {
                     <text> { displayName: "Delete", action: fn_DeleteEmployeeWiseTargetSettings },</text>
                  }
                ],
            class: "btn btn-success light sharp"
        },
        onlyShowColumn: ["SlNo", "ModuleName", "EffectDate"],
        hideColumn: ["ID_EmployeeWiseTargetSettings", "FK_Designation", "FK_Employee", "FK_Department", "TargetAmount", "TargetCount", "PeriodType", "Period","Mode"],
        rowClickAction: fn_EditEmployeeWiseTargetSettings,
        renameHeader: { "SlNo": "SL NO", "EffectDate": "Effect Date","ModuleName":"Module"},
        isDateType: ["EffectDate"]
    };

    function fn_EditEmployeeWiseTargetSettings() {


        let $thisUser = $(this).closest('tr');
        let savedData = $thisUser.data('pData');
        debugger

        $('.dataTable tr').removeClass("SelectForDelete");
        $(this).closest('tr').addClass('SelectForDelete');

        let inputData = {
            ID_EmployeeWiseTargetSettings: savedData.ID_EmployeeWiseTargetSettings
        };


             $.ajax({
                 url: '@Url.Action("GetEmpWiseTargetSettingsInfo", "EmployeeWiseTargetSettings")',
                 type: "POST",
                 data: JSON.stringify(inputData),
                 dataType: "json",
                 contentType: "application/json",
                 success: function (ajaxOutput) {
                     console.log('ajaxOutput', ajaxOutput);
                     debugger

                     if (ajaxOutput.Process.IsProcess) {
                          $formContainer.load('@Url.Action("LoadEmployeeWiseTargetSettingsForm", "EmployeeWiseTargetSettings")?mtd=@ViewBag.mtd', function () {
                             debugger;

                             let $thisForm = $(this).find('[perfect-class="form"]');

                             $thisForm.validate({ messages: validationMessage });

                              $thisForm.data({ 'pData': ajaxOutput.Data[0] });

                              $thisForm.find('[name=Module]').val(ajaxOutput.Data[0].Module).selectpicker('refresh'),
                                  $thisForm.find('[name=EffectDate]').val(moment(ajaxOutput.Data[0].EffectDate).format('YYYY-MM-DD')),
                                  $thisForm.find('[name=FK_Designation]').val(ajaxOutput.Data[0].FK_Designation).selectpicker('refresh'),
                                  $thisForm.find('[name=FK_Department]').val(ajaxOutput.Data[0].FK_Department).selectpicker('refresh'),
                                  $thisForm.find('[name=FK_Employee]').val(ajaxOutput.Data[0].FK_Employee),
                                  $thisForm.find('[name=Employee]').val(ajaxOutput.Data[0].Employee),
                                  $thisForm.find('[name=TargetAmount]').val(Number(ajaxOutput.Data[0].TargetAmount).toFixed(2)),
                                  $thisForm.find('[name=TargetCount]').val(ajaxOutput.Data[0].TargetCount),
                                  $thisForm.find('[name=PeriodType]').val(ajaxOutput.Data[0].PeriodType).selectpicker('refresh'),
                                  $thisForm.find('[name=Period]').val(ajaxOutput.Data[0].Period),
                                  $("#Module").trigger('change');
                                  $thisForm.find('[name="Mode"]').attr('perfect-onloadSelect', (ajaxOutput.Data[0].Mode));
                                  //$thisForm.find('[name=Mode]').val(ajaxOutput.Data[0].Mode).selectpicker('refresh'),
                              $thisForm.find('button[name=add]').addClass('d-none');
                              $thisForm.find('button[name=update]').addClass('d-none');

                              $thisForm.attr('perfect-onFormSuccess', 'fn_EmployeeWiseTargetsettings_initialload');
                             $sideMenuOptions.close();
                         });
                     }
                     else {

                         $.each(ajaxOutput.Process.Message, function (key, value) {
                             NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                         });
                     }
                 },

             });
        
    }


    function fn_DeleteEmployeeWiseTargetSettings()
    {


        let $row = $(this).closest('tr');
        let Saveddata = $row.data('pData');

        $('.dataTable tr').removeClass("SelectForDelete");
        $(this).closest('tr').addClass('SelectForDelete');

               $.ajax({
                   url: "@Url.Action("GetEmpWiseTargetReasonList", "EmployeeWiseTargetSettings")",
                   type: "GET",
                   contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                   success: function (ajaxReasonOutput) {
                       if (ajaxReasonOutput.Process.IsProcess) {
                           let confirmationDialogBoxOption = { heading: "Are you Sure?", body: "Do you want to remove this record  ?", cancel: "No", confirm: "Yes", reason: ajaxReasonOutput.Data };
                           var confirmBoxObj = ConfirmDialog(confirmationDialogBoxOption);
                            confirmBoxObj.then(function (selectedOption) {
                                if (selectedOption) {
                                    let inputData = {
                                        __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                                        FK_EmployeeWiseTargetSettings: Saveddata['ID_EmployeeWiseTargetSettings'],
                                        FK_Reason: selectedOption,
                                    };
                                    $.ajax({
                                        url: "@Url.Action("DeleteEmpWiseTargetSettings", "EmployeeWiseTargetSettings")",
                                        type: "POST",
                                        data: inputData,
                                        contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                                        success: function (ajaxOutput) {
                                            if (ajaxOutput.Process.IsProcess) {
                                                let table = $row.closest('table').DataTable()
                                                table.row($row).remove().draw();

                                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                                    NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': 'Deleted Successfully' });
                                                });
                                                fn_QuotationIndex_InitialLoad();
                                                $('.dataTable tr').removeClass("SelectForDelete");
                                            }
                                            else {
                                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                                    $('.dataTable tr').removeClass("SelectForDelete");
                                                });
                                            }
                                        }
                                    });
                                }
                                else {
                                    NotificationMessage({'message': 'No option selected' });
                                }
                            });
                        }
                        else {
                        }
                   }

               });
    };

</script>
}
