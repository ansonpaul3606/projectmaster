
@{
    ViewBag.Title = "Extra Work Type";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="container-fluid">
    @Html.AntiForgeryToken()
    <div class="row">
        <div class="col-lg-12" id="jq_ExtraWorkIndex_formContainer">

        </div>
    </div>


</div>
@section scripts{

    <script type="text/javascript">

        const $formContainer = $('#jq_ExtraWorkIndex_formContainer');
        //--- Common table settings for this page
        var tableOptions = {
            dropdown: {
                buttons: [

                   @if (ViewBag.PagedAccessRights.UsrrlTyView) {
        <text> { displayName: "View", action: editWork },</text>
    }

                    { type: "divider" },
     @if (ViewBag.PagedAccessRights.UsrrlTyDel)
             {
                 <text> { displayName: "Delete", action: deleteWork },</text>

              }


                ],
                class: "btn btn-success light sharp"
            },
            onlyShowColumn: ["SlNo","WorkName", "ShortName"],
            hideColumn: [],
            rowClickAction: editWork,
            //serialNo: true,
            renameHeader: {
                "SlNo": "SL No", "WorkName": "Name", "ShortName": "ShortName"
            }
        };

        var validationMessage = {

            'WorkName': {
                'required': 'Please Enter a Name',
                'stringonly': 'Invalid  Name'
            },

            'ShortName': {
                'required': 'Please Enter a Short Name',
                'stringonly': 'Invalid  Short Name',
                'alphanumeric': 'Invalid  Short Name',
            },

            //'AccountHeadID': {
            //    'required': 'Please select a AccountHead',
            //    'digits': 'Invalid AccountHead selected'
            //},

        };

        $(document).ready(function () {
            fn_ExtraWorkIndex_initialLoad()

        });


        function fn_ExtraWorkIndex_initialLoad() {
            
            fn_ExtraWorkIndex_loadExtraWorkAddForm();

             @if (ViewBag.PagedAccessRights.UsrrlTyView)
              {
                 <text>    loadWorkList(this); </text>
              }
       
        }


        function fn_ExtraWorkIndex_loadExtraWorkAddForm() {

            $formContainer.load('@Url.Action("ExtraworkForm", "ExtraWorkType")', function () {
                let $thisForm = $(this).find('[perfect-class="form"]');
                $thisForm.validate({ messages: validationMessage });
                $thisForm.attr('perfect-onFormSuccess', 'fn_ExtraWorkIndex_initialLoad');

               // initFunctions($thisForm);
               
            });

        };



        function loadWorkList(ele) {
        let $sidemenu = $sideMenuOptions.body;
       
       // let $thisForm = $(ele).closest('.Search-Control');

       
            let $thisForm = $(ele).closest('.testSearchBox');
            let SearchName = $thisForm.find('input').val();
            serchpdfname = SearchName;
            console.log("GH", SearchName)
            if (SearchName == undefined) {
                SearchName = "";
            }
        console.log("GH",SearchName)
        $sideMenuOptions.title.find('h4').text('Work Type List');
          let pageUrl = '@Url.Action("GetWorkList", "ExtraWorkType")';
            $.ajax({
                url:pageUrl,
                type: "POST",
                data: { pageSize: 15, pageIndex: 0, Name: SearchName },
                dataType: "json",
                contentType: "application/x-www-form-urlencoded; charset=utf-8",
                success: function (ajaxOutput) {


                          if (ajaxOutput.Process.IsProcess) {
                              console.log('Work Type', ajaxOutput);
                              $sidemenu.find('.jq_sidemenu_title').text("Work Type");

                              $sidemenu.empty().append('<div class="d-flex justify-content-end mb-2 position-relative"><div class="col-md-6 position-absolute top-1 z-index"> <div class="input-group testSearchBox"><input type="text" class="form-control " name="SearchName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input"value ="' + SearchName +'"  /><div class="input-group-append"><button id="addcountry-jq-searchButton6" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="loadWorkList(this)"></button></div></div></div></div>', $('<div/>', {class:"col-md-12 table_temp_class"}).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))
                             // $sidemenu.find('table').dataTable({ paging: true });


                              let $table = $sidemenu.find('table');
                              $table.dataTable({
                                  "serverSide": true,//no change
                                  "processing": true,//-- process text when clicked
                                  //"lengthChange": false,
                                  "lengthMenu": [10, 15, 20, 25, 50, 100],//---drop down page size
                                  "searching": false,//--no change
                                  "ordering": false,//--sorting
                                  "deferLoading": ajaxOutput.totalrecord,//<----to total number of record from db
                                  "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,//<----starting record
                                  "pageLength": ajaxOutput.pageSize,//<----page size
                                  "recordsFiltered": ajaxOutput.pageSize,//<---page size

                                  "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize, searchkey: SearchName }, tableOptions, $table)
                              });

                          }
                else {
                              if (ajaxOutput.Process.Status = "NoData") {
                                 
                                  $sidemenu.find('.jq_sidemenu_title').text("Work Type");

                                  $sidemenu.empty().append('<div class="d-flex justify-content-end mb-2"><div class="col-md-6 position-absolute top-1 z-index"> <div class="input-group testSearchBox"><input type="text" class="form-control " name="SearchName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" value="' + SearchName +'"  /><div class="input-group-append"><button id="addcountry-jq-searchButton6" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="loadWorkList(this)"></button></div></div></div></div>', $('<div/>', { class: "col-md-12 table_temp_class" }).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))
                        // $sidemenu.find('table').dataTable({ paging: true });


                        let $table = $sidemenu.find('table');
                        $table.dataTable({
                            "serverSide": true,//no change
                            "processing": true,//-- process text when clicked
                           // "lengthChange": false,
                           "lengthMenu": [],//---drop down page size
                            "searching": false,//--no change
                            "ordering": false,//--sorting
                            "deferLoading": ajaxOutput.totalrecord,//<----to total number of record from db
                            "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,//<----starting record
                            "pageLength": ajaxOutput.pageSize,//<----page size
                            "recordsFiltered": ajaxOutput.pageSize,//<---page size

                            "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize }, tableOptions, $table)
                        });
                    }
                    else {
                        $.each(ajaxOutput.Process.Message, function (key, value) {
                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                        });
                    }
                }




            },
            complete: function () {

            }
        });
    }
    function returnajaxPagination(ajaxInfo, tableOptions, tableid) {
        //{ apiurl, pageSize }
        return {
            url: ajaxInfo.apiurl,
            type: "post",
            data: function () {
                var info = tableid.DataTable().page.info();
                console.log('RETURN AJAX', info)
                //return { <antiforgery>:<antiforgery>, length: ajaxInfo.pageSize, page: info.page }
                let input = { pageSize: info.length, pageIndex: info.page };
                if (ajaxInfo.searchkey) {
                    input["Name"] = ajaxInfo.searchkey;
                }
                return input
            },
            dataType: "json",
            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            success: function (dtajaxOutput) {
                // $sideMenuOptions.body.html(pft_table_createtable(dtajaxOutput.Data, tableOptions));
                let table = tableid.DataTable();
                table.destroy();
                pft_table_newTableBody(tableid, dtajaxOutput.Data, tableOptions);

                tableid.dataTable({
                    "serverSide": true,
                    "processing": true,
                    //"lengthChange": false,
                    "lengthMenu": [10, 15, 20, 25, 50, 100],
                    "searching": false,
                    "ordering": false,
                    "deferLoading": dtajaxOutput.totalrecord,
                    "displayStart": dtajaxOutput.pageIndex * dtajaxOutput.pageSize,
                    "pageLength": dtajaxOutput.pageSize,
                    "recordsFiltered": dtajaxOutput.pageSize,
                    "ajax": returnajaxPagination(ajaxInfo, tableOptions, tableid)
                })

            },

        }
    }
   
        //////
          function loadWorkList1() {
            let $sidemenu = $sideMenuOptions.body;
            $sideMenuOptions.title.find('h4').text(' Work Type list');
        //    alert("ss")

            $.ajax({
                url: "@Url.Action("GetWorkList", "ExtraWorkType")",
                type: "Get",
                headers: { "token_key": "1234" },
                //data: { branchID: id },
                dataType: "json",
                contentType: "application/json",
                success: function (data) {
                    console.log('Vallue is this',data.Data)
                    if (data.Process.IsProcess) {

                        $sidemenu.html(pft_table_createtable(data.Data, tableOptions))
                        $sidemenu.find('table').dataTable({ paging: true });
                    }
                    else {
                        $.each(data.Process.Message, function (key, value) {
                           // toastr.warning(value, "Error");
                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                        });
                    }

                    
                    $sidemenu.find('.jq_sidemenu_title').text("Extra Work List ");

                },
                complete: function () {

                }
            });
        }

          function editWork() {

            let $thisUser = $(this).closest('tr');
              let savedData = $thisUser.data('pData');



              $('.dataTable tr').removeClass("SelectForDelete");
              $(this).closest('tr').addClass('SelectForDelete');

            
              let inputData = { ExtraWorkTypeID: savedData.ExtraWorkTypeID };
             console.log(inputData);
            //dbcall
              $('#jq_ExtraWorkIndex_formContainer').empty();
                    $.ajax({
                 url: '@Url.Action("GetWorkInfo", "ExtraWorkType")',//<----- Controller URL : url path in our controller eq: /Home/InsertSampleData or http://localhost:64212/Home/InsertSampleData
                type: "POST",
                 // headers: { "token_key": "1234" },
                 data: JSON.stringify(inputData),//<---- Input json : data passed to controller
                dataType: "json",
                contentType: "application/json",
                        success: function (ajaxOutput) {//<----- if ajax method executed succesfully,  we get the data passed from controller in this variable  => success: function (variable) {

                         


                            $('#jq_ExtraWorkIndex_formContainer').load("@Url.Action("ExtraworkForm", "ExtraWorkType")", function () {
                                $(this).find('[perfect-class=formTitle]').text('update : ' + ajaxOutput.Data[0].WorkName)
                                let $thisForm = $(this).find('[perfect-class="form"]');

                                $thisForm.data({ 'pData': ajaxOutput.Data[0] });//setting pdata : which is used to get PostID when updating the  form in partial page
 

                                $thisForm.find('[name=WorkName]').val(ajaxOutput.Data[0].WorkName),
                                    $thisForm.find('[name=ShortName]').val(ajaxOutput.Data[0].ShortName),
                                    $thisForm.find('[name="ExtraWork"]').prop('checked', ajaxOutput.Data[0]['ExtraWork']);
                                    $thisForm.find('[name=AccountHeadID]').val(ajaxOutput.Data[0].AccountHeadID),
                                    $thisForm.find('[name=AccountHead]').val(ajaxOutput.Data[0].AccountHead),
                                    $thisForm.find('[name=SortOrder]').val(ajaxOutput.Data[0].SortOrder)
                                //show update button
                                $thisForm.find('button[name=add]').addClass('d-none');
                                $thisForm.find('button[name=update]').removeClass('d-none');

                                $thisForm.attr('perfect-onFormSuccess', 'fn_ExtraWorkIndex_initialLoad');

                                $sideMenuOptions.close();

                            });
                        
                },


            });

        }


        function deleteWork() {
            let $row = $(this).closest('tr');

            let Saveddata = $row.data('pData');

            $('.dataTable tr').removeClass("SelectForDelete");
            $(this).closest('tr').addClass('SelectForDelete');

               $.ajax({
                   url: "@Url.Action("GetExtraworkDeleteReasonList", "ExtraWorkType")",
                   type: "GET",
                   contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                   success: function (ajaxReasonOutput) {
                       if (ajaxReasonOutput.Process.IsProcess) {

                          //old delete section


                           let confirmationDialogBoxOption = { heading: "Are you Sure?", body: "Do you want to remove " + Saveddata.WorkName + " ?", cancel: "No", confirm: "Yes", reason: ajaxReasonOutput.Data };
                            var res = ConfirmDialog(confirmationDialogBoxOption);
                            res.then(function (ret) {
                                if (ret) {

                                    let inputData = {
                                       __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(), //antiforgery token
                                        ExtraWorkTypeID: Saveddata.ExtraWorkTypeID,
                                        ReasonID: ret
                                    };

                                    $.ajax({
                                        url: "@Url.Action("DeleteWork", "ExtraWorkType")",
                                        type: "POST",
                                        data: inputData, //antiforgery token removed json.stringify
                                        contentType: "application/x-www-form-urlencoded; charset=utf-8",//antiforgery token changed json->x-www-form-urlencode...
                                        success: function (data) {

                                            if (data.Process.IsProcess) {
                                                let table = $row.closest('table').DataTable()
                                                table.row($row).remove().draw();
                                                fn_ExtraWorkIndex_loadExtraWorkAddForm();
                                                $.each(data.Process.Message, function (key, value) {
                                                    //toastr.success(value, "Success");
                                                    NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': 'Deleted Successfully' });
                                                });
                                                $('.dataTable tr').removeClass("SelectForDelete");
                                            }
                                            else {
                                                $.each(data.Process.Message, function (key, value) {
                                                    // toastr.warning(value, "Error");
                                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                                    $('.dataTable tr').removeClass("SelectForDelete");
                                                });
                                            }
                                            //row.remove();
                                            //$(row).closest('table').reload()
                                            
                           
                                        }
                                    });
                                }
                                else {
                                    //toastr.warning("Clicked no in comfirmation box", "Confirmation Box in table");
                                    NotificationMessage({ 'message': 'No option selected' });
                                }
                            });

                           //old delete section

                    }
                }

            });




        };


    </script>










}

