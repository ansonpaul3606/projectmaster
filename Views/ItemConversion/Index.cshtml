
@{
    ViewBag.Title = "Index";
}

<div class="container-fluid">
    @Html.AntiForgeryToken()
    <div class="row">
        <div class="col-lg-12" id="conversionitem-form">

        </div>
    </div>
</div>

@section scripts {


    <script type="text/javascript">
        var ConvTransMode = '';
        const LastIDSessionKey ='ItemConversionLastID';
        var LastID_ItemConversion;
        const $formContainer = $('#conversionitem-form');
        $(document).ready(function () {

            ItemConversion_initLoad();
        });
        function ItemConversion_initLoad() {
            ConvTransMode = '@ViewBag.TransMode';
           
            LoadConversionItemList(this, LoadAddConversionItem);
        }
        function LoadAddConversionItem() {

            $formContainer.load('@Url.Action("LoadItemConversion", "ItemConversion")?mtd=@ViewBag.mtd' + '&TransMode=@ViewBag.TransMode', function () {
                let $thisForm = $(this).find('[perfect-class="form"]');
                 $thisForm.validate({ messages: validationMessage });
                $thisForm.find('[name="ICDate"]').val(moment().format('YYYY-MM-DD'));
                $thisForm.attr('perfect-onFormSuccess', 'ItemConversion_initLoad');
                getSessionValue(LastIDSessionKey, function (result) {
                    LastID_ItemConversion = result;
                });
            });
        }
        var validationMessage = {
            'ICDate': {
                'required': 'Please select Conversion Date.'
            },
            'ICModule': {
                'required': 'Please Select Conversion Mode.'
            },
            'FK_Product': {
                'required': 'Please Select Product'
            },
            'DepartmentID': {
                'required': 'Please select Department'
            }
        }


            var tableOptions = {
            dropdown: {
                buttons: [

                       @if (ViewBag.PagedAccessRights.UsrrlTyView)
                               {

                                <text>   { displayName: "View", action: fn_ItemConversion_UpdateForm }, </text>
                              }

                  { type: "divider" },

                    @if (ViewBag.PagedAccessRights.UsrrlTyDel)
                         {
                               <text> { displayName: "Delete", action: fn_delete_IC},</text>
                        }


                ],

                class: "btn btn-success light sharp"
                },

                onlyShowColumn: ["SlNo", "ICDate", "FK_Department", "ProductName","ICModeName"],
                hideColumn: [],
                rowClickAction: fn_ItemConversion_UpdateForm,
                renameHeader: { "SlNo": "SL No", "ICDate": "Conversion Date", "FK_Department": "Department", "ProductName": "Product","ICModeName":"Conversion Mode"},
                isDateType: ['ICDate'],

            };


        function LoadConversionItemList(ele,callback) {

      let $sidemenu = $sideMenuOptions.body;
            let $thisForm = $(ele).closest('.testSearchBox');
            let SearchName = $thisForm.find('input').val();
            //console.log("GHc", SearchName)
        if (SearchName == undefined) {
            SearchName = '';
        }


            //let tableOptions = servtableOptions;


            $sideMenuOptions.title.find('h4').text('@ViewBag.PageTitles'+' '+'List');
            let pageUrl = "@Url.Action("GetItemConversionList", "ItemConversion")";
            $.ajax({
                url:pageUrl,
                type: "POST",
                data: { pageSize: 15, pageIndex: 0, Name: SearchName, TransMode: ConvTransMode},
                dataType: "json",
                contentType: "application/x-www-form-urlencoded; charset=utf-8",
                success: function (ajaxOutput) {
                   
                    if (ajaxOutput.Process.IsProcess) {
                       // debugger
                             console.log('Sa', ajaxOutput);
                        $sidemenu.find('.jq_sidemenu_title').text("Log List");

                        setSessionValue(LastIDSessionKey, ajaxOutput.Data[0]["LastID"]);

                        $sidemenu.empty().append('<div class="d-flex justify-content-end mb-2 position-relative"><div class="col-md-6 position-absolute top-1 z-index"> <div class="input-group testSearchBox"><input type="text" class="form-control " name="SearchName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input"  /><div class="input-group-append"><button id="addcountry-jq-searchButton6" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="LoadConversionItemList(this)"></button></div></div></div></div>', $('<div/>', { class: "col-md-12 table_temp_class" }).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))

                   
                              let $table = $sidemenu.find('table');
                              $table.dataTable({

                                  "serverSide": true,//no change
                                  "processing": true,//-- process text when clicked
                                  //"lengthChange": false,
                                  "lengthMenu": [10, 15, 20, 25, 50, 100],//---drop down page size
                                  "searching": false,//--no change
                                  "ordering": false,//--sorting
                                  "deferLoading": ajaxOutput.totalrecord,//<----to total number of record from db
                                  "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,//<----starting record
                                  "pageLength": ajaxOutput.pageSize,//<----page size
                                  "recordsFiltered": ajaxOutput.pageSize,//<---page size

                                  "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize, searchkey: SearchName, TransMode: ConvTransMode}, tableOptions, $table)
                              });

                          }
                    else {
                        setSessionValue(LastIDSessionKey,0);
                              if (ajaxOutput.Process.Status = "NoData") {

                                  $sidemenu.find('.jq_sidemenu_title').text("Sales List");

                                  $sidemenu.empty().append('<div class="d-flex justify-content-center mb-2 position-relative"><div class="col-md-8 position-absolute top-3 z-index"> <div class="input-group-append testSearchBox"></div></div></div>')

                                  $sidemenu.append('<div class="d-flex justify-content-end mb-2"><div class="col-md-5 position-absolute top-1 z-index"> <div class="input-group testSearchBox"><input type="text" class="form-control " id="serchname" name="SearchName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input"  value="' + SearchName +'"  /><div class="input-group-append"><button id="addcountry-jq-searchButton6" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="LoadConversionItemList(this)"></button></div></div></div></div>', $('<div/>', { class: "col-md-12 table_temp_class" }).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))

                                let $table = $sidemenu.find('table');
                                $table.dataTable({
                                    "serverSide": true,//no change
                                    "processing": true,//-- process text when clicked
                                   // "lengthChange": false,
                                     "lengthMenu": [],//---drop down page size
                                    "searching": false,//--no change
                                    "ordering": false,//--sorting
                                    "deferLoading": ajaxOutput.totalrecord,//<----to total number of record from db
                                    "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,//<----starting record
                                    "pageLength": ajaxOutput.pageSize,//<----page size
                                    "recordsFiltered": ajaxOutput.pageSize,//<---page size

                                    "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize, searchkey: SearchName, TransMode: ConvTransMode}, tableOptions, $table)
                                });
                            }
                            else {
                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                });
                            }
                }
            },
            complete: function () {
                if (callback) {


                    callback();
                }
            }
        });

    }

    function returnajaxPagination(ajaxInfo, tableOptions, tableid) {
        //{ apiurl, pageSize }


        return {
            url: ajaxInfo.apiurl,
            type: "post",
            data: function () {
                var info = tableid.DataTable().page.info();
             

                let input = { pageSize: info.length, pageIndex: info.page, TransMode: ajaxInfo.TransMode };
                if (ajaxInfo.searchkey) {
                    input["Name"] = ajaxInfo.searchkey;
                }
                return input
            },
            dataType: "json",
            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            success: function (dtajaxOutput) {

                let table = tableid.DataTable();
                table.destroy();
                pft_table_newTableBody(tableid, dtajaxOutput.Data, tableOptions);

                tableid.dataTable({
                    "serverSide": true,
                    "processing": true,

                    "lengthMenu": [10, 15, 20, 25, 50, 100],
                    "searching": false,
                    "ordering": false,
                    "deferLoading": dtajaxOutput.totalrecord,
                    "displayStart": dtajaxOutput.pageIndex * dtajaxOutput.pageSize,
                    "pageLength": dtajaxOutput.pageSize,
                    "recordsFiltered": dtajaxOutput.pageSize,
                    "ajax": returnajaxPagination(ajaxInfo, tableOptions, tableid)
                })

            },

        }
    }


        function fn_ItemConversion_UpdateForm() {
      

         let $thisUser = $(this).closest('tr');
         let savedData = $thisUser.data('pData');
         $('.dataTable tr').removeClass("SelectForDelete");
         $(this).closest('tr').addClass('SelectForDelete');

         $formContainer.load('@Url.Action("LoadItemConversion", "ItemConversion")?mtd=@ViewBag.mtd' + '&TransMode=@ViewBag.TransMode', function () {

            let $thisForm = $(this).find('[perfect-class="form"]');
            $thisForm.validate({ messages: validationMessage });

             $thisForm.find('[name="DepartmentID"]').val(savedData.DepartmentID).selectpicker('refresh');
             $thisForm.find('[name="ProductName"]').val(savedData.ProductName);
             $thisForm.find('[name="FK_Product"]').val(savedData.FK_Product).selectpicker('refresh');
             $thisForm.find('[name="ICMode"]').val(savedData.ICMode).selectpicker('refresh');
             $thisForm.find('[name="ICDate"]').val(moment(savedData.ICDate).format('YYYY-MM-DD'));
             $thisForm.find('[name="ID_ItemConversion"]').val(savedData.ID_ItemConversion);


           let inputData = {
               FK_ItemConversion: savedData.ID_ItemConversion,
               TransMode: ConvTransMode
           };
         
               $.ajax({
                 url: '@Url.Action("GetItemInfoByID", "ItemConversion")',
                 type: "POST",
                 data: inputData,
                 dataType: "json",
                   contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                   success: function (ajaxOutput) {
                     
                    
                       if (ajaxOutput != null) {
                          
                          
                           if (ajaxOutput.datares.Process.IsProcess) {
                              
                        
                               fn_fill_ItemGrid($thisForm, ajaxOutput.datares.Data, savedData);
                           }
                         
                           
                           $thisForm.find('button[name=add]').addClass('d-none');
                           $thisForm.find('button[name=update]').removeClass('d-none');
                           $thisForm.attr('perfect-onFormSuccess', 'ItemConversion_initLoad');
                           //}

                       }
                       else {
                           $.each(ajaxOutput.lgdata.Process.Message, function (key, value) {
                               NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                               // $('.dataTable tr').removeClass("SelectForDelete");
                           });
                       }
                 },

               }); $sideMenuOptions.close();
         });

       }
        function fn_delete_IC() {

        let $row = $(this).closest('tr');
        let Saveddata = $row.data('pData');
    

            $('.dataTable tr').removeClass("SelectForDelete");
            $(this).closest('tr').addClass('SelectForDelete');

            $.ajax({
                url: "@Url.Action("GetItemReasonList", "ItemConversion")",
                type: "GET",
                contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                success: function (ajaxReasonOutput) {

                    if (ajaxReasonOutput.Process.IsProcess) {
                      

                        let confirmationDialogBoxOption = { heading: "Are you Sure?", body: "Do you want to remove this ?", cancel: "No", confirm: "Yes", reason: ajaxReasonOutput.Data };
                        var res = ConfirmDialog(confirmationDialogBoxOption);
                        res.then(function (ret) {
                            if (ret) {

                                let inputData = {
                                    __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                                    ID_ItemConversion: Saveddata.ID_ItemConversion,
                                    ReasonID: ret,
                                    TransMode: ConvTransMode
                                };

                                $.ajax({
                                    url: "@Url.Action("DeleteItemData", "ItemConversion")",
                                    type: "POST",
                                    data: inputData,
                                    contentType: "application/x-www-form-urlencoded; charset=utf-8",
                                    success: function (data) {
                                        let $thisForm = $(this).find('[perfect-class="form"]');
                                        if (data.Process.IsProcess) {
                                            let table = $row.closest('table').DataTable()
                                            table.row($row).remove().draw();
                                            $.each(data.Process.Message, function (key, value) {
                                                NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': 'Deleted Successfully' });


                                                $sideMenuOptions.close();
                                                // window.location.reload();
                                                LoadAddConversionItem();
                                            });

                                            $('.dataTable tr').removeClass("SelectForDelete");
                                        }
                                        else {
                                            $.each(data.Process.Message, function (key, value) {
                                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                                $('.dataTable tr').removeClass("SelectForDelete");
                                            });
                                        }
                                    }
                                });
                            }
                            else {
                                NotificationMessage({ 'message': 'No option selected' });
                            }
                        });
                    }
                }

            });

        }


        function fn_fill_ItemGrid(ele, data, savedData) {
           
            let $thisForm = $('[perfect-class="form"]');
        
            if (savedData.ICMode == 2) {
                $('#id_item_show').hide();
                document.getElementById('id_conv_Pro').style.display = 'block';
            }
            else {
                document.getElementById('id_conv_Pro').style.display = 'none';
                $('#id_item_show').show();
            }
            if (data) {
              
                document.getElementById('itemCid').style.display = 'block';
                let $tbody1 = $thisForm.find('[perfect-class="ModuleContainer"]').find('tbody');
                $("#icmod").attr("disabled", true);
               // $("#iddept").attr("disabled", true);

                $.each(data, function (i, data) {
                   
                    let rowCount;   //= (i + 1);
                    let $row = $('<tr/>', { id: rowCount, class: "trvalue" });

                    $row.append($('<td>', { class: "ChkProd" }).html(
                        $('<label>').append(
                            $('<input />', {
                                type: 'checkbox',
                                name: 'ItemCheckPro',
                                'perfect-class': 'formCheckInput',
                                'perfect-ctype': "checkbox",
                                checked: 'checked' // Add the checked attribute here
                            })
                        ).append('') // Replace '' with your desired label text
                            .on('change', function () {
                              
                                var $actstock = $(this).closest('tr').find('.ActStock input[type="text"]').val();
                                var constock = $(this).closest('tr').find('.ConStock input[type="text"]');
                         
                                if (!$(this).is(':checked') && constock.val() == 0) {

                                    constock.val($actstock)
                                }
                                else if (!$(this).is(':checked') && constock.val() != 0) {
                                    constock.val(0)
                                }
                                else if ($(this).is(':checked') && constock.val() != 0) {
                                    constock.val(0)
                                }
                                else {
                                    constock.val(0)
                                }
                            })
                    ))

                        .append($('<td>', { class: "FK_prod", style: "display:none" }).text(data.ICProduct))
                        .append($('<td>', { class: "Prod", style: "max-width:200px;" }).text(data.ProductName))
                        .append($('<td>', { class: "fk_stk", style: "display:none" }).text(data.FK_StockFrom))
                        .append($('<td>', { class: "fk_dept" }).text(data.Department))
                        .append($('<td>', { class: "ActStock" }).html(
                            $('<input/>', { type: 'text', class: 'form-control text-right', min: '0', maxlength: '6', max: '100', name: 'ICActualStock', id: 'insP', readonly: 'readonly' })
                                .val(data.ICActualStock)
                        ))
                        .append($('<td>', { class: "ConStock" }).html(
                            $('<input/>', { type: 'text', class: 'form-control text-right', min: '0', maxlength: '12', name: "ICconvertStock", id: "Iamount" })
                                .val(data.ICConversionStock)
                                .keypress(function () { return isNumberKey(event) })
                                .on('change', function () {
                                    StockCalc(this);
                                })
                                .on('input', function () {
                                    decimalpnt(this, 'Iamount', 3)
                                })

                        ))
                        .append($('<td>', { class: "ItRmrk" }).html(
                            $('<input/>', {
                                type: 'text',
                                class: 'form-control text-left',
                                maxlength: '500',
                                name: "ICRemark",
                                id: "Rmrkid",
                                // You can set an initial value for the remark here if needed
                                // value: 'Initial Remark Value'
                            }).val(data.ICRemark)
                             .keypress(function () { return filterSpecialCharacters(event) })

                        ))

                        .append($('<td>', { class: "DeleteRow" }).html(
                            $('<button/>', {
                                type: 'button',
                                class: 'fa fa-trash btnPerfectDelete',
                                text: ''
                            }).on('click', function () {
                                if (savedData.ICMode == 2) {
                                    $(this).closest('tr').remove();
                                    if ($('#itemCTbody tr').length == 0) {
                                        document.getElementById('itemCid').style.display = 'none';
                                    }
                                }
                            
                                
                            })
                        ));



                    $tbody1.append($row);
                    $thisForm.find('[name="ProductID"]').val('');
                    $thisForm.find('[name="ProName"]').val('');

                });

            }

        }
      
    </script>
}