
@{
    ViewBag.Title = "Place";
}

<div class="container-fluid">
    @Html.AntiForgeryToken()  @*//antiforgery token*@
    <div class="row">
        <div class="col-lg-12" id="Place-jq-PlaceFormContainer">

        </div>
    </div>

</div>

@section scripts{

<script type="text/javascript">
    const $formContainer = $('#Place-jq-PlaceFormContainer');

        function loadAddForn() {
            $formContainer.load('@Url.Action("GetPlaceForm", "Place")', function () {

                let $thisForm = $(this).find('[perfect-class="form"]');

                $thisForm.validate({ messages: validationMessage });

                $thisForm.attr('perfect-onFormSuccess', 'placeInitialLoad');
                initFunctions($thisForm);
    });
        }





        var tableOptions = {
            dropdown: {
                buttons: [

                    
               @if (ViewBag.PagedAccessRights.UsrrlMsView) {
        <text> { displayName: "View", action: editPlace },</text>
    }

                    { type: "divider" },
     @if (ViewBag.PagedAccessRights.UsrrlMsDel)
             {
                 <text> {
                          displayName: "Delete", action: deletePlace
 },</text>

              }
                  
                ],
                class: "btn btn-success light sharp"
            },
            hideColumn: ["SortOrder", "DistrictID","PostID","District", "DtName","PlcShortName","FK_BranchCodeUser","UserAction","BranchCode","PlcName","AuditData","SqlUpdateQuery", "PlaceID","ID_Place","FK_Company", "FK_District", "Passed", "Cancelled", "EntrBy", "CancelBy", "EntrOn", "CancelOn", "FK_Reason", "FK_Machine","BackupId","TotalCount"],
            isDateType: [""],
            rowClickAction: editPlace,
           // serialNo: true,
            renameHeader: { "SlNo":"SL NO","Place": "Name", "ShortName": "ShortName" }

        };
        $(document).ready(function () {
            placeInitialLoad()

    });

    var validationMessage = {
        'Place': {
            'required': 'Please Enter a Name',
            'maxlength': jQuery.validator.format(' Name should be less than {0} characters'),
            'stringonly': 'Special characters are not allowed in  Name'

        },
        'ShortName': {
            'required': 'Please Enter a Short Name',
            'maxlength': jQuery.validator.format(' Name should be less than {0} characters'),
            'alphanumeric': 'Special characters are not allowed in short name'
        },

        'PostID': {
            'required': 'Please Select a Post',
            'digits': 'Invalid Post selected'
        },
    };



    function placeInitialLoad() {
          @if (ViewBag.PagedAccessRights.UsrrlMsView)
              {
                 <text>  loadPlaceList(this); </text>
              }
           
            loadAddForn();
        }

    function loadPlaceList(ele) {
        let $sidemenu = $sideMenuOptions.body;
       
       // let $thisForm = $(ele).closest('.Search-Control');

        let $thisForm = $(ele).closest('.testSearchBox');
        let SearchName = $thisForm.find('input').val();
        console.log("GH",SearchName)
        $sideMenuOptions.title.find('h4').text('Place List');
          let pageUrl = '@Url.Action("GetList", "Place")';
            $.ajax({
                url:pageUrl,
                type: "POST",
                data: { pageSize: 15, pageIndex: 0, Name: SearchName },
                dataType: "json",
                contentType: "application/x-www-form-urlencoded; charset=utf-8",
                success: function (ajaxOutput) {


                          if (ajaxOutput.Process.IsProcess) {
                              console.log('place', ajaxOutput);
                              $sidemenu.find('.jq_sidemenu_title').text("Place");

                              $sidemenu.empty().append('<div class="d-flex justify-content-end mb-2 position-relative"><div class="col-md-6 position-absolute top-1 z-index"> <div class="input-group testSearchBox"><input type="text" class="form-control " name="SearchName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input"  /><div class="input-group-append"><button id="addcountry-jq-searchButton6" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="loadPlaceList(this)"></button></div></div></div></div>', $('<div/>', {class:"col-md-12 table_temp_class"}).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))
                             // $sidemenu.find('table').dataTable({ paging: true });


                              let $table = $sidemenu.find('table');
                              $table.dataTable({
                                  "serverSide": true,//no change
                                  "processing": true,//-- process text when clicked
                                  //"lengthChange": false,
                                  "lengthMenu": [10, 15, 20, 25, 50, 100],//---drop down page size
                                  "searching": false,//--no change
                                  "ordering": false,//--sorting
                                  "deferLoading": ajaxOutput.totalrecord,//<----to total number of record from db
                                  "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,//<----starting record
                                  "pageLength": ajaxOutput.pageSize,//<----page size
                                  "recordsFiltered": ajaxOutput.pageSize,//<---page size

                                  "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize, searchkey: SearchName }, tableOptions, $table)
                              });

                          }
                else {
                              if (ajaxOutput.Process.Status = "NoData") {
                                 
                        $sidemenu.find('.jq_sidemenu_title').text("Place");

                                  $sidemenu.empty().append('<div class="d-flex justify-content-end mb-2"><div class="col-md-6 position-absolute top-1 z-index"> <div class="input-group testSearchBox"><input type="text" class="form-control " name="SearchName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input"  /><div class="input-group-append"><button id="addcountry-jq-searchButton6" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="loadPlaceList(this)"></button></div></div></div></div>', $('<div/>', { class: "col-md-12 table_temp_class" }).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))
                        // $sidemenu.find('table').dataTable({ paging: true });


                        let $table = $sidemenu.find('table');
                        $table.dataTable({
                            "serverSide": true,//no change
                            "processing": true,//-- process text when clicked
                           // "lengthChange": false,
                           "lengthMenu": [],//---drop down page size
                            "searching": false,//--no change
                            "ordering": false,//--sorting
                            "deferLoading": ajaxOutput.totalrecord,//<----to total number of record from db
                            "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,//<----starting record
                            "pageLength": ajaxOutput.pageSize,//<----page size
                            "recordsFiltered": ajaxOutput.pageSize,//<---page size

                            "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize }, tableOptions, $table)
                        });
                    }
                    else {
                        $.each(ajaxOutput.Process.Message, function (key, value) {
                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                        });
                    }
                }




            },
            complete: function () {

            }
        });
    }
    function returnajaxPagination(ajaxInfo, tableOptions, tableid) {
        //{ apiurl, pageSize }
        return {
            url: ajaxInfo.apiurl,
            type: "post",
            data: function () {
                var info = tableid.DataTable().page.info();
                console.log('RETURN AJAX', info)
                //return { <antiforgery>:<antiforgery>, length: ajaxInfo.pageSize, page: info.page }
                let input = { pageSize: info.length, pageIndex: info.page };
                if (ajaxInfo.searchkey) {
                    input["Name"] = ajaxInfo.searchkey;
                }
                return input
            },
            dataType: "json",
            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            success: function (dtajaxOutput) {
                // $sideMenuOptions.body.html(pft_table_createtable(dtajaxOutput.Data, tableOptions));
                let table = tableid.DataTable();
                table.destroy();
                pft_table_newTableBody(tableid, dtajaxOutput.Data, tableOptions);

                tableid.dataTable({
                    "serverSide": true,
                    "processing": true,
                    //"lengthChange": false,
                    "lengthMenu": [10, 15, 20, 25, 50, 100],
                    "searching": false,
                    "ordering": false,
                    "deferLoading": dtajaxOutput.totalrecord,
                    "displayStart": dtajaxOutput.pageIndex * dtajaxOutput.pageSize,
                    "pageLength": dtajaxOutput.pageSize,
                    "recordsFiltered": dtajaxOutput.pageSize,
                    "ajax": returnajaxPagination(ajaxInfo, tableOptions, tableid)
                })

            },

        }
    }
  


        function deletePlace() {
            let $row = $(this).closest('tr');

            let Saveddata = $row.data('pData');
            $('.dataTable tr').removeClass("SelectForDelete");
            $(this).closest('tr').addClass('SelectForDelete');


               $.ajax({
                   url: "@Url.Action("GetPlaceDeleteReasonList", "Place")",
                   type: "GET",
                   contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                   success: function (ajaxReasonOutput) {
                       if (ajaxReasonOutput.Process.IsProcess) {

                          //old delete section


                           //let confirmationDialogBoxOption = { heading: "Confirm Delete?", body: "Do you want to remove " + Saveddata.Place + " ?", cancel: "No", confirm: "Yes", reason: ajaxReasonOutput.Data };
                           let confirmationDialogBoxOption = { heading: "Are you Sure?", body: "Do you want to remove   " + Saveddata.Place + " ?", cancel: "No", confirm: "Yes", reason: ajaxReasonOutput.Data };
                          // var confirmBoxObj = ConfirmDialog(confirmationDialogBoxOption);
                           var res = ConfirmDialog(confirmationDialogBoxOption);
                            res.then(function (ret) {
                                if (ret) {

                                    let inputData = {
                                        __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(), //antiforgery token
                                        ID_Place: Saveddata.PlaceID,
                                        ReasonID: ret
                                    };

                                    $.ajax({
                                        url: "@Url.Action("DeletePlace", "Place")",
                                        type: "POST",
                                        data: inputData, //antiforgery token removed json.stringify
                                        contentType: "application/x-www-form-urlencoded; charset=utf-8",//antiforgery token changed json->x-www-form-urlencode...
                                        success: function (data) {

                                            if (data.Process.IsProcess) {
                                                let table = $row.closest('table').DataTable()
                                                table.row($row).remove().draw();
                                                $.each(data.Process.Message, function (key, value) {
                                                    //toastr.success(value, "Success");
                                                    NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': 'Deleted Successfully' });
                                                   
                                                });
                                                $('.dataTable tr').removeClass("SelectForDelete");
                                            }
                                            else {
                                                $.each(data.Process.Message, function (key, value) {
                                                    // toastr.warning(value, "Error");
                                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                                    $('.dataTable tr').removeClass("SelectForDelete");
                                                });
                                            }
                                            //row.remove();
                                            //$(row).closest('table').reload()


                                        }
                                    });
                                }
                                else {
                                    //toastr.warning("Clicked no in comfirmation box", "Confirmation Box in table");
                                    NotificationMessage({ 'message': 'No option selected' });
                                }
                            });

                           //old delete section

                    }
                }

            });




        };

    function editPlace() {
            let row = $(this).closest('tr');

        let Saveddata = row.data('pData');
        $('.dataTable tr').removeClass("SelectForDelete");
        $(this).closest('tr').addClass('SelectForDelete');

            console.log("Saved data", Saveddata);
            let inputData = {
                __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                PlaceID: Saveddata.PlaceID
            };

            $.ajax({
                        url: '@Url.Action("GetPlaceInfo", "Place")',
                        type: "POST",

                        data: inputData,
                        dataType: "json",
                        contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                        success: function (ajaxOutput) {


                        console.log("Return", ajaxOutput.Data[0]);
                            if (ajaxOutput.Process.IsProcess)
                            {

                                console.log('>_ Inside GetPlaceInfo', ajaxOutput)



                               $formContainer.load("@Url.Action("GetPlaceForm", "Place")", function () {

                                   $(this).find('[perfect-class=formTitle]').text('update : ' + ajaxOutput.Data[0].Place)
                                    console.log('Inside load');

                                    let $thisForm = $(this).find('[perfect-class="form"]');
                                   // initFunctions($thisForm);
                                    $thisForm.validate({ messages: validationMessage });

                                    $thisForm.data({ pData: ajaxOutput.Data[0] }); //setting the pdata value in form for update -id is taking



                                   $thisForm.find('[name=Place]').val(ajaxOutput.Data[0].Place);
                                   $thisForm.find('[name=PostID]').val(ajaxOutput.Data[0].PostID).selectpicker('refresh');
                                   $thisForm.find('[name=ShortName]').val(ajaxOutput.Data[0].ShortName);
                                   $thisForm.find('[name=SortOrder]').val(ajaxOutput.Data[0].SortOrder);


                                   // $sideMenuOptions.close();
                                    //show update button
                                    $thisForm.find('button[name=add]').addClass('d-none');
                                    $thisForm.find('button[name=update]').removeClass('d-none');

                                   $thisForm.attr('perfect-onFormSuccess', 'placeInitialLoad');

                                    $sideMenuOptions.close();
                                });
                            }
                            else {
                                console.log('>_ Inside GetPlaceInfo :false')

                                $.each(ajaxOutput.Process.Message, function (key, value)
                                {
                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                    $('.dataTable tr').removeClass("SelectForDelete");
                                });
                            }

                          
                },

            });

        }
      
        function editPlace1() {


            let row = $(this).closest('tr');

            let Saveddata = row.data('pData');
            console.log("Saved data",Saveddata);
            let inputData = {
                __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                PlaceID: Saveddata.PlaceID
            };

                $.ajax({
                url: "@Url.Action("GetPlaceInfo", "Place")",
                type: "POST",
                 data: inputData,
                    contentType: "application/x-www-form-urlencoded; charset=utf-8",
                    success: function (ajaxOutput) {



                        $formContainer.load("@Url.Action("GetPlaceForm", "Place")", function () {
                       // $('Place-jq-PlaceFormContainer').load("@Url.Action("GetPlaceForm", "Place")", function () {

                            let $thisForm = $(this).find('[perfect-class="form"]');


                            $thisForm.validate({ messages: validationMessage });

                            $thisForm.data({ 'pData': ajaxOutput.Data[0] });//setting pdata : which is used to get PostID when updating the  form in partial page
                            console.log('ajaxOutputLOAD UPDTE', ajaxOutput.Data[0]);



                            $thisForm.find('[name=Place]').val(ajaxOutput.Data[0].Place);
                            $thisForm.find('[name=DistrictID]').val(ajaxOutput.Data[0].DistrictID).selectpicker('refresh');
                            $thisForm.find('[name=ShortName]').val(ajaxOutput.Data[0].ShortName);
                            $thisForm.find('[name=SortOrder]').val(ajaxOutput.Data[0].SortOrder);



                                //show update button
                                $thisForm.find('button[name=add]').addClass('d-none');
                                $thisForm.find('button[name=update]').removeClass('d-none');

                            $thisForm.attr('perfect-onFormSuccess', 'placeInitialLoad');

                                $sideMenuOptions.close();

                            });







                },
                //complete: function () {

                //}

            });





        }

</script>


}
