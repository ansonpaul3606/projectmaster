
@{
    ViewBag.Title = "Post";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="container-fluid">

    <div class="row">
        <div class="col-lg-12" id="post-sample-form">

        </div>
    </div>


</div>


@section scripts{

<script>


        const $formContainer = $('#post-sample-form');
    function initialLoadPost() {
             @if (ViewBag.PagedAccessRights.UsrrlMsView)
              {
                 <text> loadPostList(this); </text>
              }
           
            loadAddPostForm();
    }

    var validationMessage = {

        'PostName': {
            'required': 'Please Enter Name',
            'stringonly': 'Invalid Name selected',

        },
        'PostShortName': {
            'required': 'Please Enter Short Name',
            'alphanumeric': 'Invalid  Short Name selected',

        },
        'PostCode': {
            'required': 'Please Enter Pin Code',

        },
        'AreaID': {
            'required': 'Please select a Area',
            'stringonly': 'Invalid Area selected',

        },

    }

        $(document).ready(function () {

            //load customer data
            initialLoadPost();
        });


     function loadAddPostForm() {
       

              $formContainer.load('@Url.Action("PostView", "Post")?mtd=@ViewBag.mtd', function () {

              
                let $thisForm = $(this).find('[perfect-class="form"]');
                // ... Custom validation message
                $thisForm.validate({ messages: validationMessage });
                // ... Custom validation message
               // $(this).find('[perfect-class=form]').attr('perfect-onFormSuccess', 'initialLoadPost')
                $thisForm.attr('perfect-onFormSuccess', 'initialLoadPost');
                initFunctions($thisForm);
               
            });
        }


    function loadPostList(ele) {
        let $sidemenu = $sideMenuOptions.body;

       // let $thisForm = $(ele).closest('.Search-Control');

        let $thisForm = $(ele).closest('.testSearchBox');
        let SearchName = $thisForm.find('input').val();
        console.log("GH",SearchName)
         $sideMenuOptions.title.find('h4').text('@ViewBag.PageTitle'+' '+'List');
          let pageUrl = '@Url.Action("GetPostList", "Post")';
            $.ajax({
                url:pageUrl,
                type: "POST",
                data: { pageSize: 15, pageIndex: 0, Name: SearchName },
                dataType: "json",
                contentType: "application/x-www-form-urlencoded; charset=utf-8",
                success: function (ajaxOutput) {


                          if (ajaxOutput.Process.IsProcess) {
                              console.log('Post', ajaxOutput);
                              $sidemenu.find('.jq_sidemenu_title').text("Post");

                              $sidemenu.empty().append('<div class="d-flex justify-content-end mb-2 position-relative"><div class="col-md-6 position-absolute top-1 z-index"> <div class="input-group testSearchBox"><input type="text" class="form-control " name="SearchName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input"  /><div class="input-group-append"><button id="addcountry-jq-searchButton6" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="loadPostList(this)"></button></div></div></div></div>', $('<div/>', {class:"col-md-12 table_temp_class"}).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))
                             // $sidemenu.find('table').dataTable({ paging: true });


                              let $table = $sidemenu.find('table');
                              $table.dataTable({
                                  "serverSide": true,//no change
                                  "processing": true,//-- process text when clicked
                                //  "lengthChange": false,
                                  "lengthMenu": [10, 15, 20, 25, 50, 100],//---drop down page size
                                  "searching": false,//--no change
                                  "ordering": false,//--sorting
                                  "deferLoading": ajaxOutput.totalrecord,//<----to total number of record from db
                                  "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,//<----starting record
                                  "pageLength": ajaxOutput.pageSize,//<----page size
                                  "recordsFiltered": ajaxOutput.pageSize,//<---page size

                                  "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize, searchkey: SearchName }, tableOptions, $table)
                              });

                          }
                else {
                    if (ajaxOutput.Process.Status = "NoData") {
                        $sidemenu.find('.jq_sidemenu_title').text("Post");

                        $sidemenu.empty().append('<div class="d-flex justify-content-end mb-2"><div class="col-md-6 position-absolute top-1 z-index"> <div class="input-group testSearchBox"><input type="text" class="form-control " name="SearchName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input"  /><div class="input-group-append"><button id="addcountry-jq-searchButton6" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="loadPostList(this)"></button></div></div></div></div>', $('<div/>', { class: "col-md-12 table_temp_class" }).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))
                        // $sidemenu.find('table').dataTable({ paging: true });


                        let $table = $sidemenu.find('table');
                        $table.dataTable({
                            "serverSide": true,//no change
                            "processing": true,//-- process text when clicked
                            //"lengthChange": false,
                            "lengthMenu": [],//---drop down page size
                            "searching": false,//--no change
                            "ordering": false,//--sorting
                            "deferLoading": ajaxOutput.totalrecord,//<----to total number of record from db
                            "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,//<----starting record
                            "pageLength": ajaxOutput.pageSize,//<----page size
                            "recordsFiltered": ajaxOutput.pageSize,//<---page size

                            "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize }, tableOptions, $table)
                        });
                    }
                    else {
                        $.each(ajaxOutput.Process.Message, function (key, value) {
                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                        });
                    }
                }




            },
            complete: function () {

            }
        });
    }
    function returnajaxPagination(ajaxInfo, tableOptions, tableid) {
        //{ apiurl, pageSize }
        return {
            url: ajaxInfo.apiurl,
            type: "post",
            data: function () {
                var info = tableid.DataTable().page.info();
                console.log('RETURN AJAX', info)
                //return { <antiforgery>:<antiforgery>, length: ajaxInfo.pageSize, page: info.page }
                let input = { pageSize: info.length, pageIndex: info.page };
                if (ajaxInfo.searchkey) {
                    input["Name"] = ajaxInfo.searchkey;
                }
                return input
            },
            dataType: "json",
            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            success: function (dtajaxOutput) {
                // $sideMenuOptions.body.html(pft_table_createtable(dtajaxOutput.Data, tableOptions));
                let table = tableid.DataTable();
                table.destroy();
                pft_table_newTableBody(tableid, dtajaxOutput.Data, tableOptions);

                tableid.dataTable({
                    "serverSide": true,
                    "processing": true,
                    //"lengthChange": false,
                    "lengthMenu": [10, 15, 20, 25, 50, 100],
                    "searching": false,
                    "ordering": false,
                    "deferLoading": dtajaxOutput.totalrecord,
                    "displayStart": dtajaxOutput.pageIndex * dtajaxOutput.pageSize,
                    "pageLength": dtajaxOutput.pageSize,
                    "recordsFiltered": dtajaxOutput.pageSize,
                    "ajax": returnajaxPagination(ajaxInfo, tableOptions, tableid)
                })

            },

        }
    }



  
              
                
           
       
        //renameHeader: { "SlNo": "Sl No.", "PostName": "Post", "PostShortName": "ShortName", "PostCode": "PinCode" }

      
    var tableOptions = {
        dropdown: {
            buttons: [

            
               @if (ViewBag.PagedAccessRights.UsrrlMsView) {
        <text> { displayName: "View", action: editPost },</text>
    }

                    { type: "divider" },
     @if (ViewBag.PagedAccessRights.UsrrlMsDel)
             {
                 <text> { displayName: "Delete", action: deletePost },</text>

              }

              
            ],
            class: "btn btn-success light sharp"
        },
        onlyShowColumn: ['SlNo', 'PostName', 'PostShortName',/* 'Place',*/ 'PostCode'],
        hideColumn: [],
        rowClickAction: editPost,
        serialNo: false,
        renameHeader: { "SlNo": "Sl No.", "PostName": "Post", "PostShortName": "ShortName", "PostCode": "Pincode" }
    };




    

       
    function editPost() {
            let row = $(this).closest('tr');

        let Saveddata = row.data('pData');
        $('.dataTable tr').removeClass("SelectForDelete");
        $(this).closest('tr').addClass('SelectForDelete');
            console.log("Saved data", Saveddata);
            let inputData = {
                __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                PostID: Saveddata.PostID

            };

            $.ajax({
                        url: '@Url.Action("GetPostInfo", "Post")',
                        type: "POST",

                        data: inputData,
                        dataType: "json",
                        contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                        success: function (ajaxOutput) {
                        console.log("Return", ajaxOutput.Data[0]);
                            if (ajaxOutput.Process.IsProcess)
                            {
                                console.log('>_ Inside GetPostInfo', ajaxOutput)
                                $formContainer.load("@Url.Action("PostView", "Post")?mtd=@ViewBag.mtd", function () {

                                    $(this).find('[perfect-class=formTitle]').text('update : ' + ajaxOutput.Data[0].PostName)
                                    console.log('Inside load');

                                    let $thisForm = $(this).find('[perfect-class="form"]');
                                   // initFunctions($thisForm);
                                    $thisForm.validate({ messages: validationMessage });
                                   
                                    $thisForm.data({ pData: ajaxOutput.Data[0] }); //setting the pdata value in form for update -id is taking


                                        $thisForm.find('[name=PostName]').val(ajaxOutput.Data[0].PostName),
                                        $thisForm.find('[name=PostShortName]').val(ajaxOutput.Data[0].PostShortName),
                                        $thisForm.find('[name=PostCode]').val(ajaxOutput.Data[0].PostCode),

                                        $thisForm.find('[name=AreaID]').val(ajaxOutput.Data[0].FK_Area).selectpicker('refresh'),
                                     
                                        $thisForm.find('[name=SortOrder]').val(ajaxOutput.Data[0].SortOrder)

                                    $sideMenuOptions.close();
                                    //show update button
                                    $thisForm.find('button[name=add]').addClass('d-none');
                                    $thisForm.find('button[name=update]').removeClass('d-none');

                                    $thisForm.attr('perfect-onFormSuccess', 'initialLoadPost');

                                    $sideMenuOptions.close();
                                });
                            }
                            else {
                                console.log('>_ Inside GetPostInfo :false')

                                $.each(ajaxOutput.Process.Message, function (key, value)
                                {
                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                    $('.dataTable tr').removeClass("SelectForDelete");
                                });
                            }

                          
                },

            });

        }
      

        function deletePost() {
            let $row = $(this).closest('tr');

            let Saveddata = $row.data('pData');
            $('.dataTable tr').removeClass("SelectForDelete");
            $(this).closest('tr').addClass('SelectForDelete');

               $.ajax({
                   url: "@Url.Action("GetPostDeleteReasonList", "Post")",
                   type: "GET",
                   contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                   success: function (ajaxReasonOutput) {
                       if (ajaxReasonOutput.Process.IsProcess) {

                          //old delete section


                           let confirmationDialogBoxOption = { heading: "Are you Sure?", body: "Do you want to remove " + Saveddata.PostName + " ?", cancel: "No", confirm: "Yes", reason: ajaxReasonOutput.Data };
                            var res = ConfirmDialog(confirmationDialogBoxOption);
                            res.then(function (ret) {
                                if (ret) {

                                    let inputData = {
                                       __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(), //antiforgery token
                                        PostID: Saveddata.PostID,
                                        ReasonID: ret
                                    };

                                    $.ajax({
                                        url: "@Url.Action("DeletePost", "Post")",
                                        type: "POST",
                                        data: inputData, //antiforgery token removed json.stringify
                                        contentType: "application/x-www-form-urlencoded; charset=utf-8",//antiforgery token changed json->x-www-form-urlencode...
                                        success: function (data) {

                                            if (data.Process.IsProcess) {
                                                let table = $row.closest('table').DataTable()
                                                table.row($row).remove().draw();
                                                //initialLoadPoast();
                                                $.each(data.Process.Message, function (key, value) {
                                                    //toastr.success(value, "Success");
                                                    NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': 'Deleted Successfully' });
                                                });
                                                $('.dataTable tr').removeClass("SelectForDelete");
                                            }
                                            else {
                                                $.each(data.Process.Message, function (key, value) {
                                                    // toastr.warning(value, "Error");
                                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                                    $('.dataTable tr').removeClass("SelectForDelete");
                                                });
                                            }
                                            //row.remove();
                                            //$(row).closest('table').reload()


                                        }
                                    });
                                }
                                else {
                                    //toastr.warning("Clicked no in comfirmation box", "Confirmation Box in table");
                                    NotificationMessage({ 'message': 'No option selected' });
                                }
                            });

                           //old delete section

                    }
                }

            });




        };












      






</script>
}