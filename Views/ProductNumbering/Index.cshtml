@{
    ViewBag.Title = "ProductNumbering";
}
<div class="container-fluid">
    <div class="row">
        <div class="col-lg-12" id="ProductNumbering-form">
        </div>
    </div>
</div>
@section scripts{
    <script>
        const $formContainer = $('#ProductNumbering-form');
        $(document).ready(function () {
             ProductNumberingInitialLoad();
             @if (ViewBag.PagedAccessRights.UsrrlMsView)
             {
                <text> loadProductNumberingList(this); </text>
             }
        });
        let msg ="Effect date should be grater than or equal to today's date"
        var validationMessage = {            
            'ProdNumModule': {
                'required': 'Please select any one from the list'
            }
        };

        function ProductNumberingInitialLoad() {
            loadProductNumberingListAddForm();
        }

        function loadProductNumberingListAddForm() {
            $formContainer.load('@Url.Action("LoadProductNumberingList", "ProductNumbering")?TransMode='+'@ViewBag.TransMode&mtd='+'@ViewBag.mtd', function () {
                let $thisForm = $(this).find('[perfect-class="form"]');                
                $thisForm.validate({ messages: validationMessage });
                $thisForm.attr('perfect-onFormSuccess', 'ProductNumberingInitialLoad');

            });
        }
        function loadProductNumberingList(ele)
        {
        let $sidemenu = $sideMenuOptions.body;
        let $thisForm = $(ele).closest('.testSearchBox');
        let SearchName = $thisForm.find('input').val();
            $sideMenuOptions.title.find('h4').text('Product Numbering');
          let pageUrl = '@Url.Action("GetProductNumberingData", "ProductNumbering")';
            $.ajax({
                url:pageUrl,
                type: "POST",
                data: { pageSize: 10, pageIndex: 0, Name: SearchName },
                dataType: "json",
                contentType: "application/x-www-form-urlencoded; charset=utf-8",
                success: function (ajaxOutput) {
                    if (ajaxOutput.Process.IsProcess)
                    {
                       
                        $sidemenu.find('.jq_sidemenu_title').text("Product Numbering");
                        $sidemenu.empty().append('<div class="d-flex justify-content-end mb-2 position-relative"><div class="col-md-6 position-absolute top-1 z-index"> <div class="input-group testSearchBox"><input type="text" class="form-control " name="SearchName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input"  /><div class="input-group-append"><button id="addcountry-jq-searchButton6" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="loadProductNumberingList(this)"></button></div></div></div></div>', $('<div/>', {class:"col-md-12 table_temp_class"}).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))
                              let $table = $sidemenu.find('table');
                              $table.dataTable({
                                  "serverSide": true,
                                  "processing": true,
                                  "lengthMenu": [10, 15, 20, 25, 50, 100],
                                  "searching": false,
                                  "ordering": false,
                                  "deferLoading": ajaxOutput.totalrecord,
                                  "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,
                                  "pageLength": ajaxOutput.pageSize,
                                  "recordsFiltered": ajaxOutput.pageSize,
                                  "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize, searchkey: SearchName }, tableOptions, $table)
                              });
                    }
                    else
                    {
                              if (ajaxOutput.Process.Status = "NoData")
                              {
                                  $sidemenu.find('.jq_sidemenu_title').text("Product Numbering");
                                  $sidemenu.empty().append('<div class="d-flex justify-content-end mb-2"><div class="col-md-6 position-absolute top-1 z-index"> <div class="input-group testSearchBox"><input type="text" class="form-control " name="SearchName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input"  /><div class="input-group-append"><button id="addcountry-jq-searchButton6" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="loadProductNumberingList(this)"></button></div></div></div></div>', $('<div/>', { class: "col-md-12 table_temp_class" }).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))
                                    let $table = $sidemenu.find('table');
                                    $table.dataTable({
                                        "serverSide": true,
                                        "processing": true,
                                        "lengthMenu": [],
                                        "searching": false,
                                        "ordering": false,
                                        "deferLoading": ajaxOutput.totalrecord,
                                        "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,
                                        "pageLength": ajaxOutput.pageSize,
                                        "recordsFiltered": ajaxOutput.pageSize,
                                        "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize }, tableOptions, $table)
                                    });
                              }
                              else
                              {
                                    $.each(ajaxOutput.Process.Message, function (key, value) {
                                        NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                    });
                              }
                    }
                },
                complete: function () {

                }
        });
    }
    function returnajaxPagination(ajaxInfo, tableOptions, tableid) {
        return {
            url: ajaxInfo.apiurl,
            type: "post",
            data: function () {
                var info = tableid.DataTable().page.info();
                let input = { pageSize: info.length, pageIndex: info.page };
                if (ajaxInfo.searchkey) {
                    input["Name"] = ajaxInfo.searchkey;
                }
                return input
            },
            dataType: "json",
            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            success: function (dtajaxOutput) {

                let table = tableid.DataTable();
                table.destroy();
                pft_table_newTableBody(tableid, dtajaxOutput.Data, tableOptions);
                tableid.dataTable({
                    "serverSide": true,
                    "processing": true,
                    "lengthMenu": [10, 15, 20, 25, 50, 100],
                    "searching": false,
                    "ordering": false,
                    "deferLoading": dtajaxOutput.totalrecord,
                    "displayStart": dtajaxOutput.pageIndex * dtajaxOutput.pageSize,
                    "pageLength": dtajaxOutput.pageSize,
                    "recordsFiltered": dtajaxOutput.pageSize,
                    "ajax": returnajaxPagination(ajaxInfo, tableOptions, tableid)
                })

            },

        }
    }



    var tableOptions = {
        dropdown: {
            buttons: [
               @if (ViewBag.PagedAccessRights.UsrrlMsView)
                {
                    <text> { displayName: "View", action: editProductNumbering },</text>
                }

                    { type: "divider" },
                @if (ViewBag.PagedAccessRights.UsrrlMsDel)
                {
                 <text> { displayName: "Delete", action: deleteProductNumbering },</text>
                }
                ],
            class: "btn btn-success light sharp"
        },
        hideColumn: ["ProdNumGroupID", "ProdNumModule", "FK_Master","TransMode", "TotalCount","RefDate"],
        rowClickAction: editProductNumbering,
        renameHeader: { "SlNo": "SL No", "Module": "Import From"},
        isDateType: ["Date"]
        };

        function editProductNumbering()
        {
            let $thisMenu = $(this).closest('tr');
            let savedData = $thisMenu.data('pData');

            $('.dataTable tr').removeClass("SelectForDelete");
            $(this).closest('tr').addClass('SelectForDelete');

            let inputData = { ProdNumGroupID: savedData.ProdNumGroupID};

            $('#LoadProductNumberingList').empty();
                $.ajax({
                 url: '@Url.Action("GetProductNumberingInfo", "ProductNumbering")',
                type: "POST",
                 data: JSON.stringify(inputData),
                dataType: "json",
                contentType: "application/json",
                    success: function (ajaxOutput) {
                     
                        if (ajaxOutput.ProductNumberInfo.Process.IsProcess) {
                           
                            $formContainer.load('@Url.Action("LoadProductNumberingList", "ProductNumbering")?TransMode='+'@ViewBag.TransMode&mtd='+'@ViewBag.mtd', function () 
                            {                              
                                let $thisForm = $(this).find('[perfect-class="form"]');
                                $thisForm.validate({ messages: validationMessage });
                                $thisForm.data({ pData: ajaxOutput.ProductNumberInfo.Data[0] });

                                $thisForm.find('[name=ProdNumGroupID]').val(ajaxOutput.ProductNumberInfo.Data[0].ProdNumGroupID);                              
                                $thisForm.find('[name=ProdNumModule]').val(ajaxOutput.ProductNumberInfo.Data[0].ProdNumModule);
                                $thisForm.find('[name=FK_Master]').val(ajaxOutput.ProductNumberInfo.Data[0].FK_Master);
                                $thisForm.find('[name=ReferenceNo]').val(ajaxOutput.ProductNumberInfo.Data[0].ReferenceNo);
                                $thisForm.find('[name=ReferenceDate]').val(ajaxOutput.ProductNumberInfo.Data[0].RefDate);
                                if (ajaxOutput.ProductNumberInfoDtls.Process.IsProcess) {
                                    $thisForm.data({ pData: ajaxOutput.ProductNumberInfoDtls.Data[0] });                                  
                                    fn_fillServiceItem($thisForm, 'ProductNumbering', ajaxOutput.ProductNumberInfoDtls.Data, tableOptionsProductNumberingItem)
                                    $thisForm.find('[perfect-tempTable="ProductNumbering"]').find('table').dataTable({ searching: false, paging: false, ordering: false, info: false });
                                }
                                $sideMenuOptions.close();
                                $thisForm.attr('perfect-onFormSuccess', 'ProductNumberingInitialLoad');
                                $thisForm.find('button[name=add]').addClass('d-none');
                                $thisForm.find('button[name=update]').removeClass('d-none');

                     });
                 }
                 else {
                     $.each(ajaxOutput.Process.Message, function (key, value) {
                         NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                         $('.dataTable tr').removeClass("SelectForDelete");
                     });
                 }
             },

            });

        }
        function setActionData(actionName) {
            let $thisForm = $(this).find('[perfect-class="form"]');
            $thisForm.find('[name="MenuListActionName"]').val(actionName).selectpicker('refresh');
        }
        function deleteProductNumbering() {
            let $row = $(this).closest('tr');
            let Saveddata = $row.data('pData');

            $('.dataTable tr').removeClass("SelectForDelete");
            $(this).closest('tr').addClass('SelectForDelete');

               $.ajax({
                   url: "@Url.Action("GetProductNumberingReasonList", "ProductNumbering")",
                   type: "GET",
                   contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                   success: function (ajaxReasonOutput) {
                       if (ajaxReasonOutput.Process.IsProcess) {
                           let confirmationDialogBoxOption = { heading: "Are you Sure?", body: "Do you want to remove ?", cancel: "No", confirm: "Yes", reason: ajaxReasonOutput.Data };
                           var confirmBoxObj = ConfirmDialog(confirmationDialogBoxOption);
                            confirmBoxObj.then(function (selectedOption) {
                                if (selectedOption) {
                                    let inputData = {
                                        __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),                                      
                                        ProdNumGroupID: Saveddata.ProdNumGroupID,
                                        FK_Reason: selectedOption
                                    };
                                    $.ajax({
                                        url: "@Url.Action("DeleteProductNumbering", "ProductNumbering")",
                                        type: "POST",
                                        data: inputData,
                                        contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                                        success: function (ajaxOutput) {
                                            if (ajaxOutput.Process.IsProcess) {
                                                let table = $row.closest('table').DataTable()
                                                table.row($row).remove().draw();

                                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                                    NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': 'Deleted Successfully' });
                                                });
                                                $sideMenuOptions.close();
                                                loadProductNumberingList(this);
                                                ProductNumberingInitialLoad();
                                                $('.dataTable tr').removeClass("SelectForDelete");
                                            }
                                            else {
                                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                                    $('.dataTable tr').removeClass("SelectForDelete");
                                                });
                                            }
                                        }
                                    });
                                }
                                else {
                                    NotificationMessage({ 'message': 'No option selected' });
                                }

                            });


                        }
                        else {


                        }
                   }
               });
        }
        var tableOptionsProductNumberingItem = {
            iconButton: {
                buttons: [

                    {
                        icon: "fa fa-pencil btnPerfectGridEdit",
                        action: function () {

                            let savedData = $(this).closest('tr').data('pData')

                            let $tablecontainer = $(this).closest('[perfect-tempTable]');
                            let tableKey = $tablecontainer.attr('perfect-tempTable');
                            let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                            let indexname = tableKey + 'index';
                            let rindex = $(this).closest('tr').attr(indexname);
                            $tablecontainer.attr('perfect-tempTable-action', rindex);
                            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                                let $thisNode = $(this);
                                let pf_name = $thisNode.attr('name');

                                let errorClass = '.temptableError';
                                $thisForm.find('[perfect-tempTable-' + tableKey + '="' + pf_name + '"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');

                                if ($thisNode.is('select')) {

                                    $thisNode.val(savedData[pf_name]).selectpicker('refresh');
                                }
                                else if ($thisNode.is('input')) {

                                    if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                        $thisNode.prop('checked', savedData[pf_name]);
                                    }
                                    else {
                                        $thisNode.val(savedData[pf_name]);
                                    }
                                }
                                else {

                                    $thisNode.val(savedData[pf_name]);
                                }
                            });


                        }
                    },
                    {
                        icon: "fa fa-trash btnPerfectGridDelete",
                        action: function () {
                            let $thistbl = $(this).closest('table');
                            let table = $thistbl.DataTable();
                            table.destroy();
                            if ($(this).closest('tbody').find('tr').length > 1) {
                                $(this).closest('tr').remove();
                                pft_table_slreset($thistbl);
                                $thistbl.dataTable({ paging: true });
                            }
                            else {
                                $thistbl.remove();
                            } $("#refresh").click();
                        }
                    },
                ]
            },
            onlyShowColumn: [],
            hideColumn: ['FK_Product', 'FK_Stock'],
            serialNo: true,
            renameHeader: { "ProdNumNoOfItems": "Total No.of Items1R", "ProdNumItems": "No.of Items1R", "ProdNumPrefix": "Prefix", "ProdNumFromNo": "Number From1R", "ProdNumToNo": "Number To1R", "ProdNumSuffix": "Suffix" },
            rowAttribute: [],
            isCheckType: []
        };

        function fn_fillServiceItem(ele, tkey, data, tableOptionsTempOut) {

            let $thisForm = $(ele).closest('[perfect-class="form"]');
            let tableOptionsTemp = tableOptionsTempOut;
            let insertData = []
            let tableKey = tkey;

            let indexname = tkey + 'index';
            tableOptionsTemp.rowAttribute.push(indexname);
            tableOptionsTemp.hideColumn.push(indexname);

            let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');
            $.each(data, function (keyOne, valOne) {

                let pData = {};

                pData[indexname] = keyOne + 1;
                $tblcontainer.attr('perfect-tempTable-lastindex', pData[indexname])

                $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                    let $this = $(this);
                    let headerName = $this.attr('perfect-tempTable-' + tableKey);
                    let nameAttr = $this.attr('name');
                    if (typeof valOne[nameAttr] !== undefined) {

                        if ($this.is('select')) {
                          
                            tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                            tableOptionsTemp.hideColumn.push(nameAttr);
                            pData[nameAttr + '_d'] = $this.find('[value="' + valOne[nameAttr] + '"]').text();
                            pData[nameAttr] = valOne[nameAttr];
                        }
                        else if ($this.is('input')) {
                            let inputType = $this.attr('type').toLocaleLowerCase();
                            if (inputType == 'checkbox') {
                                pData[nameAttr] = valOne[nameAttr];
                                tableOptionsTemp.isCheckType.push(nameAttr);
                            }
                            else if (inputType == 'hidden') {
                                switch (nameAttr) {                                   
                                    default:
                                        tableOptionsTemp.hideColumn.push(nameAttr);
                                        break;
                                }
                                pData[nameAttr] = valOne[nameAttr];
                            }
                            else if (inputType == 'date') {
                                pData[nameAttr] = moment(valOne[nameAttr]).format('DD-MM-YYYY');
                            }
                            else {
                                pData[nameAttr] = valOne[nameAttr];
                            }
                        }
                        else {
                            pData[nameAttr] = valOne[nameAttr];
                        }
                    }
                });

                insertData.push(pData);
            });
            $tblcontainer.append(pft_table_createtable(insertData, tableOptionsTemp));
        }
    </script>
}