
@{
    ViewBag.Title = "";
}

<div class="container-fluid">
    @Html.AntiForgeryToken()
    <div class="row">
        <div class="col-lg-12" id="ProductRateSettings-form">

        </div>
    </div>
</div>
@section scripts{

    <script type="text/javascript">
        const $formContainer = $('#ProductRateSettings-form');

        $(document).ready(function () {
            ProductRateSettingsInitialLoad();
        });
        function ProductRateSettingsInitialLoad()
        {
            ProductRateSettingsLoad();
            @if (ViewBag.PagedAccessRights.UsrrlStView)
            {
                <text>fn_ProductRateSettings_LoadList(this);</text>
            }
        }
        function ProductRateSettingsLoad()
        {
             $formContainer.load('@Url.Action("LoadFormProductRateSettings", "ProductRateSettings")', function () {
                let $thisForm = $(this).find('[perfect-class="form"]');
                 $thisForm.find('[name="EffectDate"]').val(moment().format('YYYY-MM-DD'));
                 $thisForm.find('[name="ExpiryDate"]').val(moment().format('YYYY-MM-DD'));
                $thisForm.validate({ messages: validationMessage });
                var today = new Date().toISOString().split('T')[0];
                 document.getElementsByName("EffectDate")[0].setAttribute('min', today);
                 document.getElementsByName("ExpiryDate")[0].setAttribute('min', today);
                 $thisForm.attr('perfect-onFormSuccess', 'ProductRateSettingsInitialLoad');
            });
        }

        var validationMessage = {
           
            'FK_PriceFixingType': {
                'required': 'Please Select Price Type',
                'digits': 'Invalid Price Type selected'
            },

            'EffectDate': {
                'required': 'Please Enter Effect Date',
                'min': jQuery.validator.format('')
            },
             'ExpiryDate': {
                 'required': 'Please Enter Expiry Date',
                'min': jQuery.validator.format('')
            }
        };



        function fn_ProductRateSettings_LoadList(ele) {


        let $sidemenu = $sideMenuOptions.body;
       
      

        let $thisForm = $(ele).closest('.testSearchBox');
        let SearchName = $thisForm.find('input').val();
        console.log("GH",SearchName)
            $sideMenuOptions.title.find('h4').text('Product Rate Settings List');
          let pageUrl = '@Url.Action("GetProductRateSettingsList", "ProductRateSettings")';
            $.ajax({
                url:pageUrl,
                type: "POST",
                data: { pageSize: 15, pageIndex: 0, Name: SearchName },
                dataType: "json",
                contentType: "application/x-www-form-urlencoded; charset=utf-8",
                success: function (ajaxOutput) {

                    debugger
                          if (ajaxOutput.Process.IsProcess) {
                              console.log('ProductRateSettings', ajaxOutput);
                              $sidemenu.find('.jq_sidemenu_title').text("ProductRateSettings");

                              $sidemenu.empty().append('<div class="d-flex justify-content-end mb-2 position-relative"><div class="col-md-6 position-absolute top-1 z-index"> <div class="input-group testSearchBox"><input type="text" class="form-control " name="SearchName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input"  /><div class="input-group-append"><button id="addcountry-jq-searchButton6" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="fn_ProductRateSettings_LoadList(this)"></button></div></div></div></div>', $('<div/>', {class:"col-md-12 table_temp_class"}).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))
                             // $sidemenu.find('table').dataTable({ paging: true });


                              let $table = $sidemenu.find('table');
                              $table.dataTable({
                                  "serverSide": true,//no change
                                  "processing": true,//-- process text when clicked
                                  //"lengthChange": false,
                                  "lengthMenu": [10, 15, 20, 25, 50, 100],//---drop down page size
                                  "searching": false,//--no change
                                  "ordering": false,//--sorting
                                  "deferLoading": ajaxOutput.totalrecord,//<----to total number of record from db
                                  "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,//<----starting record
                                  "pageLength": ajaxOutput.pageSize,//<----page size
                                  "recordsFiltered": ajaxOutput.pageSize,//<---page size

                                  "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize, searchkey: SearchName }, tableOptions, $table)
                              });

                          }
                else {
                              if (ajaxOutput.Process.Status = "NoData") {
                                 
                                  $sidemenu.find('.jq_sidemenu_title').text("productwiseservice");

                                  $sidemenu.empty().append('<div class="d-flex justify-content-end mb-2"><div class="col-md-6 position-absolute top-1 z-index"> <div class="input-group testSearchBox"><input type="text" class="form-control " name="SearchName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input"  /><div class="input-group-append"><button id="addcountry-jq-searchButton6" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="fn_ProductRateSettings_LoadList(this)"></button></div></div></div></div>', $('<div/>', { class: "col-md-12 table_temp_class" }).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))
                        // $sidemenu.find('table').dataTable({ paging: true });


                        let $table = $sidemenu.find('table');
                        $table.dataTable({
                            "serverSide": true,//no change
                            "processing": true,//-- process text when clicked
                           // "lengthChange": false,
                           "lengthMenu": [0],//---drop down page size
                            "searching": false,//--no change
                            "ordering": false,//--sorting
                            "deferLoading": ajaxOutput.totalrecord,//<----to total number of record from db
                            "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,//<----starting record
                            "pageLength": ajaxOutput.pageSize,//<----page size
                            "recordsFiltered": ajaxOutput.pageSize,//<---page size

                            "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize }, tableOptions, $table)
                        });
                    }
                    else {
                        $.each(ajaxOutput.Process.Message, function (key, value) {
                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                        });
                    }
                }




            },
            complete: function () {

            }
        });
    }
    function returnajaxPagination(ajaxInfo, tableOptions, tableid) {
        //{ apiurl, pageSize }
        return {
            url: ajaxInfo.apiurl,
            type: "post",
            data: function () {
                var info = tableid.DataTable().page.info();
                console.log('RETURN AJAX', info)
                //return { <antiforgery>:<antiforgery>, length: ajaxInfo.pageSize, page: info.page }
                let input = { pageSize: info.length, pageIndex: info.page };
                if (ajaxInfo.searchkey) {
                    input["Name"] = ajaxInfo.searchkey;
                }
                return input
            },
            dataType: "json",
            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            success: function (dtajaxOutput) {
                // $sideMenuOptions.body.html(pft_table_createtable(dtajaxOutput.Data, tableOptions));
                let table = tableid.DataTable();
                table.destroy();
                pft_table_newTableBody(tableid, dtajaxOutput.Data, tableOptions);

                tableid.dataTable({
                    "serverSide": true,
                    "processing": true,
                    //"lengthChange": false,
                    "lengthMenu": [10, 15, 20, 25, 50, 100],
                    "searching": false,
                    "ordering": false,
                    "deferLoading": dtajaxOutput.totalrecord,
                    "displayStart": dtajaxOutput.pageIndex * dtajaxOutput.pageSize,
                    "pageLength": dtajaxOutput.pageSize,
                    "recordsFiltered": dtajaxOutput.pageSize,
                    "ajax": returnajaxPagination(ajaxInfo, tableOptions, tableid)
                })

            },

        }
    }

       

    var tableOptions = {
            dropdown: {
                buttons: [
                  @if (ViewBag.PagedAccessRights.UsrrlStView)
                   {
                     <text> { displayName: "View", action: editProductRateSettings },</text>
                   }
                    { type: "divider" },
                   @if (ViewBag.PagedAccessRights.UsrrlStDel)
                    {
                     <text>{ displayName: "Delete", action: deleteProductRateSettings },</text>
                    }
                ],
                class: "btn btn-success light sharp"
        },       
        onlyShowColumn: ["SlNo","PRSName", "EffectDate", "ExpiryDate"],
        hideColumn: [],
        rowClickAction: editProductRateSettings,
        isDateType: ["EffectDate", "ExpiryDate"],
        renameHeader: { "SlNo": "SlNo", "PRSName":"Name"," EffectDate": "EffectDate ", "ExpiryDate": "Expiry Date ",}

    };


        function deleteProductRateSettings()
        {
            $sideMenuOptions.close();
             let $row = $(this).closest('tr');
            let Saveddata = $row.data('pData');
          
            $('.dataTable tr').removeClass("SelectForDelete");
            $(this).closest('tr').addClass('SelectForDelete');
            debugger
               $.ajax({
                   url: "@Url.Action("GetPrdratesettingsDeleteReasonList", "ProductRateSettings")",
                   type: "GET",
                   contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                   success: function (ajaxReasonOutput) {
                       if (ajaxReasonOutput.Process.IsProcess) {
                           let confirmationDialogBoxOption = { heading: "Are you Sure?", body: "Do you want to remove this record  ?", cancel: "No", confirm: "Yes", reason: ajaxReasonOutput.Data };
                           var confirmBoxObj = ConfirmDialog(confirmationDialogBoxOption);
                            confirmBoxObj.then(function (selectedOption) {
                                if (selectedOption) {
                                 
                                    let inputData = {
                                        __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                                        ID_Productratesettings: Saveddata.ID_ProductRateSetting,
                                        ReasonID: selectedOption
                                    };

                                    $.ajax({
                                        url: "@Url.Action("DeleteProductRateSettings", "ProductRateSettings")",
                                        type: "POST",
                                        data: inputData,
                                        contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                                        success: function (ajaxOutput) {
                                            if (ajaxOutput.Process.IsProcess) {
                                                let table = $row.closest('table').DataTable()
                                                table.row($row).remove().draw();

                                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                                    NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': 'Deleted Successfully' });
                                                });
                                                ProductRateSettingsInitialLoad();
                                                $('.dataTable tr').removeClass("SelectForDelete");
                                            }
                                            else {
                                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                                    $('.dataTable tr').removeClass("SelectForDelete");
                                                });
                                            }
                                        }
                                    });
                                }
                                else {
                                    NotificationMessage({'message': 'No option selected' });
                                }
                            });
                        }
                        else {
                        }
                   }

               });
        };


        function editProductRateSettings()
        {          
            let $thisMenu = $(this).closest('tr');
            let savedData = $thisMenu.data('pData');

            $('.dataTable tr').removeClass("SelectForDelete");
            $(this).closest('tr').addClass('SelectForDelete');            

            let inputData =
            {
                __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                FK_Productratesettings: savedData.ID_ProductRateSetting
            };

                $.ajax({
                 url: '@Url.Action("GetProductratesettingsInfo", "ProductRateSettings")',
                type: "POST",
                 data: inputData,
                dataType: "json",
                    contentType: 'application/x-www-form-urlencoded;charset=utf-8',
                    success: function (ajaxOutput) {                      
                        if (ajaxOutput.Process.IsProcess) {
                            debugger
                            $formContainer.load('@Url.Action("LoadFormProductRateSettings", "ProductRateSettings")', function () 
                            {                               
                                $(this).find('[perfect-class=formTitle]').text('update')
                                let $thisForm = $(this).find('[perfect-class="form"]');
                                $thisForm.validate({ messages: validationMessage });
                                $thisForm.data({ pData: ajaxOutput.Data[0] });
                                $thisForm.find('[name=ID_ProductRateSetting]').val(ajaxOutput.Data[0].ID_ProductRateSetting);
                                $thisForm.find('[name=FK_PriceFixingType]').val(ajaxOutput.Data[0].FK_PriceFixingType);
                                $thisForm.find('[name=ID_Name]').val(ajaxOutput.Data[0].PRSName);
                                $thisForm.find('[name="EffectDate"]').val(moment(ajaxOutput.Data[0].EffectDate).format('YYYY-MM-DD'));
                                $thisForm.find('[name="ExpiryDate"]').val(moment(ajaxOutput.Data[0].ExpiryDate).format('YYYY-MM-DD'));
                                $thisForm.find('[name=MnuLstVisible]').prop('checked', ajaxOutput.Data[0].Active)
                                
                              
                                ComDetailsTable_Fill($thisForm, 'ProductDT', ajaxOutput.Data[0].ProductRateSettingDetails, tableOptionsTempOutFill)
                               
                                $sideMenuOptions.close();
                                $thisForm.attr('perfect-onFormSuccess', 'ProductRateSettingsInitialLoad');
                                $thisForm.find('button[name=add]').addClass('d-none');
                                $thisForm.find('button[name=update]').removeClass('d-none');

                     });
                 }
                 else {
                     $.each(ajaxOutput.Process.Message, function (key, value) {
                         NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                         $('.dataTable tr').removeClass("SelectForDelete");
                     });
                 }
             },

            });

    }
   
        var tableOptionsTempOutFill = {
            iconButton: {
                buttons: [

                    {
                        icon: "fa fa-pencil btnPerfectGridEdit",
                        action: function () {
                            let savedData = $(this).closest('tr').data('pData')

                            let $tablecontainer = $(this).closest('[perfect-tempTable]');
                            let tableKey = $tablecontainer.attr('perfect-tempTable');
                            let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                            //index attribute name in table row
                            let indexname = tableKey + 'index';
                            //index number in table row
                            let rindex = $(this).closest('tr').attr(indexname);
                            $tablecontainer.attr('perfect-tempTable-action', rindex);

                            console.log('Editclick', savedData);
                            //filling data in available inputs
                            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                                let $thisNode = $(this);
                                let pf_name = $thisNode.attr('name');
                                if ($thisNode.is('select')) {

                                    // $thisNode.val(savedData[pf_name]).selectpicker();
                                    $thisNode.val(savedData[pf_name]).selectpicker('refresh');
                                }
                                else if ($thisNode.is('input')) {

                                    if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                        $thisNode.prop('checked', savedData[pf_name]);
                                    }
                                    else {
                                        $thisNode.val(savedData[pf_name]);
                                    }

                                }
                                else {
                                    $thisNode.val(savedData[pf_name]);
                                }


                            });



                        }
                    },
                    {
                        icon: "fa fa-trash btnPerfectGridDelete",
                        action: function () {
                            let $thistbl = $(this).closest('table');
                            let table = $thistbl.DataTable();
                            table.destroy();
                            if ($(this).closest('tbody').find('tr').length > 1) {
                                $(this).closest('tr').remove();
                                pft_table_slreset($thistbl);


                            }
                            else {
                                $thistbl.remove();
                            }

                        }
                    },
                ]
            },
            onlyShowColumn: [],
            hideColumn: [],
            serialNo: true,
            renameHeader: {},
            rowAttribute: [],
            isCheckType: []
        };
        //var tableOptionsProductRateSettingsTempOut = {
        //    iconButton: {
        //        buttons: [
                   
        //            {
        //                icon: "fa fa-pencil btnPerfectGridEdit",
        //                action: function () {
        //                    let savedData = $(this).closest('tr').data('pData')
        //                    let $tablecontainer = $(this).closest('[perfect-tempTable]');
        //                    let tableKey = $tablecontainer.attr('perfect-tempTable');
        //                    let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
        //                    let indexname = tableKey + 'index';
        //                    let rindex = $(this).closest('tr').attr(indexname);
        //                    $tablecontainer.attr('perfect-tempTable-action', rindex);
        //                    $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
        //                        let $thisNode = $(this);
        //                        let pf_name = $thisNode.attr('name');
                             
        //                        if ($thisNode.is('select')) {                                   
        //                            switch (pf_name) {
        //                                case "FK_BranchType":
        //                                    $thisNode.val(savedData[pf_name]).selectpicker('refresh');
        //                                    break;
        //                                case "FK_UserGroup":
        //                                    $thisNode.val(savedData[pf_name]).selectpicker('refresh');
        //                                    $thisNode.trigger('change');
        //                                    break;
        //                                case "FK_User":                                      
        //                                    $thisNode.attr('perfect-onloadSelect', savedData[pf_name]);                                           
        //                                    break;
        //                                case "FK_AmountCriteria":
        //                                    $thisNode.val(savedData[pf_name]).selectpicker('refresh');
        //                                    break;
        //                                default:
        //                                    $thisNode.val(savedData[pf_name]).selectpicker('refresh');
        //                                    break;
        //                            }   
        //                        }
        //                        else if ($thisNode.is('input')) {

        //                            if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

        //                                $thisNode.prop('checked', savedData[pf_name]);
        //                            }
        //                            else {
        //                                $thisNode.val(savedData[pf_name]);
        //                            }
        //                        }
        //                        else {
        //                            $thisNode.val(savedData[pf_name]);
        //                        }
        //                    });
        //                   fn_setSelectedCriteriaData($thisForm);
                           
        //                }
        //            },
        //            {
        //                icon: "fa fa-trash btnPerfectGridDelete",
        //                action: function () {
        //                    let $thistbl = $(this).closest('table');
        //                    let table = $thistbl.DataTable();
        //                    table.destroy();
        //                    if ($(this).closest('tbody').find('tr').length > 1) {
        //                        $(this).closest('tr').remove();
        //                        pft_table_slreset($thistbl);
        //                        $thistbl.dataTable({ paging: true });
        //                    }
        //                    else {
        //                        $thistbl.remove();
        //                    }
        //                }
        //            },
        //        ]
        //    },
        //    onlyShowColumn: [],
        //    hideColumn: [],
        //    serialNo: true,
        //    renameHeader: {"UserRole":"User Group", "UserName": "User","AldAmountFrom": "Amount From", "AldAmountTo": "Amount To" },
        //    rowAttribute: [],
        //    isCheckType: []
        //};
        //function fn_fillProductRateSettingsItem(ele, tkey, data, tableOptionsTempOut) {
         
        //    let $thisForm = $(ele).closest('[perfect-class="form"]');
        //    let tableOptionsTemp = tableOptionsTempOut;
        //    let insertData = []
        //    let tableKey = tkey;

        //    let indexname = tkey + 'index';
        //    tableOptionsTemp.rowAttribute.push(indexname);
        //    tableOptionsTemp.hideColumn.push(indexname);

        //    let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');
        //    $.each(data, function (keyOne, valOne) {

        //        let pData = {};

        //        pData[indexname] = keyOne + 1;
        //        $tblcontainer.attr('perfect-tempTable-lastindex', pData[indexname])

        //        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {

                   
        //            let $this = $(this);
        //            let headerName = $this.attr('perfect-tempTable-' + tableKey);
        //            let nameAttr = $this.attr('name');
        //            if (typeof valOne[nameAttr] !== undefined) {

        //                if ($this.is('select')) {     
        //                    switch (headerName) {
        //                        case "FK_BranchType":
        //                            headerName = "Branch Type";
        //                            break;
        //                        case "FK_UserGroup":
        //                            headerName = "User Group";
        //                            break;
        //                        case "FK_User":
        //                            headerName = "User";
        //                            break;
        //                        case "FK_AmountCriteria":
        //                            headerName = "Amount Criteria";
        //                            break;
        //                        default:
        //                            break;
        //                    }
        //                    tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
        //                    tableOptionsTemp.hideColumn.push(nameAttr);
        //                    pData[nameAttr + '_d'] = $this.find('[value="' + valOne[nameAttr] + '"]').text();
        //                    pData[nameAttr] = valOne[nameAttr];
        //                }
        //                else if ($this.is('input')) {
        //                    let inputType = $this.attr('type').toLocaleLowerCase();
        //                    if (inputType == 'checkbox') {
        //                        pData[nameAttr] = valOne[nameAttr];
        //                        tableOptionsTemp.isCheckType.push(nameAttr);
        //                    }
        //                    else if (inputType == 'hidden') {
        //                        tableOptionsTemp.hideColumn.push(nameAttr);                         
        //                        pData[nameAttr] = valOne[nameAttr];
        //                    }
        //                    else if (inputType == 'date') {
        //                        pData[nameAttr] = moment(valOne[nameAttr]).format('DD-MM-YYYY');
        //                    }
        //                    else {
        //                        pData[nameAttr] = valOne[nameAttr];
        //                    }
        //                }
        //                else {
        //                    pData[nameAttr] = valOne[nameAttr];
        //                }
        //            }
                   
        //        });
        //        pData["FK_User_d"] = valOne['UserName']
        //        insertData.push(pData);
              
        //    });

        //    $tblcontainer.append(pft_table_createtable(insertData, tableOptionsTemp));
        //}








     


    </script>
}