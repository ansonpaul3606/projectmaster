
@{
    ViewBag.Title = "ProjectBillingIndex";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="container-fluid">

    <div class="row">
        <div class="col-lg-12" id="jq_ProjectBillingIndex_formContainer">

        </div>
    </div>


</div>
@section scripts{
    <script type="text/javascript">

    const $formContainer = $('#jq_ProjectBillingIndex_formContainer');
    $(document).ready(function () {
        fn_ProjectBillingIndex_initialLoad();
    });
        var ProjectBillingTransMode = '';
        var LastIDSessionKey = 'ProjectBillingLastID';
        var LastID_ProjectBilling;

    function fn_ProjectBillingIndex_initialLoad() {

        ProjectBillingTransMode = '@ViewBag.TransMode';

      

        loadProjectBillingList(this, fn_loadProjectBillingAddForm);
    }
    function fn_loadProjectBillingAddForm() {
        $formContainer.load('@Url.Action("LoadFormProjectBilling", "ProjectBilling")?mtd=@ViewBag.mtd', function () {
            $(".Final").hide();
            $(".PartialFinal").show();
            let $thisForm = $(this).find('[perfect-class="form"]');

            $thisForm.find('[name="PrBillDate"]').val(moment().format('YYYY-MM-DD'));
            $thisForm.validate({ messages: validationMessage });
            $thisForm.attr('perfect-onFormSuccess', 'fn_loadProjectBillingAddForm');

            getSessionValue(LastIDSessionKey, function (result) {
                LastID_ProjectBilling = result;
            });
        });

    }
    var validationMessage = {

        'Amount': {
            'required': 'Please Enter Amount',
           // 'max': jQuery.validator.format('Amount should be less than or equal {0}'),
            'min':'Enter a value greater than 0',
        },

        'FK_BillType': {
            'required': 'Please Select Bill Type',
        },
        'FK_Project': {
            'required': 'Please Select Project',
        },
        'PrBillMode': {
            'required': 'Please Select Bill Mode',
        }

    }
    var tableOptions = {

        dropdown: {
            buttons: [
                   @if (ViewBag.PagedAccessRights.UsrrlMsView) {

                       <text> { displayName: "View", action: EditProjectBilling },</text>

                    }
                { type: "divider" },
                   @if (ViewBag.PagedAccessRights.UsrrlMsDel){
                        <text> { displayName: "Delete", action: deleteProjectBilling},</text>
                    }
            ],
            class: "btn btn-success light sharp"
        },
        onlyShowColumn: ["SlNo", "PrBillDate", "ProjectName", "PrNetAmount","CusNumber"],
        hideColumn: ["ID_ProjectBilling"],
        rowClickAction: EditProjectBilling,
        isDateType: ['PrBillDate'],
        serialNo: false,
        renameHeader: { "SlNo": "Sl No.", "ProjectName": "Project", "PrBillDate": "Bill Date", "PrNetAmount": "Net Amount Payable","CusNumber":"Customer No."},
    };

    function loadProjectBillingList(ele,callback) {
        let $sidemenu = $sideMenuOptions.body;

        let $thisForm = $(ele).closest('.testSearchBox');
       // let SearchName = $thisForm.find('input').val();
        let SearchName = $("#serchname").val();
        console.log("GH", SearchName)
        if (SearchName == undefined) {
            SearchName = "";
        }

         $sideMenuOptions.title.find('h4').text('@ViewBag.PageTitles'+' '+'List');

        let pageUrl = '@Url.Action("GetProjectBillingList", "ProjectBilling")';

        $.ajax({
            url: pageUrl,
            type: "POST",
            data: { pageSize: 15, pageIndex: 0, Name: SearchName, TransModes: ProjectBillingTransMode },
            dataType: "json",
            contentType: "application/x-www-form-urlencoded; charset=utf-8",
            success: function (ajaxOutput) {

                  if (ajaxOutput.Process.IsProcess) {
                      console.log('District', ajaxOutput);
                      $sidemenu.find('.jq_sidemenu_title').text("Vehicle");
                      setSessionValue(LastIDSessionKey, ajaxOutput.Data[0]["LastID"]);
                      $sidemenu.empty().append('<div class="d-flex justify-content-end mb-2 position-relative"><div class="col-md-6 position-absolute top-1 z-index"> <div class="input-group testSearchBox"><input type="text" class="form-control " id="serchname" name="SearchName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" value="' + SearchName +'" /><div class="input-group-append"><button id="addcountry-jq-searchButton6" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="loadProjectBillingList(this)"></button></div></div></div></div>', $('<div/>', {class:"col-md-12 table_temp_class"}).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))
                      let $table = $sidemenu.find('table');
                      $table.dataTable({
                          "serverSide": true,
                          "processing": true,
                          "lengthMenu": [10, 15, 20, 25, 50, 100],
                          "searching": false,
                          "ordering": false,
                          "deferLoading": ajaxOutput.totalrecord,
                          "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,
                          "pageLength": ajaxOutput.pageSize,
                          "recordsFiltered": ajaxOutput.pageSize,
                          "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize, searchkey: SearchName,TransModes: '@ViewBag.TransMode' }, tableOptions, $table)
                      });

                  }
                  else
                  {
                      if (ajaxOutput.Process.Status = "NoData") {
                          $sidemenu.find('.jq_sidemenu_title').text("Vehicle");
                          setSessionValue(LastIDSessionKey);
                          $sidemenu.empty().append('<div class="d-flex justify-content-end mb-2"><div class="col-md-6 position-absolute top-1 z-index"> <div class="input-group testSearchBox"><input type="text" class="form-control " name="SearchName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input"  value="' + SearchName +'"/><div class="input-group-append"><button id="addcountry-jq-searchButton6" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="loadProjectBillingList(this)"></button></div></div></div></div>', $('<div/>', { class: "col-md-12 table_temp_class" }).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))



                          let $table = $sidemenu.find('table');
                          $table.dataTable({
                              "serverSide": true,//no change
                              "processing": true,//-- process text when clicked
                              "lengthMenu": [],//---drop down page size
                              "searching": false,//--no change
                              "ordering": false,//--sorting
                              "deferLoading": ajaxOutput.totalrecord,//<----to total number of record from db
                              "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,//<----starting record
                              "pageLength": ajaxOutput.pageSize,//<----page size
                              "recordsFiltered": ajaxOutput.pageSize,//<---page size

                              "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize, searchkey: SearchName ,TransModes: '@ViewBag.TransMode'}, tableOptions, $table)
                          });
                      }
                      else {
                          $.each(ajaxOutput.Process.Message, function (key, value) {
                              NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                          });
                      }
                  }
            },
            complete: function () {
                if (callback) {


                    callback();
                }
            }
        });
    }

    function returnajaxPagination(ajaxInfo, tableOptions, tableid) {

        return {
            url: ajaxInfo.apiurl,
            type: "post",
            data: function () {
                var info = tableid.DataTable().page.info();
                let input = { pageSize: info.length, pageIndex: info.page, TransModes: ajaxInfo.TransModes };
                if (ajaxInfo.searchkey) {
                    input["Name"] = ajaxInfo.searchkey;
                }
                return input
            },
            dataType: "json",
            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            success: function (dtajaxOutput) {

                let table = tableid.DataTable();
                table.destroy();
                pft_table_newTableBody(tableid, dtajaxOutput.Data, tableOptions);

                tableid.dataTable({
                    "serverSide": true,
                    "processing": true,
                    "lengthMenu": [10, 15, 20, 25, 50, 100],
                    "searching": false,
                    "ordering": false,
                    "deferLoading": dtajaxOutput.totalrecord,
                    "displayStart": dtajaxOutput.pageIndex * dtajaxOutput.pageSize,
                    "pageLength": dtajaxOutput.pageSize,
                    "recordsFiltered": dtajaxOutput.pageSize,
                    "ajax": returnajaxPagination(ajaxInfo, tableOptions, tableid)
                })
            },
        }
    }
    var projectbillid = 0;
    function EditProjectBilling() {
      
            let $thisUser = $(this).closest('tr');
            let savedData = $thisUser.data('pData');


             $('.dataTable tr').removeClass("SelectForDelete");
             $(this).closest('tr').addClass('SelectForDelete');

            let inputData = {
                __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                ID_ProjectBilling: savedData.ID_ProjectBilling,
                TransMode: '@ViewBag.TransMode'
             };


             $.ajax({
                 url: '@Url.Action("GetProjectBillingInfo", "ProjectBilling")',
                 type: "POST",
                 data: JSON.stringify(inputData),
                 dataType: "json",
                 contentType: "application/json",
                 success: function (ajaxOutput) {

                     if (ajaxOutput.modelInfo.Process.IsProcess) {
                         $formContainer.load('@Url.Action("LoadFormProjectBilling", "ProjectBilling")?TransMode=' + '@ViewBag.TransMode&mtd=' + '@ViewBag.mtd', function () {
                             let $thisForm = $(this).find('[perfect-class="form"]');
                             $thisForm.validate({ messages: validationMessage });
                             $thisForm.data({ 'pData': ajaxOutput.Data });
                             console.log('data', ajaxOutput);
                             $thisForm.find('[name=ID_ProjectBilling]').val(ajaxOutput.modelInfo.Data[0].ID_ProjectBilling);
                             $thisForm.find('[name=IncludeTax]').val(ajaxOutput.modelInfo.Data[0].IncludeTax);
                             $thisForm.find('[name=FK_TaxGroup]').val(ajaxOutput.modelInfo.Data[0].FK_TaxGroup);
                             $thisForm.find('[name=FK_Project]').val(ajaxOutput.modelInfo.Data[0].FK_Project);
                             $thisForm.find('[name=ProjectName]').val(ajaxOutput.modelInfo.Data[0].ProjectName);
                             $thisForm.find('[name=PrBillDate]').val(moment(ajaxOutput.modelInfo.Data[0].PrBillDate).format('YYYY-MM-DD'));
                             $thisForm.find('[name=PrBillMode]').val(ajaxOutput.modelInfo.Data[0]['PrBillMode']).selectpicker('refresh');
                             $thisForm.find('[name=FK_BillType]').val(ajaxOutput.modelInfo.Data[0]['FK_BillType']).selectpicker('refresh');
                             $thisForm.find('[name="PrTaxAmount"]').val(Number(ajaxOutput.modelInfo.Data[0].PrTaxAmount).toFixed(2));
                             $thisForm.find('[name="PrOtherCharges"]').val(Number(ajaxOutput.modelInfo.Data[0].PrOtherCharges).toFixed(2));
                             $thisForm.find('[name="PrNetAmount"]').val(Number(ajaxOutput.modelInfo.Data[0].PrNetAmount).toFixed(2));
                             $thisForm.find('[name=CusName]').text(ajaxOutput.modelInfo.Data[0].CusName);
                             $thisForm.find('[name=CusMobile]').text(ajaxOutput.modelInfo.Data[0].CusMobile);
                             $thisForm.find('[name=ProjNumber]').text(ajaxOutput.modelInfo.Data[0].ProjNumber);
                             $thisForm.find('[name=ProjName]').text(ajaxOutput.modelInfo.Data[0].ProjectName);
                             $thisForm.find('[name=PrBillAmount]').text(Number(ajaxOutput.modelInfo.Data[0].ProjAmount).toFixed(2));
                             $thisForm.find('[name=PrBalanceAmount]').text(Number(ajaxOutput.modelInfo.Data[0].Balance).toFixed(2));
                             $thisForm.find('[name=PrAdvAmount]').text(Number(ajaxOutput.modelInfo.Data[0].AdvAmount).toFixed(2));
                             $thisForm.find('[name=TaxableAmount]').val(Number(ajaxOutput.modelInfo.Data[0].TaxableAmount).toFixed(2));
                           
                             if ($thisForm.find('[name=PrBillMode]').val() == "1") {
                                 if ($thisForm.find('[name="Performaview"]').val() == true) {
                                     $(".Performa").show();
                                 }
                                 else {
                                     $(".Performa").hide();
                                 }
                             }
                             else
                             {
                                 $(".Performa").hide();
                             }
                              
                             $("#Performa").prop("checked", ajaxOutput.modelInfo.Data[0].PrPerforma == "0" ? false : true);
                             $("#Roundoff2").val(Number(ajaxOutput.modelInfo.Data[0].RoundOff).toFixed(2));
                             $("#PrDueAmount").text(Number(ajaxOutput.modelInfo.Data[0].DueAmount).toFixed(2));

                             $thisForm.find('[name=Amount]').val((ajaxOutput.modelInfo.Data[0].PrBillAmount).toFixed(2));
                             $thisForm.find('[name=BalAmt]').val((ajaxOutput.modelInfo.Data[0].RoundOff).toFixed(2));
                             $thisForm.find('[name=FK_FinancePlanType]').val(ajaxOutput.modelInfo.Data[0].FK_FinancePlanType);






                             //let tempamount = Number(ajaxOutput.modelInfo.Data[0].AdvAmount).toFixed(2);

                             //ModeChange(this, 1, ajaxOutput.modelInfo.Data[0]['PrBillMode']);
                             //calculateMaxAmount(this);
                             //CalculateTotalProjectBill(this);

                             let netatb = 0;

                            
                             if (ajaxOutput.modelInfo.Data[0]['PrBillMode'] == 1) {
                                 $(".Partial").show();
                                 $(".Final").hide();
                                 $('#Amount').attr("disabled", false);
                                 //$("#Amount").attr('max', Amount);
                                 //netatb = tempamount;
                             }
                             else {
                                 $(".Partial").hide();
                                 $(".Final").show();
                                 $('#Amount').attr("disabled", true);

                                 var FK_FinancePlanType = $thisForm.find('[name=FK_FinancePlanType]').val() == "" ? "0" : $thisForm.find('[name=FK_FinancePlanType]').val();
                                 if (FK_FinancePlanType != "0") {
                                     $(".PartialFinalEMI").show();

                                 } else {
                                     $(".PartialFinalEMI").hide();
                                     $(".emiText").val(0);

                                 }

                             }
                             $thisForm.find('[name=AddAmount]').val(ajaxOutput.modelInfo.Data[0].PrAddnAmount);
                             $thisForm.find('[name=DownPayment]').val(ajaxOutput.modelInfo.Data[0].PrDownPayment);


                             $(".PartialFinal").show();
                                 netatb = $thisForm.find('[name="PrNetAmount"]').val();                                 
                                 if (ajaxOutput.OtherCharge.Process.IsProcess) {
                                     let othechg = ajaxOutput.OtherCharge.Data;
                                     othrchargelst = [];
                                     othrchargelst = othrchargelst.concat(othechg);
                                     $thisForm.data({ prtothchgData: othrchargelst });
                                     //$thisForm.data({ pbuyback: ajaxOutput.buybackdetail.Data });   
                                 }
                                 ShowOtherCharges(this, 1);
                               
                             //}
                             //var amnt = 0;
                             //var totamnt = parseFloat(ajaxOutput.modelInfo.Data[0].PrNetAmount) - parseFloat(ajaxOutput.modelInfo.Data[0].PrOtherCharges) - parseFloat(ajaxOutput.modelInfo.Data[0].PrTaxAmount);
                             //var rndoffamnt = ((totamnt) - Math.round(totamnt)).toFixed(2);
                             //$("#Roundoff2").val(rndoffamnt);
                             //amnt = (parseFloat(totamnt) + rndoffamnt).toFixed(2);
                             //$thisForm.find('[name=Amount]').val(amnt);
                             //if (ajaxOutput.buybackdetail.Data && ajaxOutput.buybackdetail.Data.length > 0) {

                             //    fillTableSales($thisForm, 'buyback', ajaxOutput.buybackdetail.Data, restableOptionsTempOut);

                             //} else {
                             //}
                             if (ajaxOutput.paymentdetail != null) {
                                 fillTableSales($thisForm, 'Payment', ajaxOutput.paymentdetail.Data, paytableOptionsTempOut)
                             }

                             projectbillid = ajaxOutput.modelInfo.Data[0].ID_ProjectBilling;

                             $thisForm.find('[name=BalAmt]').text((0).toFixed(2));

                             var IncludeTax = $thisForm.find('[name=IncludeTax]').val();
                             var totAmnt = 0; var billamt = parseFloat($("#Amount").val() == "" ? "0" : $("#Amount").val()); var othrchrg = parseFloat($("#PrOtherChargesid").val() == "" ? "0" : $("#PrOtherChargesid").val()); var Taxamnt = parseFloat($thisForm.find('[name=PrTaxAmount]').val() == "" ? "0" : $thisForm.find('[name=PrTaxAmount]').val()); var ProcessngChrg = parseFloat($("#AddAmount").val() == "" ? "0" : $("#AddAmount").val());
                             var roundoff = parseFloat($("#Roundoff2").val() == "" ? "0" : $("#Roundoff2").val());
                             if (IncludeTax == "false") {
                               
                                 totAmnt = billamt + othrchrg + Taxamnt + ProcessngChrg + roundoff;
                             } else {
                                 totAmnt = billamt + othrchrg + ProcessngChrg + roundoff;
                             }

                             $thisForm.find('[name=TotalAmount]').val(totAmnt);
                             ShowTax($("#addcountry-jq-searchButton3"), 0);

                             $thisForm.find('button[name=add]').addClass('d-none');
                             $thisForm.find('button[name=update]').removeClass('d-none');
                             $thisForm.find('button[name=Invoice]').removeClass('d-none');
                             $thisForm.find('button[name=Print]').removeClass('d-none');
                             $thisForm.attr('perfect-onFormSuccess', 'fn_ProjectBillingIndex_initialLoad');
                             $sideMenuOptions.close();
                             

                         });
                     }
                     else {
                         $.each(ajaxOutput.Process.Message, function (key, value) {
                             NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });

                         });
                     }
                 }
            });
    }

    function fillTableSales(ele, tkey, data, tableOptionsTempOut) {
        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let tableOptionsTempfill = tableOptionsTempOut;
        let insertData = []
        let tableKey = tkey;
        let indexname = tkey + 'index';
        tableOptionsTempfill.rowAttribute.push(indexname);
        tableOptionsTempfill.hideColumn.push(indexname);
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');
        $.each(data, function (keyOne, valOne) {

            let pData = {};

            pData[indexname] = keyOne + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', pData[indexname])

            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
               
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');

                if (typeof valOne[nameAttr] !== undefined) {

                    if ($this.is('select')) {

                        tableOptionsTempfill.hideColumn.push(nameAttr);

                        pData[nameAttr + '_d'] = $this.find('[value="' + valOne[nameAttr] + '"]').text();
                        pData[nameAttr] = valOne[nameAttr];


                    }
                    else if ($this.is('input')) {
                        let inputType = $this.attr('type').toLocaleLowerCase();

                        if (inputType == 'date') {

                            if (valOne[nameAttr] == null) {
                                pData[nameAttr] = valOne[nameAttr];
                            }
                            else {
                                pData[nameAttr] = moment(valOne[nameAttr]).format('YYYY-MM-DD');
                            }
                        }
                        else {
                            pData[nameAttr] = valOne[nameAttr];
                        }
                    }
                    else {
                        pData[nameAttr] = valOne[nameAttr];
                    }
                }
            });

            insertData.push(pData);

        });
        $tblcontainer.empty();
        $tblcontainer.append(pft_table_createtable(insertData, tableOptionsTempfill));

    }
     function deleteProjectBilling() {
            let $row = $(this).closest('tr');
                let Saveddata = $row.data('pData');

                $('.dataTable tr').removeClass("SelectForDelete");
                $(this).closest('tr').addClass('SelectForDelete');

                console.log("Saved data", Saveddata);
                $.ajax({
                    url: "@Url.Action("GetProjectBillingDeleteReasonList", "ProjectBilling")",
                    type: "GET",
                    // data: inputReason,
                    contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                    success: function (ajaxReasonOutput) {
                        if (ajaxReasonOutput.Process.IsProcess) {

                            console.log('Inside res ajax', ajaxReasonOutput.Data)


                            //delete code

                            let confirmationDialogBoxOption = { heading: "Are you Sure?", body: "Do you want to remove   " + Saveddata.ProjectName + " ?", cancel: "No", confirm: "Yes", reason: ajaxReasonOutput.Data };
                            var confirmBoxObj = ConfirmDialog(confirmationDialogBoxOption);

                            confirmBoxObj.then(function (selectedOption) {
                                if (selectedOption) {
                                    console.log('customerIndex> delete function:', selectedOption)


                                    let inputData = {
                                        __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                                        ID_ProjectBilling: Saveddata.ID_ProjectBilling,
                                        TransMode: ProjectBillingTransMode,

                                        ReasonID: selectedOption
                                    };


                                    $.ajax({
                                        url: "@Url.Action("DeleteProjectBillingInfo", "ProjectBilling")",
                                        type: "POST",
                                        data: inputData,
                                        contentType: 'application/x-www-form-urlencoded;charset=utf-8',
                                        success: function (ajaxOutput) {

                                            if (ajaxOutput.Process.IsProcess) {

                                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                                   
                                                    NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': 'Deleted Successfully' });
                                                      fn_ProjectBillingIndex_initialLoad();
                                                });

                                                //removing a data
                                                let table = $row.closest('table').DataTable()
                                                table.row($row).remove().draw();
                                                $('.dataTable tr').removeClass("SelectForDelete");
                                               
                                            }
                                            else {
                                                $.each(ajaxOutput.Process.Message, function (key, value) {

                                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                                    $('.dataTable tr').removeClass("SelectForDelete");
                                                });
                                            }

                                        }
                                    });


                                }
                                else {

                                    NotificationMessage({ 'message': 'No option selected' });
                                }

                            });

                            //-----delete code

                        }
                    }
                    });

        };
    </script>
}

