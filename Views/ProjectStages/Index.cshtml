
@{
    ViewBag.Title = "Project Stages";
}


<div class="container-fluid">
    @Html.AntiForgeryToken()
    <div class="row">
        <div class="col-lg-12" id="projectstages-form">

        </div>
    </div>
</div>


@section scripts{

    <script type="text/javascript">
        var StagesTransMode = '';
        const $formContainer = $('#projectstages-form');

        $(document).ready(function () {
            projectstagesInitialLoad();

        });

        

        function projectstagesInitialLoad() {
            StagesTransMode = '@ViewBag.TransMode';

               @if (ViewBag.PagedAccessRights.UsrrlMsView)
              {
                 <text>    loadprojectstagesList(this); </text>
              }
        
             loadprojectstagesAddForm();
        }


           // Function to load projectstages ADD form
        function loadprojectstagesAddForm() {

            $formContainer.load('@Url.Action("LoadprojectstagesForm", "projectstages")', function () {

                let $thisForm = $(this).find('[perfect-class="form"]');
                // ... Custom validation message
                $thisForm.validate({ messages: validationMessage });
                // ... Custom validation message

                $thisForm.attr('perfect-onFormSuccess', 'projectstagesInitialLoad');
               // initFunctions($thisForm);

            });

        };




        @*function loadprojectstagesList() {
            let $sidemenu = $sideMenuOptions.body;
            $sideMenuOptions.title.find('h4').text('Project Satges List');

            $.ajax({
                url: "@Url.Action("GetprojectstagesList", "projectstages")",
                type: "Get",
                headers: { "token_key": "1234" },
                //data: { branchID: id },
                dataType: "json",
                contentType: "application/json",
                success: function (ajaxOutput) {

                    if (ajaxOutput.Process.IsProcess) {

                       // $sidemenu.find('.jq_sidemenu_title').text("Measurement Type list");
                        //$sideMenuOptions.title.text("projectstages List");
                        $sideMenuOptions.body.html(pft_table_createtable(ajaxOutput.Data, tableOptions))
                        $sideMenuOptions.body.find('table').dataTable({ paging: true });

                        console.log('Load projectstages List', ajaxOutput);
                        $.each(ajaxOutput.Process.Message, function (key, value) {
                        });
                    }
                    else {
                        if (ajaxOutput.Process.Status == 'NoData') { }
                        else {
                            $.each(ajaxOutput.Process.Message, function (key, value) {
                                //toastr.warning(value, "Error");
                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                            });
                        }
                    }
                    console.log('projectstages Load', ajaxOutput);
                },
                complete: function () {
                }
            });
        };*@

        function loadprojectstagesList(ele) {
           // debugger
        let $sidemenu = $sideMenuOptions.body;
       
       // let $thisForm = $(ele).closest('.Search-Control');

        let $thisForm = $(ele).closest('.testSearchBox');
        let SearchName = $thisForm.find('input').val();
            console.log("GH", SearchName)
            if (SearchName == undefined) {
                SearchName = "";
            }
            $sideMenuOptions.title.find('h4').text('Project Stage List');
          let pageUrl = '@Url.Action("GetprojectstagesList", "projectstages")';
            $.ajax({
                url:pageUrl,
                type: "POST",
                data: { pageSize: 15, pageIndex: 0, Name: SearchName, TransMode: StagesTransMode },
                dataType: "json",
                contentType: "application/x-www-form-urlencoded; charset=utf-8",
                success: function (ajaxOutput) {


                    if (ajaxOutput.Process.IsProcess) {
                        debugger
                        console.log('Projectstages', ajaxOutput);
                        $sidemenu.find('.jq_sidemenu_title').text("Project Stages");

                        $sidemenu.empty().append('<div class="d-flex justify-content-end mb-2 position-relative"><div class="col-md-6 position-absolute top-1 z-index"> <div class="input-group testSearchBox"><input type="text" class="form-control " name="SearchName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input"  /><div class="input-group-append"><button id="addprojectstages-jq-searchButton6" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="loadprojectstagesList(this)"></button></div></div></div></div>', $('<div/>', { class: "col-md-12 table_temp_class" }).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))


                        let $table = $sidemenu.find('table');
                        $table.dataTable({
                            "serverSide": true,//no change
                            "processing": true,//-- process text when clicked
                            //"lengthChange": false,
                            "lengthMenu": [10, 15, 20, 25, 50, 100],//---drop down page size
                            "searching": false,//--no change
                            "ordering": false,//--sorting
                            "deferLoading": ajaxOutput.totalrecord,//<----to total number of record from db
                            "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,//<----starting record
                            "pageLength": ajaxOutput.pageSize,//<----page size
                            "recordsFiltered": ajaxOutput.pageSize,//<---page size

                            "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize, searchkey: SearchName, TransMode: StagesTransMode }, tableOptions, $table)
                        });

                    }
                    else {
                        if (ajaxOutput.Process.Status = "NoData") {

                            $sidemenu.find('.jq_sidemenu_title').text("Project Stages");

                            $sidemenu.empty().append('<div class="d-flex justify-content-end mb-2"><div class="col-md-6 position-absolute top-1 z-index"> <div class="input-group testSearchBox"><input type="text" class="form-control " name="SearchName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input"  /><div class="input-group-append"><button id="addProjectStages-jq-searchButton6" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="loadprojectstagesList(this)"></button></div></div></div></div>', $('<div/>', { class: "col-md-12 table_temp_class" }).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))
                            // $sidemenu.find('table').dataTable({ paging: true });


                            let $table = $sidemenu.find('table');
                            $table.dataTable({
                                "serverSide": true,//no change
                                "processing": true,//-- process text when clicked
                                // "lengthChange": false,
                                "lengthMenu": [],//---drop down page size
                                "searching": false,//--no change
                                "ordering": false,//--sorting
                                "deferLoading": ajaxOutput.totalrecord,//<----to total number of record from db
                                "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,//<----starting record
                                "pageLength": ajaxOutput.pageSize,//<----page size
                                "recordsFiltered": ajaxOutput.pageSize,//<---page size

                                "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize }, tableOptions, $table)
                            });
                        }
                        else {
                            $.each(ajaxOutput.Process.Message, function (key, value) {
                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                            });
                        }
                    }
            },
            complete: function () {

            }
        });
    }
    function returnajaxPagination(ajaxInfo, tableOptions, tableid) {
        //{ apiurl, pageSize }
        return {
            url: ajaxInfo.apiurl,
            type: "post",
            data: function () {
                var info = tableid.DataTable().page.info();
                console.log('RETURN AJAX', info)
                //return { <antiforgery>:<antiforgery>, length: ajaxInfo.pageSize, page: info.page }
                let input = { pageSize: info.length, pageIndex: info.page };
                if (ajaxInfo.searchkey) {
                    input["Name"] = ajaxInfo.searchkey;
                }
                return input
            },
            dataType: "json",
            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            success: function (dtajaxOutput) {
                // $sideMenuOptions.body.html(pft_table_createtable(dtajaxOutput.Data, tableOptions));
                let table = tableid.DataTable();
                table.destroy();
                pft_table_newTableBody(tableid, dtajaxOutput.Data, tableOptions);

                tableid.dataTable({
                    "serverSide": true,
                    "processing": true,
                    //"lengthChange": false,
                    "lengthMenu": [10, 15, 20, 25, 50, 100],
                    "searching": false,
                    "ordering": false,
                    "deferLoading": dtajaxOutput.totalrecord,
                    "displayStart": dtajaxOutput.pageIndex * dtajaxOutput.pageSize,
                    "pageLength": dtajaxOutput.pageSize,
                    "recordsFiltered": dtajaxOutput.pageSize,
                    "ajax": returnajaxPagination(ajaxInfo, tableOptions, tableid)
                })

            },

        }
    }



        var tableOptions = {
            dropdown: {
                buttons: [



                    @if (ViewBag.PagedAccessRights.UsrrlMsView) {
        <text> { displayName: "View", action: editprojectstages },</text>
    }

                    { type: "divider" },
     @if (ViewBag.PagedAccessRights.UsrrlMsDel)
             {
                 <text> { displayName: "Delete", action: deleteprojectstages },</text>

              }


                ],
                class: "btn btn-success light sharp"
            },
            onlyShowColumn: ["SlNo", "Name", 'ShortName'],
            hideColumn: [],
            rowClickAction: editprojectstages,
            serialNo: false,
            renameHeader: { "SlNo": "Sl No.", "Name": "Name" }
        };

        var validationMessage = {
            'PrStName': {
                'required': 'Please Enter  Name',
                'stringonly': 'Invalid Name',                
            },

            'PrStShortName': {
                //'required': 'Please Enter  Short Name',
                'stringonly': 'Invalid  Short Name',
                'alphanumeric': 'Letters, numbers, and underscores only please',                
            },
            'CategoryID': {
                'required': 'Please Select Category',

            }

        };

        function editprojectstages() {
           // debugger;
            let row = $(this).closest('tr');

            let Saveddata = row.data('pData');
            console.log("Saved data", Saveddata);


            $('.dataTable tr').removeClass("SelectForDelete");
            $(this).closest('tr').addClass('SelectForDelete');

            let inputData = {
                __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                ProjectStagesID: Saveddata.ProjectStagesID,
                TransMode: StagesTransMode

            };

            $.ajax({
                        url: '@Url.Action("GetprojectstagesInfoByID", "projectstages")',
                        type: "POST",

                        data: inputData,
                        dataType: "json",
                        contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                        success: function (ajaxOutput) {


                        console.log("Return", ajaxOutput);
                            if (ajaxOutput.Process.IsProcess)
                            {

                                console.log('>_ Inside GetprojectstagesInfo', ajaxOutput)



                                $formContainer.load("@Url.Action("LoadprojectstagesForm", "projectstages")", function () {

                                    $(this).find('[perfect-class=formTitle]').text('update : ' + ajaxOutput.Data[0].Name)
                                    console.log('Inside load');

                                    let $thisForm = $(this).find('[perfect-class="form"]');
                                    debugger;
                                    // initFunctions($thisForm);
                                    $thisForm.validate({ messages: validationMessage });

                                    $thisForm.data({ pData: ajaxOutput.Data[0] }); //setting the pdata value in form for update -id is taking
                                    fn_LoadSubcategory(ajaxOutput.Data[0].Category, $thisForm, ajaxOutput.Data[0].SubCategory);
                                        $thisForm.find('[name="PrStName"]').val(ajaxOutput.Data[0].Name),
                                        $thisForm.find('[name="PrStShortName"]').val(ajaxOutput.Data[0].ShortName),
                                        $thisForm.find('[name="CategoryID"]').val(ajaxOutput.Data[0].Category).selectpicker('refresh'),
                                        $thisForm.find('[name="SubCategotyID"]').val(ajaxOutput.Data[0].SubCategory).selectpicker('refresh'),
                                        $thisForm.find('[name="SortOrder"]').val(ajaxOutput.Data[0].SortOrder),

                                    $sideMenuOptions.close();

                                    $thisForm.find('button[name=add]').addClass('d-none');
                                    $thisForm.find('button[name=update]').removeClass('d-none');

                                    $thisForm.attr('perfect-onFormSuccess', 'projectstagesInitialLoad');

                                });
                            }
                            else {
                                console.log('>_ Inside GetprojectstagesInfo :false')

                                $.each(ajaxOutput.Process.Message, function (key, value)
                                {
                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                });
                            }

                            loadprojectstagesList()
                },

            });

        }


        function fn_LoadSubcategory(CategoryId, htmlEl, subCatId) {

            let $thisForm = htmlEl;
            debugger;
        let $placeDropdown = $thisForm.find('[name=SubCategotyID]');//<--- Will give place select html element
        $placeDropdown.empty();
        $placeDropdown.append($('<option/>', { value: '' }).text('Please select')).selectpicker('refresh');

            let CategoryID = CategoryId;


        // let ModeDropdown = $thisForm.find('[name=Mode]')
         //if ($thisForm.find('[name=Mode]').val() == "") {
         //    $thisForm.find('[name=Mode]').val(0);
         //}
         //alert($thisForm.find('[name=Mode]').val())
         $.ajax({
                 url: "@Url.Action("GetSubcategory", "ProjectStages")",
                type: "POST",

             data: JSON.stringify({ CategoryID: CategoryID}),
                dataType: "json",
                contentType: "application/json",
             success: function (ajaxOutput) {



                 if (ajaxOutput.Process.IsProcess) {

                             $.each(ajaxOutput.Data, function (key, value) {
                                 $placeDropdown.append($('<option/>', { "value": value.ID_SubCategory }).text(value.SubCatName)).selectpicker('refresh')
                                 });

                     $placeDropdown.val(subCatId).selectpicker('refresh')
                     }
                     else {
                     $.each(ajaxOutput.Process.Message, function (key, value) {
                             //toastr.warning(value, "Error");
                             //NotificationMessage({ 'type': 'info', 'heading': 'info', 'message': value });
                         });
                     }
                     }

                 });


    }
           // Function to delete projectstages


          //---
         // Function to delete customer
        function deleteprojectstages() {
             let $row = $(this).closest('tr');
            let Saveddata = $row.data('pData');


            $('.dataTable tr').removeClass("SelectForDelete");
            $(this).closest('tr').addClass('SelectForDelete');
            console.log('Delete function', Saveddata)

            //get reason list-

               $.ajax({
                   url: "@Url.Action("GetprojectstagesDeleteReasonList", "projectstages")",
                   type: "GET",
                  // data: inputReason,
                   contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                   success: function (ajaxReasonOutput) {
                       if (ajaxReasonOutput.Process.IsProcess) {

                           console.log('Inside res ajax', ajaxReasonOutput.Data)

                           let confirmationDialogBoxOption = { heading: "Are you Sure?",body: "Do you want to remove  " + Saveddata.Name + "  ?", cancel: "No", confirm: "Yes", reason: ajaxReasonOutput.Data };

                           var confirmBoxObj = ConfirmDialog(confirmationDialogBoxOption);

                            confirmBoxObj.then(function (selectedOption) {
                                if (selectedOption) {
                                     console.log('customerIndex> delete function:',selectedOption)

                                    let inputData = {
                                        __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                                        ProjectStagesID: Saveddata['ProjectStagesID'],
                                        ReasonID: selectedOption
                                    };
                                    console.log(inputData);
                                    $.ajax({
                                        url: "@Url.Action("DeleteprojectstagesInfo", "projectstages")",
                                        type: "POST",
                                        data: inputData,
                                        contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                                        success: function (ajaxOutput) {
                                            if (ajaxOutput.Process.IsProcess) {

                                                let table = $row.closest('table').DataTable()
                                                table.row($row).remove().draw();

                                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                                    NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': 'Deleted Successfully' });
                                                });
                                                  $formContainer.load("@Url.Action("LoadprojectstagesForm", "projectstages")", function () {
                                                      let $thisForm = $(this).find('[perfect-class="form"]')
                                                      loadprojectstagesList(this);
                                                });
                                                //removing a data


                                            }
                                            else {
                                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                                });
                                            }
                                        }
                                    });
                                }
                                else {
                                    NotificationMessage({ 'message': 'No option selected' });
                                }

                            });


                        }
                        else {



                        }
                   }

               });




        };







    </script>



}




