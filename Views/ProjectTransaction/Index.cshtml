
@{
    ViewBag.Title = "Index";
}

<div class="container-fluid">
    @Html.AntiForgeryToken()
    <div class="row">
        <div class="col-lg-12" id="ProjectTransaction-form">

        </div>
    </div>
    @*<button onclick="let y = trigerCategory( 2); console.log(y,'y');" >click</button>*@
</div>

@section scripts {
<script type="text/javascript">
        var ID_ServiceIncentiveSettings;
    var isModifed = false;
    var TodayDate;
    var datetoday;

        var ProjectTransactionid = 0;
    var Transmd = "";
    const LastIDSessionKey = 'ProjectTransactionLastID';
    var LastID_ProjectTransaction;


        //var IncTransMode = '';
        const $formContainer = $('#ProjectTransaction-form');

         var tableOptions ={
                dropdown: {
                    buttons: [
                      @if (ViewBag.PagedAccessRights.UsrrlStView)
                       {
                         <text> { displayName: "View", action: editIncentiveSettingsData },</text>
                       }
                        { type: "divider" },
                       @if (ViewBag.PagedAccessRights.UsrrlStDel)
                        {
                         <text>{ displayName: "Delete", action: deleteIncentiveSettingsData },</text>
                        }
                    ],
                    class: "btn btn-success light sharp"
                },
             onlyShowColumn: ["SlNo", "Date", "TransactionType", "NetAmount","CusNumber"],
            hideColumn: ["ID_ProjectTransaction","FK_Project","FK_Stage","Remark","TransMode","FK_Employee","PTAmount","PTRoundOff","FK_BillType","PCTTransType","FK_PettyCashier"],
             rowClickAction: editIncentiveSettingsData,
             isDateType: ["Date"],
             renameHeader: { "SlNo": "Sl No","CusNumber":"Customer No."}

        };
        var validationMessage = {
            'ProjectID': {
                'required': 'Please Select a Project',
                
            },
			 'TrasactionTypeID': {
                'required': 'Please Select  Transaction Type',
                
            },
			'FK_Employee': {
                'required': 'Please Select a Employee',
                
            },
			'BillType': {
                'required': 'Please Select a Bill Type',
                
            },
			'PettyCashier': {
                'required': 'Please Select  Petty Cashier',
                
            },
            'OtherCharge': {
                'required': 'Please Enter Amount',
                
            },
            'CreateDate': {
                'required': 'Please select a date',
				'max': jQuery.validator.format('The Date should be less than or equal to today`s date')
            },
            
            


        };


        $(document).ready(function () {

            fn_LoadProjectTransaction_initialLoad(this);
			

        });

        function fn_LoadProjectTransaction_initialLoad(els) {
		 let $thisForm = $(this).find('[perfect-class="form"]');
            Transmd = '@ViewBag.TransMode';
           
            LoadProjectTransactionList(this, LoadProjectTransaction);
           
        }

        function LoadProjectTransaction() {
            //isModifed = false;
           // debugger
		   var value='@ViewBag.mtd';
		   var TrMode='@ViewBag.mtd';
          //  $formContainer.load('@Url.Action("LoadProjectTransaction", "ProjectTransaction")?mtd=@ViewBag.mtd' + '&TransMode=@ViewBag.TransMode', function () {
			  $formContainer.load('@Url.Action("LoadProjectTransaction", "ProjectTransaction")', { mtd: value ,TransMode:TrMode }, function () {
                let $thisForm = $(this).find('[perfect-class="form"]');
                $thisForm.find('[name="CreateDate"]').val(moment().format('YYYY-MM-DD'));
                $thisForm.validate({ messages: validationMessage }); 
                $(this).find('[name="add"]').show();
                $(this).find('[name="Upadte"]').hide();
                CurrentDate();
                debugger
                 datetoday = TodayDate;
                const createDateInput = $("#CreateDate");
                createDateInput.attr("max", datetoday);
                ProjectTransactionid = 0;
                getSessionValue(LastIDSessionKey, function (result) {
                    LastID_ProjectTransaction = result;
                });
				const urlValues = new URLSearchParams(window.location.search);
				//alert(urlValues.get('ProjectID'));
				//alert(urlValues.get('title'));
				if(urlValues.get('ProjectID')>0)
				{
				$thisForm.find('button[name=btnclose]').removeClass('d-none')
				$thisForm.find('[name="ProjectID"]').val(urlValues.get('ProjectID'));
				}
				if(urlValues.get('title')=='ProjectTransaction')
				{
				 $thisForm.find('button[name=btnclose]').removeClass('d-none')
                  }
                else if (urlValues.get('title') == 'FundAllocation') {
                      $thisForm.find('button[name=btnclose]').removeClass('d-none')
                  }
                else if (urlValues.get('title') == 'FundSpend') {
                    $thisForm.find('button[name=btnclose]').removeClass('d-none')
                  }
                else if (urlValues.get('title') == 'FundReturn') {
                    $thisForm.find('button[name=btnclose]').removeClass('d-none')
                }
            });
        }



        function LoadProjectTransactionList(ele,callback)
        {

           // debugger
		  
            let $sidemenu = $sideMenuOptions.body;
            let $thisForm = $(ele).closest('.testSearchBox');
            let SearchName = $thisForm.find('input').val();
            $sideMenuOptions.title.find('h4').text('Project Transaction List');
            let pageUrl = "@Url.Action("LoadProjectTransactionList", "ProjectTransaction")";
            $.ajax({
                url:pageUrl,
                type: "POST",
                data: { pageSize: 15, pageIndex: 0, Name: SearchName, TransMode: Transmd},
                dataType: "json",
                contentType: "application/x-www-form-urlencoded; charset=utf-8",
                success: function (ajaxOutput) {

                    console.log(ajaxOutput, 'ajaxOutput>>>>2');
                    console.log("tableoption123", tableOptions)
                    if (ajaxOutput.Process.IsProcess) {
					console.log('District', ajaxOutput);
                        console.log('ajaxOutput.Data[0]', ajaxOutput.Data[0]);
                        console.log('ajaxOutput.Data[0]', ajaxOutput.Data[0]["LastID"]);

                        setSessionValue(LastIDSessionKey, ajaxOutput.Data[0]["LastID"]);
                        $sidemenu.find('.jq_sidemenu_title').text("IncentiveSettings List");
                        $sidemenu.empty().append('<div class="d-flex justify-content-end mb-2 position-relative"><div class="col-md-6 position-absolute top-1 z-index"> <div class="input-group testSearchBox"><input type="text" class="form-control " name="SearchName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input"  /><div class="input-group-append"><button id="addcountry-jq-searchButton6" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="LoadProjectTransactionList(this)"></button></div></div></div></div>', $('<div/>', { class: "col-md-12 table_temp_class" }).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))
                        let $table = $sidemenu.find('table');
                        $table.dataTable({
                            "serverSide": true,
                            "processing": true,
                            "lengthMenu": [10, 15, 20, 25, 50, 100],
                            "searching": false,
                            "ordering": false,
                            "deferLoading": ajaxOutput.totalrecord,
                            "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,
                            "pageLength": ajaxOutput.pageSize,
                            "recordsFiltered": ajaxOutput.pageSize,
                            "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize, searchkey: SearchName, TransMode: Transmd }, tableOptions, $table)
                        });

                    }
                    else {
                        if (ajaxOutput.Process.Status = "NoData") {
                            setSessionValue(LastIDSessionKey, 0);
                            $sidemenu.find('.jq_sidemenu_title').text("Language");
                            $sidemenu.empty().append('<div class="d-flex justify-content-end mb-2"><div class="col-md-6 position-absolute top-1 z-index"> <div class="input-group testSearchBox"><input type="text" class="form-control " name="SearchName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input"  /><div class="input-group-append"><button id="addcountry-jq-searchButton6" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="LoadProjectTransactionList(this)"></button></div></div></div></div>', $('<div/>', { class: "col-md-12 table_temp_class" }).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))

                            let $table = $sidemenu.find('table');
                            $table.dataTable({
                                "serverSide": true,
                                "processing": true,
                                "lengthMenu": [],
                                "searching": false,
                                "ordering": false,
                                "deferLoading": ajaxOutput.totalrecord,
                                "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,
                                "pageLength": ajaxOutput.pageSize,
                                "recordsFiltered": ajaxOutput.pageSize,

                                "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize, searchkey: SearchName, TransMode: Transmd  }, tableOptions, $table)
                            });
                        }
                        else {
                            $.each(ajaxOutput.Process.Message, function (key, value) { NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value }); });
                        }
                    }
                },
                complete: function () {
                    if (callback) {


                        callback();
                    }
                }
            })

        };

        function returnajaxPagination(ajaxInfo, tableOptions, tableid) {
           // debugger
            return {
                url: ajaxInfo.apiurl,
                type: "post",
                data: function () {
                    var info = tableid.DataTable().page.info();
                    let input = { pageSize: info.length, pageIndex: info.page };
                    if (ajaxInfo.searchkey) {
                        input["Name"] = ajaxInfo.searchkey;
                    }
                    return input
                },
                dataType: "json",
                contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                success: function (dtajaxOutput) {
                    let table = tableid.DataTable();
                    table.destroy();
                    pft_table_newTableBody(tableid, dtajaxOutput.Data, tableOptions);
						console.log(dtajaxOutput.Data,"hgfh");
					console.log(dtajaxOutput.pageIndex,"ytu");
                    tableid.dataTable({
                        "serverSide": true,
                        "processing": true,
                        "lengthMenu": [10, 15, 20, 25, 50, 100],
                        "searching": false,
                        "ordering": false,
                        "deferLoading": dtajaxOutput.totalrecord,
                        "displayStart": dtajaxOutput.pageIndex * dtajaxOutput.pageSize,
                        "pageLength": dtajaxOutput.pageSize,
                        "recordsFiltered": dtajaxOutput.pageSize,
                        "ajax": returnajaxPagination(ajaxInfo, tableOptions, tableid)
                    })

                },

            }
        }
		
        function editIncentiveSettingsData()
        {
            var $thisForm = $(this).closest('[perfect-class="form"]');

            console.log(this, 'this')
            debugger
            let $thisMenu = $(this).closest('tr');
            let savedData = $thisMenu.data('pData');
            //ID_CommonPrintingSettings = savedData.ID_CommonPrintingSettings;

            $('.dataTable tr').removeClass("SelectForDelete");
            $(this).closest('tr').addClass('SelectForDelete');

            let inputData =
            {
                __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                FK_ProjectTransaction: savedData.ID_ProjectTransaction,
				TransMode: '@ViewBag.TransMode'

            };

            $.ajax({
                url: '@Url.Action("SelectProjectTransactionbyId", "ProjectTransaction")',
                type: "POST",
                data: inputData,
                dataType: "json",
                contentType: 'application/x-www-form-urlencoded;charset=utf-8',
                success: function (ajaxOutput) {
                    debugger
                    console.log(ajaxOutput, '789')

                    if (ajaxOutput.data.Process.IsProcess) {
                        $formContainer.load('@Url.Action("LoadProjectTransaction", "ProjectTransaction")?mtd=@ViewBag.mtd' + '&TransMode=@ViewBag.TransMode', function () {
                         console.log(ajaxOutput.data.Data[0].FK_PettyCashier,"ayu");
						 console.log(ajaxOutput.data.Data[0].FK_Employee,"ayu2");
						 let $thisForm = $(this).find('[perfect-class="form"]');
                            $('#ID_ProjectTransaction').val(ajaxOutput.data.Data[0].ID_ProjectTransaction);
							
                            $('input[name="ProjectID"]').val(ajaxOutput.data.Data[0].FK_Project);
                            $('input[name="Project"]').val(ajaxOutput.data.Data[0].Project);
							 $('input[name="FK_Employee"]').val(ajaxOutput.data.Data[0].FK_Employee);
                            $('input[name="Employee"]').val(ajaxOutput.data.Data[0].Employee);
                           // $('button[name="projectTrigger"]').trigger('change');
						 
						   $('#TrasactionTypeID').val(ajaxOutput.data.Data[0].PTPrjTransType).selectpicker('refresh');
						   // $('#PettyCashier').val(ajaxOutput.data.Data[0].FK_PettyCashier).selectpicker('refresh');
                          
                            getfunctionty($('#ProjectID'), ajaxOutput.data.Data[0].FK_Stage);
							//fn_PaymentInformation(this)
                            $('input[name="CreateDate"]').val(convertMicrosoftJSONDateToDate(ajaxOutput.data.Data[0].Date));
                         
						   $('input[name="OtherCharge"]').val(Number(ajaxOutput.data.Data[0].PTAmount).toFixed(2));
                          //  $('input[name="OtherCharge"]').val(ajaxOutput.data.Data[0].NetAmount);
                            $('#Remarks').val(ajaxOutput.data.Data[0].Remark);
                             
							   $('#BillType').val(ajaxOutput.data.Data[0].FK_BillType).selectpicker('refresh');
							  
							     $('#PettyCashier').val(ajaxOutput.data.Data[0].FK_PettyCashier);
                           // $('#StageID').val(ajaxOutput.Data[0].FK_Stage).selectpicker('refresh');
						    getfunctiontPayEdit($('#ProjectID'),ajaxOutput.data.Data[0].FK_Project)
                            $('button[name="add"]').hide();
							  // $(".paymentmethordDiv").hide();
                           // $('button[name="pssrOtherchargeButton"]').attr('disabled', true);
                            const createDateInput = $("#CreateDate");
                            createDateInput.attr("max", datetoday);
                            $('input[name="NetAmount"]').val(ajaxOutput.data.Data[0].NetAmount);
							 $('input[name="Roundoff"]').val(ajaxOutput.data.Data[0].PTRoundOff);
                           // $(".NetAmountDiv").show();
						   
							  
                            ProjectTransactionid = ajaxOutput.data.Data[0].ID_ProjectTransaction;
                            
                            //ShowOtherCharges(this, 0)
                            // GetWarrantylists(this, 1)
                            if (ajaxOutput.OtherCharge.Process.IsProcess) {

                                let othechg = ajaxOutput.OtherCharge.Data;
                                console.log('AJAX OTHER CHG OUTTPUT>', ajaxOutput.OtherCharge.Data);
                                othrchargelst = [];
                                othrchargelst = othrchargelst.concat(othechg);
                                console.log('OTH INFOT>', othrchargelst);
                                $thisForm.data({ prtothchgData: othrchargelst });
                            }
							 if (ajaxOutput.paymentdetail.Process.IsProcess) {
							 if (ajaxOutput.paymentdetail.Data != null) {
							  
						        console.log(ajaxOutput.paymentdetail.Data,"asd");
                                 fillTableSales($thisForm, 'Payment', ajaxOutput.paymentdetail.Data, paytableOptionsTempOut)
                             }
							  let netamt = $thisForm.find('[name="NetAmount"]').val() == "" ? 0 : $thisForm.find('[name="NetAmount"]').val();
                            let billamt = 0;
                            let bilamt = 0;
                            if ($thisForm.find('[name=BalAmt]').text() == '') {
                                bilamt = 0;
                            }
                            else {
                                bilamt = netamt;
                            }

                            $('#Paymentdethead').find('tbody tr').each(function (index, ele) {

                                billamt += parseFloat($(ele).find('.PAmount').text());
								
                            });

                            bilamt = parseFloat(bilamt) - parseFloat(billamt);

                            $thisForm.find('[name=BalAmt]').text((0).toFixed(2))
							 }
							
                            //-------------

							 fun_TransactionType($('#TrasactionTypeID'),ajaxOutput.data.Data[0].PTPrjTransTyp);
                            $sideMenuOptions.close();

                        });
                    }
                    else {
                        $.each(ajaxOutput.Process.Message, function (key, value) {
                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                            $('.dataTable tr').removeClass("SelectForDelete");
                        });
                    }
                }

            });

        };

		 function fillTableSales(ele, tkey, data, tableOptionsTempOut) {
        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let tableOptionsTempfill = tableOptionsTempOut;
        let insertData = []
        let tableKey = tkey;
        let indexname = tkey + 'index';
        tableOptionsTempfill.rowAttribute.push(indexname);
        tableOptionsTempfill.hideColumn.push(indexname);
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');
        $.each(data, function (keyOne, valOne) {

            let pData = {};

            pData[indexname] = keyOne + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', pData[indexname])

            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');

                if (typeof valOne[nameAttr] !== undefined) {

                    if ($this.is('select')) {

                        tableOptionsTempfill.hideColumn.push(nameAttr);

                        pData[nameAttr + '_d'] = $this.find('[value="' + valOne[nameAttr] + '"]').text();
                        pData[nameAttr] = valOne[nameAttr];


                    }
                    else if ($this.is('input')) {
                        let inputType = $this.attr('type').toLocaleLowerCase();

                        if (inputType == 'date') {

                            if (valOne[nameAttr] == null) {
                                pData[nameAttr] = valOne[nameAttr];
                            }
                            else {
                                pData[nameAttr] = moment(valOne[nameAttr]).format('YYYY-MM-DD');
                            }
                        }
                        else {
                            pData[nameAttr] = valOne[nameAttr];
                        }
                    }
                    else {
                        pData[nameAttr] = valOne[nameAttr];
                    }
                }
            });

            insertData.push(pData);

        });
        $tblcontainer.empty();
        $tblcontainer.append(pft_table_createtable(insertData, tableOptionsTempfill));

    }
        function deleteIncentiveSettingsData()
        {
            debugger;
         //   $sideMenuOptions.close();
             let $row = $(this).closest('tr');
            let Saveddata = $row.data('pData');
            console.log(Saveddata,'Saveddata>><')

            $('.dataTable tr').removeClass("SelectForDelete");
            $(this).closest('tr').addClass('SelectForDelete');



               $.ajax({
                   url: "@Url.Action("GetReasonList", "IncentiveSettings")",
                   type: "GET",
                   contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                   success: function (ajaxReasonOutput) {
                       if (ajaxReasonOutput.Process.IsProcess) {
                           console.log(ajaxReasonOutput,'ajaxReasonOutput,,,...')
                           let confirmationDialogBoxOption = { heading: "Are you Sure?", body: "Do you want to remove this record  ?", cancel: "No", confirm: "Yes", reason: ajaxReasonOutput.Data };
                           var confirmBoxObj = ConfirmDialog(confirmationDialogBoxOption);
                           confirmBoxObj.then(function (selectedOption) {
                               //console.log(selectedOption, 'selectedOption>><<');
                                if (selectedOption) {

                                    let inputData = {
                                        __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                                        FK_ProjectTransaction: Saveddata.ID_ProjectTransaction,
                                        FK_Reason: selectedOption
                                    };

                                    $.ajax({
                                        url: "@Url.Action("DeleteProjectTransaction", "ProjectTransaction")",
                                        type: "POST",
                                        data: inputData,
                                        contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                                        success: function (ajaxOutput) {
                                            if (ajaxOutput.IsProcess) {
                                                

                                                $.each(ajaxOutput.Message, function (key, value) {
                                                    NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': 'Deleted Successfully' });
													 fn_LoadProjectTransaction_initialLoad();
                                                });
												let table = $row.closest('table').DataTable()
                                                table.row($row).remove().draw();
                                                $('.dataTable tr').removeClass("SelectForDelete");
                                           

                                            }
                                            else {
                                                $.each(ajaxOutput.Message, function (key, value) {
                                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                                    $('.dataTable tr').removeClass("SelectForDelete");
                                                });
                                            }
                                        }
                                    });
                                }
                                else {
                                    NotificationMessage({'message': 'No option selected' });
                                }
                            });
                        }
                        else {
                        }
                   },
                   complete: function () {
                      // LoadProjectTransactionList();
                   }

               });
        };
        function removeTable(els) {
            debugger
            let $thistbl = $(els).closest('table');
            let table = $thistbl.DataTable();
            table.destroy();
            if ($(els).closest('tbody').find('tr').length > 1) {
                $(els).closest('tr').remove();
                pft_table_slreset($thistbl);
                $thistbl.dataTable({ paging: true });
            }
            else {
                $('#AuthorizationLevelItemHead').attr('perfect-temptable-action', 0);
                $('#AuthorizationLevelItemHead').attr('perfect-temptable-lastindex', 0);
                $thistbl.remove();

            }
        }
        function formatAmount(amount) {

            const floatValue = parseFloat(amount);
            const formattedAmount = floatValue.toFixed(2);
            return formattedAmount;
    }







        function convertMicrosoftJSONDateToDate(msDate) {

            const milliseconds = parseInt(msDate.match(/\d+/)[0]);


            const date = new Date(milliseconds);


            const day = date.getDate();
            const month = date.getMonth() + 1;
            const year = date.getFullYear();


            const formattedDay = day.toString().padStart(2, '0');
            const formattedMonth = month.toString().padStart(2, '0');


            const formattedDate = `${year}-${formattedMonth}-${formattedDay}`;

            return formattedDate;
        }
    function CurrentDate() {
        debugger
        const currentDate = new Date();
        const day = currentDate.getDate().toString().padStart(2, '0'); // Day with leading zero
        const month = (currentDate.getMonth() + 1).toString().padStart(2, '0'); // Month is zero-based
        const year = currentDate.getFullYear();

        TodayDate = `${year}-${month}-${day}`;

    }



</script>
}


