@{
    ViewBag.Title = "Purchase";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid">

    <div class="row">
        <div class="col-lg-12" id="jq_PurchaseIndex_formContainer">

        </div>
    </div>


</div>
@section scripts{

    <script type="text/javascript">
        const LastIDSessionKey = 'PurchaseLastID';
        var PurchaseTransMode = '';
        var LastID_Purchase;
        var FK_BranchCode = '';
        var FK_States = '';
        var StateCode = '';
        var IsStateCode = false;

        //--- Form
        const $formContainer = $('#jq_PurchaseIndex_formContainer');
        // Initial load functions
        $(document).ready(function () {
            fn_PurchaseIndex_initialLoad();
        });
        function fn_PurchaseIndex_initialLoad() {
            //fn_PurchaseIndex_initialLoad();
            PurchaseTransMode = "";
          //  getSessionValue("Vd++rU8QQpt1lN1iIJW1a8kBBMrZMxMQsyYOtigyEIY=", function (result) {
             
            PurchaseTransMode = '@ViewBag.TransMode';
                FK_BranchCodePur = '@ViewBag.Fk_BranchCode1';
            FK_States = '@ViewBag.FK_States';

            fn_PurchaseIndex_loadPurchase(this, fn_PurchaseIndex_loadPurchaseAddForm);

                //fn_PurchaseIndex_loadPurchase();
                //fn_PurchaseIndex_loadPurchaseAddForm();
           // });
           
         
        }
        //$('#jq-sidemenu').click(function () {
        //
        //    fn_PurchaseIndex_loadPurchase();
        //});


        // Fucntion to load CustomerList
        function fn_PurchaseIndex_loadPurchases() {
            $.ajax({
                url: "@Url.Action("GetPurchaseList", "Purchase")",
                type: "Get",
                dataType: "json",
                contentType: "application/json",
                success: function (ajaxOutput) {

                    if (ajaxOutput.Process.IsProcess) {
                        // console.log('Customer :', data);
                        $sideMenuOptions.title.text("Purchase List");
                        $sideMenuOptions.body.html(pft_table_createtable(ajaxOutput.Data, tableOptions))
                        $sideMenuOptions.body.find('table').dataTable({ paging: true });

                    }
                    else {
                        if (ajaxOutput.Process.Status = "NoData") {
                        }
                        else
                        {
                            $.each(ajaxOutput.Process.Message, function (key, value) {
                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                            });
                        }
                    }


                },
                complete: function () {

                }
            });



        };
        var tableOptions = {
            dropdown: {
                buttons: [
                    { displayName: "View", action: fn_PurchaseIndex_loadProductUpdateForm },
                    { type: "divider" },
                    {
                        displayName: "Delete", action: deletePurchase
                    }
                ],
                class: "btn btn-success light sharp"
            },
            onlyShowColumn: ["SlNo", "PurInvoiceNo", "PurInvoiceDate", "SuppName", "PurNetAmountDec"],
            serialNo: false,
            hideColumn: ["ID_Purchase", "FK_Supplier"],
            rowClickAction:fn_PurchaseIndex_loadProductUpdateForm,
            renameHeader: { "SuppName": "Supplier Name", "PurNetAmountDec": "Net Amount1R", "PurInvoiceNo": "Invoice No", "PurInvoiceDate":"Invoice Date"}
            
        };




        var serchpdfname;

        function fn_PurchaseIndex_loadPurchase(ele, callback) {
            console.log("1", 1);
        let $sidemenu = $sideMenuOptions.body;
            
        let $thisForm = $(ele).closest('.testSearchBox');
            let SearchName = $thisForm.find('input').val();
             serchpdfname = SearchName ;
          
            if (SearchName == undefined) {
                SearchName = "";
            }
           $sideMenuOptions.title.find('h4').text('@ViewBag.PageTitle'+' '+'List');
         
            
          let pageUrl = '@Url.Action("GetPurchaseListNew", "Purchase")';
            $.ajax({
                url:pageUrl,
                type: "POST",
                data: { pageSize: 15, pageIndex: 0, Name: SearchName, TransModes: PurchaseTransMode },
                dataType: "json",
                contentType: "application/x-www-form-urlencoded; charset=utf-8",
                success: function (ajaxOutput) {


                    if (ajaxOutput.Process.IsProcess) {
                        console.log("LastID", ajaxOutput.Data[0]["LastID"]);
                        setSessionValue(LastIDSessionKey, ajaxOutput.Data[0]["LastID"]);
                        
                    
                              $sidemenu.find('.jq_sidemenu_title').text("Purchase List");
                        
                              $sidemenu.empty().append('<div class="d-flex justify-content-end mb-2 position-relative"><div class="col-md-6 position-absolute top-1 z-index"> <div class="input-group testSearchBox"><input type="text" class="form-control " name="SearchName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" value="' + SearchName +'"  /><div class="input-group-append"><button id="addcountry-jq-searchButton6" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="fn_PurchaseIndex_loadPurchase(this)"></button></div></div></div></div>', $('<div/>', {class:"col-md-12 table_temp_class"}).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))
                             // $sidemenu.find('table').dataTable({ paging: true });


                              let $table = $sidemenu.find('table');
                              $table.dataTable({

                                  "serverSide": true,//no change
                                  "processing": true,//-- process text when clicked
                                  //"lengthChange": false,
                                  "lengthMenu": [10, 15, 20, 25, 50, 100],//---drop down page size
                                  "searching": false,//--no change
                                  "ordering": false,//--sorting
                                  "deferLoading": ajaxOutput.totalrecord,//<----to total number of record from db
                                  "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,//<----starting record
                                  "pageLength": ajaxOutput.pageSize,//<----page size
                                  "recordsFiltered": ajaxOutput.pageSize,//<---page size

                                  "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize, searchkey: SearchName, TransModes: PurchaseTransMode}, tableOptions, $table)
                              });

                          }
                    else {
                        setSessionValue(LastIDSessionKey, 0);
                              if (ajaxOutput.Process.Status = "NoData") {

                                  $sidemenu.find('.jq_sidemenu_title').text("Customer Service Registrations");

                                  $sidemenu.empty().append('<div class="d-flex justify-content-end mb-2"><div class="col-md-6 position-absolute top-1 z-index"> <div class="input-group testSearchBox"><input type="text" class="form-control " name="SearchName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input"  value="' + SearchName +'"  /><div class="input-group-append"><button id="addcountry-jq-searchButton6" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="fn_PurchaseIndex_loadPurchase(this)"></button></div></div></div></div>', $('<div/>', { class: "col-md-12 table_temp_class" }).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))
                        // $sidemenu.find('table').dataTable({ paging: true });


                        let $table = $sidemenu.find('table');
                        $table.dataTable({
                            "serverSide": true,//no change
                            "processing": true,//-- process text when clicked
                           // "lengthChange": false,
                             "lengthMenu": [0],//---drop down page size
                            "searching": false,//--no change
                            "ordering": false,//--sorting
                            "deferLoading": ajaxOutput.totalrecord,//<----to total number of record from db
                            "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,//<----starting record
                            "pageLength": ajaxOutput.pageSize,//<----page size
                            "recordsFiltered": ajaxOutput.pageSize,//<---page size

                            "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize, searchkey: SearchName, TransModes: PurchaseTransMode}, tableOptions, $table)
                        });
                    }
                    else {
                        $.each(ajaxOutput.Process.Message, function (key, value) {
                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                        });
                    }
                }
            },
            complete: function () {
                console.log("2", 2);
                if (callback) {
                    console.log("3", 3);
                    callback();
                }
            }
        });
    }

        

    function returnajaxPagination(ajaxInfo, tableOptions, tableid) {
        //{ apiurl, pageSize }
        return {
            url: ajaxInfo.apiurl,
            type: "post",
            data: function () {
                var info = tableid.DataTable().page.info();
                console.log('RETURN AJAX', info)

                let input = { pageSize: info.length, pageIndex: info.page, TransModes: ajaxInfo.TransModes };
                if (ajaxInfo.searchkey) {
                    input["Name"] = ajaxInfo.searchkey;
                }
                return input
            },
            dataType: "json",
            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            success: function (dtajaxOutput) {

                let table = tableid.DataTable();
                table.destroy();
                pft_table_newTableBody(tableid, dtajaxOutput.Data, tableOptions);

                tableid.dataTable({
                    "serverSide": true,
                    "processing": true,

                    "lengthMenu": [10, 15, 20, 25, 50, 100],
                    "searching": false,
                    "ordering": false,
                    "deferLoading": dtajaxOutput.totalrecord,
                    "displayStart": dtajaxOutput.pageIndex * dtajaxOutput.pageSize,
                    "pageLength": dtajaxOutput.pageSize,
                    "recordsFiltered": dtajaxOutput.pageSize,
                    "ajax": returnajaxPagination(ajaxInfo, tableOptions, tableid)
                })

            },

        }
    }



        // Fucntion to load Customer ADD form
        function fn_PurchaseIndex_loadPurchaseAddForm() {

            $formContainer.load('@Url.Action("LoadPurchaseForm", "Purchase")?mtd=@ViewBag.mtd' + '&TransMode=@ViewBag.TransMode', function () {
                let $thisForm = $(this).find('[perfect-class="form"]');
                Getdepartmentdefault();
               
                $thisForm.find('[name="InvoiceDate"]').val(moment().format('YYYY-MM-DD'));
                $thisForm.attr('perfect-onFormSuccess', 'fn_PurchaseIndex_initialLoad');
                initFunctions($thisForm);
                $thisForm.find('.jq_branchchange_btn').trigger('click');
                $thisForm.find('.jq_Deptchange_btn').trigger('click');
                $thisForm.validate({ messages: validationMessage });
                $('.DivAdvanceAmount').hide();
                Purchaseid = 0;
                getSessionValue(LastIDSessionKey, function (result) {
                    LastID_Purchase = result;
                });  
                
            });

        };


        var Purchaseid = 0;
        function fn_PurchaseIndex_loadProductUpdateForm() {
            let $thisRow = $(this).closest('tr');
            let saveddata = $thisRow.data('pData');

            $('.dataTable tr').removeClass("SelectForDelete");
            $(this).closest('tr').addClass('SelectForDelete');

            let inputData = {
                __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                PurchaseID: saveddata.ID_Purchase,
                TransMode: PurchaseTransMode
            };

            $.ajax({
                url: "@Url.Action("GetPurchaseInfoNew", "Purchase")",
                type: "POST",
                // headers: { "token_key": "1234" },
                data: inputData,
                dataType: "json",
                contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                success: function (ajaxOutput) {
                    console.log('sss', ajaxOutput)
                    $formContainer.load('@Url.Action("LoadPurchaseForm", "Purchase")?mtd=@ViewBag.mtd', function () {
                    let $thisForm = $(this).find('[perfect-class="form"]');
                        if (ajaxOutput.prInfo.Process.IsProcess) {
                            //process is success
                            initFunctions($thisForm);

                            debugger
                            $thisForm.data({ pDatas: ajaxOutput.prInfo.Data[0] });
                            $thisForm.data({ pData: ajaxOutput.prInfo.Data[0] });
                            $thisForm.data({ pDataTax: ajaxOutput.PTaxDetails.Data });
                            $thisForm.data({ pOthrChgData: ajaxOutput.OtherCharge.Data });
                            $thisForm.data({ pTranstype: ajaxOutput.Transtypelist.Data });
                            $thisForm.data({ pPurchaseproduct: ajaxOutput.PurchaseDetails.Data[0] });

                            console.log('sss4new', ajaxOutput.prInfo.Data[0]);
                            // Fill fields
                            $(this).find('[perfect-class=formTitle]').text('update : ' + ajaxOutput.prInfo.Data[0]['PurInvoiceNo'])
                            $thisForm.find('[name="PurchaseID"]').val(ajaxOutput.prInfo.Data[0]['ID_Purchase']);
                            $thisForm.find('[name="TransMode"]').val(ajaxOutput.prInfo.Data[0]['Mode']).selectpicker('refresh');
                            $thisForm.find('[name="BranchID"]').val(ajaxOutput.prInfo.Data[0]['BranchID']).selectpicker('refresh');
                            $thisForm.find('[name="BranchName"]').val(ajaxOutput.prInfo.Data[0].BranchName),
                                $thisForm.find('[name="DepartmentID"]').val(ajaxOutput.prInfo.Data[0]['FK_Department']).selectpicker('refresh');
                            $thisForm.find('[name="DepartmentName"]').val(ajaxOutput.prInfo.Data[0].DeptName),
                                $thisForm.find('[name="SupplierID"]').val(ajaxOutput.prInfo.Data[0]['FK_Supplier']).selectpicker('refresh');
                            $thisForm.find('[name="SupplierName"]').val(ajaxOutput.prInfo.Data[0].SuppName);
                            $thisForm.find('[name=Statecode]').val(ajaxOutput.prInfo.Data[0].Statecode);
                            
                        $thisForm.find('[name="InvoiceNo"]').val(ajaxOutput.prInfo.Data[0]['PurInvoiceNo']);
                        $thisForm.find('[name="InvoiceDate"]').val(moment(ajaxOutput.prInfo.Data[0].PurInvoiceDateSel).format('YYYY-MM-DD')),
                        $thisForm.find('[name="BillTotal"]').val((ajaxOutput.prInfo.Data[0]['PurBillTotal']).toFixed(2));
                        $thisForm.find('[name="Discount"]').val((ajaxOutput.prInfo.Data[0]['PurDiscount']).toFixed(2));
                        $thisForm.find('[name="DiscountPerc"]').val((ajaxOutput.prInfo.Data[0]['PurDiscountPer']).toFixed(2));
                        $thisForm.find('[name="OtherCharge"]').val((ajaxOutput.prInfo.Data[0]['PurOtherCharge']).toFixed(2));
                        $thisForm.find('[name="RoundOff"]').val((ajaxOutput.prInfo.Data[0]['PurRoundOff']).toFixed(2));
                        $thisForm.find('[name="NetAmount"]').val((ajaxOutput.prInfo.Data[0]['PurNetAmount']).toFixed(2));
                        $thisForm.find('[name="PayableAmount"]').val(ajaxOutput.prInfo.Data[0]['PayableAmount']);
                        $thisForm.find('[name="FK_PurchaseOrder"]').val(ajaxOutput.prInfo.Data[0]['FK_PurchaseOrder']);
                        $thisForm.find('[name="AdvanceAmount"]').val(ajaxOutput.prInfo.Data[0]['PurAdvAmount']);
                            // stuff to do after filling data
                            //$sideMenuOptions.close();//<---  Close side menu
                            //$thisForm.find('button[name=add]').addClass('d-none');//<--- hide add cunsomer button
                            //$thisForm.find('button[name=update]').removeClass('d-none');//<--- show update cunsomer button

                            Purchaseid = ajaxOutput.prInfo.Data[0]['ID_Purchase'];

                        $thisForm.find('[name="Supplier"]').attr("disabled", "disabled");
                        
                            
                        $("#mainresetbutton").html("Reset");
                       

                        }
                       
                        debugger;
                        if (ajaxOutput.prInfo.Data[0].FK_PurchaseOrder > 0) {
                            $('.DivAdvanceAmount').show();
                            $thisForm.find('[name="Supplier"]').val(2).selectpicker('refresh');
                            
                        }
                        else {
                            $thisForm.find('[name="Supplier"]').val(1).selectpicker('refresh');
                            $('.DivAdvanceAmount').hide();

                        }
                        let statecode = $thisForm.find('[name=Statecode]').val();
                        console.log('statecodeview', statecode);
                        console.log('viewFK_States', FK_States);
                        if (statecode == FK_States) {

                            IsStatecode = false;
                        }
                        else {
                            IsStatecode = true;//hence it is IGSTCustomer
                        }
                        debugger;
                        if (ajaxOutput.PTaxDetails.Process.IsProcess)
                        {
                            //let taxinfos = {};
                            //taxinfos = ajaxOutput.TaxDetails.Data;
                            ////tax = [];
                            //tax.push(taxinfos);
                            //console.log('TAXINFOTRETRIVE>', tax)
                            debugger
                            let taxinfos = ajaxOutput.PTaxDetails.Data;
                            console.log('AJAX TAX OUTTPUT>', ajaxOutput.PTaxDetails.Data)
                            tax1 = [];
                            tax= tax.concat(taxinfos);
                            console.log('TAXINFOT>', tax)
                            edit = 1;
                            $thisForm.data({ pDataTax: tax });

                        }
                        
                        if (ajaxOutput.PurchaseDetails.Process.IsProcess) {
                          
                            $thisForm.data({ pData: ajaxOutput.PurchaseDetails.Data[0] });
                            $thisForm.data({ purData: ajaxOutput.PurchaseDetails.Data });
                            $thisForm.data({ purDatas: ajaxOutput.PurchaseDetails.Data });
                            //$thisForm.data({ quantitydata: ajaxOutput.PurchaseDetails.Data });
                            $thisForm.data({ s: 0 });
                            console.log('sss4', ajaxOutput.PurchaseDetails.Data[0]);
                            fillTable($thisForm, 'Purchase', ajaxOutput.PurchaseDetails.Data, tableOptionsTempOut)
                            $thisForm.find('[perfect-tempTable="Purchase"]').find('table')/*.dataTable({ paging: false, ordering: false })*/;
                        }

                        var CheckListHTML = '';
                        let sum = 0;

                        if (ajaxOutput.OtherCharge.Process.IsProcess) {

                            let othechg = ajaxOutput.OtherCharge.Data;
                            console.log('AJAX OTHER CHG OUTTPUT>', ajaxOutput.OtherCharge.Data);
                            othrchargelst = [];
                            othrchargelst = othrchargelst.concat(othechg);
                            console.log('OTH INFOT>', othrchargelst);
                            $thisForm.data({ pOthrChgData: othrchargelst });
                        }
                        
                         $sideMenuOptions.close();//<---  Close side menu
                         $thisForm.find('button[name=add]').addClass('d-none');//<--- hide add cunsomer button
                         $thisForm.find('button[name=update]').removeClass('d-none');//<--- show update cunsomer button

                        $thisForm.attr('perfect-onFormSuccess', 'fn_PurchaseIndex_initialLoad');

                        
                        var netamount = $thisForm.find('[name="NetAmount"]').val();
                        var amtWords = amtInWords(netamount);
                        
                    });
                    
                }
            });
        };
        var edits;
        var tableOptionsTemp2 = {
            iconButton: {
                buttons: [
                    {
                        icon: "fa fa-trash btnPerfectGridDelete",
                        action: function () {
                            let savedData = $(this).closest('tr').data('pData')

                            let $thistbl = $(this).closest('table');
                            let table = $thistbl.DataTable();
                            table.destroy();
                            if ($(this).closest('tbody').find('tr').length > 1) {
                                $(this).closest('tr').remove();
                                pft_table_slreset($thistbl);
                                //$thistbl.dataTable({ paging: true });
                            }
                            else {
                                $thistbl.remove();
                            }
                            debugger
                            CalculateTotal(this, 1);
                            RoundOffCalc(this, 1);
                            RemoveTaxArray(this, savedData.UID);
                        }
                    },
                    {
                        icon: "fa fa-pencil btnPerfectGridEdit",
                        action: function () {
                            let savedData = $(this).closest('tr').data('pData')

                            let $tablecontainer = $(this).closest('[perfect-tempTable]');
                            let tableKey = $tablecontainer.attr('perfect-tempTable');
                            let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                            //index attribute name in table row
                            let indexname = tableKey + 'index';
                            //index number in table row
                            let rindex = $(this).closest('tr').attr(indexname);
                            $tablecontainer.attr('perfect-tempTable-action', rindex);

                            console.log('EditclickTABLE', savedData);
                            //filling data in available inputs
                            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                                let $thisNode = $(this);
                                let pf_name = $thisNode.attr('name');
                                if ($thisNode.is('select')) {

                                    $thisNode.val(savedData[pf_name]).selectpicker('refresh');
                                }
                                else if ($thisNode.is('input')) {

                                    if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                        $thisNode.prop('checked', savedData[pf_name]);
                                    }
                                    else {
                                        $thisNode.val(savedData[pf_name]);
                                    }

                                }
                                else {
                                    $thisNode.val(savedData[pf_name]);
                                }

                                saleprice($tablecontainer); Discountcalculation($tablecontainer); decimalpnt($tablecontainer, 'NETPurchase', 3);
                            });

                            

                        }
                    },
                ]
            },
            onlyShowColumn: ['ProName', 'UnitID_d', 'PpdBarCode', 'PpdQRCode', 'PpdQuantity', 'PpdActualQuantity', 'PpdRate', 'PpdpurDis', 'NetPurchase', 'TaxAmount'],
            hideColumn: ["UnitID", "PpdShortage", "Ppdless", "PpdFreeQuantity", "PpdpurDiscper", "PpdpurDis", "PpdDisper", "PpdDiscount", "PpdProPer", "PpdProAmnt", 'ProductID','IncludeTax'],
            serialNo: true,
            renameHeader: {
                "PpdQuantity": "Quantity", "PpdRate": "Pur Rate", "PpdActualQuantity": "Act Qty", "PpdBarCode": "BarCode", "PpdQRCode": "QR Code", "ProName": "Product Name", "ProductID": "ProductID", "UnitID": "Unit", "TaxAmount": "Tax", "PpdpurDis": "Pur.Discount","PpdBatchNo":"Batch No",
                "PpdActualQuantity": "Act Qty", "PpdDisper": "Dis%", "PpdDiscount": "Discount", "PpdProPer": "PpdProPer", "PpdProAmnt": "Pro Amnt", "PpdFreeQuantity": "Free", "PpdRate": "Pur.Rate", "NetPurchase": "Net Purchase"
            },
            rowAttribute: [],
            isCheckType: []//,
            // isDateType: ["NextActionDate"]
        };

        function tempTabledateCreate(inputData) {

            let hide = ["ID_TaxType"];

            let $table1 = $('<table/>', { class: "table mb-0  table-striped  text-black" });
            let $thead = $('<thead/>', { class: "bg-primary text-white" })
            let $tbody = $('<tbody/>');

            if (inputData['data']) {
                //create heading
                console.log('in if data', inputData['data']);
                let rhead = $('<tr/>', { class: "btn-reveal-trigger" });
                $.each(inputData.data[0], function (key, value) {
                    console.log('in if data>head create', key + "|" + value);
                    if (!hide.includes(key)) {
                        rhead.append($('<th/>').text(key));
                    }
                });

                $thead.html(rhead.append('<th/>'));

                $.each(inputData.data, function (key, value) {
                    let rbody = $('<tr/>', { class: "btn-reveal-trigger" });
                    console.log('in if data>body create');
                    $.each(value, function (keyOne, valueOne) {
                        console.log('in if data>body>td create', keyOne + '|' + valueOne);

                        if (!hide.includes(keyOne)) {
                            if (typeof valueOne == "boolean") {
                                rbody.append($('<td/>', { 'perfect-tempTable-td-name': keyOne }).html($('<i/>', { class: (valueOne ? "fa fa-check text-success" : "fa fa-times text-danger") })))
                            }
                            else {
                                rbody.append($('<td/>', { 'perfect-tempTable-td-name': keyOne }).text(valueOne))
                            }
                        }

                    });

                    rbody.data({ 'pData': value });
                    console.log('rbody>', value)
                    $tbody.append(rbody.append($('<td/>', { class: "d-flex" }).append($('<button/>', { class: "btn btn-danger shadow btn-xs sharp mr-1" }).html($('<i/>', { class: 'fa fa-trash' }))
                        .click(function () {
                            if ($(this).closest('tbody').find('tr').length == 1) {
                                $(this).closest('table').remove();
                            } else {
                                $(this).closest('tr').remove();
                            }
                        }))));

                });
            }
            $table1.append($thead).append($tbody);

            return $table1;
        }

        function ProductdataCreate(inputData) {

            let hide = ["ID_Product"];
            let $table = $('<table/>', { class: "table mb-0  table-striped  text-black" });
            let $thead = $('<thead/>', { class: "bg-primary text-white" })
            let $tbody = $('<tbody/>');

            if (inputData['data']) {
                //create heading
                console.log('in if data', inputData['data']);
                let rhead = $('<tr/>', { class: "btn-reveal-trigger" });
                $.each(inputData.data[0], function (key, value) {
                    console.log('in if data>head create', key + "|" + value);
                    if (!hide.includes(key)) {
                        rhead.append($('<th/>').text(key));
                    }
                });

                $thead.html(rhead.append('<th/>'));

                $.each(inputData.data, function (key, value) {
                    let rbody = $('<tr/>', { class: "btn-reveal-trigger" });
                    console.log('in if data>body create');
                    $.each(value, function (keyOne, valueOne) {
                        console.log('in if data>body>td create', keyOne + '|' + valueOne);

                        if (!hide.includes(keyOne)) {
                            if (typeof valueOne == "boolean") {
                                rbody.append($('<td/>', { 'perfect-ProductType-td-name': keyOne }).html($('<i/>', { class: (valueOne ? "fa fa-check text-success" : "fa fa-times text-danger") })))
                            }
                            else {
                                rbody.append($('<td/>', { 'perfect-ProductType-td-name': keyOne }).text(valueOne))
                            }
                        }

                    });

                    rbody.data({ 'pData': value });
                    console.log('rbody>', value)
                    $tbody.append(rbody.append($('<td/>', { class: "d-flex" }).append($('<button/>', { class: "btn btn-danger shadow btn-xs sharp mr-1" }).html($('<i/>', { class: 'fa fa-trash' }))
                        .click(function () {
                            if ($(this).closest('tbody').find('tr').length == 1) {
                                $(this).closest('table').remove();
                            } else {
                                $(this).closest('tr').remove();
                            }
                        }))));

                });
            }
            $table.append($thead).append($tbody);

            return $table;
        }

        function Deleteproduct() {
            let $row = $(this).closest('tr');

            let Saveddata = $row.data('pData');
            console.log("Saved data", Saveddata);
            let inputData = {
                ProductID: Saveddata.ProductID
            };

            let confirmationDialogBoxOption = { heading: "Are you Sure?", body: "Do you want to remove Invoice" + Saveddata.ProdName+" ?", cancel: "No", confirm: "Yes" };
            var res = ConfirmDialog(confirmationDialogBoxOption);

            res.then(function (ret) {
                if (ret) {
                    $.ajax({
                        url: "@Url.Action("DeleteProductInfo", "Product")",
                        type: "POST",
                        data: JSON.stringify(inputData),
                        contentType: "application/json",
                        success: function (data) {

                            if (data.Process.IsProcess) {

                                $.each(data.Process.Message, function (key, value) {
                                    //toastr.success(value, "Success");
                                    NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                                });
                            }
                            else {
                                $.each(data.Process.Message, function (key, value) {
                                   // toastr.warning(value, "Error");
                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                });
                            }
                            //row.remove();
                            //$(row).closest('table').reload()
                            loadCustomerList()
                        }
                    });


                }
                else {
                    //toastr.warning("Clicked no in comfirmation box", "Confirmation Box in table");
                    NotificationMessage({ 'message': 'No option selected' });
                }

            });
        };
                function fn_ProductIndex_deleteCustomer() {
             let $row = $(this).closest('tr');
            let Saveddata = $row.data('pData');


            console.log('Delete function', Saveddata)

            //get reason list-

               $.ajax({
                   url: "@Url.Action("GetProductReasonList", "Product")",
                   type: "GET",
                  // data: inputReason,
                   contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                   success: function (ajaxReasonOutput) {
                       if (ajaxReasonOutput.Process.IsProcess) {

                           console.log('Inside res ajax', ajaxReasonOutput.Data)

                           let confirmationDialogBoxOption = { heading: "Are you Sure?", body: "Do you want to remove  ?", cancel: "No", confirm: "Yes", reason: ajaxReasonOutput.Data };
                           var confirmBoxObj = ConfirmDialog(confirmationDialogBoxOption);

                            confirmBoxObj.then(function (selectedOption) {
                                if (selectedOption) {
                                     console.log('Product> delete function:',selectedOption)

                                    let inputData = {
                                        __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                                        ProductID: Saveddata['ProductID'],
                                        ReasonID: selectedOption
                                    };
                                    $.ajax({
                                        url: "@Url.Action("Deleteproduct", "Product")",
                                        type: "POST",
                                        data: inputData,
                                        contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                                        success: function (ajaxOutput) {
                                            if (ajaxOutput.Process.IsProcess) {

                                                let table = $row.closest('table').DataTable()
                                                table.row($row).remove().draw();

                                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                                    NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                                                });

                                                //removing a data


                                            }
                                            else {
                                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                                });
                                            }
                                        }
                                    });
                                }
                                else {
                                    NotificationMessage({ 'message': 'No option selected' });
                                }

                            });


                        }
                        else {



                        }
                   }

               });




        };


        function deletePurchase() {
        let $row = $(this).closest('tr');


            let Saveddata = $row.data('pData');

            $('.dataTable tr').removeClass("SelectForDelete");
            $(this).closest('tr').addClass('SelectForDelete');

        console.log("Saved data", Saveddata);
        $.ajax({
            url: "@Url.Action("GetPaymentMethodDeleteReasonList", "PaymentMethod")",
            type: "GET",
            // data: inputReason,
            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            success: function (ajaxReasonOutput) {
                if (ajaxReasonOutput.Process.IsProcess) {

                    console.log('Inside res ajax', ajaxReasonOutput.Data)

                    //alert(Saveddata.ID_Purchase);
                    //delete code

                    let confirmationDialogBoxOption = { heading: "Are you Sure?", body: "Do you want to Delete Invoice No: "+"<b>" + Saveddata.PurInvoiceNo + " ?", cancel: "No", confirm: "Yes", reason: ajaxReasonOutput.Data };
                    var res = ConfirmDialog(confirmationDialogBoxOption);

                    

                    res.then(function (ret) {
                        if (ret) {

                            let inputData = {
                                __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                                PurchaseID: Saveddata.ID_Purchase,
                                ReasonID: ret
                            };


                            $.ajax({
                                url: "@Url.Action("DeletePurchase", "Purchase")",
                                type: "POST",
                                data: inputData,
                                contentType: 'application/x-www-form-urlencoded;charset=utf-8',
                                success: function (ajaxOutput) {
                                    $formContainer.load('@Url.Action("LoadPurchaseForm", "Purchase")', function () {
                                        if (ajaxOutput.Process.IsProcess) {

                                            $.each(ajaxOutput.Process.Message, function (key, value) {

                                                NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': 'Deleted Successfully' });
                                            });

                                            //removing a data
                                            let table = $row.closest('table').DataTable()
                                            table.row($row).remove().draw();
                                        }
                                        else {
                                            $.each(ajaxOutput.Process.Message, function (key, value) {

                                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });

                                                $('.dataTable tr').removeClass("SelectForDelete");
                                            });
                                        }
                                    });
                                }
                            });


                        }
                        else {

                            NotificationMessage({ 'message': 'No option selected' });
                        }

                    });

                    //-----delete code

                }
            }
        });

    };




        var validationMessage = {
            'InvoiceNo': {
                'required': 'Enter Invoice No',
                
            },
           
            'SupplierName': {
                'required': 'Select Supplier',
            },

            'SupplierID': {
                'required': 'Select Supplier',
            },
             'DepartmentName': {
                'required': 'Select DepartMent',
            },
            'DepartmentID': {
                'required': 'Select DepartMent',
            },
            'Supplier': {
                'required':'Please Select Import From',
            },
            'NetAmount': {
               
                'min': 'Invalid Amount',
            },
           
            
            //'Discount': {
            //    'required': 'Discount Amount Should not be greater than Bill Total',

            //},
        };


        function amtInWords(amount) {

            var decAmount = amount;
            var sUnits = new Array(20);
            var sTens = new Array(8);
            var sHundreds = new Array(6);
            var sAmount;
            var i, iLenAmount, iDecPart, iIntegerPart;

            sUnits[1] = '';
            sUnits[2] = 'One';
            sUnits[3] = 'Two';
            sUnits[4] = 'Three';
            sUnits[5] = 'Four';
            sUnits[6] = 'Five';
            sUnits[7] = 'Six';
            sUnits[8] = 'Seven';
            sUnits[9] = 'Eight';
            sUnits[10] = 'Nine';
            sUnits[11] = 'Ten';
            sUnits[12] = 'Eleven';
            sUnits[13] = 'Twelve';
            sUnits[14] = 'Thirteen';
            sUnits[15] = 'Fourteen';
            sUnits[16] = 'Fifteen';
            sUnits[17] = 'Sixteen';
            sUnits[18] = 'Seventeen';
            sUnits[19] = 'Eighteen';
            sUnits[20] = 'Ninteen';
            sTens[1] = 'Twenty';
            sTens[2] = 'Thirty';
            sTens[3] = 'Forty';
            sTens[4] = 'Fifty';
            sTens[5] = 'Sixty';
            sTens[6] = 'Seventy';
            sTens[7] = 'Eighty';
            sTens[8] = 'Ninety';
            sHundreds[1] = 'Hundred';
            sHundreds[2] = 'Thousand';
            sHundreds[3] = 'Lakh';
            sHundreds[4] = 'Crore';
            if (decAmount == 10000000000000) {
                decAmount = 9999999999999.99;
            }
            if (decAmount == 0) {
                return "";
            }

            iDecPart = (decAmount - Math.round(decAmount)) * 100;
            iDecPart = Math.round(iDecPart);

            //Because Math.round results .50,.52,.53.......98,.99 in negative values

            if (iDecPart < 0) {
                iDecPart = 100 + iDecPart;
            }

            if (iDecPart == 0) {
                decAmount = decAmount;
            }
            else {
                decAmount = Math.round(decAmount - (iDecPart / 100));
            }

            iLenAmount = ((String)(decAmount)).length;

            if (iLenAmount == 1) {
                var index = parseInt(decAmount) + 1;
                sAmount = sUnits[index];
            }
            else {
                for (i = iLenAmount; i > 0; i--) {
                    if (i == 13 || i == 12) {
                        iIntegerPart = parseInt(decAmount / 100000000000);
                        decAmount = parseInt(decAmount % 100000000000);
                        if (iIntegerPart == 0) {
                            sAmount = sAmount;
                        }
                        else {
                            if (iIntegerPart < 20) {
                                sAmount = sUnits[iIntegerPart + 1] + " " + sHundreds[6] + " ";
                            }
                            else {
                                sAmount = sTens[parseInt(iIntegerPart / 10) - 1] + " " + sUnits[(iIntegerPart - parseInt(iIntegerPart / 10) * 10) + 1] + " " + sHundreds[6] + " "
                            }
                        }
                    }
                    else if (i == 11 || i == 10) {
                        iIntegerPart = parseInt(decAmount / 1000000000);
                        decAmount = parseInt(decAmount % 1000000000);
                        if (iIntegerPart == 0) {
                            sAmount = sAmount;
                        }
                        else {
                            if (iIntegerPart < 20) {
                                if (sAmount == null) {
                                    sAmount = sUnits[iIntegerPart + 1] + " " + sHundreds[5] + " ";
                                }
                                else {
                                    sAmount = sAmount + " " + sUnits[iIntegerPart + 1] + " " + sHundreds[5] + " ";
                                }
                            }
                            else {
                                if (sAmount == null) {
                                    sAmount = sTens[parseInt(iIntegerPart / 10) - 1] + " " + sUnits[(iIntegerPart - parseInt(iIntegerPart / 10) * 10) + 1] + " " + sHundreds[5] + " ";
                                }
                                else {
                                    sAmount = sAmount + " " + sTens[parseInt(iIntegerPart / 10) - 1] + " " + sUnits[(iIntegerPart - parseInt(iIntegerPart / 10) * 10) + 1] + " " + sHundreds[5] + " ";
                                }
                            }
                        }
                    }
                    else if (i == 9 || i == 8) {
                        iIntegerPart = parseInt(decAmount / 10000000);
                        decAmount = parseInt(decAmount % 10000000);
                        if (iIntegerPart == 0) {
                            sAmount = sAmount;
                        }
                        else {
                            if (iIntegerPart < 20) {
                                if (sAmount == null) {
                                    sAmount = sUnits[iIntegerPart + 1] + " " + sHundreds[4] + " ";
                                }
                                else {
                                    sAmount = sAmount + " " + sUnits[iIntegerPart + 1] + " " + sHundreds[4] + " ";
                                }
                            }
                            else {
                                if (sAmount == null) {
                                    sAmount = sTens[parseInt(iIntegerPart / 10) - 1] + " " + sUnits[(iIntegerPart - parseInt(iIntegerPart / 10) * 10) + 1] + " " + sHundreds[4] + " ";
                                }
                                else {
                                    sAmount = sAmount + " " + sTens[parseInt(iIntegerPart / 10) - 1] + " " + sUnits[(iIntegerPart - parseInt(iIntegerPart / 10) * 10) + 1] + " " + sHundreds[4] + " ";
                                }
                            }
                        }
                    }
                    else if (i == 7 || i == 6) {
                        iIntegerPart = parseInt(decAmount / 100000);
                        decAmount = (decAmount % 100000);
                        if (iIntegerPart == 0) {
                            sAmount = sAmount;
                        }
                        else {
                            if (iIntegerPart < 20) {
                                if (sAmount == null) {
                                    sAmount = sUnits[iIntegerPart + 1] + " " + sHundreds[3] + " ";
                                }
                                else {
                                    sAmount = sAmount + " " + sUnits[iIntegerPart + 1] + " " + sHundreds[3] + " ";
                                }
                            }
                            else {
                                if (sAmount == null) {
                                    sAmount = sTens[parseInt(iIntegerPart / 10) - 1] + " " + sUnits[(iIntegerPart - parseInt(iIntegerPart / 10) * 10) + 1] + " " + sHundreds[3] + " ";
                                }
                                else {
                                    sAmount = sAmount + " " + sTens[parseInt(iIntegerPart / 10) - 1] + " " + sUnits[(iIntegerPart - parseInt(iIntegerPart / 10) * 10) + 1] + " " + sHundreds[3] + " ";
                                }
                            }
                        }
                    }
                    else if (i == 5 || i == 4) {
                        iIntegerPart = parseInt(decAmount / 1000);
                        decAmount = (decAmount % 1000);
                        if (iIntegerPart == 0) {
                            sAmount = sAmount;
                        }
                        else {
                            if (iIntegerPart < 20) {
                                if (sAmount == null) {
                                    sAmount = sUnits[iIntegerPart + 1] + " " + sHundreds[2] + " ";
                                }
                                else {
                                    sAmount = sAmount + " " + sUnits[iIntegerPart + 1] + " " + sHundreds[2] + " ";
                                }
                            }
                            else {
                                if (sAmount == null) {
                                    sAmount = sTens[parseInt(iIntegerPart / 10) - 1] + " " + sUnits[(iIntegerPart - parseInt(iIntegerPart / 10) * 10) + 1] + " " + sHundreds[2] + " ";
                                }
                                else {
                                    sAmount = sAmount + " " + sTens[parseInt(iIntegerPart / 10) - 1] + " " + sUnits[(iIntegerPart - parseInt(iIntegerPart / 10) * 10) + 1] + " " + sHundreds[2] + " ";
                                }
                            }
                        }
                    }
                    else if (i == 3) {
                        iIntegerPart = parseInt(decAmount / 100);
                        decAmount = (decAmount % 100);
                        if (iIntegerPart == 0) {
                            sAmount = sAmount;
                        }
                        else {
                            var index;
                            index = parseInt(iIntegerPart) + 1;
                            if (sAmount == null) {
                                sAmount = sUnits[index] + " " + sHundreds[1] + " ";
                            }
                            else {
                                sAmount = sAmount + " " + sUnits[index] + " " + sHundreds[1] + " ";
                            }
                        }
                    }
                    else if (i == 2) {
                        decAmount = parseInt(eval(decAmount));
                        if (decAmount < 20) {
                            var index = parseInt(decAmount) + 1;
                            if (sAmount == null) {
                                sAmount = sUnits[index];
                            }
                            else {
                                sAmount = sAmount + " " + sUnits[index];
                            }
                        }
                        else {
                            var a = parseInt(((decAmount / 10) - 1));
                            var b = (decAmount % 10) + 1;
                            if (sAmount == null) {
                                sAmount = sTens[a] + " " + sUnits[b];
                            }
                            else {
                                sAmount = sAmount + " " + sTens[a] + " " + sUnits[b];
                            }
                        }
                    }
                }
            }
            if (iDecPart == 0) {
                sAmount = "Rs. " + sAmount;
            }
            else if (sAmount == "") {
                sAmount = "Paise ";
            }
            else {
                sAmount = "Rs. " + sAmount + " And Paise";
            }

            if (iDecPart < 20) {
                sAmount = sAmount + " " + sUnits[iDecPart + 1] + " ";
            }
            else {
                var fi = parseInt(((iDecPart / 10) - 1));
                var fii = parseInt((iDecPart % 10)) + 1;
                sAmount = sAmount + " " + sTens[fi] + " " + sUnits[fii] + " ";
            }

            sAmount = sAmount + "Only";

            return sAmount;

        }



    </script>



}

