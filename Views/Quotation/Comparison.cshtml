@{
    ViewBag.Title = "Quotation-Outward";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-lg-12" id="jq_QuotationIndex_formContainer">
        </div>
    </div>
</div>

@section scripts{

<script type="text/javascript">


        var validationMessage = {
            'QuotationDate': {
                'required': 'Please select quotation date',
                'max': jQuery.validator.format('Please Enter a Valid Date')
            }
        };


        const $formContainer = $('#jq_QuotationIndex_formContainer');
        // Initial load functions
        $(document).ready(function () {
           fn_QuotationIndex_InitialLoad();

        });
    var QuotationComparisonTransMode = '';
        function fn_QuotationIndex_InitialLoad() {
           // getSessionValue("BTQgLv+ebY48FN9pEezgnyVrVumuVVzPVnoCFOjqIsU=", function (result) {
                QuotationComparisonTransMode = '@ViewBag.TransMode';
                fn_loadQuotationForm();
           // });
    

              @*@if (ViewBag.PagedAccessRights.UsrrlMsView)
              {
                 <text> fn_loadQuotationList(this); </text>
              }*@
        }

        // Fucntion to load Quotation add form
        function fn_loadQuotationForm() {
            $formContainer.load('@Url.Action("LoadQuotationComparison", "Quotation")', function () {
                let $thisForm = $(this).find('[perfect-class="form"]');
                $thisForm.validate({ messages: validationMessage });
               // $thisForm.attr('perfect-onFormSuccess', 'fn_loadQuotationList');
                initFunctions($thisForm);
            });
        };

        function fn_loadQuotationList(ele)
        {
            let $sidemenu = $sideMenuOptions.body;
            let $thisForm = $(ele).closest('.testSearchBox');
            let SearchName = $thisForm.find('input').val();
            $sideMenuOptions.title.find('h4').text('Quotation List');
             let pageUrl = '@Url.Action("GetOutwardQuotationList", "Quotation")';
            $.ajax({
                url:pageUrl,
                type: "POST",
                data: { pageSize: 10, pageIndex: 0, Name: SearchName },
                dataType: "json",
                contentType: "application/x-www-form-urlencoded; charset=utf-8",
                success: function (ajaxOutput) {
                          if (ajaxOutput.Process.IsProcess) {
                              $sidemenu.find('.jq_sidemenu_title').text("Quotation List");
                              $sidemenu.empty().append('<div class="d-flex justify-content-end mb-2 position-relative"><div class="col-md-6 position-absolute top-1 z-index"> <div class="input-group testSearchBox"><input type="text" class="form-control " name="SearchName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input"  /><div class="input-group-append"><button id="addcountry-jq-searchButton6" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="fn_QuotationIndex_InitialLoad(this)"></button></div></div></div></div>', $('<div/>', {class:"col-md-12 table_temp_class"}).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))
                              let $table = $sidemenu.find('table');
                              $table.dataTable({
                                  "serverSide": true,
                                  "processing": true,
                                  "lengthMenu": [10, 15, 20, 25, 50, 100],
                                  "searching": false,
                                  "ordering": false,
                                  "deferLoading": ajaxOutput.totalrecord,
                                  "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,
                                  "pageLength": ajaxOutput.pageSize,
                                  "recordsFiltered": ajaxOutput.pageSize,
                                  "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize }, tableOptions, $table)
                              });
                          }
                          else
                          {
                            if (ajaxOutput.Process.Status = "NoData") {
                                $sidemenu.find('.jq_sidemenu_title').text("Quotation List");

                                $sidemenu.empty().append('<div class="d-flex justify-content-end mb-2"><div class="col-md-6 position-absolute top-1 z-index"> <div class="input-group testSearchBox"><input type="text" class="form-control " name="SearchName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input"  /><div class="input-group-append"><button id="addcountry-jq-searchButton6" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="fn_QuotationIndex_InitialLoad(this)"></button></div></div></div></div>', $('<div/>', { class: "col-md-12 table_temp_class" }).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))

                                let $table = $sidemenu.find('table');
                                $table.dataTable({
                                    "serverSide": true,
                                    "processing": true,
                                    "lengthMenu": [0],
                                    "searching": false,
                                    "ordering": false,
                                    "deferLoading": ajaxOutput.totalrecord,
                                    "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,
                                    "pageLength": ajaxOutput.pageSize,
                                    "recordsFiltered": ajaxOutput.pageSize,
                                    "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize }, tableOptions, $table)
                                });
                            }
                            else {
                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                });
                            }
                          }
            },
            complete: function () {

            }
        });
        }

    function returnajaxPagination(ajaxInfo, tableOptions, tableid) {
        return {
            url: ajaxInfo.apiurl,
            type: "post",
            data: function () {
                var info = tableid.DataTable().page.info();
                let input = { pageSize: info.length, pageIndex: info.page };
                if (ajaxInfo.searchkey) {
                    input["Name"] = ajaxInfo.searchkey;
                }
                return input
            },
            dataType: "json",
            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            success: function (dtajaxOutput) {
                let table = tableid.DataTable();
                table.destroy();
                pft_table_newTableBody(tableid, dtajaxOutput.Data, tableOptions);
                tableid.dataTable({
                    "serverSide": true,
                    "processing": true,
                    "lengthMenu": [10, 15, 20, 25, 50, 100],
                    "searching": false,
                    "ordering": false,
                    "deferLoading": dtajaxOutput.totalrecord,
                    "displayStart": dtajaxOutput.pageIndex * dtajaxOutput.pageSize,
                    "pageLength": dtajaxOutput.pageSize,
                    "recordsFiltered": dtajaxOutput.pageSize,
                    "ajax": returnajaxPagination(ajaxInfo, tableOptions, tableid)
                })

            },

        }
    }

    var tableOptions = {
        dropdown: {
            buttons: [
                @if (ViewBag.PagedAccessRights.UsrrlMsView)
                {
                    <text> { displayName: "View", action: fn_editQuotation },</text>
                }
                { type: "divider" },
                @if (ViewBag.PagedAccessRights.UsrrlMsDel)
                 {
                     <text> { displayName: "Delete", action: fn_deleteQuotation },</text>
                  }
                ],
            class: "btn btn-success light sharp"
        },
        onlyShowColumn: ["SlNo", "QuoNO", "QuoDate", "QuoNetAmount", "Contact_Name", "Contact_Mob"],
        hideColumn: ["ID_Quotation", "QuoMode"],
        rowClickAction: fn_editQuotation,
        renameHeader: { "SlNo": "SL NO", "QuoNO": "Quotation No", "QuoDate": "Date", "Contact_Name": "Contact Name", "Contact_Mob": "Mobile No", "QuoNetAmount": "Amount" },
        isDateType: ["QuoDate"]
    };

</script>



}
