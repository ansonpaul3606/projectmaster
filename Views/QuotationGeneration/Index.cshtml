
@{
    ViewBag.Title = "QuotationGeneration";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-lg-12" id="jq_QuotationGenIndex_formContainer">

        </div>
    </div>
</div>

@section scripts{

    <script type="text/javascript">


        var validationMessage = {
            'QuoDate': {
                'required': 'Please select quotation date',
                'max': jQuery.validator.format('Future Date Not Allowed'),
                'min': jQuery.validator.format('Please Enter a Valid Date')
            },
          'QuoExpireDate': {
                'required': 'Please select quotation expired date',
                'date': 'Invalid Date',
              'max': jQuery.validator.format('Please Enter a Valid Date'),
              'min': jQuery.validator.format('Only Allow Future Date')
            }
        };


        const $formContainer = $('#jq_QuotationGenIndex_formContainer');
        const LastIDSessionKeyQG = 'QuotationGenrationLastID';
        var QuotationGenrationTransMode = '';
        var LastID_QuotationGenration;
        // Initial load functions
        $(document).ready(function () {
            fn_QuotationGenIndex_InitialLoad();

        });
        



        function fn_QuotationGenIndex_InitialLoad() {   

          //  getSessionValue("BTQgLv+ebY48FN9pEezgnwiF0mrhdbLadBwMc8ITK51RcEvPFQfSNQqsaRwr6dHV", function (result) {
                QuotationGenrationTransMode = '@ViewBag.TransMode';
                
                 @if (ViewBag.PagedAccessRights.UsrrlMsView)
              {


                 <text> fn_loadQuotationList(this, fn_loadQuotationGenForm); </text>
              }
            //});


               
                fn_loadQuotationGenForm();
         
        
        }


        // Fucntion to load Sales order add form
        function fn_loadQuotationGenForm() {
            $formContainer.load('@Url.Action("LoadFormQuotationGeneration", "QuotationGeneration")?mtd=@ViewBag.mtd', function () {
                let $thisForm = $(this).find('[perfect-class="form"]');
                $thisForm.find('[name="QuoDate"]').val(moment().format('YYYY-MM-DD'));    
                $thisForm.find('[name="QuoExpireDate"]').val(moment().add(1, 'months').format('YYYY-MM-DD')); 
                var today = new Date().toISOString().split('T')[0];
                document.getElementsByName("QuoExpireDate")[0].setAttribute('min', today);
                document.getElementsByName("QuoDate")[0].setAttribute('max', today);
                $thisForm.validate({ messages: validationMessage });
                $thisForm.attr('perfect-onFormSuccess', 'fn_loadQuotationList');
             
                initFunctions($thisForm);
                getNumberGeneration(QuotationGenrationTransMode, 0, $thisForm, 'QuotationNo')
                
                getSessionValue(LastIDSessionKeyQG, function (result) {
                    LastID_QuotationGenration = result;                   
                });
            });
        }

        function fn_loadQuotationList(ele,callback)
        {
           
            let $sidemenu = $sideMenuOptions.body;

            let $thisForm = $(ele).closest('.testSearchBox');
            let SearchName = $thisForm.find('input').val();

            if (SearchName == undefined) {
                SearchName = "";
            }
           
            $sideMenuOptions.title.find('h4').text('@ViewBag.PageTitles'+' '+'List');

             let pageUrl = '@Url.Action("GetQuotationGenerationList", "QuotationGeneration")';
            $.ajax({
                url:pageUrl,
                type: "POST",
                data: { pageSize: 10, pageIndex: 0, Name: SearchName, TransModes: QuotationGenrationTransMode },
                dataType: "json",
                contentType: "application/x-www-form-urlencoded; charset=utf-8",
                success: function (ajaxOutput) {
                    if (ajaxOutput.Process.IsProcess) {

                        setSessionValue(LastIDSessionKeyQG, ajaxOutput.Data[0]["LastID"]);

                              $sidemenu.find('.jq_sidemenu_title').text("Quotation List");
                        $sidemenu.empty().append('<div class="d-flex justify-content-end mb-2 position-relative"><div class="col-md-6 position-absolute top-1 z-index"> <div class="input-group testSearchBox"><input type="text" class="form-control " name="SearchName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input"  /><div class="input-group-append"><button id="addcountry-jq-searchButton6" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="fn_loadQuotationList(this)"></button></div></div></div></div>', $('<div/>', {class:"col-md-12 table_temp_class"}).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))
                              let $table = $sidemenu.find('table');
                              $table.dataTable({
                                  "serverSide": true,
                                  "processing": true,
                                  "lengthMenu": [10, 15, 20, 25, 50, 100],
                                  "searching": false,
                                  "ordering": false,
                                  "deferLoading": ajaxOutput.totalrecord,
                                  "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,
                                  "pageLength": ajaxOutput.pageSize,
                                  "recordsFiltered": ajaxOutput.pageSize,
                                  "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize, searchkey: SearchName, TransModes: QuotationGenrationTransMode}, tableOptions, $table)
                              });
                          }
                          else
                          {
                            if (ajaxOutput.Process.Status = "NoData") {
                                $sidemenu.find('.jq_sidemenu_title').text("Quotation List");
                                $sidemenu.empty().append('<div class="d-flex justify-content-end mb-2"><div class="col-md-6 position-absolute top-1 z-index"> <div class="input-group testSearchBox"><input type="text" class="form-control " name="SearchName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input"  /><div class="input-group-append"><button id="addcountry-jq-searchButton6" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="fn_loadQuotationList(this)"></button></div></div></div></div>', $('<div/>', { class: "col-md-12 table_temp_class" }).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))
                                let $table = $sidemenu.find('table');
                                $table.dataTable({
                                    "serverSide": true,
                                    "processing": true,
                                    "lengthMenu": [0],
                                    "searching": false,
                                    "ordering": false,
                                    "deferLoading": ajaxOutput.totalrecord,
                                    "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,
                                    "pageLength": ajaxOutput.pageSize,
                                    "recordsFiltered": ajaxOutput.pageSize,
                                    "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize, TransModes: QuotationGenrationTransMode }, tableOptions, $table)
                                });
                            }
                            else {
                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                });
                            }
                          }
            },
            complete: function () {
                if (callback) {


                    callback();
                }
            }
        });
        }

    function returnajaxPagination(ajaxInfo, tableOptions, tableid) {
        return {
            url: ajaxInfo.apiurl,
            type: "post",
            data: function () {
                var info = tableid.DataTable().page.info();
                let input = { pageSize: info.length, pageIndex: info.page, TransModes: ajaxInfo.TransModes };
                if (ajaxInfo.searchkey) {
                    input["Name"] = ajaxInfo.searchkey;
                }
                return input
            },
            dataType: "json",
            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            success: function (dtajaxOutput) {
                let table = tableid.DataTable();
                table.destroy();
                pft_table_newTableBody(tableid, dtajaxOutput.Data, tableOptions);
                tableid.dataTable({
                    "serverSide": true,
                    "processing": true,
                    "lengthMenu": [10, 15, 20, 25, 50, 100],
                    "searching": false,
                    "ordering": false,
                    "deferLoading": dtajaxOutput.totalrecord,
                    "displayStart": dtajaxOutput.pageIndex * dtajaxOutput.pageSize,
                    "pageLength": dtajaxOutput.pageSize,
                    "recordsFiltered": dtajaxOutput.pageSize,
                    "ajax": returnajaxPagination(ajaxInfo, tableOptions, tableid)
                })

            },

        }
    }

    var tableOptions = {
        dropdown: {
            buttons: [
                @if (ViewBag.PagedAccessRights.UsrrlMsView)
                {
                    <text> { displayName: "View", action: fn_editQuotation },</text>
                }
                { type: "divider" },
                @if (ViewBag.PagedAccessRights.UsrrlMsDel)
                 {
                     <text> { displayName: "Delete", action: fn_deleteQuotation },</text>
                 }
                ],
            class: "btn btn-success light sharp"
        },
        onlyShowColumn: ["SlNo", "QuoNO", "QuoDate", "QuoExpireDate"],
        hideColumn: ["ID_QuotationGen"],
        rowClickAction: fn_editQuotation,
        renameHeader: { "SlNo": "SL NO", "QuoNO": "Quotation No", "QuoDate": "Quotation Date", "QuoExpireDate": "Expairy Date"},
        isDateType: ["QuoDate","QuoExpireDate"]
    };



        function fn_editQuotation()
        {
            let row = $(this).closest('tr');
            let Saveddata = row.data('pData');

            $('.dataTable tr').removeClass("SelectForDelete");
            $(this).closest('tr').addClass('SelectForDelete');

            let inputData =
            {
                __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                ID_QuotationGen: Saveddata.ID_QuotationGen
            };

             $.ajax({
                url: '@Url.Action("GetQuotationGenerationItemList", "QuotationGeneration")',
                        type: "POST",
                        data: inputData,
                        dataType: "json",
                        contentType: 'application/x-www-form-urlencoded;charset=utf-8',
                        success: function (ajaxOutput)
                        {
                            if (ajaxOutput.Process.IsProcess)
                            {
                                $sideMenuOptions.close();
                                $formContainer.load("@Url.Action("LoadFormQuotationGeneration", "QuotationGeneration")?mtd=@ViewBag.mtd", function () {

                                    let $thisForm = $(this).find('[perfect-class="form"]');
                                    $(this).find('[perfect-class=formTitle]').text('update')
                                    $thisForm.find('[name="ID_QuotationGen"]').val(Saveddata.ID_QuotationGen);
                                     $thisForm.find('[name="QuotationNo"]').val(Saveddata.QuoNO);
                                     $thisForm.find('[name="QuoDate"]').val(moment(Saveddata.QuoDate).format('YYYY-MM-DD'));
                                    $thisForm.find('[name="QuoExpireDate"]').val(moment(Saveddata.QuoExpireDate).format('YYYY-MM-DD'));
                                  var today = new Date().toISOString().split('T')[0];
                                    document.getElementsByName("QuoExpireDate")[0].setAttribute('min', today);
                                     $thisForm.find('[name="QuoTerms"]').val(Saveddata.QuoTerms);

                                    $thisForm.data({ pData: ajaxOutput.Data[0] });

                                    fn_fillQuotationItem($thisForm, 'Quotation', ajaxOutput.Data, tableOptionsQuotationItem)

                                    $thisForm.find('[perfect-tempTable="Quotation"]').find('table').dataTable({ searching: false, paging: false, ordering: false, info: false });

                                    $thisForm.validate({ messages: validationMessage });
                                    $thisForm.attr('perfect-onFormSuccess', 'fn_loadQuotationList');
                                    $sideMenuOptions.close();
                                    $thisForm.find('button[name=add]').addClass('d-none');
                                    $thisForm.find('button[name=update]').removeClass('d-none');
                                   
                                });
                            }
                            else {
                                $.each(ajaxOutput.Process.Message, function (key, value)
                                {
                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                    $('.dataTable tr').removeClass("SelectForDelete");
                                });
                            }
                },

            });
        }




        function fn_deleteQuotation()
        {
             let $row = $(this).closest('tr');
            let Saveddata = $row.data('pData');

            $('.dataTable tr').removeClass("SelectForDelete");
            $(this).closest('tr').addClass('SelectForDelete');

            $.ajax({
                url: "@Url.Action("GetQuotationGenerationReasonList", "QuotationGeneration")",
                type: "GET",
                contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                success: function (ajaxReasonOutput) {
                    if (ajaxReasonOutput.Process.IsProcess) {
                        let confirmationDialogBoxOption = { heading: "Are you Sure?", body: "Do you want to remove " + Saveddata.QuoNO + " ?",cancel: "No", confirm: "Yes", reason: ajaxReasonOutput.Data };
                        var confirmBoxObj = ConfirmDialog(confirmationDialogBoxOption);
                        confirmBoxObj.then(function (selectedOption) {
                            if (selectedOption) {
                                let inputData = {
                                    __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                                    ID_QuotationGen: Saveddata['ID_QuotationGen'],
                                    FK_Reason: selectedOption
                                };
                                $.ajax({
                                    url: "@Url.Action("DeleteQuotationGeneration", "QuotationGeneration")",
                                    type: "POST",
                                    data: inputData,
                                    contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                                    success: function (ajaxOutput) {
                                        if (ajaxOutput.Process.IsProcess) {
                                            let table = $row.closest('table').DataTable()
                                            table.row($row).remove().draw();

                                            $.each(ajaxOutput.Process.Message, function (key, value) {
                                                NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': 'Deleted Successfully' });
                                            });
                                            fn_QuotationGenIndex_InitialLoad();
                                            $('.dataTable tr').removeClass("SelectForDelete");
                                        }
                                        else {
                                            $.each(ajaxOutput.Process.Message, function (key, value) {
                                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                            });
                                        }
                                    }
                                });
                            }
                            else {
                                NotificationMessage({ 'message': 'No option selected' });
                               $('.dataTable tr').removeClass("SelectForDelete");
                            }
                        });
                    }
                    else {
                    }
                }


            });

        };

        var tableOptionsQuotationItem = {
            iconButton: {
                buttons: [
                  
                    {
                        icon: "fa fa-pencil btnPerfectGridEdit",
                        action: function () {

                            let savedData = $(this).closest('tr').data('pData')

                            let $tablecontainer = $(this).closest('[perfect-tempTable]');
                            let tableKey = $tablecontainer.attr('perfect-tempTable');
                            let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                            let indexname = tableKey + 'index';
                            let rindex = $(this).closest('tr').attr(indexname);
                            $tablecontainer.attr('perfect-tempTable-action', rindex);
                            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                                let $thisNode = $(this);
                                let pf_name = $thisNode.attr('name');
                                if ($thisNode.is('select')) {

                                    $thisNode.val(savedData[pf_name]).selectpicker('refresh');
                                }
                                else if ($thisNode.is('input'))
                                {

                                        if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                            $thisNode.prop('checked', savedData[pf_name]);
                                        }
                                        else {
                                            $thisNode.val(savedData[pf_name]);
                                        }
                                }
                                else
                                {

                                    $thisNode.val(savedData[pf_name]);
                                }
                            });



                        }
                    },

                    {
                        icon: "fa fa-trash btnPerfectGridDelete",
                        action: function () {
                            let $thistbl = $(this).closest('table');
                            let table = $thistbl.DataTable();
                            table.destroy();
                            if ($(this).closest('tbody').find('tr').length > 1) {
                                $(this).closest('tr').remove();
                                pft_table_slreset($thistbl);
                                $thistbl.dataTable({ paging: true });
                            }
                            else {
                                $thistbl.remove();
                            }
                        }
                    },
                ]
            },
            onlyShowColumn: [],
            serialNo: true,
            renameHeader: { "FK_Product": "FK_Product", "ProdName": "Product", "QpdQuantity": "Qty"},
            hideColumn: ['ID_QuotationGenProductDetails', 'FK_QuotationGen', 'FK_Product'],
            rowAttribute: [],
            isCheckType: []
        };


        function fn_fillQuotationItem(ele, tkey, data, tableOptionsTempOut) {
            let $thisForm = $(ele).closest('[perfect-class="form"]');
            let tableOptionsTemp = tableOptionsTempOut;
            let insertData = []
            let tableKey = tkey;

            let indexname = tkey + 'index';
            tableOptionsTemp.rowAttribute.push(indexname);
            tableOptionsTemp.hideColumn.push(indexname);

            let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');
            $.each(data, function (keyOne, valOne) {
                let pData = {};
                pData[indexname] = keyOne + 1;
                $tblcontainer.attr('perfect-tempTable-lastindex', pData[indexname])

                $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                    let $this = $(this);
                    let headerName = $this.attr('perfect-tempTable-' + tableKey);
                    let nameAttr = $this.attr('name');
                    if (typeof valOne[nameAttr] !== undefined) {

                        if ($this.is('select')) {
                            tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                            tableOptionsTemp.hideColumn.push(nameAttr);
                            pData[nameAttr + '_d'] = $this.find('[value="' + valOne[nameAttr] + '"]').text();
                            pData[nameAttr] = valOne[nameAttr];
                        }
                        else if ($this.is('input')) {
                            let inputType = $this.attr('type').toLocaleLowerCase();
                            if (inputType == 'checkbox') {
                                pData[nameAttr] = valOne[nameAttr];
                                tableOptionsTemp.isCheckType.push(nameAttr);
                            }
                            else if (inputType == 'hidden') {
                                tableOptionsTemp.hideColumn.push(nameAttr);
                                pData[nameAttr] = valOne[nameAttr];
                            }
                            else if (inputType == 'date') {
                                pData[nameAttr] = moment(valOne[nameAttr]).format('DD-MM-YYYY');
                            }
                            else {
                                pData[nameAttr] = valOne[nameAttr];
                            }
                        }
                        else {
                            pData[nameAttr] = valOne[nameAttr];
                        }
                    }
                });
                insertData.push(pData);
            });

          
            $tblcontainer.append(pft_table_createtable(insertData, tableOptionsTemp));


        }

       
    </script>



}




