
@{
    ViewBag.Title = "Replace";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid">

    @Html.AntiForgeryToken()  @*//antiforgery token*@

    <div class="row">

        <div class="col-lg-12" id="jq_Replace_formContainer">

        </div>
    </div>


</div>
@section scripts{
<script type="text/javascript">
        const $formContainer = $('#jq_Replace_formContainer');

    $(document).ready(function () {
        fn_Replace_initialload();
    });

    var ReplaceTransMode = '@ViewBag.TransMode';

    function fn_Replace_initialload() {
        ReplaceTransMode = '@ViewBag.TransMode';
       
        fn_ReplaceList(this, fn_loadReplaceAddForm);
    }
    function fn_loadReplaceAddForm() {
        $formContainer.load('@Url.Action("LoadReplaceForm", "Replace")?mtd=@ViewBag.mtd', function () {

            let $thisForm = $(this).find('[perfect-class="form"]');

            var today = new Date().toISOString().split('T')[0];
            document.getElementsByName("TransDate")[0].setAttribute('max', today);            
            $thisForm.find('[name="TransDate"]').val(moment().format('YYYY-MM-DD'));            
            $thisForm.validate({ messages: validationMessage });
            $thisForm.attr('perfect-onFormSuccess', 'fn_Replace_initialload');
        });
    }
    var validationMessage = {
        'TransDate': {
            'required': 'Please Select Replace Date',
            'max': jQuery.validator.format('Future date not Allowed'),
        },
        'SuppID': {
            'required': 'Please Select Supplier',
        },
        'PurchaseRetID': {
            'required': 'Please Select Purchase Return',
        },
    };


    function fn_loadReplaceUpdateForm() {

        let $thisRow = $(this).closest('tr');
        let saveddata = $thisRow.data('pData');

        $('.dataTable tr').removeClass("SelectForDelete");
        $(this).closest('tr').addClass('SelectForDelete');

        let inputData = {
            __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
            ID_Replace: saveddata.ID_Replace,
            TransMode: ReplaceTransMode
        };

        $.ajax({
            url: "@Url.Action("GetReplaceInfo", "Replace")",
            type: "POST",
            // headers: { "token_key": "1234" },
            data: inputData,
            dataType: "json",
            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            success: function (ajaxOutput) {
                console.log('sss', ajaxOutput)
                $formContainer.load('@Url.Action("LoadReplaceForm", "Replace")?mtd=@ViewBag.mtd', function () {
                    let $thisForm = $(this).find('[perfect-class="form"]');
                    if (ajaxOutput.Info.Process.IsProcess) {
                       
                        initFunctions($thisForm);

                        $thisForm.find('[name="ID_Replace"]').val(ajaxOutput.Info.Data[0]['ID_Replace']);                        
                        $thisForm.find('[name="TransDate"]').val(moment(ajaxOutput.Info.Data[0].RepDate).format('YYYY-MM-DD'));
                        $thisForm.find('[name="SuppID"]').val(ajaxOutput.Info.Data[0]['FK_Supplier']).selectpicker('refresh');
                        $thisForm.find('[name="SuppName"]').val(ajaxOutput.Info.Data[0].Supplier);
                        $thisForm.find('[name="PurchaseRetID"]').val(ajaxOutput.Info.Data[0]['FK_PurchaseReturn']);
                        $thisForm.find('[name="ReferenceNo"]').val(ajaxOutput.Info.Data[0]['PurRetRefereNo']);

                        $thisForm.find('[name="TotalAmountFrom"]').val(parseFloat(ajaxOutput.Info.Data[0]['RepFromTotal']).toFixed(2));
                        $thisForm.find('[name="RoundofFrom"]').val((ajaxOutput.Info.Data[0]['RepFromRoundOff']));
                        $thisForm.find('[name="NetAmountFrom"]').val(parseFloat(ajaxOutput.Info.Data[0]['RepFromNetAmount']).toFixed(2));

                        $thisForm.find('[name="TotalAmountTo"]').val(parseFloat(ajaxOutput.Info.Data[0]['RepToTotal']).toFixed(2));
                        $thisForm.find('[name="DiscountPercTo"]').val(parseFloat(ajaxOutput.Info.Data[0]['RepToDiscountPer']));
                        $thisForm.find('[name="DiscountTo"]').val(parseFloat(ajaxOutput.Info.Data[0]['RepToDiscountAmount']).toFixed(2));
                        $thisForm.find('[name="RoundofTo"]').val(ajaxOutput.Info.Data[0]['RepToRoundOff']);
                        $thisForm.find('[name="NetAmountTo"]').val(parseFloat(ajaxOutput.Info.Data[0]['RepToNetAmount']).toFixed(2));

                        $thisForm.find('[name="PurchaseReturn"]').prop('checked', ajaxOutput.Info.Data[0]['RepIsPurchaseReturn']);
                        
                        if ($('#PurchaseReturn').is(":checked")) {
                            $thisForm.find('[name="PurchaseRetID"]').prop("disabled", false);
                            $("#PurchaseRetButton").prop("disabled", false);
                            $(".ProductAddSection").hide();
                            $thisForm.find('[name="PurchaseRetID"]').addClass('perfectValidate_string');
                        }
                        else {
                            //$thisForm.find('[name="ReferenceNo"]').val('');
                            //$thisForm.find('[name="PurchaseRetID"]').val('');
                            $("#PurchaseRetButton").prop("disabled", "disabled");
                            $(".ProductAddSection").show();
                            $thisForm.find('[name="PurchaseRetID"]').removeClass('perfectValidate_string');
                        }

                        // stuff to do after filling data
                        //$sideMenuOptions.close();//<---  Close side menu
                        //$thisForm.find('button[name=add]').addClass('d-none');//<--- hide add cunsomer button
                        //$thisForm.find('button[name=update]').removeClass('d-none');//<--- show update cunsomer button


                        $thisForm.find('[name="Supplier"]').attr("disabled", "disabled");

                    }


                    
                    if (ajaxOutput.ReplaceToTax) {
                        
                        let taxinfos = ajaxOutput.ReplaceToTax.Data;
                        console.log('AJAX TAX ReplaceToTax>', ajaxOutput.ReplaceToTax);                        
                        Purtax = Purtax.concat(taxinfos);
                        $thisForm.data({ prtTaxData: Purtax });
                    }
                    if (ajaxOutput.ReplaceFromTax) {

                        
                        let taxinfos = ajaxOutput.ReplaceFromTax.Data;
                        console.log('AJAX TAX ReplaceFromTax>', ajaxOutput.ReplaceFromTax);                       
                        Fromtax = Fromtax.concat(taxinfos);
                    }

                    let table;
                    if ($('#PurchaseReturn').is(":checked")) {
                        table = PurchaseRetOptionsTempOutFill;
                    }
                    else {
                        table = PurchaseRetOptionsTempOut;
                    }

                    if (ajaxOutput.RepFromInfo.Process.IsProcess) {

                        fillTable($thisForm, 'ReplaceFrom', ajaxOutput.RepFromInfo.Data, table)
                        $thisForm.find('[perfect-tempTable="ReplaceFrom"]').find('table');
                    }
                    if (ajaxOutput.RepFromInfo.Process.IsProcess) {

                        fillTable($thisForm, 'ReplaceTo', ajaxOutput.RepToInfo.Data, PurchaseReplaceOptionsTempOut)
                        $thisForm.find('[perfect-tempTable="ReplaceTo"]').find('table');
                    }
                    debugger



                    $sideMenuOptions.close();//<---  Close side menu
                    $thisForm.find('button[name=add]').addClass('d-none');//<--- hide add cunsomer button
                    //$thisForm.find('button[name=update]').removeClass('d-none');//<--- show update cunsomer button

                    $thisForm.attr('perfect-onFormSuccess', 'fn_PurchaseIndex_initialLoad'); 

                });

            }
        });
    }

    var serchpdfname;

    function fn_ReplaceList(ele,callback) {

        let $sidemenu = $sideMenuOptions.body;

        let $thisForm = $(ele).closest('.testSearchBox');
        let SearchName = $thisForm.find('input').val();
        //serchpdfname = SearchName;

        if (SearchName == undefined) {
            SearchName = "";
        }
        $sideMenuOptions.title.find('h4').text('Replace List');


        let pageUrl = '@Url.Action("GetReplaceList", "Replace")';
        $.ajax({
            url: pageUrl,
            type: "POST",
            data: { pageSize: 15, pageIndex: 0, Name: SearchName, TransModes: ReplaceTransMode },
            dataType: "json",
            contentType: "application/x-www-form-urlencoded; charset=utf-8",
            success: function (ajaxOutput) {


                if (ajaxOutput.Process.IsProcess) {
                    //setSessionValue(LastIDSessionKey, ajaxOutput.Data[0]["LastID"]);


                    $sidemenu.find('.jq_sidemenu_title').text("Purchase List");

                    $sidemenu.empty().append('<div class="d-flex justify-content-end mb-2 position-relative"><div class="col-md-6 position-absolute top-1 z-index"> <div class="input-group testSearchBox"><input type="text" class="form-control " name="SearchName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" value="' + SearchName + '"  /><div class="input-group-append"><button id="addcountry-jq-searchButton6" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="fn_ReplaceList(this)"></button></div></div></div></div>', $('<div/>', { class: "col-md-12 table_temp_class" }).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))
                    // $sidemenu.find('table').dataTable({ paging: true });


                    let $table = $sidemenu.find('table');
                    $table.dataTable({

                        "serverSide": true,//no change
                        "processing": true,//-- process text when clicked
                        //"lengthChange": false,
                        "lengthMenu": [10, 15, 20, 25, 50, 100],//---drop down page size
                        "searching": false,//--no change
                        "ordering": false,//--sorting
                        "deferLoading": ajaxOutput.totalrecord,//<----to total number of record from db
                        "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,//<----starting record
                        "pageLength": ajaxOutput.pageSize,//<----page size
                        "recordsFiltered": ajaxOutput.pageSize,//<---page size

                        "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize, searchkey: SearchName, TransModes: ReplaceTransMode }, tableOptions, $table)
                    });

                }
                else {
                    //setSessionValue(LastIDSessionKey, 0);
                    if (ajaxOutput.Process.Status = "NoData") {

                        $sidemenu.find('.jq_sidemenu_title').text("Customer Service Registrations");

                        $sidemenu.empty().append('<div class="d-flex justify-content-end mb-2"><div class="col-md-6 position-absolute top-1 z-index"> <div class="input-group testSearchBox"><input type="text" class="form-control " name="SearchName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input"  value="' + SearchName + '"  /><div class="input-group-append"><button id="addcountry-jq-searchButton6" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="fn_ReplaceList(this)"></button></div></div></div></div>', $('<div/>', { class: "col-md-12 table_temp_class" }).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))
                        // $sidemenu.find('table').dataTable({ paging: true });


                        let $table = $sidemenu.find('table');
                        $table.dataTable({
                            "serverSide": true,//no change
                            "processing": true,//-- process text when clicked
                            // "lengthChange": false,
                            "lengthMenu": [0],//---drop down page size
                            "searching": false,//--no change
                            "ordering": false,//--sorting
                            "deferLoading": ajaxOutput.totalrecord,//<----to total number of record from db
                            "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,//<----starting record
                            "pageLength": ajaxOutput.pageSize,//<----page size
                            "recordsFiltered": ajaxOutput.pageSize,//<---page size

                            "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize, searchkey: SearchName, TransModes: ReplaceTransMode }, tableOptions, $table)
                        });
                    }
                    else {
                        $.each(ajaxOutput.Process.Message, function (key, value) {
                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                        });
                    }
                }
            },
            complete: function () {
                if (callback) {


                    callback();
                }
            }
        });
    }

        

    function returnajaxPagination(ajaxInfo, tableOptions, tableid) {
        //{ apiurl, pageSize }
        return {
            url: ajaxInfo.apiurl,
            type: "post",
            data: function () {
                var info = tableid.DataTable().page.info();
                console.log('RETURN AJAX', info)

                let input = { pageSize: info.length, pageIndex: info.page, TransModes: ajaxInfo.TransModes };
                if (ajaxInfo.searchkey) {
                    input["Name"] = ajaxInfo.searchkey;
                }
                return input
            },
            dataType: "json",
            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            success: function (dtajaxOutput) {

                let table = tableid.DataTable();
                table.destroy();
                pft_table_newTableBody(tableid, dtajaxOutput.Data, tableOptions);

                tableid.dataTable({
                    "serverSide": true,
                    "processing": true,

                    "lengthMenu": [10, 15, 20, 25, 50, 100],
                    "searching": false,
                    "ordering": false,
                    "deferLoading": dtajaxOutput.totalrecord,
                    "displayStart": dtajaxOutput.pageIndex * dtajaxOutput.pageSize,
                    "pageLength": dtajaxOutput.pageSize,
                    "recordsFiltered": dtajaxOutput.pageSize,
                    "ajax": returnajaxPagination(ajaxInfo, tableOptions, tableid)
                })

            },

        }
    }

    var tableOptions = {
        dropdown: {
            buttons: [
                { displayName: "View", action: fn_loadReplaceUpdateForm },
                { type: "divider" },
                //{ displayName: "Delete", action: DeleteReplace}
            ],
            class: "btn btn-success light sharp"
        },
        onlyShowColumn: ["SlNo", "RepDate", "Supplier"],
        serialNo: false,
        hideColumn: ["ID_Replace", "FK_Supplier"],
        rowClickAction: fn_loadReplaceUpdateForm,
        renameHeader: { "Supplier": "Supplier", "RepDate": "Replace Date"},
        isDateType: ["RepDate"],

    };

    function DeleteReplace() {
        let $row = $(this).closest('tr');

        let Saveddata = $row.data('pData');
        console.log("Saved data", Saveddata);
        $('.dataTable tr').removeClass("SelectForDelete");
        $(this).closest('tr').addClass('SelectForDelete');

        $.ajax({
            url: "@Url.Action("GetReplaceReasonList", "Replace")",
            type: "GET",
            // data: inputReason,
            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            success: function (ajaxReasonOutput) {
                if (ajaxReasonOutput.Process.IsProcess) {

                    console.log('Inside res ajax', ajaxReasonOutput.Data)


                    //delete code

                    let confirmationDialogBoxOption = { heading: "Are you Sure?", body: "Do you want to remove  " + Saveddata.Supplier + " ?", cancel: "No", confirm: "Yes", reason: ajaxReasonOutput.Data };

                    var res = ConfirmDialog(confirmationDialogBoxOption);



                    res.then(function (ret) {
                        if (ret) {

                            let inputData = {
                                __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                                ID_Replace: Saveddata.PurchaseOrderID,
                                ReasonID: ret,
                                TransMode: ReplaceTransMode
                            };


                            $.ajax({
                                url: "@Url.Action("DeleteReplace", "Replace")",
                                type: "POST",
                                data: inputData,
                                contentType: 'application/x-www-form-urlencoded;charset=utf-8',
                                success: function (ajaxOutput) {

                                    if (ajaxOutput.Process.IsProcess) {

                                        $.each(ajaxOutput.Process.Message, function (key, value) {

                                            NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': 'Deleted Successfully' });
                                        });

                                        //removing a data
                                        let table = $row.closest('table').DataTable()
                                        table.row($row).remove().draw();
                                        $('.dataTable tr').removeClass("SelectForDelete");
                                    }
                                    else {
                                        $.each(ajaxOutput.Process.Message, function (key, value) {

                                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                            $('.dataTable tr').removeClass("SelectForDelete");
                                        });
                                    }

                                }
                            });
                        }
                        else {

                            NotificationMessage({ 'message': 'No option selected' });
                        }

                    });
                    //-----delete code
                }
            }
        });
    }


</script>
}
