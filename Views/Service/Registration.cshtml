@*----------------------------------------------------------------------
    Created By	: Athul mathew
    Created On	: 25/01/2022
    Purpose		: Customerserviceregister
    -------------------------------------------------------------------------
    Modification
    On			By					OMID/Remarks
    -------------------------------------------------------------------------
    -------------------------------------------------------------------------*@

@model PerfectWebERP.Models.CustomerserviceregisterModel.CustomerserviceregisterView
@{
    //ViewBag.Title = "Registration";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<div class="container-fluid">
    @Html.AntiForgeryToken()
    <div class="row">
        <div class="col-lg-12" id="Customerserviceregister-form">

        </div>
        <div style="display:none" id="test1"></div>
    </div>
</div>


@section scripts{
 
   
    <script>
    //--- Form
    const $formContainer = $('#Customerserviceregister-form');
    //--On DOM Load
    $(document).ready(function () {

      serviceInitialLoad()

    });
    //--End
    //--- Common table settings for this page

        const LastIDSessionKey = 'ServiceregistrationLastID';
        var ServiceregistrationTransMode = '';
        var LastID_Serviceregistration;

        var ProductFound = '';

        ProductFound = '@ViewBag.IsProduct';

        function serviceInitialLoad() {

            ServiceregistrationTransMode = '@ViewBag.TransMode';

           
            fn_ServiceRegistartion_loadRegistrations(this, fn_ServiceRegister_LoadRegistrationForm);
           
        }



        var validationMessage = {
            'CustomeName': {
                'required': 'Please Enter Customer Name',
                'stringonly': 'Special characters are not allowed in Customer Name',
            },
            'TicketDate': {
                'required': 'Please Select Date',
                'max': jQuery.validator.format('Please Enter a Valid Date'),
            },
            'CustomerMobile': {
                'required': 'Please Enter Mobile No.',
                'anyphonenumber': 'Invalid Mobile No.',
                'minlength': jQuery.validator.format('Mobile No should be more than {0} characters'),
                'maxlength': jQuery.validator.format('Mobile No should be less than {0} characters'),
            },
            
           'Mobile': {
             
            'anyphonenumber': 'Invalid Mobile No.',
            'minlength': jQuery.validator.format(''),
            'maxlength': jQuery.validator.format(''),
            },
            'Category': {
                'required': 'Please Select Complaint Category',
                'stringonly': 'Special characters are not allowed in category',
            },
            'CategoryID': {
                'required': 'Please Select Category',
                'stringonly': 'Special characters are not allowed in category'
            },
            'Priority': {
                'required': 'Please Select Priority',
                'stringonly': 'Special characters are not allowed in priority',
            },
          

             'CSRDescription': {

                 'required': 'Please Enter Description',
                 'stringonly': 'Special characters are not allowed in description',


            },
            'OtherMobile': {

                'anyphonenumber': 'Invalid Contact No.',
                'minlength': jQuery.validator.format('Contact No should be more than {0} characters'),
                'maxlength': jQuery.validator.format('Contact No should be less than {0} characters'),
            },
            'Landmark': {
                'stringonly': 'Special characters are not allowed in landmark',


            }

        };




    // Fucntion to load Customer Service Register ADD form

    function fn_ServiceRegister_LoadRegistrationForm() {
         $formContainer.load('@Url.Action("LoadRegistrationForm", "Service")?mtd=@ViewBag.mtd', function () {
             let $thisForm = $(this).find('[perfect-class="form"]');
             $thisForm.find('[name="Servicefromdate"]').val(moment().format('YYYY-MM-DD'));
             $thisForm.find('[name="TicketDate"]').val(moment().format('YYYY-MM-DD'));
             $thisForm.find('[name="TicketTime"]').val(moment().format('HH:mm'));
        
             $thisForm.validate({ messages: validationMessage });

             $thisForm.attr('perfect-onFormSuccess', 'serviceInitialLoad');
             $thisForm.find('[name=CustomeName]').addClass("perfectValidate_string") 
             $thisForm.find('[name="Category"]').val(3).selectpicker('refresh');
             $thisForm.find('[name="Category"]').trigger('change');  
             getSessionValue(LastIDSessionKey, function (result) {
                 LastID_Serviceregistration = result;
             });
             initFunctions($thisForm);
             getNumberGeneration(ServiceregistrationTransMode, 0, $thisForm, 'TicketNumber')
            });
        }




        var tableOptions = {
            dropdown: {
                buttons: [

                  { displayName: "View", action: fn_Registration_loadRegistartionupdatedata },

                    { type: "divider" },

                    {
                        displayName: "Delete", action: deleteRegistratn
                    }
                ],
                class: "btn btn-success light sharp"
            },
            onlyShowColumn: ["SlNo","TicketNumber", "CustomeName", "CustomerMobile","PriorityName" ,"TicketDate"],
            hideColumn: [],
          //  isDateType: [],
            rowClickAction: fn_Registration_loadRegistartionupdatedata ,
            serialNo: false,
            renameHeader: { "SlNo": "SL No", "TicketNumber": "Ticket No", "CustomeName": "Customer", "CustomerMobile": "Mobile No", "PriorityName": "Priority", "TicketDate": "Date" },
            isDateType: ["TicketDate"],

        };
      


        var serchpdfname;
        function fn_ServiceRegistartion_loadRegistrations(ele,callback) {
        let $sidemenu = $sideMenuOptions.body;

       // let $thisForm = $(ele).closest('.Search-Control');

        let $thisForm = $(ele).closest('.testSearchBox');
            let SearchName = $thisForm.find('input').val();
             serchpdfname = SearchName ;
            console.log("GH", SearchName)
            if (SearchName == undefined) {
                SearchName = "";
            }       
             $sideMenuOptions.title.find('h4').text('@ViewBag.PageTitles'+' '+'List');
          let pageUrl = '@Url.Action("GetRegistrations", "Service")';
            $.ajax({
                url:pageUrl,
                type: "POST",
                data: { pageSize: 15, pageIndex: 0, Name: SearchName, TransModes: ServiceregistrationTransMode },
                dataType: "json",
                contentType: "application/x-www-form-urlencoded; charset=utf-8",
                success: function (ajaxOutput) {


                          if (ajaxOutput.Process.IsProcess) {
                              console.log('Customer Service Registrations', ajaxOutput);
                              setSessionValue(LastIDSessionKey, ajaxOutput.Data[0]["LastID"]);
                              //$thisForm.find('[name="LastID"]').val(ajaxOutput.Data[0]["LastID"]);
                              $sidemenu.find('.jq_sidemenu_title').text("Customer Service Registrations");

                              //$sidemenu.empty().append('<div class="d-flex justify-content-center mb-2 position-relative"><div class="col-md-7 position-absolute top-1 z-index"> <div class="input-group-append testSearchBox"><button title="Export to PDF" onclick="exportpdf('+ ajaxOutput.totalrecord + ',this)" type="button" class="btn btn-primary" onclick=""><i class="fa fa-file-pdf-o" style="font-size:20px"></i></button></div></div></div>')

                              $sidemenu.empty().append('<div class="d-flex justify-content-end mb-2 position-relative"><div class="col-md-6 position-absolute top-1 z-index"> <div class="input-group testSearchBox"><input type="text" class="form-control " name="SearchName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" value="' + SearchName +'"  /><div class="input-group-append"><button id="addcountry-jq-searchButton6" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="fn_ServiceRegistartion_loadRegistrations(this)"></button></div></div></div></div>', $('<div/>', {class:"col-md-12 table_temp_class"}).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))
                             // $sidemenu.find('table').dataTable({ paging: true });


                              let $table = $sidemenu.find('table');
                              $table.dataTable({

                                  "serverSide": true,//no change
                                  "processing": true,//-- process text when clicked
                                  //"lengthChange": false,
                                  "lengthMenu": [10, 15, 20, 25, 50, 100],//---drop down page size
                                  "searching": false,//--no change
                                  "ordering": false,//--sorting
                                  "deferLoading": ajaxOutput.totalrecord,//<----to total number of record from db
                                  "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,//<----starting record
                                  "pageLength": ajaxOutput.pageSize,//<----page size
                                  "recordsFiltered": ajaxOutput.pageSize,//<---page size

                                  "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize, searchkey: SearchName, TransModes: ServiceregistrationTransMode}, tableOptions, $table)
                              });

                          }
                             else {
                              if (ajaxOutput.Process.Status = "NoData") {

                                  $sidemenu.find('.jq_sidemenu_title').text("Customer Service Registrations");

                                  $sidemenu.empty().append('<div class="d-flex justify-content-end mb-2"><div class="col-md-6 position-absolute top-1 z-index"> <div class="input-group testSearchBox"><input type="text" class="form-control " name="SearchName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input"  value="' + SearchName +'"  /><div class="input-group-append"><button id="addcountry-jq-searchButton6" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="fn_ServiceRegistartion_loadRegistrations(this)"></button></div></div></div></div>', $('<div/>', { class: "col-md-12 table_temp_class" }).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))
                        // $sidemenu.find('table').dataTable({ paging: true });


                        let $table = $sidemenu.find('table');
                        $table.dataTable({
                            "serverSide": true,//no change
                            "processing": true,//-- process text when clicked
                           // "lengthChange": false,
                             "lengthMenu": [],//---drop down page size
                            "searching": false,//--no change
                            "ordering": false,//--sorting
                            "deferLoading": ajaxOutput.totalrecord,//<----to total number of record from db
                            "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,//<----starting record
                            "pageLength": ajaxOutput.pageSize,//<----page size
                            "recordsFiltered": ajaxOutput.pageSize,//<---page size

                            "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize, searchkey: SearchName, TransModes: ServiceregistrationTransMode}, tableOptions, $table)
                        });
                    }
                    else {
                        $.each(ajaxOutput.Process.Message, function (key, value) {
                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                        });
                    }
                }
            },
            complete: function () {
                if (callback) {


                    callback();
                }
            }
        });
    }

        @*function exportpdf(ttlrd, ele) {
            if (serchpdfname == undefined) {
                serchpdfname = "";

            }
            else {
                serchpdfname = serchpdfname;
            }
          let pageUrl = '@Url.Action("GetRegistrations", "Service")';
            $.ajax({


                url:pageUrl,
                type: "POST",
                data: { pageSize: ttlrd, pageIndex: 0, Name: serchpdfname },
                dataType: "json",
                contentType: "application/x-www-form-urlencoded; charset=utf-8",
                success: function (ajaxOutput) {


                    if (ajaxOutput.Process.IsProcess) {

                        $('#test1').html(pft_table_createtable(ajaxOutput.Data, tableOptionpdf))

                        var sTable = document.getElementById('test1').innerHTML;
                        
                        var doc = new jsPDF('l', 'pt');
                        var specialElementHandlers = {
                            // element with id of "bypass" - jQuery style selector
                            '.no-export': function (element, renderer) {
                                // true = "handled elsewhere, bypass text extraction"
                                return true;
                            }
                        };
                        var margins = {
                            top: 32,
                            bottom: 10,
                            left: 10,
                            width: 200
                        };

                        doc.setFontSize(22);

                        doc.text(20, 20, 'Customer Service Registrations');
                       
                        doc.setFontSize(16);

                        doc.fromHTML(
                            sTable, // HTML string or DOM elem ref.
                            margins.left,
                            margins.top, {
                                'width': margins.width,
                                'elementHandlers': specialElementHandlers
                            },

                            function (dispose) {
                                // dispose: object with X, Y of the last line add to the PDF 
                                //          this allow the insertion of new lines after html
                                doc.save('CustomerServiceRegistration.pdf');
                            }, margins);
                    }
                             else {
                              if (ajaxOutput.Process.Status = "NoData") {


                    }
                    else {
                        $.each(ajaxOutput.Process.Message, function (key, value) {
                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                        });
                    }
                }
            },
            complete: function () {

            }
        });
    }*@

    function returnajaxPagination(ajaxInfo, tableOptions, tableid) {
        //{ apiurl, pageSize }
        return {
            url: ajaxInfo.apiurl,
            type: "post",
            data: function () {
                var info = tableid.DataTable().page.info();
                console.log('RETURN AJAX', info)

                let input = { pageSize: info.length, pageIndex: info.page, TransModes: ajaxInfo.TransMode };
                if (ajaxInfo.searchkey) {
                    input["Name"] = ajaxInfo.searchkey;
                }
                return input
            },
            dataType: "json",
            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            success: function (dtajaxOutput) {

                let table = tableid.DataTable();
                table.destroy();
                pft_table_newTableBody(tableid, dtajaxOutput.Data, tableOptions);

                tableid.dataTable({
                    "serverSide": true,
                    "processing": true,

                    "lengthMenu": [10, 15, 20, 25, 50, 100],
                    "searching": false,
                    "ordering": false,
                    "deferLoading": dtajaxOutput.totalrecord,
                    "displayStart": dtajaxOutput.pageIndex * dtajaxOutput.pageSize,
                    "pageLength": dtajaxOutput.pageSize,
                    "recordsFiltered": dtajaxOutput.pageSize,
                    "ajax": returnajaxPagination(ajaxInfo, tableOptions, tableid)
                })

            },

        }
    }
         // Fucntion to load CustomerList
        function fn_ServiceRegistartion_loadRegistrations1() {
            $.ajax({
                url: "@Url.Action("GetRegistrations","Service")",
                type: "Get",
                dataType: "json",
                contentType: "application/json",
                success: function (ajaxOutput) {

                    if (ajaxOutput.Process.IsProcess) {
                        let $sidemenu = $sideMenuOptions.body;
                        $sideMenuOptions.title.find('h4').text('Customer Service Registrations');
                        $sideMenuOptions.body.html(pft_table_createtable(ajaxOutput.Data, tableOptions))
                        $sideMenuOptions.body.find('table').dataTable({ paging: true });

                    }
                    else {

                        if (ajaxOutput.Process.Status == 'NoData') {
                            $sideMenuOptions.body.html(pft_table_createtable(ajaxOutput.Data, tableOptions))
                        }
                        else {
                            $.each(ajaxOutput.Process.Message, function (key, value) {
                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                            });
                        }


                    }

                },
                complete: function () {

                }
            });
        };

        //Function to load registration info
        function fn_Registration_loadRegistartionupdatedata() {

            let $thisRow = $(this).closest('tr');
            let saveddata = $thisRow.data('pData');


            $('.dataTable tr').removeClass("SelectForDelete");
            $(this).closest('tr').addClass('SelectForDelete');

            console.log("CONSOL >",saveddata);
            let inputData = {
                __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                FK_CustomerServiceRegister: saveddata.ID_Customerserviceregister
            };

            $.ajax({
                url: "@Url.Action("GetRegistrationsinfo", "Service")",
                type: "POST",
                data: inputData,
                dataType: "json",
                contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                success: function (ajaxOutput) {
                    
                    console.log("Register Data >");
                    console.log("Register Data >", ajaxOutput.datainfo.Data);
                    console.log("Register checkinfo Data >", ajaxOutput.checkinfo.Data);
                    if (ajaxOutput.datainfo.Process.IsProcess) {
                        $formContainer.load('@Url.Action("LoadRegistrationForm", "Service")?mtd=@ViewBag.mtd', function () {

                         
                            $(this).find('[perfect-class=formTitle]').text('update : ' + ajaxOutput.datainfo.Data[0].TicketNumber)
                            console.log('Inside load');

                            let $thisForm = $(this).find('[perfect-class="form"]');

                           
                            $thisForm.attr('perfect-onFormSuccess', 'serviceInitialLoad');
                            initFunctions($thisForm);
                            $thisForm.validate({ messages: validationMessage });
                            $thisForm.data({ pData: ajaxOutput.datainfo.Data[0] });

                            console.log('ajaxOutput.datainfo.Data[0]123', ajaxOutput.datainfo.Data[0])

                           // $thisForm.find('[name="CustomerNumber"]').val(ajaxOutput.datainfo.Data[0]['CustomerNumber']);
                            $thisForm.find('[name=TicketDate]').val(moment(ajaxOutput.datainfo.Data[0].TicketDate).format('YYYY-MM-DD'));
                            $thisForm.find('[name=TicketTime]').val(ajaxOutput.datainfo.Data[0].TicketTime);
                            if (ajaxOutput.datainfo.Data[0]['FK_Customer'] == 0) {
                                $thisForm.find('[name="CusMode"]').val(1)
                                $thisForm.find('[name="ID_FIELD"]').val(ajaxOutput.datainfo.Data[0]['FK_CustomerOthers']);
                            }
                            else {
                                $thisForm.find('[name="CusMode"]').val(0)
                                $thisForm.find('[name="ID_FIELD"]').val(ajaxOutput.datainfo.Data[0]['FK_Customer']);
                            }
                          
                            $thisForm.find('[name="TicketNumber"]').val(ajaxOutput.datainfo.Data[0]['TicketNumber']);
                            $thisForm.find('[name="ID_Customerserviceregister"]').val(ajaxOutput.datainfo.Data[0]['ID_Customerserviceregister']);
                            $thisForm.find('[name="btnserv"]').attr("disabled", true);
                            $thisForm.find('[name="CustomeName"]').attr("readonly", true);
                            $thisForm.find('[name=CustomeName]').removeClass("perfectValidate_string") 
                            $thisForm.find('[name="CustomerMobile"]').attr("readonly", true);
                            $thisForm.find('[name="CustomerAddress"]').attr("readonly", true);
                           
                            $thisForm.find('[name="CustomeName"]').val(ajaxOutput.datainfo.Data[0]['CustomeName']);
                            $thisForm.find('[name="company"]').val(ajaxOutput.datainfo.Data[0]['company']).selectpicker('refresh'),
                            $thisForm.find('[name="CustomerAddress"]').val(ajaxOutput.datainfo.Data[0]['CustomerAddress']);
                            $thisForm.find('[name="CustomerMobile"]').val(ajaxOutput.datainfo.Data[0]['CustomerMobile']);
                            $thisForm.find('[name="OtherMobile"]').val(ajaxOutput.datainfo.Data[0]['OtherMobile']);
                            $thisForm.find('[name="Landmark"]').val(ajaxOutput.datainfo.Data[0]['Landmark']);
                            $thisForm.find('[name="CSRDescription"]').val(ajaxOutput.datainfo.Data[0]['CSRDescription']);
                            $thisForm.find('[name="Category"]').val(ajaxOutput.datainfo.Data[0]['Category']).selectpicker('refresh'),
                            $thisForm.find('[name="CategoryID"]').val(ajaxOutput.datainfo.Data[0]['CategoryID']).selectpicker('refresh'),
                            $thisForm.find('[name="ID_ServiceList"]').val(ajaxOutput.datainfo.Data[0]['ID_ServiceList']).selectpicker('refresh'),
                            $thisForm.find('[name="CSRChannelID"]').val(ajaxOutput.datainfo.Data[0]['CSRChannelID']).selectpicker('refresh'),
                            $thisForm.find('[name="CSRChannelSubID"]').val(ajaxOutput.datainfo.Data[0]['CSRChannelSubID']);
                            $thisForm.find('[name="CSRChannelSub"]').val(ajaxOutput.datainfo.Data[0]['CSRChannelSub']);

                            let CSRChannelID = $thisForm.find('[name="CSRChannelID"]').val()

                            if (CSRChannelID == 5 || CSRChannelID == 6) {
                                document.getElementById("channel").style.display = 'block';
                            }
                            else {
                                document.getElementById("channel").style.display = 'none';
                            }
                            $thisForm.find('[name="Priority"]').val(ajaxOutput.datainfo.Data[0]['Priority']).selectpicker('refresh'),
                            $thisForm.find('[name=Servicefromdate]').val(moment(ajaxOutput.datainfo.Data[0].Servicefromdate).format('YYYY-MM-DD'));
                            $thisForm.find('[name=Servicetodate]').val(moment(ajaxOutput.datainfo.Data[0].Servicetodate).format('YYYY-MM-DD'));
                            if (ajaxOutput.datainfo.Data[0]['Servicefromtime'] != '00:00:00') {
                                $thisForm.find('[name="Servicefromtime"]').val(ajaxOutput.datainfo.Data[0]['Servicefromtime']);
                            }
                            if (ajaxOutput.datainfo.Data[0]['Servicetotime'] != '00:00:00') {
                                $thisForm.find('[name="Servicetotime"]').val(ajaxOutput.datainfo.Data[0]['Servicetotime']);
                            }
                            //if (ajaxOutput.Registerdetails.Data[0].CSRservicetodate != null && ajaxOutput.datainfo.Data[0].CSRservicetodate != undefined && ajaxOutput.Registerdetails.Data[0].CSRservicetodate != "") {
                            //    $thisForm.find('[name=Servicetodate]').val(moment(ajaxOutput.Registerdetails.Data[0].CSRservicetodate).format('YYYY-MM-DD'));
                            //}


                            let ctegory = $thisForm.find('[name="Category"]').val()
                            if (ProductFound == "False") {
                                $(".product1").hide();
                                $(".product2").hide();
                            }
                            else {
                                if (ctegory == 2 || ctegory == 4) {
                                    document.getElementById("compprd").style.display = '';
                                    document.getElementById("noncomp").style.display = 'none';
                                    $thisForm.find('[name="FK_Product"]').val(ajaxOutput.datainfo.Data[0]['FK_Product']);
                                    $thisForm.find('[name="ProductName"]').val(ajaxOutput.datainfo.Data[0]['Product']);
                                }
                                else {
                                    document.getElementById("compprd").style.display = 'none';
                                    document.getElementById("noncomp").style.display = '';
                                    $thisForm.find('[name="ProductNameP"]').val(ajaxOutput.datainfo.Data[0]['Product']);
                                    $thisForm.find('[name="FK_ProductP"]').val(ajaxOutput.datainfo.Data[0]['FK_Product']);
                                }
                            }

                            if (ctegory == 2 || ctegory == 4) {
                                document.getElementById("comp").style.display = '';

                            }
                            else {
                                document.getElementById("comp").style.display = 'none';

                            }

                            if (ctegory == 1 || ctegory == 2) {
                                document.getElementById("service").style.display = '';
                                document.getElementById("complaint").style.display = 'none';
                                document.getElementById("btncomplaint").style.display = 'none';

                                GetServiceList(this, ajaxOutput.datainfo.Data[0]['CategoryID'], ajaxOutput.datainfo.Data[0]['ID_ServiceList'])
                            }
                            else {
                                document.getElementById("service").style.display = 'none';
                                document.getElementById("complaint").style.display = '';
                                document.getElementById("btncomplaint").style.display = '';
                                GetComplaintList(this, ajaxOutput.datainfo.Data[0]['CategoryID'], ajaxOutput.datainfo.Data[0]['ID_ComplaintList'])
                            }
                            let FK_Customer = ajaxOutput.datainfo.Data[0]['FK_Customer'];
                            let FK_CustomerOthers = ajaxOutput.datainfo.Data[0]['FK_CustomerOthers'];
                            let FK_Product = ajaxOutput.datainfo.Data[0]['FK_Product'];
                            fn_commonlistbadge('', 1, FK_Customer, FK_CustomerOthers, FK_Product);
                            fn_commonlistbadge('', 2, FK_Customer, FK_CustomerOthers, FK_Product);
                            fn_commonlistbadge('', 3, FK_Customer, FK_CustomerOthers, FK_Product);

                            if (ajaxOutput.checkinfo.Data != null) {
                                if ($thisForm.find('[name="ID_ServiceList"]').val() == 0) {
                                    $thisForm.data({ cData: ajaxOutput.checkinfo });

                                    dataedit = ajaxOutput.checkinfo;
                                    //CheckList = [];

                                }
                                else {
                                    $thisForm.data({ cData: null });

                                }
                            }
                            else {
                                $thisForm.data({ cData: null });
                                dataedit = 0;

                            }

                            if (ajaxOutput.statusinfo.Data != null) {

                                let stable = JSON.parse(ajaxOutput.statusinfo.Data).dtable;
                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': stable[0].ErrMsg });
                                document.getElementById("accordion-six").style.display = "none";;
                                $thisForm.find('button[name=reset]').addClass('d-none');
                                
                            }
                            else
                            {
                             
                                $thisForm.find('button[name=update]').removeClass('d-none'); // < --- show update cunsomer button
                            }


                            $thisForm.find('[name="BrandID"]').val(ajaxOutput.datainfo.Data[0]['FK_Brand']).selectpicker('refresh');
                            $thisForm.find('[name="FK_SubCategory"]').val(ajaxOutput.datainfo.Data[0]['FK_SubCategory']);
                            $thisForm.find('[name="CategoryID"]').trigger('change'),
                                $thisForm.find('[name="ID_SubCategory"]').attr('perfect-onloadSelect', ajaxOutput.datainfo.Data[0].FK_SubCategory);
                            $thisForm.find('[name="ID_SubCategory"]').val(ajaxOutput.datainfo.Data[0].FK_SubCategory);
                            
                           
                            $('#customerbtn').attr("disabled", "disabled"); 
                            $sideMenuOptions.close();//<---  Close side menu
                            $thisForm.find('button[name=add]').addClass('d-none');//<--- hide add cunsomer button
                            fn_commonlisthistory(this, 1, 1)
                            fn_commonlisthistory(this, 2, 1)
                            fn_commonlisthistory(this, 3, 1)
                            $("#morecont").trigger("click");
                            //$thisForm.attr('perfect-onFormSuccess', 'fn_ProductIndex_initialLoad');
                        });
                    }
                }
            });
        };




        function ConvertJsonDate(Jsondate) {
            var date = "";
            if (Jsondate != "" && Jsondate != null && Jsondate != undefined) {
                var dateString = Jsondate.substr(6);
                var currentTime = new Date(parseInt(dateString));
                var month = currentTime.getMonth() + 1;
                var day = currentTime.getDate();
                var year = currentTime.getFullYear();
                date = day + "-" + month + "-" + year;
            }
            return date;
        }


        //----
        function deleteRegistratn() {
             let $row = $(this).closest('tr');
            let Saveddata = $row.data('pData');


            $('.dataTable tr').removeClass("SelectForDelete");
            $(this).closest('tr').addClass('SelectForDelete');

             console.log('Delete function', Saveddata)
             //get reason list-
               $.ajax({
                   url: "@Url.Action("GetServiceRegisterDeleteReasonList","Service")",
                   type: "GET",
                  // data: inputReason,
                   contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                   success: function (ajaxReasonOutput) {
                       if (ajaxReasonOutput.Process.IsProcess) {
                           console.log('Inside res ajax', ajaxReasonOutput.Data)
                           let confirmationDialogBoxOption = { heading: "Are you Sure?", body: "Do you want to remove    " + Saveddata.TicketNumber + " ?", cancel: "No", confirm: "Yes", reason: ajaxReasonOutput.Data };
                           var confirmBoxObj = ConfirmDialog(confirmationDialogBoxOption);


                           confirmBoxObj.then(function (selectedOption) {
                                if (selectedOption) {

                                    let inputData = {
                                        __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                                        ID_Customerserviceregister: Saveddata['ID_Customerserviceregister'],
                                        ReasonID: selectedOption
                                    };
                                    $.ajax({
                                        url: "@Url.Action("DeleteServiceRegisterInfo", "Service")",
                                        type: "POST",
                                        data: inputData,
                                        contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                                        success: function (ajaxOutput) {
                                            if (ajaxOutput.Process.IsProcess) {
                                                let table = $row.closest('table').DataTable()
                                                table.row($row).remove().draw();
                                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                                    NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': 'Deleted Successfully' });
                                                });
                                            }
                                            else {
                                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                                });
                                            }
                                        }
                                    });
                                }
                                else {
                                    NotificationMessage({ 'message': 'No option selected' });
                                }

                            });
                        }
                        else {
                        }
                   }
               });
        };
        //---
    </script>
}



