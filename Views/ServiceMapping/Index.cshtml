

@{
    ViewBag.Title = "";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="container-fluid">

    <div class="row">
        <div class="col-lg-12" id="Servicemapping_formContainer">

        </div>
    </div>


</div>
@section scripts{

    <script type="text/javascript">

        const $formContainer = $('#Servicemapping_formContainer');
        //--- Common table settings for this page
        var tableOptions = {
            dropdown: {
                buttons: [

                  
                  @if (ViewBag.PagedAccessRights.UsrrlMsView) {
        <text> { displayName: "View", action: editServicemappinglist },</text>
    }

                    { type: "divider" },
     @if (ViewBag.PagedAccessRights.UsrrlMsDel)
             {
                 <text> { displayName: "Delete", action: deleteServicemapping },</text>

              }
                 
                    
                ],
                class : "btn btn-success light sharp"
            },
            onlyShowColumn: ["SlNo","Employee","SMActive"],
            hideColumn: [],
           rowClickAction:editServicemappinglist ,
            //serialNo: true,
            renameHeader: { "SlNo": "SL NO", "Employee": "Employee","SMActive":"Active"}
        };

        var validationMessage = {
            'ProductID': {
                'required': 'Please select a Product',
                'stringonly': 'Invalid Product selected',

            },

            'EmployeeID': {
                'required': 'Please select a Employee',
                'stringonly': 'Invalid Employee selected',

            },

            'Priority': {
                'required': 'Please Enter Priority',
                'digits':'Please Enter  Digit'
            }
        }

        $(document).ready(function () {
            fn_ServicemappingIndex_initialLoad()

        });


        function fn_ServicemappingIndex_initialLoad() {

            servicemappinglist_loadform();

            
               @if (ViewBag.PagedAccessRights.UsrrlMsView)
              {
                 <text>   loadservicemappingList(); </text>
              }
           
        }



        function servicemappinglist_loadform() {

            $formContainer.load("@Url.Action("LoadFormServiceMapping", "ServiceMapping")", function () {
                let $thisForm = $(this).find('[perfect-class="form"]');
                $thisForm.validate({
                 
                    messages: validationMessage  
                    
                });
                $thisForm.attr('perfect-onFormSuccess', 'fn_ServicemappingIndex_initialLoad');

                initFunctions($thisForm);

            });

        }



        function loadservicemappingList(ele) {


        let $sidemenu = $sideMenuOptions.body;
       
      

        let $thisForm = $(ele).closest('.testSearchBox');
        let SearchName = $thisForm.find('input').val();
        console.log("GH",SearchName)
            $sideMenuOptions.title.find('h4').text('Service Mapping List');
          let pageUrl = '@Url.Action("GetServiceMappingList","ServiceMapping")';
            $.ajax({
                url:pageUrl,
                type: "POST",
                data: { pageSize: 15, pageIndex: 0, Name: SearchName },
                dataType: "json",
                contentType: "application/x-www-form-urlencoded; charset=utf-8",
                success: function (ajaxOutput) {

                    debugger
                          if (ajaxOutput.Process.IsProcess) {


                              $sidemenu.find('.jq_sidemenu_title').text("ServiceMapping");

                              $sidemenu.empty().append('<div class="d-flex justify-content-end mb-2 position-relative"><div class="col-md-6 position-absolute top-1 z-index"> <div class="input-group testSearchBox"><input type="text" class="form-control " name="SearchName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input"  /><div class="input-group-append"><button id="addcountry-jq-searchButton6" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="loadservicemappingList(this)"></button></div></div></div></div>', $('<div/>', {class:"col-md-12 table_temp_class"}).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))
                             // $sidemenu.find('table').dataTable({ paging: true });


                              let $table = $sidemenu.find('table');
                              $table.dataTable({
                                  "serverSide": true,//no change
                                  "processing": true,//-- process text when clicked
                                  //"lengthChange": false,
                                  "lengthMenu": [10, 15, 20, 25, 50, 100],//---drop down page size
                                  "searching": false,//--no change
                                  "ordering": false,//--sorting
                                  "deferLoading": ajaxOutput.totalrecord,//<----to total number of record from db
                                  "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,//<----starting record
                                  "pageLength": ajaxOutput.pageSize,//<----page size
                                  "recordsFiltered": ajaxOutput.pageSize,//<---page size

                                  "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize, searchkey: SearchName }, tableOptions, $table)
                              });

                          }
                else {
                              if (ajaxOutput.Process.Status = "NoData") {
                                 
                                  $sidemenu.find('.jq_sidemenu_title').text("ServiceMapping");

                                  $sidemenu.empty().append('<div class="d-flex justify-content-end mb-2"><div class="col-md-6 position-absolute top-1 z-index"> <div class="input-group testSearchBox"><input type="text" class="form-control " name="SearchName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input"  /><div class="input-group-append"><button id="addcountry-jq-searchButton6" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="loadservicemappingList(this)"></button></div></div></div></div>', $('<div/>', { class: "col-md-12 table_temp_class" }).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))
                        // $sidemenu.find('table').dataTable({ paging: true });


                        let $table = $sidemenu.find('table');
                        $table.dataTable({
                            "serverSide": true,//no change
                            "processing": true,//-- process text when clicked
                           // "lengthChange": false,
                           "lengthMenu": [0],//---drop down page size
                            "searching": false,//--no change
                            "ordering": false,//--sorting
                            "deferLoading": ajaxOutput.totalrecord,//<----to total number of record from db
                            "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,//<----starting record
                            "pageLength": ajaxOutput.pageSize,//<----page size
                            "recordsFiltered": ajaxOutput.pageSize,//<---page size

                            "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize }, tableOptions, $table)
                        });
                    }
                    else {
                        $.each(ajaxOutput.Process.Message, function (key, value) {
                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                        });
                    }
                }




            },
            complete: function () {

            }
        });
    }
    function returnajaxPagination(ajaxInfo, tableOptions, tableid) {
        //{ apiurl, pageSize }
        return {
            url: ajaxInfo.apiurl,
            type: "post",
            data: function () {
                var info = tableid.DataTable().page.info();
                console.log('RETURN AJAX', info)
                //return { <antiforgery>:<antiforgery>, length: ajaxInfo.pageSize, page: info.page }
                let input = { pageSize: info.length, pageIndex: info.page };
                if (ajaxInfo.searchkey) {
                    input["Name"] = ajaxInfo.searchkey;
                }
                return input
            },
            dataType: "json",
            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            success: function (dtajaxOutput) {
                // $sideMenuOptions.body.html(pft_table_createtable(dtajaxOutput.Data, tableOptions));
                let table = tableid.DataTable();
                table.destroy();
                pft_table_newTableBody(tableid, dtajaxOutput.Data, tableOptions);

                tableid.dataTable({
                    "serverSide": true,
                    "processing": true,
                    //"lengthChange": false,
                    "lengthMenu": [10, 15, 20, 25, 50, 100],
                    "searching": false,
                    "ordering": false,
                    "deferLoading": dtajaxOutput.totalrecord,
                    "displayStart": dtajaxOutput.pageIndex * dtajaxOutput.pageSize,
                    "pageLength": dtajaxOutput.pageSize,
                    "recordsFiltered": dtajaxOutput.pageSize,
                    "ajax": returnajaxPagination(ajaxInfo, tableOptions, tableid)
                })

            },

        }
    }


        var tableOptionsTempOutFill = {
            iconButton: {
                buttons: [
                    
                    {
                       icon: "fa fa-pencil btnPerfectGridEdit",
                        action: function () {
                            let savedData = $(this).closest('tr').data('pData')

                            let $tablecontainer = $(this).closest('[perfect-tempTable]');
                            let tableKey = $tablecontainer.attr('perfect-tempTable');
                            let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                            //index attribute name in table row
                            let indexname = tableKey + 'index';
                            //index number in table row
                            let rindex = $(this).closest('tr').attr(indexname);
                            $tablecontainer.attr('perfect-tempTable-action', rindex);

                            console.log('Editclick', savedData);
                            //filling data in available inputs
                            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                                let $thisNode = $(this);
                                let pf_name = $thisNode.attr('name');
                                if ($thisNode.is('select')) {

                                    $thisNode.val(savedData[pf_name]).selectpicker('refresh');
                                }
                                else if ($thisNode.is('input')) {

                                    if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                        $thisNode.prop('checked', savedData[pf_name]);
                                    }
                                    else {
                                        $thisNode.val(savedData[pf_name]);
                                    }

                                }
                                else {
                                    $thisNode.val(savedData[pf_name]);
                                }


                            });



                        }
                    },
                    {
                        icon: "fa fa-trash btnPerfectGridDelete",
                        action: function () {
                            let $thistbl = $(this).closest('table');
                            let table = $thistbl.DataTable();
                            table.destroy();
                            if ($(this).closest('tbody').find('tr').length > 1) {
                                $(this).closest('tr').remove();
                                pft_table_slreset($thistbl);
                                $thistbl.dataTable({ paging: true });
                            }
                            else {
                                $thistbl.remove();
                            }

                        }
                    },
                ]
            },
            onlyShowColumn: [],
            hideColumn: [],
            serialNo: true,
            renameHeader: { },
            rowAttribute: [],
            isCheckType: []
        };

            function editServicemappinglist() {

            let $thisUser = $(this).closest('tr');
                let savedData = $thisUser.data('pData');

                $('.dataTable tr').removeClass("SelectForDelete");
                $(this).closest('tr').addClass('SelectForDelete');

                let inputData = {
                    __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),

                    ServiceMappingID: savedData.ServiceMappingID
                };
             console.log(inputData);
            //dbcall
                //$('#Servicemapping_formContainer').empty();
                    $.ajax({
                 url: '@Url.Action("GetServicemappingInfo", "ServiceMapping")',
                type: "POST",
                 // headers: { "token_key": "1234" },
                 data: inputData,//<---- Input json : data passed to controller
                dataType: "json",
              contentType: 'application/x-www-form-urlencoded;charset=utf-8',
                        success: function (ajaxOutput) {//<----- if ajax method executed succesfully,  we get the data passed from controller in this variable  => success: function (variable) {
                            console.log(ajaxOutput);
                         ///success
                            if (ajaxOutput.Process.IsProcess) {


                                $('#Servicemapping_formContainer').load("@Url.Action("LoadFormServiceMapping", "ServiceMapping")", function () {

                                    let $thisForm = $(this).find('[perfect-class="form"]');

                                    $thisForm.data({ 'pData': ajaxOutput.Data[0] });//setting pdata : which is used to get PostID when updating the  form in partial page

                                    

                                    ComDetailsTable_Fill($thisForm, 'cstatus', ajaxOutput.Data[0].Subservicemapping, tableOptionsTempOutFill)
                                    $thisForm.find('[perfect-tempTable="cstatus"]').find('table').dataTable({ searching: false, paging: false, ordering: false, info: false });
                                    
                                     

                                        
                                    $thisForm.find('[name=Employee]').val(ajaxOutput.Data[0].Employee),
                                    $thisForm.find('[name=EmployeeID]').val(ajaxOutput.Data[0].EmployeeID),

                                        $thisForm.find('[name="SMActive"]').prop('checked', ajaxOutput.Data[0]['SMActive']),

                                    $thisForm.find('button[name=add]').addClass('d-none');
                                    $thisForm.find('button[name=update]').removeClass('d-none');
                                    $thisForm.attr('perfect-onFormSuccess', 'fn_ServicemappingIndex_initialLoad');
                                    $sideMenuOptions.close();

                                });
                            }
                         
                            
                         
                },


            });

        }



             function deleteServicemapping() {
            let $row = $(this).closest('tr');

            let Saveddata = $row.data('pData');

                 $('.dataTable tr').removeClass("SelectForDelete");
                 $(this).closest('tr').addClass('SelectForDelete');
               $.ajax({
                   url: "@Url.Action("GetServiceMappingReasonList", "ServiceMapping")",
                   type: "GET",
                   contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                   success: function (ajaxReasonOutput) {
                       if (ajaxReasonOutput.Process.IsProcess) {

                          //old delete section


                           let confirmationDialogBoxOption = { heading: "Are you Sure?", body: "Do you want to remove  Service Assigned To  :  " + Saveddata.Employee+" " + " with Service Mapping ID  : " + Saveddata.ServiceMappingID + " ?", cancel: "No", confirm: "Yes", reason: ajaxReasonOutput.Data };
                            var res = ConfirmDialog(confirmationDialogBoxOption);
                            res.then(function (ret) {
                                if (ret) {

                                    let inputData = {
                                       __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(), //antiforgery token
                                        ID_ServiceMapping: Saveddata.ServiceMappingID,
                                        
                                        ReasonID: ret
                                    };

                                    $.ajax({
                                        url: "@Url.Action("DeleteServiceMapping", "ServiceMapping")",
                                        type: "POST",
                                        data: inputData, //antiforgery token removed json.stringify
                                        contentType: "application/x-www-form-urlencoded; charset=utf-8",//antiforgery token changed json->x-www-form-urlencode...
                                        success: function (data) {

                                            if (data.Process.IsProcess) {
                                                let table = $row.closest('table').DataTable()
                                                table.row($row).remove().draw();
                                                //loadcomplaintlistForm();
                                                fn_ComplaintListIndex_initialLoad();
                                                $.each(data.Process.Message, function (key, value) {
                                                    //toastr.success(value, "Success");
                                                    NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                                                });
                                            }
                                            else {
                                                $.each(data.Process.Message, function (key, value) {
                                                    // toastr.warning(value, "Error");
                                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                                });
                                            }
                                            //row.remove();
                                            //$(row).closest('table').reload()


                                        }
                                    });
                                }
                                else {
                                    //toastr.warning("Clicked no in comfirmation box", "Confirmation Box in table");
                                    NotificationMessage({ 'message': 'No option selected' });
                                }
                            });

                           //old delete section

                    }
                }

            });




        };



    </script>
}
