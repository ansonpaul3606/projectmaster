<div class="card ">
    <div class="card-header">
        <h4 class="card-title col-12">@ViewBag.PageTitle</h4>
        <span title="To View List" onclick="fn_showListView();"><svg id="Layer_1" class="layer" stroke="currentColor" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" height="20" width="20" viewBox="0 0 122.88 122.54"><title>To View List</title><path class="viewlst" d="M4.69,0H46.22a4.71,4.71,0,0,1,4.69,4.69V46a4.69,4.69,0,0,1-4.69,4.69H4.69a4.65,4.65,0,0,1-3.31-1.38l-.09-.09A4.67,4.67,0,0,1,0,46V4.69A4.71,4.71,0,0,1,4.69,0ZM89.44,61.94a26.56,26.56,0,0,1,10.18,2l.07,0a26.61,26.61,0,0,1,15.25,32.16,26.18,26.18,0,0,1-2.7,6.11l10.3,11.24a1.27,1.27,0,0,1-.07,1.8l-7.57,6.9a1.27,1.27,0,0,1-1.79-.07l-9.86-10.85a26.36,26.36,0,0,1-6.1,2.74,26.87,26.87,0,0,1-7.71,1.13,26.51,26.51,0,0,1-10.17-2l-.07,0A26.64,26.64,0,0,1,64.85,78.37l0-.07A26.6,26.6,0,0,1,89.44,61.94Zm15,11.59a21.38,21.38,0,0,0-6.89-4.61l-.06,0a21.22,21.22,0,0,0-23.07,4.64l-.07.07a21.25,21.25,0,0,0-4.54,6.83l0,.06a21.32,21.32,0,0,0-1.58,8.06,21.26,21.26,0,0,0,29.35,19.62,21.54,21.54,0,0,0,6.89-4.61l.07-.07a21.09,21.09,0,0,0,4.54-6.83l0-.06a21.35,21.35,0,0,0,0-16.17,21.34,21.34,0,0,0-4.62-6.9ZM4.69,63.2H46.22a4.71,4.71,0,0,1,4.69,4.7v41.34a4.68,4.68,0,0,1-4.69,4.69H4.69A4.69,4.69,0,0,1,0,109.24V67.9a4.71,4.71,0,0,1,4.69-4.7ZM68.78,0h41.53A4.71,4.71,0,0,1,115,4.69V46a4.71,4.71,0,0,1-4.69,4.69H68.78A4.71,4.71,0,0,1,64.09,46V4.69a4.69,4.69,0,0,1,1.37-3.31l.1-.09A4.67,4.67,0,0,1,68.78,0Z"></path></svg></span>
    </div>
    <div class="card-body">
        <form id="" class="form-valide" perfect-class="form" action="#" method="post" perfect-onFormSuccess="">
            <div class="">
                <div class="row">
                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Effect Date</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-6">
                                <input type="date" id="EffectDate" class="form-control perfectValidate_date" name="EffectDate" perfect-class="formGroupControl" perfect-ctype="date" max="2050-01-01" onchange="datecheck(this)" perfect-css="date" />
                                <div class="invalid-feedback animated fadeInUp limit-check" style="display: block;"></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">AMC Type</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-6 PerError">
                                <select class="form-control perfectValidate_string" name="AMCTypeName" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select">
                                    <option value="">Please select</option>
                                    @if (!(Model.AMCType is null))
                                    {
                                        foreach (var AMC in Model.AMCType)
                                        {
                                            <option value="@AMC.AMCTypeID">@AMC.AMCName</option>
                                        }
                                    }
                                </select>
                                <div class="text-danger temptableError"></div>
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Account Head</span>
                                @*<span class="text-danger">*</span>*@
                            </label>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    <input type="text" class="form-control perfectValidate_string_nm" name="AccountHeadName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                                    <input type="hidden" name="FK_AccountHead" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" value="" />

                                    <div class="input-group-append">
                                        <button id="addaccounthead-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchVal(this,16,'Account Head List',['','','FK_AccountHeadSub','AccountSubHeadName'],AMCSettingsTransMode)" Criterea1="0" Criterea2="0" BindName="AccountHeadName" BindVal="FK_AccountHead"></button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Account Sub Head</span>

                            </label>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    <input type="text" class="form-control perfectValidate_string_nm" name="AccountSubHeadName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled />
                                    <input type="hidden" name="FK_AccountHeadSub" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" value="" />

                                    <div class="input-group-append">
                                        <button id="addaccountsubhead-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchVal(this,17,'Account Sub Head List',['FK_AccountHead','AccountHeadName'],AMCSettingsTransMode)" Criterea1="FK_AccountHead" Criterea2="0" BindName="AccountSubHeadName" BindVal="FK_AccountHeadSub"></button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Tax Group</span>
                                @*<span class="text-danger">*</span>*@

                            </label>
                            <div class="col-sm-6">
                                @*<select class="form-control perfectValidate_string_nm" name="TaxGroupID" perfect-class="formGroupControl" perfect-ctype="select" onchange="EnableCheckBox(this)" perfect-css="select">*@
                                    <select class="form-control perfectValidate_string_nm" name="TaxGroupID" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" onchange="EnableCheckbox(this)">
                                        <option value="0">Please Select </option>

                                        @if (!(Model.TaxgroupList is null))
                                        {
                                            foreach (var unit in Model.TaxgroupList)
                                            {
                                                <option value="@unit.TaxGroupID">@unit.TaxGroupName</option>
                                            }
                                        }

                                    </select>
</div>
                            &nbsp; &nbsp; &nbsp; &nbsp;
                            <label class="form-check-label" perfect-class="formCheckLabel">
                                <input type="checkbox" class="form-check-input" name="IncludeTax" perfect-class="formCheckInput" perfect-ctype="checkbox" perfect-css="checkbox" disabled>Include Tax
                            </label>
                        </div>
                    </div>
                    <div class="col-sm-12">
                        <div class="accordion__item">
                            <div class="accordion__header collapsed" id="MasterProjectDetails" data-target="#active-header_collapseTwo">
                                <span class="accordion__header--icon"></span>
                                <span class="accordion__header--text">AMC Details</span>
                            </div>
                        </div>


                        <div class="row">
                            <div class="col-sm-12 " perfect-class="TempTableProduct">
                                <br />
                                <div class="row">

                                    <div class="col-sm-4">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">From Month</span><span class="text-danger">*</span>
                                            </label>
                                            <div class="col-sm-8">
                                                <input type="text" id="AMCSMonthFrom" class="form-control text-right" name="AMCSMonthFrom" perfect-tempTable-AMCSettingsDetails="AMCSMonthFrom" perfect-class="formGroupControl" onkeypress='return /[0-9]/i.test(event.key)' onfocus="this.oldvalue = this.value;" perfect-ctype="input" perfect-css="input" maxlength="5" />
                                                <div class="text-danger temptableError"></div>
                                            </div>

                                        </div>

                                    </div>
                                    <div class="col-sm-4">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">To Month</span><span class="text-danger">*</span>
                                            </label>
                                            <div class="col-sm-8">
                                                <input type="text" id="AMCSMonthTo" class="form-control text-right" name="AMCSMonthTo" perfect-tempTable-AMCSettingsDetails="AMCSMonthTo" perfect-class="formGroupControl" onkeypress='return /[0-9]/i.test(event.key) ' onfocus="this.oldvalue = this.value;" perfect-ctype="input" perfect-css="input" maxlength="5" />
                                                <div class="text-danger temptableError"></div>
                                            </div>

                                        </div>
                                    </div>
                                    <div class="col-sm-4">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">Renewal Period</span><span class="text-danger">*</span>
                                            </label>
                                            <div class="col-sm-8">
                                                <input type="text" id="AMCRenewPeriod" class="form-control text-right" name="AMCRenewPeriod" perfect-tempTable-AMCSettingsDetails="AMCRenewPeriod" perfect-class="formGroupControl" onkeypress='return /[0-9]/i.test(event.key)' perfect-ctype="input" perfect-css="input" maxlength="5" />
                                                <div class="text-danger temptableError"></div>
                                            </div>

                                        </div>
                                    </div>
                                    <div class="col-sm-4">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">No.of Services</span><span class="text-danger">*</span>
                                            </label>
                                            <div class="col-sm-8">
                                                <input type="text" class="form-control text-right" placeholder="" name="AMCSNoOfServices" perfect-tempTable-AMCSettingsDetails="AMCSNoOfServices" oninput="this.value = this.value.replace(/[^0-9]/g, '').replace(/(\..*)\./g, '$1');" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" maxlength="5" />
                                                <div class="text-danger temptableError"></div>
                                            </div>

                                        </div>
                                    </div>
                                    <div class="col-sm-4">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">Calculation</span><span class="text-danger">*</span>
                                            </label>
                                            <div class="col-sm-8">
                                                <select class="form-control" name="AMCSCalMethod"id="AMCSCalMethod" perfect-tempTable-AMCSettingsDetails="AMCSCalMethod"  onchange="EnableCaption(this)">

                                                    <option value="">Please Select </option>
                                                    <option id="Amount" value="1">Amount</option>
                                                    <option id="Percentage" value="2">Percentage</option>
                                                </select>
                                                <div class="text-danger temptableError"></div>
                                            </div>

                                        </div>
                                    </div>
                                    <div class="col-sm-4">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel" name="lblAmount">Amount</span><span class="text-danger">*</span>

                                            </label>
                                            <div class="col-sm-7">
                                                <div class="input-group">
                                                    <input type="text" class="form-control text-right" placeholder="" id="AMCSAmount" name="AMCSAmount" perfect-tempTable-AMCSettingsDetails="AMCSAmount" perfect-class="formGroupControl" oninput="decimalpnt(this,'AMCSAmount',3)" perfect-ctype="input" perfect-css="input" maxlength="10" />
                                                    &nbsp;&nbsp;&nbsp;&nbsp;<button class="btn btn-primary1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" title="Add New AMC Type" onclick="fn_createAMCSetting(this,'AMCSettingsDetails',tableOptionsTempOut)"><i class="fa fa-plus" aria-hidden="true"></i></button>
                                                    &nbsp;&nbsp;<button class="btn btn-light1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" onclick="fn_resetAMCData(this)"><i class="fa fa-refresh" aria-hidden="true"></i></button>
                                                    <div class="text-danger temptableError"></div>

                                                </div>
                                                </div>
                                            </div>

                                      
                                    </div>
                                </div>
                                <div class="row">
                                   
                                    <div>

                                       

                                    </div>

                                </div>

                                <div class="row">
                                    <div class="col-sm-12">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <div class="table-responsive" perfect-tempTable="AMCSettingsDetails" perfect-tempTable-lastindex="0" perfect-tempTable-action="0">
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-12">

                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>   
            <div class="card-footer text-right" perfect-class="formFooter">
                @if (ViewBag.PagedAccessRights.UsrrlTyEdt)
                {
                    <button id="" type="button" class="btn btn-primary mr-3 addcompany-jq-addnewuserUpdate d-none" name="update" perfect-css="button" onclick="updateAMCTSettings(this)"><i class="fa fa-refresh fa-spin  loaderClass"></i>Update</button>
                }
                @if (ViewBag.PagedAccessRights.UsrrlTyAdd)
                {
                    <button id="addcompany-jq-addnewuser" type="button" class="btn btn-primary mr-3 " name="add" perfect-css="button" onclick="SaveAMCSettings(this)"><i class="fa fa-refresh fa-spin loaderClass "></i>Save</button>
                }
                <button type="button" class="btn btn-light" perfect-css="button" onclick="ResetButton(this)" name="reset">Clear</button>
            </div>
        </form>
    </div>
</div>

<script src="~/Scripts/jqDOM/searchDOMCreation.js"></script>
<script>

    $(document).ready(function () {
        initFunctions('form');
       

    });

    function ResetButton(ele) {
        loadAMCSettingsForm();
        fn_resetAMCData();
    }
    function decimalpnt(ele, name, range) {

        let input = $('#' + name);
        ele.value = ele.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');
        let t = ele.value;
        ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t;
        input.on('keydown', function () {
            if (ele.value.includes('.')) {

            }
            var key = event.keyCode || event.charCode;
            if (key == 8 || key == 46) { }
            else {
                if (ele.value.length == 10) {
                    ele.value = ele.value + '.';
                }
            }

        });

    }
    function fn_resetAMCData(ele) {
    
        let $container = $(ele).closest('[perfect-class="form"]');
        $container.find('[name=AMCSMonthFrom]').val('')
        $container.find('[name=AMCSMonthTo]').val('');
        $container.find('[name=AMCRenewPeriod]').val('')
        $container.find('[name="AMCSCalMethod"]').val('').selectpicker('refresh');
        $container.find('[name="AMCSAmount"]').val('');
        $container.find('[name="AMCSNoOfServices"]').val('');
    }

  
    function datecheck(ele) {
    
        let $thisForm = $(ele).closest('[perfect-class="formGroup"]');
        let Visitdate = $thisForm.find('[name="EffectDate"]').val();
        var enqDate = new Date(Visitdate);
        enqDate.setHours(0, 0, 0, 0)
        var today = new Date();
        today.setHours(0, 0, 0, 0)
        let errorClass4 = '.temptableErrors';
        if (enqDate > today) {
            $thisForm.find('[name="EffectDate"]').closest('[perfect-class="formGroup"]').find(errorClass4).attr("style", "display:block");
            $thisForm.find('[name="EffectDate"]').closest('[perfect-class="formGroup"]').find(errorClass4).text('Future Date Not Allowed');
        }
        else if (enqDate < today) {
            $thisForm.find('[name="EffectDate"]').closest('[perfect-class="formGroup"]').find(errorClass4).attr("style", "display:none");
            $thisForm.find('[name="EffectDate"]').closest('[perfect-class="formGroup"]').find(errorClass4).text('');
        }
    }

    function EnableCaption(ele) {
       debugger;
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let Calculation = $thisForm.find('[name=AMCSCalMethod]').val() == "" ? "0" : $thisForm.find('[name=AMCSCalMethod]').val();
        if (Calculation == 1) {    
            $thisForm.find('[name="lblAmount"]').text('Amount');
            $thisForm.find('[name="AMCSAmount"]').val('');
           $thisForm.find('[name="FK_AccountHead"]').val();
            $thisForm.find('[name="FK_AccountHeadSub"]').val();
        }
        if (Calculation == 2) {                      
            $thisForm.find('[name="lblAmount"]').text('Percentage');
            $thisForm.find('[name="AMCSAmount"]').val('');
            $thisForm.find('[name="FK_AccountHead"]').val();
            $thisForm.find('[name="FK_AccountHeadSub"]').val();
        }

    }

  

    function fn_createAMCSetting(element, tkey, uniq = []) {
        debugger;

        let $thisForm = $(element).closest('[perfect-class="form"]');
      
        //  let AMCSMonthTo = $thisForm.find('[name=AMCSMonthTo]').val();

        let tableKey = tkey;
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');

        let insertData = {};
        let tableOptionsTemp = tableOptionsTempOut;

        let unique = (uniq) ? uniq : [];

        let isValid = true;
        let errorClass = '.temptableError';
        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="AMCSMonthFrom"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="AMCSMonthFrom"]').val() == "") {
            isValid = false;
            $thisForm.find('[perfect-tempTable-' + tableKey + '="AMCSMonthFrom"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter From Month');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="AMCSMonthFrom"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }

        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="AMCSMonthTo"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="AMCSMonthTo"]').val() == "") {
            isValid = false;
            $thisForm.find('[perfect-tempTable-' + tableKey + '="AMCSMonthTo"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter Month To');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="AMCSMonthTo"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }
        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="AMCRenewPeriod"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="AMCRenewPeriod"]').val() == "") {
            isValid = false;
            $thisForm.find('[perfect-tempTable-' + tableKey + '="AMCRenewPeriod"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter Renewal Period');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="AMCRenewPeriod"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }

        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="AMCSAmount"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="AMCSAmount"]').val() == "") {
            isValid = false;
            $thisForm.find('[perfect-tempTable-' + tableKey + '="AMCSAmount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter Amount/Percentage');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="AMCSAmount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }

        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="AMCSCalMethod"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="AMCSCalMethod"]').val() == "") {
            isValid = false;
            $thisForm.find('[perfect-tempTable-' + tableKey + '="AMCSCalMethod"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Calculation Method');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="AMCSCalMethod"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }


        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="AMCSNoOfServices"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="AMCSNoOfServices"]').val() == "") {
            isValid = false;
            $thisForm.find('[perfect-tempTable-' + tableKey + '="AMCSNoOfServices"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter No. of Services');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="AMCSNoOfServices"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }
        
        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="AMCSCalMethod"]').val() == 2) {
            debugger
            let valmethod = $thisForm.find('[perfect-tempTable-' + tableKey + '="AMCSAmount"]').val();
            if (valmethod > 100) {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="AMCSAmount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter Percentage in Between 1 to 100');
                isValid = false;
            }
            else {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="AMCSAmount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }
        }

        let AMCSMonthFrom = $thisForm.find('[name=AMCSMonthFrom]').val();
        let AMCSMonthTo = $thisForm.find('[name=AMCSMonthTo]').val();
        let AMCSRenewalPeriod = $thisForm.find('[name=AMCRenewPeriod]').val();
        
        if (parseFloat(AMCSMonthFrom) > parseFloat(AMCSMonthTo)) {
            debugger
           // NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'To Month should be greater than From Month ' });
            $thisForm.find('[perfect-tempTable-' + tableKey + '="AMCSMonthTo"]').closest('[perfect-class="formGroup"]').find(errorClass).text('To Month should be greater than From Month');
        }
        if (parseFloat(AMCSRenewalPeriod) > parseFloat(AMCSMonthTo)) {
            debugger
            //NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'To Month should be greater than Renewal Period ' });
            $thisForm.find('[perfect-tempTable-' + tableKey + '="AMCSMonthTo"]').closest('[perfect-class="formGroup"]').find(errorClass).text('To Month should be greater than Renewal Period');
        }
        if (parseFloat(AMCSMonthFrom) > 0 && parseFloat(AMCSMonthFrom) < parseFloat(AMCSMonthTo) && parseFloat(AMCSRenewalPeriod) <= parseFloat(AMCSMonthTo)) {

            let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
            let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
            let indexname = tkey + 'index';
            tableOptionsTemp.rowAttribute.push(indexname);
            tableOptionsTemp.hideColumn.push(indexname);
            let updateCond = '';
            let isNew = true;

            if (thisactionIndex > 0) {
                insertData[indexname] = thisactionIndex;
                updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
                isNew = false;
            }
            else {
                insertData[indexname] = lastIndex + 1;
                $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
                isNew = true;
            }
           

          

            if (unique.length > 0) {
                debugger
                let prevData = [];
                $tblcontainer.find('table > tbody').find('tr').each(function () {
                    if (isNew) {
                        prevData.push($(this).data('pData'));
                        console.log('check 2');
                     
                    }
                    else {
                        if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                            prevData.push($(this).data('pData'));
                            console.log('check 2.1');
                        }
                    }
                   
                   
                })
                unique.forEach(function (key, i) {
                    console.log('unid -> key:' + key + "| index :" + i);
                    let $thisEle = $thisForm.find('[perfect-tempTable-' + tableKey + '="' + key + '"]');
                    let headerEleName = $thisEle.attr('perfect-tempTable-' + tableKey);
                    let atname = $thisEle.attr('name');
                    let cvalue;

                    //console.log('len')
                    if ($thisEle.length != 0) {
                        let $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
                        let errmessage = headerEleName + " Already exits"

                        //getting current value in cval
                        if ($thisEle.is('select')) {
                            cvalue = $thisEle.val();
                        }
                        else if ($thisEle.is('input')) {

                            let inputEleType = $thisEle.attr('type').toLocaleLowerCase();

                            if (inputEleType == 'checkbox') { cvalue = $thisEle.is(':checked'); }
                            else if (inputEleType == 'hidden') { cvalue = $thisEle.val(); }
                            else { cvalue = $thisEle.val(); }
                        }
                        else { cvalue = $thisEle.val(); }

                        // console.log('cvalue ->' + cvalue);

                        //searching in previous data
                        if (prevData.find(a => a[atname] == cvalue)) {
                            // console.log('Search =>' + cvalue + '| attr :' + atname)
                            $errorElement.text(errmessage);
                            isValid = false;
                        }
                    }
                });

            }

            if (isValid) {
                debugger
                $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                    let $this = $(this);
                    let headerName = $this.attr('perfect-tempTable-' + tableKey);
                    let nameAttr = $this.attr('name');
                    if ($this.is('select')) {
                        switch (headerName) {
                            case "AMCSCalMethod":
                                headerName = "Calculation";

                                break;
                            default:
                                break;
                        }
                        tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                        tableOptionsTemp.hideColumn.push(nameAttr)
                        if ($this.val() != null) {
                            let selectText = ($this.val().length == 0) ? '' : $this.children(":selected").text();
                            insertData[nameAttr + '_d'] = selectText;
                        }
                        else {
                            let selectText = ($this.val() == null) ? '' : $this.children(":selected").text();
                            insertData[nameAttr + '_d'] = selectText;
                        }
                        insertData[nameAttr] = $this.val();

                        $this.val('').selectpicker('refresh');
                    }
                    else if ($this.is('input')) {

                        let inputType = $this.attr('type').toLocaleLowerCase();

                        if (inputType == 'checkbox') {

                            insertData[nameAttr] = $this.is(':checked');

                            tableOptionsTemp.isCheckType.push(nameAttr)
                            //clear field
                            $this.prop('checked', false);

                        }
                        else if (inputType == 'hidden') {
                            insertData[nameAttr] = $this.val();
                            $this.val('');

                        }

                        else {
                            insertData[nameAttr] = $this.val();

                            $this.val('');
                        }
                    }
                    else {
                        insertData[nameAttr] = $this.val();

                        $this.val('');
                    }
                });

                if (isNew) {
                    if ($tblcontainer.find('table').length == 0) {
                        $tblcontainer.append(pft_table_createtable([insertData], tableOptionsTemp));
                        console.log('check 4');
                    }
                    else {
                        let table = $tblcontainer.find('table').DataTable()
                        table.destroy()
                        pft_table_addTableRow($tblcontainer.find('table'), insertData, tableOptionsTemp);
                        console.log('check 4.2');
                    }
                }
                else {
                    let table = $tblcontainer.find('table').DataTable()
                    table.destroy()
                    pft_table_replaceTableRow($tblcontainer.find('table'), updateCond, insertData, tableOptionsTemp);
                    console.log('check 4.2');
                }

                $tblcontainer.attr('perfect-tempTable-action', 0);
                $thisForm.find('[name=AMCSMonthFrom]').val(parseInt(AMCSMonthTo)+1);
            }

          
            return isValid;

           
           


        }
       

        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="AMCSMonthTo"]').closest('[perfect-class="formGroup"]').find(errorClass).text('From month ,To month and Renewal Period Should not be equal');
            //NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'From month ,To month and Renewal Period Should not be equal' });

        }

      
    }
        var tableOptionsTempOut = {
            iconButton: {
                buttons: [
                    {
                        icon: "fa fa-pencil btnPerfectGridEdit",
                        action: function () {
                            let Saveddata = $(this).closest('tr').data('pData')

                            let $tablecontainer = $(this).closest('[perfect-tempTable]');
                            let tableKey = $tablecontainer.attr('perfect-tempTable');
                            let $thisForm = $tablecontainer.closest('[perfect-class="form"]');

                            let indexname = tableKey + 'index';


                            let rindex = $(this).closest('tr').attr(indexname);

                            $tablecontainer.attr('perfect-tempTable-action', rindex);

                            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                                let $thisNode = $(this);
                                let pf_name = $thisNode.attr('name');
                                if ($thisNode.is('select')) {

                                    $thisNode.val(Saveddata[pf_name]).selectpicker('refresh');

                                }
                                else if ($thisNode.is('input')) {
                                    let inputType = $thisNode.attr('type').toLocaleLowerCase();
                                    if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                        $thisNode.prop('checked', Saveddata[pf_name]);
                                    }
                                    else {
                                        $thisNode.val(Saveddata[pf_name]);
                                    }
                                }
                                else {
                                    $thisNode.val(Saveddata[pf_name]);
                                }
                            });
                        }
                    },

                    {
                        icon: "fa fa-trash btnPerfectGridDelete",
                        action: function () {
                            let $thistbl = $(this).closest('table');
                            let table = $thistbl.DataTable();
                            table.destroy();
                            if ($(this).closest('tbody').find('tr').length > 1) {
                                $(this).closest('tr').remove();
                                pft_table_slreset($thistbl);
                            }
                            else {
                                $thistbl.remove();
                            }

                        }
                    },
                ]
            },

           
            hideColumn: ['ID_AMCSettingsDetails', 'FK_AccountHead','FK_AccountHeadSub'],
            serialNo: true,
            renameHeader: { "SlNo":"Sl No.","EffectDate":"Effect Date","AMCSMonthFrom": "From Month1R", "AMCSMonthTo": "To Month1R", "AMCSNoOfServices": "No.of Services1R","AMCRenewPeriod":"Renewal Period1R", "AMCSCalMethod": "Calculation","AMCSAmount":"Amount/Percentage1R"},
            rowAttribute: [],
            isCheckType: []
    };

    function createItems(ele, callback) {
        debugger
        if (fn_createAMCSetting(ele, 'AMCSettingsDetails', [])) {
            callback(1);
        }
        else {
            callback(0);
        }
    }

    function SaveAMCSettings(ele) {
        debugger;
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let $tblcontainer = $thisForm.find('[perfect-tempTable="AMCSettingsDetails"]');


        if ($thisForm.valid()) {


            let AMCTypeName = $thisForm.find('[name=AMCTypeName]').val();
            let AMCTypeID = $thisForm.find('[name=AMCTypeName]').val();
            let Acounthead = $thisForm.find('[name="FK_AccountHead"]').val();
            let AccountHeadSub = $thisForm.find('[name="FK_AccountHeadSub"]').val();
          

            
            if (AMCTypeName == "" || AMCTypeName == "undefined") {
                AMCTypeName = " ";
            }
            console.log("AMCTypeID", AMCTypeID)
          

           

            let AMCSettingsDetails = [];
            $thisForm.find('[perfect-tempTable="AMCSettingsDetails"]').find('tbody').find('tr').each(function () {
                AMCSettingsDetails.push($(this).data('pData'));
            })
            console.log("AMCSettingsDetails: ", AMCSettingsDetails);

            ID_AMCSettings = 0;

            let _ActionUrl = "@Url.Action("SaveAMCSettings", "AMCSettings")";
            let EffectDate = $thisForm.find('[name="EffectDate"]').val().trim();
            if (($tblcontainer.attr('perfect-tempTable-action')) != 0 && AMCSettingsDetails.length == 1) { AMCSettingsDetails = []; }
            if (AMCSettingsDetails.length <= 0) {
                //  createatable(ele, 'ProductType', ['Name']);
                createItems(ele, function (result) {
                    if (result == 1) {
                        $thisForm.find('[perfect-tempTable="AMCSettingsDetails"]').find('tbody').find('tr').each(function () {
                            AMCSettingsDetails.push($(this).data('pData'));
                        })
                    }


                })

            }
           
            if (AMCSettingsDetails.length != 0) {


                $(ele).prop('disabled', true);

                var inputData = {
                    'EffectDate': EffectDate,
                    'FK_AMCType': AMCTypeName,
                    'FK_AccountHead': Acounthead,
                    'FK_AccountHeadSub': AccountHeadSub,
                    'TaxGroupID': $thisForm.find('[name="TaxGroupID"]').val(),
                    'IncludeTax': $thisForm.find('[name="IncludeTax"]').is(':Checked'),
                    'AMCSettingsDetails': AMCSettingsDetails,
                    'TransMode': AMCSettingsTransMode
                }

                $.ajax({
                    url: _ActionUrl,
                    type: "POST",
                    data: inputData,
                    dataType: "json",
                    contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                    success: function (ajaxOutput) {
                        debugger;
                        if (ajaxOutput.Process.IsProcess) {
                            $.each(ajaxOutput.Process.Message, function (key, value) {
                                NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });

                            });



                            $thisForm.find('[perfect-ctype="select"]').val('').selectpicker('refresh');
                            $thisForm.find('[perfect-ctype="input"]').val('');
                            $thisForm.find('[perfect-ctype="date"]').val('');
                            ResetButton();
                            InitailAMCSettings();
                            let onSuccess = $thisForm.attr('perfect-onFormSuccess')
                            if (onSuccess) {

                                window[onSuccess]($thisForm);
                                //InitailAMCSettings();
                            }
                        }
                        else {
                            $.each(ajaxOutput.Process.Message, function (key, value) {
                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                            });
                        }
                       
                    },
                    complete: function () {
                        $(ele).prop('disabled', false);
                    }
                });
            }
            else {
                //NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Please Enter AMC Details ' });
                //$(ele).prop('disabled', false);
                let $modal = createSearchModalDOM();

                let $message = '<span>Enter Atleast One data in AMC Details !!!</span>';
                $modal.modal.find('.modal-body')
                    .addClass('text-black')
                    .html($message);
                $modal.modal.find('.modal-title')
                    .addClass('text-primary')
                    .text('Message');

                $modal.modal.show();
            }
        }
    }



    function updateAMCTSettings(ele) {
        debugger;
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let Saveddata = $thisForm.data('pData');
        let $tblcontainer = $thisForm.find('[perfect-tempTable="AMCSettingsDetails"]');
        if ($thisForm.valid()) {


            let AMCTypeName = $thisForm.find('[name=AMCTypeName]').val();
            let AMCTypeID = $thisForm.find('[name=AMCTypeName]').val();
            let Acounthead = $thisForm.find('[name="FK_AccountHead"]').val();
            let AccountHeadSub = $thisForm.find('[name="FK_AccountHeadSub"]').val();
            if (AMCTypeName == "" || AMCTypeName == "undefined") {
                AMCTypeName = " ";
            }
            console.log("AMCTypeID", AMCTypeID)
          

           

            let AMCSettingsDetails = [];
            $thisForm.find('[perfect-tempTable="AMCSettingsDetails"]').find('tbody').find('tr').each(function () {
                AMCSettingsDetails.push($(this).data('pData'));
            })
            console.log("AMCSettingsDetails: ", AMCSettingsDetails);

            ID_AMCSettings = 0;
            let _ActionUrl = "@Url.Action("UpdateAMCSettings", "AMCSettings")";
          //  let EffectDate = $thisForm.find('[name="EffectDate"]').val().trim();
            if (($tblcontainer.attr('perfect-tempTable-action')) != 0 && AMCSettingsDetails.length == 1) { AMCSettingsDetails = []; }
            if (AMCSettingsDetails.length <= 0) {
                //  createatable(ele, 'ProductType', ['Name']);
                createItems(ele, function (result) {
                    if (result == 1) {
                        $thisForm.find('[perfect-tempTable="AMCSettingsDetails"]').find('tbody').find('tr').each(function () {
                            AMCSettingsDetails.push($(this).data('pData'));
                        })
                    }


                })

            }
            ID_AMCSettings = Saveddata.FK_AMCSettings;
            if (AMCSettingsDetails.length > 0) {
                $(ele).prop('disabled', true);
                var inputData = {
                    __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                    'ID_AMCSettings': ID_AMCSettings,
                    'EffectDate': $thisForm.find('[name="EffectDate"]').val(),
                    'FK_AMCType': $thisForm.find('[name="AMCTypeName"]').val().trim(),
                    'FK_AccountHead': $thisForm.find('[name="FK_AccountHead"]').val(),
                    'FK_AccountHeadSub': $thisForm.find('[name="FK_AccountHeadSub"]').val(),
                    'TaxGroupID': $thisForm.find('[name="TaxGroupID"]').val(),
                    'IncludeTax': $thisForm.find('[name="IncludeTax"]').is(':Checked'),
                    'AMCSettingsDetails': AMCSettingsDetails,
                    'TransMode': AMCSettingsTransMode
                };
                console.log('update input', inputData);
                $.ajax({
                    url: _ActionUrl,
                    type: "POST",
                    data: inputData,
                    dataType: "json",
                    contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                    success: function (ajaxOutput) {
                        debugger;
                        if (ajaxOutput.Process.IsProcess) {
                            $.each(ajaxOutput.Process.Message, function (key, value) {
                                NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });

                            });



                            $thisForm.find('[perfect-ctype="select"]').val('').selectpicker('refresh');
                            $thisForm.find('[perfect-ctype="input"]').val('');
                            $thisForm.find('[perfect-ctype="date"]').val('');
                            InitailAMCSettings();
                            ResetButton();
                            let onSuccess = $thisForm.attr('perfect-onFormSuccess')
                            if (onSuccess) {

                                window[onSuccess]();
                                InitailAMCSettings();
                            }
                        }
                        else {
                            $.each(ajaxOutput.Process.Message, function (key, value) {
                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                            });
                        }
                       
                    },
                    complete: function () {
                        $(ele).prop('disabled', false);
                    }
                });
            }
            else {
                //NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Please Enter AMC Details ' });
                //$(ele).prop('disabled', false);
                let $modal1 = createSearchModalDOM();

                let $message = '<span>Enter Atleast One data in AMC Details !!!</span>';
                $modal1.modal.find('.modal-body')
                    .addClass('text-black')
                    .html($message);
                $modal1.modal.find('.modal-title')
                    .addClass('text-primary')
                    .text('Message');

                $modal1.modal.show();
            }
        @*let $thisForm = $(ele).closest('[perfect-class="form"]');
        let Saveddata = $thisForm.data('pData');
        console.log('Saveddata', Saveddata);
        let Acounthead = $thisForm.find('[name="FK_AccountHead"]').val();
        let AccountHeadSub = $thisForm.find('[name="FK_AccountHeadSub"]').val();
        if (Acounthead == "") {
            Acounthead = 1;
        }

        let Accountheadname = $thisForm.find('[name="AccountHeadName"]').val();
        let Accountsubheadname = $thisForm.find('[name="AccountSubHeadName"]').val();
        if (Accountheadname != "" || Accountsubheadname != "") {
            Acounthead = 1;
            AccountHeadSub = 1;
        }
        ID_AMCSettings = Saveddata.FK_AMCSettings;
        if ($thisForm.valid()) {
            $(ele).prop('disabled', true);
            let AMCSettingsDetails = [];
            $thisForm.find('[perfect-tempTable="AMCSettingsDetails"]').find('tbody').find('tr').each(function () {
                AMCSettingsDetails.push($(this).data('pData'));
            })
            console.log("AMCSettingsDetails: ", AMCSettingsDetails);

            _ActionUrl = "@Url.Action("UpdateAMCSettings", "AMCSettings")";

            var inputData = {
                __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                'ID_AMCSettings': ID_AMCSettings,
                'EffectDate': $thisForm.find('[name="EffectDate"]').val(),
                'FK_AMCType': $thisForm.find('[name="AMCTypeName"]').val().trim(),
                'FK_AccountHead': Acounthead,
                'FK_AccountHeadSub': AccountHeadSub,
                'TaxGroupID': $thisForm.find('[name="TaxGroupID"]').val(),
                'AMCSettingsDetails': AMCSettingsDetails,
                'TransMode': AMCSettingsTransMode
            };
            if (AMCSettingsDetails.length > 0) {
                $.ajax({
                    url: _ActionUrl,
                    type: "POST",
                    data: inputData,
                    dataType: "json",
                    contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                    success: function (ajaxOutput) {
                        if (ajaxOutput.Process.IsProcess) {

                            $.each(ajaxOutput.Process.Message, function (key, value) {
                                NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                            });
                            loadAMCSettingsForm();
                            let onSuccess = $thisForm.attr('perfect-onFormSuccess')
                            if (onSuccess) {
                                window[onSuccess]();
                            }
                            loadAMCSettingsList($thisForm);

                            console.log('> update new Local success data', ajaxOutput);
                        }



                    },
                    complete: function () {
                        $(ele).prop('disabled', false);
                    }
                });
            }*@

          
           
        }
    }
    function EnableCheckbox(ele) {
        debugger
        var selectedValue = $("[name='TaxGroupID']").val();
        var checkbox = $("[name='IncludeTax']");
        if (selectedValue == 0) {
            checkbox.prop("disabled", true)
            $(checkbox).prop("checked", false);
        }
        else {
            checkbox.prop("disabled", false)
        }


    }


    //function fnValidation(ele) {
    //    debugger;
    //    let $thisForm = $(ele).closest('[perfect-class="form"]');
    //    let MnthFrom = parseInt($thisForm.find('[name=AMCSMonthFrom]').val());
    //    let MnthTo = parseInt($thisForm.find('[name=AMCSMonthTo]').val());
    //    if (MnthFrom > MnthTo) {
    //            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'To Month should be greater than From Month ' });                
    //    }
    //}
</script>