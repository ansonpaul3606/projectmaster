@*----------------------------------------------------------------------
    Created By	: Kavya K
    Created On	: 30/01/2023
    Purpose		: AMC Warranty Mapping
    -------------------------------------------------------------------------

    Modification On
    By

    -------------------------------------------------------------------------*@

@model PerfectWebERP.Models.AMCWarrantyMappingModel.DropDownListModel
<style>
</style>

<div class="card ">

    <div class="card-header">


        <h4 class="card-title col-12">@ViewBag.PageTitle</h4>
        <span title="To View List" onclick="fn_showListView();"><svg id="Layer_1" class="layer" stroke="currentColor" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" height="20" width="20" viewBox="0 0 122.88 122.54"><title>To View List</title><path class="viewlst" d="M4.69,0H46.22a4.71,4.71,0,0,1,4.69,4.69V46a4.69,4.69,0,0,1-4.69,4.69H4.69a4.65,4.65,0,0,1-3.31-1.38l-.09-.09A4.67,4.67,0,0,1,0,46V4.69A4.71,4.71,0,0,1,4.69,0ZM89.44,61.94a26.56,26.56,0,0,1,10.18,2l.07,0a26.61,26.61,0,0,1,15.25,32.16,26.18,26.18,0,0,1-2.7,6.11l10.3,11.24a1.27,1.27,0,0,1-.07,1.8l-7.57,6.9a1.27,1.27,0,0,1-1.79-.07l-9.86-10.85a26.36,26.36,0,0,1-6.1,2.74,26.87,26.87,0,0,1-7.71,1.13,26.51,26.51,0,0,1-10.17-2l-.07,0A26.64,26.64,0,0,1,64.85,78.37l0-.07A26.6,26.6,0,0,1,89.44,61.94Zm15,11.59a21.38,21.38,0,0,0-6.89-4.61l-.06,0a21.22,21.22,0,0,0-23.07,4.64l-.07.07a21.25,21.25,0,0,0-4.54,6.83l0,.06a21.32,21.32,0,0,0-1.58,8.06,21.26,21.26,0,0,0,29.35,19.62,21.54,21.54,0,0,0,6.89-4.61l.07-.07a21.09,21.09,0,0,0,4.54-6.83l0-.06a21.35,21.35,0,0,0,0-16.17,21.34,21.34,0,0,0-4.62-6.9ZM4.69,63.2H46.22a4.71,4.71,0,0,1,4.69,4.7v41.34a4.68,4.68,0,0,1-4.69,4.69H4.69A4.69,4.69,0,0,1,0,109.24V67.9a4.71,4.71,0,0,1,4.69-4.7ZM68.78,0h41.53A4.71,4.71,0,0,1,115,4.69V46a4.71,4.71,0,0,1-4.69,4.69H68.78A4.71,4.71,0,0,1,64.09,46V4.69a4.69,4.69,0,0,1,1.37-3.31l.1-.09A4.67,4.67,0,0,1,68.78,0Z"></path></svg></span>
    </div>
    <div class="card-body ">
        <form id="form" class="form-valide" perfect-class="form" action="#" method="post" perfect-onFormSuccess="">
            <div class="">
                @Html.AntiForgeryToken()

                <div class="row">


                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel"> Transaction Date</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-7">
                                <input type="date" class="form-control" name="TransDate" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" max="2050-01-01" onchange="datencheck(this)" />
                                <div class="invalid-feedback animated fadeInUp limit-check" style="display: block;"></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel"> Effect Date</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-7">
                                <input type="date" class="form-control" name="EffectDate" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" max="2050-01-01" />
                                <div class="invalid-feedback animated fadeInUp limit-check" style="display: block;"></div>
                            </div>

                        </div>
                    </div>

                </div>
                <div class="row">
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Transaction Type</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-7">
                                <div class="input-group">
                                    <input type="hidden" name="ID_AMCDetails" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                   
                                    <select class="form-control" name="TransType" id="TransType" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" onchange="fn_changeType(this)">
                                        <option value="">Please Select </option>
                                        <option value="1">Warranty </option>
                                        <option value="2">AMC</option>
                                    </select>
                                    <div class="text-danger temptableError"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4 divAMCMode" style="display:none;">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Mode</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-7">
                                <div class="input-group">
                                    <select class="form-control" name="AMCMode" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" onchange="fn_AMCMode(this)">
                                        <option value="">Please Select </option>
                                        <option value="1">Generation </option>
                                        <option value="2">Renewal </option>
                                    </select>
                                    <div class="text-danger temptableError"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4 divCustomer" style="display:none;">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Customer Name</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-7">
                                <div class="input-group">
                                    <input type="text" class="form-control perfectValidate_specialCharName psscapitalize" name="CustomeName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled />
                                    <input type="hidden" name="FK_Customer" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                    <input type="hidden" name="ID_Sales" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />

                                    <div class="input-group-append">
                                        <button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" data-toggle="tooltip" data-html="true" data-placement="top" name="btnserv" perfect-css="button" onclick="GetCmnPopUpSearchValAssign(this, 24, 'Customer List', [], ['CustomerMobile','CustomerAddress','CusMode','ID_FIELD','OtherMobile'])" BindName="CustomeName" BindVal="FK_Customer" Function="2"></button>

                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4 divRenewal" style="display:none;">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">AMC</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-7">
                                <div class="input-group">
                                    <input type="text" class="form-control perfectValidate_specialCharName psscapitalize" name="AMCNames" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled />
                                    <input type="hidden" name="FK_AMCDetails" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                    <input type="hidden" name="AccountNo" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                    @*<input type="hidden" name="DueDate" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                    <input type="hidden" name="RenewDueDate" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />*@
                                    <input type="hidden" name="RenewAmount" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                    <input type="hidden" name="RenewTaxAmount" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                    <input type="hidden" name="RenewNetAmount" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                    <div class="input-group-append">
                                        <button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" data-toggle="tooltip" data-html="true" data-placement="top" name="btnserv" perfect-css="button" onclick="GetCmnPopUpSearchValAssign(this, 86, 'AMC List', ['AccountNo','Customer','Mobile','AMCName','DueDate','RenewDueDate','NoOfServices'], ['ID_AMCDetails','AMCName','TaxAmount','Amount','NetAmount','Name'])" BindName="AMCNames" BindVal="FK_AMCDetails" Function="1"></button>

                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row divCustomerdetails" style="display:none;">
                    <br />
                </div>
                <br />
                <div class="row divRenewaldetails" style="display:none;">
                    <div class="col-sm-6">
                        <table class="table table-striped jq_Renewaldetails d-none">
                            <tbody>
                                <tr>
                                    <td>Amount</td>
                                    <td class="jq_renewalamount"></td>           
                                </tr>
                                <tr>
                                    <td>Due Date</td>
                                    <td class="jq_renewaldue"></td>
                                </tr>
                                <tr>
                                    <td>Renew Due Date</td>
                                    <td class="jq_renewalrenew"></td>
                                </tr>
                                <tr>
                                    <td>No of Services</td>
                                    <td class="jq_renewalnoofdervice"></td>
                                </tr>
                            </tbody>

                        </table>

                    </div>
                   


                </div>
                <br />
                

                <div class="row divAMCdetails" style="display:none;">
                    <div class="col-sm-12">
                        <div class="daccordion__header">
                            <span class="accordion__header--text">AMC Details  </span>
                            <b> <span id="CusData"></span></b>
                        </div>
                        <br />
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">AMC Type</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-7 PerError">
                                <select class="form-control perfectValidate_string" name="AMCTypeName" id="AMCTypeName" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" onchange="fn_fillAMCDetails(this)">
                                    <option value="">Please select</option>
                                    @if (!(Model.AMCType is null))
                                    {
                                        foreach (var AMC in Model.AMCType)
                                        {
                                            <option value="@AMC.AMCTypeID">@AMC.AMCName</option>
                                        }
                                    }
                                </select>
                                <div class="text-danger temptableError"></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Due Date</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-7">
                                <div class="input-group">
                                    <input type="date" class="form-control" name="DueDate" id="DueDate" perfect-class="formGroupControl" max="2050-01-01" perfect-ctype="date" perfect-css="date" disabled />
                                </div>
                                <div class="text-danger temptableError"></div>
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Renewal Due Date</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-7">
                                <div class="input-group">
                                    <input type="date" class="form-control" name="RenewDueDate" id="RenewDueDate" perfect-class="formGroupControl" max="2050-01-01" perfect-ctype="date" perfect-css="date" disabled />
                                </div>
                                <div class="text-danger temptableError"></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel"> No. of Services</span>
                            </label>
                            <div class="col-sm-7">
                                <input type="text" class="form-control text-right" name="NoofServices" id="NoofServices" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" maxlength="12" disabled />
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Amount</span>
                            </label>
                            <div class="col-sm-7">
                                <input type="text" class="form-control text-right" name="AMCAmount" id="AMCAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" maxlength="12" disabled />
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Tax Amount</span>
                            </label>
                            <div class="col-sm-7">
                                <input type="text" class="form-control text-right" name="AMCTaxAmount" id="AMCTaxAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" maxlength="12" disabled />
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Net Amount</span>
                            </label>
                            <div class="col-sm-7">
                                <input type="text" class="form-control text-right" name="AMCNetAmount" id="AMCNetAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" maxlength="12" disabled />
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Remarks</span>
                            </label>
                            <div class="col-sm-7">
                                <textarea rows="2" name="AMCRemarks" class="form-control perfectValidate_string_nm" perfect-ctype="input" maxlength="250"></textarea>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row divWarranty" style="display:none;">
                    <div class="col-sm-12">
                        <div class="daccordion__header">
                            <span class="accordion__header--text">Warranty Details </span>
                            <b> <span id="WarrantyData"></span></b>
                        </div>
                        <br />
                    </div>
                    <div class="row">
                        <div class="col-sm-12">
                            <div class="row">
                                <div class="col-sm-4">
                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-5 col-form-label">Sub Product</label>
                                        <div class="col-sm-7">

                                            <div class="input-group">

                                                <input type="text" class="form-control" perfect-tempTable-Warranty="subProName" name="subProName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly />
                                                <input type="hidden" perfect-tempTable-Warranty="stkid" name="stkid" readonly perfect-ctype="hidden" />
                                                <input type="hidden" perfect-tempTable-Warranty="prodtid" name="prodtid" readonly perfect-ctype="hidden" />
                                                <input type="hidden" perfect-tempTable-Warranty="FK_Master" name="FK_Master" readonly perfect-ctype="hidden" />
                                                <input type="hidden" name="subProductID" perfect-tempTable-Warranty="subProductID" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                <div class="input-group-append">
                                                    <button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchVal(this, 23, 'Sub Product Details', ['ProductID','Product'], [],AMCWarrantyTransMode)" BindName="subProName" BindVal="subProductID" Criterea1="ProductID"></button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-4">
                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-5 col-form-label">
                                            <span perfect-class="formGroupLabel">Type</span>
                                            <span class="text-danger">*</span>
                                        </label>
                                        <div class="col-sm-7">

                                            <div class="input-group">
                                                <select class="form-control" name="WarrantyType" id="WarrantyType" perfect-tempTable-Warranty="WarrantyType" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" onchange="fn_FillWarrantyDetails(this)">
                                                    <option value="">Please Select </option>


                                                    @if (!(Model.Warrantytype is null))
                                                    {
                                                        foreach (var Module in Model.Warrantytype)
                                                        {
                                                            <option value="@Module.WarrantyTypeID">@Module.WarrantyName</option>
                                                        }
                                                    }
                                                </select>

                                            </div>
                                            <div class="text-danger temptableError"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-4">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-5 col-form-label">
                                    <span perfect-class="formGroupLabel">Replace WTY Dt</span>
                                    <span class="text-danger">*</span>
                                </label>
                                <div class="col-sm-7">
                                    <div class="input-group">
                                        <input type="date" class="form-control" perfect-tempTable-Warranty="Replcwardt" id="Replcwardt" name="Replcwardt" perfect-class="formGroupControl" max="2050-01-01" perfect-ctype="date" perfect-css="date" />
                                    </div>
                                    <div class="text-danger temptableError"></div>
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-4">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-5 col-form-label">
                                    <span perfect-class="formGroupLabel">Service WTY Dt</span>
                                    <span class="text-danger">*</span>
                                </label>
                                <div class="col-sm-7">
                                    <div class="input-group">
                                        <input type="date" class="form-control" name="Serwardt" id="Serwardt" perfect-tempTable-Warranty="Serwardt" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" max="2050-01-01" />
                                    </div>
                                    <div class="text-danger temptableError"></div>
                                </div>
                            </div>
                        </div>

                        <div class="col-sm-4" style="display:none">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-5 col-form-label">
                                    <span perfect-class="formGroupLabel">Remarks</span>
                                </label>
                                <div class="col-sm-7">
                                    <textarea rows="2" name="WarrantyRemarks" perfect-tempTable-Warranty="WarrantyRemarks" class="form-control perfectValidate_string_nm" perfect-ctype="input" maxlength="100"></textarea>
                                </div>
                            </div>
                        </div>
                        <br />
                         <div class="col-sm-4"></div>
                        <div class="col-sm-4">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-5 col-form-label">
                                    <span perfect-class="formGroupLabel">Amount</span>
                                </label>
                                <div class="col-sm-7">
                                    <div class="input-group">
                                        <input type="text" class="form-control text-right" id="WarrantyAmount" name="WarrantyAmount" perfect-tempTable-Warranty="WarrantyAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');" maxlength="12" readonly />
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-4">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-5 col-form-label">
                                    <span perfect-class="formGroupLabel">Tax</span>
                                </label>
                                <div class="col-sm-7">
                                    <div class="input-group">
                                        <input type="text" class="form-control text-right" id="WarrantyTaxAmount" name="WarrantyTaxAmount" perfect-tempTable-Warranty="WarrantyTaxAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');" maxlength="12" readonly />
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-3">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    <span perfect-class="formGroupLabel">NetAmount</span>
                                </label>
                                <div class="col-sm-7">
                                    <div class="input-group">
                                        <input type="hidden" name="WarNetAmount" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                        <input type="text" class="form-control text-right" id="WarrantyNetAmount" name="WarrantyNetAmount" perfect-tempTable-Warranty="WarrantyTaxAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');" maxlength="12" readonly />
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="text-right">
                            <div class="input-group">
                                <div class="input-group-append">
                                    <div>
                                        <button type="button" class="btn btn-primary1" onclick="createtable(this,'Warranty',['WarrantyType'],wartableOptionsTempOut)"><i class="fa fa-plus" aria-hidden="true"></i></button>
                                        <button class="btn btn-light1" type="button" onclick="productclear(this, 'Warranty')"><i class="fa fa-refresh" aria-hidden="true"></i></button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-12">
                            <div class="form-group row" perfect-class="formGroup">

                                <div class="table-responsive" perfect-tempTable="Warranty" id="Warrantydetailhd" perfect-tempTable-lastindex="0" perfect-tempTable-action="0"></div>

                            </div>
                        </div>

                    </div>

                </div>


            </div>

            <div class="row">
                        <div class="col-sm-4 divPayment" style="display:none;">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-5 col-form-label">Payment Method</label>
                                <div class="col-sm-5">
                                    <div class="input-group">
                                        <div class="input-group-append">
                                            &nbsp;<button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-money" type="button" perfect-css="button" title="Add Payment Method" onclick="GetPaymentlists(this)"></button>

                                        </div>
                                    </div>

                                </div>
                            </div>
                        </div>
                    </div>

            <div class="modal fade" perfect-class="formGroupModalpayment" id="formGroupModalpayment">
                        <div class="modal-dialog  modal-dialog-centered modal-md" role="document">
                            <div class="modal-content">
                                <div class="modal-header border-0">
                                    <h5 class="modal-title">Payment Method</h5>
                                    <button type="button" class="close" data-dismiss="modal">
                                        <span>&times;</span>
                                    </button>
                                </div>
                                <div class="modal-body" perfect-class="formGroup" style="max-height: calc(100vh - 200px); overflow-y: auto;padding: 1rem;">
                                    <div class="row">


                                        <div class="col-sm-12">
                                            <div class="form-group row" perfect-class="formGroup">
                                                <label class="col-sm-4 col-form-label">Method <span class="text-danger">*</span></label>
                                                <div class="col-sm-8">
                                                    <div class="input-group">
                                                        <select class="form-control" perfect-tempTable-Payment="PaymentMethod" name="PaymentMethod" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select">
                                                            <option value="">Please Select </option>


                                                            @if (!(Model.PaymentView is null))
                                                            {
                                                                foreach (var Module in Model.PaymentView)
                                                                {
                                                                    <option value="@Module.PaymentmethodID">@Module.Name</option>
                                                                }
                                                            }
                                                        </select>


                                                    </div>
                                                    <div class="text-danger temptableError"></div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-12">
                                            <div class="form-group row" perfect-class="formGroup">
                                                <label class="col-sm-4 col-form-label">
                                                    <span perfect-class="formGroupLabel">Ref No.</span>

                                                </label>
                                                <div class="col-sm-8">

                                                    <div class="input-group">
                                                        <input type="text" class="form-control perfectValidate_string_nm" perfect-tempTable-Payment="Refno" name="Refno" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" maxlength="250" />

                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="col-sm-12">
                                            <div class="form-group row" perfect-class="formGroup">
                                                <label class="col-sm-4 col-form-label">
                                                    <span perfect-class="formGroupLabel">Amount</span>
                                                    <span class="text-danger">*</span>
                                                </label>
                                                <div class="col-sm-8">
                                                    <div class="input-group">
                                                        <input type="text" class="form-control text-right" perfect-tempTable-Payment="PAmount" id="PAmount" name="PAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="decimalpnt(this,'PAmount',3)" onchange="Pamount(this)" maxlength="12" />

                                                    </div>
                                                    <div class="text-danger temptableError"></div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-9">


                                        </div>
                                        <div class="col-sm-3 text-right">
                                            <div class="input-group">

                                                <div class="input-group-append">
                                                    <div>
                                                        <button type="button" class="btn btn-primary1 " onclick="createtable(this,'Payment',['PaymentMethod'],paytableOptionsTempOut)"><i class="fa fa-plus" aria-hidden="true"></i></button>
                                                        <button class="btn btn-light1" type="button" onclick="productclear(this, 'Payment')"><i class="fa fa-refresh" aria-hidden="true"></i></button>
                                                    </div>
                                                </div>
                                            </div>

                                        </div>
                                        <div class="col-sm-12">
                                            <div class="form-group row" perfect-class="formGroup">
                                                <label class="col-sm-4 col-form-label">
                                                    <span perfect-class="formGroupLabel" style="font-weight:500;">Bal. Amount :</span>

                                                </label>
                                                <div class="col-sm-8">
                                                    <div class="input-group">

                                                        <label class="col-form-label">
                                                            <span perfect-class="formGroupLabel" style="font-weight:500;" name="BalAmt"></span>
                                                        </label>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>


                                        <div class="col-sm-12">
                                            <div class="form-group row" perfect-class="formGroup">

                                                <div class="table-responsive" perfect-tempTable-Payment="" perfect-tempTable="Payment" id="Paymentdethead" perfect-tempTable-lastindex="0" perfect-tempTable-action="0"></div>
                                                <div class="text-danger temptableError"></div>

                                            </div>
                                        </div>


                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-primary light" onclick="Billttlnetchck(this)">Apply</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>                
                  
              <div class="card-footer text-right" perfect-class="formFooter">
                @if (ViewBag.PagedAccessRights.UsrrlMsAdd)
                {
                    <button id="addcompany-jq-addnewuser" type="button" class="btn btn-primary mr-3 " name="add" perfect-css="button" onclick="fn_AMCWarrantyupdate(this,'new')"><i class="fa fa-refresh fa-spin loaderClass "></i>Save</button>
                }
                @if (ViewBag.PagedAccessRights.UsrrlMsEdt)
                {
                    <button id="" type="button" class="btn btn-primary mr-3 addcompany-jq-addnewuserUpdate d-none" name="update" perfect-css="button" onclick="fn_AMCWarrantyupdate(this,'update')"><i class="fa fa-refresh fa-spin loaderClass"></i>Update</button>
                }
                <button type="button" id="" class="btn btn-light" perfect-css="button" onclick="ResetButton(this)" name="reset">Clear</button>
                <button type="button" id="viewinv" class="btn btn-info d-none" perfect-css="button" onclick="ViewInvoice(this)" name="View AMC Warranty Invoice">View Invoice</button>
            </div>
        </form>

    </div>

</div>

<script>
    var AMCMode;
    var FK_Product;
    var TransType;
    var TransMode = "";
  
    $(document).ready(function () {
        initFunctions('form');
    });

    function fn_changeType(ele) {
   
        let $thisForm = $(ele).closest('[perfect-class="form"]');
         TransType = $thisForm.find('[name="TransType"]').val();
        if (TransType == 2) {
            $(".divAMCMode").show();
            $(".divWarranty").hide();
            $thisForm.find('[name="AMCMode"]').val('');
            $thisForm.find('[name="FK_Customer"]').val('');
            $thisForm.find('[name="CustomeName"]').val(''); 
            $(".divCustomerdetails").hide(); 
            $(".divRenewaldetails").hide(); 
            
       // $('.divPayment').hide(); 
            TransMode = AMCWarrantyTransMode
        }
        else {
            $thisForm.find('[name="FK_Customer"]').val('');
            $thisForm.find('[name="CustomeName"]').val(''); 
            $(".divCustomer").show();
            $(".divCustomerdetails").hide(); 
            $(".divRenewaldetails").hide(); 
            $(".divAMCMode").hide();
          //  $(".divWarranty").show();
            $('.divAMCdetails').hide();  
          //  $('.divPayment').hide();
            TransMode ='CUWR'
            $(".divRenewal").hide();
        }

        let $Ptblcontainer = $thisForm.find('[perfect-tempTable="Payment"]');
        $Ptblcontainer.empty();
      
    }
        function fn_AMCMode(ele) {
          
            let $thisForm = $(ele).closest('[perfect-class="form"]');
             AMCMode = $thisForm.find('[name="AMCMode"]').val();
           
             if (AMCMode == 1) 
            {
                 $thisForm.find('[name="FK_Customer"]').val(''); 
                 $thisForm.find('[name="FK_AMCDetails"]').val(''); 
                $thisForm.find('[name="CustomeName"]').val(''); 
                 $('.divAMCdetails').hide(); 
                 $(".divRenewaldetails").hide(); 
                 $(".divCustomer").show();
                 $(".divRenewal").hide();
             
            }
            if (AMCMode == 2) {
                $(".divCustomer").hide();
                $(".divRenewal").show();
                $(".divRenewaldetails").show(); 
                $(".divCustomerdetails").hide(); 
                $(".divWarranty").hide();
                $('.divAMCdetails').hide();
               // $('.divPayment').hide();
            }
           
    }



    function getfunctionAssign(ele) {
        debugger;
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let FK_Customer = $thisForm.find('[name="FK_Customer"]').val();
        let Mode = $thisForm.find('[name="TransType"]').val();
      
        let InputData = {
            FK_Customer: FK_Customer,
            Mode:Mode,
            TransMode: TransMode
        };
           $.ajax({              
                    url: "@Url.Action("AMCWarrantyFillInvoiceCustomer", "AMCWarrantyMapping")",
                    type: "Get",
                    data:InputData,
                    dataType: "json",
                    contentType: "application/json",
                    success: function (ajaxOutput) {

                  
                        if (ajaxOutput.Process.IsProcess) {
                            if (AMCMode == 1) {
                                $('.divCustomerdetails').show();
                                $('.divAMCdetails').hide(); 
                            }
                            else {                               
                                $('.divCustomerdetails').show();   
                                 
                            }
                          
                            let table = JSON.parse(ajaxOutput.Data).dtable;
                            var arrayhidecolumn = ['ID_Sales', 'FK_Customer', 'FK_Product','Address','MobileNo','CustomerName']
                            var tableCommonOptions = {
                                onlyShowColumn: [],
                                hideColumn: arrayhidecolumn,
                                rowClickAction: fn_ShowAMCDetails,
                                serialNo: false,
                            };
                            $(".divCustomerdetails").html(CreateTableCommonGrid(table, tableCommonOptions, 'Customerdetailsid'));
                            if (ajaxOutput.Data[0].Amount > 0) {
                                $('.divPayment').show();
                            }
                            else {
                                $('.divPayment').hide();
                            }
                            FK_Product = ajaxOutput.Data.FK_Product;

                            
                        }

                        else {                         
                   
                            $.each(ajaxOutput.Process.Message, function (key, value) {
                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                            });
                            $('.divCustomerdetails').hide();
                        }

                    },
                    complete: function () {
                    }
                });
    }

   

    function ConvertJsonDate(Jsondate) {
        var date = "";
        if (Jsondate != "" && Jsondate != null && Jsondate != undefined) {
            var dateString = Jsondate.substr(6);
            var currentTime = new Date(parseInt(dateString));
            var month = currentTime.getMonth() + 1;
            if (month <= 9) {
                month = "0" + month;
            }
            var day = currentTime.getDate();
            if (day <= 9) {
                day = "0" + day;
            }
            var year = currentTime.getFullYear();
            date = day + "/" + month + "/" + year;


        }
        return date;
    }   

    function ResetButton(ele) {
        fn_AMCWarrantyIndex_load();
    }

    var ProductAmount = 0;
    var Quantity = 0;
    var ID_Sales = 0;
    var FK_Product = 0;
    function fn_ShowAMCDetails() {
        if (!blnSelected) {
            var $crow = $(this).closest('tr');
            let rowData = $crow.data('pData');
            $('#CusData').text(' / ' + rowData.InvoiceNo + ' / ' + rowData.Product);
            $('#WarrantyData').text(' / ' + rowData.InvoiceNo + ' / ' + rowData.Product);
            ProductAmount = rowData.Amount1R;
            Quantity = rowData.Quantity;
            ID_Sales = rowData.ID_Sales;
            FK_Product = rowData.FK_Product;

            if (TransType == 1) {
                $('.divAMCdetails').hide();
                $('.divWarranty').show();
            }
            else {
                $('.divAMCdetails').show();
                $('.divWarranty').hide();
            }
            blnSelected = true;
        }   
    }
    var AmcAmount;
    var AMCTaxAmount;
    var AmcNetAmount;
    var AMCType;

  

    function GetPaymentlists(ele) {
        debugger;
        $('#formGroupModalpayment').modal({ backdrop: 'static', keyboard: false })

        $('#formGroupModalpayment').modal('show');

        if (ID_AMCDetails == 0) {
            BindBilldetails(ele);
        }
        else {
            BindBilldetail(ele);
        }
    }

   


    function createtable(ele, tkey, uniq = [], tableOptionsTempOut) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');   

        let tableKey = tkey;
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');

        let insertData = {};
        let tableOptionsTemp = tableOptionsTempOut;
        console.log('tableOptionsTemp', tableOptionsTemp)
        let unique = (uniq) ? uniq : [];

        let isValid = true;
        let errorClass = '.temptableError';

        //make index
        console.log('check 1');

        let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
        let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
        let indexname = tkey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);
        console.log('tableOptionsTemp.rowAttribute', tableOptionsTemp.rowAttribute)
        let updateCond = '';
        let isNew = true;

        if (thisactionIndex > 0) {
            //means update
            insertData[indexname] = thisactionIndex;
            updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
            isNew = false;
        }
        else {
            //insert
            insertData[indexname] = lastIndex + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
            isNew = true;
        }
        //
        if (tableKey == 'Warranty') {

            isValid = validwartdetail(ele, tableKey, errorClass, isValid);
        }
        else if (tableKey == 'Payment') {
            isValid = validpaymntdetail(ele, tableKey, errorClass, isValid);
        }
      

        if (unique.length > 0) {
            //getting previous data
            let prevData = [];
            $tblcontainer.find('table > tbody').find('tr').each(function () {
                if (isNew) {
                    prevData.push($(this).data('pData'));
                }
                else {
                    if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                        prevData.push($(this).data('pData'));
                    }

                }

            })
            console.log('previous data', prevData);

            unique.forEach(function (key, i) {
                console.log('unid -> key:' + key + "| index :" + i);
                let $thisEle = $thisForm.find('[perfect-tempTable-' + tableKey + '="' + key + '"]');
                // let headerEleName = $thisForm.find('[name="lblProName"]').text();
                let atname = $thisEle.attr('name');
                let cvalue;
                console.log('atname', atname);
                console.log('$thisEle.length', $thisEle.length);
                if ($thisEle.length != 0) {
                    console.log('len', $thisEle)
                    let $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
                    let errmessage = key + " Already exits"

                    //getting current value in cval
                    if ($thisEle.is('select')) {
                        cvalue = $thisEle.val();
                      
                    }
                    else if ($thisEle.is('input')) {

                        let inputEleType = $thisEle.attr('type').toLocaleLowerCase();
                        if (inputEleType == 'checkbox') { cvalue = $thisEle.is(':checked'); }
                        else if (inputEleType == 'hidden') { cvalue = $thisEle.val(); console.log('cvalue ->', cvalue); }
                        else { cvalue = $thisEle.val(); }
                    }
                    else { cvalue = $thisEle.val(); }



                    //searching in previous data
                    if (prevData.find(a => a[atname] == cvalue)) {
                        // console.log('Search =>' + cvalue + '| attr :' + atname)
                        $errorElement.text(errmessage);
                        isValid = false;
                    }
                }
            });

        }

        console.log('isValid', isValid);

        if (isValid) {

            console.log('check 4.1');
            // this section make table column data
            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                //console.log('nameAttr', nameAttr);
                console.log('headerName', headerName);

                if ($this.is('select')) {

                    //tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                    tableOptionsTemp.hideColumn.push(nameAttr)
                    //displat text of select
                    if ($this.val() != null) {
                        let selectText = ($this.val().length == 0) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    else {
                        let selectText = ($this.val() == null) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    //tableOptionsTemp.onlyShowColumn.push(nameAttr + '_d')
                    insertData[nameAttr] = $this.val();
                    //insertData[nameAttr] = $this.val();

                    $this.val('').selectpicker('refresh');


                }
                //else if ($this.is('input')) {

                //    insertData[nameAttr] = $this.val();
                //    console.log('insertData[nameAttr]', insertData[nameAttr])
                //    //if (nameAttr == "prodtid") { }
                //    //else if (nameAttr == "stkid") { }
                //    //else {
                //    //    $this.val('');
                //    //}
                //}
                //else {
                //    insertData[nameAttr] = $this.val();

                //    $this.val('');
                //}
                  else if ($this.is('input')) {

                    insertData[nameAttr] = $this.val();
                    if (nameAttr == "prodtid") { }
                    else if (nameAttr == "stkid") { }
                    else {
                        $this.val('');
                    }
                }

            });
            console.log('check 4.2', insertData);
            console.log('check 4.2 tableoption', tableOptionsTemp);
            if (isNew) {
                console.log('check 4.2.1');
                //this section nake table.table row
                if ($tblcontainer.find('table').length == 0) {
                    console.log('check 4.2.3');
                    console.log(insertData);
                    console.log(',tableOptionsTemp', tableOptionsTemp)
                    $tblcontainer.append(pft_table_createtable([insertData], tableOptionsTemp));

                    //  $tblcontainer.find('table').dataTable({ paging: false, ordering: false });
                }
                else {
                    console.log('check 4.2.1');
                    let table = $tblcontainer.find('table').DataTable()
                    table.destroy()
                    pft_table_addTableRow($tblcontainer.find('table'), insertData, tableOptionsTemp);


                }

            }
            else {

                let table = $tblcontainer.find('table').DataTable()
                table.destroy()

                pft_table_replaceTableRow($tblcontainer.find('table'), updateCond, insertData, tableOptionsTemp);

            }

            console.log(insertData);
         
            // resetting the edit value
            $tblcontainer.attr('perfect-tempTable-action', 0);

            if (tableKey == 'Warranty') {

                BindWarrantyAmount(ele);
            }
            else if (tableKey == 'Payment') {
                BillAmountbind(ele);
            }
          

                $thisForm.data({ pwarranty: warrantydetails });
             
             
               
               


            }

        }


       

    function validpaymntdetail(ele, tableKey, errorClass, isValid) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').val() == null) {

            isValid = false;
            console.log('false', $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').val());
            $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Payment Method');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }

        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="PAmount"]').val() < 1) {
            console.log('false', $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').val());
            isValid = false;

            $thisForm.find('[perfect-tempTable-' + tableKey + '="PAmount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please enter a value greater than or equal to 1');
        }
        else {

            $thisForm.find('[perfect-tempTable-' + tableKey + '="PAmount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }


        return isValid;

    }
   
  

   
    //function productclear(ele, tablekey) {

    //    let $thisform = $(ele).closest('[perfect-class="form"]');
    //    $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
    //    $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="select"]').val('').selectpicker('refresh');
    //    $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
    //    $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="date"]').val('');
    //    $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="hidden"]').val('');

    //    let $tblcontainer = $thisform.find('[perfect-tempTable="' + tablekey + '"]');
    //    $tblcontainer.attr('perfect-tempTable-action', 0);

   
    //    if (tablekey = "Warranty") {

    //    }
    //    else if (tablekey = "Payment") {

    //    }
    //}



    function productclear(ele, tablekey) {

        let $thisform = $(ele).closest('[perfect-class="form"]');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="select"]').val('').selectpicker('refresh');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="date"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="hidden"]').val('');

        let $tblcontainer = $thisform.find('[perfect-tempTable="' + tablekey + '"]');
        $tblcontainer.attr('perfect-tempTable-action', 0);

        if (tablekey = "Purchase") {
            $thisform.find('[name=prdbtn]').removeAttr("disabled", "disabled")

        }
        else if (tablekey = "Warranty") {

        }
        else if (tablekey = "Payment") {

        }
    }



    var paytableOptionsTempOut = {
        iconButton: {
            buttons: [

                {
                    icon: "fa fa-pencil btnPerfectGridEdit",
                    action: function () {
                        let savedData = $(this).closest('tr').data('pData')

                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let tableKey = $tablecontainer.attr('perfect-tempTable');
                        let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                        //index attribute name in table row
                        let indexname = tableKey + 'index';

                        //index number in table row
                        let rindex = $(this).closest('tr').attr(indexname);

                        $tablecontainer.attr('perfect-tempTable-action', rindex);

                        console.log('Editclick', savedData);
                        //filling data in available inputs
                        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                            let $thisNode = $(this);
                            let pf_name = $thisNode.attr('name');
                            if ($thisNode.is('select')) {

                                $thisNode.val(savedData[pf_name]).selectpicker('refresh');

                            }
                            else if ($thisNode.is('input')) {
                                let inputType = $thisNode.attr('type').toLocaleLowerCase();
                                if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                    $thisNode.prop('checked', savedData[pf_name]);
                                }

                                else {

                                    $thisNode.val(savedData[pf_name]);
                                }

                            }
                            else {
                                $thisNode.val(savedData[pf_name]);
                            }


                        });



                    }
                },
                {
                    icon: "fa fa-trash btnPerfectGridDelete",
                    action: function () {
                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let $thistbl = $(this).closest('table');
                        let table = $thistbl.DataTable();
                        table.destroy();
                        if ($(this).closest('tbody').find('tr').length > 1) {
                            $(this).closest('tr').remove();
                            pft_table_slreset($thistbl);
                            //$thistbl.dataTable({ paging: true, searchbtn: false });
                        }
                        else {
                            $thistbl.remove();
                        }
                        BillAmountbind($tablecontainer);
                    }
                },
            ]
        },

        rowAttribute: [],
        onlyShowColumn: ['PAmount', 'Refno', 'PaymentMethod_d'],
        renameHeader: { "PAmount": "Amount1R", "Refno": "Ref No", "PaymentMethod_d": "Method" },
        hideColumn: ['BalAmt'],

        serialNo: true,

    };
    function validwartdetail(ele, tableKey, errorClass, isValid) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="WarrantyType"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="WarrantyType"]').val() == null) {

            isValid = false;
            console.log('false');
            $thisForm.find('[perfect-tempTable-' + tableKey + '="WarrantyType"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Type');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="WarrantyType"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }

        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Replcwardt"]').val() == null || $thisForm.find('[perfect-tempTable-' + tableKey + '="Replcwardt"]').val() == '') {

            isValid = false;

            $thisForm.find('[perfect-tempTable-' + tableKey + '="Replcwardt"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Replace WTY Date');
        }
        else {

            let repldt = $thisForm.find('[name=Replcwardt]').val();
            repldt = new Date(repldt);
            repldt.setHours(0, 0, 0, 0)

            let today = new Date();
            today.setHours(0, 0, 0, 0)

            console.log(today)
            console.log(repldt)
            if (today > repldt) {
                isValid = false;
                $thisForm.find('[perfect-tempTable-' + tableKey + '="Replcwardt"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Replace WTY date should be greater than or equal to todays date');

            }
            else {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="Replcwardt"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }


        }
        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Serwardt"]').val() == null || $thisForm.find('[perfect-tempTable-' + tableKey + '="Serwardt"]').val() == '') {

            isValid = false;

            $thisForm.find('[perfect-tempTable-' + tableKey + '="Serwardt"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Service WTY Date');
        }
        else {
            let servcdt = $thisForm.find('[name=Serwardt]').val();
            servcdt = new Date(servcdt);
            servcdt.setHours(0, 0, 0, 0)

            let today = new Date();
            today.setHours(0, 0, 0, 0)

            if (today > servcdt) {
                isValid = false;
                $thisForm.find('[perfect-tempTable-' + tableKey + '="Serwardt"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Service WTY date should be greater than or equal to todays date');

            }
            else {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="Serwardt"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }


        }

        return isValid;

    }

        var warrantydetails = []; 
        function GetWarrantylists(ele,mode) {

                let $thisForm = $(ele).closest('[perfect-class="form"]');
                productclear(ele, 'Warranty');
                if ($thisForm.find('[name="ProductID"]').val() == '' || $thisForm.find('[name="ProductID"]').val() == null) {
                    NotificationMessage({ 'message': 'Please Select Product' });
                }
                else {
                    let prdid = $thisForm.find('[name="ProductID"]').val();
                    let stkid = $thisForm.find('[name="StockId"]').val();
                    $thisForm.find('[name="stkid"]').val(stkid);
                    $thisForm.find('[name="prodtid"]').val(prdid);
                    $thisForm.find('[name="FK_Master"]').val(ID_Sales);
                    var warobject = [];
                    if ($thisForm.data('pwarranty')) {

                        if ($thisForm.data('pwarranty').length > 0) {

                            warrantydetails = $thisForm.data('pwarranty');

                            console.log("warrantydetailsed", warrantydetails)
                        }
                    }
                    if (warrantydetails != null) {
                        warobject = warrantydetails.filter(obj => obj.stkid.toString() === stkid.toString());
                    }
                         $('#formGroupModalwarranty').modal({ backdrop: 'static', keyboard: false })
                    console.log('warobject', warobject)
                    if (mode == 0) {
                        $('#formGroupModalwarranty').modal('show');
                    }
                    else {
                        $('#formGroupModalwarranty').modal('hide');
                    }

                    if (warobject != null) {
                        if (warobject.length > 0) {
                            fillgrid('Warranty', wartableOptionsTempOut, $thisForm, warobject);

                        } else {
                            $thisForm.find('[perfect-tempTable= "Warranty"]').empty();;
                        }
                    }
                }

            }

            function fillgrid(tablk, wartableOptionsTempOut, $thisForm,data) {
                let tableOptionsTemp = wartableOptionsTempOut;
                let insertData = [];
                let tableKey = tablk;
                let indexname = tableKey + 'index';
                tableOptionsTemp.rowAttribute.push(indexname);
                tableOptionsTemp.hideColumn.push(indexname);
                let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');
                $.each(data, function (keyOne, valOne) {
                    let pData = {};
                    pData[indexname] = keyOne + 1;
                    $tblcontainer.attr('perfect-tempTable-lastindex', pData[indexname])
                    //---

                    $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                        let $this = $(this);
                        let headerName = $this.attr('perfect-tempTable-' + tableKey);
                        let nameAttr = $this.attr('name');
                        //console.log('name', valOne[nameAttr])
                        if (typeof valOne[nameAttr] !== undefined) {

                            if ($this.is('select')) {
                                //tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                                tableOptionsTemp.hideColumn.push(nameAttr);
                                //displat text of select
                                pData[nameAttr + '_d'] = $this.find('[value="' + valOne[nameAttr] + '"]').text();
                                pData[nameAttr] = valOne[nameAttr];
                                console.log('select', $this.find('options[value="' + valOne[nameAttr] + '"]').text());

                            }
                            else if ($this.is('input')) {
                                pData[nameAttr] = valOne[nameAttr];
                            }
                            else if ($this.is('hidden')) {
                              
                                pData[nameAttr] = valOne[nameAttr];
                            }
                            else {
                                pData[nameAttr] = valOne[nameAttr];
                            }
                        }

                    });

                    insertData.push(pData);
                    console.log('pData', pData)
                    console.log('insertData', insertData)
                    //----

                });
                $tblcontainer.empty();
                $tblcontainer.append(pft_table_createtable(insertData, tableOptionsTemp));
                checkemi(this)
            }
            function warrantydet(ele)
            {

                let $thisForm = $(ele).closest('[perfect-class="form"]');
                let prdid = $thisForm.find('[name="ProductID"]').val();
                let stkid = $thisForm.find('[name="StockId"]').val();
                var uwarobject = [];
                if (warrantydetails != null) {
                    uwarobject = warrantydetails.filter(obj => obj.stkid.toString() === stkid.toString());
                    const indexOfObject = warrantydetails.findIndex(object => {
                        return object.stkid.toString() === stkid.toString();
                    });

                    console.log(indexOfObject); // 👉️ 1

                    warrantydetails.splice(indexOfObject, uwarobject.length);
                }
                console.log(warrantydetails);
                $thisForm.find('[perfect-tempTable="Warranty"]').find('tbody').find('tr').each(function () {
                    console.log('sadd', $(this).data('pData'))
                    warrantydetails.push($(this).data('pData'));


                })
                console.log('warrantydetails', warrantydetails)
                $('#formGroupModalwarranty').modal('hide');
            }


            var wartableOptionsTempOut = {
                iconButton: {
                    buttons: [
                        
                        {
                            icon: "fa fa-pencil btnPerfectGridEdit",
                            action: function () {
                                let savedData = $(this).closest('tr').data('pData')

                                let $tablecontainer = $(this).closest('[perfect-tempTable]');
                                let tableKey = $tablecontainer.attr('perfect-tempTable');
                                let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                                //index attribute name in table row
                                let indexname = tableKey + 'index';

                                //index number in table row
                                let rindex = $(this).closest('tr').attr(indexname);

                                $tablecontainer.attr('perfect-tempTable-action', rindex);

                                console.log('Editclick', savedData);
                                //filling data in available inputs
                                $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                                    let $thisNode = $(this);
                                    let pf_name = $thisNode.attr('name');
                                    if ($thisNode.is('select')) {

                                        $thisNode.val(savedData[pf_name]).selectpicker('refresh');

                                    }
                                    else if ($thisNode.is('input')) {
                                        let inputType = $thisNode.attr('type').toLocaleLowerCase();
                                        if (inputType == 'checkbox') {

                                            $thisNode.prop('checked', savedData[pf_name]);
                                        }

                                        else {

                                            $thisNode.val(savedData[pf_name]);
                                        }

                                    }
                                    else {
                                        $thisNode.val(savedData[pf_name]);
                                    }


                                });



                            }
                        },
                        {
                            icon: "fa fa-trash btnPerfectGridDelete",
                            action: function () {

                                let savedData = $(this).closest('tr').data('pData')
                                let $tablecontainer = $(this).closest('[perfect-tempTable]');
                                let tableKey = $tablecontainer.attr('perfect-tempTable');
                                let $thistbl = $(this).closest('table');
                                let table = $thistbl.DataTable();
                                table.destroy();
                                if ($(this).closest('tbody').find('tr').length > 1) {
                                    $(this).closest('tr').remove();
                                    pft_table_slreset($thistbl);
                                    //$thistbl.dataTable({ paging: true, searchbtn: false });
                                }
                                else {
                                    $thistbl.remove();
                                }


                                let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                                let dprdid;
                                let stkcid;
                                let dwartyp;
                                $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                                    let $thisNode = $(this);
                                    let pf_name = $thisNode.attr('name');
                                    console.log('pf_name', pf_name)
                                    if (pf_name == "WarrantyType") {
                                        dwartyp = savedData[pf_name];
                                        console.log('WarrantyTypename', pf_name)
                                    }
                                });


                                stkcid = $thisForm.find('[name="StockId"]').val();
                                console.log('dwartyp', dwartyp)
                                let dWarProductImagelst = [];
                                let subwarproduct = [];
                                let dwarproduct = [];
                                dWarProductImagelst = JSON.parse(localStorage.getItem('WarProductImage'));
                                console.log('dWarProductImagelst', dWarProductImagelst)
                                if (dWarProductImagelst != null) {
                                    dwarproduct = dWarProductImagelst.filter(obj => obj.StockId.toString() === stkcid.toString());
                                    subwarproduct = dwarproduct.filter(obj => obj.WarrantyType.toString() === dwartyp.toString());
                                    const dwindexOfObject = dwarproduct.findIndex(object => {
                                        return object.WarrantyType.toString() === dwartyp.toString();
                                    });

                                    dWarProductImagelst.splice(dwindexOfObject, subwarproduct.length);

                                    localStorage.setItem('WarProductImage', JSON.stringify(dWarProductImagelst));
                                    console.log('dWarProductImagelst1', dWarProductImagelst)
                                    $thisForm.data({ pImageselect: dWarProductImagelst });



                                }
                            }
                        },
                    ]
                },

                rowAttribute: [ 'WarrantyTaxAmount','WarrantyAmount'],
                renameHeader: {"subProName": "Sub Product", "Replcwardt": "Replace WTY Dt", "Serwardt": "Service WTY Dt", "WarrantyType_d": " Type", "WarrantyAmount": "Amount", "WarrantyTaxAmount": "Tax Amount", "WarrantyNetAmount": "Net Amount","WarrantyRemarks":"Remarks"},
                hideColumn: ['subProductID', 'prodtid', 'stkid','FK_Master'],
                serialNo: true,
                isDateType: ["Replcwardt","Serwardt"],

            };


  

    function decimalpnt(ele, id, range) {

        let input = $('#' + id);
        ele.value = ele.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');
        let t = ele.value;
        ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t;
        input.on('keydown', function () {
            if (ele.value.includes('.')) {

            }
            var key = event.keyCode || event.charCode;
            if (key == 8 || key == 46) { }
            else {
                if (ele.value.length == 9) {
                    ele.value = ele.value + '.';
                }
            }

        });

    }

    function decimalpntminus(ele, id, range) {

        let input = $('#' + id);
        ele.value = ele.value.replace(/[^0-9.-]/g, '').replace(/(\..*)\./g, '$1');
        let t = ele.value;
        ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t;
        input.on('keydown', function () {
            if (ele.value.includes('.')) {

            }
            var key = event.keyCode || event.charCode;
            if (key == 8 || key == 46) { }
            else {
                if (ele.value.length == 9) {
                    ele.value = ele.value + '.';
                }
            }

        });

    }
    function minmax(min, max, ele, range) {
        if (min != '' || max != '') {
            let t = ele.value;
            if (parseInt(ele.value) < min || isNaN(parseInt(ele.value))) { ele.value = min; }
            else if (parseInt(ele.value) > max) { ele.value = max; }
            else { ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t; }

        }
    }


    $(document).ready(function () {


        let $thisForm = $(this).find('[perfect-class="form"]');
        var today = new Date();
        var day1 = today.getDate() > 9 ? today.getDate() : "0" + today.getDate(); // format should be "DD" not "D" e.g 09
        var month1 = (today.getMonth() + 1) > 9 ? (today.getMonth() + 1) : "0" + (today.getMonth() + 1);
        var year1 = today.getFullYear();

        $thisForm.find('[name="Serwardt"]').attr('min', year1 + "-" + month1 + "-" + day1);
        $thisForm.find('[name="Replcwardt"]').attr('min', year1 + "-" + month1 + "-" + day1);

    });

    function datencheck(ele) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        //invalid-feedback
        let TransDate = $thisForm.find('[name="TransDate"]').val();

        TransDate = new Date(TransDate);
        TransDate.setHours(0, 0, 0, 0)


        let today = new Date();
        today.setHours(0, 0, 0, 0);
        console.log('TransDate', TransDate)
        console.log('today', today)

        if (TransDate < today) {

            console.log('inside limit check if')
            $thisForm.find('[name="TransDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('Transaction Date date should be greater than or equal to Todays date')
            return false;

        }
        else {
            console.log('inside limit check else')
            $thisForm.find('[name="TransDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('');
            return true;
        }


    }

      function fn_fillAMCDetails(ele) {
          debugger;
        let $thisForm = $(ele).closest('[perfect-class="form"]');       
        let Amount = ProductAmount;
        let Qty = Quantity;
        let Mode = $thisForm.find('[name="TransType"]').val();
        AMCType = $thisForm.find('[name="AMCTypeName"]').val();
        let EffectDate = $thisForm.find('[name="EffectDate"]').val();

        let InputData = {
            Mode: Mode,
            FK_AMCType: AMCType,
            EffectDate: EffectDate,
            AmcAmount: Amount,
            Quantity: Qty

        };

        $.ajax({
            url: "@Url.Action("AMCWarrantyFillAMCData", "AMCWarrantyMapping")",
            type: "Get",
            data: InputData,
            dataType: "json",
            contentType: "application/json",
            success: function (ajaxOutput) {
                if (ajaxOutput.Process.IsProcess) {
                    if (ajaxOutput.Data[0].AMCNetAmount > 0) {
                        $thisForm.find('[name="AMCAmount"]').val(parseFloat(ajaxOutput.Data[0].AmcAmount).toFixed(2));
                        $thisForm.find('[name="AMCTaxAmount"]').val(parseFloat(ajaxOutput.Data[0].AMCTaxAmount).toFixed(2));
                        $thisForm.find('[name="AMCNetAmount"]').val(parseFloat(ajaxOutput.Data[0].AMCNetAmount).toFixed(2));
                        $thisForm.find('[name="NoofServices"]').val(ajaxOutput.Data[0].NoOfServices);
                        $thisForm.find('[name="DueDate"]').val(moment(ajaxOutput.Data[0].AMCDuedate).format('YYYY-MM-DD'));
                        $thisForm.find('[name="RenewDueDate"]').val(moment(ajaxOutput.Data[0].AMCRenewduedate).format('YYYY-MM-DD'));
                      
                        AmcAmount = ajaxOutput.Data[0].AmcAmount;
                        AmcNetAmount = ajaxOutput.Data[0].AMCNetAmount;

                        if (ajaxOutput.Data[0].AMCNetAmount > 0) {
                            $('.divPayment').show();
                        }
                        else {
                            $('.divPayment').hide();
                        }
                    }
                    else {
                        NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'No settings found ' });
                    }
                }
                else {
                  
                    $('.divCustomerdetails').hide();
                    }
               
            },
            complete: function () {
            }

        });

    }

 function fn_FillWarrantyDetails(element) {
     debugger;
     let $thisForm = $(element).closest('[perfect-class="form"]');       
     let Amount = parseFloat(ProductAmount);

        let Qty = Quantity;
        let Mode = $thisForm.find('[name="TransType"]').val();
        let WarrantyType = $thisForm.find('[name="WarrantyType"]').val();
        let EffectDate = $thisForm.find('[name="EffectDate"]').val();

        let InputData = {
            Mode: Mode,
            FK_WarrantyType: WarrantyType,
            EffectDate: EffectDate,
            AmcAmount: Amount,
            Quantity: Qty
        };

        $.ajax({
            url: "@Url.Action("AMCWarrantyFillWarrantyData", "AMCWarrantyMapping")",
            type: "Get",
            data: InputData,
            dataType: "json",
            contentType: "application/json",
            success: function (ajaxOutput) {
                if (ajaxOutput.Process.IsProcess) {
                    if (ajaxOutput.Data[0].NetAmount > 0) {
                        $thisForm.find('[name="WarrantyAmount"]').val((ajaxOutput.Data[0].Amount).toFixed(2));
                        $thisForm.find('[name="WarrantyTaxAmount"]').val(parseFloat(ajaxOutput.Data[0].TaxAmount).toFixed(2));
                        $thisForm.find('[name="WarrantyNetAmount"]').val(parseFloat(ajaxOutput.Data[0].NetAmount).toFixed(2));
                        $thisForm.find('[name="Replcwardt"]').val(moment(ajaxOutput.Data[0].ReplaceWarrantyDate).format('YYYY-MM-DD'));
                        $thisForm.find('[name="Serwardt"]').val(moment(ajaxOutput.Data[0].ServiceWarrantyDate).format('YYYY-MM-DD'));
                        AmcAmount = ajaxOutput.Data[0].Amount;
                        AmcNetAmount = ajaxOutput.Data[0].NetAmount;
                        if (ajaxOutput.Data[0].NetAmount > 0) {
                            $('.divPayment').show();
                        }
                        else {
                            $('.divPayment').hide();
                        }
                    }
                    else {
                        NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'No settings found ' });
                    }
            }
                else {
                    $('.divCustomerdetails').hide();
                }
               
            },
            complete: function () {
            }

        });

    }

    function BindWarrantyAmount(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let sum = 0;

        $('#Warrantydetailhd').find('tbody tr').each(function (index, ele) {
            sum = sum + parseFloat($(ele).find('.WarrantyNetAmount').text());
        });
        $thisForm.find('[name=Warrantyamt]').val(sum.toFixed(2));
    }

  

    function BindTotalWarAmount(ele) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let AmountArray = [];

        $('#Accounttrans').find('tbody tr').each(function (index, ele) {
            let type = $(ele).find('.TransType_d').text();
            let Amount = $(ele).find('.AhstAmount').text();
            let temp = {
                "Type": $(ele).find('.TransType_d').text(),
                "Amount": $(ele).find('.AhstAmount').text()
            };
            AmountArray.push(temp)

        });
        console.log(AmountArray);
        var paymentData = AmountArray.filter(obj => obj.Type === 'Payment');
        var paymentamount = 0.00;
        $.each(paymentData, function (keyOne, paymentData) {
            paymentamount = paymentamount + parseFloat(paymentData.Amount);
        });

        //let Amt = parseFloat(paymentamount.toFixed(2)).toLocaleString('en-IN') ;
        //console.log("Amount", Amt)
        $thisForm.find('[name=PaymentAmtTotal]').val(paymentamount.toFixed(2));



        var ReceiptData = AmountArray.filter(obj => obj.Type === 'Receipt');
        var Receiptamount = 0.00;
        $.each(ReceiptData, function (keyOne, ReceiptData) {
            Receiptamount = Receiptamount + parseFloat(ReceiptData.Amount);
        });
        $thisForm.find('[name=ReceiptAmtTotal]').val(Receiptamount.toFixed(2));

    }

    var TransType = 0;
    var ID_AMCDetails = 0;
    function fn_AMCWarrantyupdate1(ele, actionType) {

      
        let $blnItem = true;
        var Duedate;
        var Renewalduedate;
        var ReplaceWarrantyDate;
        var ServiceWarrantyDate;
        var Amount;
        var TaxAmount;
        var NetAmount;
        let $thisForm = $(ele).closest('[perfect-class="form"]');

        let $tblcontainer = $thisForm.find('[perfect-tempTable="Warranty"]');
        let AccountNo = $thisForm.find('[name="AccountNo"]').val();
        let FK_Master = ID_Sales;
        let FK_AMCType = AMCType;
        let NoOfServices = $thisForm.find('[name="NoofServices"]').val();
        let AMCRemarks = $thisForm.find('[name="AMCRemarks"]').val();
        TransType = $thisForm.find('[name="TransType"]').val();

      
        if (TransType == 1) {
            ReplaceWarrantyDate = $thisForm.find('[name="Replcwardt"]').val();
            ServiceWarrantyDate = $thisForm.find('[name="Serwardt"]').val();
            Amount = $thisForm.find('[name="WarrantyAmount"]').val();
            TaxAmount = $thisForm.find('[name="WarrantyTaxAmount"]').val();
            NetAmount = $thisForm.find('[name="WarrantyNetAmount"]').val();
            AMCMode = $thisForm.find('[name="AMCMode"]').val();
         
        }
        else {
            Duedate = $thisForm.find('[name="DueDate"]').val();
            Renewalduedate = $thisForm.find('[name="RenewDueDate"]').val();
            Amount = $thisForm.find('[name="AMCAmount"]').val();
            TaxAmount = $thisForm.find('[name="AMCTaxAmount"]').val();
            NetAmount = $thisForm.find('[name="AMCNetAmount"]').val();
            AMCMode = $thisForm.find('[name="AMCMode"]').val();
        
        }


        let AMCDetails = [];
        let WarrantyDetails = [];
    
        if (TransType == 2 && AMCMode ==1 ) {

            let AMCdata = {
                AMCFK_Master: FK_Master,
                AMCMType: FK_AMCType,
                FK_Product: FK_Product,
                AMCNoOfServices: NoOfServices,
                AMCMDuedate: Duedate,
                AMCMRenewduedate: Renewalduedate,
                AmcTotalAmount: Amount,
                AMCTaxTotalAmt: TaxAmount,
                AMCNetTotalAmt: NetAmount,
                AMCRemarks: AMCRemarks
            }
            AMCDetails.push(AMCdata);
        }
        else if (TransType == 2 && AMCMode == 2) {
            let AMCdata = {
                AMCAccountNo:AccountNo,
                AMCFK_Master: FK_Master,
                AMCMType: FK_AMCType,
                FK_Product: FK_Product,
                AMCNoOfServices: NoOfServices,
                AMCMDuedate: Duedate,
                AMCMRenewduedate: Renewalduedate,
                AmcTotalAmount: Amount,
                AMCTaxTotalAmt: TaxAmount,
                AMCNetTotalAmt: NetAmount,
                AMCRemarks: AMCRemarks
            }
            AMCDetails.push(AMCdata);
        }
        else {

            $thisForm.find('[perfect-tempTable="Warranty"]').find('tbody').find('tr').each(function () {
                if (parseFloat($(this).data('pData').WarrantyNetAmount) <= 0) {
                    $blnItem = false;
                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Missing or Invalid Net Amount' });
                    return false;
                }

                WarrantyDetails.push($(this).data('pData'));
            })
        }

        let PaymentDetails = [];
        $thisForm.find('[perfect-tempTable="Payment"]').find('tbody').find('tr').each(function () {
            PaymentDetails.push($(this).data('pData'));
        })



        if (TransType == 2 && AMCMode == 1) {

            if (AMCDetails.length > 0) {

                if (datencheck(ele)) {

                    if ($thisForm.valid()) {
                      if (BillAmountbind(ele)) {
                            let _ActionUrl = "";
                             ID_AMCDetails = 0;

                            if (actionType == "new") {
                                ID_AMCDetails = 0;
                                _ActionUrl = "@Url.Action("AddAMCDetails", "AMCWarrantyMapping")";
                            }
                            else if (actionType == "update") {
                                ID_AMCDetails = $thisForm.find('[name="ID_AMCDetails"]').val();
                                _ActionUrl = "@Url.Action("UpdateAMCDetails", "AMCWarrantyMapping")";
                            }




                            let inputData = {
                                __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                                'ID_AMCDetails': ID_AMCDetails,
                                'TransMode': TransMode,
                                'EffectDate': $thisForm.find('[name=EffectDate]').val(),
                                'TransDate': $thisForm.find('[name=TransDate]').val(),
                                'FK_Customer': $thisForm.find('[name="FK_Customer"]').val(),
                                'AMCDetails': AMCDetails,
                                'PaymentDetails': PaymentDetails,
                                'WarrantyDetails': WarrantyDetails,
                                'FK_Master': FK_Master,
                                'AMCMode': AMCMode
                            };
                            $.ajax({
                                url: _ActionUrl,
                                type: "POST",
                                data: inputData, //Antiforgery removed stringyfy
                                dataType: "json",
                                contentType: "application/x-www-form-urlencoded; charset=utf-8", //antiforgery
                                success: function (ajaxOutput) {
                                
                                    if (ajaxOutput.Process.IsProcess) {

                                        $.each(ajaxOutput.Process.Message, function (key, value) {
                                            NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });

                                            
                                            var FK_Master = ajaxOutput.Process.code;
                                            var Modes = TransType;
                                            console.log('Modes1', TransType);
                                            console.log('Modes1', $thisForm.find('[name="TransType"]').val());
                                            var Url = ('@Url.Action("GetAMCWarrantyMappinginvoice", "Report")?FK_Master=' + FK_Master + '&Modes=' + Modes);
                                            popitup(Url);
                                        });

                                        $thisForm.find('[perfect-ctype="select"]').val('').selectpicker('refresh');
                                        $thisForm.find('[perfect-ctype="input"]').val('');
                                        $thisForm.find('[perfect-ctype="date"]').val('');

                                        // Get the value set in form's perfect-onFormSuccess attribute
                                        let onSuccess = $thisForm.attr('perfect-onFormSuccess')

                                        if (onSuccess) {
                                            window[onSuccess]($thisForm);
                                            fn_AMCWarrantyAddForm();
                                        }

                                    }
                                    else {
                                        $.each(ajaxOutput.Process.Message, function (key, value) {
                                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                        });
                                    }
                                },
                                complete: function () {
                                    $(element).prop('disabled', false);
                                }

                            });

                        }
                        else {
                            $(element).prop('disabled', false);
                            NotificationMessage({ 'type': 'error', 'heading': 'Warning', 'message': 'In Payment Method Balance Amt. Should be  Zero ' });
                        }




                    }
                    else {
                        $(element).prop('disabled', false);
                    }
                }
                else {
                    $(element).prop('disabled', false);
                }
            }
            else {
                if (TransType == 2) {
                    $(element).prop('disabled', false);
                    NotificationMessage({ 'type': 'error', 'heading': 'Warning', 'message': 'Enter AMC Details' });
                }
            }
        }


        else {

        if (WarrantyDetails.length != 0) {

            // if (datencheck(element)) {

            // if ($thisForm.valid()) {
            if (BillAmountbind(ele)) {
                let _ActionUrl = "";
                let ID_AMCDetails = 0;

                if (actionType == "new") {
                    ID_AMCDetails = 0;
                    _ActionUrl = "@Url.Action("AddAMCDetails", "AMCWarrantyMapping")";
                }
                else if (actionType == "update") {
                    ID_AMCDetails = $thisForm.find('[name="ID_AMCDetails"]').val();
                    _ActionUrl = "@Url.Action("UpdatAMCDetails", "AMCWarrantyMapping")";
                }

                let PaymentDetails = [];
                $thisForm.find('[perfect-tempTable="Payment"]').find('tbody').find('tr').each(function () {
                    PaymentDetails.push($(this).data('pData'));
                })



                let inputData = {
                    __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                    'ID_AMCDetails': ID_AMCDetails,
                    'TransMode': TransMode,
                    'EffectDate': $thisForm.find('[name=EffectDate]').val(),
                    'TransDate': $thisForm.find('[name=TransDate]').val(),
                    'FK_Customer': $thisForm.find('[name="FK_Customer"]').val(),
                    'AMCDetails': AMCDetails,
                    'PaymentDetails': PaymentDetails,
                    'WarrantyDetails': WarrantyDetails,
                    'FK_Master': FK_Master,
                    'AMCMode': AMCMode
                };
                $.ajax({
                    url: _ActionUrl,
                    type: "POST",
                    data: inputData, //Antiforgery removed stringyfy
                    dataType: "json",
                    contentType: "application/x-www-form-urlencoded; charset=utf-8", //antiforgery
                    success: function (ajaxOutput) {
                      
                        if (ajaxOutput.Process.IsProcess) {

                            $.each(ajaxOutput.Process.Message, function (key, value) {
                                NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                                   var FK_Master = ajaxOutput.Process.code;
                                var Modes = TransType;
                                console.log('Modes2', TransType);
                                console.log('Modes2', $thisForm.find('[name="TransType"]').val());
                                    var Url = ('@Url.Action("GetAMCWarrantyMappinginvoice", "Report")?FK_Master=' + FK_Master + '&Modes=' + Modes);
                                     popitup(Url);
                            });

                            $thisForm.find('[perfect-ctype="select"]').val('').selectpicker('refresh');
                            $thisForm.find('[perfect-ctype="input"]').val('');
                            $thisForm.find('[perfect-ctype="date"]').val('');

                            // Get the value set in form's perfect-onFormSuccess attribute
                            let onSuccess = $thisForm.attr('perfect-onFormSuccess')

                            if (onSuccess) {
                                window[onSuccess]($thisForm);
                            }
                        }
                        else {
                            $.each(ajaxOutput.Process.Message, function (key, value) {
                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                            });
                        }
                    },
                    complete: function () {
                        $(element).prop('disabled', false);
                    }

                });

            }
            else {
                $(element).prop('disabled', false);
                NotificationMessage({ 'type': 'error', 'heading': 'Warning', 'message': 'In Payment Method Balance Amt. Should be  Zero ' });
            }

        }
        else {
            if (TransType == 1) {
                $(element).prop('disabled', false);
                NotificationMessage({ 'type': 'error', 'heading': 'Warning', 'message': 'Please enter one Warranty Details' });
            }

        }
        }
       
        }
 /////////////////////////////////


    function fn_AMCWarrantyupdate(ele, actionType) {

        debugger;

        let $blnItem = true;
        var Duedate;
        var Renewalduedate;
        var ReplaceWarrantyDate;
        var ServiceWarrantyDate;
        var Amount;
        var TaxAmount;
        var NetAmount;
        let $thisForm = $(ele).closest('[perfect-class="form"]');

        let $tblcontainer = $thisForm.find('[perfect-tempTable="Warranty"]');
        let AccountNo = $thisForm.find('[name="AccountNo"]').val();
        let FK_Master = ID_Sales;
        let FK_AMCType = AMCType;
        let NoOfServices = $thisForm.find('[name="NoofServices"]').val();
        let AMCRemarks = $thisForm.find('[name="AMCRemarks"]').val();
        TransType = $thisForm.find('[name="TransType"]').val();
        let AmcMode = $thisForm.find('[name="AMCMode"]').val();

        if (TransType == 1) {
            ReplaceWarrantyDate = $thisForm.find('[name="Replcwardt"]').val();
            ServiceWarrantyDate = $thisForm.find('[name="Serwardt"]').val();
            Amount = $thisForm.find('[name="WarrantyAmount"]').val();
            TaxAmount = $thisForm.find('[name="WarrantyTaxAmount"]').val();
            NetAmount = $thisForm.find('[name="WarrantyNetAmount"]').val();
            AMCMode = $thisForm.find('[name="AMCMode"]').val();

        }
        else {
            if (AmcMode == 2) {
                let AMCRenewalDetailsData = $thisForm.data('pAMCRenewalDetailsData');
                // console.log("AMCRenewalDetailsData", AMCRenewalDetailsData)
                Duedate = AMCRenewalDetailsData.DueDate;//$thisForm.find('[name="DueDate"]').val();
                Renewalduedate = AMCRenewalDetailsData.RenewDuedate;//$thisForm.find('[name="RenewDueDate"]').val();

                Amount = $thisForm.find('[name="AMCAmount"]').val();
                TaxAmount = $thisForm.find('[name="AMCTaxAmount"]').val();
                NetAmount = $thisForm.find('[name="AMCNetAmount"]').val();
                AMCMode = $thisForm.find('[name="AMCMode"]').val();
            }
            else {
                Duedate = $thisForm.find('[name="DueDate"]').val();
                Renewalduedate = $thisForm.find('[name="RenewDueDate"]').val();
                Amount = $thisForm.find('[name="AMCAmount"]').val();
                TaxAmount = $thisForm.find('[name="AMCTaxAmount"]').val();
                NetAmount = $thisForm.find('[name="AMCNetAmount"]').val();
                AMCMode = $thisForm.find('[name="AMCMode"]').val();

            }

          
        }


        let AMCDetails = [];
        let WarrantyDetails = [];
         
        if (TransType == 2 && AMCMode == 1) {

            let AMCdata = {
                AMCFK_Master: FK_Master,
                AMCMType: FK_AMCType,
                FK_Product: FK_Product,
                AMCNoOfServices: NoOfServices,
                AMCMDuedate: Duedate,
                AMCMRenewduedate: Renewalduedate,
                AmcTotalAmount: Amount,
                AMCTaxTotalAmt: TaxAmount,
                AMCNetTotalAmt: NetAmount,
                AMCRemarks: AMCRemarks
            }
            AMCDetails.push(AMCdata);
        }
        else if (TransType == 2 && AMCMode == 2) {
            let AMCdata = {
                AMCAccountNo: AccountNo,
                AMCFK_Master: FK_Master,
                AMCMType: FK_AMCType,
                FK_Product: FK_Product,
                AMCNoOfServices: NoOfServices,
                AMCMDuedate: Duedate,
                AMCMRenewduedate: Renewalduedate,                
                AmcTotalAmount: Amount,
                AMCTaxTotalAmt: TaxAmount,
                AMCNetTotalAmt: NetAmount,
                AMCRemarks: AMCRemarks
            }
            AMCDetails.push(AMCdata);
        }
        else {

            $thisForm.find('[perfect-tempTable="Warranty"]').find('tbody').find('tr').each(function () {
                if (parseFloat($(this).data('pData').WarrantyNetAmount) <= 0) {
                    $blnItem = false;
                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Missing or Invalid Net Amount' });
                    return false;
                }

                WarrantyDetails.push($(this).data('pData'));
            })
        }

        let PaymentDetails = [];
        $thisForm.find('[perfect-tempTable="Payment"]').find('tbody').find('tr').each(function () {
            PaymentDetails.push($(this).data('pData'));
        })



        if (TransType == 2 && AMCMode == 1) {

            if (AMCDetails.length > 0) {

                if (datencheck(ele)) {

                    if ($thisForm.valid()) {

                        if (BillAmountbind(ele)) {
                            let _ActionUrl = "";
                            ID_AMCDetails = 0;

                            if (actionType == "new") {
                                ID_AMCDetails = 0;
                                _ActionUrl = "@Url.Action("AddAMCDetails", "AMCWarrantyMapping")";
                            }
                            else if (actionType == "update") {
                                ID_AMCDetails = $thisForm.find('[name="ID_AMCDetails"]').val();
                                _ActionUrl = "@Url.Action("UpdateAMCDetails", "AMCWarrantyMapping")";
                            }




                            let inputData = {
                                __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                                'ID_AMCDetails': ID_AMCDetails,
                                'TransMode': TransMode,
                                'EffectDate': $thisForm.find('[name=EffectDate]').val(),
                                'TransDate': $thisForm.find('[name=TransDate]').val(),
                                'FK_Customer': $thisForm.find('[name="FK_Customer"]').val(),
                                'AMCDetails': AMCDetails,
                                'PaymentDetails': PaymentDetails,
                                'WarrantyDetails': WarrantyDetails,
                                'FK_Master': FK_Master,
                                'AMCMode': AMCMode
                            };
                            $.ajax({
                                url: _ActionUrl,
                                type: "POST",
                                data: inputData, //Antiforgery removed stringyfy
                                dataType: "json",
                                contentType: "application/x-www-form-urlencoded; charset=utf-8", //antiforgery
                                success: function (ajaxOutput) {

                                    if (ajaxOutput.Process.IsProcess) {

                                        $.each(ajaxOutput.Process.Message, function (key, value) {
                                            NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });


                                            var FK_Master = ajaxOutput.Process.code;
                                            var Modes = TransType;
                                            console.log('Modes1', TransType);
                                            console.log('Modes1', $thisForm.find('[name="TransType"]').val());
                                            var Url = ('@Url.Action("GetAMCWarrantyMappinginvoice", "Report")?FK_Master=' + FK_Master + '&Modes=' + Modes);
                                            popitup(Url);
                                        });

                                        $thisForm.find('[perfect-ctype="select"]').val('').selectpicker('refresh');
                                        $thisForm.find('[perfect-ctype="input"]').val('');
                                        $thisForm.find('[perfect-ctype="date"]').val('');

                                        // Get the value set in form's perfect-onFormSuccess attribute
                                        let onSuccess = $thisForm.attr('perfect-onFormSuccess')

                                        if (onSuccess) {
                                            window[onSuccess]($thisForm);
                                            fn_AMCWarrantyAddForm();
                                        }

                                    }
                                    else {
                                        $.each(ajaxOutput.Process.Message, function (key, value) {
                                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                        });
                                    }
                                },
                                complete: function () {
                                    $(ele).prop('disabled', false);
                                }

                            });

                        }
                        else {
                            $(ele).prop('disabled', false);
                            NotificationMessage({ 'type': 'error', 'heading': 'Warning', 'message': 'In Payment Method Balance Amt. Should be  Zero ' });
                        }




                    }
                    else {
                        $(ele).prop('disabled', false);
                    }
                }
                else {
                    $(ele).prop('disabled', false);
                }
            }
          
        }

        if (TransType == 2 && AMCMode == 2) {

            if (AMCDetails.length > 0) {

                if (datencheck(ele)) {
                   

                    if ($thisForm.valid()) {

                        let _ActionUrl = "";
                        ID_AMCDetails = 0;

                        if (actionType == "new") {
                            ID_AMCDetails = 0;
                            _ActionUrl = "@Url.Action("AddAMCDetails", "AMCWarrantyMapping")";
                        }
                        else if (actionType == "update") {
                            ID_AMCDetails = $thisForm.find('[name="ID_AMCDetails"]').val();
                            _ActionUrl = "@Url.Action("UpdateAMCDetails", "AMCWarrantyMapping")";
                        }


                    console.log("AMCDetails",AMCDetails)

                        let inputData = {
                            __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                            'ID_AMCDetails': ID_AMCDetails,
                            'TransMode': TransMode,
                            'EffectDate': $thisForm.find('[name=EffectDate]').val(),
                            'TransDate': $thisForm.find('[name=TransDate]').val(),
                            'FK_Customer': $thisForm.find('[name="FK_Customer"]').val(),
                            'AMCDetails': AMCDetails,
                            'PaymentDetails': PaymentDetails,
                            'WarrantyDetails': WarrantyDetails,
                            'FK_Master': FK_Master,
                            'AMCMode': AMCMode
                        };
                        $.ajax({
                            url: _ActionUrl,
                            type: "POST",
                            data: inputData, //Antiforgery removed stringyfy
                            dataType: "json",
                            contentType: "application/x-www-form-urlencoded; charset=utf-8", //antiforgery
                            success: function (ajaxOutput) {

                                if (ajaxOutput.Process.IsProcess) {

                                    $.each(ajaxOutput.Process.Message, function (key, value) {
                                        NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });


                                        var FK_Master = ajaxOutput.Process.code;
                                        var Modes = TransType;
                                        console.log('Modes1', TransType);
                                        console.log('Modes1', $thisForm.find('[name="TransType"]').val());
                                        @*var Url = ('@Url.Action("GetAMCWarrantyMappinginvoice", "Report")?FK_Master=' + FK_Master + '&Modes=' + Modes);
                                        popitup(Url);*@
                                    });

                                    $thisForm.find('[perfect-ctype="select"]').val('').selectpicker('refresh');
                                    $thisForm.find('[perfect-ctype="input"]').val('');
                                    $thisForm.find('[perfect-ctype="date"]').val('');

                                    // Get the value set in form's perfect-onFormSuccess attribute
                                    let onSuccess = $thisForm.attr('perfect-onFormSuccess')

                                    if (onSuccess) {
                                        window[onSuccess]($thisForm);
                                        fn_AMCWarrantyAddForm();
                                    }

                                }
                                else {
                                    $.each(ajaxOutput.Process.Message, function (key, value) {
                                        NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                    });
                                }
                            },
                            complete: function () {
                                $(ele).prop('disabled', false);
                            }

                        });

                   }



                }
                else {
                    $(ele).prop('disabled', false);
                }
            }
            else {
                $(ele).prop('disabled', false);
            }
        }
        else {

        }




        if (WarrantyDetails.length != 0) {

          
            if (BillAmountbind(ele)) {
                let _ActionUrl = "";
                let ID_AMCDetails = 0;

                if (actionType == "new") {
                    ID_AMCDetails = 0;
                    _ActionUrl = "@Url.Action("AddAMCDetails", "AMCWarrantyMapping")";
                }
                else if (actionType == "update") {
                    ID_AMCDetails = $thisForm.find('[name="ID_AMCDetails"]').val();
                    _ActionUrl = "@Url.Action("UpdatAMCDetails", "AMCWarrantyMapping")";
                }

                let PaymentDetails = [];
                $thisForm.find('[perfect-tempTable="Payment"]').find('tbody').find('tr').each(function () {
                    PaymentDetails.push($(this).data('pData'));
                })



                let inputData = {
                    __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                    'ID_AMCDetails': ID_AMCDetails,
                    'TransMode': TransMode,
                    'EffectDate': $thisForm.find('[name=EffectDate]').val(),
                    'TransDate': $thisForm.find('[name=TransDate]').val(),
                    'FK_Customer': $thisForm.find('[name="FK_Customer"]').val(),
                    'AMCDetails': AMCDetails,
                    'PaymentDetails': PaymentDetails,
                    'WarrantyDetails': WarrantyDetails,
                    'FK_Master': FK_Master,
                    'AMCMode': AMCMode
                };
                $.ajax({
                    url: _ActionUrl,
                    type: "POST",
                    data: inputData, //Antiforgery removed stringyfy
                    dataType: "json",
                    contentType: "application/x-www-form-urlencoded; charset=utf-8", //antiforgery
                    success: function (ajaxOutput) {

                        if (ajaxOutput.Process.IsProcess) {

                            $.each(ajaxOutput.Process.Message, function (key, value) {
                                NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                                var FK_Master = ajaxOutput.Process.code;
                                var Modes = TransType;
                                console.log('Modes2', TransType);
                                console.log('Modes2', $thisForm.find('[name="TransType"]').val());
                                var Url = ('@Url.Action("GetAMCWarrantyMappinginvoice", "Report")?FK_Master=' + FK_Master + '&Modes=' + Modes);
                                popitup(Url);
                            });

                            $thisForm.find('[perfect-ctype="select"]').val('').selectpicker('refresh');
                            $thisForm.find('[perfect-ctype="input"]').val('');
                            $thisForm.find('[perfect-ctype="date"]').val('');

                            // Get the value set in form's perfect-onFormSuccess attribute
                            let onSuccess = $thisForm.attr('perfect-onFormSuccess')

                            if (onSuccess) {
                                window[onSuccess]($thisForm);
                            }
                        }
                        else {
                            $.each(ajaxOutput.Process.Message, function (key, value) {
                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                            });
                        }
                    },
                    complete: function () {
                       // $(element).prop('disabled', false);
                    }

                });

            }
            else {
                $(ele).prop('disabled', false);
                NotificationMessage({ 'type': 'error', 'heading': 'Warning', 'message': 'In Payment Method Balance Amt. Should be  Zero ' });
            }

        }
        else {
            if (TransType == 1) {
                $(ele).prop('disabled', false);
                NotificationMessage({ 'type': 'error', 'heading': 'Warning', 'message': 'Please enter one Warranty Details' });
            }

        }


    }  
 



  function ViewInvoice(ele) {
               

      let $thisForm = $(ele).closest('[perfect-class="form"]');
      var FK_Master = $thisForm.find('[name="ID_WarrantyDetails"]').val();
        var Modes = TransType;
        var Url = ('@Url.Action("GetAMCWarrantyMappinginvoice", "Report")?FK_Master=' + FK_Master + '&Modes=' + Modes);
        popitup(Url);
    }

    function popitup(url) {
        newwindow = window.open(url, 'name', 'height=1000,width=1000');
        if (window.focus) { newwindow.focus() }
        return false;
    }

    var RenewAmount;
    var RenewTaxAmount;
    var RenewNetAmount;



    function getfunction(ele) {
        debugger;
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let AMCNo = $thisForm.find('[name="FK_AMCDetails"]').val();
        let Mode = $thisForm.find('[name="TransType"]').val();
        let EffectDate = $thisForm.find('[name="EffectDate"]').val();
      
      
        let InputData = {
            FK_AMCDetails: AMCNo,
            Mode: Mode,
            TransMode: TransMode,
            RenewDate:EffectDate
        };
           $.ajax({              
                    url: "@Url.Action("AMCRenewalDetails", "AMCWarrantyMapping")",
                    type: "Get",
                    data:InputData,
                    dataType: "json",
                    contentType: "application/json",
                    success: function (ajaxOutput) {

                        console.log('out', ajaxOutput);
                        if (ajaxOutput.Process.IsProcess) {
                            if (AMCMode == 2) {
                                $('.divRenewaldetails').show();
                            }
                            debugger;
                            let $tbl = $thisForm.find('.jq_Renewaldetails');

                            $tbl.find('.jq_renewalamount').text(ajaxOutput.Data[0].Amount);
                            $tbl.find('.jq_renewaldue').text(ajaxOutput.Data[0].DueDate);
                            $tbl.find('.jq_renewalrenew').text(ajaxOutput.Data[0].RenewDuedate);
                            $tbl.find('.jq_renewalnoofdervice').text(ajaxOutput.Data[0].NoOfServices);
                            $tbl.removeClass('d-none');

                            
                            //$thisForm.find('[name="DueDate"]').val(moment(ajaxOutput.Data[0].DueDate).format('YYYY-MM-DD'));
                            //$thisForm.find('[name="RenewDueDate"]').val(moment(ajaxOutput.Data[0].RenewDuedate).format('YYYY-MM-DD'));
                           
                            $thisForm.find('[name="NoOfServices"]').val(ajaxOutput.Data[0].NoOfServices);
                            $thisForm.find('[name="AMCAmount"]').val(ajaxOutput.Data[0].Amount);
                            $thisForm.find('[name="AMCTaxAmount"]').val(ajaxOutput.Data[0].TaxAmount);
                            $thisForm.find('[name="AMCNetAmount"]').val(ajaxOutput.Data[0].NetAmount);
                           
                            $thisForm.data({ pAMCRenewalDetailsData: ajaxOutput.Data[0] });
                           
                        }

                        else {                         
                   
                            $.each(ajaxOutput.Process.Message, function (key, value) {
                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'No Records Found' });
                            });
                            $('.divRenewaldetails').hide();
                        }

                    },
                    complete: function () {
                    }
                });
    }

    function fillTablepaymentmethod(ele, tkey, data, tableOptionsTempOut) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let tableOptionsTempfill = tableOptionsTempOut;
        let insertData = []
        let tableKey = tkey;
        let indexname = tkey + 'index';
        tableOptionsTempfill.rowAttribute.push(indexname);
        tableOptionsTempfill.hideColumn.push(indexname);
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');
        $.each(data, function (keyOne, valOne) {

            let pData = {};

            pData[indexname] = keyOne + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', pData[indexname])
            //---

            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                //console.log('tfhyrtname', nameAttr)
                if (typeof valOne[nameAttr] !== undefined) {

                    if ($this.is('select')) {
                        // tableOptionsTempfill.renameHeader[nameAttr + '_d'] = headerName;
                        tableOptionsTempfill.hideColumn.push(nameAttr);
                        //displat text of select
                        pData[nameAttr + '_d'] = $this.find('[value="' + valOne[nameAttr] + '"]').text();
                        pData[nameAttr] = valOne[nameAttr];
                        console.log('select', $this.find('options[value="' + valOne[nameAttr] + '"]').text());

                    }
                    else if ($this.is('input')) {

                        let inputType = $this.attr('type').toLocaleLowerCase();
                        console.log(inputType)


                        if (inputType == 'date') {

                            if (valOne[nameAttr] == null) {
                                pData[nameAttr] = valOne[nameAttr];
                            }
                            else {
                                pData[nameAttr] = moment(valOne[nameAttr]).format('YYYY-MM-DD');
                            }


                        }
                        else {
                            pData[nameAttr] = valOne[nameAttr];


                        }
                    }
                    else {
                        pData[nameAttr] = valOne[nameAttr];


                    }
                }



            });

            insertData.push(pData);


            //----

        });
        $tblcontainer.empty();
        $tblcontainer.append(pft_table_createtable(insertData, tableOptionsTempfill));
       
        
    }


    function BillAmountbind(ele) {
        debugger;
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let netamt=0;
        let netwarrantyamount = 0;
        let AmcNetAmount = 0;
        $('#Warrantydetailhd').find('tbody tr').each(function (index, ele) {
            netwarrantyamount = parseFloat($(ele).find('.WarrantyNetAmount').text());

        });


        $thisForm.find('[name=WarNetAmount]').val(parseFloat(netwarrantyamount).toFixed(2));
        AmcNetAmount = $thisForm.find('[name="AMCNetAmount"]').val() == "" ? "0" : $thisForm.find('[name="AMCNetAmount"]').val();
        if (TransType == 1) {
            netamt = netwarrantyamount;
        }
        else {


            netamt =AmcNetAmount ;

        }


        let billamt = 0;
        let bilamt = 0;

        if ($thisForm.find('[name=BalAmt]').text() == '') {
            bilamt = 0;
        }
        else {
            bilamt = netamt;
        }

        $('#Paymentdethead').find('tbody tr').each(function (index, ele) {           
            billamt += parseFloat($(ele).find('.PAmount').text());

        });

        bilamt = parseFloat(bilamt) - billamt;
        bilamt = (isNaN(bilamt) ? 0 : bilamt);
        $thisForm.find('[name=BalAmt]').text(parseFloat(bilamt).toFixed(2));
        if (bilamt == 0) {

            return true;

        }
        else {

            return false;

        }
    }


    function Pamount(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let amtp = $thisForm.find('[name="PAmount"]').val() == "" ? "0" : $thisForm.find('[name="PAmount"]').val();
        $thisForm.find('[name="PAmount"]').val(parseFloat(amtp).toFixed(2))
    }

    function Billttlnetchck(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');

        let balamt = $thisForm.find('[name=BalAmt]').text();


        if (parseFloat(balamt) == 0) {
            $('#formGroupModalpayment').modal('hide');
            $thisForm.find('[perfect-tempTable="Payment"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
        }
        else {

            $thisForm.find('[perfect-tempTable="Payment"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('Balance Amt. should be Zero');

        }
    }
    function BindBilldetails(ele) {

        debugger;

        let $thisForm = $(ele).closest('[perfect-class="form"]');

        let netamt = 0;
        let netwarrantyamount = 0;
        let netamcamount = 0;
        $('#Warrantydetailhd').find('tbody tr').each(function (index, ele) {
            netwarrantyamount = netwarrantyamount + parseFloat($(ele).find('.WarrantyNetAmount').text());

        });
        let amount = $thisForm.find('[name="AMCNetAmount"]').val() == "" ? "0" : $thisForm.find('[name="AMCNetAmount"]').val();
        netamcamount = parseFloat(netamcamount) + parseFloat(amount);



        if (TransType == 1) {
            netamt = netwarrantyamount;
        }
        else {

            netamt = netamcamount;
        }

        netamt = (isNaN(netamt) ? 0 : netamt);

        $thisForm.find('[name=BalAmt]').text(parseFloat(netamt).toFixed(2));

        BillAmountbind(ele);
    }
</script>