@*/*----------------------------------------------------------------------
Created By	: Amrithaak
Created On	: 10/03/2023
Purpose		: AllowanceSettings
-------------------------------------------------------------------------
Modification
On			By					OMID/Remarks
-------------------------------------------------------------------------
-------------------------------------------------------------------------*/*@

@model PerfectWebERP.Models.AllowanceSettingModel.AllowancesettingsListModel
<style>
</style>

<div class="card ">

    <div class="card-header">
        <h4 class="card-title col-12">@ViewBag.PageTitle</h4>
        <span title="To View List" onclick="fn_showListView();"><svg id="Layer_1" class="layer" stroke="currentColor" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" height="20" width="20" viewBox="0 0 122.88 122.54"><title>To View List</title><path class="viewlst" d="M4.69,0H46.22a4.71,4.71,0,0,1,4.69,4.69V46a4.69,4.69,0,0,1-4.69,4.69H4.69a4.65,4.65,0,0,1-3.31-1.38l-.09-.09A4.67,4.67,0,0,1,0,46V4.69A4.71,4.71,0,0,1,4.69,0ZM89.44,61.94a26.56,26.56,0,0,1,10.18,2l.07,0a26.61,26.61,0,0,1,15.25,32.16,26.18,26.18,0,0,1-2.7,6.11l10.3,11.24a1.27,1.27,0,0,1-.07,1.8l-7.57,6.9a1.27,1.27,0,0,1-1.79-.07l-9.86-10.85a26.36,26.36,0,0,1-6.1,2.74,26.87,26.87,0,0,1-7.71,1.13,26.51,26.51,0,0,1-10.17-2l-.07,0A26.64,26.64,0,0,1,64.85,78.37l0-.07A26.6,26.6,0,0,1,89.44,61.94Zm15,11.59a21.38,21.38,0,0,0-6.89-4.61l-.06,0a21.22,21.22,0,0,0-23.07,4.64l-.07.07a21.25,21.25,0,0,0-4.54,6.83l0,.06a21.32,21.32,0,0,0-1.58,8.06,21.26,21.26,0,0,0,29.35,19.62,21.54,21.54,0,0,0,6.89-4.61l.07-.07a21.09,21.09,0,0,0,4.54-6.83l0-.06a21.35,21.35,0,0,0,0-16.17,21.34,21.34,0,0,0-4.62-6.9ZM4.69,63.2H46.22a4.71,4.71,0,0,1,4.69,4.7v41.34a4.68,4.68,0,0,1-4.69,4.69H4.69A4.69,4.69,0,0,1,0,109.24V67.9a4.71,4.71,0,0,1,4.69-4.7ZM68.78,0h41.53A4.71,4.71,0,0,1,115,4.69V46a4.71,4.71,0,0,1-4.69,4.69H68.78A4.71,4.71,0,0,1,64.09,46V4.69a4.69,4.69,0,0,1,1.37-3.31l.1-.09A4.67,4.67,0,0,1,68.78,0Z"></path></svg></span>
    </div>
    <div class="card-body">
        <form id="" class="form-valide" perfect-class="form" action="#" method="post" perfect-onFormSuccess="">

            <div class="">
                <div class="row">
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Mode</span>
                                <span class="text-danger">*</span>

                            </label>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <select class="form-control perfectValidate_string" name="ALWMode" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" onchange="fn_showTypeList(this)">
                                        <option value="">Please Select </option>
                                        <option value="1">Allowance</option>
                                        <option value="2">Recovery</option>

                                    </select>

                                </div>
                                <div class="text-danger temptableError"></div>
                            </div>

                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Type</span>
                                <span class="text-danger">*</span>
                                <input type="hidden" name="ID_AllowanceSettings" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                            </label>
                            <div class="col-sm-8">
                                <select class="form-control perfectValidate_numeric"   name="AllowancetypeID" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" data-live-search="true" onchange="clearemployeetype(this); bindValues(this);" >
                                    <option value="">Please Select</option>
                                    @*@if (!(Model.AllowanceList is null))
                                    {
                                        foreach (var allowanceList in Model.AllowanceList)
                                        {
                                            <option value="@allowanceList.AllowancetypeID">@allowanceList.Allowancetype</option>
                                        }

                                    }*@
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Employee Type</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                @*<select class="form-control perfectValidate_string" id="EmployeeTypeID" name="EmployeeTypeID" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" data-live-search="true"onchange="clearemployee(this)">
                        <option value="0">Please Select </option>
                        @if (!(Model.EmployeeTypeList is null))
                        {
                            foreach (var employeeTypeList in Model.EmployeeTypeList)
                            {
                                <option value="@employeeTypeList.EmployeeTypeID">@employeeTypeList.EmployeeType</option>
                            }
                        }
                    </select>*@
                                <select class="form-control perfectValidate_string" id="EmployeeTypeID" name="EmployeeTypeID" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" onchange="clearemployee(this)">
                                    <option value="">Please Select</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Designation</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <select class="form-control perfectValidate_numeric"  name="DesignationID" perfect-elemet="Designation" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" data-live-search="true" perfect-selectButton="Add Designation" perfect-selectButtonAction="DesignationAdding">
                                    <option value="">Please Select</option>
                                    @if (!(Model.DesignationList is null))
                                    {
                                        foreach (var designationList in Model.DesignationList)
                                        {
                                            <option value="@designationList.DesignationID">@designationList.Designation</option>
                                        }

                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-lg-4 col-form-label">
                                <span perfect-class="formGroupLabel">Employee</span>
                            </label>
                            <div class="col-lg-8">
                                <div class="input-group" id="divemployeefrom">
                                    <input type="text" class="form-control " name="EmployeeName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled />
                                    <input type="hidden" name="FK_Employee" id="FK_Employee" class="perfectValidate_numeric_nm" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                    <div class="input-group-append">
                                        <button id="employeefromid" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchVal(this,94,'Employee List',[])" Criterea1="EmployeeTypeID" Criterea2="DesignationID" BindName="EmployeeName" BindVal="FK_Employee"></button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Effect Date</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="date" class="form-control perfectValidate_date" name="EffectDate" perfect-class="formGroupControl" perfect-ctype="date" max="2050-01-01" perfect-css="date" onchange="effectdatechecking(this)" />
                                <div class="invalid-feedback animated fadeInUp limit-check" style="display: block;"></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Amount Criteria</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <select class="form-control perfectValidate_numeric" name="AlsAmountCriteria" id="AlsAmountCriteria" onchange="functioncalculations(this)">

                                    <option value="">Please Select </option>
                                    <option value="1">Amount</option>
                                    <option value="2">Percentage</option>
                                </select>
                                <div class="text-danger temptableError"></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-12">
                        <div class="card">
                            <div class="accordion__header">
                                <span class="accordion__header--text">Calculation</span>
                            </div>

                            <br />
                            <div id="idsubtablesection">
                                <div class="row">
                                    <div class="col-sm-4" id="idallowanceamount">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">Amount</span>

                                            </label>
                                            <div class="col-sm-8">
                                                <input type="text" class="form-control" placeholder="" id="AlsAmount" name="AlsAmount" oninput="decimalpnt(this,'AlsAmount',3)" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" maxlength="12" />
                                            </div>
                                            <div class="text-danger temptableError"></div>
                                        </div>
                                    </div>


                                    <div class="col-sm-4" id="idsubtableallowancetype">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">Allowance Type</span>
                                                <span class="text-danger">*</span>
                                            </label>

                                            <div class="col-sm-8">
                                                <select class="form-control" name="FK_AllowanceType" id="FK_AllowanceType" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" perfect-tempTable-alwstatus="FK_AllowanceType">
                                                    <option value="">Please select</option>
                                                    @if (!(Model.AllowancetypeamountList is null))
                                                    {
                                                        foreach (var alwamountList in Model.AllowancetypeamountList)
                                                        {
                                                            <option value="@alwamountList.FK_AllowanceType">@alwamountList.AllowanceTypeName</option>
                                                        }
                                                    }
                                                </select>
                                                <span class="invalid-feedback animated fadeInUp d-block temptableError"></span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-4" id="idsubtableallowanceamount">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label" id="labelamount">
                                                <span perfect-class="formGroupLabel">Percentage</span>

                                            </label>
                                            <div class="col-sm-8">
                                                <input type="text" class="form-control" placeholder="" perfect-tempTable-alwstatus="AlsDetAmount" id="AlsDetAmount" oninput="decimalpnt(this,'AlsDetAmount',3)" name="AlsDetAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" maxlength="12" />
                                                <div class="text-danger temptableError"></div>
                                            </div>
                                        </div>
                                    </div>



                                    <div id="issubtableadd">


                                        <button type="button" class="btn btn-primary1" perfect-css="button" onclick="AllowanceAmountDetailsTable_create(this,'alwstatus',['FK_AllowanceType'])" name="reset" align="center"><i class="fa fa fa-plus" aria-hidden="true"></i></button>
                                        &nbsp;&nbsp;&nbsp<button class="btn btn-light1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" onclick="cleardetails(this,'alwstatus')"><i class="fa fa-refresh" aria-hidden="true"></i></button>



                                    </div>
                                </div>

                            </div>
                            <div class="row" id="subtable">
                                <div class="col-sm-12" style="padding-right:25px;padding-left:25px;">
                                    <div class="form-group row" perfect-class="formGroup">
                                        <div class="table-responsive" perfect-tempTable="alwstatus" id="alwstatusHead" perfect-tempTable-lastindex="0" perfect-tempTable-action="0"></div>
                                    </div>
                                </div>
                            </div>

                        </div>

                    </div>
                </div>
                </div>
                <div class="card-footer text-right" perfect-class="formFooter">
                    @*<button id="" type="button" class="btn btn-primary mr-3 addcompany-jq-addnewuserUpdate d-none" name="update" perfect-css="button" onclick="fn_AllowanceSettingsForm_add(this,'update')"><i class="fa fa-refresh fa-spin loaderClass"></i>Update</button>*@
                    <button id="addcompany-jq-addnewuser" type="button" class="btn btn-primary mr-3 " name="add" perfect-css="button" onclick="fn_AllowanceSettingsForm_add(this,'new')"><i class="fa fa-refresh fa-spin loaderClass "></i>Save</button>
                    <button type="button" class="btn btn-light" perfect-css="button" onclick="ResetButton(this)" name="reset">Clear</button>
                </div>
        </form>
    </div>
</div>
<script src="~/Scripts/jqDOM/searchDOMCreation.js"></script>
<script>
   
 //on load functions
 $(document).ready(function ()
 {
	initFunctions('form');
    });
    fn_fillEmployeeType();
    function clearemployeetype(ele) {        
        let $thisForm = $(ele).closest('[perfect-class="form"]');       
        $thisForm.find('[name="EmployeeName"]').val('');
        $thisForm.find('[name="FK_Employee"]').val('');        
        $thisForm.find('[name="AlsAmountCriteria"]').val('');
        //$thisForm.find('[name="EmployeeTypeID"]').val('');
        $("#idsubtableallowanceamount").hide();
        $("#idsubtableallowanceamount").hide();
        $("#idsubtableallowancetype").hide();
        $("#issubtableadd").hide();
        $("#idallowanceamount").hide();
        $("#subtable").hide();
        let $tblcontainer = $thisForm.find('[perfect-tempTable="alwstatus"]');
        $tblcontainer.empty();
        $thisForm.find('[name="EffectDate"]').val(moment().format('YYYY-MM-DD'));
        var today = new Date().toISOString().split('T')[0];
       // document.getElementsByName("EffectDate")[0].setAttribute('min', today);
        fn_fillEmployeeType();
    }

    //function bindValues(ele) {
    //    debugger

    //    var selectedValue = $(ele).val();
    //    $('#AlsAmountCriteria').html(""); var opthtml = "";
    //    if (selectedValue === "19") {
    //        opthtml = "<option value=''>Please Select </option>" +
    //            "<option value='1'>Amount</option>";
    //    } else {
    //        opthtml = "<option value=''>Please Select </option>" +
    //            " <option value='1'>Amount</option>" +
    //            "<option value='2'>Percentage</option>";

    //    } $('#AlsAmountCriteria').append(opthtml);
    //    $('#AlsAmountCriteria').selectpicker('refresh');
    //}

    function bindValues(ele) {
        debugger
            @*$.ajax({
                url:  "@Url.Action("Checkbasic", "AllowanceSettings")",
                method: 'GET',
                dataType: 'json',
                success: function (data) {
                    $('#AlsAmountCriteria').html(""); // Clear the dropdown options
                  
                    // Loop through the data and create options based on your condition
                    data.forEach(function (item) {
                        if (ALWType != 1) {
                            opthtml = "<option value=''>Please Select </option>" +
                                " <option value='1'>Amount</option>" +
                                "<option value='2'>Percentage</option>";
                        }
                        else {
                            var opthtml = "<option value=''>Please Select </option>" +
                                "<option value='1'>Amount</option>";


                        }
                    });

                    $('#AlsAmountCriteria').append(opthtml);
                    $('#AlsAmountCriteria').selectpicker('refresh');
                },
                error: function (error) {
                    console.error("Error fetching data: " + error);
                }
            });*@
        $('#AlsAmountCriteria').html(""); 
        var selectedVal = $('[name="AllowancetypeID"]').val();
        opthtml = "<option value=''>Please Select </option>" +
            " <option value='1'>Amount</option>" +
            "<option value='2'>Percentage</option>";
        AllowanceArray.forEach((i) => {
            
            if (selectedVal == i) {
                opthtml = "<option value=''>Please Select </option>" +
                    "<option value='1'>Amount</option>";
            };
        });
        $('#AlsAmountCriteria').append(opthtml);
        $('#AlsAmountCriteria').selectpicker('refresh');
        
    }
    @*function bindValues(FK_AllowanceType) {
    debugger;
    try {
        $('#AllowanceTypeName').val($('#FK_AllowanceType :selected').text());
        $.ajax({
            url: "@Url.Action("Checkbasic", "AllowanceSettings")",
            data: { 'FK_AllowanceType': FK_AllowanceType },
            cache: false,
            type: 'GET', // 'Get' should be changed to 'GET'
            dataType: 'json',
            async: false,
            contentType: 'application/json; charset=utf-8',
            success: function (data) {
                var Mydata = JSON.parse(data.table);
                if (Mydata.length > 0) {
                    try {
                        $.each(Mydata, function (i, value) {
                            if (value.ALWType == 1) {
                                $("#AlsAmount").show();
                                $("#AlsAmountCriteria").hide();
                            } else {
                                $("#AlsAmount").hide();
                                $("#AlsAmountCriteria").show();
                            }
                        });
                    } catch (exx) {
                        alert(exx);
                    }
                }
            },
            error: function (xhr, status, error) {
                var err = eval('(' + xhr.responseText + ')');
                alert(err.Message);
            }
        });
    } catch (ex) {
        // Handle the exception if needed
    }
}*@

    function clearemployee(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        $thisForm.find('[name="EmployeeName"]').val('');
        $thisForm.find('[name="FK_Employee"]').val(0);
        $thisForm.find('[name="AlsAmountCriteria"]').val(''),
          $("#idsubtableallowanceamount").hide();
        $("#idsubtableallowancetype").hide();
        $("#issubtableadd").hide();
        $("#idallowanceamount").hide();
        $("#subtable").hide();
        let $tblcontainer = $thisForm.find('[perfect-tempTable="alwstatus"]');
        $tblcontainer.empty();
        $thisForm.find('[name="EffectDate"]').val(moment().format('YYYY-MM-DD'));
        var today = new Date().toISOString().split('T')[0];
       // document.getElementsByName("EffectDate")[0].setAttribute('min', today);
        
    }

    //function decimalpnt(ele, name, range) {

    //    let input = $('#' + name);
    //    ele.value = ele.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');
    //    let t = ele.value;
    //    ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t;
    //    input.on('keydown', function () {
    //        if (ele.value.includes('.')) {

    //        }
    //        var key = event.keyCode || event.charCode;
    //        if (key == 8 || key == 46) { }
    //        else {
    //            if (ele.value.length == 10) {
    //                ele.value = ele.value + '.';
    //            }
    //        }

    //    });

    //}
      

        function decimalpnt(ele, id, range) {
        debugger
        let input = $('#' + id);

        ele.value = ele.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');
        let t = ele.value;
        ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t;

        $(document).on('keydown', '#' + id, function (event) {

            if (ele.value.includes('.')) {

            }
            else if (ele.value === '.' && (event.key === '.' || event.keyCode === 190)) {
                ele.value = '0.00'; // Change the value to '0.00' if only a dot is entered
                // Prevent the dot from being entered in the input field
            }
            var key = event.keyCode || event.charCode;
            if (key == 8 || key == 46) { }
            else {
                if (ele.value.indexOf('.') < 0 && ele.value.indexOf('.') !== 9 && ele.value.length > 8) {
                    ele.value = ele.value + '.';
                }
            }

        });

    }
    function effectdatechecking(ele) {


        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');

        let effectdate = $thisForm.find('[name=EffectDate]').val();
        


        effectdate = new Date(effectdate);
        effectdate.setHours(0, 0, 0, 0)

       


        let today = new Date();
        today.setHours(0, 0, 0, 0);

     //   if (effectdate < today) {
            //$thisForm.find('[name="EffectDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('')
         //   return false;

       // }

        //else {

        //    $thisForm.find('[name="EffectDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('')
          
        //    return true;
        //}




    }
    function functioncalculations(ele) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let criteria = $thisForm.find('[name="AlsAmountCriteria"]').val();
        $thisForm.find('[name="AlsAmount"]').val('');
        $thisForm.find('[name="FK_AllowanceType"]').val('');
        $thisForm.find('[name=" AlsDetAmount"]').val('');
        let $tblcontainer = $thisForm.find('[perfect-tempTable="alwstatus"]');
        $tblcontainer.empty();

        if (criteria == 1) {
            $("#idallowanceamount").show();

            $thisForm.find('[name="AlsAmount"]').addClass('perfectValidate_decimal');
        }
        else {
            $("#idallowanceamount").hide();
            $thisForm.find('[name="AlsAmount"]').removeClass('perfectValidate_decimal');
        }

        if (criteria == 2) {

            $("#idsubtableallowanceamount").show();
            $("#idsubtableallowancetype").show();
            $("#issubtableadd").show();
            $("#subtable").show();
            $thisForm.find('[name="AlsAmount"]').removeClass('perfectValidate_decimal');
          
        }
        else {
            $("#idsubtableallowanceamount").hide();
            $("#idsubtableallowancetype").hide();
            $("#issubtableadd").hide();
            $("#subtable").hide();
          
        }



    }
 // Function to Add AllowanceSettings
    function fn_AllowanceSettingsForm_add(element, actionType)
 {
        debugger

        let $thisForm = $(element).closest('[perfect-class="form"]');
        let effectdate = $thisForm.find('[name=EffectDate]').val();
        

        effectdate = new Date(effectdate);
        effectdate.setHours(0, 0, 0, 0)

      


        let today = new Date();
        today.setHours(0, 0, 0, 0);
      //  if (effectdate < today) {

         //   $thisForm.find('[name="ExpiryDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('Only Future Date Allowed');


       // }
       // else {
            if ($thisForm.valid()) {

                let $blnSuccess = false;
                let amountlist = [];
                $thisForm.find('[perfect-tempTable="alwstatus"]').find('tbody').find('tr').each(function () {
                    amountlist.push($(this).data('pData'));
                })
                console.log('subtable', amountlist);

                let criteria = $thisForm.find('[name=AlsAmountCriteria]').val().trim();
                if (amountlist.length <= 0 && criteria == 2) {
                    $blnSuccess = false;
                    $errorMsg = 'Please Fill Calculation Details';
                }
                else {
                    $blnSuccess = true;
                }


                $(element).prop('disabled', true);
                let _ID_AllowanceSettings = 0;
                let _ActionUrl = "";

                if (actionType === "new") {
                    _ID_AllowanceSettings = 0;
                    _ActionUrl = "@Url.Action("AddNewAllowanceSettings", "AllowanceSettings")";
                }
                else if (actionType === "update") {
                    _ID_AllowanceSettings = $thisForm.find('[name="ID_AllowanceSettings"]').val();
                    _ActionUrl = "@Url.Action("UpdateAllowanceSettings", "AllowanceSettings")";
                }


                let inputData =
                {
                    __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                    'ID_AllowanceSettings': _ID_AllowanceSettings,
                    'TransMode': AllowancesettingsTransMode,
                    'ALWMode': $thisForm.find('[name="ALWMode"]').val(),
                    'FK_AllowanceType': $thisForm.find('[name="AllowancetypeID"]').val(),
                    'FK_EmployeeType': $thisForm.find('[name="EmployeeTypeID"]').val(),
                    'FK_Designation': $thisForm.find('[name="DesignationID"]').val(),
                    'FK_Employee': $thisForm.find('[name=FK_Employee]').val().trim() == "" ? "0" : $('[name="FK_Employee"]').val().trim(),
                    'EffectDate': $thisForm.find('[name="EffectDate"]').val(),
                    'AlsAmountCriteria': $thisForm.find('[name="AlsAmountCriteria"]').val(),
                    'AlsAmount': $thisForm.find('[name="AlsAmount"]').val(),
                    'AllowanceSettingsDetails': amountlist

                };
                console.log('inputData', inputData);

                if ($blnSuccess) {
                    {
                        $.ajax({
                            url: _ActionUrl,
                            type: "POST",
                            data: inputData,
                            dataType: "json",
                            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                            success: function (ajaxOutput) {
                                if (ajaxOutput.Process.IsProcess) {
                                    $.each(ajaxOutput.Process.Message, function (key, value) {
                                        NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                                        $(element).prop('disabled', false);

                                    });
                                }
                                else {
                                    $.each(ajaxOutput.Process.Message, function (key, value) {
                                        NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                        $(element).prop('disabled', false);

                                    });
                                }

                                $thisForm.find('[perfect-ctype="select"]').val('').selectpicker('refresh');
                                $thisForm.find('[perfect-ctype="input"]').val('');
                                $thisForm.find('[perfect-ctype="date"]').val('');
                                let onSuccess = $thisForm.attr('perfect-onFormSuccess')
                                if (onSuccess) {
                                    window[onSuccess]();

                                }
                            },
                            complete: function () {
                                $(element).prop('disabled', false);
                            }
                        });
                    }
                }
                else {
                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': $errorMsg });
                    $(element).prop('disabled', false);
                }

            }
       // }
 }


    function cleardetails(ele, tablekey) {


        let $thisform = $(ele).closest('[perfect-class="form"]');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="select"]').val('').selectpicker('refresh');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="date"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="hidden"]').val('');

        let $tblcontainer = $thisform.find('[perfect-tempTable="' + tablekey + '"]');
        $tblcontainer.attr('perfect-tempTable-action', 0);

        if (tablekey = "alwstatus") {

        }

    }
 
    var tableOptionsTempOut = {
        iconButton: {
            buttons: [

                {
                    icon: "fa fa-pencil btnPerfectGridEdit",
                    action: function () {
                        let savedData = $(this).closest('tr').data('pData')
                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let tableKey = $tablecontainer.attr('perfect-tempTable');
                        let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                        let indexname = tableKey + 'index';
                        let rindex = $(this).closest('tr').attr(indexname);
                        $tablecontainer.attr('perfect-tempTable-action', rindex);
                        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                            let $thisNode = $(this);
                            let pf_name = $thisNode.attr('name');
                            if ($thisNode.is('select')) {
                                $thisNode.val(savedData[pf_name]).selectpicker('refresh');
                            }
                            else if ($thisNode.is('input')) {

                                if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                    $thisNode.prop('checked', savedData[pf_name]);
                                }
                                else {
                                    $thisNode.val(savedData[pf_name]);
                                }
                            }
                            else {
                                $thisNode.val(savedData[pf_name]);
                            }
                        });
                    }
                },
                {
                    icon: "fa fa-trash btnPerfectGridDelete",
                    action: function () {
                        let $thistbl = $(this).closest('table');
                        let table = $thistbl.DataTable();
                        table.destroy();
                        if ($(this).closest('tbody').find('tr').length > 1) {
                            $(this).closest('tr').remove();
                            pft_table_slreset($thistbl);
                            $thistbl.dataTable({ paging: true });
                        }
                        else {
                            $thistbl.remove();
                        }
                    }
                },
            ]
        },
        onlyShowColumn: [],
        hideColumn: [],
        serialNo: true,
        renameHeader: {'FK_AllowanceType':'AllowanceType','AlsDetAmount':'1RPercentage','FK_AllowanceType_d':'AllowanceType' },
        rowAttribute: [],
        isCheckType: []



    };
    var AllowanceArray = [];
 
    function fn_showTypeList(ele) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');

        let $actionDropdown = $thisForm.find('[name="AllowancetypeID"]');
        $actionDropdown.empty();
        $actionDropdown.append($('<option/>', { value: '' }).text('Please select')).selectpicker('refresh');


        let inputData =
        {
            __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
            ALWMode: $thisForm.find('[name="ALWMode"]').val()
        };
        $.ajax({
            url: "@Url.Action("GetALType", "AllowanceSettings")",
            type: "POST",
            dataType: "json",
            data: inputData,
            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            success: function (ajaxOutput) {
                if (ajaxOutput.Data.length > 0) {
                    $.each(ajaxOutput.Data, function (key, value) {
                        $actionDropdown.append($('<option/>', { value: value.AllowancetypeID }).text(value.Allowancetype)).selectpicker('refresh');
                    });
                    if ($actionDropdown.attr('perfect-onloadSelect')) {
                        $actionDropdown.val($actionDropdown.attr('perfect-onloadSelect')).selectpicker('refresh')
                    }

                    if ($thisForm.find('[name="AllowancetypeID"]').val() != "") {
                       
                        $thisForm.find('[name="AllowancetypeID"]').val($thisForm.find('[name="AllowancetypeID"]').val()).selectpicker('refresh');

                    }
                }
                else {
                    $.each(ajaxOutput.Process.Message, function (key, value) {
                        NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                    });
                }
            }
        });

     }

  
       function DesignationAdding(ele) {

            
            let $tempModel = createSearchModalDOM().modal;

            $tempModel.find('.modal-title').addClass("d-none");
            $tempModel.show
            $tempModel.find('.modal-dialog').addClass('modal-xl')

            $tempModel.find('.modal-body').load('@Url.Action("LoadDesignationForm", "Designation")', function () {

                let $thisForm = $(this).find('[perfect-class="form"]');
                $thisForm.attr('perfect-onFormSuccess', 'fn_loadDesignation_success');
                $thisForm.validate();


            });
    
    }

    function fn_loadDesignation_success(ele) {
        $(ele).closest('.modal').modal('hide');
        GetListDesignation();
    }

    function GetListDesignation() {
        let $thisForm = $('[perfect-class="form"]');
        $.ajax({
            url: '@Url.Action("GetDesignationList", "AllowanceSettings")',
            type: "Get",
            dataType: "json",
            contentType: "application/json",
            success: function (ajaxOutput) {//<----- if ajax method executed succesfully,  we get the data passed from controller in this variable  => success: function (variable) {              
                let $menuDropdown = $thisForm.find('[name=DesignationID]');//<--- Will give place select html element

               
               $menuDropdown.empty().selectpicker('refresh');
                $menuDropdown.append($('<option/>', { "value": "" }).text("Please Select")).selectpicker('refresh');

                if (ajaxOutput.Process.IsProcess) {
                    console.log(ajaxOutput);
                    $.each(ajaxOutput.Data, function (key, value) {
                        $menuDropdown.append($('<option/>', { "value": value.DesignationID }).text(value.Designation)).selectpicker('refresh');

                    });
               
                }
                else {
                    $.each(ajaxOutput.Process.Message, function (key, value) {
                        //toastr.warning(value, "Error");
                        NotificationMessage({ 'type': 'warning', 'heading': 'warning', 'message': value });
                    });
                }
            },

          complete: function () { initFunctions($thisForm); }
        });
    }

    function AllowanceAmountDetailsTable_create(element, tkey, uniq) {

        let $thisForm = $(element).closest('[perfect-class="form"]');
        let tableKey = tkey;
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');

        let insertData = {};
        let tableOptionsTemp = tableOptionsTempOut;

        let unique = (uniq) ? uniq : [];

        let isValid = true;
        let errorClass = '.temptableError';


        let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
        let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
        let indexname = tkey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);
        let updateCond = '';
        let isNew = true;

        if (thisactionIndex > 0) {
            insertData[indexname] = thisactionIndex;
            updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
            isNew = false;
        }
        else {
            insertData[indexname] = lastIndex + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
            isNew = true;
        }


       
        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="AlsDetAmount"]').val().length == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="AlsDetAmount"]').val().length == null) {
            isValid = false;

            $thisForm.find('[perfect-tempTable-' + tableKey + '="AlsDetAmount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter Percentage');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="AlsDetAmount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }


        let valmethod = $thisForm.find('[perfect-tempTable-' + tableKey + '="AlsDetAmount"]').val();
        if (valmethod > 100 || valmethod<=0) {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="AlsDetAmount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter Percentage in Between 1 to 100');
            isValid = false;
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="AlsDetAmount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }

        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="FK_AllowanceType"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="FK_AllowanceType"]').val() == '' || $thisForm.find('[perfect-tempTable-' + tableKey + '="FK_AllowanceType"]').val() == null || $thisForm.find('[perfect-tempTable-' + tableKey + '="FK_AllowanceType"]').val() == undefined) {
            isValid = false;

            $thisForm.find('[perfect-tempTable-' + tableKey + '="FK_AllowanceType"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter Allowance Type');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="FK_AllowanceType"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }

      


        if (unique.length > 0) {
            debugger
            let prevData = [];
            $tblcontainer.find('table > tbody').find('tr').each(function () {
                if (isNew) {
                    prevData.push($(this).data('pData'));
                    
                }
                else {
                    if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                        prevData.push($(this).data('pData'));
                    }

                }

            })

            unique.forEach(function (key, i) {
                let $thisEle = $thisForm.find('[perfect-tempTable-' + tableKey + '="' + key + '"]');
                let headerEleName = $thisForm.find('[name="lblType"]').text();
                let atname = $thisEle.attr('name');
                let cvalue;


                if ($thisEle.length != 0) {
                    let $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
                    let errmessage = headerEleName + "Already exits"

                    if ($thisEle.is('select')) {
                        cvalue = $thisEle.val();

                    }
                    //if ($thisEle.is('select')) {
                    //    if ($thisEle.val().length > 0) {
                    //        $errorElement.text('');
                    //    }
                    //}
                    else if ($thisEle.is('input')) {

                        let inputEleType = $thisEle.attr('type').toLocaleLowerCase();

                        if (inputEleType == 'checkbox') { cvalue = $thisEle.is(':checked'); }
                        else if (inputEleType == 'hidden') { cvalue = $thisEle.val(); }
                        else { cvalue = $thisEle.val(); }
                    }
                    else {
                        cvalue = $thisEle.val();
                    }

                    if (prevData.find(a => a[atname] == cvalue)) {
                        $errorElement.text(errmessage);
                        isValid = false;
                    }
                }
            });

        }

        if (isValid) {
            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                if ($this.is('select')) {
                    switch (headerName) {
                        case "FK_AllowanceType":
                            headerName = "Allowance Type";
                            break;
                        
                        default:
                            break
                    }
                    tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                    tableOptionsTemp.hideColumn.push(nameAttr)
                    if ($this.val() != null) {
                        let selectText = ($this.val().length == 0) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    else {
                        let selectText = ($this.val() == null) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    insertData[nameAttr] = $this.val();

                    $this.val('').selectpicker('refresh');
                }
                else if ($this.is('input')) {

                    let inputType = $this.attr('type').toLocaleLowerCase();

                    if (inputType == 'checkbox') {

                        insertData[nameAttr] = $this.is(':checked');

                        tableOptionsTemp.isCheckType.push(nameAttr)
                        $this.prop('checked', false);

                    }
                    else if (inputType == 'hidden') {
                        insertData[nameAttr] = $this.val();
                        $this.val('');

                    }

                    else {
                        insertData[nameAttr] = $this.val();

                        $this.val('');
                    }
                }
                else {
                    insertData[nameAttr] = $this.val();

                    $this.val('');
                }
            });

            if (isNew) {
                if ($tblcontainer.find('table').length == 0) {
                    $tblcontainer.append(pft_table_createtable([insertData], tableOptionsTemp));
                }
                else {
                    let table = $tblcontainer.find('table').DataTable()
                    table.destroy()
                    pft_table_addTableRow($tblcontainer.find('table'), insertData, tableOptionsTemp);
                }
            }
            else {
                let table = $tblcontainer.find('table').DataTable()
                table.destroy()
                pft_table_replaceTableRow($tblcontainer.find('table'), updateCond, insertData, tableOptionsTemp);
            }

            $tblcontainer.attr('perfect-tempTable-action', 0);
            //$thisForm.find('[name="AldAmountTo"]').attr('readonly', true);
        }
    }

    function ComDetailsTable_Fill(ele, tkey, data, tableOptionsTempOut) {

        let $thisForm = $(ele)

        let tableOptionsTemp = tableOptionsTempOut;
        let insertData = []
        let tableKey = tkey;

        let indexname = tkey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);

        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');


        $.each(data, function (keyOne, valOne) {

            let pData = {};

            pData[indexname] = keyOne + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', pData[indexname])
            //---

            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                console.log('name', valOne[nameAttr])
                if (typeof valOne[nameAttr] !== undefined) {

                    if ($this.is('select')) {
                        switch (headerName) {
                            case "FK_AllowanceType":
                                headerName = "Allowance Type";
                                break;

                            default:
                                break
                        }
                        tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                        tableOptionsTemp.hideColumn.push(nameAttr);
                        pData[nameAttr + '_d'] = $this.find('[value="' + valOne[nameAttr] + '"]').text();
                        pData[nameAttr] = valOne[nameAttr];
                    }
                    
                    else if ($this.is('input')) {

                        let inputType = $this.attr('type').toLocaleLowerCase();
                        console.log('inputType', inputType)
                        if (inputType == 'checkbox') {

                            pData[nameAttr] = valOne[nameAttr];

                            tableOptionsTemp.isCheckType.push(nameAttr);

                            console.log('checkbox', nameAttr)


                        }
                        else if (inputType == 'hidden') {

                            tableOptionsTemp.hideColumn.push(nameAttr);
                            pData[nameAttr] = valOne[nameAttr];


                        }

                        else if (inputType == 'date') {


                            pData[nameAttr] = moment(valOne[nameAttr]).format('DD-MM-YYYY');


                        }
                        else {
                            pData[nameAttr] = valOne[nameAttr];


                        }
                    }
                    else {
                        pData[nameAttr] = valOne[nameAttr];


                    }
                }



            });

            insertData.push(pData);
            console.log('insertdata', insertData)

            //----

        });

        $tblcontainer.append(pft_table_createtable(insertData, tableOptionsTemp));
        // $tblcontainer.find('table').dataTable({ paging: true });

    }

    function ResetButton(ele) {
        AllowancetypeInitialLoad();
    }
    function fn_fillEmployeeType() {       
        let $actionDropdown = $("#EmployeeTypeID");
        $actionDropdown.empty();
        $actionDropdown.append($('<option/>', { value: '' }).text('Please select')).selectpicker('refresh');
      
        $.ajax({
            url: "@Url.Action("GetEmployeeType", "AllowanceSettings")",
            type: "GET",
            dataType: "json",
            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            success: function (ajaxOutput) {
                console.log("ajaxOutput....25-04",ajaxOutput)
                if (ajaxOutput.Process.IsProcess) {
                    $.each(ajaxOutput.Data, function (key, value) {
                        console.log(value.EmployeeTypeID)
                        $actionDropdown.append($('<option/>', { value: value.EmployeeTypeID }).text(value.EmployeeType)).selectpicker('refresh');
                    });
                    if ($actionDropdown.attr('perfect-onloadSelect')) {
                        $actionDropdown.val($actionDropdown.attr('perfect-onloadSelect')).selectpicker('refresh')
                    }
                }
                else {
                    $.each(ajaxOutput.Process.Message, function (key, value) {
                        NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                    });
                }
            }
        });
    }
</script>


