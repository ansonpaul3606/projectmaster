





<div class="card ">
    <div class="card-header">
        <h6 class="card-title col-12">@ViewBag.PageTitle </h6>
        <span title="To View List" onclick="fn_showListView();"><svg id="Layer_1" class="layer" stroke="currentColor" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" height="20" width="20" viewBox="0 0 122.88 122.54"><title>To View List</title><path class="viewlst" d="M4.69,0H46.22a4.71,4.71,0,0,1,4.69,4.69V46a4.69,4.69,0,0,1-4.69,4.69H4.69a4.65,4.65,0,0,1-3.31-1.38l-.09-.09A4.67,4.67,0,0,1,0,46V4.69A4.71,4.71,0,0,1,4.69,0ZM89.44,61.94a26.56,26.56,0,0,1,10.18,2l.07,0a26.61,26.61,0,0,1,15.25,32.16,26.18,26.18,0,0,1-2.7,6.11l10.3,11.24a1.27,1.27,0,0,1-.07,1.8l-7.57,6.9a1.27,1.27,0,0,1-1.79-.07l-9.86-10.85a26.36,26.36,0,0,1-6.1,2.74,26.87,26.87,0,0,1-7.71,1.13,26.51,26.51,0,0,1-10.17-2l-.07,0A26.64,26.64,0,0,1,64.85,78.37l0-.07A26.6,26.6,0,0,1,89.44,61.94Zm15,11.59a21.38,21.38,0,0,0-6.89-4.61l-.06,0a21.22,21.22,0,0,0-23.07,4.64l-.07.07a21.25,21.25,0,0,0-4.54,6.83l0,.06a21.32,21.32,0,0,0-1.58,8.06,21.26,21.26,0,0,0,29.35,19.62,21.54,21.54,0,0,0,6.89-4.61l.07-.07a21.09,21.09,0,0,0,4.54-6.83l0-.06a21.35,21.35,0,0,0,0-16.17,21.34,21.34,0,0,0-4.62-6.9ZM4.69,63.2H46.22a4.71,4.71,0,0,1,4.69,4.7v41.34a4.68,4.68,0,0,1-4.69,4.69H4.69A4.69,4.69,0,0,1,0,109.24V67.9a4.71,4.71,0,0,1,4.69-4.7ZM68.78,0h41.53A4.71,4.71,0,0,1,115,4.69V46a4.71,4.71,0,0,1-4.69,4.69H68.78A4.71,4.71,0,0,1,64.09,46V4.69a4.69,4.69,0,0,1,1.37-3.31l.1-.09A4.67,4.67,0,0,1,68.78,0Z"></path></svg></span>
    </div>
    <div class="card-body">
        <form id="" class="form-valide" perfect-class="form" action="#" method="post" perfect-onFormSuccess="">
            <div class="">
                @Html.AntiForgeryToken()
                <div class="row">


                    <div class="col-sm-3">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Effect Date</span>
                                <input type="hidden" name="ID_BOMProject" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <div class="input-group">

                                    <input type="date" id="EffectDate" class="form-control perfectValidate_date" name="EffectDate" perfect-class="formGroupControl" perfect-ctype="date" max="2050-01-01" perfect-css="date" />

                                </div>
                            </div>
                        </div>

                    </div>
                    <div class="col-sm-3">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Name</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control perfectValidate_name " placeholder="" name="BOMName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-3">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">

                                <span perfect-class="formGroupLabel">Category</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <select class="form-control perfectValidate_numeric" name="CategoryID" id="Categoryid" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" data-live-search="true">

                                    <option value="">Please Select </option>

                                    @if (!(Model.CategoryList is null))
                                    {
                                        foreach (var categorylist in Model.CategoryList)
                                        {
                                            <option value="@categorylist.CategoryID">@categorylist.CategoryName</option>
                                        }

                                    }

                                </select>

                            </div>

                        </div>
                    </div>

                </div>

              
                <div class="row">
                    <div class="col-sm-12">
                        <div class="daccordion__header">
                            <span class="accordion__header--text">PRODUCT DETAILS</span>
                        </div>
                        <br />

                        <div class="row">
                            <div class="col-sm-3">

                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-4 col-form-label">
                                        <span perfect-class="formGroupLabel">Product</span>
                                        <span class="text-danger">*</span>
                                    </label>

                                    <div class="col-sm-8">
                                        <div class="input-group">
                                            <input type="text" class="form-control" name="SubProdName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" perfect-tempTable-ProductType="SubProduct" disabled />
                                            <input type="hidden" name="ID_Product" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-tempTable-ProductType="ID_Product" perfect-css="input" />

                                            <div class="input-group-append">

                                                <button id="addproduct-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchValAssign(this,171,'Product List',[],['Rate'])" Criterea1="0" Criterea2="0" BindName="SubProdName" BindVal="ID_Product" Function="2"></button>

                                            </div>

                                        </div>
                                        <span class="text-danger temptableError"></span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-4 col-form-label">
                                        <span perfect-class="formGroupLabel">Quantity</span>
                                        <span class="text-danger">*</span>
                                    </label>

                                    <div class="col-sm-6">
                                        <input type="text" class="form-control text-right" min="0" placeholder="" id="Quantity" name="Quantity" perfect-class="formGroupControl" oninput="decimalpnt(this,'Quantity',3)" perfect-ctype="input" perfect-css="input" perfect-tempTable-ProductType="Quantity" maxlength="10" />
                                        <span class="text-danger temptableError"></span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-4 col-form-label">
                                        <span perfect-class="formGroupLabel">Rate</span>
                                        <span class="text-danger">*</span>
                                    </label>

                                    <div class="col-sm-6">
                                        <input type="text" class="form-control text-right" min="0" placeholder="" id="Rate" name="Rate" perfect-class="formGroupControl" oninput="decimalpnt(this,'Rate',4)" perfect-ctype="input" perfect-css="input" perfect-tempTable-ProductType="Rate" maxlength="10" />
                                        <span class="text-danger temptableError"></span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-sm-2">
                                @*<div class="col-sm-4">*@
                                <input type="checkbox" class="form-check-input" id="CustomerMap" name="CustomerMap" perfect-class="formCheckInput" perfect-ctype="checkbox" perfect-tempTable-ProductType="CustomerMap" perfect-css="checkbox"><span perfect-class="formCheckInputText">Map with Customer</span>
                                @*</div>*@
                            </div>

                            <div class="col-sm-3">
                                <div class="form-group row" perfect-class="formGroup">


                                    <div class="col-sm-6">

                                    </div>
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group row" perfect-class="formGroup">


                                    <div class="col-sm-6">

                                    </div>
                                </div>
                            </div>
                            <div class="col-sm-4">
                                <button type="button" class="btn btn-primary1" id="idsubtableadd" perfect-css="button" onclick="CriteriaDetailsTable_create(this,'ProductType',['ID_Product'])" name="reset" align="center"><i class="fa fa fa-plus" aria-hidden="true"></i></button>
                                <button class="btn btn-light1" type="button" id="idsubtableclear" data-toggle="tooltip" data-placement="top" data-html="true" onclick="clearCriteria(this,'ProductType')"><i class="fa fa-refresh" aria-hidden="true"></i></button>
                            </div>



                            <div class="col-sm-12 mt-2">

                                <div class="table-responsive" perfect-tempTable="ProductType" id="ProductTypedetail" perfect-tempTable-lastindex="0" perfect-tempTable-action="0">

                                </div>
                            </div>
                        </div>

                        @*</div>*@
                    </div>
                </div>
                <div class="card-footer text-right" perfect-class="formFooter">

                    <button id="addcompany-jq-addnewuser" type="button" class="btn btn-primary mr-3 " name="add" perfect-css="button" onclick="AddBOMProject_update(this,'new')"><i class="fa fa-refresh fa-spin loaderClass "></i>Save</button>
                    <button id="" type="button" class="btn btn-primary mr-3 addcompany-jq-addnewuserUpdate d-none" name="update" perfect-css="button" onclick="AddBOMProject_update(this,'Update')"><i class="fa fa-refresh fa-spin  loaderClass"></i>Update</button>
                    
                    <button type="button" class="btn btn-light" perfect-css="button" onclick="ResetButton(this)" name="reset">Clear</button>
                </div>
            </div>
        </form>
    </div>



</div>
<script src="~/Scripts/jqDOM/searchDOMCreation.js"></script>
<script>

    $(document).ready(function () {
        initFunctions('form');
        let $thisForm = $(this).find('[perfect-class="form"]');




        $thisForm.validate({ messages: validationMessage });

        var today = new Date();
        var day = today.getDate() > 9 ? today.getDate() : "0" + today.getDate(); // format should be "DD" not "D" e.g 09
        var month = (today.getMonth() + 1) > 9 ? (today.getMonth() + 1) : "0" + (today.getMonth() + 1);
        var year = today.getFullYear();

        $thisForm.find('[name="EffectDate"]').attr('max', year + "-" + month + "-" + day);


    });
    function ResetButton(ele)
    {
        fn_BOMProject_initialload();
    }
    function CriteriaDetailsTable_create(ele, tkey, uniq) {
        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let tableKey = tkey;
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');

        let insertData = {};
        let tableOptionsTemp = tableOptionsTempOut;

        let unique = (uniq) ? uniq : [];

        let isValid = true;
        let errorClass = '.temptableError';

        //make index


        let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
        let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
        let indexname = tkey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);
        let updateCond = '';
        let isNew = true;
        if (thisactionIndex > 0) {
            //means update
            insertData[indexname] = thisactionIndex;
            updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
            isNew = false;
        }
        else {
            //insert
            insertData[indexname] = lastIndex + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
            isNew = true;
        }
       
     
        if ($thisForm.find("[name='ID_Product']").val() > 0) {
            $thisForm.find("[name='ID_Product']").closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }
        else if ($thisForm.find("[name='ID_Product']").val() == "" || $thisForm.find("[name='ID_Product']").val() <= 0 || $thisForm.find("[name='ID_Product']").val() == undefined) {
            isValid = false;
            $thisForm.find("[name='ID_Product']").closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Product');
        }

        if ($thisForm.find("[name='Quantity']").val() > 0) {
            $thisForm.find("[name='Quantity']").closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }
        else if ($thisForm.find("[name='Quantity']").val() == "" || $thisForm.find("[name='Quantity']").val() <= 0 || $thisForm.find("[name='Quantity']").val() == undefined) {
            isValid = false;
            $thisForm.find("[name='Quantity']").closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter Quantity');
        }
        if ($thisForm.find("[name='Rate']").val() > 0) {
            $thisForm.find("[name='Rate']").closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }
        else if ($thisForm.find("[name='Rate']").val() == "" || $thisForm.find("[name='Rate']").val() <= 0 || $thisForm.find("[name='Rate']").val() == undefined) {            isValid = false;
            $thisForm.find("[name='Rate']").closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter Rate');
        }

        let prevData = [];
        $tblcontainer.find('table > tbody').find('tr').each(function () {
            if (isNew) {
                prevData.push($(this).data('pData'));
            }
            else {
                if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                    prevData.push($(this).data('pData'));
                }

            }

        })
        if (unique.length > 0) {
            let prevData = [];
            $tblcontainer.find('table > tbody').find('tr').each(function () {
                if (isNew) {
                    prevData.push($(this).data('pData'));
                }
                else {
                    if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                        prevData.push($(this).data('pData'));
                    }
                }
            });


            unique.forEach(function (key, i) {
                debugger
                let $thisEle = $thisForm.find('[perfect-tempTable-' + tableKey + '="' + key + '"]');
                let headerEleName = $thisForm.find('[name="lblProName"]').text();
                let atname = $thisEle.attr('name');
                let cvalue;


                if ($thisEle.length != 0) {
                    let $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
                    let errmessage = "Already exists"

                    if ($thisEle.is('select')) {
                        cvalue = $thisEle.val();

                    }
                    else if ($thisEle.is('input')) {

                        let inputEleType = $thisEle.attr('type').toLocaleLowerCase();

                        if (inputEleType == 'checkbox') { cvalue = $thisEle.is(':checked'); }
                        else if (inputEleType == 'hidden') { cvalue = $thisEle.val(); }
                        else { cvalue = $thisEle.val(); }
                    }
                    else {
                        cvalue = $thisEle.val();
                    }

                    if (prevData.find(a => a[atname] == cvalue)) {
                        $errorElement.text(errmessage);
                        isValid = false;
                    }
                }
            });

        }

      
        if (isValid ) {



            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                //console.log('nameAttr', nameAttr);


                if ($this.is('select')) {

                    tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                    tableOptionsTemp.hideColumn.push(nameAttr)
                    //displat text of select
                    if ($this.val() != null) {
                        let selectText = ($this.val().length == 0) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    else {
                        let selectText = ($this.val() == null) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    //tableOptionsTemp.onlyShowColumn.push(nameAttr + '_d')

                    insertData[nameAttr] = $this.val();

                    $this.val('').selectpicker('refresh');




                }
                else if ($this.is('input')) {

                    let inputType = $this.attr('type').toLocaleLowerCase();

                    if (inputType == 'checkbox') {

                        insertData[nameAttr] = $this.is(':checked');

                        tableOptionsTemp.isCheckType.push(nameAttr)
                        //clear field
                        $this.prop('checked', false);

                    }
                    else if (inputType == 'hidden') {

                        tableOptionsTemp.hideColumn.push(nameAttr)
                        insertData[nameAttr] = $this.val();





                    }

                    else if (inputType == 'date') {

                        if ($this.val() == '') {

                            insertData[nameAttr] = '';

                        }
                        else {

                            insertData[nameAttr] = moment($this.val()).format('YYYY-MM-DD');
                            $this.val(moment().format('YYYY-MM-DD'));

                        }

                    }
                    else {
                        insertData[nameAttr] = $this.val();
                        $this.val('');

                    }
                }
                else {
                    insertData[nameAttr] = $this.val();
                    $this.val('');

                }




            });

            if (isNew) {

                //this section nake table.table row
                if ($tblcontainer.find('table').length == 0) {

                    $tblcontainer.append(pft_table_createtable([insertData], tableOptionsTemp));

                }
                else {

                    let table = $tblcontainer.find('table').DataTable()
                    table.destroy()
                    pft_table_addTableRow($tblcontainer.find('table'), insertData, tableOptionsTemp);



                }

            }
            else {

                let table = $tblcontainer.find('table').DataTable()
                table.destroy()

                pft_table_replaceTableRow($tblcontainer.find('table'), updateCond, insertData, tableOptionsTemp);



            }



            $tblcontainer.attr('perfect-tempTable-action', 0);
        }
        return isValid;

    }

    var tableOptionsTempOut = {

        iconButton: {
            buttons: [

                {
                    icon: "fa fa-pencil btnPerfectGridEdit",
                    action: function () {
                        let savedData = $(this).closest('tr').data('pData')

                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let tableKey = $tablecontainer.attr('perfect-tempTable');
                        let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                        //index attribute name in table row
                        let indexname = tableKey + 'index';
                        //index number in table row
                        let rindex = $(this).closest('tr').attr(indexname);
                        $tablecontainer.attr('perfect-tempTable-action', rindex);

                        console.log('Editclick', savedData);
                        //filling data in available inputs
                        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                            let $thisNode = $(this);
                            let pf_name = $thisNode.attr('name');
                            if ($thisNode.is('select')) {

                                $thisNode.val(savedData[pf_name]).selectpicker('refresh');
                            }
                            else if ($thisNode.is('input')) {

                                if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                    $thisNode.prop('checked', savedData[pf_name]);
                                }
                                else {
                                    $thisNode.val(savedData[pf_name]);
                                }

                            }
                            else {
                                $thisNode.val(savedData[pf_name]);
                            }


                        });



                    }
                },

                {


                    icon: "fa fa-trash btnPerfectGridDelete",
                    action: function () {
                        let savedData = $(this).closest('tr').data('pData')
                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let $thistbl = $(this).closest('table');
                        let table = $thistbl.DataTable();
                        table.destroy();
                        if ($(this).closest('tbody').find('tr').length > 1) {
                            $(this).closest('tr').remove();
                            pft_table_slreset($thistbl);
                            //$thistbl.dataTable({ paging: false,  ordering: false });

                        }
                        else {
                            $thistbl.remove();
                        }


                    }
                },

            ]
        },

        onlyShowColumn: [],
        hideColumn: ['SLNo'],
        serialNo: true,
        renameHeader: {
           'SubProdName': 'Product'

        },
        rowAttribute: [],
        isCheckType: []
    };
    function clearCriteria(ele, tablekey) {


        let $thisform = $(ele).closest('[perfect-class="form"]');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="select"]').val('').selectpicker('refresh');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="date"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="hidden"]').val('');
       
        $thisform.find('[name="CustomerMap"]').prop('checked', false);
        let $tblcontainer = $thisform.find('[perfect-tempTable="' + tablekey + '"]');
        $tblcontainer.attr('perfect-tempTable-action', 0);

        if (tablekey = "ProductType") {

        }

    }


    function AddBOMProject_update(element,actionType)
    {
        debugger
        let $thisForm = $(element).closest('[perfect-class="form"]');
        if ($thisForm.valid())
        {
          
            let $errorMsg = '';
            let $blnSuccess = false;
                    $(element).prop('disabled', true);


            let Productdetails = [];
            $thisForm.find('[perfect-tempTable="ProductType"]').find('tbody').find('tr').each(function () {
                Productdetails.push($(this).data('pData'));
            })

            console.log('Productdetails', Productdetails);

            if (Productdetails.length <= 0) {
                $blnSuccess = false;
                $errorMsg = 'Please Fill Product Details';
            }
            else {
                $blnSuccess = true;
            }

            let _ID_BOMProject = 0;
                    let _ActionUrl = "";

            if (actionType === "new") {

                _ActionUrl = "@Url.Action("AddBOMProject", "BOMProject")";
                _ID_BOMProject = 0;
            }
            else {
                _ID_BOMProject = $thisForm.find('[name="ID_BOMProject"]').val();
                _ActionUrl = "@Url.Action("UpdateBOMProject", "BOMProject")";
               
            }


                    let inputData = {
                        __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                        ID_BOMProject: _ID_BOMProject,
                        EffectDate: $('input[name="EffectDate"]').val(),
                        CategoryID: $('select[name="CategoryID"] option:selected').val(),
                        BOMName: $('input[name="BOMName"]').val(),
                      
                        BOMProjectProductDetails: Productdetails
                            
            };

            if ($blnSuccess)
                            {
                               $.ajax({
                                         url: _ActionUrl,
                                         type: "POST",
                                         data: inputData,
                                         dataType: "json",
                                         contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                                         success: function (ajaxOutput) {
                                             console.log(ajaxOutput, 'ajaxOutput ...>>ln808')
                                             debugger
                                             if (ajaxOutput.IsProcess) {
                                                 $.each(ajaxOutput.Message, function (key, value) {
                                                     NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                                                     $(element).prop('disabled', false);
                                                   
                                                     fn_BOMProject_initialload();
                                                 });
                                             }
                                             else {
                                                 $.each(ajaxOutput.Message, function (key, value) {
                                                     NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                                     $(element).prop('disabled', false);
                                                    
                                                    
                                                 });
                                             }

                                             //$thisForm.find('[perfect-ctype="select"]').val('').selectpicker('refresh');
                                             //$thisForm.find('[perfect-ctype="input"]').val('');
                                             //$thisForm.find('[perfect-ctype="date"]').val('');
                                             //let onSuccess = $thisForm.attr('perfect-onFormSuccess')
                                             //if (onSuccess) {
                                             //    window[onSuccess]();

                                             //}
                                         },
                                         complete: function ()
                                         {
                                                $(element).prop('disabled', false);
                                         }
                                    });
                            }
                            else
                            {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': $errorMsg });
                        $(element).prop('disabled', false);
                            }
        }
    }
    function getfunctionAssign(ele) {
    }
    </script>