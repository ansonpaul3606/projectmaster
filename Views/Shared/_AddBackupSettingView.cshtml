

@model PerfectWebERP.Models.BackupSettingModel.BackupSettingModelList

<div class="card ">
    <div class="card-header">
        <h4 class="card-title col-12">@ViewBag.PageTitles</h4>
        <span title="To View List" onclick="fn_showListView();"><svg id="Layer_1" class="layer" stroke="currentColor" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" height="20" width="20" viewBox="0 0 122.88 122.54"><title>To View List</title><path class="viewlst" d="M4.69,0H46.22a4.71,4.71,0,0,1,4.69,4.69V46a4.69,4.69,0,0,1-4.69,4.69H4.69a4.65,4.65,0,0,1-3.31-1.38l-.09-.09A4.67,4.67,0,0,1,0,46V4.69A4.71,4.71,0,0,1,4.69,0ZM89.44,61.94a26.56,26.56,0,0,1,10.18,2l.07,0a26.61,26.61,0,0,1,15.25,32.16,26.18,26.18,0,0,1-2.7,6.11l10.3,11.24a1.27,1.27,0,0,1-.07,1.8l-7.57,6.9a1.27,1.27,0,0,1-1.79-.07l-9.86-10.85a26.36,26.36,0,0,1-6.1,2.74,26.87,26.87,0,0,1-7.71,1.13,26.51,26.51,0,0,1-10.17-2l-.07,0A26.64,26.64,0,0,1,64.85,78.37l0-.07A26.6,26.6,0,0,1,89.44,61.94Zm15,11.59a21.38,21.38,0,0,0-6.89-4.61l-.06,0a21.22,21.22,0,0,0-23.07,4.64l-.07.07a21.25,21.25,0,0,0-4.54,6.83l0,.06a21.32,21.32,0,0,0-1.58,8.06,21.26,21.26,0,0,0,29.35,19.62,21.54,21.54,0,0,0,6.89-4.61l.07-.07a21.09,21.09,0,0,0,4.54-6.83l0-.06a21.35,21.35,0,0,0,0-16.17,21.34,21.34,0,0,0-4.62-6.9ZM4.69,63.2H46.22a4.71,4.71,0,0,1,4.69,4.7v41.34a4.68,4.68,0,0,1-4.69,4.69H4.69A4.69,4.69,0,0,1,0,109.24V67.9a4.71,4.71,0,0,1,4.69-4.7ZM68.78,0h41.53A4.71,4.71,0,0,1,115,4.69V46a4.71,4.71,0,0,1-4.69,4.69H68.78A4.71,4.71,0,0,1,64.09,46V4.69a4.69,4.69,0,0,1,1.37-3.31l.1-.09A4.67,4.67,0,0,1,68.78,0Z"></path></svg></span>
    </div>
    <div class="card-body">
        <form id="" class="form-valide" perfect-class="form" action="#" method="post" perfect-onFormSuccess="">
           
            
            <div class="">
                <div class="row">


                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Back Up Type</span>
                                <input type="hidden" name="ID_BackupSettings" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8 ">


                                <select class="form-control  perfectValidate_numeric" id="BSBackupType" name="BSBackupType" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select">
                                    <option value="">Please select</option>
                                    <option value="1">Internal Backup</option>
                                    <option value="2">External Backup</option>
                                    <option value="3">Network Backup</option>
                                </select>

                            </div>
                        </div>
                    </div>

                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel"> Back Up Name</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control perfectValidate_backupname" placeholder="" name="BSBackupName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Back Up Path</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                             
                                @*<label for="folderInput">Select a Folder:</label>
                               
                                <input type="file"
                                       directory="directory"
                                       multiple
                                       webkitdirectory="webkitdirectory"
                                       id="folderInput" name="folderInput" onchange="getPath(this)"/>
                                <br />

                                <button id="uploadButton" type="button">Upload</button>

                                <div>
                                    <label for="folderPathTextbox">Folder Path:</label>
                                    <input type="text" id="folderPathTextbox" readonly />
                                </div>*@

                                <input type="text" class="form-control perfectValidate_folderlocationRegx" placeholder="" name="BSBackupPath" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input"maxlength="500" />
                            </div>
                        </div>
                    </div>

                  
                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Keep Old Copy</span>

                            </label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control perfectValidate_numeric_nm" placeholder="" name="BSKeepOldCopy"id="BSKeepOldCopy" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="input"onchange="checkvalue(this)"oninput="decimalpnt(this,'BSKeepOldCopy',0)" maxlength="2"title="To know how many old backups to keep" />
                            </div>
                        </div>

                    </div>
                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Sort Order</span>

                            </label>
                            <div class="col-sm-8">
                                <input type="number" class="form-control perfectValidate_numeric_nm " placeholder="" name="SortOrder" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="input" value="@Model.SortOrder" />
                            </div>
                        </div>

                    </div>
                    <div class="col-sm-4">
                        &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp; &nbsp;&nbsp;
                        &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;
                        &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;
                        &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;
                        <input type="checkbox" class="form-check-input" name="BSOverwrite" perfect-class="formCheckInput" perfect-ctype="checkbox" perfect-css="checkbox">Over Write
                        &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;&nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;
                        <input type="checkbox" class="form-check-input" name="BSActive" perfect-class="formCheckInput" perfect-ctype="checkbox" perfect-css="checkbox">Active
                    </div>
                    <div class="col-sm-4">

                    </div>
                </div>
            </div>
            <div class="card-footer text-right" perfect-class="formFooter">
              
              
                    <button id="" type="button" class="btn btn-primary mr-3 addcompany-jq-addnewuserUpdate d-none" name="update" perfect-css="button" onclick="SaveBackuptypesettings(this,'Update')"><i class="fa fa-refresh fa-spin  loaderClass"></i>Update</button>
              
                    <button id="addcompany-jq-addnewuser" type="button" class="btn btn-primary mr-3 " name="add" perfect-css="button" onclick="SaveBackuptypesettings(this,'new')"><i class="fa fa-refresh fa-spin loaderClass "></i>Save</button>
              
                <button type="button" class="btn btn-light" perfect-css="button" onclick="ResetButton(this)" name="reset">Clear</button>
            </div>
        </form>
    </div>
</div>

<script src="~/Scripts/jqDOM/searchDOMCreation.js"></script>

<script>

    function ResetButton() {
        fn_Backupsettings_initialLoad();
    }
  
    function checkvalue(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let copynumber = $thisForm.find('[name=BSKeepOldCopy]').val().trim();
        if (parseFloat(copynumber) > 10) {
            $thisForm.find('[name=BSKeepOldCopy]').val(0).trim();
        }
        else {
            $thisForm.find('[name=BSKeepOldCopy]').val().trim();
        }
    }

    function decimalpnt(ele, id, range) {
        //debugger
        let input = $('#' + id);

        ele.value = ele.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');
        let t = ele.value;
        ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t;

        $(document).on('keydown', '#' + id, function (event) {

            if (ele.value.includes('.')) {

            }
            else if (ele.value === '.' && (event.key === '.' || event.keyCode === 190)) {
                ele.value = '0.00'; // Change the value to '0.00' if only a dot is entered
                // Prevent the dot from being entered in the input field
            }
            var key = event.keyCode || event.charCode;
            if (key == 8 || key == 46) { }
            else {
                if (ele.value.indexOf('.') < 0 && ele.value.indexOf('.') !== 9 && ele.value.length > 8) {
                    ele.value = ele.value + '.';
                }
            }

        });

    }
    function SaveBackuptypesettings(element,actionType)
    {
        debugger
        let $thisForm = $(element).closest('[perfect-class="form"]');
        if ($thisForm.valid())
        {
          
           

            let _ID_BackupSettings = 0;
                    let _ActionUrl = "";

            if (actionType === "new") {

                _ActionUrl = "@Url.Action("AddBackupSettings", "BackupSetting")";
                _ID_BackupSettings = 0;
            }
            else {
                _ID_BackupSettings = $thisForm.find('[name="ID_BackupSettings"]').val();
                _ActionUrl = "@Url.Action("UpdateBackupSettings", "BackupSetting")";
               
            }


                    let inputData = {
                        __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                        ID_BackupSettings: _ID_BackupSettings,
                        BSBackupType: $thisForm.find('[name=BSBackupType]').val(),
                        BSBackupName: $thisForm.find('[name=BSBackupName]').val(),
                        BSKeepOldCopy: $thisForm.find('[name=BSKeepOldCopy]').val(),

                        BSSortOrder: $thisForm.find('[name=SortOrder]').val(),
                        BSBackupPath: $thisForm.find('[name=BSBackupPath]').val(),
                        BSOverwrite: $thisForm.find('[name="BSOverwrite"]').is(':Checked'),
                        BSActive: $thisForm.find('[name="BSActive"]').is(':Checked')
                       
                      
                      
                            
            };

          
                               $.ajax({
                                         url: _ActionUrl,
                                         type: "POST",
                                         data: inputData,
                                         dataType: "json",
                                         contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                                         success: function (ajaxOutput) {
                                             console.log(ajaxOutput, 'ajaxOutput ...>>ln808')
                                             debugger
                                             if (ajaxOutput.IsProcess) {
                                                 $.each(ajaxOutput.Message, function (key, value) {
                                                     NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                                                     $(element).prop('disabled', false);
                                                   
                                                     fn_Backupsettings_initialLoad();
                                                 });
                                             }
                                             else {
                                                 $.each(ajaxOutput.Message, function (key, value) {
                                                     NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                                     $(element).prop('disabled', false);
                                                    
                                                    
                                                 });
                                             }

                                         },
                                         complete: function ()
                                         {
                                                $(element).prop('disabled', false);
                                         }
                                    });
                          
        }
    }


    @* $(document).ready(function () {

       $('#uploadButton').click(function () {

            var folderInput = $('#folderInput')[0].files;

            if (folderInput.length > 0) {
                // Assuming the first selected file represents the directory
                var folderPath = folderInput[0].webkitRelativePath;

                // Display the folder path in a textbox or perform other actions
                $('#folderPathTextbox').val(folderPath);
                console.log('folderPath',folderPath);

                // You can also use AJAX to send the folder path to the server if needed
                // Example AJAX request:
                 $.ajax({
                     type: "POST",
                     url: '@Url.Action("Uploaddirectoryfolder", "BackupSetting")',
                     data: { folderPath: folderPath },
                     success: function (data) {
                         // Handle success
                         $('#folderPathTextbox').val(data.dataUpload);

                     },
                     error: function (error) {
                         // Handle error
                     }
                 });
            } else {
                // Handle the case where no folder is selected
                alert("Please select a folder.");
            }
        });


    });*@
</script>
