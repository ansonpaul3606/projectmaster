@model PerfectWebERP.Models.ComplaintCheckListModel.ComplaintCheckList

<div class="card ">


    <div class="card-header">
        <h4 class="card-title col-12">@ViewBag.PageTitle</h4>
        <span title="To View List" onclick="fn_showListView();"><svg id="Layer_1" class="layer" stroke="currentColor" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" height="20" width="20" viewBox="0 0 122.88 122.54"><title>To View List</title><path class="viewlst" d="M4.69,0H46.22a4.71,4.71,0,0,1,4.69,4.69V46a4.69,4.69,0,0,1-4.69,4.69H4.69a4.65,4.65,0,0,1-3.31-1.38l-.09-.09A4.67,4.67,0,0,1,0,46V4.69A4.71,4.71,0,0,1,4.69,0ZM89.44,61.94a26.56,26.56,0,0,1,10.18,2l.07,0a26.61,26.61,0,0,1,15.25,32.16,26.18,26.18,0,0,1-2.7,6.11l10.3,11.24a1.27,1.27,0,0,1-.07,1.8l-7.57,6.9a1.27,1.27,0,0,1-1.79-.07l-9.86-10.85a26.36,26.36,0,0,1-6.1,2.74,26.87,26.87,0,0,1-7.71,1.13,26.51,26.51,0,0,1-10.17-2l-.07,0A26.64,26.64,0,0,1,64.85,78.37l0-.07A26.6,26.6,0,0,1,89.44,61.94Zm15,11.59a21.38,21.38,0,0,0-6.89-4.61l-.06,0a21.22,21.22,0,0,0-23.07,4.64l-.07.07a21.25,21.25,0,0,0-4.54,6.83l0,.06a21.32,21.32,0,0,0-1.58,8.06,21.26,21.26,0,0,0,29.35,19.62,21.54,21.54,0,0,0,6.89-4.61l.07-.07a21.09,21.09,0,0,0,4.54-6.83l0-.06a21.35,21.35,0,0,0,0-16.17,21.34,21.34,0,0,0-4.62-6.9ZM4.69,63.2H46.22a4.71,4.71,0,0,1,4.69,4.7v41.34a4.68,4.68,0,0,1-4.69,4.69H4.69A4.69,4.69,0,0,1,0,109.24V67.9a4.71,4.71,0,0,1,4.69-4.7ZM68.78,0h41.53A4.71,4.71,0,0,1,115,4.69V46a4.71,4.71,0,0,1-4.69,4.69H68.78A4.71,4.71,0,0,1,64.09,46V4.69a4.69,4.69,0,0,1,1.37-3.31l.1-.09A4.67,4.67,0,0,1,68.78,0Z"></path></svg></span>
    </div>
    <div class="card-body">
        <form id="" class="form-valide" perfect-class="form" action="#" method="post" perfect-onFormSuccess="">
            <div class="">
                <div class="row">
                    <input type="hidden" name="ID_ComplaintCheckList" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="hidden" />
                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">

                                <span perfect-class="formGroupLabel">Category</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <select class="form-control perfectValidate_numeric" name="CategoryID" id="Categoryid" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" data-live-search="true" onchange="clearproduct(this)">

                                    <option value="">Please Select </option>

                                    @if (!(Model.CategoryList is null))
                                    {
                                        foreach (var categorylist in Model.CategoryList)
                                        {
                                            <option value="@categorylist.CategoryID">@categorylist.Category</option>
                                        }

                                    }

                                </select>

                            </div>

                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Product</span>
                                @*<span class="text-danger">*</span>*@
                            </label>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <input type="text" class="form-control " name="ProductName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled />
                                    <input type="hidden" name="ProductID" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                    <div class="input-group-append">
                                        @*<button class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="searchbtn(this)"></button>*@
                                        <button id="addproduct-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchVal(this,85,'Product List',[])" Criterea1="CategoryID" Criterea2="0" BindName="ProductName" BindVal="ProductID"></button>

                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-6">

                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Complaint</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <select class="form-control perfectValidate_numeric" name="ComplaintID" perfect-class="formGroupControl" perfect-ctype="select">
                                    <option value="">Please select</option>
                                    @if (!(Model.ComplaintLists is null))
                                    {
                                        foreach (var Complaintlist in Model.ComplaintLists)
                                        {
                                            <option value="@Complaintlist.ComplaintListID">@Complaintlist.Complaint</option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                    </div>


                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Checking Details</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control perfectValidate_name" placeholder="" name="ComplaintDetails" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                            </div>
                        </div>
                    </div>


                </div>
            </div>

            <div class="row">
                <div class="col-sm-12">
                    <div class="accordion__item">
                        <div class="accordion__header collapsed" id="MasterProjectDetails" data-target="#active-header_collapseTwo">
                            <span class="accordion__header--icon"></span>
                            <span class="accordion__header--text">Check List Status</span>
                        </div>
                    </div>
                </div>
            </div>


              
                
                
                        <div class="row">
                            <div class="col-sm-6">
                              
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-5 col-form-label">
                                        <span perfect-class="formGroupLabel">Output Value</span>
                                       
                                    </label>
                                    <div class="col-sm-7">
                                        <input type="text" class="form-control " placeholder="" name="Output" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" perfect-tempTable-cstatus="Output" maxlength="50" />

                                        <span class="invalid-feedback animated fadeInUp d-block temptableError"></span>                                        
                                    </div>
                                </div>
                            </div>
                            <div class="col-sm-4">
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-4 col-form-label">
                                        <span perfect-class="formGroupLabel">Status</span>
                                       
                                    </label>
                                    <div class="col-sm-8">
                                        <input type="text" class="form-control " placeholder="" name="ComStatus" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" perfect-tempTable-cstatus="Status"maxlength="50" />
                                        <span class="invalid-feedback animated fadeInUp d-block temptableError"></span>
                                    </div>

                                </div>


                            </div>
                            <div class="col-sm-2">

                                <button class="btn btn-primary1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" title="Reset" onclick="ComDetailsTable_create(this,'cstatus',['Output'])"><i class="fa fa-plus" aria-hidden="true"></i></button>
                                <button class="btn btn-light1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" onclick="clearcomplaintdetails(this,'cstatus')"><i class="fa fa-refresh" aria-hidden="true"></i></button>

                            </div>

                        </div>

                  
                
                <div class="col-sm-12 mt-2">
                    <div class="table-responsive" perfect-tempTable="cstatus" perfect-tempTable-lastindex="0" perfect-tempTable-action="0">
                    </div>
                </div>

          
            <div class="card-footer text-right" perfect-class="formFooter">
                @if (ViewBag.PagedAccessRights.UsrrlMsEdt)
                {
                    <button id="" type="button" class="btn btn-primary mr-3 addcompany-jq-addnewuserUpdate d-none" name="update" perfect-css="button" onclick="updateCode(this,'update')"><i class="fa fa-refresh fa-spin  loaderClass"></i>Update</button>
                }
                @if (ViewBag.PagedAccessRights.UsrrlMsAdd)
                {
                    <button id="addcompany-jq-addnewuser" type="button" class="btn btn-primary mr-3 " name="add" perfect-css="button" onclick="updateCode(this,'new')"><i class="fa fa-refresh fa-spin loaderClass "></i>Save</button>
                }
                <button type="button" class="btn btn-light" perfect-css="button" onclick="ResetButton(this)" name="reset">Clear</button>
            </div>




        </form>
    </div>



</div>




<script src="~/Scripts/jqDOM/searchDOMCreation.js"></script>
<script>

    (function () {

        jQuery("select").selectpicker();
        //jQuery('form').validate();

    })();

    function clearproduct(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        $thisForm.find('[name= ProductID]').val(0);
       
        $thisForm.find('[name=ProductName]').val('');
    }


    function updateCode(ele,type) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');  
        if ($thisForm.find('[name=Output]').val()!="") {
            ComDetailsTable_create(ele, 'cstatus', [])            
        }
            let prevData = [];
        $thisForm.find('[perfect-tempTable="cstatus"]').find('table > tbody').find('tr').each(function () {
            prevData.push($(this).data('pData'));
        });

        if ($thisForm.valid()) {
            $(ele).prop('disabled', true);           
            let pdata = $thisForm.data('pData');
           
            var inputData = {
                __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                ID_ComplaintCheckList: isNaN(parseInt($thisForm.find('[name=ID_ComplaintCheckList]').val())) ? 0 : parseInt($thisForm.find('[name=ID_ComplaintCheckList]').val()),
                ComplaintCheckingDetails: $thisForm.find('[name=ComplaintDetails]').val().trim(),
                FK_Product: $thisForm.find('[name=ProductID]').val().trim(),
                FK_Complaint: $thisForm.find('[name=ComplaintID]').val().trim(),
                CategoryID: $thisForm.find('[name=CategoryID]').val().trim(),
                TransMode: localStorage.getItem("FRM_TRANSMODE"),
                comlist: prevData     
            }          
            $.ajax({
                url: (type=="update")?"@Url.Action("UpdatComplaintCheckList", "ComplaintCheckList")":"@Url.Action("AddComplaintCheckList", "ComplaintCheckList")",
                type: "POST",
                data: inputData,
                dataType: "json",
                contentType: 'application/x-www-form-urlencoded;charset=utf-8',
                success: function (data) {
                    if (data.Process.IsProcess) {
                        $.each(data.Process.Message, function (key, value) {
                            NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                        });
                        $thisForm.find('[perfect-ctype="select"]').val('').selectpicker('refresh');
                        $thisForm.find('[perfect-ctype="input"]').val('');
                        $thisForm.find('[perfect-ctype="date"]').val('');
                        let onSuccess = $thisForm.attr('perfect-onFormSuccess')
                        if (onSuccess) {
                            window[onSuccess]();
                          
                        }
                        fn_ComplaintListIndex_initialLoad();
                    }
                    else {
                        $.each(data.Process.Message, function (key, value) {                           
                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                        });
                    }
                },
                complete: function () {
                    $(ele).prop('disabled', false);
                }
            });
        }

       


    }



    
    function ResetButton(ele) {

        $('.dataTable tr').removeClass("SelectForDelete");
        complaintlist_loadform();


    }








        function searchbtn(ele) {
           
            let $this = $(ele).closest('[perfect-class="formGroup"]');

            $.ajax({
                url: '@Url.Action("GetProductlist", "ComplaintCheckList")',
                type: "Get",
                headers: { "token_key": "1234" },
                //data: { branchID: id },
                dataType: "json",
                contentType: "application/json",
                success: function (successData) {


                    if (successData.Process.IsProcess) {


                        var sss = createSelectList({ data: successData.Data, hideColumn: ['ProductID'] });
                        sss.then(function (ret) {
                            if (ret) {
                                $this.find('[name=ProductID]').val(ret.ProductID);
                                $this.find('[name=ProductName]').val(ret.ProductName);
                            }
                            else {
                                console.log(ret);
                            }
                        });

                    }
                    else {
                        $.each(successData.Process.Message, function (key, value) {
                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                        });
                    }




                },
                complete: function () {

                    //a.find('.dataTables_wrapper').css('width', '100%');
                }
            });

        }


    //let options = {
    //    val: "",
    //    hide: [],
    //    uniqID:[]
    //};
    //  <input type="text" class="form-control perfectValidate_string" name="CustomerData" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" perfect-tempTable-taxType="Customer Data" />
    //<a onclick="addToTempTable(this,{val:'taxType'})">Add</a>
    //    <div class="table-responsive" perfect-tempTable="taxType"></div>

    var AddButton = function (ele, options) {
        let val = options.val;
        let hide = (options.hide) ? options.hide : [];
        let uniqID = (options.uniqID) ? options.uniqID:[];
        let errorClass = '.temptableError';

        let $container = $(ele).closest('[perfect-class="form"]')
        //.find('[perfect-tempTable="' + val + '"]');
        let isvalid = true;
        let $tbl = $container.find('[perfect-tempTable="' + val + '"]');

        let savedData = [];
        $container.find('[perfect-tempTable="' + val + '"]').find('tbody').find('tr').each(function () {
            savedData.push($(this).data('pData'));
        })
        //validate
        $container.find('[perfect-tempTable-' + val + ']').each(function () {
            let $this = $(this);

            //if ($this.val().trim().length == 0) {
            if ($this.val().trim().length == 0) {
                $this.closest('[perfect-class="formGroup"]').find(errorClass).text($this.attr('perfect-tempTable-' + val) + ' Field required');
                isvalid = false;
            }
            else {
                $this.closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }



        });
        if (uniqID.length > 0) {
            uniqID.forEach(function (key, value) {
                console.log('uniq' + key + '|' + value);
                let $thisfield = $container.find('[perfect-tempTable-' + val + '="' + key + '"]');
                let cvalue = $thisfield.val();
                let ckey = $thisfield.attr('name');
                console.log('Cvalue:' + cvalue + ' |  ckey' + ckey);
                console.log('saved data', savedData)
                if (savedData.find(a => a[ckey] == cvalue)) {
                    console.log('inside cval==key')
                    $thisfield.closest('[perfect-class="formGroup"]').find(errorClass).text(' Already Exist');
                    isvalid = false;
                }
            });

        }
        console.log('is valida input', isvalid)
        if (isvalid) {
            let rhead = $('<tr/>', { class: "btn-reveal-trigger" });
            let rbody = $('<tr/>', { class: "btn-reveal-trigger" });
            let tempSave = {};
            if ($tbl.find('table').length == 0) {
                let $table = $('<table/>', { class: "table mb-0  table-striped  text-black" });
                let $thead = $('<thead/>', { class: "bg-primary text-white" })
                let $tbody = $('<tbody/>');

                $container.find('[perfect-tempTable-' + val + ']').each(function () {
                    let $this = $(this);
                    if (!hide.includes($this.attr('perfect-tempTable-' + val))) {
                        rhead.append($('<th/>').text($this.attr('perfect-tempTable-' + val)))

                        if ($this.attr('type') == 'checkbox') {
                            rbody.append($('<td/>', { 'perfect-tempTable-td-name': $this.attr('name') }).html($('<i/>', { class: ($this.is(':checked') ? "fa fa-check text-success" : "fa fa-times text-danger") })));

                        }
                        else {
                            rbody.append($('<td/>', { 'perfect-tempTable-td-name': $this.attr('name') }).text($this.val()))

                        }

                    }
                    if ($this.attr('type') == 'checkbox') {
                        tempSave[$this.attr('name')] = $this.is(':checked');
                        //uncheck this field
                        $this.prop('checked', false);
                    } else {
                        tempSave[$this.attr('name')] = $this.val();
                        //clear this field
                        $this.val('');
                    }
                });
                //console.log('create', tempSave);
                rbody.data({ 'pData': tempSave });
                $thead.html(rhead.append('<th/>'));
                $tbody.html(rbody.append($('<td/>', { class: "d-flex" }).append($('<a/>', { class: "btn btn-danger shadow btn-xs sharp mr-1" }).html($('<i/>', { class: 'fa fa-trash' }))
                    .click(function () {
                        if ($(this).closest('tbody').find('tr').length == 1) {
                            $(this).closest('[perfect-temptable="' + val + '"]').empty();
                        } else {
                            $(this).closest('tr').remove();
                        }
                    }))));
                $tbl.html($table.append($thead).append($tbody))

            }
            else {

                $container.find('[perfect-tempTable-' + val + ']').each(function () {
                    let $this = $(this);
                    if (!hide.includes($this.attr('perfect-tempTable-' + val))) {
                        if ($this.attr('type') == 'checkbox') {
                            rbody.append($('<td/>', { 'perfect-tempTable-td-name': $this.attr('name') }).html($('<i/>', { class: ($this.is(':checked') ? "fa fa-check text-success" : "fa fa-times text-danger") })));
                            //uncheck check box
                            $this.prop('checked', false);
                        }
                        else {
                            rbody.append($('<td/>', { 'perfect-tempTable-td-name': $this.attr('name') }).text($this.val()));
                            //clear this field
                            $this.val('');
                        }
                    }
                    if ($this.attr('type') == 'checkbox') {
                        tempSave[$this.attr('name')] = $this.is(':checked');
                    } else {
                        tempSave[$this.attr('name')] = $this.val();
                    }
                });
                // console.log('create', tempSave);
                rbody.data({ 'pData': tempSave });
                $tbl.find('tbody').append(rbody.append($('<td/>', { class: "d-flex" })
                    //edit fucntion
                    .append($('<button/>', { class: "btn btn-danger shadow btn-xs sharp mr-1" }).html($('<i/>', { class: 'fa fa-trash' }))
                        .click(function () {
                            console.log('len', $(this).closest('tbody').find('tr').length);
                            if ($(this).closest('tbody').find('tr').length == 1) {
                                $(this).closest('[perfect-temptable="' + val + '"]').empty();
                                console.log('inside ');
                            } else {
                                $(this).closest('tr').remove();
                            }
                        }))
                    //delete function
                    .append($('<button/>', { class: "btn btn-danger shadow btn-xs sharp mr-1" }).html($('<i/>', { class: 'fa fa-trash' }))
                        .click(function () {
                            console.log('len', $(this).closest('tbody').find('tr').length);
                            if ($(this).closest('tbody').find('tr').length == 1) {
                                $(this).closest('[perfect-temptable="' + val + '"]').empty();
                                console.log('inside ');
                            } else {
                                $(this).closest('tr').remove();
                            }
                        }))
                ));
            }
        }
    };





    ///Table///


    var tableOptionsTempOut = {
        iconButton: {
            buttons: [
                
                {
                   icon: "fa fa-pencil btnPerfectGridEdit",
                    action: function () {
                        let savedData = $(this).closest('tr').data('pData')

                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let tableKey = $tablecontainer.attr('perfect-tempTable');
                        let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                        //index attribute name in table row
                        let indexname = tableKey + 'index';
                        //index number in table row
                        let rindex = $(this).closest('tr').attr(indexname);
                        $tablecontainer.attr('perfect-tempTable-action', rindex);

                        console.log('Editclick', savedData);
                        //filling data in available inputs
                        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                            let $thisNode = $(this);
                            let pf_name = $thisNode.attr('name');
                            if ($thisNode.is('select')) {

                                $thisNode.val(savedData[pf_name]).selectpicker('refresh');
                            }
                            else if ($thisNode.is('input')) {

                                if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                    $thisNode.prop('checked', savedData[pf_name]);
                                }
                                else {
                                    $thisNode.val(savedData[pf_name]);
                                }

                            }
                            else {
                                $thisNode.val(savedData[pf_name]);
                            }


                        });



                    }
                },
                {
                    icon: "fa fa-trash btnPerfectGridDelete",
                    action: function () {
                        let $thistbl = $(this).closest('table');
                        let table = $thistbl.DataTable();
                        table.destroy();
                        if ($(this).closest('tbody').find('tr').length > 1) {
                            $(this).closest('tr').remove();
                            pft_table_slreset($thistbl);
                           // $thistbl.dataTable({ paging: true });
                        }
                        else {
                            $thistbl.remove();
                        }

                    }
                },
            ]
        },
        //onlyShowColumn: [],
             
        rowAttribute: [],
        renameHeader: { 'Output': 'Output Value1R', 'ComStatus': 'Status1R' },
        hideColumn: [],
        serialNo: true, 
       // isCheckType: []
    };
    function ComDetailsTable_Fill(ele, tkey, data, tableOptionsTempOut) {




        let $thisForm = $(ele)

        let tableOptionsTemp = tableOptionsTempOut;
        let insertData = []
        let tableKey = tkey;

        let indexname = tkey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);

        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');


        $.each(data, function (keyOne, valOne) {

            let pData = {};

            pData[indexname] = keyOne + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', pData[indexname])
            //---

            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                console.log('name', valOne[nameAttr])
                if (typeof valOne[nameAttr] !== undefined) {

                    if ($this.is('select')) {


                        tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                        tableOptionsTemp.hideColumn.push(nameAttr);
                        //displat text of select

                        let selectText = ($this.val().length == 0) ? '' : $this.find('[value="' + valOne[nameAttr] + '"]').text();

                        pData[nameAttr + '_d'] = selectText;
                        pData[nameAttr] = valOne[nameAttr];
                        console.log('select', $this.find('options[value="' + valOne[nameAttr] + '"]').text());

                    }
                    else if ($this.is('input')) {

                        let inputType = $this.attr('type').toLocaleLowerCase();
                        console.log(inputType)
                        if (inputType == 'checkbox') {

                            pData[nameAttr] = valOne[nameAttr];

                            tableOptionsTemp.isCheckType.push(nameAttr);

                            console.log('checkbox', nameAttr)


                        }
                        else if (inputType == 'hidden') {

                            tableOptionsTemp.hideColumn.push(nameAttr);
                            pData[nameAttr] = valOne[nameAttr];


                        }
                        else if (inputType == 'date') {


                            pData[nameAttr] = moment(valOne[nameAttr]).format('DD-MM-YYYY');


                        }
                        else {
                            pData[nameAttr] = valOne[nameAttr];


                        }
                    }
                    else {
                        pData[nameAttr] = valOne[nameAttr];


                    }
                }



            });

            insertData.push(pData);


            //----

        });

        $tblcontainer.append(pft_table_createtable(insertData, tableOptionsTemp));
        $tblcontainer.find('table').dataTable({ paging: true });

    }
    function ComDetailsTable_create(ele, tkey, uniq = []) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let tableKey = tkey;
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');

        let insertData = {};
        let tableOptionsTemp = tableOptionsTempOut;

        let unique = (uniq) ? uniq : [];

        let isValid = true;
        let errorClass = '.temptableError';

        //make index
        console.log('check 1');

        let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
        let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
        let indexname = tkey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);
        let updateCond = '';
        let isNew = true;
        if (thisactionIndex > 0) {
            //means update
            insertData[indexname] = thisactionIndex;
            updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
            isNew = false;
        }
        else {
            //insert
            insertData[indexname] = lastIndex + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
            isNew = true;
        }

        //empty field vaidation
        const columnsTable = ["Output"];        
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
            let $this = $(this);
            let headerName = $this.attr('perfect-tempTable-' + tableKey);
            let nameAttr = $this.attr('name');
            if (columnsTable.includes(nameAttr)) {
                let $errorElement = $this.closest('[perfect-class="formGroup"]').find(errorClass);
                if ($this.is('select')) {
                    if ($this.val().length > 0) {
                        $errorElement.text('');
                    }
                    else {
                        isValid = false;
                        $errorElement.text('Please select ' + headerName);
                    }
                }
                else if ($this.is('input')) {
                    let inputType = $this.attr('type').toLocaleLowerCase();
                    if (inputType == 'checkbox') {


                    }
                    else if (inputType == 'hidden') {


                    }
                    else {
                        if ($this.val().length > 0) {
                            //something selected
                            $errorElement.text('');
                        }
                        else {

                            isValid = false;
                            $errorElement.text('Please Enter ' + headerName);

                        }
                    }
                }
            }
        });



      
        if (unique.length > 0) {          
            let prevData = [];
            $tblcontainer.find('table > tbody').find('tr').each(function () {
                if (isNew) {
                    prevData.push($(this).data('pData'));
                }
                else {
                    if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                        prevData.push($(this).data('pData'));
                    }

                }

            })
           
            unique.forEach(function (key, i) {              
                let $thisEle = $thisForm.find('[perfect-tempTable-' + tableKey + '="' + key + '"]');
                let headerEleName = $thisEle.attr('perfect-tempTable-' + tableKey);
                let atname = $thisEle.attr('name');
                let cvalue;

                //console.log('len')
                if ($thisEle.length != 0) {
                    let $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
                    let errmessage = " Already exits" //headerEleName + " Already exits"

                    //getting current value in cval
                    if ($thisEle.is('select')) {
                        cvalue = $thisEle.val();
                    }
                    else if ($thisEle.is('input')) {
                        let inputEleType = $thisEle.attr('type').toLocaleLowerCase();
                        if (inputEleType == 'checkbox') { cvalue = $thisEle.is(':checked'); }
                        else if (inputEleType == 'hidden') { cvalue = $thisEle.val(); }
                        else { cvalue = $thisEle.val(); }
                    }
                    else { cvalue = $thisEle.val(); }

                    if (prevData.find(a => a[atname] == cvalue)) {
                        // console.log('Search =>' + cvalue + '| attr :' + atname)
                        $errorElement.text(errmessage);
                        isValid = false;
                    }
                }
            });

        }

        console.log('check 4');

        if (isValid) {

            console.log('check 4.1');
            // this section make table column data
            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');


                if ($this.is('select')) {

                    tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                    tableOptionsTemp.hideColumn.push(nameAttr)
                    //displat text of select
                    let selectText = ($this.val().length == 0) ? '' : $this.children(":selected").text();
                    insertData[nameAttr + '_d'] = selectText;
                    insertData[nameAttr] = $this.val();


                    //clear field
                    $this.val('').selectpicker('refresh');
                }
                else if ($this.is('input')) {

                    let inputType = $this.attr('type').toLocaleLowerCase();

                    if (inputType == 'checkbox') {

                        insertData[nameAttr] = $this.is(':checked');

                        tableOptionsTemp.isCheckType.push(nameAttr)
                        //clear field
                        $this.prop('checked', false);

                    }
                    else if (inputType == 'hidden') {

                        tableOptionsTemp.hideColumn.push(nameAttr)
                        insertData[nameAttr] = $this.val();

                        //clear field
                        $this.val('');
                    }
                    else if (inputType == 'date') {


                        insertData[nameAttr] = $this.val();

                        //clear field
                        $this.val('');
                    }
                    else {
                        insertData[nameAttr] = $this.val();

                        //clear field
                        $this.val('');
                    }
                }
                else {
                    insertData[nameAttr] = $this.val();

                    //clear field
                    $this.val('');
                }




            });
            console.log('check 4.2');
            if (isNew) {
                console.log('check 4.2.1');
                //this section nake table.table row
                if ($tblcontainer.find('table').length == 0) {
                    console.log('check 4.2.3');
                    $tblcontainer.append(pft_table_createtable([insertData], tableOptionsTemp));
                   // $tblcontainer.find('table').dataTable({ paging: false, searching: false  });
                }
                else {
                    console.log('check 4.2.1');
                    let table = $tblcontainer.find('table').DataTable()
                    table.destroy()
                    pft_table_addTableRow($tblcontainer.find('table'), insertData, tableOptionsTemp);


                   // $tblcontainer.find('table').dataTable({ paging: false, searching: false  });
                    //   $tblcontainer.DataTable().draw();
                    //  table.ajax.reload();
                }
                console.log('check 4.2.1');
            }
            else {
                console.log('check 4.3');
                let table = $tblcontainer.find('table').DataTable()
                table.destroy()
                console.log('check 4.4');
                console.log('table', $tblcontainer.find('table'))
                console.log('check 4.5');
                pft_table_replaceTableRow($tblcontainer.find('table'), updateCond, insertData, tableOptionsTemp);


                //$tblcontainer.find('table').dataTable({ paging: false,searching:false });
            }

            console.log(insertData);
            // resetting the edit value
            $tblcontainer.attr('perfect-tempTable-action', 0);
        }
        return isValid;
        console.log('check 5');
    }


    function createItems(ele, callback) {
        debugger
        if (ComDetailsTable_create(ele, 'cstatus', [])) {
            callback(1);
        }
        else {
            callback(0);
        }
    }

    function clearcomplaintdetails(ele, tablekey) {


        let $thisform = $(ele).closest('[perfect-class="form"]');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="select"]').val('').selectpicker('refresh');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="date"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="hidden"]').val('');

        let $tblcontainer = $thisform.find('[perfect-tempTable="' + tablekey + '"]');
        $tblcontainer.attr('perfect-tempTable-action', 0);

        if (tablekey = "cstatus") {

        }

    }
</script>