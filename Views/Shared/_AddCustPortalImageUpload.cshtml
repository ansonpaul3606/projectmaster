@model PerfectWebERP.Models.CustomerPortalImageModel.CustomerPortalImage
<div class="card ">
    <div class="card-header">
        <h4 class="card-title col-12">@ViewBag.PageTitle <span style="color:black;" id="spanLeadNo"></span></h4>
        <span title="To View List" onclick="fn_showListView();"><svg id="Layer_1" class="layer" stroke="currentColor" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" height="20" width="20" viewBox="0 0 122.88 122.54"><title>To View List</title><path class="viewlst" d="M4.69,0H46.22a4.71,4.71,0,0,1,4.69,4.69V46a4.69,4.69,0,0,1-4.69,4.69H4.69a4.65,4.65,0,0,1-3.31-1.38l-.09-.09A4.67,4.67,0,0,1,0,46V4.69A4.71,4.71,0,0,1,4.69,0ZM89.44,61.94a26.56,26.56,0,0,1,10.18,2l.07,0a26.61,26.61,0,0,1,15.25,32.16,26.18,26.18,0,0,1-2.7,6.11l10.3,11.24a1.27,1.27,0,0,1-.07,1.8l-7.57,6.9a1.27,1.27,0,0,1-1.79-.07l-9.86-10.85a26.36,26.36,0,0,1-6.1,2.74,26.87,26.87,0,0,1-7.71,1.13,26.51,26.51,0,0,1-10.17-2l-.07,0A26.64,26.64,0,0,1,64.85,78.37l0-.07A26.6,26.6,0,0,1,89.44,61.94Zm15,11.59a21.38,21.38,0,0,0-6.89-4.61l-.06,0a21.22,21.22,0,0,0-23.07,4.64l-.07.07a21.25,21.25,0,0,0-4.54,6.83l0,.06a21.32,21.32,0,0,0-1.58,8.06,21.26,21.26,0,0,0,29.35,19.62,21.54,21.54,0,0,0,6.89-4.61l.07-.07a21.09,21.09,0,0,0,4.54-6.83l0-.06a21.35,21.35,0,0,0,0-16.17,21.34,21.34,0,0,0-4.62-6.9ZM4.69,63.2H46.22a4.71,4.71,0,0,1,4.69,4.7v41.34a4.68,4.68,0,0,1-4.69,4.69H4.69A4.69,4.69,0,0,1,0,109.24V67.9a4.71,4.71,0,0,1,4.69-4.7ZM68.78,0h41.53A4.71,4.71,0,0,1,115,4.69V46a4.71,4.71,0,0,1-4.69,4.69H68.78A4.71,4.71,0,0,1,64.09,46V4.69a4.69,4.69,0,0,1,1.37-3.31l.1-.09A4.67,4.67,0,0,1,68.78,0Z"></path></svg></span>
    </div>
    <div class="card-body">
        <form id="" class="form-valide" perfect-class="form" action="#" method="post" perfect-onFormSuccess="">
            <div class="">
                <div class="row">
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Image Name</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control perfectValidate_string" placeholder="" name="ImageName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" maxlength="150"/>
                                <input type="text" class="form-control " placeholder="" name="ID_CusPortalSlider" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" hidden/>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Image Subtitle</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control perfectValidate_string" placeholder="" name="ImageSubTitle" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" maxlength="150"/>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Image</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="file" id="files" name="files[]" multiple class="form-control" accept="image/*" onclick="validateImage(this,retFn)" />
                                <span style="font-size: x-small;">(Only allow .jpeg , .jpg and .png files)</span>
                                <div class="invalid-feedback animated fadeInUp limit-check" style="display: block;"></div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Link</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control " placeholder="" name="Redirectvalue" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" maxlength="150"/>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Effect From</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="date" class="form-control " name="EffectFrom" perfect-class="formGroupControl" max="2050-01-01" perfect-ctype="date" perfect-css="date" onchange="datecheck(this)" />
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Effect To</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="date" class="form-control " name="EffectTo" perfect-class="formGroupControl" max="2050-01-01" perfect-ctype="date" perfect-css="date" onchange="datecheck(this)" />
                                <div class="invalid-feedback animated fadeInUp limit-check" style="display: block;"></div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Mode</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <select class="form-control perfectValidate_string" name="ImageMode" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" data-live-search="true">
                                    <option value="">Please Select </option>

                                    @if (!(Model.ModeList is null))
                                    {
                                        foreach (var modeList in Model.ModeList)
                                        {
                                            <option value="@modeList.ID_Mode">@modeList.ModeName</option>
                                        }

                                    }

                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Active</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="checkbox" class="form-check-input" name="ImageActive" perfect-class="formCheckInput" perfect-ctype="checkbox" perfect-css="checkbox">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-footer text-right" perfect-class="formFooter">
                    <button id="UpdateButton" type="button" class="btn btn-primary mr-3 addcompany-jq-addnewuserUpdate d-none" name="update" perfect-css="button" onclick="fn_UpdateCusportalImage(this,true)"><i class="fa fa-refresh fa-spin loaderClass"></i>Update</button>
                    <button id="addbutton" type="button" class="btn btn-primary mr-3 " name="add" perfect-css="button" onclick="validateImage(this,fn_SaveImage)"><i class="fa fa-refresh fa-spin loaderClass "></i>Save</button>
                    <button type="button" class="btn btn-light" perfect-css="button" onclick="ResetButton(this)" name="reset" id="resetbutton">Clear</button>
                </div>
            </div>
        </form>

    </div>
</div>

<script>

    $(document).ready(function () {

        initFunctions('form');


    });

    function ResetButton(ele) {

        ImageUploadInitialLoad();
    }
    function datecheck(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');      

        let EffectFrom = $thisForm.find('[name="EffectFrom"]').val();
        EffectFrom = new Date(EffectFrom);
        EffectFrom.setHours(0, 0, 0, 0)

        let EffectTo = $thisForm.find('[name="EffectTo"]').val();
        EffectTo = new Date(EffectTo);
        EffectTo.setHours(0, 0, 0, 0)

        if (EffectFrom > EffectTo) {
            $thisForm.find('[name="EffectTo"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('Effect To should be greater than or equal to Effect From');
            return false;
        }
        else {
            $thisForm.find('[name="ReturnDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('');
            return true;
        }
    }


    $('input[type=file]').on("change", function (e) {
        //validateImage(e)
        validateImage(e,retFn)

    });

    function validateImage2(e) {
        debugger
       // alert(1)
        var fileInput = document.getElementById('files');
        var file = fileInput.files[0];
        var allowedTypes = ['image/jpeg', 'image/png', 'image/jpg'];
        // Check file size (in bytes)
        var maxSizeInBytes = 2048576; // 1MB

        if (!file) {
            $('[name="files[]"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('Please Select a image');
            return false;
        }
        else if (!allowedTypes.includes(file.type)) {
            $('[name="files[]"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('Select a valid image type');
            return false;
        }
        else if (file.size > maxSizeInBytes) {
            $('[name="files[]"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('Files Size exceeds');
            return false;
        }
        else {
            //alert(2)
            // Create an image element to get the natural width and height
            let valid = false;
            const img = new Image();
            img.src = URL.createObjectURL(file);

            img.onload = function () {
                //alert(3)
                debugger
                // Get the natural width and height of the image
                const naturalWidth = img.naturalWidth;
                const naturalHeight = img.naturalHeight;

                // Check the exact width and height (e.g., 800x600 pixels)
                const desiredWidth = 1920;
                const desiredHeight = 830;

                if (naturalWidth !== desiredWidth || naturalHeight !== desiredHeight) {
                    $('[name="files[]"]').closest('[perfect-class="formGroup"]').find('.limit-check').text(`Image dimensions should be ${desiredWidth}x${desiredHeight} pixels.`);
                    valid= false;
                }
                else {
                    $('[name="files[]"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('');
                    valid= true;
                }

            };
            //alert(4)
            return valid;
        }
    }

    function retFn(ele,a) {

        //alert(a)
        //alert(5)
        return a;
    } 


    function validateImage(ele,callback) {
            debugger
            //alert(1)
            var fileInput = document.getElementById('files');

            var file = fileInput.files[0];
            var allowedTypes = ['image/jpeg', 'image/png', 'image/jpg'];
            // Check file size (in bytes)
        var maxSizeInBytes = 2097152; // 2MB

            if (!file) {
                $('[name="files[]"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('Please Select a image');
                callback(ele,false);
            }
            else if (!allowedTypes.includes(file.type)) {
                $('[name="files[]"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('Select a valid image type');
                callback(ele,false);
            }
            else if (file.size > maxSizeInBytes) {
                $('[name="files[]"]').closest('[perfect-class="formGroup"]').find('.limit-check').text(`Files Size should not greater than 2 MB`);
                callback(ele,false);
            }
            else {
                //alert(2)
                // Create an image element to get the natural width and height
                let valid = false;
                const img = new Image();
                img.src = URL.createObjectURL(file);

                img.onload = function () {
                    //alert(3)
                    debugger
                    // Get the natural width and height of the image
                    const naturalWidth = img.naturalWidth;
                    const naturalHeight = img.naturalHeight;

                    // Check the exact width and height (e.g., 800x600 pixels)
                    const desiredWidth = 1920;
                    const desiredHeight = 400;

                    if (naturalWidth !== desiredWidth || naturalHeight !== desiredHeight) {
                        $('[name="files[]"]').closest('[perfect-class="formGroup"]').find('.limit-check').text(`Recommended image dimensions are ${desiredWidth}x${desiredHeight} pixels `);
                        valid = true;
                        callback(ele,valid);
                    }
                    else {
                        $('[name="files[]"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('');
                        valid = true;
                        callback(ele,valid);
                    }

                };
                //alert(4)

            }
        }
   

    function fn_SaveImage(ele, valid) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let fileInput = $thisForm.find('[name="files[]"]')[0];

        var file = fileInput.files[0];

        var fileData;
        var fileName;

        // Use the promise to handle asynchronous file reading
        // if (validateImage()) {

        //alert(valid)
        if (valid) {
            if (datecheck(ele)) {
                if ($thisForm.valid()) {
                    $(ele).prop('disabled', true);

                    let inputData =
                    {
                        __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                        'CusportalTitle': $thisForm.find('[name=ImageName]').val(),
                        'CusportalSubTitle': $thisForm.find('[name=ImageSubTitle]').val(),
                        'CusportalActive': $thisForm.find('[name=ImageActive]').is(":checked"),
                        'CusportalEffectFrom': $thisForm.find('[name=EffectFrom]').val(),
                        'CusportalEffectTo': $thisForm.find('[name=EffectTo]').val(),
                        'CusportalRedirectTo': $thisForm.find('[name=Redirectvalue]').val(),
                        'CusportalMode': $thisForm.find('[name=ImageMode]').val(),
                    };

                    readAsBase64(file)
                        .then(function (fileData) {

                            inputData['ImageList'] = fileData;


                            $.ajax({
                                url: "@Url.Action("SaveImages", "CustomerPortalImage")",
                                type: "POST",
                                data: inputData,
                                dataType: "json",
                                contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                                success: function (ajaxOutput) {
                                    if (ajaxOutput.Process.IsProcess) {
                                        $.each(ajaxOutput.Process.Message, function (key, value) {
                                            NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': "Saved Successfully" });
                                        });
                                        let onSuccess = $thisForm.attr('perfect-onFormSuccess')
                                        if (onSuccess) {
                                            window[onSuccess]();
                                        }
                                    }
                                    else {
                                        $.each(ajaxOutput.Process.Message, function (key, value) {
                                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                            $(ele).prop('disabled', false);
                                        });
                                    }
                                },
                                complete: function () {
                                    $(ele).prop('disabled', false);
                                }
                            });
                        })
                        .catch(function (error) {
                            console.error("Error reading file:", error);
                        });

                    console.log("fileData", inputData)
                }
            }
            //alert(112)

        }


    }

        function fn_UpdateCusportalImage(ele, valid) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        //let fileInput = $thisForm.find('[name="files[]"]')[0];

        //var file = fileInput.files[0];

        var fileData;
        var fileName;

        // Use the promise to handle asynchronous file reading
        // if (validateImage()) {

        //alert(valid)
        if (valid) {
            if (datecheck(ele)) {
                if ($thisForm.valid()) {
                    $(ele).prop('disabled', true);

                    let inputData =
                    {
                        __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                        'ID_CusPortalSlider': $thisForm.find('[name=ID_CusPortalSlider]').val(),
                        'CusportalTitle': $thisForm.find('[name=ImageName]').val(),
                        'CusportalSubTitle': $thisForm.find('[name=ImageSubTitle]').val(),
                        'CusportalActive': $thisForm.find('[name=ImageActive]').is(":checked"),
                        'CusportalEffectFrom': $thisForm.find('[name=EffectFrom]').val(),
                        'CusportalEffectTo': $thisForm.find('[name=EffectTo]').val(),
                        'CusportalRedirectTo': $thisForm.find('[name=Redirectvalue]').val(),
                        'CusportalMode': $thisForm.find('[name=ImageMode]').val(),
                    };

                    //readAsBase64(file)
                    //    .then(function (fileData) {

                    //        inputData['ImageList'] = fileData;


                            $.ajax({
                                url: "@Url.Action("UpdateImages", "CustomerPortalImage")",
                                type: "POST",
                                data: inputData,
                                dataType: "json",
                                contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                                success: function (ajaxOutput) {
                                    if (ajaxOutput.Process.IsProcess) {
                                        $.each(ajaxOutput.Process.Message, function (key, value) {
                                            NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': "Updated Successfully" });
                                        });
                                        let onSuccess = $thisForm.attr('perfect-onFormSuccess')
                                        if (onSuccess) {
                                            window[onSuccess]();
                                        }
                                    }
                                    else {
                                        $.each(ajaxOutput.Process.Message, function (key, value) {
                                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                            $(ele).prop('disabled', false);
                                        });
                                    }
                                },
                                complete: function () {
                                    $(ele).prop('disabled', false);
                                }
                            });
                        //})
                        //.catch(function (error) {
                        //    console.error("Error reading file:", error);
                        //});

                    console.log("fileData", inputData)
                }
            }
            //alert(112)

        }


    }

    function readAsBase64(file) {
        return new Promise(function (resolve, reject) {
            var reader = new FileReader();

            reader.onload = function (e) {
                resolve(e.target.result);
            };

            reader.onerror = function (error) {
                reject(error);
            };

            reader.readAsDataURL(file);
        });
    }


</script>
