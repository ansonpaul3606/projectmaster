
<style>
</style>

<a class="btn btn-rounded btn-warning" href="@Url.Action("GetRepPDF","Sample")">
    <span class="btn-icon-left text-warning">
        <i class="fa fa-download color-warning"></i>
    </span>Download
</a>
<div class="card ">

    <div class="card-header">
        <h4 class="card-title col-12">Sample <span class="badge light badge-success float-right" perfect-class="formTitle">ADD</span></h4>
    </div>
    <div class="card-body">
        <form id="" class="form-valide" perfect-class="form" action="#" method="post" perfect-onFormSuccess="">
            <div class="">

                <div class="row">
                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Customer Name</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control  perfectValidate_name" placeholder="" name="CustomerName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel"> Customer Date</span>
                                <span class="text-danger">*</span>

                            </label>
                            <div class="col-sm-8">
                                <input type="date" class="form-control perfectValidate_date" name="CustomerDate" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" />
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">District</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <input type="text" class="form-control perfectValidate_string" name="District" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled />
                                    <input type="hidden" name="DistrictID" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                    <div class="input-group-append">
                                        <button id="addCustomer-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="showSearchModal(this)"></button>
                                        @* Modal *@
                                        <div class="modal fade" perfect-class="formGroupModal">
                                            <div class="modal-dialog modal-xl" role="document">
                                                <div class="modal-content  rounded-0">
                                                    <div class="modal-header border-0">
                                                        <h5 class="modal-title">Search modal</h5>
                                                        <button type="button" class="close" data-dismiss="modal">
                                                            <span>&times;</span>
                                                        </button>
                                                    </div>
                                                    <div class="modal-body">
                                                        <div class="form-row">
                                                            <div class="form-group col-md-6">
                                                                <label>Search Name</label>
                                                                <input type="text" class="form-control" placeholder="1234 Main St" name="search-name">
                                                            </div>
                                                            <div class="form-group col-md-6">
                                                                <label>Search place</label>
                                                                <input type="text" class="form-control" placeholder="Email" name="search-place">
                                                            </div>
                                                            <div class="form-group col-md-6">
                                                                <label>Search District</label>
                                                                <input type="text" class="form-control" placeholder="Password" name="search-district">
                                                            </div>
                                                            <div class="form-group col-md-6">
                                                                <label> search City</label>
                                                                <input type="text" class="form-control" name="search-city">
                                                            </div>
                                                            <button type="button" class="btn btn-primary" onclick="searchbtn2(this)">Sign in</button>
                                                        </div>
                                                        <div class="col-md-12 mt-3" perfect-class="formGroupModalTable">


                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        @* Modal *@
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Phone</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8 ">
                                <div class="input-group mb-2">
                                    <div class="input-group-prepend">
                                        <span class="input-group-text fa fa-phone"></span>
                                    </div>
                                    <input type="text" class="form-control perfectValidate_mobile " placeholder="" name="Phone" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                                </div>

                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel"> Date of Birth</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="date" class="form-control perfectValidate_date" name="DateOfBirth" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" />
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Customer Title</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <select class="form-control perfectValidate_string" name="CustomerTitle" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select">
                                    <option value="">Please select</option>
                                    @if (!(Model.CustomerTitlesList is null))
                                    {
                                        foreach (var customerTitle in Model.CustomerTitlesList)
                                        {
                                            <option value="@customerTitle.CustomerTitleName">@customerTitle.CustomerTitleName</option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Place</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <select class="form-control perfectValidate_string" name="PlaceID" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" perfect-selectButton="Button Nsssame" perfect-selectButtonAction="testing">
                                    <option value="">Please select</option>
                                    @if (!(Model.PlaceList is null))
                                    {
                                        foreach (var placeList in Model.PlaceList)
                                        {
                                            <option value="@placeList.PlaceID">@placeList.PlaceName</option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">State</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <select class="form-control perfectValidate_string" name="StateID" perfect-selectButton="Button Name" perfect-selectButtonAction="testing" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select">
                                    <option value="">Please select</option>

                                    @if (!(Model is null) && !(Model.StateList is null))
                                    {
                                        foreach (var stateList in Model.StateList)
                                        {
                                            <option value="@stateList.StateID">@stateList.StateName</option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6">

                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Temp table Mobile</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="number" class="form-control " perfect-tempTable-taxType="Mobile" placeholder="" name="Mobile" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                            </div>
                        </div>


                    </div>
                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Temp table textbox 1</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control  " placeholder="" name="CustomerNameData" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" perfect-tempTable-taxType="Customer Name" />
                                <span class="temptableError"></span>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel"> Temp table textbix 2</span>
                                <span class="text-danger">*</span>

                            </label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control " name="CustomerData" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="input" perfect-tempTable-taxType="Customer Data" />
                                <span class="temptableError"></span>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Temp Table drop down</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <select class="form-control" name="dropdownID" perfect-tempTable-taxType="dropme" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select">
                                    <option value="">Please select</option>
                                    <option value="1">aaa1</option>
                                    <option value="2">aaa2</option>
                                    <option value="3">aaa3</option>
                                </select>
                                <span class="temptableError"></span>
                            </div>

                        </div>
                    </div>
                </div>
                <div class="custom-control custom-checkbox">
                    <input type="checkbox" class="custom-control-input" id="" required="">
                    <label class="custom-control-label" for=""></label>
                </div>
                <a onclick="addToTempTable(this,'taxType')">Add</a>
                <input type="hidden" name="customerIndex" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="hidden" perfect-tempTable-taxType="Sl No" value="" />
                <input type="checkbox" name="checkboxi" perfect-class="formGroupControl" perfect-ctype="checkbox" perfect-css="checkbox" perfect-tempTable-taxType="checkbox" value="" />
                <br />
                <button class="btn btn-info mr-3 " onclick="createatable(this,'taxType',[])" type="button">Createtabe</button>
                <div class="table-responsive" perfect-tempTable="taxType" perfect-tempTable-lastindex="0" perfect-tempTable-action="0"></div>

            </div>
            <div class="card-footer text-right" perfect-class="formFooter">
                <button id="" type="button" class="btn btn-primary mr-3 addcompany-jq-addnewuserUpdate d-none" name="update" perfect-css="button" onclick="updateCode(this)"><i class="fa fa-refresh fa-spin  loaderClass"></i>Update</button>
                <button id="addcompany-jq-addnewuser" type="button" class="btn btn-primary mr-3 " name="add" perfect-css="button" onclick="AddCustomer(this)"><i class="fa fa-refresh fa-spin loaderClass "></i>Save</button>
                <button type="button" class="btn btn-light" perfect-css="button" onclick="ResetButton(this)" name="reset">Clear</button>
            </div>
        </form>
    </div>


</div>

<div class="container-fluid" id="testing">

</div>




@*<script src="~/Scripts/jqDOM/searchDOMCreation.js"></script>*@
<script>

    (function () {

        //alert('Transmode'+ _transModel + '|' + _transModep + '|p'+getTransMode())

        jQuery("select").selectpicker();//<-----  Validate/initialize selectpicker(the dropdown/combobox)
        jQuery('form').validate();//<-----  Validate/initialize our form on page load


     // initFunctions('form')
       // $('[name=CustomerDate]').val(moment().format('YYYY-MM-DD'));//using moment .js or set in YYYY-MM-DD fromat 2021-12-30

    })();


    var tableOptions2 = {
        iconButton: {
            buttons: [
                { icon: "fa fa-trash", action: function () { $(this).closest('tr').remove() } },
                // { icon: "fa fa-pencil", action:  },
            ]
        }
    };

    function Add(ele) {
        let $container = $(ele).closest('#testing').find('[perfect-tempTable="taxType"]');

        let data = {};
        $(ele).closest('#testing').find('[perfect-tempTable-taxType]').each(function () {
            let $this = $(this);
            let aa = $this.attr('perfect-tempTable-taxType');
          //  console.log(aa)
            data[aa] = $this.val();

        });

        let data2 = [];
        data2.push(data);
        //console.log(data)
        if ($container.find('table').length==0) {
            $container.append(pft_table_createtable(data2, tableOptions2));
        }
        else {

            pft_table_addTableRow($container.find('table'), data, tableOptions2);
        }





    }

    var tableOptionsTempOut = {
        iconButton: {
            buttons: [
                {
                    icon: "fa fa-trash",
                    action: function () {
                       let $thistbl = $(this).closest('table');
                        let table = $thistbl.DataTable();
                        table.destroy();
                        if ($(this).closest('tbody').find('tr').length > 1) {
                            $(this).closest('tr').remove();
                            pft_table_slreset($thistbl);
                            $thistbl.dataTable({ paging: true });
                        }
                        else {
                            $thistbl.remove();
                        }

                    }
                },
                {
                    icon: "fa fa-pencil",
                    action: function () {
                        let savedData = $(this).closest('tr').data('pData')

                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let tableKey = $tablecontainer.attr('perfect-tempTable');
                        let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                        //index attribute name in table row
                        let indexname = tableKey + 'index';
                        //index number in table row
                        let rindex = $(this).closest('tr').attr(indexname);
                        $tablecontainer.attr('perfect-tempTable-action', rindex);

                        console.log('Editclick', savedData);
                        //filling data in available inputs
                        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                            let $thisNode = $(this);
                            let pf_name = $thisNode.attr('name');
                            if ($thisNode.is('select')) {

                                $thisNode.val(savedData[pf_name]).selectpicker('refresh');
                            }
                            else if ($thisNode.is('input')) {

                                if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                    $thisNode.prop('checked', savedData[pf_name]);
                                }
                                else {
                                    $thisNode.val(savedData[pf_name]);
                                }

                            }
                            else {
                                $thisNode.val(savedData[pf_name]);
                            }


                        });



                    }
                },
            ]
        },
        onlyShowColumn: [],
        hideColumn: [],
        serialNo: true,
        renameHeader: { CustomerData: "test nme" },
        rowAttribute: [],
        isCheckType: []
    };
    function createatable(ele,tkey,uniq=[]) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let tableKey = tkey;
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey+'"]');

        let insertData = {};
        let tableOptionsTemp = tableOptionsTempOut;

        let unique = (uniq) ? uniq:[];

        let isValid = true;
        let errorClass = '.temptableError';

        //make index
        console.log('check 1');

        let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')): 0;
        let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
        let indexname = tkey+'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);
        let updateCond = '';
        let isNew = true;
        if (thisactionIndex > 0) {
            //means update
            insertData[indexname] = thisactionIndex;
            updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
            isNew = false;
        }
        else {
            //insert
            insertData[indexname] = lastIndex + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
            isNew = true;
        }




        console.log('check 3');



        //empty field vaidation
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
            let $this = $(this);
            let headerName = $this.attr('perfect-tempTable-' + tableKey);
            let nameAttr = $this.attr('name');
            let $errorElement = $this.closest('[perfect-class="formGroup"]').find(errorClass);
            if ($this.is('select')) {
                if ($this.val().length > 0) {
                    //something selected
                    $errorElement.text('');
                }
                else {
                    //noting selected
                    isValid = false;
                    $errorElement.text('Please select ' + headerName);
                    //console.log('reee' + headerName)
                }
            }
            else if ($this.is('input')) {

                let inputType = $this.attr('type').toLocaleLowerCase();

                if (inputType == 'checkbox') {

                    //if need any not checked validation do it here
                }
                else if (inputType == 'hidden') {

                   //if need any not checked validation do it here
                }
                else {
                    if ($this.val().length > 0) {
                        //something selected
                        $errorElement.text('');
                    }
                    else {
                        //noting selected
                        isValid = false;
                        $errorElement.text('Please select ' + headerName);

                    }
                }
            }

        });




        if (unique.length > 0) {
            //getting previous data
            let prevData = [];
            $tblcontainer.find('table > tbody').find('tr').each(function () {
                if (isNew) {
                    prevData.push($(this).data('pData'));
                }
                else {
                    if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                        prevData.push($(this).data('pData'));
                    }

                }

            })
           console.log('previous data', prevData);

            unique.forEach(function (key, i) {
                console.log('unid -> key:' + key + "| index :" + i);
                let $thisEle = $thisForm.find('[perfect-tempTable-' + tableKey + '="' + key + '"]');
                let headerEleName = $thisEle.attr('perfect-tempTable-' + tableKey);
                let atname = $thisEle.attr('name');
                let cvalue;

                //console.log('len')
                if ($thisEle.length != 0) {
                    let $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
                    let errmessage = headerEleName+" Already exits"

                //getting current value in cval
                    if ($thisEle.is('select')) {
                        cvalue = $thisEle.val();
                    }
                else if ($thisEle.is('input')) {

                    let inputEleType = $thisEle.attr('type').toLocaleLowerCase();

                    if (inputEleType == 'checkbox') { cvalue = $thisEle.is(':checked'); }
                    else if (inputEleType == 'hidden') { cvalue = $thisEle.val(); }
                    else { cvalue = $thisEle.val(); }
                }
                else { cvalue = $thisEle.val(); }

               // console.log('cvalue ->' + cvalue);

                //searching in previous data
                if (prevData.find(a => a[atname] == cvalue)) {
                   // console.log('Search =>' + cvalue + '| attr :' + atname)
                    $errorElement.text(errmessage);
                    isValid = false;
                }
                }
            });

        }

        console.log('check 4');

        if (isValid) {

            console.log('check 4.1');
            // this section make table column data
            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');


                if ($this.is('select')) {

                    tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                    tableOptionsTemp.hideColumn.push(nameAttr)
                    //displat text of select
                    let selectText = ($this.val().length == 0) ? '' : $this.children(":selected").text();
                    insertData[nameAttr + '_d'] = selectText;
                    insertData[nameAttr] = $this.val();


                    //clear field
                    $this.val('').selectpicker('refresh');
                }
                else if ($this.is('input')) {

                    let inputType = $this.attr('type').toLocaleLowerCase();

                    if (inputType == 'checkbox') {

                        insertData[nameAttr] = $this.is(':checked');

                        tableOptionsTemp.isCheckType.push(nameAttr)
                        //clear field
                        $this.prop('checked', false);

                    }
                    else if (inputType == 'hidden') {

                        tableOptionsTemp.hideColumn.push(nameAttr)
                        insertData[nameAttr] = $this.val();

                        //clear field
                        $this.val('');
                    }
                    else if (inputType == 'date') {


                        insertData[nameAttr] = $this.val();

                        //clear field
                        $this.val('');
                    }
                    else {
                        insertData[nameAttr] = $this.val();

                        //clear field
                        $this.val('');
                    }
                }
                else {
                    insertData[nameAttr] = $this.val();

                    //clear field
                    $this.val('');
                }




            });
            console.log('check 4.2');
            if (isNew) {
                console.log('check 4.2.1');
                //this section nake table.table row
                if ($tblcontainer.find('table').length == 0) {
                    console.log('check 4.2.3');
                    $tblcontainer.append(pft_table_createtable([insertData], tableOptionsTemp));
                    $tblcontainer.find('table').dataTable({ paging: false, "searching": false, "ordering": false });
                }
                else {
                    console.log('check 4.2.1');
                    let table = $tblcontainer.find('table').DataTable()
                    table.destroy()
                    pft_table_addTableRow($tblcontainer.find('table'), insertData, tableOptionsTemp);


                    $tblcontainer.find('table').dataTable({ paging: false, "searching": false, "ordering": false });
                    //   $tblcontainer.DataTable().draw();
                    //  table.ajax.reload();
                }
                console.log('check 4.2.1');
            }
            else {
                console.log('check 4.3');
                let table = $tblcontainer.find('table').DataTable()
                table.destroy()
                console.log('check 4.4');
                console.log('table', $tblcontainer.find('table'))
                console.log('check 4.5');
                pft_table_replaceTableRow($tblcontainer.find('table'), updateCond, insertData, tableOptionsTemp);


                $tblcontainer.find('table').dataTable({paging: false,"searching": false,"ordering": false });
            }

            console.log(insertData);
            // resetting the edit value
            $tblcontainer.attr('perfect-tempTable-action', 0);
        }

        console.log('check 5');
    }


    var prev = [
        {
            "taxTypeindex": 1,
            "Mobile": "3333",
            "CustomerNameData": "3333",
            "CustomerData": "333",
            "dropdownID_d": "aaa1",
            "dropdownID": "1",

            "checkboxi": false
        },
        {
            "taxTypeindex": 2,
            "Mobile": "3333",
            "CustomerNameData": "333",
            "CustomerData": "333",
            "dropdownID_d": "aaa2",
            "dropdownID": "2",

            "checkboxi": false
        }
    ]

    function fillTable(ele, tkey, data, tableOptionsTempOut ) {




       let $thisForm=$(ele)

        let tableOptionsTemp = tableOptionsTempOut;
        let insertData = []
        let tableKey = tkey;

        let indexname = tkey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);

        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');


        $.each(data, function (keyOne, valOne) {

            let pData = {};

            pData[indexname] = keyOne + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', pData[indexname])
            //---

            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                console.log('name', valOne[nameAttr])
                if (typeof valOne[nameAttr] !== undefined) {

                    if ($this.is('select')) {


                        tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                        tableOptionsTemp.hideColumn.push(nameAttr);
                        //displat text of select

                        let selectText = ($this.val().length == 0) ? '' : $this.find('[value="' + valOne[nameAttr] + '"]').text();

                        pData[nameAttr + '_d'] = selectText;
                        pData[nameAttr] = valOne[nameAttr];
                        console.log('select', $this.find('options[value="' + valOne[nameAttr] + '"]').text());

                    }
                    else if ($this.is('input')) {

                        let inputType = $this.attr('type').toLocaleLowerCase();
                        console.log( inputType)
                        if (inputType == 'checkbox') {

                            pData[nameAttr] = valOne[nameAttr];

                            tableOptionsTemp.isCheckType.push(nameAttr);

                            console.log('checkbox',nameAttr)


                        }
                        else if (inputType == 'hidden') {

                            tableOptionsTemp.hideColumn.push(nameAttr);
                            pData[nameAttr] = valOne[nameAttr];


                        }
                        else if (inputType == 'date') {


                            pData[nameAttr] = moment(valOne[nameAttr]).format('DD-MM-YYYY');


                        }
                        else {
                            pData[nameAttr] = valOne[nameAttr];


                        }
                    }
                    else {
                        pData[nameAttr] = valOne[nameAttr];


                    }
                }



            });

            insertData.push(pData);


            //----

        });

        $tblcontainer.append(pft_table_createtable(insertData, tableOptionsTemp));
        $tblcontainer.find('table').dataTable({ paging: true });

    }

    //function addToTempTable(ele, val) {
    //    let hide = ["Customer Data"];
    //    let errorClass = '.invalid-feedback';

    //    let $container = $(ele).closest('[perfect-class="form"]')
    //    //.find('[perfect-tempTable="' + val + '"]');
    //    let isvalid = true;
    //    let $tbl = $container.find('[perfect-tempTable="' + val + '"]');

    //    let savedData = [];
    //    $container.find('[perfect-tempTable="taxType"]').find('tbody').find('tr').each(function () {
    //        savedData.push($(this).data('pData'));
    //    })
    //    //validate
    //    $container.find('[perfect-tempTable-' + val + ']').each(function () {
    //        let $this = $(this);

    //        if ($this.val().trim().length == 0) {
    //            $this.siblings(errorClass).text('Field required');
    //            isvalid = false;
    //        }
    //        else {
    //            $this.siblings('.invalid-feedback').text('');
    //        }
    //    });

    //    if (isvalid) {
    //        let rhead = $('<tr/>', { class: "btn-reveal-trigger" });
    //        let rbody = $('<tr/>', { class: "btn-reveal-trigger" });
    //        let tempSave = {};
    //        if ($tbl.find('table').length == 0) {
    //            let $table = $('<table/>', { class: "table mb-0  table-striped  text-black" });
    //            let $thead = $('<thead/>')
    //            let $tbody = $('<tbody/>');

    //            $container.find('[perfect-tempTable-' + val + ']').each(function () {
    //                let $this = $(this);
    //                if (!hide.includes($this.attr('perfect-tempTable-' + val))) {
    //                    rhead.append($('<th/>').text($this.attr('perfect-tempTable-' + val)))
    //                    rbody.append($('<td/>', { 'perfect-tempTable-td-name': $this.attr('name') }).text($this.val()))
    //                }

    //                tempSave[$this.attr('name')] = $this.val();
    //            });
    //            //console.log('create', tempSave);
    //            rbody.data({ 'pData': tempSave });
    //            $thead.html(rhead);
    //            $tbody.html(rbody.append($('<td/>', { class: "d-flex" }).append($('<a/>', { class: "btn btn-danger shadow btn-xs sharp mr-1", href: "#" }).html($('<i/>', { class: 'fa fa-trash' })).click(function () { $(this).closest('tr').remove() }))));
    //            $tbl.html($table.append($thead).append($tbody))

    //        }
    //        else {

    //            $container.find('[perfect-tempTable-' + val + ']').each(function () {
    //                let $this = $(this);
    //                if (!hide.includes($this.attr('perfect-tempTable-' + val))) {
    //                    rbody.append($('<td/>', { 'perfect-tempTable-td-name': $this.attr('name') }).text($this.val()))
    //                }
    //                tempSave[$this.attr('name')] = $this.val();
    //            });
    //            // console.log('create', tempSave);
    //            rbody.data({ 'pData': tempSave });
    //            $tbl.find('tbody').append(rbody.append($('<td/>', { class: "d-flex" }).append($('<a/>', { class: "btn btn-danger shadow btn-xs sharp mr-1", href: "#" }).html($('<i/>', { class: 'fa fa-trash' })).click(function () { $(this).closest('tr').remove() }))));
    //        }
    //    }
    //}

    //let options = {
    //    val: "",
    //    hide: [],
    //    uniqID:[]
    //};
    //  <input type="text" class="form-control perfectValidate_string" name="CustomerData" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" perfect-tempTable-taxType="Customer Data" />
    //<a onclick="addToTempTable(this,'taxType')">Add</a>
    //    <div class="table-responsive" perfect-tempTable="taxType"></div>
    function addToTempTable(ele, options) {

        let val = options.val;
        let hide = (options.hide) ? options.hide:[];
        let uniqID = (options.uniqID) ? options.uniqID:[];
        let errorClass = '.temptableError';

        let $container = $(ele).closest('[perfect-class="form"]')
        //.find('[perfect-tempTable="' + val + '"]');
        let isvalid = true;
        let $tbl = $container.find('[perfect-tempTable="' + val + '"]');

        let savedData = [];
        $container.find('[perfect-tempTable="' + val + '"]').find('tbody').find('tr').each(function () {
            savedData.push($(this).data('pData'));
        })
        //validate
        $container.find('[perfect-tempTable-' + val + ']').each(function () {
            let $this = $(this);

            //if ($this.val().trim().length == 0) {
            if ($this.val().trim().length == 0) {
                $this.closest('[perfect-class="formGroup"]').find(errorClass).text($this.attr('perfect-tempTable-' + val) + ' Field required');
                isvalid = false;
            }
            else {
                $this.closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }


            if (uniqID.length > 0) {
                uniqID.forEach(function (key, value) {
                 //   console.log('uniq' + key + '|' + value);
                    let cvalue = $container.find('[perfect-tempTable-' + val + '="' + key + '"]').val();
                   // console.log(cvalue)
                  //  console.log(savedData)
                    if (savedData.find(a => a[key] == cvalue)) {
                      //  console.log('inside cval==key')
                        isvalid = false;
                    }
                });

            }
        });

        if (isvalid) {
            let rhead = $('<tr/>', { class: "btn-reveal-trigger" });
            let rbody = $('<tr/>', { class: "btn-reveal-trigger" });
            let tempSave = {};
            if ($tbl.find('table').length == 0) {
                let $table = $('<table/>', { class: "table mb-0  table-striped  text-black" });
                let $thead = $('<thead/>', { class: "bg-primary text-white" })
                let $tbody = $('<tbody/>');

                $container.find('[perfect-tempTable-' + val + ']').each(function () {
                    let $this = $(this);
                    if (!hide.includes($this.attr('perfect-tempTable-' + val))) {
                        rhead.append($('<th/>').text($this.attr('perfect-tempTable-' + val)))

                        if ($this.attr('type') == 'checkbox') {
                            rbody.append($('<td/>', { 'perfect-tempTable-td-name': $this.attr('name') }).html($('<i/>', { class: ($this.is(':checked') ? "fa fa-check text-success" : "fa fa-times text-danger") })))
                        }
                        else {
                            rbody.append($('<td/>', { 'perfect-tempTable-td-name': $this.attr('name') }).text($this.val()))
                        }

                    }
                    if ($this.attr('type') == 'checkbox') {
                        tempSave[$this.attr('name')] = $this.is(':checked');
                    } else {
                        tempSave[$this.attr('name')] = $this.val();
                    }
                });
                //console.log('create', tempSave);
                rbody.data({ 'pData': tempSave });
                $thead.html(rhead.append('<th/>'));
                $tbody.html(rbody.append($('<td/>', { class: "d-flex" }).append($('<a/>', { class: "btn btn-danger shadow btn-xs sharp mr-1" }).html($('<i/>', { class: 'fa fa-trash' }))
                    .click(function () {
                        if ($(this).closest('tbody').find('tr').length == 1) {
                            $(this).closest('[perfect-temptable="' + val + '"]').empty();
                        } else {
                            $(this).closest('tr').remove();
                        }
                    }))));
                $tbl.html($table.append($thead).append($tbody))

            }
            else {

                $container.find('[perfect-tempTable-' + val + ']').each(function () {
                    let $this = $(this);
                    if (!hide.includes($this.attr('perfect-tempTable-' + val))) {
                        if ($this.attr('type') == 'checkbox') {
                            rbody.append($('<td/>', { 'perfect-tempTable-td-name': $this.attr('name') }).html($('<i/>', { class: ($this.is(':checked') ? "fa fa-check text-success" : "fa fa-times text-danger") })))
                        }
                        else {
                            rbody.append($('<td/>', { 'perfect-tempTable-td-name': $this.attr('name') }).text($this.val()))
                        }
                    }
                    if ($this.attr('type') == 'checkbox') {
                        tempSave[$this.attr('name')] = $this.is(':checked');
                    } else {
                        tempSave[$this.attr('name')] = $this.val();
                    }
                });
                // console.log('create', tempSave);
                rbody.data({ 'pData': tempSave });
                $tbl.find('tbody').append(rbody.append($('<td/>', { class: "d-flex" }).append($('<button/>', { class: "btn btn-danger shadow btn-xs sharp mr-1" }).html($('<i/>', { class: 'fa fa-trash' }))
                    .click(function () {
                        console.log('len', $(this).closest('tbody').find('tr').length);
                        if ($(this).closest('tbody').find('tr').length == 1) {
                            $(this).closest('[perfect-temptable="' + val + '"]').empty();
                            console.log('inside ');
                        } else {
                            $(this).closest('tr').remove();
                        }
                    }))));
            }
        }
    }


    function test() {
        let value = {
            data: [{ "id": 1, "bbb": true, "ttt": "hhh1" }, { "id": 1, "bbb": true, "ttt": "hhh2" }, { "id": 1, "bbb": true, "ttt": "hhh3" }],
            templeTableKey: "taxType"
        }
        $('[perfect-tempTable="taxType"]').html(tempTabledateCreate(value));

    }

    function tempTabledateCreate(inputData) {

        let hide = ["id"];



        let $table = $('<table/>', { class: "table mb-0  table-striped  text-black" });
        let $thead = $('<thead/>', { class: "bg-primary text-white" })
        let $tbody = $('<tbody/>');

        if (inputData['data']) {
            //create heading
            console.log('in if data', inputData['data']);
            let rhead = $('<tr/>', { class: "btn-reveal-trigger" });
            $.each(inputData.data[0], function (key, value) {
                console.log('in if data>head create', key + "|"+value);
                if (!hide.includes(key)) {
                    rhead.append($('<th/>').text(key));
                }
            });

            $thead.html(rhead.append('<th/>'));

            $.each(inputData.data, function (key, value) {
                let rbody = $('<tr/>', { class: "btn-reveal-trigger" });
                console.log('in if data>body create');
                $.each(value, function (keyOne, valueOne) {
                    console.log('in if data>body>td create', keyOne + '|' + valueOne);

                    if (!hide.includes(keyOne)) {
                        if (typeof valueOne == "boolean") {
                            rbody.append($('<td/>', { 'perfect-tempTable-td-name': keyOne }).html($('<i/>', { class: (valueOne ? "fa fa-check text-success" : "fa fa-times text-danger") })))
                        }
                        else {
                            rbody.append($('<td/>', { 'perfect-tempTable-td-name': keyOne }).text(valueOne))
                        }
                    }

                });

                rbody.data({ 'pData': value });
                console.log('rbody>', value)
                $tbody.append(rbody.append($('<td/>', { class: "d-flex" }).append($('<button/>', { class: "btn btn-danger shadow btn-xs sharp mr-1"}).html($('<i/>', { class: 'fa fa-trash' }))
                    .click(function () {
                        if ($(this).closest('tbody').find('tr').length == 1) {
                            $(this).closest('table').remove();
                        } else {
                            $(this).closest('tr').remove();
                        }
                    }))));

            });
        }









        $table.append($thead).append($tbody);

        return $table;

    }



    function ResetButton(ele) {



        let $thisForm = $(ele).closest('[perfect-class="form"]');

        let savedData = [];
        $thisForm.find('[perfect-tempTable="taxType"]').find('tbody').find('tr').each(function () {
            savedData.push($(this).data('pData'));
        })
        console.log(savedData)

        let pData = $thisForm.data('pData');
        if (pData) {
            $.each(pData, function (oneKey, onevalue) {
                if ($thisForm.find('[name=' + oneKey + ']').attr('perfect-ctype') == 'date') {
                    //console.log(oneKey + '|' + onevalue + "|" + moment(onevalue).format('YYYY-MM-DD'));
                    $thisForm.find('[name=' + oneKey + ']').val(moment(onevalue).format('YYYY-MM-DD'));
                }
                else if ($thisForm.find('[name=' + oneKey + ']').attr('perfect-ctype') == 'select') {
                    $thisForm.find('[name=' + oneKey + ']').val(onevalue).selectpicker('refresh');
                }
                else {
                   // console.log(oneKey + '|' + onevalue);
                    $thisForm.find('[name=' + oneKey + ']').val(onevalue);
                }

            });
        }
        else {
            $thisForm.find('[perfect-ctype="select"]').val('').selectpicker('refresh');
            $thisForm.find('[perfect-ctype="input"]').val('');
            $thisForm.find('[perfect-ctype="date"]').val('');
        }
        $thisForm.validate().resetForm();
     //   $(ele).text('Close').click(function () { window.location.href ='/Home/Contact' })// this will add close option
    }


    // Function to add new customer
 //   $('#addcompany-jq-addnewuser').click(
        function AddCustomer(ele) {


            let $thisForm = $(ele).closest('[perfect-class="form"]');//<------Form element :  Our Form which contain our input elements ,saved in a variable for reusability


            //$(ele).find('i').removeClass();

            console.log('> Add cuctomer form IS valid', $thisForm.valid())
        if ($thisForm.valid()) {//<---------Validation :  To Check whether the form is vaild(ie; values in the form contrls are valid)

            $(ele).prop('disabled', true);


            var inputData = {//<---- Input Json : this is the variable we pass to controller
                CustomerTitle: $thisForm.find('[name=CustomerTitle]').val().trim(),
                CustomerName: $thisForm.find('[name=CustomerName]').val().trim(),
                CustomerDate: $thisForm.find('[name=CustomerDate]').val().trim(),
                PlaceID: $thisForm.find('[name=PlaceID]').val().trim(),
                DistrictID: $thisForm.find('[name=DistrictID]').val().trim(),
                StateID: $thisForm.find('[name=StateID]').val().trim(),
                Phone: $thisForm.find('[name=Phone]').val().trim(),
                Mobile: $thisForm.find('[name=Mobile]').val().trim(),
                DateOfBirth: $thisForm.find('[name=DateOfBirth]').val().trim()
            };


            console.log('> Add customer ajax input',inputData);

             $.ajax({
                 url: "@Url.Action("AddNewCustomerDetails", "Home")",//<----- Controller URL : url path in our controller eq: /Home/InsertSampleData or http://localhost:64212/Home/InsertSampleData
                type: "POST",
                 // headers: { "token_key": "1234" },
                 data: JSON.stringify(inputData),//<---- Input json : data passed to controller
                dataType: "json",
                contentType: "application/json",
                 success: function (data) {//<----- if ajax method executed succesfully,  we get the data passed from controller in this variable  => success: function (variable) {

                     if (data.Process.IsProcess) {

                         $.each(data.Process.Message, function (key, value) {
                             //toastr.success(value, "Success");
                             NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                         });
                         $thisForm.find('[perfect-ctype="select"]').val('').selectpicker('refresh');
                         $thisForm.find('[perfect-ctype="input"]').val('');
                         $thisForm.find('[perfect-ctype="date"]').val('');


                         let onSuccess = $thisForm.attr('perfect-onFormSuccess')

                         if (onSuccess) {
                             window[onSuccess]();
                         }

                         //---------- Do stuff if success

                         console.log('> Add new customer success data', data);
                     }
                     else {
                         $.each(data.Process.Message, function (key, value) {
                             //toastr.warning(value, "Error");
                             NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                         });
                     }






                },
                complete: function () {
                    $(ele).prop('disabled', false);
                }

            });

        }

        }
   // );

    // Function to update a customer
    //$('.addcompany-jq-addnewuserUpdate').on('click',
        function updateCode(ele) {


            let $thisForm = $(ele).closest('[perfect-class="form"]');//<------Form element :  Our Form which contain our input elements ,saved in a variable for reusability

            //perfectCRMvalidation.init($thisForm);

            if ($thisForm.valid()) {//<---------Validation :  To Check whether the form is vaild(ie; values in the form contrls are valid)
                $(ele).prop('disabled', true);

                let pdata = $thisForm.data('pData');

                console.log('> Update customer form data saved',pdata);
                let newValue = {
                    CustomerID: pdata.CustomerID,
                    CustomerTitle: $thisForm.find('[name=CustomerTitle]').val().trim(),
                    CustomerName: $thisForm.find('[name=CustomerName]').val().trim(),
                    CustomerDate: $thisForm.find('[name=CustomerDate]').val().trim(),
                    PlaceID: $thisForm.find('[name=PlaceID]').val().trim(),
                    DistrictID: $thisForm.find('[name=DistrictID]').val().trim(),
                    StateID: $thisForm.find('[name=StateID]').val().trim(),
                    Phone: $thisForm.find('[name=Phone]').val().trim(),
                    Mobile: $thisForm.find('[name=Mobile]').val().trim(),
                    DateOfBirth: $thisForm.find('[name=DateOfBirth]').val().trim()
            };
                let oldValue = {
                    CustomerID: pdata.CustomerID,
                    CustomerTitle: pdata['CustomerTitle'],
                    CustomerName: pdata['CustomerName'],
                    CustomerDate: pdata['CustomerDate'],
                    PlaceID: pdata['PlaceID'],
                    DistrictID: pdata['DistrictID'],
                    StateID: pdata['StateID'],
                    Phone: pdata['Phone'],
                    Mobile: pdata['Mobile'],
                    DateOfBirth: pdata['DateOfBirth']
            };


            var inputData = {//<---- Input Json : this is the variable we pass to controller
                NewData: newValue,
                CurrentData: oldValue
            };
            console.log('> Update customer ajax input',inputData);
             $.ajax({
                 url: "@Url.Action("UpdateCustomerDetails", "Home")",//<----- Controller URL : url path in our controller eq: /Home/InsertSampleData or http://localhost:64212/Home/InsertSampleData
                type: "POST",
                 // headers: { "token_key": "1234" },
                 data: JSON.stringify(inputData),//<---- Input json : data passed to controller
                dataType: "json",
                contentType: "application/json",
                 success: function (data) {//<----- if ajax method executed succesfully,  we get the data passed from controller in this variable  => success: function (variable) {

                     if (data.Process.IsProcess) {

                         $.each(data.Process.Message, function (key, value) {
                             //toastr.success(value, "Success");
                             NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                         });


                         let onSuccess = $thisForm.attr('perfect-onFormSuccess')

                         if (onSuccess) {
                             window[onSuccess]();
                         }

                         //---------- Do stuff if success
                         //toastr.success("Inside success", "Confirmation Box in table");

                         console.log('> update new customer success data', data);
                     }
                     else {
                         $.each(data.Process.Message, function (key, value) {
                             //toastr.warning(value, "Error");
                             NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                         });
                     }


                },
                complete: function () {
                    $(ele).prop('disabled', false);
                }

            });

        }

        }
        //);

    //This fucntion is not in use
    $('#addCustomer-jq-searchButton').click(function () {
        let a = createSearchModalDOM().modal;

        a.find('.modal-title').text("Search Option");
        a.show



        $.ajax({
            url: '@Url.Action("GetFilter", "Home")',
            type: "Get",

            dataType: "json",
            contentType: "application/json",
            success: function (returnData) {
                console.log(returnData.GetALLFilter2);

                a.find('.modal-dialog').addClass('modal-xl')

                a.find('.modal-body').addClass('profile-card').append(createFilter(returnData.GetALLFilter2));


                $.ajax({
                    url: "@Url.Action("GetSampletable", "Home")",
                    type: "Get",
                    headers: { "token_key": "1234" },
                    //data: { branchID: id },
                    dataType: "json",
                    contentType: "application/json",
                    success: function (data) {


                        a.find('.modal-body').append(createSearchBody(data.sampleTable))




                },
                    complete: function () {
                        a.find('table').dataTable({ paging: true })
                        a.find('.dataTables_wrapper').css('width', '100%');
                }

                });
            },
            complete: function () {
                a.find('select').selectpicker()
            }
        });


    });


    function showSearchModal(ele) {
        $(ele).closest('[perfect-class="formGroup"]').find('[perfect-class="formGroupModal"]').modal('show');
    }

    function searchbtn2(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');

        let $model = $(ele).closest('[perfect-class="formGroup"]').find('[perfect-class="formGroupModal"]');
        $(ele).closest('[perfect-class="formGroup"]').find('[perfect-class="formGroupModal"]').modal('show');




              $.ajax({
            url: '@Url.Action("GetStateList", "State")',
            type: "Get",
            headers: { "token_key": "1234" },
            //data: { branchID: id },
            dataType: "json",
            contentType: "application/json",
            success: function (successData) {
                console.log('> Search button click success', successData);

                if (successData.Process.IsProcess) {
                    var sss = createSelectListWithSearch({ data: successData.Data, element: $model, onlyShowColumn: ["State","ShortName"]});
                    sss.then(function (ret) {
                        if (ret) {
                            console.log('>_ Search button > list click', ret);
                            $thisForm.find('[name=DistrictID]').val(ret.DistrictID);
                            $thisForm.find('[name=District]').focus().val(ret.State);
                        }
                        else {
                            console.log(ret);
                        }
                    });

                      }
                      else {
                          $.each(successData.Process.Message, function (key, value) {
                              //toastr.warning(value, "Error");
                              NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                          });
                      }




                  },
                  complete: function () {

                      //a.find('.dataTables_wrapper').css('width', '100%');
                  }
              });
    }



    // This function get triggered when the search button is clicked   onClick event set on the search button
   //$('#addCustomer-jq-searchButton3').click(
    function searchbtn(ele) {

        console.log('Search function run')
        let $this = $(ele).closest('[perfect-class="formGroup"]');

        $.ajax({
            url: '@Url.Action("GetStateList()", "State")',
            type: "Get",
            headers: { "token_key": "1234" },
            //data: { branchID: id },
            dataType: "json",
            contentType: "application/json",
            success: function (successData) {
                console.log('> Search button click success', successData);

                if (successData.Process.IsProcess) {

                    //$.each(successData.Process.Message, function (key, value) {
                    //    toastr.success(value, "Success");
                    //});
                    //var sss = createSelectList({ data: JSON.parse(data), hideColumn: ['id'] });
                    //var sss = createSelectList({ data: successData.Data, hideColumn: ['DistrictID'], settings: { size: 'modal-xl'} });
                    var sss = createSelectList({ data: successData.Data });
                    sss.then(function (ret) {
                        if (ret) {
                            console.log('>_ Search button > list click', ret);
                            $this.find('[name=DistrictID]').val(ret.DistrictID);
                            $this.find('[name=District]').focus().val(ret.DistrictName);
                        }
                        else {
                            console.log(ret);
                        }
                    });

                }
                else {
                    $.each(successData.Process.Message, function (key, value) {
                        //toastr.warning(value, "Error");
                        NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                    });
                }




            },
            complete: function () {

                //a.find('.dataTables_wrapper').css('width', '100%');
            }
        });

        }
    //);


    //function RunFunction(callback) {
    //    callback()
    //}

    function testing() {
        let $tempModel = createSearchModalDOM().modal;

        $tempModel.find('.modal-title').addClass("d-none");
        $tempModel.show
        $tempModel.find('.modal-dialog').addClass('modal-xl')

        $tempModel.find('.modal-body').load('@Url.Action("GetCustomerForm", "Home")', function () {
            perfectCRMvalidation.init($(this).find('[perfect-class="form]'));
            initFunctions($(this));

        });
        //alert("thsioAS,DAM,S")
    }
</script>