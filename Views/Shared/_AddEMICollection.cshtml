@*/*----------------------------------------------------------------------
    Created By	: Kavya 
    Created On	: 31/10/2022
    Purpose		: EMI Collection
    -------------------------------------------------------------------------
    Modification
    On			By					OMID/Remarks
    -------------------------------------------------------------------------
    -------------------------------------------------------------------------*/*@

@model PerfectWebERP.Models.EMICollectionModel.DropDownListModel
<div class="card ">
    <div class="card-header">
        <h4 class="card-title col-12">@ViewBag.PageTitle</h4>
        <span title="To View List" onclick="fn_showListView();"><svg id="Layer_1" class="layer" stroke="currentColor" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" height="20" width="20" viewBox="0 0 122.88 122.54"><title>To View List</title><path class="viewlst" d="M4.69,0H46.22a4.71,4.71,0,0,1,4.69,4.69V46a4.69,4.69,0,0,1-4.69,4.69H4.69a4.65,4.65,0,0,1-3.31-1.38l-.09-.09A4.67,4.67,0,0,1,0,46V4.69A4.71,4.71,0,0,1,4.69,0ZM89.44,61.94a26.56,26.56,0,0,1,10.18,2l.07,0a26.61,26.61,0,0,1,15.25,32.16,26.18,26.18,0,0,1-2.7,6.11l10.3,11.24a1.27,1.27,0,0,1-.07,1.8l-7.57,6.9a1.27,1.27,0,0,1-1.79-.07l-9.86-10.85a26.36,26.36,0,0,1-6.1,2.74,26.87,26.87,0,0,1-7.71,1.13,26.51,26.51,0,0,1-10.17-2l-.07,0A26.64,26.64,0,0,1,64.85,78.37l0-.07A26.6,26.6,0,0,1,89.44,61.94Zm15,11.59a21.38,21.38,0,0,0-6.89-4.61l-.06,0a21.22,21.22,0,0,0-23.07,4.64l-.07.07a21.25,21.25,0,0,0-4.54,6.83l0,.06a21.32,21.32,0,0,0-1.58,8.06,21.26,21.26,0,0,0,29.35,19.62,21.54,21.54,0,0,0,6.89-4.61l.07-.07a21.09,21.09,0,0,0,4.54-6.83l0-.06a21.35,21.35,0,0,0,0-16.17,21.34,21.34,0,0,0-4.62-6.9ZM4.69,63.2H46.22a4.71,4.71,0,0,1,4.69,4.7v41.34a4.68,4.68,0,0,1-4.69,4.69H4.69A4.69,4.69,0,0,1,0,109.24V67.9a4.71,4.71,0,0,1,4.69-4.7ZM68.78,0h41.53A4.71,4.71,0,0,1,115,4.69V46a4.71,4.71,0,0,1-4.69,4.69H68.78A4.71,4.71,0,0,1,64.09,46V4.69a4.69,4.69,0,0,1,1.37-3.31l.1-.09A4.67,4.67,0,0,1, .78,0Z"></path></svg></span>
    </div>
    <div class="card-body">
        <form id="" class="form-valide" perfect-class="form" action="#" method="post" perfect-onFormSuccess="">
            <div class="">
                @Html.AntiForgeryToken()

                <div class="row">
                    <div class="col-sm-8">
                        <div class="row">
                            <div class="col-sm-6">
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-4 col-form-label">
                                        <span perfect-class="formGroupLabel">Import From</span>
                                        <span class="text-danger">*</span>
                                    </label>
                                    <div class="col-sm-8">
                                        <div class="input-group">
                                            <input type="hidden" name="ID_Customer" perfect-ctype="hidden"/>
                                            <input type="hidden" name="ID_CustomerWiseEMI" perfect-ctype="hidden"/>
                                            <input type="hidden" name="CustomeName" perfect-ctype="hidden"/>
                                            <input type="hidden" name="Address" perfect-ctype="hidden"/>
                                            <input type="hidden" name="Mobile" perfect-ctype="hidden"/>
                                            <input type="hidden" name="BillNo" perfect-ctype="hidden"/>
                                            <input type="hidden" name="SalCusName" perfect-ctype="hidden"/>
                                            <input type="hidden" name="CusAddress" perfect-ctype="hidden"/>
                                            <input type="hidden" name="SalNetAmount" perfect-ctype="hidden"/>
                                            <input type="hidden" name="BillDate" perfect-ctype="hidden"/>
                                            <input type="hidden" name="Bill_Date" perfect-ctype="hidden"/>
                                            <select class="form-control perfectValidate_string" id="ddlImportsList" name="ddlImportsList" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" onchange="OnchangeSelect(this)">
                                                <option value="">Please Select</option>
                                                <option value="1">Customer</option>
                                                <option value="2">EMI</option>
                                            </select>
                                            <div class="input-group-append">
                                                <button id="btnShowList" data-toggle="tooltip" data-placement="top" data-html="true" title="Import from Customer,Sales" class="btn btn-primary" type="button" perfect-css="button" onclick="fn_showImportList(this)" onchange="fn_Change(this);" Function="1"><i class="las la-file-import la-lg"></i></button>
                                                @*<button id="BtnShow" data-toggle="tooltip" data-placement="top" data-html="true" title="Show Customer/Sales Details" class="btn btn-primary" type="button" perfect-css="button" onclick="fn_show(this);"><i class="fa fa-eye"></i></button>*@
                                            </div>
                                        </div>

                                    </div>
                                </div>
                            </div>

                            <div class="col-sm-6">
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-5 col-form-label">
                                        <span perfect-class="formGroupLabel">Trans Date</span>
                                        <span class="text-danger">*</span>
                                    </label>
                                    <div class="col-sm-7">
                                        <input type="date" class="form-control perfectValidate_date" name="TransDate" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" />
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-sm-6">
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-4 col-form-label">
                                        <span perfect-class="formGroupLabel">Collection Date</span>
                                        <span class="text-danger">*</span>
                                    </label>
                                    <div class="col-sm-8">
                                        <input type="date" class="form-control perfectValidate_date" name="CollectionDate" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" />
                                    </div>
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-5 col-form-label">
                                        <span perfect-class="formGroupLabel">Collected By</span>
                                        <span class="text-danger">*</span>
                                    </label>
                                    <div class="col-sm-7">
                                        <div class="input-group">
                                            <input type="text" class="form-control perfectValidate_string" name="CollectedBy" perfect-class="formGroupControl" placeholder="Select Employee" perfect-ctype="input" perfect-css="input" readonly>
                                            <input type="hidden" class="form-control " name="CollectedByID" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" >
                                            <div class="input-group-append">
                                                <button id="addarea-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchVal(this,6,'Employee List',[])" criterea1="0" bindname="CollectedBy" bindval="CollectedByID"></button>
                                            </div>
                                        </div>
                                    </div>

                                </div>
                            </div>
                        </div>

                        <div class="row" style="display:none;">
                            <div class="col-sm-6">
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-4 col-form-label">
                                        <span perfect-class="formGroupLabel">Advance</span>
                                    </label>
                                    <div class="col-sm-8">
                                        <input type="text" class="form-control" name="Advance" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="this.value = this.value.replace(/[^0-9.]/g,'').replace(/(\..*)\./g, '$1');" maxlength="2" />
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>
                    <div class="col-sm-4">
                        <div class="cardEMICollection" id="divCusDetails" style="display:none;">
                            <div class="card-header bg-primary text-white text-center">
                                Customer Information
                            </div>
                            <div class="card-body" style="padding: 0rem">
                                <table class="table table-bordered">
                                    <tbody>
                                        <tr>
                                            <td>Customer Name</td>
                                            <td> <span id="CusName" name="CusName"></span></td>
                                        </tr>

                                        <tr>
                                            <td>Address</td>
                                            <td><span id="Address" name="Address"></span></td>
                                        </tr>

                                        <tr>
                                            <td>Contact No</td>
                                            <td><span id="Mobile" name="Mobile"></span></td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                            <div class="card-footer" style="padding: 0;">
                            </div>
                        </div>
                        <br />
                        
                    </div>

                </div>
                <div class="row">
                    <div class="col-sm-12">
                        <br />
                        <div class="table-responsive" perfect-tempTable="EMIDetails" id="EMItable" style="display:none;">
                            <table class="table table-responsive-sm" id="EMI">
                                <thead class="btn-primary" id="EMIHead">
                                    <tr>
                                        <th scope="col" style="text-align:left"> <input type="checkbox" id="checkall" name="checkall" title="Select All" /></th>
                                        <th scope="col" style="text-align:center">Sl.No</th>
                                        <th scope="col" style="text-align:center">Account No.</th>
                                        <th scope="col" style="text-align:center">Product/Project</th>
                                        <th style="display:none; text-align:center"><strong>Bill No</strong></th>
                                        <th scope="col" style="text-align:center">Bill Date</th>
                                        <th style="display:none;">Amount_old</th>
                                        <th scope="col" style="text-align:right;width:250px;">Inst.Amount</th>
                                        <th scope="col" style="text-align:right;width:250px;">Fine</th>
                                        <th scope="col" style="text-align:right">Total</th>
                                        <th style="display:none;text-align:right">Balance_old</th>
                                        <th style="display:none;text-align:right">FK_FinancePlanType</th>
                                        <th style="display:none;text-align:right">FK_CustomerWiseEMI</th>
                                        <th scope="col" style="text-align:right">Balance</th>
                                        <th scope="col" style="text-align:right"></th>
                                    </tr>
                                </thead>
                                <tbody id="EMIDetailstbody">
                                    @*<tr id="0">
                                        <td style="text-align:center;" colspan="8">No Records.</td>
                                    </tr>*@
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
                <hr />
                <div class="row">
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Total Amount</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control perfectValidate_string text-right" name="TotalAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="this.value = this.value.replace(/[^0-9.]/g,'').replace(/(\..*)\./g, '$1');" maxlength="9" readonly />
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Total Fine Amount</span>
                                @*<span class="text-danger">*</span>*@
                            </label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control text-right" name="FineAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="this.value = this.value.replace(/[^0-9.]/g,'').replace(/(\..*)\./g, '$1');" maxlength="9" readonly />
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4" style="display:none">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Waive Amount</span>
                                @*<span class="text-danger">*</span>*@
                            </label>
                            <div class="col-sm-7">
                                <input type="text" class="form-control text-right" name="WaveAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="this.value = this.value.replace(/[^0-9.]/g,'').replace(/(\..*)\./g, '$1');" maxlength="9" onchange="calculateTotals(this)" />
                            </div>
                        </div>
                    </div>


                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Net Amount</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control  perfectValidate_string text-right" name="NetAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="this.value = this.value.replace(/[^0-9.]/g,'').replace(/(\..*)\./g, '$1');" maxlength="9" readonly />
                                <div class="invalid-feedback animated fadeInUp limit-check" style="display: block;"></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4" style="display:none">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Payment Through</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-7">
                                <div class="input-group">
                                    <select class="form-control " name="PaymentMethod" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select">
                                        <option value="">Please Select </option>

                                        @if (!(Model.PaymentView is null))
                                        {
                                            foreach (var Module in Model.PaymentView)
                                            {
                                                <option value="@Module.PaymentmethodID">@Module.Name</option>
                                            }
                                        }
                                    </select>
                                    <div class="text-danger temptableError"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Payment Method</span>
                                <span class="text-danger">*</span>
                            </label>                            
                            <div class="col-sm-8">
                                <div class="input-group">

                                    <div class="input-group-append">
                                        <button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-money" type="button" perfect-css="button" title="Add Payment Method" onclick="GetPaymentlistsalesorder(this)"></button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    @*payment method pop up----- Start*@
                    <div class="modal fade" perfect-class="formGroupModalpayment" id="formGroupModalpayment">
                        <div class="modal-dialog  modal-dialog-centered modal-md" role="document">
                            <div class="modal-content">
                                <div class="modal-header border-0">
                                    <h5 class="modal-title">Payment Method</h5>
                                    <button type="button" class="close" data-dismiss="modal">
                                        <span>&times;</span>
                                    </button>
                                </div>
                                <div class="modal-body" perfect-class="formGroup" style="max-height: calc(100vh - 200px); overflow-y: auto;padding: 1rem;">
                                    <div class="row">


                                        <div class="col-sm-12">
                                            <div class="form-group row" perfect-class="formGroup">
                                                <label class="col-sm-4 col-form-label">Method <span class="text-danger">*</span></label>
                                                <div class="col-sm-8">
                                                    <div class="input-group">
                                                        <select class="form-control" perfect-tempTable-Payment="PaymentMethod" name="PaymentMethod" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select">
                                                            <option value="">Please Select </option>


                                                            @if (!(Model.PaymentView is null))
                                                            {
                                                                foreach (var Module in Model.PaymentView)
                                                                {
                                                                    <option value="@Module.PaymentmethodID">@Module.Name</option>
                                                                }
                                                            }
                                                        </select>


                                                    </div>
                                                    <div class="text-danger temptableError"></div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-12">
                                            <div class="form-group row" perfect-class="formGroup">
                                                <label class="col-sm-4 col-form-label">
                                                    <span perfect-class="formGroupLabel">Ref No.</span>

                                                </label>
                                                <div class="col-sm-8">

                                                    <div class="input-group">
                                                        <input type="text" class="form-control perfectValidate_string_nm" perfect-tempTable-Payment="Refno" name="Refno" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" maxlength="250" />

                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="col-sm-12">
                                            <div class="form-group row" perfect-class="formGroup">
                                                <label class="col-sm-4 col-form-label">
                                                    <span perfect-class="formGroupLabel">Amount</span>
                                                    <span class="text-danger">*</span>
                                                </label>
                                                <div class="col-sm-8">
                                                    <div class="input-group">
                                                        <input type="text" class="form-control text-right" perfect-tempTable-Payment="PAmount" id="PAmount" name="PAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="decimalpnt(this,'PAmount',3)" onchange="Pamount(this)" maxlength="12" />

                                                    </div>
                                                    <div class="text-danger temptableError"></div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-9">


                                        </div>
                                        <div class="col-sm-3 text-right">
                                            <div class="input-group">

                                                <div class="input-group-append">
                                                    <div>
                                                        <button type="button" class="btn btn-primary1 " onclick="createtable(this,'Payment',['PaymentMethod'],paytableOptionsTempOut)"><i class="fa fa-plus" aria-hidden="true"></i></button>
                                                        <button class="btn btn-light1" id="refresh"  type="button" onclick="productclear(this, 'Payment')"><i class="fa fa-refresh" aria-hidden="true"></i></button>
                                                    </div>
                                                </div>
                                            </div>

                                        </div>
                                        <div class="col-sm-12">
                                            <div class="form-group row" perfect-class="formGroup">
                                                <label class="col-sm-4 col-form-label">
                                                    <span perfect-class="formGroupLabel" style="font-weight:500;">Bal. Amount :</span>

                                                </label>
                                                <div class="col-sm-8">
                                                    <div class="input-group">

                                                        <label class="col-form-label">
                                                            <span perfect-class="formGroupLabel" style="font-weight:500;" name="BalAmt"></span>
                                                        </label>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>


                                        <div class="col-sm-12">
                                            <div class="form-group row" perfect-class="formGroup">

                                                <div class="table-responsive" perfect-tempTable-Payment="" perfect-tempTable="Payment" id="Paymentdethead" perfect-tempTable-lastindex="0" perfect-tempTable-action="0"></div>
                                                <div class="text-danger temptableError"></div>

                                            </div>
                                        </div>


                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-primary light" onclick="SoBillttlnetchck(this)">Apply</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    @*payment method pop up----- Start*@
                    <div class="col-sm-4" style="display:none;">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Transaction Type</span>
                            </label>
                            <div class="col-sm-7">
                                <div class="input-group">
                                    <select class="form-control" name="TransTypeID" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select">
                                        <option value="">Please Select </option>


                                        @if (!(Model.Transtypelist is null))
                                        {
                                            foreach (var Module in Model.Transtypelist)
                                            {
                                                <option value="@Module.TransTypeID">@Module.TransType</option>
                                            }
                                        }
                                    </select>
                                    <div class="text-danger temptableError"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>


                <div class="card-footer text-right" perfect-class="formFooter">
                    <button id="deleteemi" type="button" class="btn btn-warning mr-3 addcompany-jq-addnewuserUpdate d-none" name="delete" perfect-css="button" onclick="deleteEmicollection(this,1)"><i class="fa fa-refresh fa-spin loaderClass"></i>Delete</button>

                    @if (ViewBag.PagedAccessRights.UsrrlMsEdt)
                    {
                        @*<button id="" type="button" class="btn btn-primary mr-3 addcompany-jq-addnewuserUpdate d-none" name="update" perfect-css="button" onclick="fn_UpdateEMICollection(this,'update')"><i class="fa fa-refresh fa-spin loaderClass"></i>Update</button>*@
                    }
                    @if (ViewBag.PagedAccessRights.UsrrlMsAdd)
                    {
                        <button id="addcompany-jq-addnewuser" type="button" class="btn btn-primary mr-3 " name="add" perfect-css="button" onclick="fn_UpdateEMICollection(this,'new')"><i class="fa fa-refresh fa-spin loaderClass "></i>Save</button>
                    }
                    @*<button id="" type="button" class="btn btn-warning mr-3 addcompany-jq-addnewuserUpdate d-none" name="delete" perfect-css="button" onclick="deleteEmicollection(this)"><i class="fa fa-refresh fa-spin loaderClass"></i>Delete</button>*@
                    <button type="button" class="btn btn-light" perfect-css="button" onclick="fn_resetEMICollection(this)" name="reset">Clear</button>
                </div>

            </div>
        </form>
    </div>


</div>

<script>
    function fn_Change(element) {
        debugger;
        let $thisForm = $(element).closest('[perfect-class="form"]');
        let test = $thisForm.find('[name="ddlImportsList"]').val();
        console.log("ddlImportList", test);
        ResetEmidetails(element);
    }
    function ResetEmidetails(ele) {
        let $thisForm = $(element).closest('[perfect-class="form"]');

    }

    //to load Imports List
    function fn_showImportList(element) {

        let $thisForm = $(element).closest('[perfect-class="form"]');
        switch (parseInt($thisForm.find('[name="ddlImportsList"]').val())) {
            case 1:
                GetCmnPopUpSearchValAssign(element, 7, 'Customer List', [], ['ID_Customer', 'CustomeName', 'Mobile', 'Address','GSTINNo']);
                ///GetCmnPopUpSearchValAssign(element, 166, 'Customer List', [], ['ID_Customer', 'CustomeName', 'Mobile','Address']);
                break;
            case 2:
                GetCmnPopUpSearchValAssign(element, 68, 'EMI List', [], ['ID_CustomerWiseEMI', 'SalBillDate','CustomerNo','CustomeName', 'ID_Customer', 'Mobile','Address']);
                break;
            default:
                NotificationMessage({ 'type': 'info', 'heading': 'info', 'message': 'Please Select Import From' });
                break;
        }
    }
    function getfunction(ele) {
        fn_show(ele);
    }
    function fn_show(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');

        let Importlist_ID = $thisForm.find('[name="ddlImportsList"]').val();

        if (Importlist_ID == 1 ) {

            $("#divCusDetails").css('display', 'block');
            $("#divBilldetails").css('display', 'block');
            let ConsName = $thisForm.find('[name="CustomeName"]').val();
            let MobileNo = $thisForm.find('[name="Mobile"]').val();
            let Address = $thisForm.find('[name="Address"]').val();
            $thisForm.find('[name=CusName]').text(ConsName);
            $thisForm.find('[name=Mobile]').text(MobileNo);
            $thisForm.find('[name=Address]').text(Address);
            ShowBillDetails(ele);
        }
        else if (Importlist_ID==2) {
            $("#divCusDetails").css('display', 'block');
            $("#divBilldetails").css('display', 'block');
            let ConsName = $thisForm.find('[name="CustomeName"]').val();
            let MobileNo = $thisForm.find('[name="Mobile"]').val();
            let Address = $thisForm.find('[name="Address"]').val();
            $thisForm.find('[name=CusName]').text(ConsName);
            $thisForm.find('[name=Mobile]').text(MobileNo);
            $thisForm.find('[name=Address]').text(Address);
            $thisForm.find('[name=BillNo]').text('');
            $thisForm.find('[name=Bill_Date]').text('');
            $thisForm.find('[name=SalNetAmount]').text('');
            ShowBillDetails(ele);
        }

    }

    function fn_resetEMICollection() {
        LoadEMICollection();
    }

    function OnchangeSelect(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');

        let ConsName = $thisForm.find('[name="CustomeName"]').val('');
        let MobileNo = $thisForm.find('[name="Mobile"]').val('');
        let Address = $thisForm.find('[name="Address"]').val('');
        let BillNo = $thisForm.find('[name="BillNo"]').val('');
        let BillDate = $thisForm.find('[name="BillDate"]').val('');
        let Amount = $thisForm.find('[name="SalNetAmount"]').val('');
        $thisForm.find('[name=CusName]').text(ConsName);
        $thisForm.find('[name=Mobile]').text(MobileNo);
        $thisForm.find('[name=Address]').text(Address);
        $thisForm.find('[name=BillNo]').text(BillNo);
        $thisForm.find('[name=Bill_Date]').text(BillDate);
        $thisForm.find('[name=SalNetAmount]').text(Amount);
        $("#divCusDetails").css('display', 'none');
        $("#divBilldetails").css('display', 'none');

        $('#EMIHead').hide();
        $('#EMIDetailstbody').empty();
        $('#divBilldetails').hide();
        $('#EMItable').hide();

        $thisForm.find('[name="ID_EMICollection"]').val('');
        $thisForm.find('[name="ID_Customer"]').val('');
        $thisForm.find('[name="TransDate"]').val(moment().format('YYYY-MM-DD'));
        $thisForm.find('[name="CollectionDate"]').val(moment().format('YYYY-MM-DD'));
        $thisForm.find('[name="TransTypeID"]').val('').selectpicker('refresh');
        $thisForm.find('[name="TotalAmount"]').val('');
        $thisForm.find('[name="FineAmount"]').val('');
        $thisForm.find('[name="Advance"]').val('');
        $thisForm.find('[name="WaveAmount"]').val('');
        $thisForm.find('[name="NetAmount"]').val('');
        $thisForm.find('[name="CollectedByID"]').val('');
        $thisForm.find('[name="CollectedBy"]').val('');
        $thisForm.find('[name="PaymentMethod"]').val('').selectpicker('refresh');
        let ttlamt = 0;
        $thisForm.find('[name=BalAmt]').text(ttlamt.toFixed(2));
        let $Ptblcontainer = $thisForm.find('[perfect-tempTable="Payment"]');
        $Ptblcontainer.empty();
        $thisForm.find('[perfect-tempTable-Payment]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
    }

    function fn_UpdateEMICollection(ele, actionType) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');

        let ID_EMICollection = 0;
        let ActionUrl = "";

        var EMIDetail;
        EMIDetail = [];
        var today = new Date().toISOString().split('T')[0];
        document.getElementsByName("TransDate")[0].setAttribute('min', today);
        document.getElementsByName("CollectionDate")[0].setAttribute('max', today);
        if ($thisForm.valid()) {
            
            $('#EMI').find('tbody tr').each(function (index, ele) {
                if ($($(ele).find("input[type='checkbox']")).is(":checked") == true) {
                    var EMIDetailData = {};                   
                    EMIDetailData['FK_CustomerWiseEMI'] = $(this).closest("tr").find('.FK_CustomerWiseEMI').text();
                    //EMIDetailData['CusTrDetDemandDate'] = $(this).closest("tr").find('.EMDate').text();
                    EMIDetailData['CusTrDetPayAmount'] = $(this).find('.EMAmount').find('input').val();
                    EMIDetailData['CusTrDetFineAmount'] = $(this).find('.FineAmount').find('input').val();
                    EMIDetailData['Total'] = $(this).closest("tr").find('.Total').text();
                    EMIDetailData['Balance'] = $(this).closest("tr").find('.Balance').text();
                    EMIDetailData['FK_Closed'] = $(this).closest("tr").find('button').attr('data-value');
                    EMIDetail.push(EMIDetailData);
                }
                console.log('EMIDetailData', EMIDetailData)
                var allcheck = $("#checkall:checked").length;
                var Checkedcount = $("input[type='checkbox']:checked").length;
                var Actualcheckedcount = Checkedcount - allcheck;
                var rowCount = $("#EMI tbody tr").length;
                if (Actualcheckedcount < rowCount) {
                    $('#checkall').prop('checked', false);
                }
                else {
                    $('#checkall').prop('checked', true);
                }
            });
            if (EMIDetail.length > 0)
            {
                if (BillAmountbinds(ele)) {
                    if (parseFloat($thisForm.find('[name="NetAmount"]').val()) > 0) {

                        let paymentdetails = [];
                        $thisForm.find('[perfect-tempTable="Payment"]').find('tbody').find('tr').each(function () {
                            paymentdetails.push($(this).data('pData'));
                        });

                        $(ele).prop('disabled', true);
                        if (actionType === "new") {
                            ID_EMICollection = 0;
                            ActionUrl = "@Url.Action("AddNewEMICollection", "EMICollection")";
                        }
                        else if (actionType === "update") {
                            ID_EMICollection = $thisForm.find('[name="ID_EMICollection"]').val();
                            ActionUrl = "@Url.Action("UpdateEMICollection", "EMICollection")";
                        }
                        let FK_Master = 0;
                        if ($thisForm.find('[name="ddlImportsList"]').val() == 1) {
                            FK_Master = $thisForm.find('[name="ID_Customer"]').val();
                        }
                        else if ($thisForm.find('[name="ddlImportsList"]').val() == 2) {
                            FK_Master = $thisForm.find('[name="ID_CustomerWiseEMI"]').val();
                        }
                        let inputData = {
                            __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                            'ID_EMICollection': ID_EMICollection,
                            'CusTrCusType': $thisForm.find('[name="ddlImportsList"]').val(),
                            'FK_Master': FK_Master,
                            'FK_Customer': $thisForm.find('[name="ID_Customer"]').val(),
                            'TransMode': EMICollectionTransMode,
                            'TransDate': $thisForm.find('[name="TransDate"]').val(),
                            'CollectDate': $thisForm.find('[name="CollectionDate"]').val(),
                            //'TransType': 2 /*$thisForm.find('[name="TransTypeID"]').val()*/,
                            'CusTrAmount': $thisForm.find('[name="TotalAmount"]').val(),
                            'CusTrFineAmount': $thisForm.find('[name="FineAmount"]').val(),
                            'NetAmount': $thisForm.find('[name="NetAmount"]').val(),
                            'CusTrCollectedBy': $thisForm.find('[name="CollectedByID"]').val(),
                            'EMIDetail': EMIDetail,
                            'LastID': LastID_EMICollection,
                            'PaymentDetail': paymentdetails,
                        };
                        clearSessionValue(LastIDSessionKey);
                        $.ajax({
                            url: ActionUrl,
                            type: "POST",
                            data: inputData,
                            dataType: "json",
                            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                            success: function (ajaxOutput) {
                                if (ajaxOutput.Process.IsProcess) {
                                    $.each(ajaxOutput.Process.Message, function (key, value) {
                                        NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                                    });

                                    let onSuccess = $thisForm.attr('perfect-onFormSuccess')
                                    if (onSuccess) {
                                        window[onSuccess]();

                                    }
                                    LoadEMICollection();
                                    fn_EMIListIndex(this);

                                    $thisForm.find('[perfect-ctype="select"]').val('').selectpicker('refresh');
                                    $thisForm.find('[perfect-ctype="input"]').val('');
                                    $thisForm.find('[perfect-ctype="date"]').val('');
                                    $thisForm.find('[perfect-ctype="hidden"]').val('');
                                }
                                else {
                                    $.each(ajaxOutput.Process.Message, function (key, value) {
                                        NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                    });
                                }



                            },
                            complete: function () {
                                $(ele).prop('disabled', false);
                            }
                        });
                    }
                    else {
                        NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': "Net Amount should be greater than zero" });
                    }
                }
                else {
                    $(ele).prop('disabled', false);
                    NotificationMessage({ 'type': 'error', 'heading': 'Warning', 'message': 'In Payment Method Balance Amt. Should be  Zero ' });
                }
            }
            else {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': "Please Select Atleast One Bill" });
            }
        }
    }


    function ShowBillDetails(ele) {
        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let FK_Master = 0;
        let CollectionDate = $thisForm.find('[name="CollectionDate"]').val();
        let Advance = $thisForm.find('[name="Advance"]').val();
        let AccountMode = $thisForm.find('[name="ddlImportsList"]').val();
        if (AccountMode==1) {
            FK_Master = $thisForm.find('[name="ID_Customer"]').val();
        }
        else if (AccountMode == 2) {
            FK_Master = $thisForm.find('[name="ID_CustomerWiseEMI"]').val();
        }
        let inputs = document.getElementById('checkall');
        inputs.checked = false;

            var InputData =
            {
                'FK_Master': FK_Master,
                'AccountMode': AccountMode,
                'CollectionDate': CollectionDate,
                'Advance': Advance,
            }

            $.ajax({
                url: "@Url.Action("GetEMIDetails", "EMICollection")",
                type: "POST",
                data: InputData,
                dataType: "json",
                contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                success: function (ajaxOutput) {
                    if (ajaxOutput.Process.IsProcess) {
                        var CheckListHTML = '';
                        $('#EMIHead').show();
                        $('#EMIDetailstbody').empty();
                        $('#divBilldetails').show();
                        $('#EMItable').show();
                        if (ajaxOutput.Data.length > 0) {
                            let totalAmount;
                            let CurrentBalance;
                            $.each(ajaxOutput.Data, function (i, value) {                                
                                totalAmount = parseFloat(value.Amount) + parseFloat(value.Fine)
                                CurrentBalance = parseFloat(value.Balance) - parseFloat(value.Amount);
                                let $CheckListHTML = $('<tr/>');
                                $CheckListHTML.append("<td class='idcheck'><input id='chekvalue" + i + "' class='chkbtn' type='checkbox'/></td>");
                                $CheckListHTML.append("<td class='SlNo' style='text-align: center'>" + value.SlNo + "</td>");
                                $CheckListHTML.append("<td class='BillNo' style='text-align: center'>" + value.EMINo + "</td>");
                                $CheckListHTML.append("<td class='Product' style='text-align: center'>" + value.Product + "</td>");
                                $CheckListHTML.append("<td class='EMDate' style='text-align: center' >" + ConvertJsonDate(value.BillDate) + "</td>");
                                $CheckListHTML.append("<td class='EMAmount_old' Style='Display:none'>" + value.Amount.toFixed(2) + "</td>");
                                $CheckListHTML.append("<td class='EMAmount' style='text-align: right'><input type='text'  class='form-control text-right' perfect-class='formGroupControl' name='EMIAmount' id='EMIAmount'  onkeypress='return isNumberKey(event)'  value='" + (value.Amount).toFixed(2) + "' maxlength='9' /></td></td>");
                                $CheckListHTML.append("<td class='FineAmount' style='text-align: right'><input type='text'  class='form-control text-right' perfect-class='formGroupControl' name='EMIFineAmount' id='EMIFineAmount' onkeypress='return isNumberKey(event)'  value='" + (value.Fine).toFixed(2) + "' maxlength='9' /></td></td>");
                                $CheckListHTML.append("<td class='ID_Sales' Style='Display:none'>" + value.ID_Sales + "</td>");
                                $CheckListHTML.append("<td class='FineAmount_old' Style='Display:none'>" + value.Fine + "</td>");
                                $CheckListHTML.append("<td class='FK_Customer' Style='Display:none'>" + value.FK_Customer + "</td>");
                                $CheckListHTML.append("<td class='FK_SalesOrder' Style='Display:none'>" + value.FK_SalesOrder + "</td>");
                                $CheckListHTML.append("<td class='FK_FinancePlanType' Style='Display:none'>" + value.FK_FinancePlanType + "</td>");
                                $CheckListHTML.append("<td class='FK_CustomerWiseEMI' Style='Display:none'>" + value.FK_CustomerWiseEMI + "</td>");
                                $CheckListHTML.append("<td class='Total' style='text-align: right'>" + Number(totalAmount).toFixed(2) + "</td>");
                                $CheckListHTML.append("<td class='Balance_old' Style='Display:none'>" + value.Balance.toFixed(2) + "</td>");
                                $CheckListHTML.append("<td class='Balance' style='text-align: right'>" + Number(CurrentBalance).toFixed(2) + "</td>");
                                $CheckListHTML.append("<td class='LoanStatus' style='text-align: right'><span id='close'>Closing</span><button id='loanstatus" + i + "' data-value='0' style='outline:none;box-shadow:none;' class='btn' perfect-css='button' type='button' name='loanname' data-target='buttonlabel' ><i id='tickicon"+ i +"' class=' fa fa-check fa-2x' style='color:grey'></i></button></td>");
                                $("#EMIDetailstbody").append($CheckListHTML)
                                
                            })
                        }
                        else {
                            CheckListHTML += "<div class='form-group col-md-6'>";
                            CheckListHTML += "<div class='form-check mb-2'>";
                            CheckListHTML += "<input type='checkbox' class='form-check-input' >"
                            CheckListHTML += "<label class='form-check-label' style='text-align:center;' for='check1'><b>No EMI for this customer.</b></label>";
                            CheckListHTML += "</div></div>"
                            $("#EMIDetailstbody").html(CheckListHTML)
                        }
                        calculateTotals(ele);
                    }
                    else {
                        $('#EMIDetailstbody').empty();
                        $('#EMIHead').hide();
                        $('#checkall').is(":checked") == false;
                        //$('#Billdetailstbody').empty();
                        $('#divBilldetails').hide();
                        $.each(ajaxOutput.Process.Message, function (key, value) {
                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': "No EMI Details Found." });
                        });
                    }
                },
                complete: function () {
                    $(ele).prop('disabled', false);

                }
            });
    }
    $('#checkall').change(function () {
        $('tbody tr td input[type="checkbox"]').prop('checked', $(this).prop('checked'));
        calculateTotals(this);
    });
    
    $("#EMI tbody").on("click", ".LoanStatus", function () {
        debugger
        var row = $(this).closest("tr");
        let i = $(this).closest("tr").index()
        let Total;
        let Amount = row.find('.EMAmount').find('input').val();
        let old_balance = row.find('.Balance_old').text();
        let old_Amount = row.find('.EMAmount_old').text();
        let balance = row.find('.Balance').text();
        var FineAmount = row.find('.FineAmount').find('input').val() == "" ? "0" : row.find('.FineAmount').find('input').val();
        var FineAmountOld = row.find('.FineAmount_old').text() == "" ? "0" : row.find('.FineAmount_old').text();
        let Existvalue = row.find('.EMAmount').find('input').val();
        let value = row.find('.LoanStatus').find('button').attr('data-value');
        var _button = row.find('.LoanStatus').find('button');        
        _button.attr('data-value', value == 1 ? 0 : 1); 
      
        let currentbalance;
       
        if (row.find('.LoanStatus').find('button').attr('data-value') == 1) {
            row.find('.Balance').text((Number(old_balance)).toFixed(2));
            row.find('.EMAmount').find('input').val((Number(old_balance)).toFixed(2));           
            $("#tickicon" + i).css("color", "green");
            row.find('.EMAmount').find('input').attr('disabled', true);

            //val change
            currentbalance = (parseFloat(row.find('.Balance').text())) - (parseFloat(row.find('.EMAmount').find('input').val()));
            row.find('.Balance').text((Number(currentbalance)).toFixed(2));
            let TotalAmount = (parseFloat(row.find('.EMAmount').find('input').val()) + parseFloat(FineAmount));
            row.find('.Total').text(Number(TotalAmount).toFixed(2));
            //val change
            //$('.EMAmount'+i).trigger('change');
        }
        else if (row.find('.LoanStatus').find('button').attr('data-value') == 0){
            row.find('.EMAmount').find('input').attr('disabled', false);
            //val change
            row.find('.EMAmount').find('input').val((Number(old_Amount)).toFixed(2));
            row.find('.Balance').text((Number(old_balance)).toFixed(2));
            let TotalAmount = (parseFloat(old_Amount) + parseFloat(FineAmount));
            row.find('.Total').text(Number(TotalAmount).toFixed(2));
            //val change
            $("#tickicon" + i).css("color", "grey")
            //$('.EMAmount'+i).trigger('change');
        }
        calculateTotals(this)
    });

    $("#EMI tbody").on("change", ".EMAmount", function () {
        debugger
        var row = $(this).closest("tr");
        var Amount = row.find('.EMAmount').find('input').val() == "" ? "0" : row.find('.EMAmount').find('input').val();
        var FineAmount = row.find('.FineAmount').find('input').val() == "" ? "0" : row.find('.FineAmount').find('input').val();
        var FineAmountOld = row.find('.FineAmount_old').text() == "" ? "0" : row.find('.FineAmount_old').text();
        var Total = row.find('.Total').text();
        var Balance = row.find('.Balance').text();
        var Balanceold = row.find('.Balance_old').text();
        var Amountold = row.find('.EMAmount_old').text();
        console.log('AMOUNT', parseFloat(Amount))
        debugger

        if (parseFloat(Amount) <= parseFloat(Balanceold)) {
            row.find('.EMAmount').find('input').val(Number(Amount).toFixed(2));
            var TotalAmount = (parseFloat(Amount) + parseFloat(FineAmount));
            row.find('.Total').text(Number(TotalAmount).toFixed(2));
            var BalanceAmount = (parseFloat(Balanceold) - parseFloat(Amount));
            row.find('.Balance').text(Number(BalanceAmount).toFixed(2));
            calculateTotals(this);
        }
        else if (parseFloat(Amount) == "NaN") {
            row.find('.EMAmount').find('input').val(Number(Amountold).toFixed(2));
            var TotalAmount = (parseFloat(Amountold) + parseFloat(FineAmountOld));
            row.find('.Total').text(Number(TotalAmount).toFixed(2));
            row.find('.Balance').text(Number(Balanceold).toFixed(2));
            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': "Enter A Valid Number" });
            calculateTotals(this);
        }
        else {

            row.find('.EMAmount').find('input').val(Number(Amountold).toFixed(2));
            var TotalAmount = (parseFloat(Amountold) + parseFloat(FineAmount));
            row.find('.Total').text(Number(TotalAmount).toFixed(2));
            row.find('.Balance').text(Number(Balanceold).toFixed(2));
            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': "Amount can't be Greater Than Balance" });
            calculateTotals(this);
        }
    });
    $("#EMI tbody").on("change", ".FineAmount", function () {
        debugger
        var row = $(this).closest("tr");
        var Amount = row.find('.EMAmount').find('input').val() == "" ? "0" : row.find('.EMAmount').find('input').val();
        var FineAmount = row.find('.FineAmount').find('input').val() == "" ? "0" : row.find('.FineAmount').find('input').val();
        var FineAmountOld = row.find('.FineAmount_old').text() == "" ? "0" : row.find('.FineAmount_old').text();
        var Total = row.find('.Total').text();
        var Balance = row.find('.Balance').text();
        var Balanceold = row.find('.Balance_old').text();
        var Amountold = row.find('.EMAmount_old').text();
        console.log('AMOUNT', parseFloat(Amount))
        debugger
        if (parseFloat(Amount) <= parseFloat(Balanceold)) {
            row.find('.FineAmount').find('input').val(Number(FineAmount).toFixed(2));
            var TotalAmount = (parseFloat(Amount) + parseFloat(FineAmount));
            row.find('.Total').text(Number(TotalAmount).toFixed(2));
            var BalanceAmount = (parseFloat(Balanceold) - parseFloat(Amount));
            row.find('.Balance').text(Number(BalanceAmount).toFixed(2));
            calculateTotals(this);
        }
        else if (parseFloat(Amount) == "NaN") {
            row.find('.FineAmount').find('input').val(Number(FineAmountOld).toFixed(2));
            var TotalAmount = (parseFloat(Amountold) + parseFloat(FineAmountOld));
            row.find('.Total').text(Number(TotalAmount).toFixed(2));
            row.find('.Balance').text(Number(Balanceold).toFixed(2));
            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': "Enter A Valid Number" });
        }
        else {

            row.find('.FineAmount').find('input').val(Number(FineAmountOld).toFixed(2));
            var TotalAmount = (parseFloat(Amountold) + parseFloat(FineAmountOld));
            row.find('.Total').text(Number(TotalAmount).toFixed(2));
            row.find('.Balance').text(Number(Balanceold).toFixed(2));
            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': "Amount can't be Greater Than Balance" });
        }
    });
    $("#EMI tbody").on("change", ".idcheck", function () {
        calculateTotals(this);
    });


    function calculateTotals(ele) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let TotalAmount = 0;
        let FineAmount = 0;
        let Netamount = 0;
        let WaveAmount = 0;
        let TotalBill = $thisForm.find('[name=FineAmount]').val() == "" ? 0 : $thisForm.find('[name=FineAmount]').val();
        let Othercharg = $thisForm.find('[name=TotalAmount]').val() == "" ? 0 : $thisForm.find('[name=TotalAmount]').val();
        let WaveAmnt = $thisForm.find('[name=WaveAmount]').val() == "" ? 0 : $thisForm.find('[name=WaveAmount]').val();
        
        $('#EMI').find('tbody tr').each(function (index,ele) {

            if ($($(ele).find("input[type='checkbox']")).is(":checked") == true) {
                let EMITotalAmount = parseFloat($(ele).find('.EMAmount').find('input').val());
                let EMITotalFineAmount = parseFloat($(ele).find('.FineAmount').find('input').val());

                TotalAmount = TotalAmount + parseFloat($(ele).find('.EMAmount').find('input').val());
                FineAmount = FineAmount + parseFloat($(ele).find('.FineAmount').find('input').val());
            }
            var allcheck = $("#checkall:checked").length;

            var Checkedcount = $("input[type='checkbox']:checked").length;
            var Actualcheckedcount = Checkedcount - allcheck;
            var rowCount = $("#EMI tbody tr").length;
            if (Actualcheckedcount < rowCount) {
                $('#checkall').prop('checked', false);
            }
            else {
                $('#checkall').prop('checked', true);
            }
        });
        debugger
        if (parseFloat(WaveAmnt) > parseFloat(FineAmount)) {
            $thisForm.find('[name=FineAmount]').val(FineAmount.toFixed(2));
            $thisForm.find('[name=TotalAmount]').val(TotalAmount.toFixed(2));
            Netamount = (parseFloat(TotalAmount.toFixed(2)) + parseFloat(FineAmount.toFixed(2)));
            $thisForm.find('[name=NetAmount]').val(Netamount.toFixed(2));
            $thisForm.find('[name=WaveAmount]').val(Number(WaveAmount).toFixed(2));
            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': "Waive Amount can't be Greater Than Fine Amount" });
        }
        else {
            $thisForm.find('[name=FineAmount]').val(FineAmount.toFixed(2));
            $thisForm.find('[name=TotalAmount]').val(TotalAmount.toFixed(2));
            Netamount = (parseFloat(TotalAmount.toFixed(2)) + parseFloat(FineAmount.toFixed(2)) - parseFloat(Number(WaveAmnt).toFixed(2)));
            $thisForm.find('[name=NetAmount]').val(Netamount.toFixed(2));
            $thisForm.find('[name=WaveAmount]').val(Number(WaveAmnt).toFixed(2));
        }
        let billamt = 0;
        let bilamt = 0;
        let netamt= $thisForm.find('[name=NetAmount]').val();
        bilamt = netamt;
        $('#Paymentdethead').find('tbody tr').each(function (index, ele) {
            billamt += parseFloat($(ele).find('.PAmount').text());

        });
        bilamt = parseFloat(bilamt) - billamt;
        $thisForm.find('[name=BalAmt]').text(bilamt.toFixed(2));
    }



    function GetPaymentlistsalesorder(ele) {
        $('#formGroupModalpayment').modal({ backdrop: 'static', keyboard: false });
        $('#formGroupModalpayment').modal('show');
    }

    function SoBillttlnetchck(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');

        let balamt = $thisForm.find('[name=BalAmt]').text();
        if (parseFloat(balamt) == 0) {
            $('#formGroupModalpayment').modal('hide');
            $thisForm.find('[perfect-tempTable="Payment"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
        }
        else {
            $thisForm.find('[perfect-tempTable="Payment"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('Balance Amt. should be Zero');
        }
    }

    function createtable(ele, tkey, uniq = [], tableOptionsTempOut) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let tableKey = tkey;
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');

        let insertData = {};
        let tableOptionsTemp = tableOptionsTempOut;
      
        let unique = (uniq) ? uniq : [];

        let isValid = true;
        let errorClass = '.temptableError';

        //make index      

        let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
        let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
        let indexname = tkey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);
        let updateCond = '';
        let isNew = true;

        if (thisactionIndex > 0) {
            //means update
            insertData[indexname] = thisactionIndex;
            updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
            isNew = false;
        }
        else {
            //insert
            insertData[indexname] = lastIndex + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
            isNew = true;
        }
        //
        if (tableKey == 'Payment') {
            isValid = validpaymntdetail(ele, tableKey, errorClass, isValid);
        }
       

        if (unique.length > 0) {
            //getting previous data
            let prevData = [];
            $tblcontainer.find('table > tbody').find('tr').each(function () {
                if (isNew) {
                    prevData.push($(this).data('pData'));
                }
                else {
                    if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                        prevData.push($(this).data('pData'));
                    }

                }

            })
            

            unique.forEach(function (key, i) {
                
                let $thisEle = $thisForm.find('[perfect-tempTable-' + tableKey + '="' + key + '"]');
                // let headerEleName = $thisForm.find('[name="lblProName"]').text();
                let atname = $thisEle.attr('name');
                let cvalue;
               
                
                if ($thisEle.length != 0) {
                    
                    let $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
                    let errmessage = key + " Already exits"

                    //getting current value in cval
                    if ($thisEle.is('select')) {
                        cvalue = $thisEle.val();
                        //alert(cvalue);
                    }
                    else if ($thisEle.is('input')) {

                        let inputEleType = $thisEle.attr('type').toLocaleLowerCase();

                        if (inputEleType == 'checkbox') { cvalue = $thisEle.is(':checked'); }
                        else if (inputEleType == 'hidden') { cvalue = $thisEle.val();  }
                        else { cvalue = $thisEle.val(); }
                    }
                    else { cvalue = $thisEle.val(); }

                    //searching in previous data
                    if (prevData.find(a => a[atname] == cvalue)) {
                        
                        $errorElement.text(errmessage);
                        isValid = false;
                    }
                }
            });
        }
        

        if (isValid) {            
            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
               
                if ($this.is('select')) {                    
                    tableOptionsTemp.hideColumn.push(nameAttr)
                   
                    if ($this.val() != null) {
                        let selectText = ($this.val().length == 0) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    else {
                        let selectText = ($this.val() == null) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }                   
                    insertData[nameAttr] = $this.val();                   

                    $this.val('').selectpicker('refresh');
                }
                else if ($this.is('input')) {

                    insertData[nameAttr] = $this.val();                   
                    if (nameAttr == "prodtid") { }
                    else if (nameAttr == "stkid") { }
                    else { $this.val(''); }
                }
            });
                       

            if (isNew) {
                
                //this section nake table.table row
                if ($tblcontainer.find('table').length == 0) {                    
                    $tblcontainer.append(pft_table_createtable([insertData], tableOptionsTemp));
                }
                else {                   
                    let table = $tblcontainer.find('table').DataTable()
                    table.destroy()
                    pft_table_addTableRow($tblcontainer.find('table'), insertData, tableOptionsTemp);
                }
            }
            else {
                let table = $tblcontainer.find('table').DataTable()
                table.destroy()
                pft_table_replaceTableRow($tblcontainer.find('table'), updateCond, insertData, tableOptionsTemp);
            }
                        
            // resetting the edit value
            $tblcontainer.attr('perfect-tempTable-action', 0);

            if (tableKey == 'Payment') {
                BillAmountbinds(ele);
            }
        }
    }

    var paytableOptionsTempOut = {
        iconButton: {
            buttons: [
                {
                    icon: "fa fa-pencil btnPerfectGridEdit",
                    action: function () {
                        let savedData = $(this).closest('tr').data('pData')

                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let tableKey = $tablecontainer.attr('perfect-tempTable');
                        let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                        //index attribute name in table row
                        let indexname = tableKey + 'index';

                        //index number in table row
                        let rindex = $(this).closest('tr').attr(indexname);

                        $tablecontainer.attr('perfect-tempTable-action', rindex);

                        console.log('Editclick', savedData);
                        //filling data in available inputs
                        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                            let $thisNode = $(this);
                            let pf_name = $thisNode.attr('name');
                            if ($thisNode.is('select')) {
                                $thisNode.val(savedData[pf_name]).selectpicker('refresh');
                            }
                            else if ($thisNode.is('input')) {
                                let inputType = $thisNode.attr('type').toLocaleLowerCase();

                                if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {
                                    $thisNode.prop('checked', savedData[pf_name]);
                                }
                                else {
                                    $thisNode.val(savedData[pf_name]);
                                }
                            }
                            else {
                                $thisNode.val(savedData[pf_name]);
                            }
                        });
                    }
                },
                {
                    icon: "fa fa-trash btnPerfectGridDelete",
                    action: function () {
                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let $thistbl = $(this).closest('table');
                        let table = $thistbl.DataTable();
                        table.destroy();
                        if ($(this).closest('tbody').find('tr').length > 1) {
                            $(this).closest('tr').remove();
                            pft_table_slreset($thistbl);
                            //$thistbl.dataTable({ paging: true, searchbtn: false });
                        }
                        else {
                            $thistbl.remove();
                        }
                        $("#refresh").click();
                        BillAmountbinds($tablecontainer);
                    }
                },
            ]
        },

        rowAttribute: [],
        onlyShowColumn: ['PAmount', 'Refno', 'PaymentMethod_d'],
        renameHeader: { "PAmount": "Amount1R", "Refno": "Ref No", "PaymentMethod_d": "Method" },
        hideColumn: ['BalAmt'],

        serialNo: true,

    };
    function BillAmountbinds(ele) {
        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let netamt = $thisForm.find('[name="NetAmount"]').val() == "" ? "0" : $thisForm.find('[name="NetAmount"]').val();        
        let billamt = 0;
        let bilamt = 0;

        if ($thisForm.find('[name=BalAmt]').text() == '') {
            bilamt = 0;
        }
        else {
            bilamt = netamt;
        }

        $('#Paymentdethead').find('tbody tr').each(function (index, ele) {
            billamt += parseFloat($(ele).find('.PAmount').text());
        });
        bilamt = parseFloat(bilamt) - billamt;

        $thisForm.find('[name=BalAmt]').text(bilamt.toFixed(2));
        if (bilamt == 0) {
            return true;
        }
        else {
            return false;
        }
    }
    function Pamount(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let amtp = $thisForm.find('[name="PAmount"]').val() == "" ? "0" : $thisForm.find('[name="PAmount"]').val();
        $thisForm.find('[name="PAmount"]').val(parseFloat(amtp).toFixed(2))
    }
    function productclear(ele, tablekey) {

        let $thisform = $(ele).closest('[perfect-class="form"]');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="select"]').val('').selectpicker('refresh');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="date"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="hidden"]').val('');

        let $tblcontainer = $thisform.find('[perfect-tempTable="' + tablekey + '"]');
        $tblcontainer.attr('perfect-tempTable-action', 0);       
    }
    function validpaymntdetail(ele, tableKey, errorClass, isValid) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').val() == null) {

            isValid = false;
            console.log('false', $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').val());
            $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Payment Method');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }

        if (parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="PAmount"]').val()) <= 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="PAmount"]').val() == "") {
            console.log('false', $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').val());
            isValid = false;

            $thisForm.find('[perfect-tempTable-' + tableKey + '="PAmount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please enter a value greater than  0');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="PAmount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }
        return isValid;
    }

    function fillTableSales(ele, tkey, data, tableOptionsTempOut) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let tableOptionsTempfill = tableOptionsTempOut;
        let insertData = []
        let tableKey = tkey;
        let indexname = tkey + 'index';
        tableOptionsTempfill.rowAttribute.push(indexname);
        tableOptionsTempfill.hideColumn.push(indexname);
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');
        $.each(data, function (keyOne, valOne) {

            let pData = {};

            pData[indexname] = keyOne + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', pData[indexname])
            //---

            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                //console.log('tfhyrtname', nameAttr)
                if (typeof valOne[nameAttr] !== undefined) {

                    if ($this.is('select')) {
                        // tableOptionsTempfill.renameHeader[nameAttr + '_d'] = headerName;
                        tableOptionsTempfill.hideColumn.push(nameAttr);
                        //displat text of select
                        pData[nameAttr + '_d'] = $this.find('[value="' + valOne[nameAttr] + '"]').text();
                        pData[nameAttr] = valOne[nameAttr];
                        console.log('select', $this.find('options[value="' + valOne[nameAttr] + '"]').text());

                    }
                    else if ($this.is('input'))
                    {

                        let inputType = $this.attr('type').toLocaleLowerCase();
                        console.log(inputType)


                        if (inputType == 'date') {

                            if (valOne[nameAttr] == null) {
                                pData[nameAttr] = valOne[nameAttr];
                            }
                            else {
                                pData[nameAttr] = moment(valOne[nameAttr]).format('YYYY-MM-DD');
                            }


                        }
                        else {
                            pData[nameAttr] = valOne[nameAttr];


                        }
                    }
                    else {
                        pData[nameAttr] = valOne[nameAttr];


                    }
                }



            });

            insertData.push(pData);


            //----

        });
        $tblcontainer.empty();
        $tblcontainer.append(pft_table_createtable(insertData, tableOptionsTempfill));
        // $tblcontainer.find('table').dataTable({ paging: true });      
    }


    function decimalpnt(ele, name, range, md) {
        debugger
        if (md == 1) {
            ele = $(this).find('[perfect-class="form"]');
        }
        let input = $('#' + name);
        ele.value = ele.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');
        let t = ele.value;
        ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t;
        input.on('keydown', function () {
            if (ele.value.includes('.')) {

            }
            var key = event.keyCode || event.charCode;
            if (key == 8 || key == 46) { }
            else {
                if (ele.value.length == 9) {
                    ele.value = ele.value + '.';
                }
            }

        });

    }
    function ConvertJsonDate(Jsondate) {
        var date = "";
        if (Jsondate != "" && Jsondate != null && Jsondate != undefined) {
            var dateString = Jsondate.substr(6);
            var currentTime = new Date(parseInt(dateString));
            var month = currentTime.getMonth() + 1;
            if (month <= 9) {
                month = "0" + month;
            }
            var day = currentTime.getDate();
            if (day <= 9) {
                day = "0" + day;
            }
            var year = currentTime.getFullYear();
            date = day + "/" + month + "/" + year;


        }
        return date;
    }
    function isNumberKey(evt) {
        var charCode = (evt.which) ? evt.which : event.keyCode
        if (charCode > 31 && (charCode < 46 || charCode > 57))
            return false;

        return true;
    }

</script>