
@model PerfectWebERP.Models.EmployeeStockTransferModel.EmployeeStockTransferViewList
<style>
    .form-control1 {
        background: white;
        border: white;
    }

    .form-control2 {
        background: white;
        border: white;
    }
</style>

<div class="card ">
    <div class="card-header">
        <h4 class="card-title col-12">Stock  Transfer </h4>
        <span title="To View List" onclick="fn_showListView();"><svg id="Layer_1" class="layer" stroke="currentColor" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" height="20" width="20" viewBox="0 0 122.88 122.54"><title>To View List</title><path class="viewlst" d="M4.69,0H46.22a4.71,4.71,0,0,1,4.69,4.69V46a4.69,4.69,0,0,1-4.69,4.69H4.69a4.65,4.65,0,0,1-3.31-1.38l-.09-.09A4.67,4.67,0,0,1,0,46V4.69A4.71,4.71,0,0,1,4.69,0ZM89.44,61.94a26.56,26.56,0,0,1,10.18,2l.07,0a26.61,26.61,0,0,1,15.25,32.16,26.18,26.18,0,0,1-2.7,6.11l10.3,11.24a1.27,1.27,0,0,1-.07,1.8l-7.57,6.9a1.27,1.27,0,0,1-1.79-.07l-9.86-10.85a26.36,26.36,0,0,1-6.1,2.74,26.87,26.87,0,0,1-7.71,1.13,26.51,26.51,0,0,1-10.17-2l-.07,0A26.64,26.64,0,0,1,64.85,78.37l0-.07A26.6,26.6,0,0,1,89.44,61.94Zm15,11.59a21.38,21.38,0,0,0-6.89-4.61l-.06,0a21.22,21.22,0,0,0-23.07,4.64l-.07.07a21.25,21.25,0,0,0-4.54,6.83l0,.06a21.32,21.32,0,0,0-1.58,8.06,21.26,21.26,0,0,0,29.35,19.62,21.54,21.54,0,0,0,6.89-4.61l.07-.07a21.09,21.09,0,0,0,4.54-6.83l0-.06a21.35,21.35,0,0,0,0-16.17,21.34,21.34,0,0,0-4.62-6.9ZM4.69,63.2H46.22a4.71,4.71,0,0,1,4.69,4.7v41.34a4.68,4.68,0,0,1-4.69,4.69H4.69A4.69,4.69,0,0,1,0,109.24V67.9a4.71,4.71,0,0,1,4.69-4.7ZM68.78,0h41.53A4.71,4.71,0,0,1,115,4.69V46a4.71,4.71,0,0,1-4.69,4.69H68.78A4.71,4.71,0,0,1,64.09,46V4.69a4.69,4.69,0,0,1,1.37-3.31l.1-.09A4.67,4.67,0,0,1,68.78,0Z"></path></svg></span>
    </div>
    <div class="card-body">
        <form id="" class="form-valide" perfect-class="form" action="#" method="post" perfect-onFormSuccess="">
            @Html.AntiForgeryToken()
            <div class="row">
                <div class="col-sm-6">
                    <div class="form-group row" perfect-class="formGroup">
                        <label class="col-sm-4 col-form-label">
                            &nbsp;<span perfect-class="formGroupLabel">Date</span>
                            <span class="text-danger">*</span>
                        </label>
                        <div class="col-sm-8">
                            <input type="date" class="form-control perfectValidate_date" id="transdateid" name="TransDate" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" />
                            <input type="hidden" name="LastID" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                        </div>
                    </div>

                </div>
                <div class="col-sm-8" style="display:none;">
                    <input type="date" class="form-control" id="rqdate" name="RequestDate" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" />
                </div>
                <div class="col-sm-6" hidden>
                    <div class="form-group row" perfect-class="formGroup">
                        <label class="col-sm-4 col-form-label">
                            &nbsp;<span perfect-class="formGroupLabel">Mode</span>
                            <span class="text-danger">*</span>
                        </label>

                        <div class="col-sm-8">
                            <select class="form-control perfectValidate_string" id="ModeTR" name="ModeTR" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" disabled>
                                <option value="">Please Select </option>
                                <option value="1">Request</option>
                                <option value="0">Transfer</option>
                            </select>
                        </div>
                    </div>

                </div>
                <div class="col-sm-6" id="Divpopuprequestid">
                    <div class="form-group row" perfect-class="formGroup">
                        <label class="col-sm-4 col-form-label">
                            &nbsp;<span perfect-class="formGroupLabel">Request</span>

                        </label>

                        <div class="col-sm-8">
                            <div class="input-group">
                                <input type="text" class="form-control" name="StockTransferNo" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled />
                                <input type="hidden" name="FK_StockTransfer" class="form-control" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />

                                <div class="input-group-append">
                                    <button id="addproductstock-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="SearchRequest(this)"></button>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
            <div class="">




                <div class="row">

                    <div class="col-sm-6">
                        <div class="profile-personal-info">
                            <h4>From</h4>
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    &nbsp;&nbsp;&nbsp;
                                    <span perfect-class="formGroupLabel">Branch</span>
                                    <span class="text-danger">*</span>
                                </label>
                                <div class="col-sm-8">
                                    <select class="form-control perfectValidate_string" name="BranchID" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" data-live-search="true" disabled>
                                        <option value="">Please Select </option>
                                        @if (!(Model.BranchList is null))
                                        {
                                            foreach (var branchList in Model.BranchList)
                                            {
                                                <option value="@branchList.BranchID">@branchList.BranchName</option>
                                            }

                                        }

                                    </select>


                                </div>

                            </div>

                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    &nbsp;&nbsp;&nbsp;
                                    <span perfect-class="formGroupLabel">Department</span>
                                    <span class="text-danger">*</span>
                                </label>
                                <div class="col-sm-8">
                                    <select class="form-control perfectValidate_numeric" name="DepartmentID" id="departmentid" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" data-live-search="true" onchange="employeepopupclearfrom(this)">

                                        <option value="">Please Select </option>

                                        @if (!(Model.DepartmentList is null))
                                        {
                                            foreach (var departmentList in Model.DepartmentList)
                                            {
                                                <option value="@departmentList.DepartmentID">@departmentList.DepartmentName</option>
                                            }

                                        }

                                    </select>

                                </div>

                            </div>
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    &nbsp;&nbsp;&nbsp;
                                    <span perfect-class="formGroupLabel">Employee</span>

                                </label>

                                <div class="col-sm-8">
                                    <div class="input-group" id="divemployeefrom">
                                        <input type="text" class="form-control " name="EmployeeName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled />
                                        <input type="hidden" name="EmployeeID" id="employeeid" class="perfectValidate_numeric_nm" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                        <div class="input-group-append">
                                            @*<button id="addemployee-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="getEmployeeDepartmentlist(this)" Criterea1="0" Criterea2="0" BindName="FromName" BindVal="FromNameID"></button>*@
                                            <button id="employeefromid" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchValAssign(this,37,'Employee List',[],['FK_Department','FK_Branch'],'@ViewBag.TransMode')" Criterea1="DepartmentID" Criterea2="BranchID" BindName="EmployeeName" BindVal="EmployeeID"></button>
                                        </div>
                                    </div>


                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="profile-personal-info">


                            <h4>To</h4>

                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    &nbsp;&nbsp;&nbsp;
                                    <span perfect-class="formGroupLabel">Branch</span>
                                    <span class="text-danger">*</span>
                                </label>
                                <div class="col-sm-8">
                                    <select class="form-control perfectValidate_numeric" name="BranchIDTo" id="branchidto" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" data-live-search="true" onchange="departmentclearto(this)">

                                        <option value="">Please Select </option>

                                        @if (!(Model.BranchListTo is null))
                                        {
                                            foreach (var branchListto in Model.BranchListTo)
                                            {
                                                <option value="@branchListto.BranchIDTo">@branchListto.BranchNameTo</option>
                                            }

                                        }

                                    </select>

                                </div>

                            </div>

                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    &nbsp;&nbsp;&nbsp;
                                    <span perfect-class="formGroupLabel">Department</span>
                                    <span class="text-danger">*</span>
                                </label>
                                <div class="col-sm-8">
                                    <select class="form-control perfectValidate_numeric" name="DepartmentIDTo" id="departmentidto" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" data-live-search="true" onchange="employeepopupclear(this)">

                                        <option value="">Please Select </option>

                                        @if (!(Model.DepartmentListTo is null))
                                        {
                                            foreach (var departmentListto in Model.DepartmentListTo)
                                            {
                                                <option value="@departmentListto.DepartmentIDTo">@departmentListto.DepartmentNameTo</option>
                                            }

                                        }

                                    </select>

                                </div>

                            </div>
                            <div class="form-group2 row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    &nbsp;&nbsp;&nbsp;
                                    <span perfect-class="formGroupLabel">Employee</span>

                                </label>
                                <div class="col-sm-8">
                                    <div class="input-group">
                                        <input type="text" class="form-control" name="EmployeeNameTo" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled />
                                        <input type="hidden" name="EmployeeIDTo" class="perfectValidate_numeric_nm" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                        <div class="input-group-append">

                                            <button id="addemployeestockto-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchValAssign(this,37,'Employee List',[''],['FK_Branch','FK_Department'],'@ViewBag.TransMode')" Criterea1="DepartmentIDTo" Criterea2="BranchIDTo" BindName="EmployeeNameTo" BindVal="EmployeeIDTo" onchange="checkemployeeid"></button>

                                        </div>
                                    </div>

                                </div>

                            </div>


                        </div>
                    </div>

                </div>
                <div class="card ">
                    <div class="card-header">
                        <h4 class="card-title col-12"> Product Details </h4>

                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-6" perfect-class="TempTableGroup">

                                <div class="col-sm-12" id="idstockmodetransfer">

                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-4 col-form-label">
                                            <span perfect-class="formGroupLabel">Stock Mode</span>
                                            <span class="text-danger">*</span>
                                        </label>
                                        <div class="col-sm-7">
                                            <div class="input-group">

                                                <select class="form-control" id="StockMode" name="StockMode" perfect-class="formGroupControl" perfect-tempTable-Opening="StockMode" perfect-ctype="select" perfect-css="select" onchange="clearproductfield(this)">
                                                    <option value="">Please Select </option>
                                                    <option value="1">Actual Stock</option>
                                                    <option value="2">Return Stock</option>
                                                </select>

                                            </div>
                                            <span class="invalid-feedback animated fadeInUp d-block temptableError" style="display:none"></span>
                                        </div>

                                    </div>
                                </div>
                                <div class="col-sm-12">

                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-4 col-form-label">
                                            <span perfect-class="formGroupLabel">Product</span>
                                            <span class="text-danger">*</span>
                                        </label>

                                        <div class="col-sm-7 PerError">
                                            <div class="input-group">
                                                <input type="text" class="form-control" name="Product" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" perfect-tempTable-Opening="Product" disabled />
                                                <input type="hidden" name="ID_Product" class="form-control" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" perfect-tempTable-Opening="ID_Product" />
                                                <input type="hidden" name="ID_Stock" class="form-control" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" perfect-tempTable-Opening="ID_Stock" />


                                                <div class="input-group-append">
                                                    @{

                                                        <button id="prdbtn" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="fn_productpopupcondition(this)" Criterea1="" Criterea2="" Criterea3="" BindName="Product" BindVal="ID_Product" Function="2"></button>

                                                    }
                                                </div>

                                            </div>

                                            <span class="invalid-feedback animated fadeInUp d-block temptableError"></span>
                                        </div>


                                    </div>


                                </div>
                              
                                    <div class="col-sm-12" id="showunit">

                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">Unit</span>
                                                <span class="text-danger">*</span>
                                            </label>

                                            <div class="col-sm-7 PerError">
                                                <div class="input-group">
                                                    <select class="form-control" perfect-tempTable-Opening="Unit" name="ID_Unit" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" onchange="ItemTotalCalculation(this)">
                                                        <option value="0">Master Unit </option>

                                                        @if (!(Model.UnitList is null))
                                                        {
                                                            foreach (var unit in Model.UnitList)
                                                            {
                                                                <option value="@unit.ID_Unit" UnitCountS="@unit.UnitCount">@unit.UnitName</option>
                                                            }
                                                        }
                                                    </select>



                                                </div>

                                                <span class="invalid-feedback animated fadeInUp d-block temptableError"></span>
                                            </div>


                                        </div>


                                    </div>
                              
                                    <div class="col-sm-12">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">Quantity</span>

                                            </label>
                                            <div class="col-sm-7">
                                                <div class="input-group">
                                                    <input type="text" class="form-control text-right" placeholder="" name="Quantity" id="Quantity" oninput="decimalpnt(this,'Quantity',4)" perfect-class="formGroupControl" maxlength="13" perfect-ctype="input" perfect-css="input" perfect-tempTable-Opening="Quantity" min=" 0" onchange="fn_checkStock(this)" />

                                                    <input type="hidden" name="StandbyQuantity" class="form-control" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" perfect-tempTable-Opening="StandbyQuantity" />
                                                    <input type="hidden" name="Stock" class="form-control" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" perfect-tempTable-Opening="Stock" />
                                                    @*<input type="hidden" name="ReqQuantity" class="form-control" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" perfect-tempTable-Opening="ReqQuantity" />*@
                                                    <input type="hidden" name="ID_StockTransferDetails" class="form-control" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" perfect-tempTable-Opening="ID_StockTransferDetails" />

                                                    <span class="invalid-feedback animated fadeInUp d-block" style="display:none"></span>

                                                </div>

                                            </div>

                                        </div>
                                    </div>

                                    <div class="col-sm-12">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">

                                                <span perfect-class="formGroupLabel">Stand By Quantity</span>
                                                @*<span class="text-danger">*</span>*@
                                            </label>
                                            <div class="col-sm-5">
                                                <div class="input-group">

                                                    <input type="text" class="form-control text-right" placeholder="" id="QuantityStandBy" name="QuantityStandBy" oninput="decimalpnt(this,'QuantityStandBy',4)" perfect-class="formGroupControl" maxlength="13" perfect-ctype="input" perfect-css="input" perfect-tempTable-Opening="QuantityStandBy" min="0" onchange="fn_checkStockStnd(this)" />
                                                    @*<input type="hidden" name="ReqQtyStandBy" class="form-control" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" perfect-tempTable-Opening="ReqQtyStandBy" />*@
                                                    @*<input type="hidden" name="StandbyQuantity" class="form-control" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" perfect-tempTable-Opening="StandbyQuantity" />*@
                                                    <span class="invalid-feedback animated fadeInUp d-block" style="display:none"></span>


                                                </div>

                                            </div>

                                            <div class="col-sm-1">
                                                <button type="button" class="btn btn-primary1" perfect-css="button" onclick="EmployeestocktransferDetailsTable_create(this,'Opening',['ID_Product'])" name="reset" align="center"><i class="fa fa fa-plus" aria-hidden="true"></i></button>
                                            </div>

                                            <div class="col-sm-0">
                                                <button id="btnStockTransfer" class="btn btn-light1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" onclick="clearproducts(this,'Opening')"><i class="fa fa-refresh" aria-hidden="true"></i></button>
                                            </div>

                                        </div>
                                    </div>



                                </div>
                            <div class="col-6">
                                <div class="col-sm-12 mt-2">

                                    <div class="table-responsive" perfect-tempTable="Opening" perfect-tempTable-lastindex="0" perfect-tempTable-action="0">

                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="card-footer text-right" perfect-class="formFooter">
                <button id="" type="button" class="btn btn-primary mr-3 addcompany-jq-addnewuserUpdate d-none" name="update" perfect-css="button" onclick="updateEmployeeStockTransfer(this)"><i class="fa fa-refresh fa-spin  loaderClass"></i>Update</button>
                <button id="addcompany-jq-addnewuser" type="button" class="btn btn-primary mr-3 " name="add" perfect-css="button" onclick="AddEmployeeStockTransfer(this)"><i class="fa fa-refresh fa-spin loaderClass "></i>Save</button>
                <button type="button" class="btn btn-light" perfect-css="button" onclick="ResetButton(this)" name="reset">Clear</button>
            </div>

        </form>
    </div>
</div>



<script src="~/Scripts/jqDOM/searchDOMCreation.js"></script>
<script>

    (function () {

        jQuery("select").selectpicker();

    })();

    $(document).ready(function () {

       let $thisForm = $(this).find('[perfect-class="form"]');
        $('#stockavailable').hide();
        $('#stockstandby').hide();
        var today = new Date();
        var day = today.getDate() > 9 ? today.getDate() : "0" + today.getDate(); // format should be "DD" not "D" e.g 09
        var month = (today.getMonth() + 1) > 9 ? (today.getMonth() + 1) : "0" + (today.getMonth() + 1);
        var year = today.getFullYear();
        let Multiunitsettings = '@ViewBag.Multiunitsettings';
        $thisForm.find('[name="TransDate"]').attr('max', year + "-" + month + "-" + day);

        $thisForm.find('[name=ModeTR]').val(0).selectpicker('refresh');
        //alert(Multiunitsettings);
        if (Multiunitsettings == 'True') {
            $('#showunit').show();
        }
       
        else {
            $('#showunit').hide();

        }

    });

    function ConvertJsonDate(Jsondate) {
        var date = "";
        if (Jsondate != "" && Jsondate != null && Jsondate != undefined) {
            var dateString = Jsondate.substr(6);
            var currentTime = new Date(parseInt(dateString));
            var month = currentTime.getMonth() + 1;
            var day = currentTime.getDate();
            var year = currentTime.getFullYear();
            date = day + "-" + month + "-" + year;
        }
        return date;
    }
    function decimalpnt(ele, id, range) {
        let input = $('#' + id);

        ele.value = ele.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');
        let t = ele.value;
        ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t;

        $(document).on('keydown', '#' + id, function (event) {

            if (ele.value.includes('.')) {

            }
            var key = event.keyCode || event.charCode;
            if (key == 8 || key == 46) { }
            else {
                if (ele.value.indexOf('.') < 0 && ele.value.indexOf('.') !== 9 && ele.value.length > 8) {
                    ele.value = ele.value + '.';
                }
            }

        });

    }

    function clearproducts(ele, tablekey) {


        let $thisform = $(ele).closest('[perfect-class="form"]');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="select"]').val('').selectpicker('refresh');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="date"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="hidden"]').val('');
        $('#stockavailable').hide();
        $('#stockstandby').hide();
        let $tblcontainer = $thisform.find('[perfect-tempTable="' + tablekey + '"]');
        $tblcontainer.attr('perfect-tempTable-action', 0);

        if (tablekey = "Opening") {

        }

    }


    function employeepopupclear(ele)
    {
        let $container = $(ele).closest('[perfect-class="form"]');
        $container.find('[name=EmployeeIDTo]').val('0')
        $container.find('[name=EmployeeNameTo]').val('');

    }
    function employeepopupclearfrom(ele) {
        let $container = $(ele).closest('[perfect-class="form"]');
        $container.find('[name=EmployeeID]').val('0')
        $container.find('[name=EmployeeName]').val('');

    }

    function departmentclearto(ele) {

        let $container = $(ele).closest('[perfect-class="form"]');
       $container.find('[name=DepartmentIDTo]').val('');
        $container.find('[name=DepartmentIDTo]').val('').selectpicker('refresh');

        $container.find('[name=EmployeeIDTo]').val('0');
        $container.find('[name=EmployeeNameTo]').val('');
    }



    function getfunctionAssign(ele) {
        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        Fun_Stocktransfer_LoadUnit(ele, 0)

        if ($thisForm.find('[name=ID_Product]').val() != null) {

            $('#stockavailable').show();
          

        }
        if ($thisForm.find('[name=ID_Product]').val() != null) {

            $('#stockstandby').show();
           
        }

    }


    function fn_productpopupcondition(ele) {
        //debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let stockmode = $thisForm.find('[name=StockMode]').val();
       
        let errorClass = '.temptableError';
        if (stockmode == 2) {
            document.getElementById("prdbtn").setAttribute("Criterea1", "BranchID");
            document.getElementById("prdbtn").setAttribute("Criterea2", "DepartmentID");
            document.getElementById("prdbtn").setAttribute("Criterea3", "EmployeeID");
            $thisForm.find("[name='StockMode']").closest('[perfect-class="formGroup"]').find(errorClass).text('');
            GetCmnPopUpSearchValAssign(ele, 104, 'Product List', [], ['Slno', 'ID_Stock', 'Stock', 'StandbyQuantity'], '@ViewBag.TransMode')
            $thisForm.find("[name='ID_Product']").closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }
        else if (stockmode == 1) {
            document.getElementById("prdbtn").setAttribute("Criterea1", "BranchID");
            document.getElementById("prdbtn").setAttribute("Criterea2", "DepartmentID");
            document.getElementById("prdbtn").setAttribute("Criterea3", "EmployeeID");
            $thisForm.find("[name='StockMode']").closest('[perfect-class="formGroup"]').find(errorClass).text('');
            GetCmnPopUpSearchValAssign(ele, 38, 'Product List', [], ['Slno', 'ID_Stock', 'Stock', 'StandbyQuantity'], '@ViewBag.TransMode')
            $thisForm.find("[name='ID_Product']").closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }
        else if (stockmode == 0 || stockmode === '') {
            isValid = false;
            $thisForm.find("[name='StockMode']").closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Stock Mode');
 
        }
    }

    function clearproductfield(ele)
    {
       
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        $thisForm.find("[name='ID_Product']").val(0);
        $thisForm.find("[name='Product']").val('');
        let errorClass = '.temptableError';
        $thisForm.find("[name='StockMode']").closest('[perfect-class="formGroup"]').find(errorClass).text('');
    }

    function ResetButton(ele) {



        fn_EmployeeStockTransferIndex_initialLoad();

    }

    function bindemployeedepartmentfrom(ele) {


        let $thisForm = $(ele).closest('[perfect-class="form"]');

        let from = $thisForm.find('[name=From]').val();
        if (from == 2) {
            $thisForm.find('[name=labluser]').text("Employee");

        }
        else if (from == 3) {
            $thisForm.find('[name=labluser]').text("Branch");
        }
        else {
            $thisForm.find('[name=labluser]').text("Department");
        }


    }





    function bindemployeedepartmentto(ele) {


        let $thisForm = $(ele).closest('[perfect-class="form"]');

        let to = $thisForm.find('[name=To]').val();



        if (to == 2) {
            $thisForm.find('[name=labluser1]').text("Employee");

        }
        else if (to == 3) {
            $thisForm.find('[name=labluser1]').text("Branch");
        }
        else {
            $thisForm.find('[name=labluser1]').text("Department");
        }


    }

    function checkemployeeid(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let errorClass = '.temptableError';
        let $errorElement = $(ele).closest('[perfect-class="formGroup"]').find(errorClass);
        let Employeeidfrom = $thisForm.find('[name="EmployeeID"]').val();
        let Employeeidto = $thisForm.find('[name="EmployeeIDTo"]').val();

        if ((Employeeidfrom = !0 && Employeeidto != 0) || (Employeeidfrom =! '' && Employeeidto !='') ) {
            if (Employeeidfrom == Employeeidto) {

                $errorElement.text('Please check from employee and to employee Name');
            }
            else {

            }
        }




    }


    function checkbranchdepartment(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let errorClass = '.temptableError';
        let $errorElement = $(ele).closest('[perfect-class="formGroup"]').find(errorClass);

        let branchfrom = $thisForm.find('[name=BranchID]').val();
        let branchto = $thisForm.find('[name=BranchIDTo]').val();
        let departmentfrom = $thisForm.find('[name=DepartmentID]').val();
        let departmentto = $thisForm.find('[name=DepartmentIDTo]').val();


        if (branchfrom == branchto && departmentfrom == departmentto  ) {
                console.log('inside limit check if')
                $errorElement.text('From and To Branch And Department Should not be same');
            }
            else {
                console.log('save')
            }





    }

    var qtyuniq = 0;
    function checkquantitylimit(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let errorClass = '.temptableError';
        let $errorElement = $(ele).closest('[perfect-class="formGroup"]').find(errorClass);
        //invalid-feedback
        let QuantityEnt = $thisForm.find('[name="Quantity"]').val();

        let qtyuniq = $thisForm.find('[name="Stock"]').val();

        if (parseFloat(QuantityEnt) > parseFloat(qtyuniq)) {
            console.log('inside limit check if')
            $errorElement.text('Entered value should be less than Available Quantity');

        }
        else {
            $errorElement.text('');
            console.log('inside limit check else')

        }


    }


    var stndqtyuniq = 0;

    function checkStandquantitylimit(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let errorClass = '.temptableError';
        let $errorElement = $(ele).closest('[perfect-class="formGroup"]').find(errorClass);
        //invalid-feedback
        let StndQuantityEnt = $thisForm.find('[name="QuantityStandBy"]').val();

        let stndqtyuniq = $thisForm.find('[name="StandbyQuantity"]').val();

        if (parseFloat(StndQuantityEnt) > parseFloat(stndqtyuniq)) {
            console.log('inside limit check if')
            $errorElement.text('Entered value should be less than Avaliable Stand by Quantity');

        }
        else {
           $errorElement.text('');
            console.log('inside limit check else')

        }


    }




    function SearchRequest(ele) {

        console.log('Search function run')

        let $thisForm = $(ele).closest('[perfect-class="form"]');



        var obj = {
            BranchID: $thisForm.find('[name=BranchID]').val(),
            BranchIDTo: $thisForm.find('[name=BranchIDTo]').val(),
            DepartmentID: $thisForm.find('[name=DepartmentID]').val(),
            DepartmentIDTo: $thisForm.find('[name=DepartmentIDTo]').val(),
            EmployeeID: $thisForm.find('[name=EmployeeID]').val(),
            EmployeeIDTo: $thisForm.find('[name=EmployeeIDTo]').val(),
            TransMode: '@ViewBag.TransMode',


        }
           $.ajax({
                    url:'@Url.Action("GetRequestSearch", "EmployeeStockTransfer")',
               type: "Get",
               data: obj,
               dataType: "json",

                    contentType: "application/json",
                    success: function (successData) {
                        if (successData.Process.IsProcess) {
                            if (successData.Data.length> 0) {
                                var sss = createSelectList({
                                    data: successData.Data,
                                     hideColumn: ['FK_StockTransfer', 'StockTransferID', 'ModeTR', 'BranchID', 'BranchIDTo', 'BranchNameTo', 'DepartmentID', 'DepartmentIDTo',
                                         'DepartmentNameTo', 'EmployeeID', 'EmployeeIDTo', 'SubEmployeeStockTransfers', 'TotalCount', 'ReasonID', 'TransMode', 'LastID', 'TransDate'],
                                    headingText: 'Request From List',
                                    isDateType: [],
                                    renameHeader: { "TranDate": "Date", "BranchName": "Branch", "DepartmentName": "Department", "EmployeeName": "Employee", "EmployeeNameTo": "Employee To" },
                                });

                                sss.then(function (ret) {
                                    if (ret) {
                                        $thisForm.find('[name=RequestDate]').val(moment(ret.TransDate).format('YYYY-MM-DD'));
                                        $thisForm.find('[name=FK_StockTransfer]').val(ret.FK_StockTransfer);

                                        $thisForm.find('[name=BranchID]').val(ret.BranchID).selectpicker('refresh');
                                        $('#branchid').prop('disabled', true);
                                        $thisForm.find('[name=BranchIDTo]').val(ret.BranchIDTo).selectpicker('refresh');
                                        $('#branchidto').prop('disabled', true);
                                        $thisForm.find('[name=DepartmentID]').val(ret.DepartmentID).selectpicker('refresh');
                                        $('#departmentid').prop('disabled', true);
                                        $thisForm.find('[name=DepartmentIDTo]').val(ret.DepartmentIDTo).selectpicker('refresh');
                                        $('#departmentidto').prop('disabled', true);
                                        $thisForm.find('[name=EmployeeID]').val(ret.EmployeeID);
                                        $('#employeefromid').prop('disabled', true);
                                        $thisForm.find('[name=EmployeeName]').val(ret.EmployeeName);
                                        $thisForm.find('[name=Employee]').val(ret.Employee);
                                        $thisForm.find('[name=EmployeeIDTo]').val(ret.EmployeeIDTo);
                                        $('#addemployeestockto-jq-searchButton3').prop('disabled', true);
                                        $thisForm.find('[name=EmployeeNameTo]').val(ret.EmployeeNameTo);

                                        fn_setStocktransferDtls(ret.FK_StockTransfer, ele);
                                    }
                                });
                            }
                        }
                        else {
                            $.each(successData.Process.Message, function (key, value) {
                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'No Records Found' });
                            });
                        }

                    },
                    complete: function () {
                    }
                });
    }


    function fn_setStocktransferDtls(id, ele) {


        let $thisForm = $(ele).closest('[perfect-class="form"]');

        let inputData =
        {
            __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
            FK_StockTransfer: id,
            TransMode: '@ViewBag.TransMode'
        };
          $.ajax({
                url: '@Url.Action("GetStocktransferInfo", "EmployeeStockTransfer")',
                        type: "POST",
                        data: inputData,
                        dataType: "json",
                        contentType: 'application/x-www-form-urlencoded;charset=utf-8',
                        success: function (ajaxOutput)
                        {

                           // debugger
                        if (ajaxOutput.Process.IsProcess) {

                         let table = JSON.parse(ajaxOutput.Data);
                            fillgrid('Opening', tableOptionsTempOut, $thisForm, table.dtable);


                }
                else {
                    $.each(ajaxOutput.Process.Message, function (key, value) {
                        NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Insufficient Stock' });

                    });

                }
            },
            complete: function () {
                $(ele).prop('disabled', false);
            }
        });

    }



    function fillgrid(tablk, wartableOptionsTempOut, $thisForm, data) {
       // debugger;
        let tableOptionsTemp = wartableOptionsTempOut;
        let insertData = [];
        let tableKey = tablk;
        let indexname = tableKey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');
        //if (Multiunitsettings == 'False') {
        //    let showCoulmn = tableOptionsTemp.onlyShowColumn;

        //    showCoulmn = showCoulmn.filter(item => item !== "ID_Unit_d");
        //    tableOptionsTemp.onlyShowColumn = showCoulmn;
            
        //}

        $.each(data, function (keyOne, valOne) {
            let pData = {};
           // debugger
            pData[indexname] = keyOne + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', pData[indexname])
            //---

            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                //console.log('name', valOne[nameAttr])
                if (typeof valOne[nameAttr] !== undefined) {

                    if ($this.is('select')) {

                        switch (headerName) {
                            case "StockMode":
                                headerName = "Stock Mode";
                                break;
                            default:
                                break
                        }
                        tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                        tableOptionsTemp.hideColumn.push(nameAttr);
                        //displat text of select
                        pData[nameAttr + '_d'] = $this.find('[value="' + valOne[nameAttr] + '"]').text();
                        pData[nameAttr] = valOne[nameAttr];


                    }
                    else if ($this.is('input')) {

                        pData[nameAttr] = valOne[nameAttr];

                    }

                }

            });

            insertData.push(pData);
            console.log('pData', pData)
            console.log('insertData', insertData)
            //----

        });
        $tblcontainer.empty();
        $tblcontainer.append(pft_table_createtable(insertData, tableOptionsTemp));

    }

    var tableOptionsTempOut = {
        iconButton: {
            buttons: [

                {

                    icon: "fa fa-pencil btnPerfectGridEdit",

                    action: function () {

                        let savedData = $(this).closest('tr').data('pData')
                        console.log('', savedData);

                        getfunctionAssign(this);
                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let tableKey = $tablecontainer.attr('perfect-tempTable');
                        let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                        //index attribute name in table row
                        let indexname = tableKey + 'index';
                        //index number in table row
                        let rindex = $(this).closest('tr').attr(indexname);
                        $tablecontainer.attr('perfect-tempTable-action', rindex);

                        console.log('Editclick', savedData);
                        //filling data in available inputs
                        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                            let $thisNode = $(this);
                            let pf_name = $thisNode.attr('name');
                            if ($thisNode.is('select')) {


                                $thisNode.val(savedData[pf_name]).selectpicker('refresh');
                            }
                            else if ($thisNode.is('input')) {

                                if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                    $thisNode.prop('checked', savedData[pf_name]);
                                }
                                else {
                                    $thisNode.val(savedData[pf_name]);
                                }

                            }
                            else {
                                $thisNode.val(savedData[pf_name]);
                            }


                        });
                        debugger
                        //Fill Unit in Grid section
                        Fun_Stocktransfer_LoadUnit(this, savedData.ID_Unit);




                        $('#stockavailable').show();
                        $('#stockstandby').show();
                       // debugger;
                        Stock = $thisForm.find('[name="QuantityStandBy"]').val();
                        console.log(Stock, 'Stock');
                        StandbyQuantity = $thisForm.find('[name="StandbyQuantity"]').val();
                        //var prevQty = $thisForm.find('[name="Quantity"]').val();
                        //$thisForm.find('[name="PrevQuantity"]').val(prevQty);
                        
                    }
                },

                {

                    icon: "fa fa-trash btnPerfectGridDelete",
                    action: function () {
                        let $thistbl = $(this).closest('table');
                        let table = $thistbl.DataTable();
                        table.destroy();
                        if ($(this).closest('tbody').find('tr').length > 1) {
                            $(this).closest('tr').remove();
                            pft_table_slreset($thistbl);

                        }
                        else {
                            $('#employeefromid').attr("disabled", false);
                            $thistbl.remove();
                        }
                        $("#btnStockTransfer").click();
                        

                    }
                },
            ]
        },

        onlyShowColumn: [],
        hideColumn: ['Stock', 'StandbyQuantity', 'ID_Product', 'ID_Stock', 'ID_StockTransferDetails', 'StandbyQuantity'],
        serialNo: true,
        renameHeader: { CustomerData: "test nme", 'QuantityStandBy':'Stand by Quantity' },
        rowAttribute: [],
        isCheckType: []
    };

    var tableOptionsTempOut2 = {
        iconButton: {
            buttons: [
            
                {

                    icon: "fa fa-pencil btnPerfectGridEdit",

                    action: function () {

                        let savedData = $(this).closest('tr').data('pData')
                        console.log('', savedData);

                        getfunctionAssign(this);
                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let tableKey = $tablecontainer.attr('perfect-tempTable');
                        let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                        //index attribute name in table row
                        let indexname = tableKey + 'index';
                        //index number in table row
                        let rindex = $(this).closest('tr').attr(indexname);
                        $tablecontainer.attr('perfect-tempTable-action', rindex);

                        console.log('Editclick', savedData);
                        //filling data in available inputs
                        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                            let $thisNode = $(this);
                            let pf_name = $thisNode.attr('name');
                            if ($thisNode.is('select')) {

                                $thisNode.val(savedData[pf_name]).selectpicker('refresh');
                            }
                            else if ($thisNode.is('input')) {

                                if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                    $thisNode.prop('checked', savedData[pf_name]);
                                }
                                else {
                                    $thisNode.val(savedData[pf_name]);
                                }

                            }
                            else {
                                $thisNode.val(savedData[pf_name]);
                            }


                        });

                        $('#stockavailable').show();
                        $('#stockstandby').show();
                       // debugger;
                        Stock = $thisForm.find('[name="QuantityStandBy"]').val();

                        StandbyQuantity = $thisForm.find('[name="StandbyQuantity"]').val();
                        var PrevQty = $thisForm.find('[name="Quantity"]').val();
                       
                    }
                },

                {

                    icon: "fa fa-trash btnPerfectGridDelete",
                    action: function () {
                        let $thistbl = $(this).closest('table');
                        let table = $thistbl.DataTable();
                        table.destroy();
                        if ($(this).closest('tbody').find('tr').length > 1) {
                            $(this).closest('tr').remove();
                            pft_table_slreset($thistbl);
                             $thisForm.find('[name="DepartmentID"]').removeAttr("disabled", "disabled");
                        }
                        else {
                            $('#employeefromid').attr("disabled", false);

                            $thistbl.remove();
                        }
                        $("#btnStockTransfer").click();
                    }
                },
            ]
        },

        onlyShowColumn: [],
        hideColumn: ['Stock', 'StandbyQuantity', 'ID_Product', 'ID_Stock', 'StockMode', 'ID_StockTransferDetails', 'StandbyQuantity'],
        serialNo: true,
        renameHeader: { CustomerData: "test nme", 'QuantityStandBy': 'Stand by Quantity' },
        rowAttribute: [],
        isCheckType: []
    };

    function ComDetailsTable_Fill(ele, tkey, data, tableOptionsTempOut) {

        let $thisForm = $(ele)

        let tableOptionsTemp = tableOptionsTempOut;
        let insertData = []
        let tableKey = tkey;

        let indexname = tkey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);

        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');


        $.each(data, function (keyOne, valOne) {

            let pData = {};

            pData[indexname] = keyOne + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', pData[indexname])
            //---

            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');


                if (typeof valOne[nameAttr] !== undefined) {

                    if ($this.is('select')) {
                        switch (headerName) {
                            case "StockMode":
                                headerName = "Stock Mode";
                                break;
                            default:
                                break;
                        }
                        tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                        tableOptionsTemp.hideColumn.push(nameAttr);
                        pData[nameAttr + '_d'] = $this.find('[value="' + valOne[nameAttr] + '"]').text();
                        pData[nameAttr] = valOne[nameAttr];
                    }
                    else if ($this.is('input')) {

                        let inputType = $this.attr('type').toLocaleLowerCase();

                        if (inputType == 'checkbox') {

                            pData[nameAttr] = valOne[nameAttr];

                            tableOptionsTemp.isCheckType.push(nameAttr);

                            console.log('checkbox', nameAttr)


                        }
                        else if (inputType == 'hidden') {

                            tableOptionsTemp.hideColumn.push(nameAttr);
                            pData[nameAttr] = valOne[nameAttr];


                        }
                        else if (inputType == 'date') {


                            pData[nameAttr] = moment(valOne[nameAttr]).format('DD-MM-YYYY');


                        }
                        else {

                            pData[nameAttr] = valOne[nameAttr];


                        }
                    }
                    else {
                        pData[nameAttr] = valOne[nameAttr];


                    }

                     let Multiunitsettings = '@ViewBag.Multiunitsettings';
            //let hideColumn1 = tableOptionsTemp.hideColumn;
            //console.log('hideColumn', hideColumn1)
            //hideColumn1 = hideColumn1.filter(item => item != "ID_Unit_d");
            //console.log('hideColumn', hideColumn1)

            if (Multiunitsettings == "True") {
                //alert('true', Multiunitsettings)
                let hideColumn = tableOptionsTemp.hideColumn;
                console.log('hideColumn', hideColumn)
                hideColumn = hideColumn.filter(item => item != "ID_Unit_d");
                console.log('hideColumn', hideColumn)
                tableOptionsTemp.hideColumn = hideColumn;
            
            }
            else {
                let hideColumn = tableOptionsTemp.hideColumn;
                console.log('hideColumn', hideColumn)
                hideColumn = hideColumn.filter(item => item != "ID_Unit_d");
                console.log('hideColumn', hideColumn)
                hideColumn.push("ID_Unit_d");
                console.log('Multiunitsettings == "true"', hideColumn)
                tableOptionsTemp.hideColumn = hideColumn;
               
            }
        
                }



            });

            insertData.push(pData);
            console.log('insertdata', insertData)

            //----

        });

        $tblcontainer.append(pft_table_createtable(insertData, tableOptionsTemp));


    }
    function ComDetailsTable_Fills(ele, tkey, data, tableOptionsTempOut2) {

        let $thisForm = $(ele)

        let tableOptionsTemp = tableOptionsTempOut2;
        let insertData = []
        let tableKey = tkey;

        let indexname = tkey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);

        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');


        $.each(data, function (keyOne, valOne) {

            let pData = {};

            pData[indexname] = keyOne + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', pData[indexname])
            //---

            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');


                if (typeof valOne[nameAttr] !== undefined) {

                    if ($this.is('select')) {


                        tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                        tableOptionsTemp.hideColumn.push(nameAttr);
                        //displat text of select

                        let selectText = ($this.val().length == 0) ? '' : $this.find('[value="' + valOne[nameAttr] + '"]').text();

                        pData[nameAttr + '_d'] = selectText;
                        pData[nameAttr] = valOne[nameAttr];
                        console.log('select', $this.find('options[value="' + valOne[nameAttr] + '"]').text());
                        console.log('selectText', $this.find('[value="' + valOne[nameAttr] + '"]').text());



                    }
                    else if ($this.is('input')) {

                        let inputType = $this.attr('type').toLocaleLowerCase();

                        if (inputType == 'checkbox') {

                            pData[nameAttr] = valOne[nameAttr];

                            tableOptionsTemp.isCheckType.push(nameAttr);

                            console.log('checkbox', nameAttr)


                        }
                        else if (inputType == 'hidden') {

                            tableOptionsTemp.hideColumn.push(nameAttr);
                            pData[nameAttr] = valOne[nameAttr];


                        }
                        else if (inputType == 'date') {


                            pData[nameAttr] = moment(valOne[nameAttr]).format('DD-MM-YYYY');


                        }
                        else {

                            pData[nameAttr] = valOne[nameAttr];


                        }
                    }
                    else {
                        pData[nameAttr] = valOne[nameAttr];


                    }
                }



            });

            insertData.push(pData);
            console.log('insertdata', insertData)

            //----

        });

        $tblcontainer.append(pft_table_createtable(insertData, tableOptionsTemp));


    }

    function EmployeestocktransferDetailsTable_create(ele, tkey, uniq) {

        debugger
        console.log('ele', ele);
        console.log('tkey', tkey);
        console.log('uniq = []', uniq);

        let Quantitys = $('[name=Quantity]').val() == null || $('[name=Quantity]').val() == "" || $('[name=Quantity]').val() == undefined ? 0 : $('[name=Quantity]').val();

        $('[name=Quantity]').val(Quantitys);

        let QuantityStandBys = $('[name=QuantityStandBy]').val() == null || $('[name=QuantityStandBy]').val() == "" || $('[name=QuantityStandBy]').val() == undefined ? 0 : $('[name=QuantityStandBy]').val();
        $('[name=QuantityStandBy]').val(QuantityStandBys);

        console.log('Data', tkey);
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let tableKey = tkey;
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');

        let insertData = {};
        let tableOptionsTemp;
        tableOptionsTemp = tableOptionsTempOut;

         
        let unique = (uniq) ? uniq : [];

        let isValid = true;
        let ValueExist = false;
        // let QuantityCheck = false;
        let errorClass = '.temptableError';

        //make index
        console.log('check 1');

        let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
        let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
        let indexname = tkey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);
        let updateCond = '';
        let isNew = true;
        if (thisactionIndex > 0) {
            //means update
            insertData[indexname] = thisactionIndex;
            updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
            isNew = false;
        }
        else {
            //insert
            insertData[indexname] = lastIndex + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
            isNew = true;
        }

      




        if ($thisForm.find("[name='Quantity']").val() > 0 || $thisForm.find("[name='QuantityStandBy']").val() > 0) {
            ValueExist = true;
        }
    
 
        if ($thisForm.find("[name='ID_Product']").val() > 0) {
            $thisForm.find("[name='ID_Product']").closest('[perfect-class="formGroup"]').find(errorClass).text('');


        }
        else if ($thisForm.find("[name='ID_Product']").val() == "" || $thisForm.find("[name='ID_Product']").val() <= 0 || $thisForm.find("[name='ID_Product']").val() == undefined) {
            isValid = false;
            $thisForm.find("[name='ID_Product']").closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Product');
        }

        if ($thisForm.find("[name='StockMode']").val() > 0) {
            $thisForm.find("[name='StockMode']").closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }
        else if ($thisForm.find("[name='StockMode']").val() == "" || $thisForm.find("[name='StockMode']").val() <= 0 || $thisForm.find("[name='StockMode']").val() == undefined) {
            isValid = false;
            $thisForm.find("[name='StockMode']").closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Stock Mode');
        }
        
        if (ValueExist == false) {

            NotificationMessage({ 'type': 'error', 'heading': 'info', 'message': 'Please Enter Quantity Or  Stand By Quantity' });
        }

        else {

        }




        if (isValid == true && ValueExist == true) { }

        console.log('check 3');


        //---

        if (unique.length > 0) {
            //getting previous data
            let prevData = [];
            $tblcontainer.find('table > tbody').find('tr').each(function () {
                if (isNew) {
                    prevData.push($(this).data('pData'));
                }
                else {
                    if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                        prevData.push($(this).data('pData'));
                    }

                }

            })

            console.log('previous data', prevData);

            unique.forEach(function (key, i) {

                console.log('unid -> key:' + key + "| index :" + i);
                let $thisEle = $thisForm.find('[perfect-tempTable-' + tableKey + '="' + key + '"]');

                let headerEleName = $thisEle.attr('perfect-tempTable-' + tableKey);
                let atname = $thisEle.attr('name');
                let cvalue;


                if ($thisEle.length != 0) {
                    let $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
                   let errmessage = "Product Already exits"
                    //getting current value in cval


                    if ($thisEle.is('select')) {
                        if ($thisEle.val().length > 0) {
                            $errorElement.text('');
                        }
                    }





                    else if ($thisEle.is('input')) {

                        let inputEleType = $thisEle.attr('type').toLocaleLowerCase();

                        if (inputEleType == 'checkbox') { cvalue = $thisEle.is(':checked'); }
                        else if (inputEleType == 'hidden') { cvalue = $thisEle.val(); }
                        else { cvalue = $thisEle.val(); }
                    }
                    else { cvalue = $thisEle.val(); }


                    //if (prevData.find(a => a[atname] == cvalue)) {
                    //    // console.log('Search =>' + cvalue + '| attr :' + atname)
                    //    $errorElement.text(errmessage);
                    //    isValid = false;
                    //}
                }

            });


            //console.log('Multiunitsettings == "False"', tableOptionsTemp)


            let Multiunitsettings = '@ViewBag.Multiunitsettings';
            //let hideColumn1 = tableOptionsTemp.hideColumn;
            //console.log('hideColumn', hideColumn1)
            //hideColumn1 = hideColumn1.filter(item => item != "ID_Unit_d");
            //console.log('hideColumn', hideColumn1)

            if (Multiunitsettings == "True") {
           
                let hideColumn = tableOptionsTemp.hideColumn;
                console.log('hideColumn', hideColumn)
                hideColumn = hideColumn.filter(item => item != "ID_Unit_d");
                console.log('hideColumn', hideColumn)
                tableOptionsTemp.hideColumn = hideColumn;
            
            }
            else {
                let hideColumn = tableOptionsTemp.hideColumn;
                console.log('hideColumn', hideColumn)
                hideColumn = hideColumn.filter(item => item != "ID_Unit_d");
                console.log('hideColumn', hideColumn)
                hideColumn.push("ID_Unit_d");
                console.log('Multiunitsettings == "true"', hideColumn)
                tableOptionsTemp.hideColumn = hideColumn;
               
            }
        


            // console.log('check 4', ValueExist, isValid);

            if (isValid == true && ValueExist == true) {

                $thisForm.find("[name='ID_Product']").closest('[perfect-class="formGroup"]').find(errorClass).text('');
                $('#stockavailable').hide();
                $('#stockstandby').hide();

                console.log('check 4.1');
                // this section make table column data
                $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                    let $this = $(this);
                    let headerName = $this.attr('perfect-tempTable-' + tableKey);
                    let nameAttr = $this.attr('name');

                    if ($this.is('select')) {
                        switch (headerName) {
                            case "StockMode":
                                headerName = "Stock Mode";
                                break;
                            default:
                                break
                        }
                        tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                        tableOptionsTemp.hideColumn.push(nameAttr)

                        if ($this.val() != null) {
                            let selectText = ($this.val().length == 0) ? '' : $this.children(":selected").text();
                            insertData[nameAttr + '_d'] = selectText;
                        }
                        else {
                            let selectText = ($this.val() == null) ? '' : $this.children(":selected").text();
                            insertData[nameAttr + '_d'] = selectText;
                        }

                        insertData[nameAttr] = $this.val();



                        $this.val('').selectpicker('refresh');
                    }
                    else if ($this.is('input')) {

                        let inputType = $this.attr('type').toLocaleLowerCase();

                        if (inputType == 'checkbox') {

                            insertData[nameAttr] = $this.is(':checked');

                            tableOptionsTemp.isCheckType.push(nameAttr)

                            $this.prop('checked', false);

                        }
                        else if (inputType == 'hidden') {

                            tableOptionsTemp.hideColumn.push(nameAttr)
                            insertData[nameAttr] = $this.val();


                            $this.val('');
                        }
                        else if (inputType == 'date') {


                            insertData[nameAttr] = $this.val();


                            $this.val('');
                        }

                        else {
                            insertData[nameAttr] = $this.val();


                            $this.val('');
                        }
                    }

                    else {

                        insertData[nameAttr] = $this.val();


                        $this.val('');

                    }




                });
                console.log('check 4.2');
                if (isNew) {
                    console.log('check 4.2.1');

                    if ($tblcontainer.find('table').length == 0) {
                        console.log('check 4.2.3');
                        $tblcontainer.append(pft_table_createtable([insertData], tableOptionsTemp));

                    }
                    else {
                        console.log('check 4.2.1');
                        let table = $tblcontainer.find('table').DataTable()
                        table.destroy()
                        pft_table_addTableRow($tblcontainer.find('table'), insertData, tableOptionsTemp);


                    }



                    if (insertData[indexname] > 0) {


                        console.log('1234', insertData[indexname])
                        $thisForm.find('[name="DepartmentID"]').attr("disabled", "disabled");
                        $('#employeefromid').attr("disabled", true);

                    }
                    else {
                        $('#employeefromid').attr("disabled", false);
                        $thisForm.find('[name="DepartmentID"]').removeAttr("disabled", "disabled");
                    }


                    console.log('check 4.2.1');
                }
                else {
                    console.log('check 4.3');
                    let table = $tblcontainer.find('table').DataTable()
                    table.destroy()
                    console.log('check 4.4');
                    console.log('table', $tblcontainer.find('table'))
                    console.log('check 4.5');
                    pft_table_replaceTableRow($tblcontainer.find('table'), updateCond, insertData, tableOptionsTemp);



                }

                console.log(insertData);
                // resetting the edit value
                $tblcontainer.attr('perfect-tempTable-action', 0);
                //$thisForm.find('[name="ReqQuantity"]').val('');
            }

            console.log('check 5');
        }
    }

    function AddEmployeeStockTransfer(ele) {
       // debugger;
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        //console.log('> Add Unit form is valid', $thisForm.valid())

        let prevData = [];
        $thisForm.find('[perfect-tempTable="Opening"]').find('table > tbody').find('tr').each(function () {

            prevData.push($(this).data('pData'));

        })

        var branch = $thisForm.find('[name=BranchID]').val();
        var branchto = $thisForm.find('[name=BranchIDTo]').val() == "" ? "0" : $('[name="BranchIDTo"]').val();
        var department = $thisForm.find('[name=DepartmentID]').val() == "" ? "0" : $('[name="DepartmentID"]').val();
        var departmentto = $thisForm.find('[name=DepartmentIDTo]').val() == "" ? "0" : $('[name="DepartmentIDTo"]').val();
        var empfromid = $thisForm.find('[name=EmployeeID]').val() == "" ? "0" : $('[name="EmployeeID"]').val();
        var emptoid = $thisForm.find('[name=EmployeeIDTo]').val();



            if (branch == branchto && department == departmentto && empfromid == emptoid) {

                isValid = false;
            }


        else {


            isValid = true;
        }
        let checkvalid = true;
        if (department == "0" || branchto == "0" || departmentto == "0") {
            checkvalid = false;
        }
         let _ActionUrl = "";

        if ($thisForm.find('[name=ModeTR]').val().trim() == 1) {
            StockTransferID = 0;
                       _ActionUrl = "@Url.Action("AddNewEmployeeStocktransfer", "StockTransferRequest")";
                    }
        else if ($thisForm.find('[name=ModeTR]').val().trim() == 0) {
            StockTransferID = 0
                      _ActionUrl = "@Url.Action("AddNewEmployeeStocktransfer", "EmployeeStockTransfer")";
                    }
        //console.log("prevData", prevData)
        //StockMode_d: '', StockMode: undefined
        let isValidprv = isValid;
        $.each(prevData, function (key, value) {
            if (value.StockMode_d == "" || value.StockMode === undefined) {
                isValid = false;
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Please fill stock mode' });
                return false;
            }
        });


        //if (checkvalid) {
        if (reqdateCheck()) {
            if (isValid) {
                if (checkvalid) {

                    if ($thisForm.valid() && prevData.length != 0) {


                        $(ele).prop('disabled', true);
                        var inputData = {

                            __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                            TransDate: $thisForm.find('[name=TransDate]').val(),
                            ModeTR: $thisForm.find('[name=ModeTR]').val().trim(),
                            BranchID: $thisForm.find('[name=BranchID]').val().trim(),
                            DepartmentID: $thisForm.find('[name=DepartmentID]').val().trim(),

                            EmployeeID: $thisForm.find('[name=EmployeeID]').val().trim(),

                            BranchIDTo: $thisForm.find('[name=BranchIDTo]').val().trim(),
                            DepartmentIDTo: $thisForm.find('[name=DepartmentIDTo]').val().trim(),
                            LastID: LastID_StockTransfer,
                            EmployeeIDTo: $thisForm.find('[name=EmployeeIDTo]').val().trim(),
                            TransMode: '@ViewBag.TransMode',
                            FK_StockTransfer: $thisForm.find('[name=FK_StockTransfer]').val().trim(),
                            SubEmployeeStockTransfers: prevData


                        }


                        clearSessionValue(LastIDSessionKeyST);
                        $.ajax({
                            url: _ActionUrl,
                            type: "POST",

                            data: inputData,
                            dataType: "json",
                            contentType: "application/x-www-form-urlencoded; charset=utf-8",
                            success: function (data) {

                                if (data.Process.IsProcess) {

                                    $.each(data.Process.Message, function (key, value) {


                                        NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                                    });
                                    $thisForm.find('[perfect-ctype="select"]').val('').selectpicker('refresh');
                                    $thisForm.find('[perfect-ctype="input"]').val('');
                                    $thisForm.find('[perfect-ctype="date"]').val('');


                                    let onSuccess = $thisForm.attr('perfect-onFormSuccess')

                                    if (onSuccess) {
                                        window[onSuccess]();

                                    }
                                }
                                else {
                                    $.each(data.Process.Message, function (key, value) {
                                        NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                    });
                                }
                            },
                            complete: function () {
                                $(ele).prop('disabled', false);
                            }

                        });



                    }


                    else {


                        NotificationMessage({ 'type': 'error', 'heading': 'info', 'message': 'Please Fill all mandatory fields, Enter Atleast One Stock Transfer Details!!!' });
                    }

                }
                else {


                    NotificationMessage({ 'type': 'error', 'heading': 'info', 'message': 'Please select mandatory fields' });
                    $thisForm.find('[name="DepartmentID"]').removeAttr("disabled", "disabled");
                }


            }
            else {
                if (!isValidprv) {
                    NotificationMessage({ 'type': 'error', 'heading': 'info', 'message': 'Please fill mandatory fields , From  and To Details Should not be Same' });
                }

            }
        }
        else {
           // NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'TransDate should be greater than or equals to Requested Date.' })
        }






    }


    //update
    function updateEmployeeStockTransfer(ele) {
        debugger;
        let $thisForm = $(ele).closest('[perfect-class="form"]');


            let prevData = [];
            $thisForm.find('[perfect-tempTable="Opening"]').find('table > tbody').find('tr').each(function () {

                    prevData.push($(this).data('pData'));

        })

        var branch = $thisForm.find('[name=BranchID]').val();
        var branchto = $thisForm.find('[name=BranchIDTo]').val() == "" ? "0" : $('[name="BranchIDTo"]').val();
        var department = $thisForm.find('[name=DepartmentID]').val() == "" ? "0" : $('[name="DepartmentID"]').val();
        var departmentto = $thisForm.find('[name=DepartmentIDTo]').val() == "" ? "0" : $('[name="DepartmentIDTo"]').val();
        var empfromid = $thisForm.find('[name=EmployeeID]').val() == "" ? "0" : $('[name="EmployeeID"]').val();
        var emptoid = $thisForm.find('[name=EmployeeIDTo]').val();


        if (branch == branchto && department == departmentto && empfromid == emptoid) {

            isValid = false;
        }

        else {
            isValid = true;
        }

        let checkvalid = true;
        if (department == "0" || branchto == "0" || departmentto == "0") {
            checkvalid = false;
        }

         let _ActionUrl = "";

        if ($thisForm.find('[name=ModeTR]').val().trim() == 1) {
            StockTransferID = 0;

             _ActionUrl = "@Url.Action("UpdateStocktransfer", "StockTransferRequest")";

                    }
        else if ($thisForm.find('[name=ModeTR]').val().trim() == 0) {

            StockTransferID = 0
             _ActionUrl = "@Url.Action("UpdateStocktransfer", "EmployeeStockTransfer")";

                    }
        if (reqdateCheck()) {
            if (isValid) {
                if (checkvalid) {
                    if ($thisForm.valid() && prevData.length != 0) {

                        $(ele).prop('disabled', true);

                        console.log("prevData >", prevData)
                        let pdata = $thisForm.data('pData');

                        var inputData = {
                            __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),

                            StockTransferID: pdata.StockTransferID,
                            TransDate: $thisForm.find('[name=TransDate]').val(),
                            ModeTR: $thisForm.find('[name=ModeTR]').val().trim(),
                            BranchID: $thisForm.find('[name=BranchID]').val().trim(),
                            DepartmentID: $thisForm.find('[name=DepartmentID]').val().trim(),

                            EmployeeID: $thisForm.find('[name=EmployeeID]').val().trim(),
                            FK_StockTransfer: $thisForm.find('[name=FK_StockTransfer]').val().trim(),
                            BranchIDTo: $thisForm.find('[name=BranchIDTo]').val().trim(),
                            DepartmentIDTo: $thisForm.find('[name=DepartmentIDTo]').val().trim(),
                            LastID: LastID_StockTransfer,
                            EmployeeIDTo: $thisForm.find('[name=EmployeeIDTo]').val().trim(),
                            TransMode: '@ViewBag.TransMode',

                            SubEmployeeStockTransfers: prevData
                        }
                        clearSessionValue(LastIDSessionKeyST);



                        $.ajax({

                            url: _ActionUrl,
                            type: "POST",

                            data: inputData,
                            dataType: "json",
                            contentType: 'application/x-www-form-urlencoded;charset=utf-8',
                            success: function (data) {

                                if (data.Process.IsProcess) {

                                    $.each(data.Process.Message, function (key, value) {

                                        NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                                    });
                                    $thisForm.find('[perfect-ctype="select"]').val('').selectpicker('refresh');
                                    $thisForm.find('[perfect-ctype="input"]').val('');
                                    $thisForm.find('[perfect-ctype="date"]').val('');


                                    let onSuccess = $thisForm.attr('perfect-onFormSuccess')

                                    if (onSuccess) {
                                        window[onSuccess]();
                                        $('#stockavailable').show();
                                        $('#stockstandby').show();

                                    }

                                    //---------- Do stuff if success
                                    // loadUnitList();
                                    // console.log('> Add new post success data', data);
                                }
                                else {
                                    $.each(data.Process.Message, function (key, value) {
                                        //toastr.warning(value, "Error");
                                        NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                    });
                                }
                            },
                            complete: function () {
                                $(ele).prop('disabled', false);
                            }

                        });



                    }

                    else {

                        NotificationMessage({ 'type': 'error', 'heading': 'info', 'message': 'Please Fill all mandatory fields, Enter Atleast One Stock Transfer Details!!!' });
                    }


                }
                else {


                    NotificationMessage({ 'type': 'error', 'heading': 'info', 'message': 'Please select mandatory fields' });
                }


            }
            else {


                NotificationMessage({ 'type': 'error', 'heading': 'info', 'message': 'Please fill mandatory fields , From  and To Details Should not be Same' });
            }
        }

    }




     function Getdepartmentdefault() {
         let $thisForm = $('[perfect-class="form"]');
         $.ajax({
             url: '@Url.Action("GetEmployeeLeadDefault", "LeadGeneration")',
             type: "Get",
             dataType: "json",
             contentType: "application/json",
             success: function (ajaxOutput) {//<----- if ajax method executed succesfully,  we get the data passed from controller in this variable  => success: function (variable) {

                 if (ajaxOutput.Process.IsProcess) {

                     $.each(ajaxOutput.Data, function (key, value) {

                         console.log('>_ Search button > list click', value);


                         $thisForm.find('[name=BranchID]').val(value.ID_Branch).selectpicker('refresh');
                         $thisForm.find('[name=DepartmentID]').val(value.FK_Department).selectpicker('refresh');


                     });




                 }
                 else {
                     $.each(ajaxOutput.Process.Message, function (key, value) {
                         NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                     });
                 }

             },


         });


    }


    function fn_checkStock(ele) {

        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let qty = parseFloat($thisForm.find('[name="Quantity"]').val()) || 0;
        let ctstock = parseFloat($thisForm.find('[name="Stock"]').val()) || 0;
        let prid = $thisForm.find('[name="ID_Product"]').val();
        //let PrevQty = parseFloat($thisForm.find('[name="ReqQuantity"]').val()) || 0;
        let ID_StockTransferDetails = parseFloat($thisForm.find('[name="ID_StockTransferDetails"]').val()) || 0;
        let stockmode = $thisForm.find('[name=StockMode]').val();
        if (prid == 0 || prid == "") {
            NotificationMessage({ 'type': 'error', 'heading': 'info', 'message': 'Please Select Product' })
            $('[name=Quantity]').val('');
        }
        else if (stockmode == 1)
        {
                         if (qty <= ctstock) {
                            //if (ID_StockTransferDetails > 0) 
                            //    {
                            //        if (qty <= PrevQty) {
                            //            isValid = true;
                            //            return true;
                            //        }
                            //        else {
                            //            NotificationMessage({ 'type': 'error', 'heading': 'info', 'message': 'Enter quantity less than or equal to Request Quantity.' })
                            //            $('[name=Quantity]').val('');
                            //            isValid = false;
                            //            return false
                            //        }
                            //}
                            isValid = true;
                            return true;
            
                        }

                        else {
                            NotificationMessage({ 'type': 'error', 'heading': 'info', 'message': 'Enter quantity less than or equal to Current Stock.' })
                            $('[name=Quantity]').val('');
                            isValid = false;
                            return false


                        }
        }
    }


    function fn_checkStockStnd(ele) {

        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let stqty = parseFloat($thisForm.find('[name="QuantityStandBy"]').val()) || 0;
        let StandbyStock = parseFloat($thisForm.find('[name="StandbyQuantity"]').val()) || 0;
           
        //let StandbyQuantity = parseFloat($thisForm.find('[name="ReqQtyStandBy"]').val()) || 0;
        let prid = $thisForm.find('[name="ID_Product"]').val();
        let ID_StockTransferDetails = parseFloat($thisForm.find('[name="ID_StockTransferDetails"]').val()) || 0;
        let stockmode = $thisForm.find('[name=StockMode]').val();

        if (prid == 0 || prid == "") {
            NotificationMessage({ 'type': 'error', 'heading': 'info', 'message': 'Please Select Product' })
            $('[name=QuantityStandBy]').val('');
        }
        else if (stockmode == 1)
        {
            if (stqty <= StandbyStock) {
                        //if (ID_StockTransferDetails > 0) {
                        //        if (stqty <= StandbyQuantity) {
                        //            isValid = true;
                        //            return true;

                        //        }
                        //        else {
                        //            NotificationMessage({ 'type': 'error', 'heading': 'info', 'message': 'Enter Stand By Quantity less than or equal to Request Stand By Quantity.' })
                        //            $('[name=QuantityStandBy]').val('');
                        //            isValid = false;
                        //            return false
                        //        }
                        //}
                        isValid = true;
                        return true;
                    }
                    else {
                        NotificationMessage({ 'type': 'error', 'heading': 'info', 'message': 'Enter Stand By Quantity less than or equal to Stand By Stock.' })
                        $('[name=QuantityStandBy]').val('');
                        isValid = false;
                        return false


                    }

        }
    }
    function reqdateCheck() {

        let $thisForm = $('[perfect-class="form"]');
        let ReqDate = $thisForm.find('[name="RequestDate"]').val();
        let TransDate = $thisForm.find('[name="TransDate"]').val();

        ReqDate = new Date(ReqDate);
        ReqDate.setHours(0, 0, 0, 0)


        let today = new Date();
        today.setHours(0, 0, 0, 0);

        TransDate = new Date(TransDate);
        TransDate.setHours(0, 0, 0, 0);


        if (ReqDate != "") {

            if (TransDate < ReqDate) {

                NotificationMessage({'type':'error','heading':'Error','message':'TransDate should be greater than or equals to Requested Date.'})

                return false;

            }
            else {

                //$thisForm.find('[name="SalEnterDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('');
                return true;
            }
        }



    }

   function Fun_Stocktransfer_LoadUnit(ele, UnitID) {
        debugger;
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let $dropdown = $thisForm.find('[name="ID_Unit"]');
        $dropdown.empty();
        //$dropdown.append($('<option/>', { value: '' }).text('Please select')).selectpicker('refresh');
            let inputData = {
                __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                //'TransMode': SalesReturnTransMode,
                'TransMode': '@ViewBag.TransMode',
                'ProductID': $thisForm.find('[name="ID_Product"]').val(),
                'FK_Transaction':0
            };

            $.ajax({
                url: "@Url.Action("GetStockTransferUnit", "EmployeeStockTransfer")",
                type: "POST",
                data: inputData,
                dataType: "json",
                contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                success: function (ajaxOutput) {

                    console.log('ajaxOutputdata>>>>', ajaxOutput);
                    debugger;
                   
                    if (ajaxOutput.Process.IsProcess) {
                     
                      
                       
                        $.each(ajaxOutput.Data, function (key, value) {
                            $dropdown.append($('<option/>', { "value": value.ID_Unit, "data-UnitCountS": value.UnitCount }).text(value.UnitName)).selectpicker('refresh')
                        });
                        if (UnitID > 0)
                            $dropdown.find('[name="ID_Unit"]').val(ID_Unit).selectpicker('refresh');
                        else
                            $dropdown.find('[name="ID_Unit"]').val(ajaxOutput.Data[0].ID_Unit).selectpicker('refresh');
                        $dropdown.find('[name="ID_Unit"]').attr('UnitCountS', ajaxOutput.Data[0].UnitCount);
                       



                        }


                },
                complete: function () {

                }

            });

    }
    
</script>