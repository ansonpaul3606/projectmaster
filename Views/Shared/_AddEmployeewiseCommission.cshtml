<style>
    #divCusDetails > div.card-body > table > tbody > tr {
        color: black;

    }
        #divCusDetails > div.card-body > table > tbody > tr > td:nth-child(2) {
            text-align: right;
        }
    /*.right-align {
        display: inline-block;
        text-align: right;
    }*/
    .tooltip {
        /*position: relative;
        display: inline-block;*/
    }

    .tooltip .tooltiptext {
        visibility: hidden;
        width: auto;
        background-color: #333;
        color: #fff;
        text-align: center;
        border-radius: 5px;
        padding: 5px;
        position: absolute;
        z-index: 1;
        top: 100%;
        left: 50%;
        transform: translateX(-50%);
        opacity: 0;
        transition: opacity 0.3s;
    }

    .tooltip:hover .tooltiptext {
        visibility: visible;
        opacity: 1;
    }
    #Amountinwrdstxt {
        font-weight: bold;
        font-size: 1.3rem;
    }

</style>




<div class="card">
    <div class="card-header">
        @*<h4 class="card-title col-12">@ViewBag.PageTitle</h4>*@
        <h4 class="card-title col-12">Employee Wise Commission Payment</h4>
        <span title="To View List" onclick="fn_showListView();"><svg id="Layer_1" class="layer" stroke="currentColor" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" height="20" width="20" viewBox="0 0 122.88 122.54"><title>To View List</title><path class="viewlst" d="M4.69,0H46.22a4.71,4.71,0,0,1,4.69,4.69V46a4.69,4.69,0,0,1-4.69,4.69H4.69a4.65,4.65,0,0,1-3.31-1.38l-.09-.09A4.67,4.67,0,0,1,0,46V4.69A4.71,4.71,0,0,1,4.69,0ZM89.44,61.94a26.56,26.56,0,0,1,10.18,2l.07,0a26.61,26.61,0,0,1,15.25,32.16,26.18,26.18,0,0,1-2.7,6.11l10.3,11.24a1.27,1.27,0,0,1-.07,1.8l-7.57,6.9a1.27,1.27,0,0,1-1.79-.07l-9.86-10.85a26.36,26.36,0,0,1-6.1,2.74,26.87,26.87,0,0,1-7.71,1.13,26.51,26.51,0,0,1-10.17-2l-.07,0A26.64,26.64,0,0,1,64.85,78.37l0-.07A26.6,26.6,0,0,1,89.44,61.94Zm15,11.59a21.38,21.38,0,0,0-6.89-4.61l-.06,0a21.22,21.22,0,0,0-23.07,4.64l-.07.07a21.25,21.25,0,0,0-4.54,6.83l0,.06a21.32,21.32,0,0,0-1.58,8.06,21.26,21.26,0,0,0,29.35,19.62,21.54,21.54,0,0,0,6.89-4.61l.07-.07a21.09,21.09,0,0,0,4.54-6.83l0-.06a21.35,21.35,0,0,0,0-16.17,21.34,21.34,0,0,0-4.62-6.9ZM4.69,63.2H46.22a4.71,4.71,0,0,1,4.69,4.7v41.34a4.68,4.68,0,0,1-4.69,4.69H4.69A4.69,4.69,0,0,1,0,109.24V67.9a4.71,4.71,0,0,1,4.69-4.7ZM68.78,0h41.53A4.71,4.71,0,0,1,115,4.69V46a4.71,4.71,0,0,1-4.69,4.69H68.78A4.71,4.71,0,0,1,64.09,46V4.69a4.69,4.69,0,0,1,1.37-3.31l.1-.09A4.67,4.67,0,0,1,68.78,0Z"></path></svg></span>
    </div>
    <div class="card-body">
        <form id="" class="form-valide" perfect-class="form" action="#" method="post" perfect-onFormSuccess="">
            <div class="row">
                <div class="col-9">
                    @Html.AntiForgeryToken()
                    <div class="row">

                        <div class="col-sm-4">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    <span perfect-class="formGroupLabel">Trans Date</span>
                                    <span class="text-danger">*</span>
                                </label>
                                <div class="col-sm-8">
                                    <input type="date" class="form-control perfectValidate_date" name="TransDate" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" />
                                    <input type="hidden" name="ID_AuthorizationLevel" />
                                </div>
                            </div>
                        </div>

                        <div class="col-sm-4">
                            <div class="form-group row " perfect-class="formGroup">

                                <label class="col-sm-4 col-form-label" title="Balance Amount Up to this date">
                                    <span perfect-class="formGroupLabel tooltip">Up to Date</span>
                                    <span class="text-danger">*</span>
                                    @*<span class="tooltiptext">Tooltip text</span>*@
                                </label>


                                <div class="col-sm-8 ">
                                    <input type="date" class="form-control perfectValidate_date" name="UptoDate" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" onchange="BringPaymentdata(this)" />
                                    <input type="hidden" name="ID_AuthorizationLevel" />
                                </div>



                            </div>
                            @*<span class="tooltiptext">This is a tooltip</span>*@
                        </div>



                        <div class="col-sm-4 DivEmployeeName">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">

                                    <span perfect-class="formGroupLabel">Employee</span>
                                    <span class="text-danger">*</span>
                                </label>

                                <div class="col-sm-8">
                                    <div class="input-group">
                                        <input type="text" class="form-control " name="Employee" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled />
                                        <input type="hidden" id="EmployeeID" name="EmployeeID" class="perfectValidate_numeric_nm" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" required   onchange="onChangeEmployee()"/>
                                        <div class="input-group-append">
                                            @*<button id="addemployee-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="getEmployeeDepartmentlist(this)" Criterea1="0" Criterea2="0" BindName="FromName" BindVal="FromNameID"></button>*@

                                            <button id="employeefromid" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchValAssign(this,117,'Employee List',['',''],['FK_Department'])" Criterea1="0" Criterea2="0" BindName="Employee" BindVal="EmployeeID" Criterea3="" Function="1"></button>


                                        </div>
                                    </div>

                                </div>
                            </div>
                        </div>







                        <div class="col-sm-4">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    <span perfect-class="formGroupLabel">Current Payable</span>
                                    <span class="text-danger">*</span>
                                </label>
                                <div class="col-sm-8">
                                    <div class="input-group">
                                        <input type="text" min="1" maxlength="12" class="form-control text-right" name="ct_Amount" id="ct_Amount1" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" onchange="onChangeAmount(this)" required oninput="decimalpnt(this,'ct_Amount1',3)" />

                                    </div>
                                    <span class="temptableError"></span>
                                </div>

                            </div>
                        </div>

                        

                        <div class="col-sm-4">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                   
                                    <span perfect-class="formGroupLabel">Payment Method</span>
                                    <span class="text-danger">*</span>
                                </label>
                                <div class="col-sm-5">
                                    <div class="input-group">

                                        <div class="input-group-append">
                                            &nbsp;<button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-money" type="button" perfect-css="button" title="Add Payment Method" onclick="GetPaymentlists(this)"></button>

                                        </div>
                                    </div>

                                </div>
                            </div>
                        </div>
                       

                    </div>

                    <p id="Amountinwrdstxt"></p>

                </div>


                <div class="col-3">
                    <div class="row">
                        <div class="col-sm-12">
                            <div class="cardEMICollection" id="divCusDetails">
                                <div class="card-header bg-primary text-white text-center">
                                    Payment Information
                                </div>
                                <div class="card-body" style="padding: 0rem">
                                    <table class="table table-bordered">
                                        <tbody>
                                            <tr>
                                                <td>Total Paid</td>
                                                <td> <span id="TotalPaid" name="TotalPaid"></span></td>
                                            </tr>
                                            <tr>
                                                <td>Payable</td>
                                                <td><span id="Payable" name="Payable"></span></td>
                                            </tr>
                                            <tr>
                                                <td>Balance Amount</td>
                                                <td><span id="BalanceAmount" name="BalanceAmount"></span></td>
                                            </tr>
                                          
                                        </tbody>
                                    </table>
                                </div>
                                @*<div class="card-footer" style="padding: 0;">
                        </div>*@
                            </div>
                            @*<br />*@

                        </div>
                    </div>
                </div>

            </div>
            



            <div class="modal fade" perfect-class="formGroupModalpayment" id="formGroupModalpayment">
                <div class="modal-dialog  modal-dialog-centered modal-md" role="document">
                    <div class="modal-content">
                        <div class="modal-header border-0">
                            <h5 class="modal-title">Payment Method</h5>
                            <button type="button" class="close" data-dismiss="modal">
                                <span>&times;</span>
                            </button>
                        </div>
                        <div class="modal-body" perfect-class="formGroup" style="max-height: calc(100vh - 200px); overflow-y: auto;padding: 1rem;">
                            <div class="row">


                                <div class="col-sm-12">
                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-4 col-form-label">Method <span class="text-danger">*</span></label>
                                        <div class="col-sm-8">
                                            <div class="input-group">
                                                <select class="form-control" perfect-tempTable-Payment="PaymentMethod" name="PaymentMethod" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" >
                                                    <option value="">Please Select </option>


                                                    @if (!(Model.PaymentView is null))
                                                    {
                                                        foreach (var Module in Model.PaymentView)
                                                        {
                                                            <option value="@Module.PaymentmethodID">@Module.Name</option>
                                                        }
                                                    }
                                                </select>


                                            </div>
                                            <div class="text-danger temptableError"></div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-12">
                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-4 col-form-label">
                                            <span perfect-class="formGroupLabel">Ref No.</span>

                                        </label>
                                        <div class="col-sm-8">

                                            <div class="input-group">
                                                <input type="text" class="form-control perfectValidate_string_nm" perfect-tempTable-Payment="Refno" name="Refno" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" maxlength="250" />

                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="col-sm-12">
                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-4 col-form-label">
                                            <span perfect-class="formGroupLabel">Amount</span>
                                            <span class="text-danger">*</span>
                                        </label>
                                        <div class="col-sm-8">
                                            <div class="input-group">
                                                <input type="text" class="form-control text-right " perfect-tempTable-Payment="PAmount" id="PAmount" name="PAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="decimalpnt(this,'PAmount',3)" onchange="Pamount(this)" maxlength="12"  />

                                            </div>
                                            <div class="text-danger temptableError"></div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-9">


                                </div>
                                <div class="col-sm-3 text-right">
                                    <div class="input-group">

                                        <div class="input-group-append">
                                            <div>
                                                <button type="button" class="btn btn-primary1 " onclick="createtable(this,'Payment',['PaymentMethod'],paytableOptionsTempOut)"><i class="fa fa-plus" aria-hidden="true"></i></button>
                                                <button class="btn btn-light1" type="button" onclick="productclear(this, 'Payment')"><i class="fa fa-refresh" aria-hidden="true"></i></button>
                                            </div>
                                        </div>
                                    </div>

                                </div>
                                <div class="col-sm-12">
                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-4 col-form-label">
                                            <span perfect-class="formGroupLabel" style="font-weight:500;">Bal. Amount :</span>

                                        </label>
                                        <div class="col-sm-8">
                                            <div class="input-group">

                                                <label class="col-form-label">
                                                    <span perfect-class="formGroupLabel" style="font-weight:500;" name="BalAmt" ></span>
                                                </label>
                                                @*<input type="text" class="form-control" perfect-temptable-payment="BalAmt" name="BalAmt" perfect-class="" perfect-ctype="input" perfect-css="input" readonly="" style="border:white;background:white;font-weight: 500;">*@
                                            </div>
                                        </div>
                                    </div>
                                </div>


                                <div class="col-sm-12">
                                    <div class="form-group row" perfect-class="formGroup">

                                        <div class="table-responsive" perfect-tempTable-Payment="" perfect-tempTable="Payment" id="Paymentdethead" perfect-tempTable-lastindex="0" perfect-tempTable-action="0"></div>
                                        <div class="text-danger temptableError"></div>

                                    </div>
                                </div>


                            </div>
                            <div class="modal-footer">
                                @*<button type="button" onclick="CreateProductCheckDescription(this);" class="btn btn-primary">Add</button>*@
                                <button type="button" class="btn btn-primary light" onclick="Billttlnetchck(this)">Apply</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            @*<div class="card-footer text-right" perfect-class="formFooter">

            @if (ViewBag.PagedAccessRights.UsrrlMsEdt)
            {
                <button id="" type="button" class="btn btn-primary mr-3 addcompany-jq-addnewuserUpdate d-none" name="update" perfect-css="button" onclick="fn_UpdateAuthorizationlevel(this,'update')"><i class="fa fa-refresh fa-spin loaderClass"></i>Update</button>
            }
            @if (ViewBag.PagedAccessRights.UsrrlMsAdd)
            {
                <button id="addcompany-jq-addnewuser" type="button" class="btn btn-primary mr-3 " name="add" perfect-css="button" onclick="fn_UpdateAuthorizationlevel(this,'new')"><i class="fa fa-refresh fa-spin loaderClass "></i>Save</button>
            }
            <button type="button" class="btn btn-light" perfect-css="button" onclick="fn_resetAuthorizationlevel(this)" name="reset">Clear</button>
        </div>*@

            <div class="card-footer text-right" perfect-class="formFooter">

                <button id="" type="button" class="btn btn-primary mr-3 addcompany-jq-addnewuserUpdate d-none" name="update" perfect-css="button" onclick="fn_UpdateCustomerServiceRegister(this)"><i class="fa fa-refresh fa-spin  loaderClass"></i>Update</button>
                <button id="addcompany-jq-addnewuser" type="button" class="btn btn-primary mr-3 " name="add" perfect-css="button" onclick="SaveData(this)" data-target=".bd-example-modal-lg"><i class="fa fa-refresh fa-spin loaderClass "></i>Save</button>
                <button type="button" class="btn btn-light" perfect-css="button" onclick="ResetButton(this)" id="reset" name="reset">Clear</button>
            </div>
        </form>
    </div>

</div>
<script>
    function GetPaymentlists(ele) {
        $('#formGroupModalpayment').modal({ backdrop: 'static', keyboard: false })

        $('#formGroupModalpayment').modal('show');

    }
    function Billttlnetchck(ele) {
        //debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');


        ////$thisForm.find('[name=BalAmt]').text(10);  //test line

        let balamt = $thisForm.find('[name=BalAmt]').text();

        let totalAmount = $('#Paymentdethead');

        if (parseFloat(balamt) == 0) {
            $('#formGroupModalpayment').modal('hide');
            $thisForm.find('[perfect-tempTable="Payment"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
        }
        else {

            $thisForm.find('[perfect-tempTable="Payment"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('Balance Amt. should be Zero');

        }
    }
    function BillAmountbind(ele) {
        //debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let netamt = $thisForm.find('[name="ct_Amount"]').val() == "" ? "0" : $thisForm.find('[name="ct_Amount"]').val();
        let billamt = 0;
        let bilamt = 0;

        if ($thisForm.find('[name=BalAmt]').text() == '') {
            bilamt = 0;
        }
        else {
           // $(element).prop('disabled', false);
            bilamt = netamt;
        }

        $('#Paymentdethead').find('tbody tr').each(function (index, ele) {
            billamt += parseFloat($(ele).find('.PAmount').text());

        });
        bilamt = parseFloat(bilamt) - billamt;

        $thisForm.find('[name=BalAmt]').text(bilamt.toFixed(2));
        if (bilamt == 0) {

            return true;

        }
        else {

            return false;

        }
    }
    function SaveData(els) {
        let $thisForm = $(els).closest('[perfect-class="form"]');
        debugger
        if ($thisForm.valid() && customValidation()) {
       // if ($thisForm.valid() ) {
            //alert('validation success')
            let _ActionUrl = "@Url.Action("SaveEmployeeCommisiondata", "EmployeeWiseCommission")";
            let paymentdetails = [];
            $thisForm.find('[perfect-tempTable="Payment"]').find('tbody').find('tr').each(function () {
                paymentdetails.push($(this).data('pData'));
            });
            let inputData = {
                __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                paymentdetails: paymentdetails,
                FK_Employee: $('input[name="EmployeeID"]').val(),
                UptoDate: $('input[name="UptoDate"]').val(),
                TransDate: $('input[name="TransDate"]').val()
               

            };

            $.ajax({
                url: "@Url.Action("SaveEmployeeCommisiondata", "EmployeeWiseCommission")",
                type: "POST",
                data: inputData,
                dataType: "json",
                contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                success: function (ajaxOutput) {
                    console.log(ajaxOutput, 'ajaxOutput ...>>ln369')
                    //debugger
                    if (ajaxOutput.IsProcess) {
                        $.each(ajaxOutput.Message, function (key, value) {
                            NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': 'Saved Successfully' });
                            //$(element).prop('disabled', false);
                            fn_Employee_wise_commision()
                        });
                        
                    }
                    else {
                        $.each(ajaxOutput.Message, function (key, value) {
                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                            //$(element).prop('disabled', false);
                            fn_Employee_wise_commision();
                        });
                      
                    }

                    $thisForm.find('[perfect-ctype="select"]').val('').selectpicker('refresh');
                    $thisForm.find('[perfect-ctype="input"]').val('');
                    $thisForm.find('[perfect-ctype="date"]').val('');
                    let onSuccess = $thisForm.attr('perfect-onFormSuccess')
                    //if (onSuccess) {
                    //    window[onSuccess]();

                    //}
                },
                complete: function () {
                    //$(element).prop('disabled', false);
                }
            });
        } else {
            //Validation failed 
           // alert('validation failed')

        }

    }
    
    function createtable(ele, tkey, uniq = [], tableOptionsTempOut) {
        //debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let tableKey = tkey;
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');

        let insertData = {};
        let tableOptionsTemp = tableOptionsTempOut;

        let unique = (uniq) ? uniq : [];

        let isValid = true;
        let errorClass = '.temptableError';

        //make index
        let StockId = $('[name="StockId"]').val();

        let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
        let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
        let indexname = tkey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);

        let updateCond = '';
        let isNew = true;

        if (thisactionIndex > 0) {
            //means update
            insertData[indexname] = thisactionIndex;
            updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
            isNew = false;
        }
        else {
            //insert
            insertData[indexname] = lastIndex + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
            isNew = true;
        }
        //
        if (tableKey == 'Warranty') {

            isValid = validwartdetail(ele, tableKey, errorClass, isValid);
        }
        else if (tableKey == 'Payment') {
            isValid = validpaymntdetail(ele, tableKey, errorClass, isValid);
        }
        else if (tableKey == 'Purchase') {
            isValid = validsaledetail(ele, tableKey, errorClass, isValid);
        }

        if (unique.length > 0) {
            //getting previous data
            let prevData = [];
            $tblcontainer.find('table > tbody').find('tr').each(function () {
                if (isNew) {
                    prevData.push($(this).data('pData'));
                }
                else {
                    if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                        prevData.push($(this).data('pData'));
                    }

                }

            })


            unique.forEach(function (key, i) {

                let $thisEle = $thisForm.find('[perfect-tempTable-' + tableKey + '="' + key + '"]');
                // let headerEleName = $thisForm.find('[name="lblProName"]').text();
                let atname = $thisEle.attr('name');
                let cvalue;

                if ($thisEle.length != 0) {

                    let $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
                    //*existency customized only for sales page
                    let errmessage = "";
                    if (key == "StockId") {
                        errmessage = "Product Already exists"
                    }
                    else {
                        errmessage = key + " Already exists"
                    }
                    //*existency customized only for sales page

                    //getting current value in cval
                    if ($thisEle.is('select')) {
                        cvalue = $thisEle.val();

                    }
                    else if ($thisEle.is('input')) {

                        let inputEleType = $thisEle.attr('type').toLocaleLowerCase();
                        if (inputEleType == 'checkbox') { cvalue = $thisEle.is(':checked'); }
                        else if (inputEleType == 'hidden') {
                            cvalue = $thisEle.val(); console.log('cvalue ->', cvalue);


                        }
                        else { cvalue = $thisEle.val(); }
                    }
                    else { cvalue = $thisEle.val(); }



                    //searching in previous data
                    if (prevData.find(a => a[atname] == cvalue)) {
                        // console.log('Search =>' + cvalue + '| attr :' + atname)
                        $errorElement.text(errmessage);
                        isValid = false;
                    }
                }
            });

        }



        if (isValid) {

            if (tableKey == 'Purchase') {
                Warrantyadd(this);
                BindWarrantyAmount(ele)
            }


            // this section make table column data
            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');



                if ($this.is('select')) {

                    //tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                    tableOptionsTemp.hideColumn.push(nameAttr)
                    //displat text of select
                    if ($this.val() != null) {
                        let selectText = ($this.val().length == 0) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    else {
                        let selectText = ($this.val() == null) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    //tableOptionsTemp.onlyShowColumn.push(nameAttr + '_d')
                    insertData[nameAttr] = $this.val();
                    //insertData[nameAttr] = $this.val();

                    $this.val('').selectpicker('refresh');


                }
                else if ($this.is('input')) {

                    insertData[nameAttr] = $this.val();

                    if (nameAttr == "prodtid") { }
                    else if (nameAttr == "stkid") { }
                    else {
                        $this.val('');
                    }
                }
                else {
                    insertData[nameAttr] = $this.val();

                    $this.val('');
                }

            });

            if (isNew) {

                //this section nake table.table row
                if ($tblcontainer.find('table').length == 0) {

                    $tblcontainer.append(pft_table_createtable([insertData], tableOptionsTemp));

                    //  $tblcontainer.find('table').dataTable({ paging: false, ordering: false });
                }
                else {

                    let table = $tblcontainer.find('table').DataTable()
                    table.destroy()
                    pft_table_addTableRow($tblcontainer.find('table'), insertData, tableOptionsTemp);


                }

            }
            else {

                let table = $tblcontainer.find('table').DataTable()
                table.destroy()

                pft_table_replaceTableRow($tblcontainer.find('table'), updateCond, insertData, tableOptionsTemp);

            }



            // resetting the edit value
            $tblcontainer.attr('perfect-tempTable-action', 0);

            if (tableKey == 'Warranty') {

                BindWarrantyAmount(ele);
            }
            else if (tableKey == 'Payment') {
                BillAmountbind(ele);
            }
            else if (tableKey == 'Purchase') {
                $thisForm.find('[name=prdbtn]').removeAttr("disabled", "disabled")

                $thisForm.data({ pwarranty: warrantydetails });

                $thisForm.data({ addpImageselect: $thisForm.data('pImageselect') });

                BindBilldetails(ele);
                checkemi(this);

                if (productSerialNumTemp != null) {
                    console.log('productSerialNum ADDED OLD>', productSerialNum);

                    productSerialNum = productSerialNum.filter(obj => obj.FK_MasterID.toString() !== StockId.toString());
                    productSerialNumTemp = productSerialNumTemp.filter(obj => obj.FK_MasterID.toString() == StockId.toString());

                    //console.log('productSerialNum ADDED NEW>', productSerialNum);

                    productSerialNum = productSerialNum.concat(productSerialNumTemp);

                    console.log('productSerialNum ADDED Now>', productSerialNum);

                    productSerialNumTemp = [];
                }
                if (SubproductDetailsTemp != null) {

                    //debugger
                    console.log('ubproductDetails ADDED OLD>', SubproductDetailsSave);
                    SubproductDetailsSave = SubproductDetailsSave.filter(obj => obj.Master_ID.toString() !== StockId.toString());
                    SubproductDetailsTemp = SubproductDetailsTemp.filter(obj => obj.Master_ID.toString() == StockId.toString());

                    console.log('ubproductDetails ADDED NEW>', SubproductDetailsSave);
                    SubproductDetailsSave = SubproductDetailsSave.concat(SubproductDetailsTemp);
                    console.log('ubproductDetails ADDED Now>', SubproductDetailsSave);

                    SubproductDetailsTemp = [];
                }
                if (PssfupDocsList != null) {
                    console.log('UPLOADING DOCUMENTDETAILS......>', PssfupDocsList);
                    if (SalesDocumentUpload != null) {
                        if (SalesDocumentUpload.length > 0) {
                            SalesDocumentUpload = SalesDocumentUpload.filter(obj => obj.stockid.toString() !== StockId.toString());
                        }
                    }

                    SalesDocumentUpload = SalesDocumentUpload.concat(PssfupDocsList);

                    console.log('UPLOADED DOCUMENT DETAILS concat......>', SalesDocumentUpload);

                    SalesDocumentUpload = SalesDocumentUpload.map(obj => ({ "stockid": StockId, ...obj, }));

                    console.log('UPLOADED DOCUMENT DETAILS......>', SalesDocumentUpload);
                    PssfupDocsList = [];

                }
            }

        }



    }
    var paytableOptionsTempOut = {
        iconButton: {
            buttons: [

                {
                    icon: "fa fa-pencil btnPerfectGridEdit",
                    action: function () {
                        let savedData = $(this).closest('tr').data('pData')

                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let tableKey = $tablecontainer.attr('perfect-tempTable');
                        let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                        //index attribute name in table row
                        let indexname = tableKey + 'index';

                        //index number in table row
                        let rindex = $(this).closest('tr').attr(indexname);

                        $tablecontainer.attr('perfect-tempTable-action', rindex);

                        console.log('Editclick', savedData);
                        //filling data in available inputs
                        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                            let $thisNode = $(this);
                            let pf_name = $thisNode.attr('name');
                            if ($thisNode.is('select')) {

                                $thisNode.val(savedData[pf_name]).selectpicker('refresh');

                            }
                            else if ($thisNode.is('input')) {
                                let inputType = $thisNode.attr('type').toLocaleLowerCase();
                                if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                    $thisNode.prop('checked', savedData[pf_name]);
                                }

                                else {

                                    $thisNode.val(savedData[pf_name]);
                                }

                            }
                            else {
                                $thisNode.val(savedData[pf_name]);
                            }


                        });



                    }
                },
                {
                    icon: "fa fa-trash btnPerfectGridDelete",
                    action: function () {
                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let $thistbl = $(this).closest('table');
                        let table = $thistbl.DataTable();
                        table.destroy();
                        if ($(this).closest('tbody').find('tr').length > 1) {
                            $(this).closest('tr').remove();
                            pft_table_slreset($thistbl);
                            //$thistbl.dataTable({ paging: true, searchbtn: false });
                        }
                        else {
                            $thistbl.remove();
                        }
                        BillAmountbind($tablecontainer);
                    }
                },
            ]
        },

        rowAttribute: [],
        onlyShowColumn: ['PAmount', 'Refno', 'PaymentMethod_d'],
        renameHeader: { "PAmount": "Amount1R", "Refno": "Ref No", "PaymentMethod_d": "Method" },
        hideColumn: ['BalAmt'],

        serialNo: true,

    };
    function validpaymntdetail(ele, tableKey, errorClass, isValid) {
        //debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').val() == null) {

            isValid = false;
            console.log('false', $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').val());
            $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Payment Method');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }

        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="PAmount"]').val() < 1) {
            console.log('false', $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').val());
            isValid = false;

            $thisForm.find('[perfect-tempTable-' + tableKey + '="PAmount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please enter a value greater than or equal to 1');
        }
        else {

            $thisForm.find('[perfect-tempTable-' + tableKey + '="PAmount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }


        return isValid;

    }


    function BringPaymentdata(els) {
        //debugger




        let $form = $(els).closest('[perfect-class="form"]');
        $form.find('[name="UptoDate"]')
        $form.find('[name="EmployeeID"]')
        if ($form.find('[name="UptoDate"]') != '' && $form.find('[name="EmployeeID"]') != 0) {

            let inputdata = {
                UptoDate: $form.find('[name="UptoDate"]').val(),
                FK_Employee: $form.find('[name="EmployeeID"]').val(),
                TransDate: $form.find('[name="TransDate"]').val()
            }

             $.ajax({
                url: "@Url.Action("GetPaymentDetails", "EmployeeWiseCommission")",
                type: "POST",
                 data: inputdata,
                dataType: "json",
                contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                 success: function (ajaxOutput) {
                     //debugger
                    console.log(ajaxOutput, 'ajaxOutput ...>>ln369')
                    if (ajaxOutput.Process.IsProcess) {
                        //$.each(ajaxOutput.Process.Message, function (key, value) {
                        //    NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                        //    $(element).prop('disabled', false);
                        //    LoadAddIncentive();
                        //});
                        $form.find('[name="TotalPaid"]').text(formatAmount(ajaxOutput.Data[0].TotalPaid))
                        $form.find('[name="Payable"]').text(formatAmount(ajaxOutput.Data[0].Payable))
                      

                        $('input[name="ct_Amount"]').val(formatAmount(ajaxOutput.Data[0].Payable));
                        $form.find('[name="BalanceAmount"]').text('0.00')
                        let returnamt = AmountInWords(ajaxOutput.Data[0].Payable, 2);
                        //console.log(returnamt)
                        $form.find('[name="BalAmt"]').text(ajaxOutput.Data[0].Payable);
                        if (returnamt.numberInWords =='Overflow') {
                            $('#Amountinwrdstxt').text('')
                        } else if (returnamt.decimalInWords == "Zero") {
                            $('#Amountinwrdstxt').text(returnamt.numberInWords + ' ' + 'Only');
                        } else {
                            $('#Amountinwrdstxt').text(returnamt.numberInWords + ' ' + 'point' + ' ' + returnamt.decimalInWords + '  Only');
                        }
                        ////$form.find('[name="ct_Amount"]').val( parseFloat(ajaxOutput.Data[0].Payable).toFixed(2)  )
                    }
                    else {
                        $.each(ajaxOutput.Process.Message, function (key, value) {
                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                           // $(element).prop('disabled', false);
                            Employee_wise_commision();
                        });
                    }

                    //$thisForm.find('[perfect-ctype="select"]').val('').selectpicker('refresh');
                    //$thisForm.find('[perfect-ctype="input"]').val('');
                    //$thisForm.find('[perfect-ctype="date"]').val('');
                    //let onSuccess = $thisForm.attr('perfect-onFormSuccess')
                    //if (onSuccess) {
                    //    window[onSuccess]();

                   // }
                },
                complete: function () {
                   // $(element).prop('disabled', false);
                }
            });
        } else {
            return;
        }
    }

    function onChangeAmount(els) {
        //debugger
        let $form = $(els).closest('[perfect-class="form"]');
        let payable = $form.find('[name="Payable"]').text().trim() == '' ? 0 : parseFloat($form.find('[name="Payable"]').text().trim()).toFixed(2);;  // Payable
     
        let Amount = $form.find('[name="ct_Amount"]').val() == '' ? 0 : parseFloat($form.find('[name="ct_Amount"]').val()).toFixed(2); //Current payable
        let balance = parseFloat(parseFloat(payable) - parseFloat(Amount)).toFixed(2);

        const amountInput = $form.find('[name="ct_Amount"]');
        const amountInputVal = $form.find('[name="ct_Amount"]').val();
        const BAmount = $form.find('[name="BalanceAmount"]').text();

        if (payable != 0) {
            amountInput.attr("max", payable);
        }
       
        if ((parseFloat(amountInputVal)) <= (parseFloat(payable)) && payable != 0) {
            $form.find('[name="BalanceAmount"]').text(balance);
            $form.find('[name="BalAmt"]').text(Amount);
            let returnamt = AmountInWords(amountInputVal, 2);
            console.log(returnamt)

            if (returnamt.decimalInWords == "Zero") {
                $('#Amountinwrdstxt').text(returnamt.numberInWords + ' ' + 'Only');
            } else {
                $('#Amountinwrdstxt').text(returnamt.numberInWords + ' ' + 'point' + ' ' + returnamt.decimalInWords + '  Only');
            }

            // $('#Amountinwrdstxt').text(returnamt.numberInWords + ' Only ');

        } else {
            $('#Amountinwrdstxt').text('');
        }

     
       

    }
    function getfunction() {
        //debugger
       var ele= $('input[name="UptoDate"]')
        BringPaymentdata(ele);
        productclear(this, 'Payment');
        //let $tblcontainer = $('#Paymentdethead')
        //let table = $tblcontainer.find('table').DataTable()
        //table.destroy();
        $('#Paymentdethead').find('table').remove();
    }
    function ResetButton() {
        fn_Employee_wise_commision();
    }

    

    function customValidation() {
        debugger
        let valid = true;
        //if ($('[name="TransDate"]').val() > $('[name="UptoDate"]').val()) {
        //    valid = false;
        //    $('#TransDate-error').text(`Transdate can't be garterthan. Up to date`)
        if ($('[name="TransDate"]').val() < $('[name="UptoDate"]').val()) {
            valid = false;
            $('#TransDate-error').text(`Trans Date can't be less than Up to Date`)
        } else if ($('#Paymentdethead > table > tbody > tr').length < 1) {
            valid = false;
            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'select payment method' });
        }else
        if ($('[perfect-class="form"]').find('[name="BalAmt"]').text() > 0) {
            valid = false;
            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Not payed full Amount' });
        }
           
        return valid;
    }

    
   
    function onChangeEmployee() {
        //alert()
    }
    function productclear(ele, tablekey) {
        //debugger
        let $thisform = $(ele).closest('[perfect-class="form"]');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="select"]').val('').selectpicker('refresh');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="date"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="hidden"]').val('');

        let $tblcontainer = $thisform.find('[perfect-tempTable="' + tablekey + '"]');
        $tblcontainer.attr('perfect-tempTable-action', 0);
        //debugger
        if (tablekey == "Purchase") {
            $thisform.find('[name=prdbtn]').removeAttr("disabled", "disabled")


        }
        else if (tablekey == "Warranty") {

            //warrantydetails = [];
        }
        else if (tablekey == "Payment") {

        }
    }

    function formatAmount(amount) {

        const type = typeof amount === "string" ? parseInt(input) : amount;

        return amount.toFixed(2);
    }
    $('input[name="ct_Amount"]').on('change', function (event) {
        debugger
        const val = $('input[name="ct_Amount"]').val();
        var formattedValue = parseFloat(val).toFixed(2);
        if (val) {
            $('input[name="ct_Amount"]').val(formattedValue);
        }
        
    });
    function decimalpnt(ele, id, range) {

        let input = $('#' + id);
        ele.value = ele.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');
        let t = ele.value;
        ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t;
        input.on('keydown', function () {
            if (ele.value.includes('.')) {

            }
            var key = event.keyCode || event.charCode;
            if (key == 8 || key == 46) { }
            else {
                if (ele.value.length == 9) {
                    ele.value = ele.value + '.';
                }
            }

        });

    }

</script>