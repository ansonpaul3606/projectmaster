@*----------------------------------------------------------------------
    Created By	: Santhisree
    Created On	: 15/09/2022
    Purpose		: Extra Work
    -------------------------------------------------------------------------
    Modification
    On			By					OMID/Remarks
    -------------------------------------------------------------------------
    -------------------------------------------------------------------------*@
@model PerfectWebERP.Models.ExtraWorkModel.ExtraWorkListModel


<div class="card ">

    <div class="card-header">
        <h4 class="card-title col-12">@ViewBag.PageTitle</h4>
        <span title="To View List" onclick="fn_showListView();"><svg id="Layer_1" class="layer" stroke="currentColor" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" height="20" width="20" viewBox="0 0 122.88 122.54"><title>To View List</title><path class="viewlst" d="M4.69,0H46.22a4.71,4.71,0,0,1,4.69,4.69V46a4.69,4.69,0,0,1-4.69,4.69H4.69a4.65,4.65,0,0,1-3.31-1.38l-.09-.09A4.67,4.67,0,0,1,0,46V4.69A4.71,4.71,0,0,1,4.69,0ZM89.44,61.94a26.56,26.56,0,0,1,10.18,2l.07,0a26.61,26.61,0,0,1,15.25,32.16,26.18,26.18,0,0,1-2.7,6.11l10.3,11.24a1.27,1.27,0,0,1-.07,1.8l-7.57,6.9a1.27,1.27,0,0,1-1.79-.07l-9.86-10.85a26.36,26.36,0,0,1-6.1,2.74,26.87,26.87,0,0,1-7.71,1.13,26.51,26.51,0,0,1-10.17-2l-.07,0A26.64,26.64,0,0,1,64.85,78.37l0-.07A26.6,26.6,0,0,1,89.44,61.94Zm15,11.59a21.38,21.38,0,0,0-6.89-4.61l-.06,0a21.22,21.22,0,0,0-23.07,4.64l-.07.07a21.25,21.25,0,0,0-4.54,6.83l0,.06a21.32,21.32,0,0,0-1.58,8.06,21.26,21.26,0,0,0,29.35,19.62,21.54,21.54,0,0,0,6.89-4.61l.07-.07a21.09,21.09,0,0,0,4.54-6.83l0-.06a21.35,21.35,0,0,0,0-16.17,21.34,21.34,0,0,0-4.62-6.9ZM4.69,63.2H46.22a4.71,4.71,0,0,1,4.69,4.7v41.34a4.68,4.68,0,0,1-4.69,4.69H4.69A4.69,4.69,0,0,1,0,109.24V67.9a4.71,4.71,0,0,1,4.69-4.7ZM68.78,0h41.53A4.71,4.71,0,0,1,115,4.69V46a4.71,4.71,0,0,1-4.69,4.69H68.78A4.71,4.71,0,0,1,64.09,46V4.69a4.69,4.69,0,0,1,1.37-3.31l.1-.09A4.67,4.67,0,0,1,68.78,0Z"></path></svg></span>
    </div>
    <div class="card-body">
        <form id="" class="form-valide" perfect-class="form" action="#" method="post" perfect-onFormSuccess="">
            <div class="row">
                <div class="col-sm-12">
                    <div class="default-tab">
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="nav-item">
                                <a class="nav-link active" id="Todolist" data-toggle="tab" href="#MainScreen"><i class="las la-tasks  mr-2"></i>Extra Work  &nbsp;&nbsp;<span><label id="todobadge" class="badge badge-circle badge-info"></label></span> </a>
                            </li>
                            @*<li class="nav-item">
            <a class="nav-link" id="OverdueList" data-toggle="tab" href="#Teaminfo" onclick="fn_AllocationDetails_Project(this)"><i class="las la-book-reader mr-2"></i>Project Material Allocation Details&nbsp;&nbsp;<label id="overduebadge" class="badge badge-circle badge-primary"></label></a>
        </li>*@

                        </ul>
                        <div><label></label></div>
                        <div class="tab-content">
                            <div class="tab-pane fade active show" role="tabpanel" id="MainScreen">

                                <div class="row">

                                    <div class="col-sm-6">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label name="lblProject" class="col-sm-4 col-form-label">Project&nbsp;<span class="text-danger">*</span></label>
                                            <div class="col-sm-8">
                                                <div class="input-group">
                                                    <input type="date" name="ProjectDate" class="form-control" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" hidden />
                                                    <input type="text" class="form-control form-control " name="Project" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly />
                                                    <input type="hidden" name="ProjectID" class="form-control form-control perfectValidate_string" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                    <input type="hidden" name="FK_Branch" value="@ViewBag.FK_Branch" />
                                                    <input type="hidden" name="FK_Department" value="@ViewBag.FK_Department" />
                                                    <div class="input-group-append">
                                                        @*<button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" onclick="GetCmnPopUpSearchValAssign(this, 41, 'Project Details')" BindName="Project" BindVal="ProjectID" Function="3" perfect-css="button"></button>*@
                                                        <button id="ProjectButton" class="btn btn-primary fa fa-search" type="button" onclick="GetCmnPopUpSearchValAssign(this, 41, 'Project Details',[],['ProjectDate'])" BindName="Project" BindVal="ProjectID" Function="3" perfect-css="button"></button>
                                                    </div>
                                                </div>
                                                <div class="text-danger temptableError"></div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">Date</span>
                                                <span class="text-danger">*</span>
                                            </label>
                                            <div class="col-sm-8">
                                                <input type="date" id="CreateDate" class="form-control perfectValidate_string" name="CreateDate" perfect-class="formGroupControl" perfect-ctype="date" max="2050-01-01" perfect-css="date" onchange="checkdatewithLDdate(this)" />
                                                <div class="invalid-feedback animated fadeInUp limit-check" style="display: block;"></div>
                                                <div id="CreateDate-error" class="Custominvalid animated fadeInUp CreateDateerror" style="display: none;">Date should be greater than or equal to Project Date</div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-sm-6">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">Stage</span>
                                            </label>
                                            <div class="col-sm-8">
                                                <select class="form-control" name="StageID" perfect-selectButtonAction="testing" perfect-class="formGroupControl" onchange="GetTeam(this)" perfect-ctype="select" perfect-css="select">
                                                    <option value="">Please Select </option>


                                                    @if (!(Model.StageList is null))
                                                    {
                                                        foreach (var cat in Model.StageList)
                                                        {
                                                            <option value="@cat.ProjectStagesID">@cat.StageName</option>
                                                        }
                                                    }
                                                </select>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-sm-6">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel" name="lblWork">Work Type</span>
                                                <span class="text-danger">*</span>
                                            </label>

                                            <div class="col-sm-7">
                                                <div class="input-group">
                                                    <select class="form-control perfectValidate_string" name="WorkTypeID" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" data-live-search="true">

                                                        <option value="">Please Select </option>

                                                        @if (!(Model.WorkTypeList is null))
                                                        {
                                                            foreach (var workTypeList in Model.WorkTypeList)
                                                            {
                                                                <option value="@workTypeList.WorkTypeID">@workTypeList.WorkType</option>
                                                            }

                                                        }

                                                    </select>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">Start Date</span>
                                                <span class="text-danger">*</span>
                                            </label>
                                            <div class="col-sm-8">
                                                <input type="date" id="Servicefromdate" class="form-control" name="FromDate" perfect-class="formGroupControl" perfect-ctype="date" max="2050-01-01" onchange="checkdatewithLDdate(this)" perfect-css="date" />
                                                <div class="invalid-feedback animated fadeInUp limit-check" style="display: block;"></div>
                                                <div id="FromDate-error" class="Custominvalid animated fadeInUp FromDateerror" style="display: none;">Start Date should be greater than or equal to Project Date</div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">End Date</span>
                                                <span class="text-danger">*</span>
                                            </label>
                                            <div class="col-sm-8">
                                                <input type="date" id="Servicetodate" class="form-control" name="ToDate" perfect-class="formGroupControl" perfect-ctype="date" max="2050-01-01" onchange="datecheck(this)" perfect-css="date" />
                                                <div class="invalid-feedback animated fadeInUp limit-check" style="display: block;"></div>
                                                <div id="ToDate-error" class="Custominvalid animated fadeInUp ToDateerror" style="display: none;">End Date should be greater than or equal to Start Date</div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">Start Time</span>

                                            </label>
                                            <div class="col-sm-8">
                                                <input type="time" class="form-control" placeholder="" name="FromTime" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">End Time</span>

                                            </label>
                                            <div class="col-sm-8">
                                                <input type="time" class="form-control" placeholder="" name="ToTime" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">Details</span>
                                                <span class="text-danger">*</span>
                                            </label>
                                            <div class="col-sm-8">
                                                <textarea rows="4" name="Details" class="form-control perfectValidate_string" perfect-ctype="input" maxlength="250"oninput="removeSpaces(this)" ></textarea>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">Remarks</span>

                                            </label>
                                            <div class="col-sm-8">
                                                <textarea rows="4" name="Remarks" class="form-control perfectValidate_string_nm" perfect-ctype="input" maxlength="250"oninput="removeSpaces(this)"></textarea>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">Amount</span>
                                                <span class="text-danger">*</span>
                                            </label>
                                            <div class="col-sm-8">
                                                <input type="text" class="form-control perfectValidate_string text-right " name="Amount" id="Amount" perfect-class="formGroupControl" min="1" onchange="totalamountcalc(this)" oninput="decimalpnt(this,'Amount',4)" @*oninput="this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');"*@ perfect-ctype="input" perfect-css="input" />
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-sm-6">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-lg-4 col-form-label">
                                                <span perfect-class="formGroupLabel">Sub contractor</span>
                                                <span class="text-danger"></span>

                                            </label>
                                            <div class="col-lg-8">
                                                <select class="form-control " id="Subcontractor" name="Subcontractor" data-id="Subcontractor-error" perfect-class="formGroupControl" onchange="" perfect-ctype="select" perfect-css="select" tabindex="-98" aria-describedby="ID_Report-error" aria-invalid="true">
                                                    <option value="0">Please select</option>

                                                    @if (!(Model.PopUpList is null))
                                                    {
                                                        foreach (var i in Model.PopUpList)
                                                        {
                                                            <option value="@i.ID_Supplier">@i.SuppName</option>
                                                        }
                                                    }

                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">Payment Method</label>
                                            <div class="col-sm-8">
                                                <div class="input-group">

                                                    <div class="input-group-append">
                                                        &nbsp;<button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-money" type="button" perfect-css="button" title="Add Payment Method" onclick="GetPaymentlists(this)"></button>

                                                    </div>
                                                </div>

                                            </div>
                                        </div>
                                    </div>
                                    <div class="modal fade" perfect-class="formGroupModalpayment" id="formGroupModalpayment">
                                        <div class="modal-dialog  modal-dialog-centered modal-md" role="document">
                                            <div class="modal-content">
                                                <div class="modal-header border-0">
                                                    <h5 class="modal-title">Payment Method</h5>
                                                    <button type="button" class="close" data-dismiss="modal">
                                                        <span>&times;</span>
                                                    </button>
                                                </div>
                                                <div class="modal-body" perfect-class="formGroup" style="max-height: calc(100vh - 200px); overflow-y: auto;padding: 1rem;">
                                                    <div class="row">


                                                        <div class="col-sm-12">
                                                            <div class="form-group row" perfect-class="formGroup">
                                                                <label class="col-sm-4 col-form-label">Method <span class="text-danger">*</span></label>
                                                                <div class="col-sm-8">
                                                                    <div class="input-group">
                                                                        <select class="form-control" perfect-tempTable-Payment="PaymentMethod" name="PaymentMethod" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select">
                                                                            <option value="">Please Select </option>


                                                                            @if (!(Model.PaymentView is null))
                                                                            {
                                                                                foreach (var Module in Model.PaymentView)
                                                                                {
                                                                                    <option value="@Module.PaymentmethodID">@Module.Name</option>
                                                                                }
                                                                            }
                                                                        </select>


                                                                    </div>
                                                                    <div class="text-danger temptableError"></div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="col-sm-12">
                                                            <div class="form-group row" perfect-class="formGroup">
                                                                <label class="col-sm-4 col-form-label">
                                                                    <span perfect-class="formGroupLabel">Ref No.</span>

                                                                </label>
                                                                <div class="col-sm-8">

                                                                    <div class="input-group">
                                                                        <input type="text" class="form-control perfectValidate_string_nm" perfect-tempTable-Payment="Refno" name="Refno" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" maxlength="250" />

                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>

                                                        <div class="col-sm-12">
                                                            <div class="form-group row" perfect-class="formGroup">
                                                                <label class="col-sm-4 col-form-label">
                                                                    <span perfect-class="formGroupLabel">Amount</span>
                                                                    <span class="text-danger">*</span>
                                                                </label>
                                                                <div class="col-sm-8">
                                                                    <div class="input-group">
                                                                        <input type="text" class="form-control text-right" perfect-tempTable-Payment="PAmount" id="PAmount" name="PAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="decimalpnt(this,'PAmount',3)" onchange="Pamount(this)" maxlength="12" />

                                                                    </div>
                                                                    <div class="text-danger temptableError"></div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="col-sm-9">


                                                        </div>
                                                        <div class="col-sm-3 text-right">
                                                            <div class="input-group">

                                                                <div class="input-group-append">
                                                                    <div>
                                                                        <button type="button" class="btn btn-primary1 " onclick="createtable(this,'Payment',['PaymentMethod'],paytableOptionsTempOut)"><i class="fa fa-plus" aria-hidden="true"></i></button>
                                                                        <button class="btn btn-light1" type="button" onclick="productclear(this, 'Payment')"><i class="fa fa-refresh" aria-hidden="true"></i></button>
                                                                    </div>
                                                                </div>
                                                            </div>

                                                        </div>
                                                        <div class="col-sm-12">
                                                            <div class="form-group row" perfect-class="formGroup">
                                                                <label class="col-sm-4 col-form-label">
                                                                    <span perfect-class="formGroupLabel" style="font-weight:500;">Bal. Amount :</span>

                                                                </label>
                                                                <div class="col-sm-8">
                                                                    <div class="input-group">

                                                                        <label class="col-form-label">
                                                                            <span perfect-class="formGroupLabel" style="font-weight:500;" name="BalAmt"></span>
                                                                        </label>
                                                                        @*<input type="text" class="form-control" perfect-temptable-payment="BalAmt" name="BalAmt" perfect-class="" perfect-ctype="input" perfect-css="input" readonly="" style="border:white;background:white;font-weight: 500;">*@
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>


                                                        <div class="col-sm-12">
                                                            <div class="form-group row" perfect-class="formGroup">

                                                                <div class="table-responsive" perfect-tempTable-Payment="" perfect-tempTable="Payment" id="Paymentdethead" perfect-tempTable-lastindex="0" perfect-tempTable-action="0"></div>
                                                                <div class="text-danger temptableError"></div>

                                                            </div>
                                                        </div>


                                                    </div>
                                                    <div class="modal-footer">
                                                        @*<button type="button" onclick="CreateProductCheckDescription(this);" class="btn btn-primary">Add</button>*@
                                                        <button type="button" class="btn btn-primary light" onclick="Billttlnetchck(this)">Apply</button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>



                                </div>
                                <div class="card-footer text-right" perfect-class="formFooter">
                                    @if (ViewBag.PagedAccessRights.UsrrlMsEdt)
                                    {
                                        <button id="" type="button" class="btn btn-primary mr-3 addcompany-jq-addnewuserUpdate d-none" name="update" perfect-css="button" onclick="updateExtraWork(this)"><i class="fa fa-refresh fa-spin loaderClass"></i>Update</button>
                                    }
                                    @if (ViewBag.PagedAccessRights.UsrrlMsAdd)
                                    {
                                        <button id="addcompany-jq-addnewuser" type="button" class="btn btn-primary mr-3 " name="add" perfect-css="button" onclick="AddExtraWork(this)"><i class="fa fa-refresh fa-spin loaderClass "></i>Save</button>
                                    }
                                    <button type="button" class="btn btn-light" perfect-css="button" onclick="ResetButton(this)" name="reset">Clear</button>
                                </div>
                            </div>
                            <div id="Teaminfo" class="tab-pane">
                                <div class="row" style="margin-top:1.5rem;">
                                    <div class="col-sm-10" name="AllocationDetails">
                                    </div>
                                    @*<div class="col-sm-6" name="divDetails">
                                        </div>*@
                                    @*<div class="card-body">
                                            <div class="table-responsive">
                                                <table class="table  table-striped" id="ProductDett">
                                                    <thead class="thead-primary">
                                                        <tr>
                                                            <th>Sl No.</th>
                                                            <th>Department</th>
                                                            <th>Employee</th>
                                                            <th>Employee Type</th>

                                                        </tr>
                                                    </thead>
                                                    <tbody id="TeamDet">
                                                        <tr id="0">
                                                            <td colspan="9" style="text-align:center;">No Records...</td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>*@
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <input type="hidden" id="ID_LeadGenerateActionhdns" />
            </div>
        </form>

    </div>


</div>


<script>
    (function () {
        //jQuery('form').validate();//<-----  Validate/initialize our form on page load

    })();

    $(document).ready(function () {

        initFunctions('form');
        $('#MeasurementDetails').removeClass('collapsed');
        $('#active-header_collapseTwo').addClass('collapse');
        $('#active-header_collapseTwo').addClass('show');
        $('#MasterProjectDetails').attr('aria-expanded', "true");
        $('#active-header_collapseTwo1').addClass('collapse');
        $('#active-header_collapseTwo1').addClass('show');
        $('#active-header_collapseTwo2').addClass('collapse');
        $('#active-header_collapseTwo2').addClass('show');

    });

    function decimalpnt(ele, name, range) {

        let input = $('#' + name);
        ele.value = ele.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');
        let t = ele.value;
        ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t;
        input.on('keydown', function () {
            if (ele.value.includes('.')) {

            }
            var key = event.keyCode || event.charCode;
            if (key == 8 || key == 46) { }
            else {
                if (ele.value.length == 8) {
                    ele.value = ele.value + '.';
                }
            }

        });

    }

    var tableOptionsTempOut = {
        iconButton: {
            buttons: [
                {
                    icon: "fa fa-trash",
                    action: function () {
                        let $thistbl = $(this).closest('table');
                        let table = $thistbl.DataTable();
                        table.destroy();
                        if ($(this).closest('tbody').find('tr').length > 1) {
                            $(this).closest('tr').remove();
                            pft_table_slreset($thistbl);
                            //$thistbl.dataTable({ paging: true, searchbtn: false });
                        }
                        else {
                            $thistbl.remove();
                        }

                    }
                },
                {
                    icon: "fa fa-pencil",
                    action: function () {
                        let savedData = $(this).closest('tr').data('pData')

                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let tableKey = $tablecontainer.attr('perfect-tempTable');
                        let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                        //index attribute name in table row
                        let indexname = tableKey + 'index';
                        //index number in table row
                        let rindex = $(this).closest('tr').attr(indexname);
                        $tablecontainer.attr('perfect-tempTable-action', rindex);

                        console.log('Editclick', savedData);
                        //filling data in available inputs
                        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                            let $thisNode = $(this);
                            let pf_name = $thisNode.attr('name');
                            if ($thisNode.is('select')) {

                                $thisNode.val(savedData[pf_name]).selectpicker('refresh');

                            }
                            else if ($thisNode.is('input')) {
                                let inputType = $thisNode.attr('type').toLocaleLowerCase();
                                if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                    $thisNode.prop('checked', savedData[pf_name]);
                                }
                                else if (inputType == 'date') {
                                    console.log('datess', savedData)
                                    console.log('datess', savedData[pf_name])
                                    // $thisNode.val(moment(savedData[pf_name]).format('YYYY-DD-MM'));
                                    $thisNode.val(savedData[pf_name]);
                                }
                                else {

                                    $thisNode.val(savedData[pf_name]);
                                }

                            }
                            else {
                                $thisNode.val(savedData[pf_name]);
                            }


                        });



                    }
                },
            ]
        },



        onlyShowColumn: ["Department_d", "Employee", "EmployeeType_d", "Amount", "Product","Mode_d","Quantity","WorkType_d","DurationType_d","Duration","WorkAmount"],
        hideColumn: [ "EmployeeTypeID", "MeasurementTypeID","MeasurementUnitID"],
        serialNo: true,
        renameHeader: {
            "Quantity": "Quantity", "EmployeeType_d": "Employeee Type", "WorkType" : "Work Type"},

        rowAttribute: [],
        isCheckType: [],
        isDateType: ["NextActionDate"],
    };

    var Subimg = "";
    function Getsubimg(dataimg) {
        Subimg = dataimg;
    }
    var $imgContainer = $('#Image-form');
      function ImageLoad(ele) {

        $imgContainer.load('@Url.Action("LoadImageForm", "ExtraWork")', function () {
            getcase('Company');

            if (Subimg != "") {
                $.each(Subimg, function (key, value) {

                    var Mode = value.ImgMode;
                    console.log('Mode', Mode);
                    var imgal = value.ImgValue;
                    var ModeName = value.ModeName;
                    Getimgcntrl1(ele, "data:image/;base64," + imgal, Subimg, ModeName, Mode, value.ImgName)
                });
            }


        });
    }
    function calcsalpttl(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let Spric = $thisForm.find('[name="SalePrice"]').val() == "" ? "0" : $thisForm.find('[name="SalePrice"]').val();
        let qtys = $thisForm.find('[name="Quantity"]').val() == "" ? "0" : $thisForm.find('[name="Quantity"]').val();
        $thisForm.find('[name=Amount]').val(parseFloat(Spric) * parseFloat(qtys));
    }

    function getEmployee(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');

               //console.log("Input data",inputData)

                $.ajax({
                 url: '@Url.Action("GetEmployeeList", "Branch")',//<----- Controller URL : url path in our controller eq: /Home/InsertSampleData or http://localhost:64212/Home/InsertSampleData
                    type: "GET",


                dataType: "json",
                    contentType: "application/x-www-form-urlencoded;charset=utf-8",
                    success: function (ajaxOutput) {//<----- if ajax method executed succesfully,  we get the data passed from controller in this variable  => success: function (variable) {
                       // console.log("Data", data);

                        if (ajaxOutput.Process.IsProcess) {
                            var employeeModel = createSelectList({ data: ajaxOutput.Data, hideColumn: ['EmployeeID'] });
                            employeeModel.then(function (ret) {
                                if (ret) {
                                    console.log('>_ Search button > list click', ret);
                                    $thisForm.find('[name=EmployeeID]').val(ret.EmployeeID);
                                    $thisForm.find('[name=Employee]').val(ret.Employee);

                                   //-----
                                    $.ajax({
                                        url: "@Url.Action("GetEmployeeBaseInfo", "ServiceMapping")",
                                        type: "POST",
                                        data: { employeeID: ret.EmployeeID, __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),},
                                        dataType: "json",
                                        contentType: "application/x-www-form-urlencoded; charset=utf-8",
                                        success: function (ajaxOutEmp) {
                                            //code to make table
                                            //fill table
                                            //show
                                            if (ajaxOutEmp.Process.IsProcess) {

                                                let $tbl = $thisForm.find('.jq_serviceMap_empdetails');

                                                $tbl.find('.jq_serviceMap_empdetails_name').text(ajaxOutEmp.Data[0].EmployeeName);
                                                $tbl.find('.jq_serviceMap_empdetails_num').text(ajaxOutEmp.Data[0].Number);
                                                $tbl.find('.jq_serviceMap_empdetails_dsgn').text(ajaxOutEmp.Data[0].EmployeeDesignation);
                                                $tbl.find('.jq_serviceMap_empdetails_dept').text(ajaxOutEmp.Data[0].EmployeeDepartment);
                                                $tbl.removeClass('d-none');
                                            }

                                        }
                                    });

                                    //------

                                }
                                else {
                                    console.log(ret);
                                }
                            });
                        }
                        else {
                            $.each(ajaxOutput.Process.Message, function (key, value) {
                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                            });
                        }





                },


            });


    }
     function CalEndDate(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let startDate = $thisForm.find('[name=StartDate]').val().trim();
        let duration = $thisForm.find('[name=PWSDuration]').val();

        var days = 0;
        if ($thisForm.find('[name=PWSDurationType]').val() == '4') { /// Month
            var nwEndDate = new Date(startDate).setMonth(new Date(startDate).getMonth() + parseInt(duration));
                $thisForm.find('[name=EndDate]').val(moment(nwEndDate).format('YYYY-MM-DD'));
        }
        else if ($thisForm.find('[name=PWSDurationType]').val() == '3') { /// Week
            days = parseInt(duration) * 7;
            var nwEndDate = new Date(startDate).setDate(new Date(startDate).getDate() + days);
            $thisForm.find('[name=EndDate]').val(moment(nwEndDate).format('YYYY-MM-DD'));
        }
        else if ($thisForm.find('[name=PWSDurationType]').val() == '2') { /// Days
            days = parseInt(duration);
            var nwEndDate = new Date(startDate).setDate(new Date(startDate).getDate() + days);
            $thisForm.find('[name=EndDate]').val(moment(nwEndDate).format('YYYY-MM-DD'));
        }
        else if ($thisForm.find('[name=PWSDurationType]').val() == '1') { /// Hours
            $thisForm.find('[name=EndDate]').val(moment(startDate).format('YYYY-MM-DD'));
        }
    }
    function createatable(ele, tkey, uniq = []) {
    
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let tableKey = tkey;
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');

        let insertData = {};
        let tableOptionsTemp = tableOptionsTempOut;

        let unique = (uniq) ? uniq : [];

        let isValid = true;
        let errorClass = '.temptableError';

        //make index
        console.log('check 1');

        let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
        let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
        let indexname = tkey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);
        let updateCond = '';
        let isNew = true;
        if (thisactionIndex > 0) {
            //means update
            insertData[indexname] = thisactionIndex;
            updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
            isNew = false;
        }
        else {
            //insert
            insertData[indexname] = lastIndex + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
            isNew = true;
        }//

        if (tableKey == "MaterialDetailsTable") {

            if ($thisForm.find('[perfect-tempTable-' + tableKey + '="ProductID"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="ProductID"]').val() == null) {

                isValid = false;
                console.log('false');
                $thisForm.find('[perfect-tempTable-' + tableKey + '="ProductID"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Product');
            }
            else {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="ProductID"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }
            if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').val() == null) {

                isValid = false;
                console.log('false');
                $thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter Quantity');
            }
            else {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }
            if ($thisForm.find('[name="Quantity"]').val() > $thisForm.find('[name="Stock"]').val()) {
                isValid = false;
                console.log('false');
                $thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Qunatity Cannot be Greater than Currennt Stock');
            }
            else {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }
        }

        let upperlimit = $thisForm.find('[name="RegDate"]').val();
        let lowerlimit = $thisForm.find('[name="NextActionDate"]').val();
        var enqDate = new Date(upperlimit);
        var nxtDate = new Date(lowerlimit);
        var today = new Date();

        //if (enqDate.getTime() > nxtDate.getTime()) {
        //    isValid = false;
        //    console.log('inside limit check if')
        //    $thisForm.find('[name="NextActionDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('Follow up date should be greaterthan or equal to Enquiry date')
        //}



        if (unique.length > 0) {
            //getting previous data
            let prevData = [];
            $tblcontainer.find('table > tbody').find('tr').each(function () {
                if (isNew) {
                    prevData.push($(this).data('pData'));
                }
                else {
                    if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                        prevData.push($(this).data('pData'));
                    }

                }

            })
            console.log('previous data', prevData);

            unique.forEach(function (key, i) {
                console.log('unid -> key:' + key + "| index :" + i);
                let $thisEle = $thisForm.find('[perfect-tempTable-' + tableKey + '="' + key + '"]');
                let headerEleName = tableKey == "MaterialDetailsTable" ? $thisForm.find('[name="lblProduct"]').text() : $thisForm.find('[name="lblEmployee"]').text();
                let atname = $thisEle.attr('name');
                let cvalue;

            
                //console.log('len')
                if ($thisEle.length != 0) {
                    console.log('len', $thisEle)
                    let $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
                    let errmessage = headerEleName + " Already exits"

                    //getting current value in cval
                    if ($thisEle.is('select')) {
                        cvalue = $thisEle.val();
                        //alert(cvalue);
                    }
                    else if ($thisEle.is('input')) {

                        let inputEleType = $thisEle.attr('type').toLocaleLowerCase();

                        if (inputEleType == 'checkbox') { cvalue = $thisEle.is(':checked'); }
                        else if (inputEleType == 'hidden') { cvalue = $thisEle.val(); }
                        else { cvalue = $thisEle.val(); }
                    }
                    else { cvalue = $thisEle.val(); }

                    // console.log('cvalue ->' + cvalue);

                    //searching in previous data
                    if (prevData.find(a => a[atname] == cvalue)) {
                        // console.log('Search =>' + cvalue + '| attr :' + atname)
                        $errorElement.text(errmessage);
                        isValid = false;
                    }
                }
            });

        }

        console.log('isValid', isValid);

        if (isValid) {

            console.log('check 4.1');
            // this section make table column data
            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                debugger
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                //console.log('nameAttr', nameAttr);
                console.log('headerName', headerName);

                if ($this.is('select')) {

                    tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                    tableOptionsTemp.hideColumn.push(nameAttr)
                    //displat text of select
                    if ($this.val() != null) {
                        let selectText = ($this.val().length == 0) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    else {
                        let selectText = ($this.val() == null) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    //tableOptionsTemp.onlyShowColumn.push(nameAttr + '_d')
                    insertData[nameAttr] = $this.val();
                    //insertData[nameAttr] = $this.val();
                    if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Action"]').val() != 0) { }



                    if ($thisForm.find('[name="FK_NetAction"]').val() == $this.val()) { }
                    else if ($thisForm.find('[name="FK_ActionType"]').val() == $this.val()) { }
                    else if ($thisForm.find('[name="BranchTypeID"]').val() == $this.val()) { }
                    else if ($thisForm.find('[name="BranchID"]').val() == $this.val()) { }
                    else if ($thisForm.find('[name="FK_Departement"]').val() == $this.val()) { }
                    else { $this.val('').selectpicker('refresh'); }


                }
                else if ($this.is('input')) {

                    let inputType = $this.attr('type').toLocaleLowerCase();

                    if (inputType == 'checkbox') {

                        insertData[nameAttr] = $this.is(':checked');

                        tableOptionsTemp.isCheckType.push(nameAttr)
                        //clear field
                        $this.prop('checked', false);

                    }
                    else if (inputType == 'hidden') {

                        tableOptionsTemp.hideColumn.push(nameAttr)
                        insertData[nameAttr] = $this.val();

                        if ($thisForm.find('[name="FK_Employee"]').val() == $this.val()) { }

                        else { $this.val(''); }

                        //clear field

                    }
                    else if (inputType == 'date') {


                        if ($this.val() == '') {

                            insertData[nameAttr] = null;
                        }
                        else {

                            insertData[nameAttr] = $this.val();
                        }

                        //clear field
                        // $this.val('');
                    }

                    else {
                        insertData[nameAttr] = $this.val();
                        //$this.val() == "" ? "''" : $this.val();
                        //clear field

                        if ($thisForm.find('[name="AssignEmp"]').val() == $this.val()) {

                        }
                        else { $this.val(''); }
                    }
                }
                else {
                    insertData[nameAttr] = $this.val();
                    if ($thisForm.find('[name="AssignEmp"]').val() == $this.val()) { }
                    else { $this.val(''); }
                }




            });
            console.log('check 4.2', insertData);
            console.log('check 4.2 tableoption', tableOptionsTemp);
            if (isNew) {
                console.log('check 4.2.1');
                //this section nake table.table row
                if ($tblcontainer.find('table').length == 0) {
                    console.log('check 4.2.3');
                    console.log(insertData);
                    $tblcontainer.append(pft_table_createtable([insertData], tableOptionsTemp));
                    //  $tblcontainer.find('table').dataTable({ paging: false, ordering: false });
                }
                else {
                    console.log('check 4.2.1');
                    let table = $tblcontainer.find('table').DataTable()
                    table.destroy()
                    pft_table_addTableRow($tblcontainer.find('table'), insertData, tableOptionsTemp);


                    //  $tblcontainer.find('table').dataTable({ paging: false, ordering: false});
                    //   $tblcontainer.DataTable().draw();
                    //  table.ajax.reload();
                }
                console.log('check 4.2.1');
            }
            else {
                console.log('check 4.3');
                let table = $tblcontainer.find('table').DataTable()
                table.destroy()
                console.log('check 4.4');
                console.log('table', $tblcontainer.find('table'))
                console.log('check 4.5');
                pft_table_replaceTableRow($tblcontainer.find('table'), updateCond, insertData, tableOptionsTemp);


                // $tblcontainer.find('table').dataTable({ paging: false,ordering:false });
            }

            console.log(insertData);
            //alert(1);
            // resetting the edit value
            $tblcontainer.attr('perfect-tempTable-action', 0);
        }

        console.log('check 5');
    }
         function ResetButton(ele) {

             ExtraWorkInitialLoad();
    }

    function getproductdetails(ele) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');

        let Mode = $thisForm.find('[name="Mode"] option:selected').val() ;
   
        if (Mode == 'P') {
            GetCmnPopUpSearchValAssign(ele, 32, 'Product Details', [], ['MRPs', 'SalePrice', 'StockId'])
        }
        else if (Mode == 'T') {
            GetCmnPopUpSearchValAssign(ele, 50, 'Tools Details', [], ['MRPs', 'SalePrice', 'StockId'])
        }
        else if (Mode == 'V') {
            GetCmnPopUpSearchValAssign(ele, 49, 'Vehicle Details', [], ['MRPs', 'SalePrice', 'StockId'])
        }
        else {
            NotificationMessage({ 'type': 'info', 'heading': 'info', 'message': 'No Data Found' });
        }

    }

    // Function to add new ExtraWork


    function AddExtraWork(ele) {

        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');//<------Form element :  Our Form which contain our input elements ,saved in a variable for reusability


        //$(ele).find('i').removeClass();

        console.log('> Add ExtraWork form IS valid', $thisForm.valid())
        let upperlimit = $thisForm.find('[name="FromDate"]').val();
        let lowerlimit = $thisForm.find('[name="ToDate"]').val();
        let createlimit = $thisForm.find('[name="CreateDate"]').val();
        let ProjectDate = $thisForm.find('[name="ProjectDate"]').val();

        var today = new Date().toISOString().split('T')[0];
        document.getElementsByName("CreateDate")[0].setAttribute('max', today);

        ProjectDate = new Date(ProjectDate);
        ProjectDate.setHours(0, 0, 0, 0)

        upperlimit = new Date(upperlimit);
        upperlimit.setHours(0, 0, 0, 0)

        lowerlimit = new Date(lowerlimit);
        lowerlimit.setHours(0, 0, 0, 0)

        if (ProjectDate > upperlimit) {
            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Start Date should greater than or equal to Project Date' });
        }
       else if (upperlimit > lowerlimit) {
            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'End Date should greater than or equal to Start Date' });
        }       
        else {

            if ($thisForm.valid()) {
                //<---------Validation :  To Check whether the form is vaild(ie; values in the form contrls are valid)
                debugger;
                if (checkdatewithLDdate(ele)) {
                    let validpay = true;
                    //payment method validation
                    if (BillAmountbind(ele)) {
                        validpay = true;
                    }
                    else {
                        validpay = false;
                    }
                    if (validpay) {

                        $(ele).prop('disabled', true); // avoiding form submit the double click

                        let $modal2 = $thisForm.find('#zero_configOthercharge');

                        let paymentdetails = [];
                        $thisForm.find('[perfect-tempTable="Payment"]').find('tbody').find('tr').each(function () {
                            paymentdetails.push($(this).data('pData'));
                        })

                        var inputData = {//<---- Input Json : this is the variable we pass to controller
                            __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                            'TransMode': ExtraWorkTransMode,
                            Date: $thisForm.find('[name=CreateDate]').val().trim(),
                            FK_Project: $thisForm.find('[name=ProjectID]').val(),
                            FK_Stage: $thisForm.find('[name=StageID]').val(),
                            FK_WorkType: $thisForm.find('[name=WorkTypeID]').val(),
                            FromDate: $thisForm.find('[name=FromDate]').val().trim(),
                            ToDate: $thisForm.find('[name=ToDate]').val().trim(),
                            FromTime: $thisForm.find('[name=FromTime]').val().trim(),
                            ToTime: $thisForm.find('[name=ToTime]').val().trim(),
                            Remarks: $thisForm.find('[name=Remarks]').val(),
                            Amount: $thisForm.find('[name=Amount]').val(),
                            Details: $thisForm.find('[name=Details]').val(),
                            Subcontractor: $thisForm.find('[name=Subcontractor]').val(),
                            'PaymentDetail': paymentdetails,
                        };
                       
                        console.log('> Add ExtraWork ajax input', inputData);


                        $.ajax({
                            url: "@Url.Action("AddNewExtraWorkDetails", "ExtraWork")",
                            type: "POST",

                            data: inputData,//<---- Input json : data passed to controller
                            dataType: "json",
                            contentType: 'application/x-www-form-urlencoded;charset=utf-8',
                            success: function (ajaxOutput) {//<----- if ajax method executed succesfully,  we get the data passed from controller in this variable  => success: function (variable) {

                                if (ajaxOutput.Process.IsProcess) {

                                    $.each(ajaxOutput.Process.Message, function (key, value) {
                                        //toastr.success(value, "Success");
                                        NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                                    });
                                    localStorage.removeItem("FRM_TRANSMODE");
                                    $thisForm.find('[perfect-ctype="input"]').val('');
                                    $thisForm.find('[perfect-ctype="number"]').val('');



                                    let onSuccess = $thisForm.attr('perfect-onFormSuccess')

                                    if (onSuccess) {
                                        window[onSuccess]();
                                    }

                                    //---------- Do stuff if success

                                    console.log('> Add new ExtraWork success data', ajaxOutput);
                                }
                                else {
                                    // $.each(ajaxOutput.Process.Message, function (key, value) {
                                        //toastr.warning(value, "Error");
                                       // NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                        //////////////////////////////////////////
                                        let confirmationDialogBoxOption = { heading: "Are you Sure?", body: "A Transaction Already Exist in this Date. Do You want to Save Again?", cancel: "No", confirm: "Yes", reason: '' };
                                       var confirmBoxObj = ConfirmDialog(confirmationDialogBoxOption);
                                    console.log(confirmBoxObj);
                                        confirmBoxObj.then(function (selectedOption) {
                                            if (selectedOption) {

                                           let $modal2 = $thisForm.find('#zero_configOthercharge');

                                           let paymentdetails = [];
                                           $thisForm.find('[perfect-tempTable="Payment"]').find('tbody').find('tr').each(function () {
                                               paymentdetails.push($(this).data('pData'));
                                           })

                                    var inputData = {//<---- Input Json : this is the variable we pass to controller
                                        __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                                        'TransMode': ExtraWorkTransMode,
                                        Date: $thisForm.find('[name=CreateDate]').val().trim(),
                                        FK_Project: $thisForm.find('[name=ProjectID]').val(),
                                        FK_Stage: $thisForm.find('[name=StageID]').val(),
                                        FK_WorkType: $thisForm.find('[name=WorkTypeID]').val(),
                                        FromDate: $thisForm.find('[name=FromDate]').val().trim(),
                                        ToDate: $thisForm.find('[name=ToDate]').val().trim(),
                                        FromTime: $thisForm.find('[name=FromTime]').val().trim(),
                                        ToTime: $thisForm.find('[name=ToTime]').val().trim(),
                                        Remarks: $thisForm.find('[name=Remarks]').val(),
                                        Amount: $thisForm.find('[name=Amount]').val(),
                                        Details: $thisForm.find('[name=Details]').val(),
                                        Subcontractor: $thisForm.find('[name=Subcontractor]').val(),
                                        'PaymentDetail': paymentdetails,
                                        OverWrite: 1,
                                           };
                                           localStorage.removeItem("FRM_TRANSMODE");
                                    $.ajax({
                                        url: "@Url.Action("AddNewExtraWorkDetails", "ExtraWork")",
                                        type: "POST",
                                        data: inputData,
                                        contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                                        success: function (ajaxOutput) {
                                            if (ajaxOutput.Process.IsProcess) {
                                                //let table = $row.closest('table').DataTable()
                                                //table.row($row).remove().draw();
                                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                                    NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                                                });
                                                $thisForm.find('[perfect-ctype="input"]').val('');
                                                $thisForm.find('[perfect-ctype="number"]').val('');
                                                let onSuccess = $thisForm.attr('perfect-onFormSuccess')

                                                if (onSuccess) {
                                                    window[onSuccess]();
                                                }
                                            }
                                            else {
                                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                                });
                                            }
                                        }
                                    });
                                }
                                else {
                                   // NotificationMessage({ 'message': 'No option selected' });
                                }

                            });

                                   // });
                                }
                            },
                            complete: function () {
                                $(ele).prop('disabled', false);
                            }

                        });
                    }
                    else {
                        $(ele).prop('disabled', false);
                        NotificationMessage({ 'type': 'error', 'heading': 'Warning', 'message': 'In Payment Method Balance Amt. Should be  Zero ' });
                    }

                }
                else                    
                {
                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Date should be greater than or equal to Project Date' });
                }
            }

        }
    }


    // Function to update a customer
    //$('.addcompany-jq-addnewuserUpdate').on('click',
    function updateExtraWork(ele) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');//<------Form element :  Our Form which contain our input elements ,saved in a variable for reusability

        var today = new Date().toISOString().split('T')[0];
        document.getElementsByName("CreateDate")[0].setAttribute('max', today);
        //perfectCRMvalidation.init($thisForm);
        let upperlimit = $thisForm.find('[name="FromDate"]').val();
        let lowerlimit = $thisForm.find('[name="ToDate"]').val();
        let createlimit = $thisForm.find('[name="CreateDate"]').val();
        let ProjectDate = $thisForm.find('[name="ProjectDate"]').val();

        console.log('upperlimit', upperlimit)
        console.log('ProjectDate', ProjectDate)
        ProjectDate = new Date(ProjectDate);
        ProjectDate.setHours(0, 0, 0, 0)

        upperlimit = new Date(upperlimit);
        upperlimit.setHours(0, 0, 0, 0)

        lowerlimit = new Date(lowerlimit);
        lowerlimit.setHours(0, 0, 0, 0)
        debugger
        if (ProjectDate > upperlimit) {
            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Start Date should greater than or equal to Project Date' });
        }
        else if (upperlimit > lowerlimit) {
            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'End Date should be greater than or equal to Start Date' });
        }
        
        else {
            if ($thisForm.valid()) {
                if (checkdatewithLDdate(ele)) {//<---------Validation :  To Check whether the form is vaild(ie; values in the form contrls are valid)
                    let validpay = true;
                    //payment method validation
                    if (BillAmountbind(ele)) {
                        validpay = true;
                    }
                    else {
                        validpay = false;
                    }
                    if (validpay) {
                        $(ele).prop('disabled', true);

                        let pdata = $thisForm.data('pData');

                        console.log('> Update ExtraWork form data saved', pdata);

                        let $modal2 = $thisForm.find('#zero_configOthercharge');
                        let paymentdetails = [];
                        $thisForm.find('[perfect-tempTable="Payment"]').find('tbody').find('tr').each(function () {
                            paymentdetails.push($(this).data('pData'));
                        })

                        var inputData = {//<---- Input Json : this is the variable we pass to controller
                            __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                            'TransMode': ExtraWorkTransMode,
                            Date: $thisForm.find('[name=CreateDate]').val().trim(),
                            FK_Project: $thisForm.find('[name=ProjectID]').val(),
                            FK_Stage: $thisForm.find('[name=StageID]').val(),
                            FK_WorkType: $thisForm.find('[name=WorkTypeID]').val(),
                            FromDate: $thisForm.find('[name=FromDate]').val().trim(),
                            ToDate: $thisForm.find('[name=ToDate]').val().trim(),
                            FromTime: $thisForm.find('[name=FromTime]').val().trim(),
                            ToTime: $thisForm.find('[name=ToTime]').val().trim(),
                            Remarks: $thisForm.find('[name=Remarks]').val(),
                            Amount: $thisForm.find('[name=Amount]').val(),
                            Details: $thisForm.find('[name=Details]').val(),
                            ProjectWorkDetailsID: pdata["ProjectWorkDetailsID"],
                            Subcontractor: $thisForm.find('[name=Subcontractor]').val(),
                            'PaymentDetail': paymentdetails,
                        };

                        


                        console.log('> Update state ajax input', inputData);
                        $.ajax({
                            url: "@Url.Action("UpdateExtraWorkDetails", "ExtraWork")",
                            type: "POST",

                            data: inputData,
                            dataType: "json",
                            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                            success: function (ajaxOutput) { //<----- if ajax method executed succesfully,  we get the data passed from controller in this variable  => success: function (variable) {

                                if (ajaxOutput.Process.IsProcess) {

                                    $.each(ajaxOutput.Process.Message, function (key, value) {
                                        //toastr.success(value, "Success");
                                        NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                                    });


                                    let onSuccess = $thisForm.attr('perfect-onFormSuccess')

                                    if (onSuccess) {
                                        window[onSuccess]();
                                    }

                                    //---------- Do stuff if success
                                    //toastr.success("Inside success", "Confirmation Box in table");

                                    console.log('> update new ExtraWork success data', ajaxOutput);
                                }
                                else {
                                   // $.each(ajaxOutput.Process.Message, function (key, value) {
                                        //toastr.warning(value, "Error");
                                       // NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                        //////////////////////////////////////////
                                        let confirmationDialogBoxOption = { heading: "Are you Sure?", body: "A Transaction Already Exist in this Date. Do You want to Update Again?", cancel: "No", confirm: "Yes", reason: '' };
                                       var confirmBoxObj = ConfirmDialog(confirmationDialogBoxOption);
                                  
                                        confirmBoxObj.then(function (selectedOption) {
                                            if (selectedOption) {

                                                let $modal2 = $thisForm.find('#zero_configOthercharge');
                                                let paymentdetails = [];
                                                $thisForm.find('[perfect-tempTable="Payment"]').find('tbody').find('tr').each(function () {
                                                    paymentdetails.push($(this).data('pData'));
                                                })

                                                var inputData = {//<---- Input Json : this is the variable we pass to controller
                                                    __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                                                    'TransMode': ExtraWorkTransMode,
                                                    Date: $thisForm.find('[name=CreateDate]').val().trim(),
                                                    FK_Project: $thisForm.find('[name=ProjectID]').val(),
                                                    FK_Stage: $thisForm.find('[name=StageID]').val(),
                                                    FK_WorkType: $thisForm.find('[name=WorkTypeID]').val(),
                                                    FromDate: $thisForm.find('[name=FromDate]').val().trim(),
                                                    ToDate: $thisForm.find('[name=ToDate]').val().trim(),
                                                    FromTime: $thisForm.find('[name=FromTime]').val().trim(),
                                                    ToTime: $thisForm.find('[name=ToTime]').val().trim(),
                                                    Remarks: $thisForm.find('[name=Remarks]').val(),
                                                    Amount: $thisForm.find('[name=Amount]').val(),
                                                    Details: $thisForm.find('[name=Details]').val(),
                                                    ProjectWorkDetailsID: pdata["ProjectWorkDetailsID"],
                                                    Subcontractor: $thisForm.find('[name=Subcontractor]').val(),
                                                    'PaymentDetail': paymentdetails,
                                                    OverWrite: 1,
                                                };

                                                localStorage.removeItem("FRM_TRANSMODE");
                                    $.ajax({
                                        url: "@Url.Action("UpdateExtraWorkDetails", "ExtraWork")",
                                        type: "POST",
                                        data: inputData,
                                        contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                                        success: function (ajaxOutput) {
                                            if (ajaxOutput.Process.IsProcess) {
                                                //let table = $row.closest('table').DataTable()
                                                //table.row($row).remove().draw();
                                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                                    NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                                                });
                                                let onSuccess = $thisForm.attr('perfect-onFormSuccess')

                                                if (onSuccess) {
                                                    window[onSuccess]();
                                                }
                                            }
                                            else {
                                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                                });
                                            }
                                        }
                                    });
                                }
                                else {
                                   // NotificationMessage({ 'message': 'No option selected' });
                                }

                            });

                                   // });
                                }


                            },
                            complete: function () {
                                $(ele).prop('disabled', false);
                                
                            }

                        });
                    }
                    else {
                        $(ele).prop('disabled', false);
                        NotificationMessage({ 'type': 'error', 'heading': 'Warning', 'message': 'In Payment Method Balance Amt. Should be  Zero ' });
                    }


                }
              
                else {
                     NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Date should be greater than or equal to Project Date' });
                }
                
            }
           
        }
         
    }
        //////New change///

    function fn_GetEmployee(ele) {


        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let $placeDropdown = $thisForm.find('[name=EmployeeID]');//<--- Will give place select html element
        $placeDropdown.empty();
        $placeDropdown.append($('<option/>', { value: '' }).text('Please select')).selectpicker('refresh');

        let StageID = $(ele).val();
        let ProjectID = $thisForm.find('[name=ProjectID]').val()
         $.ajax({
                 url: "@Url.Action("GetEmployees", "ExtraWork")",
                type: "POST",

             data: JSON.stringify({ FK_Stage: StageID, FK_Project: ProjectID}),
                dataType: "json",
                contentType: "application/json",
             success: function (ajaxOutput) {



                 if (ajaxOutput.Process.IsProcess) {

                             $.each(ajaxOutput.Data, function (key, value) {
                                 $placeDropdown.append($('<option/>', { "value": value.EmployeeID }).text(value.EmployeeName)).selectpicker('refresh')
                                 });


                     }
                     else {
                     $.each(ajaxOutput.Process.Message, function (key, value) {
                             //toastr.warning(value, "Error");
                             //NotificationMessage({ 'type': 'info', 'heading': 'info', 'message': value });
                         });
                     }
                     }

                 });


    }

        function SetControl(ele, tt) {
            console.log(tt);

            let ProjectID = tt.ID_FIELD;
            let $thisForm = $(ele).closest('[perfect-class="form"]');
            productclear(ele, 'Payment');
            let $Ptblcontainer = $thisForm.find('[perfect-tempTable="Payment"]');
            $Ptblcontainer.empty();
            let $placeDropdown = $thisForm.find('[name=StageID]');//<--- Will give place select html element
            $placeDropdown.empty();
            $placeDropdown.append($('<option/>', { value: '' }).text('Please select')).selectpicker('refresh');
            //let inputData = {
            //    __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
            //    LeadGenerateID: $thisForm.find('[name=Lead]').val().trim()
            //};
            $.ajax({
                url: "@Url.Action("GetProjectStages", "ExtraWork")",
                type: "POST",

                data: JSON.stringify({ FK_Project: ProjectID }),
                dataType: "json",
                contentType: "application/json",
                success: function (ajaxOutput) {



                    if (ajaxOutput.Process.IsProcess) {

                        $.each(ajaxOutput.Data, function (key, value) {
                            $placeDropdown.append($('<option/>', { "value": value.ProjectStagesID }).text(value.StageName)).selectpicker('refresh')
                        });


                    }
                    else {
                        $.each(ajaxOutput.Process.Message, function (key, value) {
                            //toastr.warning(value, "Error");
                            //NotificationMessage({ 'type': 'info', 'heading': 'info', 'message': value });
                        });
                    }
                }

            });


    }
    function GetTeam(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
             let ProjectID = $thisForm.find('[name=ProjectID]').val();
             let StageID = $thisForm.find('[name=StageID]').val();

            let $placeDropdown = $thisForm.find('[name=TeamID]');//<--- Will give place select html element
            $placeDropdown.empty();
            $placeDropdown.append($('<option/>', { value: '' }).text('Please select')).selectpicker('refresh');
            //let inputData = {
            //    __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
            //    LeadGenerateID: $thisForm.find('[name=Lead]').val().trim()
            //};
            $.ajax({
                url: "@Url.Action("GetProjectTeam", "ExtraWork")",
                type: "POST",

                data: JSON.stringify({ FK_Project: ProjectID, FK_Stage: StageID  }),
                dataType: "json",
                contentType: "application/json",
                success: function (ajaxOutput) {



                    if (ajaxOutput.Process.IsProcess) {

                        $.each(ajaxOutput.Data, function (key, value) {
                            $placeDropdown.append($('<option/>', { "value": value.ID_ProjectTeam }).text(value.TeamName)).selectpicker('refresh')
                        });


                    }
                    else {
                        $.each(ajaxOutput.Process.Message, function (key, value) {
                            //toastr.warning(value, "Error");
                            //NotificationMessage({ 'type': 'info', 'heading': 'info', 'message': value });
                        });
                    }
                }

            });


        }
 function fn_AllocationDetails_Project(ele) {


        let $thisForm = $(ele).closest('[perfect-class="form"]');//<------Form element :  Our Form which contain our input elements ,saved in a variable for reusability
        let $formFolowDivContainer = $(this).closest('[perfect-class="form"]').closest('.jq_leadgeneration_body').find('.jq_leadgeneration_followup_status');
            let inputData = {
                __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                FK_Project: $thisForm.find('[name=ProjectID]').val().trim()
        };
        console.log(inputData);
        if ($thisForm.find('[name=ProjectID]').val().trim() != '' || $thisForm.find('[name=ProjectID]').val().trim() != 0) {
            $.ajax({
                url: "@Url.Action("GetAllocationInfo", "ExtraWork")",
                type: "POST",
                // headers: { "token_key": "1234" },
                data: inputData,
                dataType: "json",
                contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                success: function (ajaxOutput) {
                    debugger;
                    console.log('sss', ajaxOutput)
                    if (ajaxOutput.AllocationDetails.Data != null) {
                        let strHtml = ""; let $ProductHtml = "";
                        for (var t = 0; t < ajaxOutput.distAllocations.length; t++) {
                            let rowCount = 0;

                            strHtml += "<div class='tab-pane'>";
                            strHtml += "<div class='row' style='margin - top: 1.5rem;>";
                            strHtml += "<div class='col-sm-6'>";
                            strHtml += "<label style='width:3%'></label>";
                            strHtml += "<label style='width:20%'><strong style='width:100%'>Stage: </strong><span class='mb-0' style='width:100%'>" + ajaxOutput.distAllocations[t][0]['Stage'] + "</span></label>";
                            strHtml += "<label style='width:20%'><strong style='width:100%'>Team: </strong><span class='mb-0' style='width:100%'>" + ajaxOutput.distAllocations[t][0]['Team'] + "</span></label>";
                            strHtml += "<label style='width:20%'><strong style='width:100%'>Employee: </strong><span class='mb-0' style='width:100%'>" + ajaxOutput.distAllocations[t][0]['Employee'] + "</span></label>";
                            strHtml += "<label style='width:20%'><strong style='width:100%'>Allocation Date: </strong><span class='mb-0' style='width:100%'>" + moment(ajaxOutput.distAllocations[t][0]['Date']).format('DD-MM-YYYY') + "</span></label>";
                            strHtml += "</div></div></div>";



                            strHtml += '<div class="card-body"><div class="table-responsive"><table class="table table-striped"  id="MaterialTable"><thead class="thead-primary"><tr><th>Sl No.</th><th>Mode</th><th>Product</th><th>Quantity</th><th>Amount</th></tr>'
                            strHtml += '</thead ><tbody id="MaterialDt">  ';

                            if (ajaxOutput != null) {
                                $('#MaterialDt').empty();
                                $ProductHtml = "";
                                var ProductData = ajaxOutput.AllocationDetails.Data;
                                if (ProductData) {
                                    $.each(ProductData, function (i, value) {
                                        if (value.FK_Team == ajaxOutput.distAllocations[t][0]["FK_Team"] && value.FK_Stage == ajaxOutput.distAllocations[t][0]["FK_Stage"] && value.FK_Employee == ajaxOutput.distAllocations[t][0]["FK_Employee"]) {
                                            rowCount = (rowCount + 1);
                                            $ProductHtml += "<tr id = " + rowCount + " > ";
                                            $ProductHtml += "<td style='width:20%;'>" + rowCount + "</td>";
                                            $ProductHtml += "<td style='width:20%;'>" + value.Mode + "</td>";
                                            $ProductHtml += "<td>" + value.Product + "</td>";
                                            $ProductHtml += "<td style='text-align: center'>" + value.Quantity + "</td>";
                                            $ProductHtml += "<td style='text-align: center'>" + value.Amount + "</td>";
                                            $ProductHtml += "</tr> ";
                                        }
                                    });
                                }
                                else {
                                    $ProductHtml += "<tr id='0'><td colspan='4' style'text-align:center'>No Records..</td></tr>";
                                }
                                debugger
                                //$thisForm.find('#EmployeeDt').append($ProductHtml);
                                strHtml += $ProductHtml + '</tbody ></table > </div></div>';
                            }
                            //else {
                            //    $ProductHtml += "<tr id='0'><td colspan='8' style'text-align:center'>No Records..</td></tr>";
                            //    $thisForm.find('#EmployeeDt').append($ProductHtml);
                            //    $.each(ajaxOutput.Process.Message, function (key, value) {
                            //        NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                            //    });
                            //}
                        }
                        $thisForm.find('[name=AllocationDetails]').html(strHtml);

                        initFunctions($thisForm);
                    }
                    else {
                        $('#EmployeeDt').empty();
                        strHtml = "<li class='list-group-item d-flex px-0 justify-content-between'><span class='mb-0'><strong>No Team Found For The Selected Project</strong>  </span></li>";
                        $thisForm.find('[name=AllocationDetails]').html(strHtml);
                    }

                }
            });
        }

    }

    function datecheck(ele) {
      
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        //invalid-feedback
        let upperlimit = $thisForm.find('[name="Servicefromdate"]').val();
        let lowerlimit = $thisForm.find('[name="Servicetodate"]').val();

        var enqDate = new Date(upperlimit);
        enqDate.setHours(0, 0, 0, 0)
        var nxtDate = new Date(lowerlimit);
        nxtDate.setHours(0, 0, 0, 0)
        var today = new Date();
        today.setHours(0, 0, 0, 0)
        if (enqDate > nxtDate) {

            console.log('inside limit check if')
            $thisForm.find('[name="Servicetodate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('End Date should be greater than or equal to Start Date')
        }
        else {

            $thisForm.find('[name="Servicetodate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('')
        }

        if (enqDate < today) {

            console.log('inside limit check if')
            $thisForm.find('[name="Servicefromdate"]').closest('[perfect-class="formGroup"]').find('.limit-check').attr("style", "display:block")
            $thisForm.find('[name="Servicefromdate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('Start Date should be greater than or equal to Todays date')
            isvalid = false;

        }



    }


    function checkdatewithLDdate(ele) {
        debugger;
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        $thisForm.find('[name="CreateDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('')
        $thisForm.find('[name="FromDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('')
        console.log('Projectdate', $thisForm.find('[name=ProjectDate]').val());
        let CreateDate = $thisForm.find('[name=CreateDate]').val();
        let ProjectDate = $thisForm.find('[name=ProjectDate]').val();
        let FromDate = $thisForm.find('[name=FromDate]').val();

        CreateDate = new Date(CreateDate);
        CreateDate.setHours(0, 0, 0, 0)

        FromDate = new Date(FromDate);
        FromDate.setHours(0, 0, 0, 0)

        ProjectDate = new Date(ProjectDate);
        ProjectDate.setHours(0, 0, 0, 0)


        if (CreateDate < ProjectDate) {
            $thisForm.find('[name="CreateDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('Date should be greater than or equal to Project Date');
            return false;
        }

        //else {
        //    $thisForm.find('[name="CreateDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('')
        //   return true;
        //}
        else if (FromDate < ProjectDate) {
            $thisForm.find('[name="FromDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('Start Date should be greater than or equal to Project Date');
            return false;
        }
        else {
            return true;
            $thisForm.find('[name="FromDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('')
        }
        //else {
        //    $thisForm.find('[name="FromDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('')
        //    return true;
        //}
    }

    ////////Payment Method/////////
    function GetPaymentlists(ele) {
        debugger
        $('#formGroupModalpayment').modal({ backdrop: 'static', keyboard: false })

        $('#formGroupModalpayment').modal('show');

    }


    function Billttlnetchck(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');

        let balamt = $thisForm.find('[name=BalAmt]').text();


        if (parseFloat(balamt) == 0) {
            $('#formGroupModalpayment').modal('hide');
            $thisForm.find('[perfect-tempTable="Payment"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
        }
        else {

            $thisForm.find('[perfect-tempTable="Payment"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('Balance Amt. should be Zero');

        }
    }



    var paytableOptionsTempOut = {
        iconButton: {
            buttons: [

                {
                    icon: "fa fa-pencil btnPerfectGridEdit",
                    class: "btnPerfectGridEdit",
                    action: function () {
                        let savedData = $(this).closest('tr').data('pData')

                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let tableKey = $tablecontainer.attr('perfect-tempTable');
                        let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                        //index attribute name in table row
                        let indexname = tableKey + 'index';

                        //index number in table row
                        let rindex = $(this).closest('tr').attr(indexname);

                        $tablecontainer.attr('perfect-tempTable-action', rindex);

                        console.log('Editclick', savedData);
                        //filling data in available inputs
                        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                            let $thisNode = $(this);
                            let pf_name = $thisNode.attr('name');
                            if ($thisNode.is('select')) {

                                $thisNode.val(savedData[pf_name]).selectpicker('refresh');

                            }
                            else if ($thisNode.is('input')) {
                                let inputType = $thisNode.attr('type').toLocaleLowerCase();
                                if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                    $thisNode.prop('checked', savedData[pf_name]);
                                }

                                else {

                                    $thisNode.val(savedData[pf_name]);
                                }

                            }
                            else {
                                $thisNode.val(savedData[pf_name]);
                            }


                        });



                    }
                },
                {
                    icon: "fa fa-trash btnPerfectGridDelete",
                    class: "btnPerfectGridDelete",
                    action: function () {
                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let $thistbl = $(this).closest('table');
                        let table = $thistbl.DataTable();
                        table.destroy();
                        if ($(this).closest('tbody').find('tr').length > 1) {
                            $(this).closest('tr').remove();
                            pft_table_slreset($thistbl);
                            //$thistbl.dataTable({ paging: true, searchbtn: false });
                        }
                        else {
                            $thistbl.remove();
                        }
                        BillAmountbind($tablecontainer);
                    }
                },
            ]
        },

        rowAttribute: [],
        onlyShowColumn: ['PAmount', 'Refno', 'PaymentMethod_d'],
        renameHeader: { "PAmount": "Amount1R", "Refno": "Ref No", "PaymentMethod_d": "Method" },
        hideColumn: ['BalAmt'],
        serialNo: true,

    };

    function Pamount(ele) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let amtp = $thisForm.find('[name="PAmount"]').val() == "" ? "0" : $thisForm.find('[name="PAmount"]').val();
        $thisForm.find('[name="PAmount"]').val(parseFloat(amtp).toFixed(2));
        //salroundoff(ele);
    }
    function validpaymntdetail(ele, tableKey, errorClass, isValid) {
        debugger

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').val() == null) {

            isValid = false
            console.log('false', $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').val());
            $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Payment Method');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }

        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="PAmount"]').val() <= 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="PAmount"]').val() == '' || $thisForm.find('[perfect-tempTable-' + tableKey + '="PAmount"]').val() == null || $thisForm.find('[perfect-tempTable-' + tableKey + '="PAmount"]').val() == undefined) {
            console.log('false', $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').val());
            isValid = false;

            $thisForm.find('[perfect-tempTable-' + tableKey + '="PAmount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please enter a value greater than 0');
        }
        else {

            $thisForm.find('[perfect-tempTable-' + tableKey + '="PAmount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }


        return isValid;

    }

    function createtable(ele, tkey, uniq = [], tableOptionsTempOut) {

        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let tableKey = tkey;
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');

        let insertData = {};
        let tableOptionsTemp = tableOptionsTempOut;

        let unique = (uniq) ? uniq : [];

        let isValid = true;
        let errorClass = '.temptableError';

        //make index

        let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
        let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
        let indexname = tkey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);
        console.log('tableOptionsTemp.rowAttribute', tableOptionsTemp.rowAttribute)
        let updateCond = '';
        let isNew = true;

        if (thisactionIndex > 0) {
            //means update
            insertData[indexname] = thisactionIndex;
            updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
            isNew = false;
        }
        else {
            //insert
            insertData[indexname] = lastIndex + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
            isNew = true;
        }
        //
        if (tableKey == 'Warranty') {

            isValid = validwartdetail(ele, tableKey, errorClass, isValid);
        }
        else if (tableKey == 'Payment') {
            isValid = validpaymntdetail(ele, tableKey, errorClass, isValid);
        }
        else if (tableKey == 'Purchase') {
            isValid = validsaledetail(ele, tableKey, errorClass, isValid);
        }

        if (unique.length > 0) {

            let prevData = [];
            $tblcontainer.find('table > tbody').find('tr').each(function () {
                if (isNew) {
                    prevData.push($(this).data('pData'));
                }
                else {
                    if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                        prevData.push($(this).data('pData'));
                    }
                }

            })

            unique.forEach(function (key, i) {

                let $thisEle = $thisForm.find('[perfect-tempTable-' + tableKey + '="' + key + '"]');

                let atname = $thisEle.attr('name');
                let cvalue;

                if ($thisEle.length != 0) {
                    console.log('len', $thisEle)
                    let $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
                    let errmessage = key + " Already exits"

                    if ($thisEle.is('select')) {
                        cvalue = $thisEle.val();

                    }
                    else if ($thisEle.is('input')) {

                        let inputEleType = $thisEle.attr('type').toLocaleLowerCase();

                        if (inputEleType == 'checkbox') { cvalue = $thisEle.is(':checked'); }
                        else if (inputEleType == 'hidden') { cvalue = $thisEle.val(); console.log('cvalue ->', cvalue); }
                        else { cvalue = $thisEle.val(); }
                    }
                    else { cvalue = $thisEle.val(); }

                    if (prevData.find(a => a[atname] == cvalue)) {
                        $errorElement.text(errmessage);
                        isValid = false;
                    }
                }
            });

        }

        console.log('isValid', isValid);

        if (isValid) {
            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');

                if ($this.is('select')) {


                    tableOptionsTemp.hideColumn.push(nameAttr)

                    if ($this.val() != null) {
                        let selectText = ($this.val().length == 0) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    else {
                        let selectText = ($this.val() == null) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }

                    insertData[nameAttr] = $this.val();
                    $this.val('').selectpicker('refresh');
                }
                else if ($this.is('input')) {

                    insertData[nameAttr] = $this.val();
                    if (nameAttr == "prodtid") { }
                    else if (nameAttr == "stkid") { }
                    else {
                        $this.val('');
                    }
                }

            });

            if (isNew) {
                //this section nake table.table row
                if ($tblcontainer.find('table').length == 0) {
                    $tblcontainer.append(pft_table_createtable([insertData], tableOptionsTemp));
                }
                else {
                    let table = $tblcontainer.find('table').DataTable()
                    table.destroy()
                    pft_table_addTableRow($tblcontainer.find('table'), insertData, tableOptionsTemp);
                }

            }
            else {
                let table = $tblcontainer.find('table').DataTable()
                table.destroy()
                pft_table_replaceTableRow($tblcontainer.find('table'), updateCond, insertData, tableOptionsTemp);
            }

            $tblcontainer.attr('perfect-tempTable-action', 0);

            if (tableKey == 'Warranty') {
            }
            else if (tableKey == 'Payment') {
                debugger
                BillAmountbind(ele);
            }
            else if (tableKey == 'Purchase') {
                $thisForm.find('[name=prdbtn]').removeAttr("disabled", "disabled")
                $thisForm.data({ pwarranty: warrantydetails });
                $thisForm.data({ addpImageselect: $thisForm.data('pImageselect') });
                BindBilldetails(ele);
            }
        }
    }


    function BillAmountbind(ele) {
        debugger
        let $thisForm = $('[perfect-class="form"]');
        let netamt = $thisForm.find('[name="Amount"]').val() == "" ? 0 : $thisForm.find('[name="Amount"]').val();
        let billamt = 0;
        let bilamt = 0;

        if ($thisForm.find('[name=BalAmt]').text() == '') {
            bilamt = 0;
        }
        else {
            bilamt = netamt;
        }

        $('#Paymentdethead').find('tbody tr').each(function (index, ele) {

            billamt += parseFloat($(ele).find('.PAmount').text());

        });

        bilamt = parseFloat(bilamt) - parseFloat(billamt);

        $thisForm.find('[name=BalAmt]').text(bilamt.toFixed(2));

        if (bilamt == 0) {
            return true;
        }
        else {
            return false;
        }
    }

    function totalamountcalc(ele) {
        debugger

        let $thisForm = $(ele).closest('[perfect-class="form"]');        
        let Amount = $thisForm.find('[name="Amount"]').val() == "" ? "0" : $thisForm.find('[name="Amount"]').val();
        
        //for payment method
        $thisForm.find('[name=Amount]').val(parseFloat(Amount).toFixed(2));
        let billamt = 0;
        let bilamt = 0;

        bilamt = Amount;
        $('#Paymentdethead').find('tbody tr').each(function (index, ele) {
            billamt += parseFloat($(ele).find('.PAmount').text());
        });
        bilamt = parseFloat(bilamt) - billamt;

        $thisForm.find('[name=BalAmt]').text(bilamt.toFixed(2));
        //for payment method/////end
    }

    function fillTableWorktype(ele, tkey, data, tableOptionsTempOut) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let tableOptionsTempfill = tableOptionsTempOut;
        let insertData = []
        let tableKey = tkey;
        let indexname = tkey + 'index';
        tableOptionsTempfill.rowAttribute.push(indexname);
        tableOptionsTempfill.hideColumn.push(indexname);
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');
        $.each(data, function (keyOne, valOne) {

            let pData = {};

            pData[indexname] = keyOne + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', pData[indexname])
            //---

            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                //console.log('tfhyrtname', nameAttr)
                if (typeof valOne[nameAttr] !== undefined) {

                    if ($this.is('select')) {
                        // tableOptionsTempfill.renameHeader[nameAttr + '_d'] = headerName;
                        tableOptionsTempfill.hideColumn.push(nameAttr);
                        //displat text of select
                        pData[nameAttr + '_d'] = $this.find('[value="' + valOne[nameAttr] + '"]').text();
                        pData[nameAttr] = valOne[nameAttr];
                        console.log('select', $this.find('options[value="' + valOne[nameAttr] + '"]').text());

                    }
                    else if ($this.is('input')) {

                        let inputType = $this.attr('type').toLocaleLowerCase();
                        console.log(inputType)


                        if (inputType == 'date') {

                            if (valOne[nameAttr] == null) {
                                pData[nameAttr] = valOne[nameAttr];
                            }
                            else {
                                pData[nameAttr] = moment(valOne[nameAttr]).format('YYYY-MM-DD');
                            }


                        }
                        else {
                            pData[nameAttr] = valOne[nameAttr];


                        }
                    }
                    else {
                        pData[nameAttr] = valOne[nameAttr];


                    }
                }



            });

            insertData.push(pData);


            //----

        });
        $tblcontainer.empty();
        $tblcontainer.append(pft_table_createtable(insertData, tableOptionsTempfill));
        // $tblcontainer.find('table').dataTable({ paging: true });
       
    }
    function productclear(ele, tablekey) {

        let $thisform = $(ele).closest('[perfect-class="form"]');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="select"]').val('').selectpicker('refresh');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="date"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="hidden"]').val('');

        let $tblcontainer = $thisform.find('[perfect-tempTable="' + tablekey + '"]');
        $tblcontainer.attr('perfect-tempTable-action', 0);

    }
    /////////Payment Method////////
    function removeSpaces(input) {
        // Remove spaces at the beginning and end
        input.value = input.value.replace(/^\s+/, '');
        input.value = input.value.replace(/[|*;?<>:!#^~_`$="'{}&]/g, '');
    }
</script>



