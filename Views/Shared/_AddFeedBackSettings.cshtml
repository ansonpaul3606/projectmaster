

@model PerfectWebERP.Models.FeedBackSettingsModel.FeedBackSettingsView

<style>

    input[type="number"]::-webkit-inner-spin-button,
    input[type="number"]::-webkit-outer-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }
</style>

<div class="card">
    <div class="card-header">
        <h4 class="card-title col-12">@ViewBag.PageTitle </h4>

        <span title="To View List" onclick="fn_showListView();"><svg id="Layer_1" class="layer" stroke="currentColor" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" height="20" width="20" viewBox="0 0 122.88 122.54"><title>To View List</title><path class="viewlst" d="M4.69,0H46.22a4.71,4.71,0,0,1,4.69,4.69V46a4.69,4.69,0,0,1-4.69,4.69H4.69a4.65,4.65,0,0,1-3.31-1.38l-.09-.09A4.67,4.67,0,0,1,0,46V4.69A4.71,4.71,0,0,1,4.69,0ZM89.44,61.94a26.56,26.56,0,0,1,10.18,2l.07,0a26.61,26.61,0,0,1,15.25,32.16,26.18,26.18,0,0,1-2.7,6.11l10.3,11.24a1.27,1.27,0,0,1-.07,1.8l-7.57,6.9a1.27,1.27,0,0,1-1.79-.07l-9.86-10.85a26.36,26.36,0,0,1-6.1,2.74,26.87,26.87,0,0,1-7.71,1.13,26.51,26.51,0,0,1-10.17-2l-.07,0A26.64,26.64,0,0,1,64.85,78.37l0-.07A26.6,26.6,0,0,1,89.44,61.94Zm15,11.59a21.38,21.38,0,0,0-6.89-4.61l-.06,0a21.22,21.22,0,0,0-23.07,4.64l-.07.07a21.25,21.25,0,0,0-4.54,6.83l0,.06a21.32,21.32,0,0,0-1.58,8.06,21.26,21.26,0,0,0,29.35,19.62,21.54,21.54,0,0,0,6.89-4.61l.07-.07a21.09,21.09,0,0,0,4.54-6.83l0-.06a21.35,21.35,0,0,0,0-16.17,21.34,21.34,0,0,0-4.62-6.9ZM4.69,63.2H46.22a4.71,4.71,0,0,1,4.69,4.7v41.34a4.68,4.68,0,0,1-4.69,4.69H4.69A4.69,4.69,0,0,1,0,109.24V67.9a4.71,4.71,0,0,1,4.69-4.7ZM68.78,0h41.53A4.71,4.71,0,0,1,115,4.69V46a4.71,4.71,0,0,1-4.69,4.69H68.78A4.71,4.71,0,0,1,64.09,46V4.69a4.69,4.69,0,0,1,1.37-3.31l.1-.09A4.67,4.67,0,0,1,68.78,0Z"></path></svg></span>
    </div>

    <div class="card-body">
        <form id="" class="form-valide" perfect-class="form" action="#" method="post" perfect-onFormSuccess="">
            <div class="">

                <div class="row">
                    @Html.AntiForgeryToken()
                    <div class="col-sm-3">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Question</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">

                                <textarea rows="3" class="form-control perfectValidate_string_SPC" perfect-class="formGroupControl" id="idQuestion" perfect-ctype="input" perfect-css="input" placeholder="" name="Question" maxlength="500"></textarea>

                            </div>
                        </div>
                    </div>

                    <div class="col-md-3">
                        <div class="form-group row" perfect-class="fromGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Question Mode<span class="text-danger">*</span></span>

                            </label>
                            <div class="col-sm-8">
                                <select class="form-control perfectValidate_string" id="QMode" perfect-class="formGroupControl" name="QueMode" perfect-ctype="select" perfect-css="select">
                                    <option value="">Please select</option>
                                    @if (!(Model.quesMode is null))
                                    {
                                        foreach (var ModeList in Model.quesMode)
                                        {
                                            <option value="@ModeList.ID_Mode">@ModeList.ModeName</option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                    </div>




                    <div class="col-sm-3">
                        <div class="form-group row" pefect-class="formGroup">
                            <lable class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Show In <span class="text-danger">*</span></span>
                            </lable>
                            <div class="col-sm-8">
                                <select class="form-control perfectValidate_string" id="Mode" name="Mode" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select">
                                    <option value="">Please select</option>
                                    @if (!(Model.ActionStatusList is null))
                                    {
                                        foreach (var ModeList in Model.ActionStatusList)
                                        {
                                            <option value="@ModeList.ID_Mode">@ModeList.ModeName</option>
                                        }
                                    }
                                </select>

                            </div>
                        </div>
                    </div>

                    <div class="col-sm-3">
                        <div class="form-group row" pefect-class="formGroup">
                            <lable class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Feedback Type<span class="text-danger">*</span></span>

                            </lable>
                            <div class="col-sm-8">
                                <select class="form-control perfectValidate_string" id="FeedbackType" name="FeedbackType" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" onchange="fn_chngetype(this)">
                                    @*<option value="">Please select</option>*@
                                    @if (!(Model.FeedStatus is null))
                                    {
                                        foreach (var ModeList in Model.FeedStatus)
                                        {
                                            <option value="@ModeList.ID_Mode">@ModeList.ModeName</option>
                                        }
                                    }
                                </select>

                            </div>
                        </div>
                    </div>




                </div>


                <div class="row">

                    <div class="col-sm-12">

                        <div id="accordion-Two" class="accordion accordion-active-header">

                            <div class="accordion__item">
                                <div class="accordion__header collapsed" id="EmployeeDetails" data-target="#active-header_collapseTwo" aria-expanded="true">
                                    <span class="accordion__header--icon"></span>
                                    <span class="accordion__header--text">Feedback Mark Details</span>

                                </div>
                                <div id="active-header_collapseTwo" class="collapse accordion__body" data-parent="#accordion-Two">
                                    <div class="accordion__body--text">
                                        <div class="row">
                                            <div class="col-sm-12 " perfect-class="TempTableProduct">
                                                <br />
                                                <div class="row">


                                                    <div class="col-sm-3" id="id_Options">
                                                        <div class="form-group row" perfect-class="formGroup">
                                                            <label class="col-sm-4 col-form-label">
                                                                <span id="lblEmpl" perfect-class="formGroupLabel">Options</span>
                                                                <span class="text-danger">*</span>
                                                            </label>
                                                            <div class="col-sm-8">
                                                                <input type="text" class="form-control text-left" perfect-tempTable-FeedbackSettingsDetails="Options" id="" name="Options" maxlength="50" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                                                                <div class="text-danger temptableError"></div>
                                                            </div>
                                                        </div>
                                                    </div>

                                                    <div class="col-sm-3" id="OpRating">
                                                        <div class="form-group row" perfect-class="formGroup">
                                                            <label class="col-sm-4 col-form-label">
                                                                <span id="lblEmpl" perfect-class="formGroupLabel">Star/Rating</span>
                                                                <span class="text-danger">*</span>
                                                            </label>
                                                            <div class="col-sm-8">
                                                                <select class="form-control" perfect-tempTable-FeedbackSettingsDetails="StarRating" name="StarRating" id="id_Mark" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select">
                                                                    <option value="">Please Select</option>
                                                                    @if (!(Model.ReviewStatus is null))
                                                                    {
                                                                        foreach (var ModeList in Model.ReviewStatus)
                                                                        {
                                                                            <option value="@ModeList.ID_Mode">@ModeList.ModeName</option>
                                                                        }
                                                                    }
                                                                </select>
                                                                <span class="temptableError"></span>
                                                            </div>
                                                        </div>
                                                    </div>


                                                    <div class="col-sm-3">
                                                        <div class="form-group row" perfect-class="formGroup">
                                                            <label class="col-sm-4 col-form-label">
                                                                <span id="lblEmpl" perfect-class="formGroupLabel">Mark</span>
                                                                <span class="text-danger">*</span>
                                                            </label>
                                                            <div class="col-sm-8">
                                                                <input type="number" class="form-control text-left" perfect-tempTable-FeedbackSettingsDetails="Mark" name="Mark" id="Mark" min="0" max="100" onkeypress="return isNumberKey(event)" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                                                                <div class="text-danger temptableError"></div>
                                                            </div>
                                                        </div>
                                                    </div>


                                                    <div class="col-sm-3" id="Id_OptClass">
                                                        <div class="form-group row" perfect-class="formGroup">
                                                            <label class="col-sm-4 col-form-label">
                                                                <span perfect-class="formGroupLabel">Emoji</span>
                                                            </label>
                                                            <div class="col-sm-8">
                                                                <select class="form-control" perfect-tempTable-FeedbackSettingsDetails="OptionClass" name="OptionClass" id="id_OptionClass" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select">
                                                                    <option value="">Please Select</option>
                                                                    @if (!(Model.Emojilist is null))
                                                                    {
                                                                        foreach (var ModeList in Model.Emojilist)
                                                                        {
                                                                            <option value="@ModeList.ID_Mode">@ModeList.ModeName</option>
                                                                        }
                                                                    }
                                                                </select>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="col-sm-2" id="id_btn_add">
                                                        <button class="btn btn-primary1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" title="Add maintenance details" onclick="AddFeedbackSettingsdetails(this,'FeedbackSettingsDetails',[])"><i class="fa fa fa-plus" aria-hidden="true"></i></button>
                                                        <button class="btn btn-light1" type="button" id="refresh" data-toggle="tooltip" data-placement="top" data-html="true" onclick="FdetailsClear(this,'FeedbackSettingsDetails')"><i class="fa fa-refresh" aria-hidden="true"></i></button>

                                                    </div>

                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-12">
                            <div class="form-group row" perfect-class="formGroup">
                                <div class="table-responsive" perfect-tempTable="FeedbackSettingsDetails" perfect-tempTable-lastindex="0" id="FeedbackSettingsHead" perfect-tempTable-action="0"></div>
                            </div>
                        </div>
                    </div>

                </div>
            </div>

            <input type="hidden" class="form-control" placeholder="" name="ID_Feedback" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />

            <div class="card-footer text-right" perfect-class="formFooter">
                @if (ViewBag.PagedAccessRights.UsrrlMsEdt)
                {
                    <button id="" type="button" class="btn btn-primary mr-3 addcompany-jq-addnewuserUpdate d-none" name="update" perfect-css="button" onclick="fn_Updatefeedbacksettings(this,'update')"><i class="fa fa-refresh fa-spin loaderClass"></i>Update</button>
                }

                @if (ViewBag.PagedAccessRights.UsrrlMsAdd)
                {
                    <button id="addcompany-jq-addnewuser" type="button" class="btn btn-primary mr-3 " name="add" perfect-css="button" onclick="fn_Updatefeedbacksettings (this,'Add')"><i class="fa fa-refresh fa-spin loaderClass "></i>Save</button>
                }
                <button type="button" class="btn btn-light" perfect-css="button" onclick="Reset()" name="reset">Clear</button>
            </div>


        </form>
    </div>

</div>



<script src="~/Scripts/jqDOM/searchDOMCreation.js"></script>
<script>

        (function () {
            jQuery("select").selectpicker();

        });
        $(document).ready(function () {

            $('#active-header_collapseTwo').addClass('collapse');
            $('#active-header_collapseTwo').addClass('show');

            initFunctions('form');
            //$('.select2').select2();

            let $thisForm = $(this).closest('[perfect-class="form"]');
            $('#OpRating').hide();



    });

    var effectstartdate;
    var effectenddate;
    function isNumberKey(evt) {
        var charCode = (evt.which) ? evt.which : event.keyCode
        if (charCode > 31 && (charCode < 48 || charCode > 57))
            return false;

        return true;
    }

    function fn_Updatefeedbacksettings(ele, actiontype) {

        let $thisForm = $('[perfect-class="form"]');

        let typ = parseFloat($thisForm.find('[name="FeedbackType"]').val());

        let errorClass = '.temptableError';

            if ($thisForm.valid()) {

                let feedData = [];
                $thisForm.find('[perfect-tempTable="FeedbackSettingsDetails"]').find('table>tbody').find('tr').each(function () {

                    feedData.push($(this).data('pData'));
                })

               let isValid = false;

                if (typ == 2) {
                    if (feedData.length != 0) {
                        isValid = true;
                    }
                    else {
                        isValid = false;
                        NotificationMessage({ 'type': 'error', 'heading': 'info', 'message': 'Please Enter Atleast One Feedback Mark Details.!!!' });
                        return false;
                    }
                }
                else if (typ == 1) {
                    debugger

                        if (feedData.length != 0) {
                            isValid = true;
                        }
                        else {
                            isValid = false;
                            NotificationMessage({ 'type': 'error', 'heading': 'info', 'message': 'Please Enter Atleast One Feedback Mark Details.!!!' });
                            return false;
                        }
                }

                if (datecheck(ele)) {
                    if (isValid) {
                        debugger

                        var inputData = {
                            'Question': $thisForm.find('[name="Question"]').val(),
                            'Mode': $thisForm.find('[name="Mode"]').val(),
                            'FeedbackType': $thisForm.find('[name="FeedbackType"]').val(),
                            'ID_Feedback': $thisForm.find('[name="ID_Feedback"]').val(),
                            "QueMode": $thisForm.find('[name="QueMode"]').val(),

                            FeedbackSettingsdetails: feedData
                        }

                        let _ActionUrl = "";
                        if (actiontype == "Add") { _ActionUrl = "@Url.Action("AddFeedbackSettings", "FeedBackSettings")"; } else { _ActionUrl = "@Url.Action("UpdateFeedbackSettings", "FeedBackSettings")"; }

                        $.ajax({
                            url: (actiontype == "Add") ? "@Url.Action("AddFeedbackSettings", "FeedBackSettings")" : "@Url.Action("UpdateFeedbackSettings", "FeedBackSettings")",
                            type: "POST",
                            data: inputData,
                            dataType: "json",
                            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                            success: function (data) {
                                if (data.Process.IsProcess) {
                                    $.each(data.Process.Message, function (key, value) {
                                        NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                                    });
                                    $thisForm.find('[perfect-ctype="select"]').val('').selectpicker('refresh');
                                    $thisForm.find('[perfect-ctype="input"]').val('');
                                    $thisForm.find('[perfect-ctype="date"]').val('');
                                    $thisForm.find('[perfect-ctype="hidden"]').val('');
                                    $thisForm.find('[perfect-ctype="checkbox"]').val('');

                                    let onSuccess = $thisForm.attr('perfect-onFormSuccess');
                                    if (onSuccess) {
                                        fn_feedbackSettings_initialLoad();
                                    }
                                }
                                else {
                                    $.each(data.Process.Message, function (key, value) {
                                        NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                    });
                                }
                            },

                        });

                    }
                 }

            }
    }

    function Reset() {
        fn_feedbackSettings_initialLoad();
    }

    function decimalpnt(ele, id, range) {
        //console.log(ele, 'ele');
        let input = $('#' + id);

        ele.value = ele.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');
        let t = ele.value;
        ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t;

        $(document).on('keydown', '#' + id, function (event) {

            if (ele.value.includes('.')) {

            }
            var key = event.keyCode || event.charCode;
            if (key == 8 || key == 46) { }
            else {
                if (ele.value.indexOf('.') < 0 && ele.value.indexOf('.') !== 9 && ele.value.length > 8) {
                    ele.value = ele.value + '.';
                }
            }

        });

    }
    function FdetailsClear(ele, tablekey) {

        let $thisform = $(ele).closest('[perfect-class="form"]');

        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="select"]').val('').selectpicker('refresh');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="date"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="hidden"]').val('');
        let errorClass = '.temptableError';


        let $tblcontainer = $thisform.find('[perfect-tempTable="' + tablekey + '"]');
        $tblcontainer.attr('perfect-tempTable-action', 0);


    }

    function AddFeedbackSettingsdetails(ele, tkey, uniq = []) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let tableKey = tkey;
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');
        var fdType = $thisForm.find('[name="FeedbackType"]').val();
        let insertData = {};
        let tableOp = [];

        if (fdType == 2) {
            tableOp = tableOptionsTempReview;
        }
        else {
            tableOp = tableOptionsTempRating;
        }

        let uniqe = (uniq) ? uniq : [];

        let isValid = true;
        let errorClass = '.temptableError';


        let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
        let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
        let indexname = tkey + 'index';
        tableOp.rowAttribute.push(indexname);
        tableOp.hideColumn.push(indexname);
        let updateCond = '';
        let isNew = true;

        if (thisactionIndex > 0) {
            //means update
            insertData[indexname] = thisactionIndex;
            updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
            isNew = false;
        }
        else {
            //insert
            insertData[indexname] = lastIndex + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
            isNew = true;
        }


        if (tableKey == 'FeedbackSettingsDetails') {

            if (fdType == 2) {

                if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Options"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="Options"]').val == null || $thisForm.find('[perfect-tempTable-' + tableKey + '="Options"]').val == "") {
                    isValid = false;

                    $thisForm.find('[perfect-tempTable-' + tableKey + '="Options"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter Option');
                }
                else {
                    $thisForm.find('[perfect-tempTable-' + tableKey + '="Options"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
                }

                if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Mark"]').val() == "" || $thisForm.find('[perfect-tempTable-' + tableKey + '="Mark"]').val == null || $thisForm.find('[perfect-tempTable-' + tableKey + '="Mark"]').val == '') {

                    isValid = false;

                    $thisForm.find('[perfect-tempTable-' + tableKey + '="Mark"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter Mark');
                }
                else {
                    $thisForm.find('[perfect-tempTable-' + tableKey + '="Mark"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
                }

                if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Mark"]').val() > 100) {
                    isValid = false;

                }


            }


            if (fdType == 1) {
                if ($thisForm.find('[perfect-tempTable-' + tableKey + '="StarRating"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="StarRating"]').val == null || $thisForm.find('[perfect-tempTable-' + tableKey + '="StarRating"]').val == '') {
                    isValid = false;
                    $thisForm.find('[perfect-tempTable-' + tableKey + '="StarRating"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Star/Rating');
                }
                else {
                    $thisForm.find('[perfect-tempTable-' + tableKey + '="StarRating"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
                }

                if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Mark"]').val() == "" || $thisForm.find('[perfect-tempTable-' + tableKey + '="Mark"]').val == null || $thisForm.find('[perfect-tempTable-' + tableKey + '="Mark"]').val == '') {

                    isValid = false;

                    $thisForm.find('[perfect-tempTable-' + tableKey + '="Mark"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter Mark');
                }
                else {
                    $thisForm.find('[perfect-tempTable-' + tableKey + '="Mark"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
                }
                if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Mark"]').val() > 100) {
                    isValid = false;
                }

            }






        }

            let prevData = [];
            $tblcontainer.find('table > tbody').find('tr').each(function () {
                if (isNew) {
                    prevData.push($(this).data('pData'));
                }
                else {
                    if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                        prevData.push($(this).data('pData'));
                    }
                }
            })
            debugger
            if (fdType == 2) {
                debugger
                if (prevData.some(a => a['Options'] === $('[name=Options]').val() && a['Mark'] === $('[name=Mark]').val())) {
                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Already Exists' });
                    isValid = false;
                }
                else if (prevData.find(a => a['Options'] === $('[name=Options]').val())) {
                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Option is already there.' });
                    isValid = false;
                }
            }

        if (fdType == 1) {
            debugger
            if (prevData.some(a => a['StarRating'] === $('[name=StarRating]').val() && a['Mark'] === $('[name=Mark]').val())) {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Already Exists' });
                isValid = false;
            }
            else if (prevData.find(a => a['StarRating'] === $('[name=StarRating]').val())) {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Star/Rating is already there.' });
                isValid = false;
            }
        }


        if (isValid) {

            tableOp.onlyShowColumn = [];
            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);

                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                if ($this.is('select')) {
                    switch (headerName) {
                        case "OptionClass":
                            headerName = "Emoji";
                            break;
                        case "OptionClass_d":
                            headerName = "Emoji";

                        default:
                            break
                    }

                    console.log('nameAttr >>', nameAttr);
                   // console.log('nameAttr >>', tableOptionsTemp);

                    tableOp.renameHeader[nameAttr + '_d'] = headerName;
                    //tableOp.hideColumn.push(nameAttr);

                    if ($this.val() != null) {
                        let selectText = ($this.val().length == 0) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;

                    }
                    else {
                        let selectText = ($this.val() == null) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }


                    insertData[nameAttr] = $this.val();

                    $this.val('').selectpicker('refresh');

                }
                else if ($this.is('input')) {

                    let inputType = $this.attr('type').toLocaleLowerCase();

                     if (inputType == 'checkbox') {

                        insertData[nameAttr] = $this.is(':checked');

                        tableOp.isCheckType.push(nameAttr)
                        //clear field
                        $this.prop('checked', false);

                     }
                     else if (inputType == 'hidden') {

                       // tableOp.hideColumn.push(nameAttr)
                        insertData[nameAttr] = $this.val();
                        $this.val('');
                     }
                    else if (inputType == 'date') {


                        if ($this.val() == '') {

                            insertData[nameAttr] = null;
                        }
                        else {

                            insertData[nameAttr] = $this.val();
                        }
                    }

                    else {
                        insertData[nameAttr] = $this.val();
                        $this.val('');
                    }
                }
                else {
                    insertData[nameAttr] = $this.val();
                    $this.val('');
                }

            });

            if (isNew) {
                if ($tblcontainer.find('table').length == 0) {
                    $tblcontainer.append(pft_table_createtable([insertData], tableOp));
                }
                else {
                    let table = $tblcontainer.find('table').DataTable()
                    table.destroy()
                    pft_table_addTableRow($tblcontainer.find('table'), insertData, tableOp);
                }
            }
            else {
                let table = $tblcontainer.find('table').DataTable()
                table.destroy()
                pft_table_replaceTableRow($tblcontainer.find('table'), updateCond, insertData, tableOp);

            }

            $tblcontainer.attr('perfect-tempTable-action', 0);

        }

    }

    var tableOptionsTempReview = {

        iconButton: {
            buttons: [
                {
                    icon: "fa fa-pencil btnPerfectGridEdit",

                    action: function () {
                        let savedData = $(this).closest('tr').data('pData')

                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let tableKey = $tablecontainer.attr('perfect-tempTable');
                        let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                        //index attribute name in table row
                        let indexname = tableKey + 'index';
                        //index number in table row
                        let rindex = $(this).closest('tr').attr(indexname);
                        $tablecontainer.attr('perfect-tempTable-action', rindex);

                        console.log('Editclick', savedData);
                        //filling data in available inputs
                        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                            let $thisNode = $(this);
                            let pf_name = $thisNode.attr('name');
                            if ($thisNode.is('select')) {
                                
                                
                                $thisNode.val(savedData[pf_name]).selectpicker('refresh');
                                if (savedData.OptionClass == "0") {
                                    $thisForm.find('[name="OptionClass"]').val("").selectpicker('refresh');;
                                }
                            }
                            else if ($thisNode.is('input')) {
                                
                                let inputType = $thisNode.attr('type').toLocaleLowerCase();
                                if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                    $thisNode.prop('checked', savedData[pf_name]);
                                }
                                
                                else {

                                    $thisNode.val(savedData[pf_name]);
                                }

                            }
                            else {

                                $thisNode.val(savedData[pf_name]);
                            }


                        });



                    }

                },

                {
                    icon: "fa fa-trash btnPerfectGridDelete",
                    action: function () {
                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let $thistbl = $(this).closest('table');
                        let table = $thistbl.DataTable();
                        table.destroy();
                        if ($(this).closest('tbody').find('tr').length > 1) {
                            $(this).closest('tr').remove();
                            pft_table_slreset($thistbl);
                            //$thistbl.dataTable({ paging: true, searchbtn: false });
                        }
                        else {
                            $thistbl.remove();
                        } //$("#btnresetLg").click(); /*$('[name="LogTotAmount"]').val(0); $('[name="LogNetAmount"]').val(0);*/
                        $("#refresh").click();

                    }
                }

            ],


        },

        onlyShowColumn: ["OptionClass_d", "Options","Mark"],
        hideColumn: ["StarRating", "StarRating_d", "OptionClass"],
        serialNo: true,
        renameHeader: { "Options": "Options", "Mark": "Mark", "OptionClass_d": "Emoji"},
        rowAttribute: [],
        isCheckType: [],
        isDataType: [],
    };


    var tableOptionsTempRating = {

        iconButton: {
            buttons: [
                {
                    icon: "fa fa-pencil btnPerfectGridEdit",


                    action: function () {
                        let savedData = $(this).closest('tr').data('pData')

                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let tableKey = $tablecontainer.attr('perfect-tempTable');
                        let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                        //index attribute name in table row
                        let indexname = tableKey + 'index';
                        //index number in table row
                        let rindex = $(this).closest('tr').attr(indexname);
                        $tablecontainer.attr('perfect-tempTable-action', rindex);

                        console.log('Editclick', savedData);
                        //filling data in available inputs
                        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                            let $thisNode = $(this);
                            let pf_name = $thisNode.attr('name');
                            if ($thisNode.is('select')) {

                                $thisNode.val(savedData[pf_name]).selectpicker('refresh');

                            }
                            else if ($thisNode.is('input')) {
                                let inputType = $thisNode.attr('type').toLocaleLowerCase();
                                if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                    $thisNode.prop('checked', savedData[pf_name]);
                                }
                               
                                else {

                                    $thisNode.val(savedData[pf_name]);
                                }

                            }
                            else {

                                $thisNode.val(savedData[pf_name]);
                            }


                        });



                    }

                },

                {
                    icon: "fa fa-trash btnPerfectGridDelete",
                    action: function () {
                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let $thistbl = $(this).closest('table');
                        let table = $thistbl.DataTable();
                        table.destroy();
                        if ($(this).closest('tbody').find('tr').length > 1) {
                            $(this).closest('tr').remove();
                            pft_table_slreset($thistbl);
                            //$thistbl.dataTable({ paging: true, searchbtn: false });
                        }
                        else {
                            $thistbl.remove();
                        } //$("#btnresetLg").click(); /*$('[name="LogTotAmount"]').val(0); $('[name="LogNetAmount"]').val(0);*/
                        $("#refresh").click();

                    }
                }

            ],


        },

        onlyShowColumn: ["StarRating_d","Mark"],
        hideColumn: ["OptionClass", "OptionClass_d", "Options","StarRating"],
        serialNo: true,
        renameHeader: { "Options": "Options", "Mark": "Mark", "OptionClass_d": "Emoji", "StarRating_d":"StarRating" },
        rowAttribute: [],
        isCheckType: [],
        isDataType: [],
    };

    function fn_fillfeedbacksettingsdetails(ele, tkey, data, tableOptionsTemp) {

        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let tableOptionsTempfill = tableOptionsTemp;
        let insertData = []
        let tableKey = tkey;
        let indexname = tkey + 'index';
        tableOptionsTempfill.rowAttribute.push(indexname);
        tableOptionsTempfill.hideColumn.push(indexname);
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');
        $.each(data, function (keyOne, valOne) {
            //debugger
            let pData = {};
            var fdType = $thisForm.find('[name="FeedbackType"]').val();
            pData[indexname] = keyOne + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', pData[indexname])
            //---

            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                //console.log('tfhyrtname', nameAttr)
                if (typeof valOne[nameAttr] !== undefined) {

                    if ($this.is('select')) {
                       
                        tableOptionsTempfill.hideColumn.push(nameAttr);
                        //displat text of select
                        pData[nameAttr + '_d'] = $this.find('[value="' + valOne[nameAttr] + '"]').text();
                        pData[nameAttr] = valOne[nameAttr];
                        console.log('select', $this.find('options[value="' + valOne[nameAttr] + '"]').text());

                    }
                    else if ($this.is('input')) {
                       
                        let inputType = $this.attr('type').toLocaleLowerCase();
                        console.log(inputType)


                        if (inputType == 'date') {

                            if (valOne[nameAttr] == null) {
                                pData[nameAttr] = valOne[nameAttr];
                            }
                            else {
                                pData[nameAttr] = moment(valOne[nameAttr]).format('YYYY-MM-DD');
                            }


                        }
                        else {
                            pData[nameAttr] = valOne[nameAttr];


                        }
                    }
                    else {
                        pData[nameAttr] = valOne[nameAttr];


                    }
                }



            });

            insertData.push(pData);


            //----

        });
        $tblcontainer.empty();
        $tblcontainer.append(pft_table_createtable(insertData, tableOptionsTempfill));
    }

    function fn_chngetype(ele) {
        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let mrk = parseFloat($thisForm.find('[name="FeedbackType"]').val());
        $thisForm.find('[name="Options"]').val("");
        $thisForm.find('[name="Mark"]').val(0);
        $thisForm.find('[name="StarRating"]').val("");
        $thisForm.find('[name="OptionClass"]').val("");
        if (mrk == 1) {
            $('#id_Options').hide();
            //$('#id_btn_add').hide();
            $('#Id_OptClass').hide();
            $('#OpRating').show();

            let $tblcontainer = $thisForm.find('[perfect-tempTable="FeedbackSettingsDetails"]');
            $tblcontainer.empty();
        }
        else {
            $('#id_Options').show();
            $('#id_btn_add').show();
            $('#Id_OptClass').show();
            $('#OpRating').hide();

            let $tblcontainer = $thisForm.find('[perfect-tempTable="FeedbackSettingsDetails"]');
            $tblcontainer.empty();
        }
    }

    function datecheck(ele) {

        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');

        //let effectTo = $thisForm.find('[name="EffectTo"]').val();
        //let effectFrom = $thisForm.find('[name="EffectFrom"]').val();

        //var EffctTodate = new Date(effectTo);
        //EffctTodate.setHours(0, 0, 0, 0)

        //var EffectFrmdate = new Date(effectFrom);
        //EffectFrmdate.setHours(0, 0, 0, 0)

        //let errorClass6 = '.temptableErrors';

        //if (EffctTodate >= EffectFrmdate) {

        //    $thisForm.find('[name="EffectTo"]').closest('[perfect-class="formGroup"]').find(errorClass6).attr("style", "display:none");
        //    $thisForm.find('[name="EffectTo"]').closest('[perfect-class="formGroup"]').find(errorClass6).text('');
        //    isValid = true;

        //}
        //else  {

        //    $thisForm.find('[name="EffectTo"]').closest('[perfect-class="formGroup"]').find(errorClass6).attr("style", "display:block");
        //    $thisForm.find('[name="EffectTo"]').closest('[perfect-class="formGroup"]').find(errorClass6).text('Effect To Date should be greater than or equal to Effect From Date');
        //    isValid = false;
        //return false;
        //}
        return true
    }

</script>
