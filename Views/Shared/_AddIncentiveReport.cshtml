@model PerfectWebERP.Models.IncentiveReportModel.IncentiveReportView

<style>


    .btn-export {
        /*//height:10px;*/
        background-color: #2aa2ad;
        color: white;
    }

    .div-export {
        float: right;
        margin-left: 3px;
        /*background-color:red;*/
        height: 41px;
        /*// width:90px;*/
    }

        .div-export:hover {
            color: white !important;
        }

    .btn-export :hover {
        color: white !important;
    }
    #ReportName {
        text-align: center;
        font-size: 1.3rem;
        font-weight: 700;
    }
</style>



<div class="card">
    <div class="card-header">

        <div class="col-xl-4">
            <h4 class="card-title col-12">Incentive Commission Report</h4>
            @*<span title="To View List" onclick="fn_showListView();"><svg id="Layer_1" class="layer" stroke="currentColor" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" height="20" width="20" viewBox="0 0 122.88 122.54"><title>To View List</title><path class="viewlst" d="M4.69,0H46.22a4.71,4.71,0,0,1,4.69,4.69V46a4.69,4.69,0,0,1-4.69,4.69H4.69a4.65,4.65,0,0,1-3.31-1.38l-.09-.09A4.67,4.67,0,0,1,0,46V4.69A4.71,4.71,0,0,1,4.69,0ZM89.44,61.94a26.56,26.56,0,0,1,10.18,2l.07,0a26.61,26.61,0,0,1,15.25,32.16,26.18,26.18,0,0,1-2.7,6.11l10.3,11.24a1.27,1.27,0,0,1-.07,1.8l-7.57,6.9a1.27,1.27,0,0,1-1.79-.07l-9.86-10.85a26.36,26.36,0,0,1-6.1,2.74,26.87,26.87,0,0,1-7.71,1.13,26.51,26.51,0,0,1-10.17-2l-.07,0A26.64,26.64,0,0,1,64.85,78.37l0-.07A26.6,26.6,0,0,1,89.44,61.94Zm15,11.59a21.38,21.38,0,0,0-6.89-4.61l-.06,0a21.22,21.22,0,0,0-23.07,4.64l-.07.07a21.25,21.25,0,0,0-4.54,6.83l0,.06a21.32,21.32,0,0,0-1.58,8.06,21.26,21.26,0,0,0,29.35,19.62,21.54,21.54,0,0,0,6.89-4.61l.07-.07a21.09,21.09,0,0,0,4.54-6.83l0-.06a21.35,21.35,0,0,0,0-16.17,21.34,21.34,0,0,0-4.62-6.9ZM4.69,63.2H46.22a4.71,4.71,0,0,1,4.69,4.7v41.34a4.68,4.68,0,0,1-4.69,4.69H4.69A4.69,4.69,0,0,1,0,109.24V67.9a4.71,4.71,0,0,1,4.69-4.7ZM68.78,0h41.53A4.71,4.71,0,0,1,115,4.69V46a4.71,4.71,0,0,1-4.69,4.69H68.78A4.71,4.71,0,0,1,64.09,46V4.69a4.69,4.69,0,0,1,1.37-3.31l.1-.09A4.67,4.67,0,0,1,68.78,0Z"></path></svg></span>*@
        </div>
        <div class="col-xl-4 text-right">
            <button id="refresh" type="button" class="btn  btn-primary btn-sm" name="Search" perfect-css="button" onclick="fn_incentive_initialLoad()" title="To Refresh"><i class="fa fa-refresh"></i></button>
            <button id="addcompany-jq-addnewuser" type="button" class="btn  btn-primary btn-sm" name="Search" perfect-css="button" onclick="fn_showFiltersearchs()" title="To Filter"><i class="fa fa-filter"></i></button>
            <div class="dropdown div-export" id="exppdf" style="display: none;">
                <button class="btn  dropdown-toggle btn-sm btn-export" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    <span><i class="fa fa-file-o" style="font-size:16px"></i> </span>
                </button>
                <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                    <a class="dropdown-item" href="#" onclick="generatePdf(this)">PDF</a>
                    <a class="dropdown-item" href="#" onclick="onExell()">EXCEL </a>
                </div>
            </div>
        </div>
    </div>


    <div class="card-body incentive_rp">

        <form id="" class="form-valide" perfect-class="form" action="#" method="post" perfect-onformsuccess="AccountsReportInitialLoad" novalidate="novalidate">
            <div class="incentiveReportfilters">
                <div class="">
                    <input name="__RequestVerificationToken" type="hidden" value="3T1roMgsXqHwKgZK_ZbOnuby7bna0l1ekqkug0c4LvhmvEPATSoflL5gsJI3l3uny-ZEAmdZpC4O1h92w4XZKnRVPYSCabgP8gIClRTBA2c1">
                    <div class="row">
                        <div class="col-sm-6">
                            <div class="form-group row is-invalid" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    <span perfect-class="formGroupLabel">Report Name</span>
                                    <span class="text-danger">*</span>
                                </label>
                                <div class="col-sm-8 ">
                                    <input type="hidden" id="Companyname" name="Companyname" class="form-control" perfect-class="formGroupControl" perfect-css="input">
                                    @*<div class="dropdown bootstrap-select form-control perfectValidate_numeric">*@
                                    <select class="form-control perfectValidate_numeric" id="ID_Report" name="ID_Report" data-id="ID_Report-error" perfect-class="formGroupControl" onchange="clearfield('ReportType'); getfunction();reportchange();" perfect-ctype="select" perfect-css="select" tabindex="-98" aria-describedby="ID_Report-error" aria-invalid="true">
                                        <option value="">Please select</option>
                                        <option value="1">Paid List</option>
                                        <option value="2">Outstanding List</option>
                                        <option value="3">Outstanding List Details</option>

                                    </select>
                                    @*<button type="button" class="btn dropdown-toggle btn-light bs-placeholder" data-toggle="dropdown" role="button" data-id="ID_Report" title="Please select"><div class="filter-option"><div class="filter-option-inner"><div class="filter-option-inner-inner">Please select</div></div> </div></button><div class="dropdown-menu " role="combobox"><div class="inner show" role="listbox" aria-expanded="false" tabindex="-1"><ul class="dropdown-menu inner show"></ul></div></div>*@
                                    @*</div>*@

                                    @*<div id="ID_Report-error" class="invalid-feedback animated fadeInUp" style="display: block;">Please select Report Name</div>*@
                                </div>
                            </div>
                        </div>

                        <div class="col-sm-6  divbranch">



                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    <span perfect-class="formGroupLabel">Branch</span>
                                    <input type="hidden" name="FK_BranchMode" class="form-control" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                </label>
                                <div class="col-sm-8">


                                    <select class="form-control perfectValidate_string_nm" id="BranchID" name="BranchID" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" data-live-search="true" onchange="getfunction();clearfield('Branch')">

                                        <option value="0">All Branch</option>


                                        @if (!(Model.BranchList is null))
                                        {
                                            foreach (var branchList in Model.BranchList)
                                            {
                                                <option value="@branchList.BranchID">@branchList.BranchName</option>
                                            }

                                        }

                                    </select>



                                </div>
                            </div>





                        </div>


                        <div class="col-sm-6">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    <span perfect-class="formGroupLabel">Designation</span>

                                </label>
                                <div class="col-sm-8">
                                    <select class="form-control " name="DesignationID" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" data-live-search="true" perfect-selectbutton="Add Designation" perfect-selectbuttonaction="DesignationAdding" onchange="getfunction();clearfield('Desigination')">
                                        <option value="">Please Select</option>

                                        @if (!(Model.DesignationList is null))
                                        {
                                            foreach (var designationList in Model.DesignationList)
                                            {
                                                <option value="@designationList.DesignationID">@designationList.Designation</option>
                                            }

                                        }
                                    </select>
                                </div>
                            </div>
                        </div>

                        @*<div class="col-sm-6 DivEmployeeName">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    <span perfect-class="formGroupLabel">Employee</span>
                                </label>
                                <div class="col-sm-8">
                                    <div class="input-group">
                                        <input type="text" class="form-control " name="Employee" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled="">
                                        <input type="hidden" id="EmployeeID" name="EmployeeID" class="perfectValidate_numeric_nm" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input">
                                        <div class="input-group-append">

                                            <button id="employeefromid" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchVal(this,151,'Employee List',['',''])" criterea1="DepartmentID" criterea2="BranchID" bindname="Employee" bindval="EmployeeID" criterea3="DesignationID" function="1"></button>

                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>*@
                        @if (ViewBag.Manager || ViewBag.Admin)
                        {
                            <div class="col-sm-6 DivEmployeeName">
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-4 col-form-label rptfilterfields">
                                        <span perfect-class="formGroupLabel">Employee</span>

                                    </label>
                                    <div class="col-sm-8">
                                        <div class="input-group">
                                            <input type="text" class="form-control rptfilters" name="Employee" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" placeholder="Select Employee" disabled />
                                            <input type="hidden" name="Employee_ID" class="form-control" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                            <div class="input-group-append">

                                                <button id="employeefromid" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchVal(this,151,'Employee List',['',''])" criterea1="DepartmentID" criterea2="BranchID" bindname="Employee" bindval="EmployeeID" criterea3="DesignationID" function="1"></button>


                                            </div>
                                        </div>
                                    </div>

                                </div>
                            </div>
                        }



                        else
                        {
                            <div class="col-sm-6 DivEmployeeName">
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-4 col-form-label rptfilterfields">
                                        <span perfect-class="formGroupLabel">Employee</span>
                                    </label>
                                    <div class="col-sm-8">
                                        <div class="input-group">

                                            <input type="text" class="form-control rptfilters" name="Employee" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" placeholder="Select Employee" value='@ViewBag.Employee' disabled />
                                            <input type="hidden" name="Employee_ID" class="form-control" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" value='@ViewBag.FK_Employee' />

                                            <div class="input-group-append">

                                                <button id="employeefromid" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchVal(this,151,'Employee List',['',''])" criterea1="DepartmentID" criterea2="BranchID" bindname="Employee" bindval="EmployeeID" criterea3="DesignationID" function="1"disabled></button>

                                            </div>

                                        </div>
                                    </div>
                                </div>
                            </div>
                        }





                        <div class="col-sm-6 DivFromDate">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    <span perfect-class="formGroupLabel">From Date</span>
                                    <span class="text-danger">*</span>
                                </label>
                                <div class="col-sm-8">
                                    <input type="date" class="form-control  ActionDate perfectValidate_date" id="FromDate" data-id="FromDate-error" name="FromDate" perfect-class="formGroupControl" max="2050-01-01" perfect-ctype="date" perfect-css="date" onchange="checkLimit(this); getfunction()">
                                    <div id="FromDate-error" class="Custominvalid animated fadeInUp producterror text-danger"></div>
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-6 DivToDate">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    <span perfect-class="formGroupLabel">To Date</span>
                                    <span class="text-danger">*</span>
                                </label>
                                <div class="col-sm-8">
                                    <input type="date" id="ToDate" class="form-control  ActionDate perfectValidate_date" name="ToDate" data-id="ToDate-error" perfect-class="formGroupControl" perfect-ctype="date" max="2050-01-01" onchange="checkLimit(this); getfunction()" perfect-css="date">
                                    <div id="ToDate-error" class="Custominvalid animated fadeInUp producterror text-danger"></div>
                                    <div class="invalid-feedback animated fadeInUp limit-check "></div>
                                </div>
                            </div>
                        </div>


                        <div class="col-sm-6 DivASonDate">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    <span perfect-class="formGroupLabel">As On Date</span>
                                    <span class="text-danger">*</span>
                                </label>
                                <div class="col-sm-8">
                                    <input type="date" id="ASonDate" class="form-control  ActionDate perfectValidate_date" name="ASonDate" data-id="ASonDate-error" perfect-class="formGroupControl" perfect-ctype="date" max="2050-01-01" onchange=" getfunction()" perfect-css="date">
                                    <div id="ASonDate-error" class="Custominvalid animated fadeInUp producterror text-danger"></div>
                                    <div class="invalid-feedback animated fadeInUp limit-check "></div>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
                <div class="card-footer text-right" perfect-class="formFooter">
                    <button id="addcompany-jq-addnewuser" type="button" class="btn btn-primary mr-3 " name="add" perfect-css="button" onclick="getaccountdetails(this)"><i class="fa fa-refresh fa-spin loaderClass "></i>Show</button>
                    <button type="button" class="btn btn-light" perfect-css="button" onclick="ResetButton(this);" name="reset">Clear</button>
                </div>
            </div>

            <div id="ReportName" class="col-12" style="display:none"></div>
            <div id="incentiveReportTable">
                
            </div>
            <div class="tab-pane fade" id="Factoryid">
                <br />
                <div class="row">

                    <div class="table-responsive col-md-12 SearchLoadDiv" name="SearchLoadDiv" id="test7"></div>

                </div>
            </div>
        </form>


    </div>
</div>

<script>


    var Data;
    function getaccountdetails(els) {
       // debugger
        let x = document.getElementById("exppdf");
        x.style.display = "none";
        $('#ReportName').hide();

        let $thisForm = $(els).closest('[perfect-class="form"]');
        var reportType = $('select[name="ID_Report"] option:selected').val();
        var tableoptionscustom = {};

        //var currentDate = new Date();


        //var day = currentDate.getDate();
        //var month = currentDate.getMonth() + 1; // Months are zero-indexed, so we add 1
        //var year = currentDate.getFullYear();

        //// Create a formatted date string
        //var formattedDate = day.toString().padStart(2, '0') + '/' + month.toString().padStart(2, '0') + '/' + year;


        var currentDate = new Date();

        // Format the date as needed (e.g., YYYY-MM-DD)
        var formattedDate = currentDate.toISOString().split('T')[0]; // This will give you "YYYY-MM-DD" format

        // Output the formatted date
        console.log(formattedDate);




        if (reportType == 1) {
            tableoptionscustom = tableoptionscustom1;
            $('input[name="ASonDate"]').val(formattedDate);
           
       
        } else if (reportType == 2) {
            tableoptionscustom = tableoptionscustom2;
             $('input[name="FromDate"]').val(formattedDate),
             $('input[name="ToDate"]').val(formattedDate)
        } else {
            tableoptionscustom = tableoptionscustom3;
            $('input[name="ASonDate"]').val(formattedDate);
        }

        var ids = $('#incentiveReportTable')
        if ($thisForm.valid() && customValidation()) {
       // if ($thisForm.valid()) {
            //alert('validation success')
            let _ActionUrl = "@Url.Action("SaveEmployeeCommisiondata", "EmployeeWiseCommission")";
            let paymentdetails = [];
            $thisForm.find('[perfect-tempTable="Payment"]').find('tbody').find('tr').each(function () {
            paymentdetails.push($(this).data('pData'));
            });


            let inputData = {
            __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
            //paymentdetails: paymentdetails,
            EmployeeID: $('input[name="EmployeeID"]').val(),
            Mode: $('select[name="ID_Report"] option:selected').val(),
            BranchID: $('select[name="BranchID"] option:selected').val(),
            //FromDate: $('input[name="FromDate"]').val(),
            //ToDate: $('input[name="ToDate"]').val(),
            DesignationID: $('select[name="DesignationID"] option:selected').val(),
                TransMode: 'CUSA',
                'pageSize': 15,
                'pageIndex': 0
            };

            if ($('select[name="ID_Report"] option:selected').val() == 2) {
                inputData.ASonDate = $('input[name="ASonDate"]').val()
            } else {
                inputData.FromDate= $('input[name="FromDate"]').val(),
                inputData.ToDate= $('input[name="ToDate"]').val()
            }


            let pageUrl = '@Url.Action("GetReportData", "IncentiveReport")';
            $.ajax({
            url: pageUrl,
            type: "POST",
            data: inputData,
            dataType: "json",
            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            success: function (ajaxOutput) {
            console.log(ajaxOutput, 'ajaxOutput ...>>ln369')
                //debugger
                fn_showFiltersearchs()

                $('#ReportName').text($('select[name="ID_Report"] option:selected').text());
                $('#ReportName').show();
                
                if (ajaxOutput.Process.IsProcess) {
                    let x = document.getElementById("exppdf");
                    x.style.display = "block";
                $(ids).empty().append('<div class="d-flex justify-content-end mb-3 position-relative"><div class="col-md-1 position-absolute top-1 z-index"> <div class="input-group testSearchBox"></div></div></div>', $('<div />', { class: "col-md-12 table_temp_class" }).html(pft_table_createtable(ajaxOutput.Data, tableoptionscustom)))
                Data = ajaxOutput.Data;

                let $table = $(ids).find('table');
                $table.dataTable({
                "serverSide": true,//no change
                "processing": true,//-- process text when clicked
                //"lengthChange": false,
                "lengthMenu": [10, 15, 20, 25, 50, 100],//---drop down page size
                "searching": false,//--no change
                "ordering": false,//--sorting
                "deferLoading": ajaxOutput.totalrecord,//<----to total number of record from db
                "displayStart" : ajaxOutput.PageIndex * ajaxOutput.PageSize,//<----starting record
                "pageLength" : ajaxOutput.PageSize,//<----page size
                "recordsFiltered" : ajaxOutput.PageSize,//<---page size
                "ajax": returnajaxPagination({apiurl: pageUrl, pageSize: ajaxOutput.PageSize, EmployeeID: $('input[name="EmployeeID"]').val(),Mode: $('select[name="ID_Report"] option:selected').val(),BranchID: $('select[name="BranchID"] option:selected').val(),FromDate: $('input[name="FromDate"]').val(),ToDate: $('input[name="ToDate"]').val(),DesignationID: $('select[name="DesignationID"] option:selected').val(),TransMode: 'CUSA'}, tableoptionscustom, $table)
             });
                            }
            else {
               // //debugger
                    if (ajaxOutput.Process.Status = "NoData") {
                        $('#ReportName').hide();
                        $('#ReportName').text();

                        let x = document.getElementById("exppdf");
                        x.style.display = "none";
                            $(ids).empty().append($('<div/>', { class: "col-md-12 table_temp_class" }).html(pft_table_createtable(ajaxOutput.Data, tableoptionscustom)))
                            // $sidemenu.find('table').dataTable({ paging: true });


                            let $table = $(ids).find('table');
                            $table.dataTable({
                                "serverSide": true,//no change
                                "processing": true,//-- process text when clicked
                                // "lengthChange": false,
                                "lengthMenu": [],//---drop down page size
                                "searching": false,//--no change
                                "ordering": false,//--sorting
                                "deferLoading": ajaxOutput.totalrecord,//<----to total number of record from db
                                "displayStart": ajaxOutput.PageIndex * ajaxOutput.PageSize,//<----starting record
                                "pageLength": ajaxOutput.PageSize,//<----page size
                                "recordsFiltered": ajaxOutput.pageSize,//<---page size

                                "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.PageSize, EmployeeID: $('input[name="EmployeeID"]').val(), Mode: $('select[name="ID_Report"] option:selected').val(), BranchID: $('select[name="BranchID"] option:selected').val(), FromDate: $('input[name="FromDate"]').val(), ToDate: $('input[name="ToDate"]').val(), DesignationID: $('select[name="DesignationID"] option:selected').val(), TransMode: 'CUSA' }, tableoptionscustom, $table)
                            });
                        }
                        else {
                            $.each(ajaxOutput.Process.Message, function (key, value) {
                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                            });
                        }
                    }
            },
                complete: function () {
                    //$(element).prop('disabled', false);
                }
            });
        } else {
            //Validation failed
            //alert('validation failed')

        }
    }

        var tableoptionscustom1 = {

            //textButton: {
            //    buttons: [
            //        { displayName: "Assign", class: "fa fa-pencil btnPerfectGridEdit", action: fn_showprioritynewtab }
            //    ]
            //},

            onlyShowColumn: ['SlNo', 'EmpFName', 'PaidOn', 'PaidUpTo', 'Amount','Balance'],
            hideColumn: [],
            trackInfo: { "TicketNo": "Click to more information" },
            rowClickAction: '',
            serialNo: false,
            renameHeader: { "Slno": "SL NO.", "EmpFName": "Employee Name" },
            isDateType: ["PaidOn","PaidUpTo"],
            //customIcon: ["Assign"],
            //buttons: ["Assign", { action: checkfunction }],
            //status: ["Status"],
            //priority: ["Priority"],
            //Channel: ["Channel"],
             @* hyperlink: { "TicketNo" : "@Url.Action("UserChangepasswordindex", "UserChangepassword")" }*@
            //customIcon: { 'FK_Priority': [{ text: '1', icon: '<svg>' }, { text: '2', icon: '<svg>' }], 'time': [{ text: '3', icon: '<svg>' }, { text: 'Hot', icon: '<svg>' }] }
            //  rowClickAction: () => { alert("clicked row") }
        };
        var tableoptionscustom2 = {

            onlyShowColumn: ['SlNo', 'EmpFName', 'Balance', 'LastPaidDate', 'LastIncentiveDate'],
            hideColumn: [],
            trackInfo: { "TicketNo": "Click to more information" },
            rowClickAction: '',
            serialNo: false,
            renameHeader: { "SlNo": "SL NO.", "EmpFName": "Employee Name" },
            isDateType: ["LastPaidDate", "LastIncentiveDate"],

        };
        var tableoptionscustom3 = {

            onlyShowColumn: ['SlNo', 'EmpFName', 'LastPaidDate', 'LastIncentiveDate', 'Opening', 'Incentive', 'paid', 'Balance'],
            hideColumn: [],
            trackInfo: { "TicketNo": "Click to more information" },
            rowClickAction: '',
            serialNo: false,
            renameHeader: { "Slno": "SL NO.", "EmpFName": "Employee Name" },
            isDateType: ["LastPaidDate", "LastIncentiveDate"],

        };
    



    function returnajaxPagination(ajaxInfo, tableOptions, tableid) {
        //{ apiurl, pageSize }

        return {
            url: ajaxInfo.apiurl,
            type: "post",
            data: function () {
                var info = tableid.DataTable().page.info();
                console.log('RETURN AJAX', info)
                //return { <antiforgery>:<antiforgery>, length: ajaxInfo.pageSize, page: info.page }
                let input = { pageSize: info.length, pageIndex: info.page, Customer: ajaxInfo.Customer, FromDate: ajaxInfo.FromDate, ToDate: ajaxInfo.ToDate, FK_Branch: ajaxInfo.FK_Branch, FK_ComplaintType: ajaxInfo.FK_ComplaintType, FK_Product: ajaxInfo.FK_Product, Mobile: ajaxInfo.Mobile, TicketNo: ajaxInfo.TicketNo, Sortorder: ajaxInfo.Sortorder, Mode: ajaxInfo.Mode, FK_Area: ajaxInfo.FK_Area, FK_Post: ajaxInfo.FK_Post, FK_Employee: ajaxInfo.FK_Employee, Status: ajaxInfo.Status, DueDays: ajaxInfo.DueDays };
                if (ajaxInfo.searchkey) {
                    input["Name"] = ajaxInfo.searchkey;
                }
                return input
            },
            dataType: "json",
            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            success: function (dtajaxOutput) {
                // $sideMenuOptions.body.html(pft_table_createtable(dtajaxOutput.Data, tableOptions));
                console.table(dtajaxOutput.Data, 'dtajaxOutput.Data>>pagination fun')
                Data = dtajaxOutput.Data;
                document.querySelector('#exppdf').style.display = 'block';
                let table = tableid.DataTable();
                table.destroy();
                pft_table_newTableBody(tableid, dtajaxOutput.Data, tableOptions);

                tableid.dataTable({
                    "serverSide": true,
                    "processing": true,
                    //"lengthChange": false,
                    "lengthMenu": [10, 15, 20, 25, 50, 100],
                    "searching": false,
                    "ordering": false,
                    "deferLoading": dtajaxOutput.totalrecord,
                    "displayStart": dtajaxOutput.PageIndex * dtajaxOutput.PageSize,
                    "pageLength": dtajaxOutput.PageSize,
                    "recordsFiltered": dtajaxOutput.PageSize,
                    "ajax": returnajaxPagination(ajaxInfo, tableOptions, tableid)
                })

            },

        }
    }



    function generatePdf(ele) {
        //debugger
        var cdata;
         var tabMode = $('select[name="ID_Report"] option:selected').val();

        let $container = $(ele).closest('[perfect-class="form"]');
        const obj = {
            "Employee": $('input[name="Employee"]').val(),
           // Report: $('select[name="ID_Report"] option:selected').text(),
            Branch: $('select[name="BranchID"] option:selected').text(),
            Designation: $('select[name="DesignationID"] option:selected').text(),
        };
        const obj2 = {
            "From":    $('input[name="FromDate"]').val(),
            "To": $('input[name="ToDate"]').val(),
            "As on Date": $('input[name="ASonDate"]').val()
        }
         if (tabMode == 2) {
             delete obj2['From'];
             delete obj2['To'];
         } else {
             delete obj2['As on Date'];
         }


        console.log(obj, '--obj--');
        console.log(obj2, '--obj2--');




        Data.forEach((x) => {
            if (x['LastIncentiveDate']) {
                //debugger
                let q = x['LastIncentiveDate'].split('T');
                x['LastIncentiveDate'] = convertJsonDate(q[0]);
            }
            if (x['LastPaidDate']) {
                let q = x['LastPaidDate'].split('T');
                x['LastPaidDate'] = convertJsonDate(q[0]);
            }
            if (x['PaidUpTo']) {
                let q = x['PaidUpTo'].split('T');
                x['PaidUpTo'] = convertJsonDate(q[0]);
            }
            if (x['PaidOn']) {
                let q = x['PaidOn'].split('T');
                x['PaidOn'] = convertJsonDate(q[0]);
            }

        })



         $.ajax({
              url: '@Url.Action("GetCompanyDetails", "Home")',
              type: "GET",
              dataType: "json",
              contentType: "application/x-www-form-urlencoded;charset=utf-8",
                 success: function (ajaxOutput) {


                     cdata = ajaxOutput;

                },
             complete: function () {

                 //LeadType = 'My Leads';
                 var reportName;
                 var head = [];
                 var ptableData = {};
                 ////debugger;
                 if (tabMode == '1') {
                     //    console.log('todoList', Data)
                     head = ["Sl .No", 'Employee Name', 'Paid On', 'Paid Up To', 'Amount', 'Balance'];
                     reportName = "Paid List";
                     ptableData = {
                         columns: [
                            // { dataKey: "SlNo" },
                             { dataKey: "EmpFName" },
                             { dataKey: "PaidOn" },
                             { dataKey: "PaidUpTo" },
                             { dataKey: "Amount" },
                             { dataKey: "Balance" },



                         ],
                         rows: Data

                     };
                 } else if (tabMode == '2') {
                     reportName = "Outstanding List";
                     head = ["Sl .No", 'employee Name','Balance','Last Paid Date', 'Last Incentive Date'];
                         reportName = "Completed";
                         ptableData = {
                             columns: [
                                 //{ dataKey: "SlNo" },
                                 { dataKey: "EmpFName" },
                                 { dataKey: "Balance" },
                                 { dataKey: "LastPaidDate" },
                                 { dataKey: "LastIncentiveDate" },


                             ],
                             rows: Data

                         };



                 } else if (tabMode == '3') {
                     reportName = "Outstanding Details List";
                     head = ["Sl .No", 'EmpFName', "Opening", "Incentive", "paid", 'Balance' ,'Last Paid Date', 'LastIncentive Date'];
                     reportName = "Pending";
                     ptableData = {
                         columns: [

                           //  { dataKey: "SlNo" },
                             { dataKey: "EmpFName" },
                             { dataKey: "Opening" },
                             { dataKey: "Incentive" },
                             { dataKey: "paid" },
                             { dataKey: "Balance" },
                             { dataKey: "LastPaidDate" },
                             { dataKey: "LastIncentiveDate" },
                        
                            
                            


                         ],
                         rows: Data

                     };
                 }

                 var str = "";
                 var str2 = `Report :  INCENTIVE COMMISSION REPORT - ${reportName} List`;
                 var filename = `INCENTIVE COMMISSION REPORT - ${reportName} List`;
                 var num = 0;

                 for (var i in obj) {
                     if (obj[i] != "" && obj[i].toUpperCase() != "PLEASE SELECT" && obj[i] != 0 && obj[i] != "Select Terminal" && obj[i] != "Select Complaint Type" && obj[i] != "Select Status" && obj[i] != "Select Sort Order") {

                         if (num == 0) {
                             str = "Filter By : ";
                         }
                         str = str + i + ' : ' + obj[i] + ' , ';
                         num++;
                     }

                 };
                 //for (var i in obj2) {
                 //    if (obj2[i] != "" && obj2[i] != undefined) {



                 //       // str2 = str2 + i + ' : ' + convertJsonDate(obj2[i]) + ' , ';
                 //    }

                 //};
                 //debugger
                 if (obj2['From'] && obj2['To']) {

                     //str2 = str2 + ` ,For the Period  ${convertJsonDate(obj2['From'])} - ${convertJsonDate(obj2['To'])}`;
                     str2 = str2 + ` ,For the Period  ${formatechange(obj2['From'])}  -  ${formatechange(obj2['To'])}`;
                 } else {
                     str2 = str2 + `  As on Date  ${formatechange(obj2['As on Date'])}`;
                 }
                 var upperhead;
                 if (str2 && str) {
                     upperhead = {


                         columnStyles: { 0: { halign: 'left', textColor: "black", fontSize: 14, fillColor: false, } },
                         columnStyles: { 1: { halign: 'left', textColor: "black", fontSize: 11, fillColor: false, } },

                         body: [

                             [

                                 str2 +
                                 '\n' + str


                             ]
                         ],

                         theme: 'plain',
                         styles: {
                             // fillColor: '#3366ff',
                             color: 'black',
                             rowHeight: 1 // Adjust the row height value to reduce the space between rows
                         },
                         didDrawCell: function (data) {
                             data.cell.styles.lineHeight = 0.2; // Adjust the line height value to your preference
                         }



                     };

                 } else if (str2 && str == "") {
                     upperhead = {


                         columnStyles: { 0: { halign: 'left', textColor: "black", fontSize: 14, fillColor: false, } },
                         columnStyles: { 1: { halign: 'left', textColor: "black", fontSize: 11, fillColor: false, } },

                         body: [


                             [ str2 ]


                         ],

                         theme: 'plain',
                         styles: {
                             // fillColor: '#3366ff',
                             color: 'black',
                             rowHeight: 1 // Adjust the row height value to reduce the space between rows
                         },
                         didDrawCell: function (data) {
                             data.cell.styles.lineHeight = 0.2; // Adjust the line height value to your preference
                         }



                     };

                 }

                 exportPdf("", [head], cdata, upperhead, "", ptableData, "", `${filename} Report`, "a4","","","l");
                // exportPdf(ptitle, phead, cdata, upperhead, footerdata, ptableData, grpvariable, filename, pageSize, tableOptions, columnStyles, PageOrientation)

                }
         });
    }



    function onExell() {

        var tabMode = $('select[name="ID_Report"] option:selected').val();

        var cdata;



        const obj = {
            "Employee": $('input[name="Employee"]').val(),
            // Report: $('select[name="ID_Report"] option:selected').text(),
            Branch: $('select[name="BranchID"] option:selected').text(),
            Designation: $('select[name="DesignationID"] option:selected').text(),
        };
        const obj2 = {
            "From": $('input[name="FromDate"]').val(),
            "To": $('input[name="ToDate"]').val(),
            "As on Date": $('input[name="ASonDate"]').val()
        }
        if (tabMode == 2) {
            delete obj2['From'];
            delete obj2['To'];
        } else {
            delete obj2['As on Date'];
        }



        console.log(obj, '--obj--');
        console.log(obj2, '--obj2--');


        Data.forEach((x) => {
            //debugger
            if (x['LastIncentiveDate']) {
                //debugger
                let q = x['LastIncentiveDate'].split('T');
                x['LastIncentiveDate'] = convertJsonDate(q[0]);
            }
            if (x['LastPaidDate']) {
                let q = x['LastPaidDate'].split('T');
                x['LastPaidDate'] = convertJsonDate(q[0]);
            }
            if (x['PaidUpTo']) {
                let q = x['PaidUpTo'].split('T');
                x['PaidUpTo'] = convertJsonDate(q[0]);
            }
            if (x['PaidOn']) {
                let q = x['PaidOn'].split('T');
                x['PaidOn'] = convertJsonDate(q[0]);
            }

        })




        let ReportName1;


        //Data.unshift(str);

         $.ajax({
              url: '@Url.Action("GetCompanyDetails", "Home")',
              type: "GET",
              dataType: "json",
              contentType: "application/x-www-form-urlencoded;charset=utf-8",
                 success: function (ajaxOutput) {


                     cdata = ajaxOutput;

                },
             complete: function () {
                 console.log(cdata, "---cdata----");
                 var reportName;
                 var head = [];
                 var ptableData = {};

                 if (tabMode == '1') {
                     //    console.log('todoList', Data)
                     head = ["Sl .No", 'Employee Name', 'Paid On', 'Paid Up To', 'Amount', 'Balance'];
                     reportName = "Paid List";
                     ptableData = {
                         columns: [

                             { dataKey: "EmpFName" },
                             { dataKey: "PaidOn" },
                             { dataKey: "PaidUpTo" },
                             { dataKey: "Amount" },
                             { dataKey: "Balance" },


                         ],
                         rows: Data

                     };
                 } else if (tabMode == '2') {
                     reportName = "Outstanding List";
                     head = ["Sl .No", 'employee Name', 'Balance', 'Last Paid Date', 'Last Incentive Date'];
                     reportName = "Completed";
                     ptableData = {
                         columns: [

                             { dataKey: "EmpFName" },
                             { dataKey: "Balance" },
                             { dataKey: "LastPaidDate" },
                             { dataKey: "LastIncentiveDate" },

                         ],
                         rows: Data

                     };



                 } else if (tabMode == '3') {
                     reportName = "Outstanding Details List";
                     head = ["Sl .No", 'EmpFName', "Opening", "Incentive", "paid", 'Balance', 'Last Paid Date', 'LastIncentive Date'];
                     reportName = "Pending";
                     ptableData = {
                         columns: [

                             { dataKey: "EmpFName" },
                             { dataKey: "Opening" },
                             { dataKey: "Incentive" },
                             { dataKey: "paid" },
                             { dataKey: "Balance" },
                             { dataKey: "LastPaidDate" },
                             { dataKey: "LastIncentiveDate" }

                         ],
                         rows: Data

                     };
                 }


                 var str = "";
                 var str2 = `Report :  INCENTIVE COMMISSION REPORT - ${reportName} List`;
                 var filename = `INCENTIVE COMMISSION REPORT - ${reportName} List`;
                 var num = 0;

                 for (var i in obj) {
                     if (obj[i] != "" && obj[i].toUpperCase() != "PLEASE SELECT" && obj[i] != 0 && obj[i] != "Select Terminal" && obj[i] != "Select Complaint Type" && obj[i] != "Select Status" && obj[i] != "Select Sort Order") {

                         if (num == 0) {
                             str = "Filter By : ";
                         }
                         str = str + i + ' : ' + obj[i] + ' , ';
                         num++;
                     }

                 };
                 //for (var i in obj2) {
                 //    if (obj2[i] != "" && obj2[i] != undefined) {

                 //        str2 = str2 + i + ' : ' + convertJsonDate(obj2[i]) + ' , ';
                 //    }

                 //};

                 if (obj2['From'] && obj2['To']) {

                     //str2 = str2 + ` ,For the Period  ${convertJsonDate(obj2['From'])} - ${convertJsonDate(obj2['To'])}`;
                     str2 = str2 + ` ,For the Period  ${formatechange(obj2['From'])}  -  ${formatechange(obj2['To'])}`;
                 } else {
                     str2 = str2 + `  As on Date  ${formatechange(obj2['As on Date'])}`;
                 }
                 ReportName1 = `${cdata.Company} \n${cdata.Branch}\n ${str2} \n ${str} `
                 generateExell(ReportName1, [head], ptableData, "", "", `${filename} Report`);

             }
         });

    }

    function checkLimit() {
        //var retn = true;
        //if ($('input[name="ToDate"]').val() > $('input[name="FromDate"]').val()) {
        //    $('#FromDate-error').text('From Date cant be grater than To date')
        //    retn
        //}
       
    }
        //function convertJsonDate(date) {
        //    /*var date = '2023-06-05';*/

        //    // Split the date into year, month, and day components
        //    var dateComponents = date.split('-');

        //    // Rearrange the components to form the desired format
        //    var formattedDate = dateComponents[2] + '/' + dateComponents[1] + '/' + dateComponents[0];

        //    console.log(formattedDate); // Output: 05/06/23
        //    return formattedDate;
        //}
    //    function convertJsonDate(jsonDate) {
    //        const timestamp = parseInt(jsonDate.replace(/[^0-9]/g, ''), 10);
    //        const date = new Date(timestamp);

    //        const day = date.getDate();
    //        const month = date.getMonth() + 1; // Months are zero-indexed
    //        const year = date.getFullYear() % 100; // Using last two digits of year

    //        const formattedDate = `${day.toString().padStart(2, '0')}/${month.toString().padStart(2, '0')}/${year.toString().padStart(4, '0')}`;

    //        return formattedDate;
    //}

    function convertJsonDate(jsonDate) {
        // Check if jsonDate matches the format /Date(milliseconds)/
        const regex = /\/Date\((\d+)\)\//;
        const match = jsonDate.match(regex);

        if (match) {
            const timestamp = parseInt(match[1], 10);
            const date = new Date(timestamp);

            const year = date.getFullYear(); // Get the full 4-digit year

            const day = date.getDate();
            const month = date.getMonth() + 1; // Months are zero-indexed

            const formattedDate = `${day.toString().padStart(2, '0')}/${month.toString().padStart(2, '0')}/${year.toString().padStart(4, '0')}`;

            return formattedDate;
        } else {
            // Handle the case where jsonDate doesn't match the expected format.
            return jsonDate; // You can return the input as is or handle it differently.
        }
    }

        function ResetButton(ele) {

            fn_incentive_initialLoad();

        }
        function customValidation() {
           // debugger
            let vrbl = true;
            let from= $('input[name="FromDate"]').val();
            let To = $('input[name="ToDate"]').val();
            if (from > To) {
                vrbl = false;
                $('#FromDate-error').text(`From Date can't be greater than To Date`)
               
            } else {
                $('#FromDate-error').text('')
            }
            return vrbl;
    }
    function getfunction() {
        let x = document.getElementById("exppdf");
        x.style.display = "none";

    }
    function clearfield(fld) {
        //debugger

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        if (fld == "ReportType") {
            $('select[name="DesignationID"] option:selected').val('');
              let user = '@ViewBag.Admin';
            let manager = '@ViewBag.Manager';
            let branch = '@ViewBag.FK_Branch';
        if (user == 'True' || manager == 'True') {
            $('input[name="EmployeeID"]').val('');
            $('input[name="Employee"]').val('');
            $('select[name="BranchID"] option:selected').val('');
        }
        else
        {
           
            $('input[name="EmployeeID"]').val('@ViewBag.FK_Employee');
            $('input[name="Employee"]').val('@ViewBag.Employee');
            $('select[name="BranchID"] option:selected').val('@ViewBag.FK_Branch');
        }
          
        }
        else if (fld == "Branch") {

            $('select[name="DesignationID"] option:selected').val('');

                if (user == 'True' || manager == 'True') {
            $('input[name="EmployeeID"]').val('');
                    $('input[name="Employee"]').val('');
                    $('select[name="BranchID"] option:selected').val('');
        }
        else
        {
           
            $('input[name="EmployeeID"]').val('@ViewBag.FK_Employee');
            $('input[name="Employee"]').val('@ViewBag.Employee');
            $('select[name="BranchID"] option:selected').val('@ViewBag.FK_Branch');
        }
           
        } else if (fld == "Desigination") {
     
                   if (user == 'True' || manager == 'True') {
            $('input[name="EmployeeID"]').val('');
                       $('input[name="Employee"]').val('');
                       $('select[name="BranchID"] option:selected').val('');
        }
        else
        {
           
            $('input[name="EmployeeID"]').val('@ViewBag.FK_Employee');
            $('input[name="Employee"]').val('@ViewBag.Employee');
          $('select[name="BranchID"] option:selected').val('@ViewBag.FK_Branch');
        }
           
        }


    }
    function reportchange() {
        //debugger
        let mode = $('select[name="ID_Report"] option:selected').val();


        var currentDate = new Date();


        var day = currentDate.getDate();
        var month = currentDate.getMonth() + 1; // Months are zero-indexed, so we add 1
        var year = currentDate.getFullYear();

        // Create a formatted date string
        var formattedDate = day.toString().padStart(2, '0') + '/' + month.toString().padStart(2, '0') + '/' + year;

        // Output the formatted date
        console.log(formattedDate);




        if (mode == 2) {
            $('.DivASonDate').show()
            $('.DivToDate').hide()
            $('.DivFromDate').hide();

        } else {
            $('.DivASonDate').hide()
            $('.DivToDate').show()
            $('.DivFromDate').show()
       
        };
    };
    function formatechange(inputDate) {
        // Input date in yyyy-MM-dd format
        //var inputDate = "2023-09-01";

        // Split the input date into year, month, and day
        var parts = inputDate.split("-");
        var year = parts[0];
        var month = parts[1];
        var day = parts[2];

        // Create a formatted date string in dd/mm/yyyy format
        var formattedDate = day + '/' + month + '/' + year;

        console.log(formattedDate); // Output: "01/09/2023"
        return formattedDate
    }

    $(document).ready(function () {
       
        Getdepartmentdefault(this);
        //fn_showFiltersearch()  //new line
    });
       function Getdepartmentdefault() {
        let $thisForm = $('[perfect-class="form"]');
        $.ajax({
            url: '@Url.Action("GetEmployeeLeadDefault", "ServiceReport")',
            type: "Get",
            dataType: "json",
            contentType: "application/json",
            success: function (ajaxOutput) {//<----- if ajax method executed succesfully,  we get the data passed from controller in this variable  => success: function (variable) {

                if (ajaxOutput.Process.IsProcess) {
                    //var stateModel = createSelectList({ data: ajaxOutput.Data, hideColumn: ['EmpID'] });
                    $.each(ajaxOutput.Data, function (key, value) {

                        console.log('>_ Search button > list click', value);

                        $thisForm.find('[name=BranchID]').val(value.ID_Branch).selectpicker('refresh');
                        $thisForm.find('[name=DepartmentID]').val(value.FK_Department).selectpicker('refresh');
                        $thisForm.find('[name=FK_BranchMode]').val(value.FK_BranchMode);
                        let Mode = $thisForm.find('[name=FK_BranchMode]').val();
                        let user = '@ViewBag.Admin';
                     
                        console.log('user', user);
                        if (parseFloat(Mode) == 1 && user == 'True') {
                            $thisForm.find('[name=BranchID]').val(value.ID_Branch).selectpicker('refresh');
                            $('#BranchID').prop('disabled', false);
                        }
                        else {
                            $('#BranchID').prop('disabled', true);
                        }


                    });




                }
                else {
                    $.each(ajaxOutput.Process.Message, function (key, value) {
                        NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                    });
                }

            },


        });
    }
</script>
<script src="~/Scripts/jspdf.min.js"></script>
<script src="~/Scripts/jspdf.plugin.autotable.min.js"></script>
<script src="~/Scripts/exportFile.js"></script>
<script src="~/Scripts/xlsx.min.js"></script>