

@model PerfectWebERP.Models.IncentiveSettingsModal.IncentiveSettingsList
<div class="card">
    <div class="card-header">
        @*<h4 class="card-title col-12">@ViewBag.PageTitle</h4>*@
        <h4 class="card-title col-12">Incentive Settings</h4>
        <span title="To View List" onclick="fn_showListView();"><svg id="Layer_1" class="layer" stroke="currentColor" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" height="20" width="20" viewBox="0 0 122.88 122.54"><title>To View List</title><path class="viewlst" d="M4.69,0H46.22a4.71,4.71,0,0,1,4.69,4.69V46a4.69,4.69,0,0,1-4.69,4.69H4.69a4.65,4.65,0,0,1-3.31-1.38l-.09-.09A4.67,4.67,0,0,1,0,46V4.69A4.71,4.71,0,0,1,4.69,0ZM89.44,61.94a26.56,26.56,0,0,1,10.18,2l.07,0a26.61,26.61,0,0,1,15.25,32.16,26.18,26.18,0,0,1-2.7,6.11l10.3,11.24a1.27,1.27,0,0,1-.07,1.8l-7.57,6.9a1.27,1.27,0,0,1-1.79-.07l-9.86-10.85a26.36,26.36,0,0,1-6.1,2.74,26.87,26.87,0,0,1-7.71,1.13,26.51,26.51,0,0,1-10.17-2l-.07,0A26.64,26.64,0,0,1,64.85,78.37l0-.07A26.6,26.6,0,0,1,89.44,61.94Zm15,11.59a21.38,21.38,0,0,0-6.89-4.61l-.06,0a21.22,21.22,0,0,0-23.07,4.64l-.07.07a21.25,21.25,0,0,0-4.54,6.83l0,.06a21.32,21.32,0,0,0-1.58,8.06,21.26,21.26,0,0,0,29.35,19.62,21.54,21.54,0,0,0,6.89-4.61l.07-.07a21.09,21.09,0,0,0,4.54-6.83l0-.06a21.35,21.35,0,0,0,0-16.17,21.34,21.34,0,0,0-4.62-6.9ZM4.69,63.2H46.22a4.71,4.71,0,0,1,4.69,4.7v41.34a4.68,4.68,0,0,1-4.69,4.69H4.69A4.69,4.69,0,0,1,0,109.24V67.9a4.71,4.71,0,0,1,4.69-4.7ZM68.78,0h41.53A4.71,4.71,0,0,1,115,4.69V46a4.71,4.71,0,0,1-4.69,4.69H68.78A4.71,4.71,0,0,1,64.09,46V4.69a4.69,4.69,0,0,1,1.37-3.31l.1-.09A4.67,4.67,0,0,1,68.78,0Z"></path></svg></span>
    </div>
    <div class="card-body">
        <form id="" class="form-valide" perfect-class="form" action="#" method="post" perfect-onFormSuccess="">
            <div class="">
                @Html.AntiForgeryToken()
                <div class="row">



                    @*<div class="col-sm-6">
            <div class="form-group row" perfect-class="formGroup">
                <label class="col-sm-4 col-form-label">
                    <span perfect-class="formGroupLabel">Employee Name</span>
                    <span class="text-danger">*</span>
                </label>
                <div class="col-sm-8">
                    <input type="text" class="form-control perfectValidate_name" placeholder="" name="EmployeeName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                </div>
            </div>
        </div>*@

                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel"> Effect Date</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="date" class="form-control perfectValidate_date" name="EffectDate" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" />
                                <input type="hidden" name="ID_AuthorizationLevel" />
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Designation</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <select class="form-control perfectValidate_numeric" name="DesignationID" id="DesignationID" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" data-live-search="true" onchange="onChangeCriteria('DesignationID')">

                                    <option value="">Please Select </option>

                                    @if (!(Model.DesignationList is null))
                                    {
                                        foreach (var designationList in Model.DesignationList)
                                        {
                                            <option value="@designationList.DesignationID">@designationList.Designation</option>
                                        }

                                    }

                                </select>
                            </div>
                        </div>
                    </div>
                    @*<div class="col-sm-6">
            <div class="form-group row" perfect-class="formGroup">
                <label class="col-sm-4 col-form-label">
                    <span perfect-class="formGroupLabel">Department</span>
                    <span class="text-danger">*</span>
                </label>
                <div class="col-sm-8">
                    <select class="form-control perfectValidate_numeric" name="DepartmentID" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" data-live-search="true" perfect-selectButton="Add Department" perfect-selectButtonAction="DepartmentAdding">

                        <option value="">Please Select </option>

                        @if (!(Model.DepartmentList is null))
                    {
                        foreach (var departmentList in Model.DepartmentList)
                        {
                            <option value="@departmentList.DepartmentID">@departmentList.Department</option>
                        }

                    }

                    </select>
                </div>
            </div>
        </div>*@
                    @*<div class="col-sm-4">
            <div class="form-group row" perfect-class="formGroup">
                <label class="col-sm-4 col-form-label">Employee</label>
                <div class="input-group col-sm-8">
                    <input type="text" class="form-control " name="EmployeeSearch" perfect-class="formGroupControl" placeholder="Select Employee" perfect-ctype="input" perfect-css="input" disabled />
                    <input type="hidden" name="FK_EmployeeSearch" class="form-control " perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                    <div class="input-group-append">
                        <button id="addarea-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchValAssign(this,6,'Employee List',[])" form="formassign" Criterea1="0" Criterea2="0" BindName="EmployeeSearch" BindVal="FK_EmployeeSearch" Function="1"></button>
                    </div>

                </div>

            </div>

        </div>*@


                    <div class="col-sm-4 DivEmployeeName">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">

                                <span perfect-class="formGroupLabel">Employee</span>

                            </label>

                            <div class="col-sm-8">
                                <div class="input-group">
                                    <input type="text" class="form-control " name="Employee" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled />
                                    <input type="hidden" id="EmployeeID" name="EmployeeID" class="perfectValidate_numeric_nm" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                    <div class="input-group-append">
                                        @*<button id="addemployee-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="getEmployeeDepartmentlist(this)" Criterea1="0" Criterea2="0" BindName="FromName" BindVal="FromNameID"></button>*@

                                        <button id="employeefromid" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchValAssign(this,117,'Employee List',['',''],['FK_Department'])" Criterea1="0" Criterea2="0" BindName="Employee" BindVal="EmployeeID" Criterea3="DesignationID" Function="1"></button>


                                    </div>
                                </div>

                            </div>
                        </div>
                    </div>

                    <div class="col-sm-4 DivAccountHead">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">

                                <span perfect-class="formGroupLabel">Account Head</span>
                                @*<span class="text-danger" id="accountHead_mand">*</span>*@
                            </label>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <input type="text" class="form-control " name="AHeadName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled />
                                    <input type="hidden" class="form-control" name="AccountHead" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                    <input type="hidden" name="AccountCode" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                    <div class="input-group-append">
                                        <button id="btn btn-primary fa fa-search" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchVal(this,16,'Account Head List',['','','AccountHeadSub','ASHeadName'])" Criterea1="0" Criterea2="0" BindName="AHeadName" BindVal="AccountHead" Function="1"></button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4 DivAccountSubHead">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Account Sub Head</span>

                            </label>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <input type="text" class="form-control " name="ASHeadName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled />
                                    <input type="hidden" name="AccountHeadSub" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                    <input type="hidden" name="AccountSHCode" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                    <div class="input-group-append">
                                        <button id="btn btn-primary fa fa-search" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchVal(this,17,'Account Sub Head List',['AHeadName','AHeadName'])" Criterea1="AccountHead" Criterea2="0" BindName="ASHeadName" BindVal="AccountHeadSub" Function="1"></button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4 DivIsActive">
                        <div class="form-check form-check-inline" perfect-class="formCheck">
                            <label class="form-check-label" perfect-class="formCheckLabel">
                                <span perfect-class="formCheckInputText">Is Active  </span>&nbsp;&nbsp;&nbsp; <input type="checkbox" class="form-check-input checkoption" name="IsAcitve" perfect-class="formCheckInput" perfect-ctype="checkbox" perfect-css="checkbox" checked="checked" onchange="setActive(this)">
                            </label>
                        </div>
                    </div>
                    </div>

                    @*////*@
                    <div class="row">
                        <div class="col-sm-12">
                            <div class="daccordion__header">
                                <span class="accordion__header--text">Settings Details</span>
                            </div>
                            <div class="row">
                                <div class="col-sm-12 " perfect-class="TempTableAuthorizationLevel">
                                    <br />

                                    <div class="row">
                                        <input type="hidden" name="FK_Id" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" perfect-tempTable-IncentiveSettings="FK_Id" />
                                        <div class="col-sm-4">
                                            <div class="form-group row" perfect-class="formGroup">
                                                <label class="col-sm-4 col-form-label">

                                                    <span perfect-class="formGroupLabel">Category</span>
                                                    <span class="text-danger">*</span>
                                                </label>
                                                <div class="col-sm-8" onclick="onChangeCriteria('FK_Category')">
                                                    <select class="form-control " name="FK_Category" id="Categoryid" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" data-live-search="true" perfect-tempTable-IncentiveSettings="FK_Category" onchange="GetServiceList(this)">

                                                        <option value="">Please Select </option>

                                                        @if (!(Model.CategoryList is null))
                                                        {
                                                            foreach (var categorylist in Model.CategoryList)
                                                            {
                                                                <option value="@categorylist.CategoryID">@categorylist.Category</option>
                                                            }

                                                        }

                                                    </select>
                                                    <div class="text-danger temptableError"></div>

                                                </div>

                                            </div>
                                        </div>


                                        <div class="col-sm-4">
                                            <div class="form-group row" perfect-class="formGroup">
                                                <label class="col-sm-4 col-form-label">
                                                    <span perfect-class="formGroupLabel">Product</span>
                                                    @*<span class="text-danger">*</span>*@
                                                </label>
                                                <div class="col-sm-8">
                                                    <div class="input-group">
                                                        <input type="text" class="form-control " name="Product" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled perfect-tempTable-IncentiveSettings="Product" />
                                                        <input type="hidden" name="FK_Product" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" perfect-tempTable-IncentiveSettings="FK_Product" />

                                                        <div class="input-group-append">

                                                            <button id="addproduct-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchValAssign(this,85,'Product List',[],['MinRate','MaxRate'])" Criterea1="FK_Category" Criterea2="0" BindName="Product" BindVal="FK_Product"></button>

                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        @*<div class="col-sm-4">
            <div class="form-group row" perfect-class="formGroup">
                <label class="col-sm-4 col-form-label">
                    <span perfect-class="formGroupLabel">Service</span>
                    <span class="text-danger">*</span>
                </label>
                <div class="col-sm-8">
                    <select class="form-control Subproduct" name="ServiceID" perfect-class="formGroupControl" data-id="subtableservice-error" onchange="Setservice(this)" perfect-ctype="select" perfect-css="select" perfect-tempTable-cstatus="ServiceID">
                        <option value="">Please Select </option>
                        @if (!(Model.ServiceList is null))
                        {
                            foreach (var services in Model.ServiceList)
                            {
                                <option value="@services.ServiceID">@services.ServiceList</option>
                            }
                        }
                    </select>
                    <div id="subtableservice-error" class="invalid-feedback animated fadeInUp  temptableError" style="display: none;"></div>
                </div>

            </div>

        </div>*@
                                        <div class="col-sm-4" id="service" style="display:block">
                                            <div class="form-group row" perfect-class="formGroup">
                                                <label class="col-sm-4 col-form-label">
                                                    <span perfect-class="formGroupLabel">Service</span><span class="text-danger">*</span>
                                                </label>
                                                <div class="col-sm-8 ">
                                                    <select class="form-control product " name="FK_Service" id="FK_Service" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" perfect-tempTable-IncentiveSettings="FK_Service">
                                                        <option value="">Please Select </option>
                                                    </select>
                                                    <div class="invalid-feedback animated fadeInUp limit-check" style="display: block;"></div>
                                                    <div class="text-danger temptableError"></div>
                                                </div>

                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">


                                        <div class="col-sm-4">
                                            <div class="form-group row" perfect-class="formGroup">
                                                <label class="col-sm-4 col-form-label">

                                                    <span perfect-class="formGroupLabel">Calculation Type</span>
                                                    <span class="text-danger">*</span>
                                                </label>
                                                <div class="col-sm-8">
                                                    <select class="form-control " name="Commitiontype" id="Commitiontype" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" data-live-search="true" onchange="onCommisssionType()" perfect-tempTable-IncentiveSettings="Commitiontype">

                                                        <option value="">Please Select </option>
                                                        <option value="1">Amount </option>
                                                        <option value="2">Percentage</option>

                                                    </select>
                                                    <div class="text-danger temptableError"></div>
                                                </div>

                                            </div>
                                        </div>

                                        <div class="col-sm-4 amountDiv">
                                            <div class="form-group row" perfect-class="formGroup">
                                                <label class="col-sm-4 col-form-label">
                                                    <span perfect-class="formGroupLabel" id="committionTypeName">Amount </span>
                                                    <span class="text-danger">*</span>
                                                </label>
                                                <div class="col-sm-8">
                                                    <div class="input-group">
                                                        <input type="text"  class="form-control text-right"  name="Amount" id="Amount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" perfect-tempTable-IncentiveSettings="Amount" maxlength="12"  oninput="decimalpnt(this,'Amount',3)"/>
                                                       

                                                    </div>
                                                    <span class="temptableError" id="err-amount"></span>
                                                </div>

                                            </div>
                                        </div>

                                        
                                        <div class="col-sm-4">
                                            <div class="form-group row" perfect-class="formGroup">
                        
                                                <div class="col-sm-4">
                                                    <button class="btn btn-primary1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" title="Add New Product" onclick="fn_createIncentiveSettingsTable(this,'IncentiveSettings',[])"><i class="fa fa-plus" aria-hidden="true"></i></button>

                                                    <button class="btn btn-light1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" onclick="fn_resetNumberGItem(this)"><i class="fa fa-refresh" aria-hidden="true"></i></button>




                                                </div>
                                            </div>

                                        </div>

                                    </div>


                                    <div class="card-footer text-right" perfect-class="formFooter">

                                    </div>
                                    <div class="row">
                                        <div class="col-sm-12" style="padding-right:25px;padding-left:25px;">
                                            <div class="form-group row" perfect-class="formGroup">
                                                <div class="table-responsive" perfect-tempTable="IncentiveSettings" id="AuthorizationLevelItemHead" perfect-tempTable-lastindex="0" perfect-tempTable-action="0"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>

            @*<div class="card-footer text-right" perfect-class="formFooter">

            @if (ViewBag.PagedAccessRights.UsrrlMsEdt)
            {
                <button id="" type="button" class="btn btn-primary mr-3 addcompany-jq-addnewuserUpdate d-none" name="update" perfect-css="button" onclick="fn_UpdateAuthorizationlevel(this,'update')"><i class="fa fa-refresh fa-spin loaderClass"></i>Update</button>
            }
            @if (ViewBag.PagedAccessRights.UsrrlMsAdd)
            {
                <button id="addcompany-jq-addnewuser" type="button" class="btn btn-primary mr-3 " name="add" perfect-css="button" onclick="fn_UpdateAuthorizationlevel(this,'new')"><i class="fa fa-refresh fa-spin loaderClass "></i>Save</button>
            }
            <button type="button" class="btn btn-light" perfect-css="button" onclick="fn_resetAuthorizationlevel(this)" name="reset">Clear</button>
        </div>*@

            <div class="card-footer text-right" perfect-class="formFooter">

                <button id="update" type="button" class="btn btn-primary mr-3 addcompany-jq-addnewuserUpdate d-none" name="update" perfect-css="button" onclick="fn_UpdateIncentiveSettings(this,'update')"><i class="fa fa-refresh fa-spin  loaderClass"></i>Update</button>
                <button id="addcompany-jq-addnewuser" type="button" class="btn btn-primary mr-3 " name="add" perfect-css="button" onclick="fn_UpdateIncentiveSettings(this,'new')" data-target=".bd-example-modal-lg"><i class="fa fa-refresh fa-spin loaderClass "></i>Save</button>
                <button type="button" class="btn btn-light" perfect-css="button" onclick="ResetButton(this)" id="reset" name="reset">Clear</button>
            </div>
        </form>
    </div>

</div>


<script>
 //on load functions
 $(document).ready(function ()
 {
	initFunctions('form');
 });
    

function fn_fillSubModule(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let $actionDropdown = $thisForm.find('[name="SubModule"]');
        $actionDropdown.empty();
        $actionDropdown.append($('<option/>', { value: '' }).text('Please select')).selectpicker('refresh');
        let inputData =
        {
            __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
            'FK_MenuGroup': $thisForm.find('[name=FK_Module]').val()
        };

        $.ajax({
            url: "@Url.Action("FillMenuWithoutParent", "Menu")",
            type: "POST",
            dataType: "json",
            data: inputData,
            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            success: function (ajaxOutput) {
                if (ajaxOutput.length > 0) {
                    $.each(ajaxOutput, function (key, value) {
                        $actionDropdown.append($('<option/>', { value: value.ID_MenuList }).text(value.MnuLstName)).selectpicker('refresh');
                    });
                    if ($actionDropdown.attr('perfect-onloadSelect')) {
                        $actionDropdown.val($actionDropdown.attr('perfect-onloadSelect')).selectpicker('refresh')
                    }
                }
                else {
                    $.each(ajaxOutput.Process.Message, function (key, value) {
                        NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                    });
                }
            }
        });
    }

  function fn_getUserlist(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
      let $actionDropdown = $thisForm.find('[name="FK_User"]');
        $actionDropdown.empty();
        $actionDropdown.append($('<option/>', { value: '' }).text('Please select')).selectpicker('refresh');

        let inputData = {
            __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
            FK_UserRole: parseInt($thisForm.find('[name=FK_UserGroup]').val())
        };

        $.ajax({
            url: "@Url.Action("GetUserList", "IncentiveSettings")",
            type: "POST",
            dataType: "json",
            data: inputData,
            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            success: function (ajaxOutput) {
                if (ajaxOutput.Process.IsProcess) {
                    $.each(ajaxOutput.Data, function (key, value) {
                        $actionDropdown.append($('<option/>', { value: value.UserID }).text(value.UserName)).selectpicker('refresh');
                    });
                    if ($actionDropdown.attr('perfect-onloadSelect')) {
                        $actionDropdown.val($actionDropdown.attr('perfect-onloadSelect')).selectpicker('refresh')
                    }
                }
            }
        });
    }



    var tableOptionsTempOut = {
        iconButton: {
            buttons: [

                {
                    icon: "fa fa-pencil btnPerfectGridEdit",
                    action: function () {
                        let savedData = $(this).closest('tr').data('pData')
                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let tableKey = $tablecontainer.attr('perfect-tempTable');
                        let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                        let indexname = tableKey + 'index';
                        let rindex = $(this).closest('tr').attr(indexname);
                        $tablecontainer.attr('perfect-tempTable-action', rindex);
                        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                            let $thisNode = $(this);
                            let pf_name = $thisNode.attr('name');
                            if ($thisNode.is('select')) {
                                $thisNode.val(savedData[pf_name]).selectpicker('refresh');
                            }
                            else if ($thisNode.is('input')) {

                                if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                    $thisNode.prop('checked', savedData[pf_name]);
                                }
                                else {
                                    $thisNode.val(savedData[pf_name]);
                                }
                            }
                            else {
                                $thisNode.val(savedData[pf_name]);
                            }
                        });
                        onCommisssionTypeTrigger();
                    }
                },
                {
                    icon: "fa fa-trash btnPerfectGridDelete",
                    action: function () {
                        let $thistbl = $(this).closest('table');
                        let table = $thistbl.DataTable();
                        table.destroy();
                        if ($(this).closest('tbody').find('tr').length > 1) {
                            $(this).closest('tr').remove();
                            pft_table_slreset($thistbl);
                            $thistbl.dataTable({ paging: true });
                        }
                        else {
                            $thistbl.remove();
                        }
                    }
                },
            ]
        },
        onlyShowColumn: [],
        hideColumn: ['FK_Product','FK_Id'],
        serialNo: true,
        renameHeader: { },
        rowAttribute: [],
        isCheckType: []



    };
    function fn_createIncentiveSettingsTable(element, tkey, uniq = []) {
        debugger
        let $thisForm = $(element).closest('[perfect-class="form"]');

        let tableKey = tkey;
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');

        
        let insertData = {};
        let tableOptionsTemp = tableOptionsTempOut;

        let unique = (uniq) ? uniq : [];

        let isValid = true;
        let errorClass = '.temptableError';
        

        let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
        let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
        let indexname = tkey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);
        let updateCond = '';
        let isNew = true;

        if (thisactionIndex > 0) {
            insertData[indexname] = thisactionIndex;
            updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
            isNew = false;
        }
        else {
            insertData[indexname] = lastIndex + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
            isNew = true;
        }

        

        //Validation befoer adding  to table
        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="FK_Category"]').val().length == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="FK_Category"]').val().length == null) {
            isValid = false;

            $thisForm.find('[perfect-tempTable-' + tableKey + '="FK_Category"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please select category');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="FK_Category"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }

        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="FK_Service"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="FK_Service"]').val() == null) {
            isValid = false;

            $thisForm.find('[perfect-tempTable-' + tableKey + '="FK_Service"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please select Service');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="FK_Service"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }

        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Commitiontype"]').val().length == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="Commitiontype"]').val().length == null) {
            isValid = false;

            $thisForm.find('[perfect-tempTable-' + tableKey + '="Commitiontype"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please select Calculation Type');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="Commitiontype"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }

     
        if (parseInt($('select[name="Commitiontype"] option:selected').val()) == 1) {
            if (($thisForm.find('[perfect-tempTable-' + tableKey + '="Amount"]').val().length == 0) || ($thisForm.find('[perfect-tempTable-' + tableKey + '="Amount"]').val().length == null) || ($thisForm.find('[perfect-tempTable-' + tableKey + '="Amount"]').val() == 0)) {
                isValid = false;
                $thisForm.find('[perfect-tempTable-' + tableKey + '="Amount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please enter valid amount');
            }
            else {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="Amount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }
        }
        else if (parseInt($('select[name="Commitiontype"] option:selected').val()) == 2) {
            if (($thisForm.find('[perfect-tempTable-' + tableKey + '="Amount"]').val().length == 0) || ($thisForm.find('[perfect-tempTable-' + tableKey + '="Amount"]').val().length == null) || (Number.parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="Amount"]').val()) > 100) || ($thisForm.find('[perfect-tempTable-' + tableKey + '="Amount"]').val() == 0)) {
                isValid = false;
                $thisForm.find('[perfect-tempTable-' + tableKey + '="Amount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please enter Valid Percentage');
            }
            else {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="Amount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }
        }
        //else {
        //    $thisForm.find('[perfect-tempTable-' + tableKey + '="Amount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please enter a Valid Percentage / Amount');
        //}
        


        let prevData = [];
        $tblcontainer.find('table > tbody').find('tr').each(function () {
            if (isNew) {
                prevData.push($(this).data('pData'));
            }
            else {
                if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                    prevData.push($(this).data('pData'));
                }
            }

        })

        let checkCategory = $('select[name="FK_Category"] option:selected').val();
        let checkProduct = $('input[name="FK_Product"]').val();

       
        prevData.forEach((i) => {
                if ((i.FK_Category == checkCategory && i.FK_Product == 0 )||( i.FK_Category == checkCategory && i.FK_Product != 0 && checkProduct == 0 )||( i.FK_Category == checkCategory && i.FK_Product == checkProduct)) {
                    isValid = false;
                    $thisForm.find('[perfect-tempTable-' + tableKey + '="FK_Category"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Category already selected');
                }

            })

       

        if (isValid) {
            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                if ($this.is('select')) {
                    switch (headerName) {
                        case "FK_Category":
                            headerName = "Category";
                            break;
                        case "FK_Service":
                            headerName = "Service";
                            break;
                        case "Commitiontype":
                            headerName = "Calculation Type ";
                            break;
                        default:
                            break
                    }
                    debugger
                    tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                    tableOptionsTemp.hideColumn.push(nameAttr)
                    if ($this.val() != null) {
                        let selectText = ($this.val().length == 0) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    else {
                        let selectText = ($this.val() == null) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    insertData[nameAttr] = $this.val();

                    $this.val('').selectpicker('refresh');
                }
                else if ($this.is('input')) {

                    let inputType = $this.attr('type').toLocaleLowerCase();

                    if (inputType == 'checkbox') {

                        insertData[nameAttr] = $this.is(':checked');

                        tableOptionsTemp.isCheckType.push(nameAttr)
                        $this.prop('checked', false);

                    }
                    else if (inputType == 'hidden') {
                        insertData[nameAttr] = $this.val();
                        $this.val('');

                    }

                    else {

                        if (nameAttr == "Product" && $this.val()=="") {
                            insertData[nameAttr] = "All Product";

                            $this.val('');
                        }
                        else if (nameAttr == "Percentage" || nameAttr == "Amount") {
                            debugger
                            insertData[nameAttr] = $this.val() == '' ? $this.val(): formatAmount( $this.val());

                            $this.val('');
                        }
                        else{
                            insertData[nameAttr] = $this.val();

                            $this.val('');
                        }
                        

                    }
                }
                else {
                    insertData[nameAttr] = $this.val();

                    $this.val('');
                }
            });
            console.log(insertData,'insertData////////???ln788')

            if (isNew) {
                if ($tblcontainer.find('table').length == 0) {
                    $tblcontainer.append(pft_table_createtable([insertData], tableOptionsTemp));
                }
                else {
                    let table = $tblcontainer.find('table').DataTable()
                    table.destroy()
                    pft_table_addTableRow($tblcontainer.find('table'), insertData, tableOptionsTemp);
                }
            }
            else {
                let table = $tblcontainer.find('table').DataTable()
                table.destroy();
               
                pft_table_replaceTableRow($tblcontainer.find('table'), updateCond, insertData, tableOptionsTemp);
                isModifed = false;
            }
            $('.amountDiv').hide();
            $tblcontainer.attr('perfect-tempTable-action', 0);
            $thisForm.find('[name="AldAmountTo"]').attr('readonly', true);
        }
    }

//to save data
    function fn_UpdateIncentiveSettings(element,actionType)
    {
        debugger
        let $thisForm = $(element).closest('[perfect-class="form"]');
        if ($thisForm.valid())
        {
            customValidation();
            let $errorMsg = '';
            let $blnSuccess = false;
                    $(element).prop('disabled', true);


            let authorizationItems = [];
            $thisForm.find('[perfect-tempTable="IncentiveSettings"]').find('tbody').find('tr').each(function () {
                authorizationItems.push($(this).data('pData'));
            })



            if (authorizationItems.length <= 0) {
                $blnSuccess = false;
                $errorMsg = 'Please Fill Incentive Details';
            }
            else {
                $blnSuccess = true;
            }

            let _ID_Authorization = 0;
                    let _ActionUrl = "";

                    if (actionType === "new") {
                      //  _ID_Authorization = 0;
                        _ActionUrl = "@Url.Action("SaveEmployeedata", "IncentiveSettings")";    
                    }
                    else if (actionType === "update") {
                       // _ID_Authorization = $thisForm.find('[name="ID_AuthorizationLevel"]').val();
                        _ActionUrl = "@Url.Action("UpdateIncetiveSettings", "IncentiveSettings")";
                    }


                    let inputData = {
                        __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                        EffectDate: $('input[name="EffectDate"]').val(),
                        Designation: $('select[name="DesignationID"] option:selected').val(),
                        Employee: $('input[name="EmployeeID"]').val(),
                        AccountHead: $('input[name="AccountHead"]').val(),
                        AccountHeadSub:$('input[name="AccountHeadSub"]').val(),
                        IsActive: $('input[name="IsAcitve"]').prop('checked'),
                        ID_ServiceIncentiveSettings: ID_ServiceIncentiveSettings,
                        'SubIncentiveData': authorizationItems
            };

            if ($blnSuccess)
                            {
                               $.ajax({
                                         url: _ActionUrl,
                                         type: "POST",
                                         data: inputData,
                                         dataType: "json",
                                         contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                                         success: function (ajaxOutput) {
                                             console.log(ajaxOutput, 'ajaxOutput ...>>ln808')
                                             debugger
                                             if (ajaxOutput.IsProcess) {
                                                 $.each(ajaxOutput.Message, function (key, value) {
                                                     NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                                                     $(element).prop('disabled', false);
                                                    // LoadAddIncentive();
                                                     fn_incentive_initialLoad();
                                                 });
                                             }
                                             else {
                                                 $.each(ajaxOutput.Message, function (key, value) {
                                                     NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                                     $(element).prop('disabled', false);
                                                    // LoadAddIncentive();
                                                     fn_incentive_initialLoad();
                                                 });
                                             }

                                             $thisForm.find('[perfect-ctype="select"]').val('').selectpicker('refresh');
                                             $thisForm.find('[perfect-ctype="input"]').val('');
                                             $thisForm.find('[perfect-ctype="date"]').val('');
                                             let onSuccess = $thisForm.attr('perfect-onFormSuccess')
                                             if (onSuccess) {
                                                 window[onSuccess]();

                                             }
                                         },
                                         complete: function ()
                                         {
                                                $(element).prop('disabled', false);
                                         }
                                    });
                            }
                            else
                            {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': $errorMsg });
                        $(element).prop('disabled', false);
                            }
        }
    }
    function fn_resetAuthorizationlevel(ele)
    {
        AuthorizationlevelInitialLoad();
    }
      function fn_selectBranch(ele)
        {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let $actionDropdown = $thisForm.find('[name="BranchID"]');
        $actionDropdown.empty();
        $actionDropdown.append($('<option/>', { value: '' }).text('Please select')).selectpicker('refresh');
        let branchtypeid = {
            BranchTypeID: $thisForm.find('[name=BranchTypeID]').val()
        }
             $.ajax({
                     url: "@Url.Action("GetBranchList", "Users")",
                    type: "POST",
                    data: branchtypeid,
                    dataType: "json",
                    contentType: "application/x-www-form-urlencoded;charset=utf-8",
                     success: function (ajaxOutput) {
                         if (ajaxOutput.Process.IsProcess) {
                             $.each(ajaxOutput.Data, function (key, value) {
                                 $actionDropdown.append($('<option/>', { value: value.BranchID }).text(value.Branch)).selectpicker('refresh');
                             });
                             if ($actionDropdown.attr('perfect-onloadSelect')) {
                                 $actionDropdown.val($actionDropdown.attr('perfect-onloadSelect')).selectpicker('refresh')
                             }
                         }
                         else {
                             $.each(ajaxOutput.Process.Message, function (key, value) {
                                 NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                             });
                         }
                     }
             });
        }
    function fn_getSelectionCriteria(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        fn_setSelectedCriteriaData($thisForm);
    }
    function fn_setSelectedCriteriaData($thisForm) {
        let sel = $thisForm.find('[name=FK_AmountCriteria] option:selected').text();
        let id = parseInt($thisForm.find('[name="FK_AmountCriteria"]').val());

        if (sel != 'Please select') {

            switch (id) {
                case 7:
                    $thisForm.find('[name="AldAmountTo"]').attr('readonly', false);
                    break;
                default:
                    $thisForm.find('[name="AldAmountTo"]').val('');
                    $thisForm.find('[name="AldAmountTo"]').attr('readonly', true);
                    break;
            }
        }
    }


    function GetServiceList(ele) {
       debugger

        $('input[name="FK_Product"]').val(0);
        $('input[name="Product"]').val('');
        $('select[name="FK_Service"] option:selected').val('0').selectpicker('refresh');


        let $thisForm = $(ele).closest('[perfect-class="form"]');

        
      //  if (!$thisForm.find('[name="FK_Category"]').val()) {
        let $menuDropdown = $thisForm.find('[name=FK_Service]');//<--- Will give place select html element

        $menuDropdown.attr('perfect-onSelectLoad', '');

        $menuDropdown.empty();
                $menuDropdown.append($('<option/>', { value: '0' }).text('Please select')).selectpicker('refresh');
           // return
       // }

        ///test
        //let $thisForm = $(ele).closest('[perfect-class="form"]');
        //let $actionDropdown = $thisForm.find('[name="FK_Service"]');
        //$actionDropdown.empty();
        //$actionDropdown.append($('<option/>', { value: '' }).text('Please select')).selectpicker('refresh');

        ///test

        let inputdata = { prdid: parseInt($thisForm.find('[name="FK_Category"]').val())}
        
         

       $.ajax({
            url: '@Url.Action("GetServiceList", "IncentiveSettings")',
            type: "POST",
           data: inputdata ,//<---- Input json : data passed to controller
            dataType: "json",
            contentType: 'application/x-www-form-urlencoded;charset=utf-8',
            success: function (ajaxOutput) {

                console.log(ajaxOutput, 'GetServiceList');

                    if (ajaxOutput.Process.IsProcess) {

                        $.each(ajaxOutput.Data, function (key, value) {
                            $menuDropdown.append($('<option/>', { "value": value.ID_Services }).text(value.ServicesName)).selectpicker('refresh')
                        });

                        if ($menuDropdown.attr('perfect-onloadSelect')) {
                            $menuDropdown.val($menuDropdown.attr('perfect-onloadSelect')).selectpicker('refresh');
                            
                            $menuDropdown.attr('perfect-onSelectLoad', '');
                        }
                        //if (serval != 0) {
                        //    $thisForm.find('[name="FK_Service"]').val(serval).selectpicker('refresh');
                        //}
                        

                    }
                    else {
                        $.each(ajaxOutput.Process.Message, function (key, value) {

                            NotificationMessage({ 'type': 'warning', 'heading': 'warning', 'message': 'Service Records not found' });
                        });
                    }
            },
            complete: function () {


            }
        });

    }
  

    function onCommisssionType() {
        $('#err-amount').text('');

        let type = $('select[name="Commitiontype"] option:selected').val();
        $('input[name="Amount"]').val(0);
        if (type == 1) {
            $('.amountDiv').show();
           
            $('#committionTypeName').text("Amount");
        } else if (type == 2) {
            $('.amountDiv').show();
           
            $('#committionTypeName').text("Percentage");
        } else {
            $('.amountDiv').hide();
        }
    };
    function onCommisssionTypeTrigger() {
        let type = $('select[name="Commitiontype"] option:selected').val();
      
        if (type == 1) {
            $('.amountDiv').show();
            $('#committionTypeName').text("Amount");
        } else if (type == 2) {
            $('.amountDiv').show();
            $('#committionTypeName').text("Percentage");
        } else {
            alert()
            $('.amountDiv').hide();
        }
    };


    function saveData(els) {
        let $thisForm = $(els).closest('[perfect-class="form"]');
        
        if ($thisForm.valid()) {
            customValidation();
            alert('')
            var obj = {
                Designation: $('select[name="DesignationID"] option:selected').val(),
                Employee: $('input[name="EmployeeID"]').val(),
                Category: $('select[name="FK_Category"] option:selected').val(),
                Product: $('input[name="FK_Product"]').val(),
                Service: $('select[name="FK_Service"] option:selected').val(),
                Commitiontype: $('select[name="Commitiontype"] option:selected').val(),
                Amount: $('input[name="Amount"]').val(),
             
            };

            $.ajax({
                url: '@Url.Action("SaveEmployeedata", "IncentiveSettings")',
                type: "POST",
                data: obj,//<---- Input json : data passed to controller
                dataType: "json",
                contentType: 'application/x-www-form-urlencoded;charset=utf-8',
                success: function (ajaxOutput) {

                    alert('')

                    if (ajaxOutput.Process.IsProcess) {

                        ////

                    }
                    else {
                        $.each(ajaxOutput.Process.Message, function (key, value) {

                            NotificationMessage({ 'type': 'warning', 'heading': 'warning', 'message': 'Service Records not found' });
                        });
                    }
                },
                complete: function () { }

            });

        } else {
            /////
        }
    };

    function customValidation(){
        let type = $('select[name="Commitiontype"] option:selected').val();
       
        if (type == 1) {
            if (!$('input[name="Amount"]').val()) {
                $('#err-amount').html('This field is required.')

            } else {
                $('#err-amount').html('');
            }
            
        } else if (type == 2) {
            if (!$('input[name="Percentage"]').val()) {
                $('#err-percentage').html('This field is required.')
            } else {
                $('#err-percentage').html('');
            } 
        }
    }

    function ResetButton() {
        LoadAddIncentive();
    }
    function fn_resetNumberGItem(ele) {                                                                                                            


       

        let tablekey = "incentiveSettings";

        let $thisform = $(ele).closest('[perfect-class="form"]');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="select"]').val('').selectpicker('refresh');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="date"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="hidden"]').val('');
        let $tblcontainer = $thisform.find('[perfect-tempTable="' + tablekey + '"]');
        $tblcontainer.attr('perfect-tempTable-action', 0);

        isModifed = false;
    }
     function trigerCategory(els,num) {
        let $thisForm = $(els).closest('[perfect-class="form"]');            
        var returnName = '';
        let inputdata = { prdid: num}
       $.ajax({
            url: '@Url.Action("GetServiceList", "IncentiveSettings")',
            type: "POST",
           data: inputdata ,//<---- Input json : data passed to controller
            dataType: "json",
            contentType: 'application/x-www-form-urlencoded;charset=utf-8',
            success: function (ajaxOutput) {

                console.log(ajaxOutput,'ajaxOutput>>trier category')
             
                    if (ajaxOutput.Process.IsProcess) {

                        $.each(ajaxOutput.Data, function (key, value) {
                            debugger
                            if (value.ID_Services == num) {
                                returnName = value.ServicesName;
                            }
                           
                        });
                        $('select[name="FK_Service"]')[0].setAttribute('data-tabledta', returnName)
                        v.set
                        return returnName;
                    }
                    else {
                        $.each(ajaxOutput.Process.Message, function (key, value) {

                            NotificationMessage({ 'type': 'warning', 'heading': 'warning', 'message': 'Service Records not found' });
                        });
                }
                
                
            },
            complete: function () {


            }
        });

    }
    function onChangeCriteria(crt) {
       
        if (crt == "DesignationID") {
            $('input[name="EmployeeID"]').val(0);
            $('input[name="Employee"]').val('')
        } else if (crt == "FK_Category") {
            $('input[name="FK_Product"]').val(0);
            $('input[name="Product"]').val('');
            $('select[name="FK_Service"] option:selected').val(0);
            $('select[name="FK_Service"]').attr('perfect-onloadselect', 0);
        }

    };
    
    //let dateInput1 = $('input[name = "EffectDate"]')[0];
    //let today = new Date().toISOString().split('T')[0];
    //dateInput1.min = today;
    //dateInput1.addEventListener('blur', checkSelectedDate);

    //function checkSelectedDate() {
        
    //    const selectedDate = new Date(dateInput1.value);
    //    const currentDate = new Date();

    //    if (selectedDate < currentDate) {
    //        dateInput1.setCustomValidity('Selected date should not be a previous date.');
    //    } else {
    //        dateInput1.setCustomValidity('');
    //    }
    //}

    function setActive() {
        //var currentCheckedState = $('input[name="IsActive"]').prop('checked');
        //$('input[name="IsActive"]').prop('checked', !currentCheckedState);
    }
    function formatAmount(amount) {
     
        const floatValue = parseFloat(amount);
        const formattedAmount = floatValue.toFixed(2);
        return formattedAmount;
    }



    function decimalpnt(ele, id, range) {
        debugger
        let input = $('#' + id);

        ele.value = ele.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');
        let t = ele.value;
        ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t;

        $(document).on('keydown', '#' + id, function (event) {

            if (ele.value.includes('.')) {

            }
            var key = event.keyCode || event.charCode;
            if (key == 8 || key == 46) { }
            else {
                if (ele.value.indexOf('.') < 0 && ele.value.indexOf('.') !== 9 && ele.value.length > 8) {
                    ele.value = ele.value + '.';
                }
            }

        });

    }

</script>



