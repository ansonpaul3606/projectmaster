@model PerfectWebERP.Models.IncentiveSettingsMasterModel.IncentiveSettingsViewlist
<style>
    .tableFixHead {
        overflow: auto;
        height: 210px;
        /*height:auto;*/
    }

        .tableFixHead thead tr {
            position: sticky;
            top: 0;
            z-index: 1;
        }

    table {
        border-collapse: collapse;
        width: 100%;
    }

    th, td {
        padding: 8px 16px;
    }

    th {
        background: var(--perfect-primary);
    }
</style>
<div class="card ">

    <div class="card-header">


        <h4 class="card-title col-12">@ViewBag.PageTitle</h4>
        <span title="To View List" onclick="fn_showListView();"><svg id="Layer_1" class="layer" stroke="currentColor" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" height="20" width="20" viewBox="0 0 122.88 122.54"><title>To View List</title><path class="viewlst" d="M4.69,0H46.22a4.71,4.71,0,0,1,4.69,4.69V46a4.69,4.69,0,0,1-4.69,4.69H4.69a4.65,4.65,0,0,1-3.31-1.38l-.09-.09A4.67,4.67,0,0,1,0,46V4.69A4.71,4.71,0,0,1,4.69,0ZM89.44,61.94a26.56,26.56,0,0,1,10.18,2l.07,0a26.61,26.61,0,0,1,15.25,32.16,26.18,26.18,0,0,1-2.7,6.11l10.3,11.24a1.27,1.27,0,0,1-.07,1.8l-7.57,6.9a1.27,1.27,0,0,1-1.79-.07l-9.86-10.85a26.36,26.36,0,0,1-6.1,2.74,26.87,26.87,0,0,1-7.71,1.13,26.51,26.51,0,0,1-10.17-2l-.07,0A26.64,26.64,0,0,1,64.85,78.37l0-.07A26.6,26.6,0,0,1,89.44,61.94Zm15,11.59a21.38,21.38,0,0,0-6.89-4.61l-.06,0a21.22,21.22,0,0,0-23.07,4.64l-.07.07a21.25,21.25,0,0,0-4.54,6.83l0,.06a21.32,21.32,0,0,0-1.58,8.06,21.26,21.26,0,0,0,29.35,19.62,21.54,21.54,0,0,0,6.89-4.61l.07-.07a21.09,21.09,0,0,0,4.54-6.83l0-.06a21.35,21.35,0,0,0,0-16.17,21.34,21.34,0,0,0-4.62-6.9ZM4.69,63.2H46.22a4.71,4.71,0,0,1,4.69,4.7v41.34a4.68,4.68,0,0,1-4.69,4.69H4.69A4.69,4.69,0,0,1,0,109.24V67.9a4.71,4.71,0,0,1,4.69-4.7ZM68.78,0h41.53A4.71,4.71,0,0,1,115,4.69V46a4.71,4.71,0,0,1-4.69,4.69H68.78A4.71,4.71,0,0,1,64.09,46V4.69a4.69,4.69,0,0,1,1.37-3.31l.1-.09A4.67,4.67,0,0,1,68.78,0Z"></path></svg></span>


    </div>
    <div class="card-body Customer_rp">
        <form id="" class="form-valide" perfect-class="form" action="#" method="post" perfect-onformsuccess="AccountsReportInitialLoad" novalidate="novalidate">
            <div class="CustomerReportfilters">
                <div class="">
                    <div class="row">

                        <div class="col-sm-4">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label ">
                                    <span perfect-class="formGroupLabel">Incentive Type</span>
                                    <span class="text-danger">*</span>
                                </label>
                                <div class="col-sm-8 ">

                                    <select class="form-control perfectValidate_string" id="FK_IncentiveType" name="FK_IncentiveType" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" onchange="GetIncentiveActivity(this)">
                                        <option value="">Please select</option>
                                        @*<option value="1" Module="1">Type1</option>
                                            <option value="2" Module="2">Type2</option>
                                            <option value="3" Module="2">Type3</option>
                                            <option value="4" Module="1">Type4</option>*@
                                        @if (!(Model.IncentiveType is null))
                                        {
                                            foreach (var incentive in Model.IncentiveType)
                                            {
                                                <option value="@incentive.FK_IncentiveType" Module="@incentive.IncTModule">@incentive.Incentivetype</option>
                                            }
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-4">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    <span perfect-class="formGroupLabel">Effect Date</span>
                                    <span class="text-danger">*</span>
                                </label>
                                <div class="col-sm-8">
                                    <input type="date" class="form-control perfectValidate_date" id="INSEffectDate" name="INSEffectDate" data-id="INSEffectDate-error"  perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date">
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-4">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label ">
                                    <span perfect-class="formGroupLabel">Calculation Based on</span>
                                    <span class="text-danger">*</span>
                                </label>
                                <div class="col-sm-8 ">

                                    <select class="form-control perfectValidate_string" id="INSCalcBasedon" name="INSCalcBasedon" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select">
                                        @if (!(Model.CalculationBased is null))
                                        {
                                            foreach (var calc in Model.CalculationBased)
                                            {
                                                <option value="@calc.ID_Mode">@calc.ModeName</option>
                                            }
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-4">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label ">
                                    <span perfect-class="formGroupLabel">Incentive Calculation Type</span>
                                    <span class="text-danger">*</span>
                                </label>
                                <div class="col-sm-8 ">

                                    <select class="form-control perfectValidate_string" id="INSCalcType" name="INSCalcType" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" onchange="EnablePeriod(this)">
                                        @if (!(Model.CalculationType is null))
                                        {
                                            foreach (var calctype in Model.CalculationType)
                                            {
                                                <option value="@calctype.ID_Mode">@calctype.ModeName</option>
                                            }
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-4" id="Period">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    <span perfect-class="formGroupLabel">Incentive Period</span>
                                    <span class="text-danger" id="Periomandatory">*</span>
                                </label>
                                <div class="col-sm-8">
                                    <input type="text" class="form-control" id="INSPeriod" name="INSPeriod" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" onkeypress="return isNumberKey(event)" maxlength="5" min="1"/>
                                    <input type="hidden" class="form-control" id="FK_IncentiveSettings" name="FK_IncentiveSettings" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input"/>
                                    <input type="hidden" class="form-control" id="Dependency" name="Dependency" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                </div>
                            </div>
                        </div>

                        <div class="col-sm-4" id="DivINSActivity">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label ">
                                    <span perfect-class="formGroupLabel">Incentive Activity</span>
                                    <span class="text-danger">*</span>
                                </label>
                                <div class="col-sm-8 ">
                                    <input type="hidden" class="form-control" id="Activity" name="Activity" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                    <select class="form-control" id="INSActivity" name="INSActivity" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select"></select>
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-4" id="DivActive">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    Active
                                </label>
                                <div class="col-sm-3 col-form-label">
                                    &nbsp; &nbsp; &nbsp; &nbsp;
                                    <input type="checkbox" class="form-check-input" name="INSActive" perfect-class="formCheckInput" perfect-ctype="checkbox" perfect-css="checkbox" checked="checked"><span perfect-class="formCheckInputText"></span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row" id="DivProductDetails">
                    <div class="col-sm-12">
                        <div class="daccordion__header">
                            <span class="accordion__header--text">Details</span>
                        </div>
                        <br />
                        <div class="row" id="">
                            <div class="col-sm-4 DivCategory">
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-4 col-form-label">
                                        <span perfect-class="formGroupLabel">Category</span>

                                    </label>
                                    <div class="col-sm-8">
                                        <select class="form-control " name="Category" id="Category" perfect-class="formGroupControl" perfect-tempTable-IncSettings="Category"  perfect-ctype="select" perfect-css="select" onchange="ClearProduct(this)">
                                            <option value="">All</option>
                                            @if (!(Model.CategoryList is null))
                                            {
                                                foreach (var category in Model.CategoryList)
                                                {
                                                    <option value="@category.ID_Catg">@category.CatgName</option>
                                                }
                                            }
                                        </select>

                                    </div>
                                </div>
                            </div>
                            <div class="col-sm-4 DivProduct">
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-4 col-form-label rptfilterfields">
                                        <span perfect-class="formGroupLabel">Product</span>

                                    </label>
                                    <div class="col-sm-8">

                                        <div class="input-group">
                                            <input type="text" class="form-control " id="ProductName" name="ProductName" perfect-tempTable-IncSettings="ProductName" perfect-class="formGroupControl" placeholder=" Select Product" perfect-ctype="input" perfect-css="input" disabled />
                                            <input type="hidden" name="FK_Product" id="FK_Product" class="form-control" perfect-tempTable-IncSettings="FK_Product" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                            <div class="input-group-append">
                                                <button id="addproduct-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchVal(this,'29','Product List',[])" Criterea1="Category" Criterea2="0" BindName="ProductName" BindVal="FK_Product"></button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-sm-4">
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-4 col-form-label ">
                                        <span perfect-class="formGroupLabel">Incentive</span>
                                        <span class="text-danger">*</span>
                                    </label>
                                    <div class="col-sm-8">
                                        <input type="text" class="form-control " id="INSDIncentive" name="INSDIncentive" perfect-tempTable-IncSettings="INSDIncentive" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="decimalpnt(this,'INSDIncentive',3)" maxlength="12" />
                                        <span class="temptableError"></span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-sm-4">
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-4 col-form-label ">
                                        <span perfect-class="formGroupLabel">From</span>

                                    </label>
                                    <div class="col-sm-8">
                                        <input type="text" class="form-control " id="INSDFrom" name="INSDFrom" perfect-tempTable-IncSettings="INSDFrom" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="decimalpnt(this,'INSDFrom',3)" maxlength="12" />
                                        <span class="temptableError"></span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-sm-4">
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-4 col-form-label ">
                                        <span perfect-class="formGroupLabel">To</span>

                                    </label>
                                    <div class="col-sm-8">
                                        <input type="text" class="form-control " id="INSDTo" name="INSDTo" perfect-tempTable-IncSettings="INSDTo" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="decimalpnt(this,'INSDTo',3)" maxlength="12" />
                                        <span class="temptableError"></span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-sm-4">
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-4 col-form-label">
                                        Percentage
                                    </label>
                                    <div class="col-sm-3 col-form-label">
                                        &nbsp; &nbsp; &nbsp; &nbsp;
                                        <input type="checkbox" class="form-check-input" id="INSDPercentage" name="INSDPercentage" perfect-tempTable-IncSettings="INSDPercentage" perfect-class="formCheckInput" perfect-ctype="checkbox" perfect-css="checkbox"><span perfect-class="formCheckInputText"></span>
                                    </div>
                                    <div class="col-sm-5">
                                        <div class="float-right">
                                            <button class="btn btn-primary1" id="AddSettings" type="button" data-toggle="tooltip" data-placement="top" data-html="true" title="Add New Product" onclick="fn_createIncTable(this,'IncSettings',['StockId'],inctableOptionsTempOut)"><i class="fa fa-plus" aria-hidden="true"></i></button>
                                            <button class="btn btn-light1" id="IncSettingsReset" type="button" data-toggle="tooltip" data-placement="top" data-html="true" onclick="productclear(this,'IncSettings')"><i class="fa fa-refresh" aria-hidden="true"></i></button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-sm-12 mt-2">
                                <div class="table-responsive tableFixHead" perfect-tempTable="IncSettings" id="IncSettingsHeadItem" perfect-tempTable-lastindex="0" perfect-tempTable-action="0"></div>

                            </div>


                        </div>
                    </div>
                </div>
                <div class="card-footer text-right" perfect-class="formFooter">
                    <button id="UpdateIncentiveSettings" type="button" class="btn btn-primary mr-3 addcompany-jq-addnewuserUpdate d-none" name="update" perfect-css="button" onclick="fn_IncentiveSettingsForm_update(this,'update')"><i class="fa fa-refresh fa-spin loaderClass"></i>Update</button>
                    <button id="AddIncentiveSettings" type="button" class="btn btn-primary mr-3 " name="add" perfect-css="button" onclick="fn_IncentiveSettingsForm_update(this,'new')"><i class="fa fa-refresh fa-spin loaderClass "></i>Save</button>
                    <button type="button" class="btn btn-light" perfect-css="button" onclick="ResetButton(this)" name="reset">Clear</button>
                </div>
            </div>

            <br />

            <div id="divReportSection">

            </div>
        </form>
    </div>


</div>

<script>
    function ResetButton(ele) {
        fn_IncentiveStngsMasterIndex_initialLoad();
    }
    $(document).ready(function () {
        let $thisForm = $('[perfect-class="form"]');
        let CalculationType = $thisForm.find('[name="INSCalcType"]').val();
        let Module = $thisForm.find('[name=FK_IncentiveType]').children(":selected").attr('Module');

        if ($("#AddIncentiveSettings").is(":visible")) {
            $("#DivActive").hide();
        }
        else {
            $("#DivActive").show();
        }

        if (CalculationType == 1) {
            $('#Period *').prop("disabled", "disabled");
            $('#INSPeriod').val('');
            $('#INSPeriod').removeClass('perfectValidate_string');
            $('#Periomandatory').text('');

        }
        else {
            $('#Period *').prop('disabled', false);
            $('#INSPeriod').addClass('perfectValidate_string');
            $('#Periomandatory').text('*');
        }

        if (Module == 1) {
            $('#INSActivity').addClass('perfectValidate_string');
            $('#DivINSActivity').show();
        }
        else {
            $('#INSActivity').removeClass('perfectValidate_string');
            $('#DivINSActivity').hide();
        }
    });
    function EnablePeriod(ele) {
        let $thisForm = $('[perfect-class="form"]');
        let CalculationType = $thisForm.find('[name="INSCalcType"]').val();
        if (CalculationType == 1) {
            $('#Period *').prop("disabled", "disabled");
            $('#INSPeriod').val('');
            $('#INSPeriod').removeClass('perfectValidate_string');
            $('#Periomandatory').text('');
            $('#INSPeriod-error').text('');
        }
        else {
            $('#Period *').prop('disabled', false);
            $('#INSPeriod').addClass('perfectValidate_string');
            $('#Periomandatory').text('*');
        }
    }

    function GetIncentiveActivity(ele) {

        let $thisForm = $('[perfect-class="form"]');
        let Module = $thisForm.find('[name=FK_IncentiveType]').children(":selected").attr('Module');
        let $menuDropdown = $thisForm.find('[name=INSActivity]');//<--- Will give place select html element
        $menuDropdown.empty();
        //$menuDropdown.empty().selectpicker('refresh');
        if (Module == 1) {
            $('#INSActivity').addClass('perfectValidate_string');
            $('#DivINSActivity').show();

            $.ajax({
                url: '@Url.Action("GetIncentiveActivityList", "IncentiveSettingsMaster")',
                type: "GET",
                dataType: "json",
                contentType: 'application/x-www-form-urlencoded;charset=utf-8',
                success: function (ajaxOutput) {


                    if (ajaxOutput.Process.IsProcess) {

                        console.log(ajaxOutput.Data)
                        $.each(ajaxOutput.Data, function (key, value) {
                            $menuDropdown.append($('<option/>', { "value": value.ID_Mode }).text(value.ModeName)).selectpicker('refresh')
                        });

                        if ($menuDropdown.attr('perfect-onloadSelect')) {
                            $menuDropdown.val($menuDropdown.attr('perfect-onloadSelect')).selectpicker('refresh');
                            $menuDropdown.attr('perfect-onloadSelect', '');
                        }
                        if ($thisForm.find('[name="Activity"]').val() != "") {
                            $thisForm.find('[name="INSActivity"]').val($thisForm.find('[name="Activity"]').val()).selectpicker('refresh');

                        }
                    }

                },
                complete: function () {


                }
            });
        }
        else {
            $thisForm.find('[name="INSActivity"]').val(0).selectpicker('refresh');
            $('#INSActivity').removeClass('perfectValidate_string');
            $('#DivINSActivity').hide();
        }
    }
    function ClearProduct(ele) {
        let $thisForm = $('[perfect-class="form"]');
        $thisForm.find('[name="FK_Product"]').val('');
        $thisForm.find('[name="ProductName"]').val('');
    }
    var inctableOptionsTempOut = {
        iconButton: {
            buttons: [

                {
                    icon: "fa fa-pencil btnPerfectGridEdit",
                    action: function () {
                        let savedData = $(this).closest('tr').data('pData')
                        var dependency = $('[name="Dependency"]').val();
                        if (dependency == 1) {
                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': "Incentive Processed with this settings. Can't Edit" });
                        }
                        else {
                            let $tablecontainer = $(this).closest('[perfect-tempTable]');
                            let tableKey = $tablecontainer.attr('perfect-tempTable');
                            let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                            //index attribute name in table row
                            let indexname = tableKey + 'index';

                            //index number in table row
                            let rindex = $(this).closest('tr').attr(indexname);

                            $tablecontainer.attr('perfect-tempTable-action', rindex);

                            console.log('Editclick', savedData);
                            //filling data in available inputs
                            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                                let $thisNode = $(this);
                                let pf_name = $thisNode.attr('name');
                                if ($thisNode.is('select')) {
                                    $thisNode.val(savedData[pf_name]).selectpicker('refresh');
                                }
                                else if ($thisNode.is('input')) {
                                    let inputType = $thisNode.attr('type').toLocaleLowerCase();
                                    if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {
                                        $thisNode.prop('checked', savedData[pf_name]);
                                    }
                                    else {
                                        $thisNode.val(savedData[pf_name]);
                                    }
                                }
                                else {
                                    $thisNode.val(savedData[pf_name]);
                                }
                            });
                        }

                    }
                },
                {
                    icon: "fa fa-trash btnPerfectGridDelete",
                    action: function () {

                        var dependency = $('[name="Dependency"]').val();
                        if (dependency == 1) {
                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': "Incentive Processed with this settings. Can't Delete" });
                        }
                        else {
                            let $tablecontainer = $(this).closest('[perfect-tempTable]');
                            let $thistbl = $(this).closest('table');
                            let table = $thistbl.DataTable();
                            table.destroy();
                            if ($(this).closest('tbody').find('tr').length > 1) {
                                $(this).closest('tr').remove();
                                pft_table_slreset($thistbl);
                                //$thistbl.dataTable({ paging: true, searchbtn: false });
                            }
                            else {
                                $thistbl.remove();
                            }
                            $("#IncSettingsReset").click();
                        }

                    }
                },
            ]
        },

        rowAttribute: [],
        onlyShowColumn: ['FK_Category_d', 'Category_d','ProductName', 'INSDFrom', 'INSDIncentive', 'INSDFrom', 'INSDTo','INSDPercentage'],
        renameHeader: { "Category_d": "Category", "ProductName": "Product","INSDIncentive":"Incentive", "INSDFrom": "From", "INSDTo": "To", "INSDPercentage":"Percentage"},
        hideColumn: ['FK_Product'],
        isCheckType: [],
        serialNo: true,

    }

    function fn_createIncTable(ele, tkey, uniq = []) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let tableKey = tkey;
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');

        let insertData = {};
        let tableOptionsTemp = inctableOptionsTempOut;


        let unique = (uniq) ? uniq : [];

        let isValid = true;
        let errorClass = '.temptableError';

        //make index
        console.log('check 1');

        let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
        let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
        let indexname = tkey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);
        console.log('tableOptionsTemp.rowAttribute', tableOptionsTemp.rowAttribute)
        let updateCond = '';
        let isNew = true;

        if (thisactionIndex > 0) {
            //means update
            insertData[indexname] = thisactionIndex;
            updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
            isNew = false;
        }
        else {
            //insert
            insertData[indexname] = lastIndex + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
            isNew = true;
        }
        //


        let prevData = [];
        $tblcontainer.find('table > tbody').find('tr').each(function () {
            if (isNew) {
                prevData.push($(this).data('pData'));
            }
            else {
                if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                    prevData.push($(this).data('pData'));
                }
            }

        })

        if (tableKey == 'IncSettings') {

            isValid = ValidateIncentiveDetails(prevData, tableKey, isValid, ele);
        }

        //if (prevData.find(a => a['StockId'] == $('[name=StockId]').val() && a['ProductID'] == $('[name=ProductID]').val())) {
        //    //NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Product Already Exists' });
        //    $thisForm.find('[perfect-tempTable-Sales="ProductID"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('Product Already Exists');
        //    isValid = false;
        //}
        //else {
        //    $thisForm.find('[perfect-tempTable-Sales="ProductID"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
        //}


        if (isValid) {


            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');

                console.log('headerName', headerName);


                if ($this.is('select')) {
                    switch (headerName) {
                        case "Category_d":
                            headerName = "Category";
                            break;
                        case "Category":
                            headerName = "Category";
                            break;
                        default:
                            headerName = headerName;
                            break;
                    }
                    tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                    tableOptionsTemp.hideColumn.push(nameAttr)
                    //displat text of select
                    if ($this.val() != null) {
                        let selectText = ($this.val().length == 0) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    else {
                        let selectText = ($this.val() == null) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }

                    insertData[nameAttr] = $this.val();

                    $this.val('').selectpicker('refresh');

                }
                else if ($this.is('input')) {

                    //insertData[nameAttr] = $this.val();
                    //console.log('insertData[nameAttr]', insertData[nameAttr])
                    //if (nameAttr == "prodtid") { }
                    //else if (nameAttr == "stkid") { }
                    //else { $this.val(''); }

                    let inputType = $this.attr('type').toLocaleLowerCase();
                    if (inputType == 'checkbox') {
                        insertData[nameAttr] = $this.is(':checked');
                        tableOptionsTemp.isCheckType.push(nameAttr)
                        $this.prop('checked', false);
                    }
                    else if (inputType == 'hidden') {
                        tableOptionsTemp.hideColumn.push(nameAttr)
                        insertData[nameAttr] = $this.val();
                        $this.val('');
                    }
                    else if (inputType == 'date') {
                        insertData[nameAttr] = $this.val();
                        $this.val('');
                    }
                    else {
                        insertData[nameAttr] = $this.val();
                        $this.val('');
                    }


                }

                if (headerName == 'INSDPercentage' && insertData[nameAttr] == false) {
                    insertData[nameAttr] = false;
                }
                else if ($this.val() == 'on' && headerName == 'INSDPercentage') {
                    insertData[nameAttr] = true;
                }
            });

            console.log('check 4.2', insertData);
            console.log('check 4.2 tableoption', tableOptionsTemp);

            if (isNew) {
                console.log('check 4.2.1');
                //this section nake table.table row
                if ($tblcontainer.find('table').length == 0) {
                    console.log('check 4.2.3');
                    console.log(insertData);
                    console.log(',tableOptionsTemp', tableOptionsTemp)
                    $tblcontainer.append(pft_table_createtable([insertData], tableOptionsTemp));
                }
                else {
                    console.log('check 4.2.1');
                    let table = $tblcontainer.find('table').DataTable()
                    table.destroy()
                    pft_table_addTableRow($tblcontainer.find('table'), insertData, tableOptionsTemp);
                }
            }
            else {
                let table = $tblcontainer.find('table').DataTable()
                table.destroy()
                pft_table_replaceTableRow($tblcontainer.find('table'), updateCond, insertData, tableOptionsTemp);
            }

            console.log(insertData);
            // resetting the edit value
            $tblcontainer.attr('perfect-tempTable-action', 0);

        }
    }

    function ValidateIncentiveDetails(Prevdata = [], tableKey, isValid, ele) {
        let prevdata = Prevdata;
        console.log("ARRAY DATA>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", prevdata)
        debugger
        let $thisForm = $('[perfect-class="form"]');

        let From = $thisForm.find('[perfect-tempTable-' + tableKey + '="INSDFrom"]').val() == "" ? "" : $thisForm.find('[perfect-tempTable-' + tableKey + '="INSDFrom"]').val();
        let To = $thisForm.find('[perfect-tempTable-' + tableKey + '="INSDTo"]').val() == "" ? "" : $thisForm.find('[perfect-tempTable-' + tableKey + '="INSDTo"]').val();
        let Incentive = $thisForm.find('[perfect-tempTable-' + tableKey + '="INSDIncentive"]').val() == "" ? "" : $thisForm.find('[perfect-tempTable-' + tableKey + '="INSDIncentive"]').val();

        if ((parseFloat(To) < parseFloat(From)) && (parseFloat(From) !== "" || parseFloat(From) > 0) && parseFloat(To) > 0) {
            $thisForm.find('[perfect-tempTable-IncSettings="INSDFrom"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
            $thisForm.find('[perfect-tempTable-IncSettings="INSDTo"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');

            $thisForm.find('[perfect-tempTable-IncSettings="INSDFrom"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('From Should be less than or equal to To');
            isValid = false;
        }
        else if (parseFloat(From) > 0 && (parseFloat(To) == 0 || To =="")) {
            $thisForm.find('[perfect-tempTable-IncSettings="INSDFrom"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
            $thisForm.find('[perfect-tempTable-IncSettings="INSDTo"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
            if (To == "") {
                $thisForm.find('[perfect-tempTable-IncSettings="INSDTo"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('Please Enter To Amount');
            }
            else if (parseFloat(To) == 0) {
                $thisForm.find('[perfect-tempTable-IncSettings="INSDTo"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('To Amount Should be greater than 0');
            }
            isValid = false;
        }
        else if (parseFloat(To) > 0 && (parseFloat(From) == 0 || From == "")) {
            $thisForm.find('[perfect-tempTable-IncSettings="INSDFrom"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
            $thisForm.find('[perfect-tempTable-IncSettings="INSDTo"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
            if (From == "") {
                $thisForm.find('[perfect-tempTable-IncSettings="INSDFrom"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('Please Enter From Amount');
            }
            else if (parseFloat(From) == 0) {
                $thisForm.find('[perfect-tempTable-IncSettings="INSDFrom"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('From Amount Should be greater than 0');
            }
            isValid = false;
        }
        else {
            $thisForm.find('[perfect-tempTable-IncSettings="INSDFrom"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
            $thisForm.find('[perfect-tempTable-IncSettings="INSDTo"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');

        }
        if (parseFloat(Incentive) == 0) {
            $thisForm.find('[perfect-tempTable-IncSettings="INSDIncentive"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('Incentive Amount Should be greater than 0');
            isValid = false;
        }
        else if (Incentive == "") {
            $thisForm.find('[perfect-tempTable-IncSettings="INSDIncentive"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('Please Enter Incentive');
            isValid = false;
        }
        else {
            $thisForm.find('[perfect-tempTable-IncSettings="INSDIncentive"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
        }
        if ($('#INSDPercentage').is(':checked')) {

            if ( parseFloat(Incentive) > 100) {
                $thisForm.find('[perfect-tempTable-IncSettings="INSDIncentive"]').closest('[perfect-class="formGroup"]').find('.temptableError').text(`Incentive is in Percentage and shouldn't greater than 100 `);
                isValid = false;
            }
        }
        if ($('[name=Category]').val() > 0 && $('[name=FK_Product]').val() > 0 && parseFloat(Incentive) > 0 && ((parseFloat(To) == 0 || To == "")) && (parseFloat(From) == 0 || From == "")) {
            if (prevdata.find(a => a['Category'] == $('[name=Category]').val() && a['FK_Product'] == $('[name=FK_Product]').val() /*&& parseFloat(a['INSDIncentive']) == parseFloat(Incentive)*/)) {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Settings Already Exists. ` });
                isValid = false;
            }
            //else if (prevdata.find(a => a['FK_Category'] == $('[name=FK_Category]').val() && a['FK_Product'] == "" && ((parseFloat(To) == 0 || To == "")) && (parseFloat(From) == 0 || From == ""))) {
            //    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Settings Already Exists. ` });
            //    isValid = false;
            //}
            else if (prevdata.find(a => a['Category'] == "" && a['FK_Product'] == $('[name=FK_Product]').val())) {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Settings for Same Product Already Exists. ` });
                isValid = false;
            }
            else {
                $thisForm.find('[perfect-tempTable-Sales="ProductID"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
            }
        }
        //else if ($('[name=FK_Category]').val() > 0 && $('[name=FK_Product]').val() > 0 && parseFloat(Incentive) > 0 && parseFloat(To) > 0 && parseFloat(From) > 0) {

        //    //else if (prevdata.find(a => a['FK_Category'] == "" && a['FK_Product'] == $('[name=FK_Product]').val())) {
        //    //    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Settings Already Exists. 20` });
        //    //    isValid = false;
        //    //}
        //}
        else if ($('[name=Category]').val() > 0 && $('[name=FK_Product]').val() == "" && parseFloat(Incentive) > 0 && ((parseFloat(To) == 0 || To == "")) && (parseFloat(From) == 0 || From == "")) {
            if (prevdata.find(a => a['Category'] == $('[name=Category]').val() && a['FK_Product'] == "")) {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Settings for Same Category Already Exists. ` });
                isValid = false;
            }
        }
        else if ($('[name=Category]').val() == "" && $('[name=FK_Product]').val() > 0 && parseFloat(Incentive) > 0 && ((parseFloat(To) == 0 || To == "")) && (parseFloat(From) == 0 || From == "")) {
            if (prevdata.find(a => a['FK_Product'] == $('[name=FK_Product]').val())) {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Settings for Same Product Already Exists. ` });
                isValid = false;
            }
        }
        else if ($('[name=Category]').val() == "" && $('[name=FK_Product]').val() == "" && parseFloat(Incentive) > 0 && ((parseFloat(To) == 0 || To == "")) && (parseFloat(From) == 0 || From == "")) {
            //if (prevdata.find(a => parseFloat(a['INSDFrom']) > 0 && parseFloat(a['INSDTo']) > 0 && a['Category'] == "" && a['FK_Product'] == "")) {
            //    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Settings Already Exists.` });
            //    isValid = false;
            //}
            //else
                if (prevdata.find(a => parseFloat(a['INSDIncentive']) == parseFloat(Incentive) && a['Category'] == $('[name=Category]').val() && a['FK_Product'] == $('[name=FK_Product]').val())) {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Settings Already Exists.` });
                isValid = false;
            }
                else if (prevdata.find(a => parseFloat(a['INSDIncentive']) != "" && a['INSDTo'] == "" && a['INSDFrom'] == "" && a['Category'] == "" && a['FK_Product'] == "") ) {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Settings Already Exists.` });
                isValid = false;
            }
        }
        else if ($('[name=Category]').val() == "" && $('[name=FK_Product]').val() == "" && parseFloat(Incentive) > 0 && parseFloat(To) > 0 && parseFloat(From) > 0) {
            //if (prevdata.find(a => a['INSDFrom'] == "" && a['INSDTo'] == "" && (a['Category'] == "" || a['FK_Product'] == ""))) {
            //    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Settings Already Exists.` });
            //    isValid = false;
            //}
            //else
            if (prevdata.find(a => parseFloat(a['INSDFrom']) <= parseFloat(From) && parseFloat(a['INSDTo']) >= parseFloat(To) && a['Category'] == "" && a['FK_Product'] == "")) {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Settings for ${From} to ${To} Already Exists.` });
                isValid = false;
            }
            else if (prevdata.find(a => parseFloat(a['INSDFrom']) > parseFloat(From) && parseFloat(a['INSDTo']) <= parseFloat(To) && a['Category'] == "" && a['FK_Product'] == "")) {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Settings Already Exists between ${From} and ${To}.` });
                isValid = false;
            }
            else if (prevdata.find(a => parseFloat(a['INSDFrom']) < parseFloat(From) && parseFloat(a['INSDTo']) < parseFloat(To) && parseFloat(a['INSDTo']) > parseFloat(From) && a['Category'] == "" && a['FK_Product'] == "")) {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Settings Already Exists for ${From}.` });
                isValid = false;
            }
            else if (prevdata.find(a => parseFloat(a['INSDFrom']) >= parseFloat(From) && parseFloat(a['INSDFrom']) < parseFloat(To))) {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Settings Already Exists between ${From} and ${To}.` });
                isValid = false;
            }
            else if (prevdata.find(a => parseFloat(a['INSDFrom']) < parseFloat(From) && parseFloat(a['INSDTo']) <= parseFloat(To) && parseFloat(a['INSDTo']) >= parseFloat(From) && a['Category'] == "" && a['FK_Product'] == "")) {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Settings Already Exists for ${From}.` });
                isValid = false;
            }
            else if (prevdata.find(a => parseFloat(a['INSDIncentive']) == parseFloat(Incentive) && a['Category'] == "" && a['FK_Product'] == "")) {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Settings Already Exists ` });
                isValid = false;
            }

        }
        else if ($('[name=Category]').val() > 0 && $('[name=FK_Product]').val() > 0 && parseFloat(Incentive) > 0 && parseFloat(To) > 0 && parseFloat(From) > 0) {
            if (prevdata.find(a => a['Category'] == $('[name=Category]').val() && a['FK_Product'] == $('[name=FK_Product]').val() /*&& parseFloat(a['INSDIncentive']) == parseFloat(Incentive)*/ && parseFloat(a['INSDFrom']) == parseFloat(From) && parseFloat(a['INSDTo']) == parseFloat(To))) {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Settings Already Exists. ` });
                isValid = false;
            }
            //else if (prevdata.find(a => a['FK_Category'] == $('[name=FK_Category]').val() && a['FK_Product'] == "")) {
            //    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Settings Already Exists. ` });
            //    isValid = false;
            //}


            else if (prevdata.find(a => a['Category'] == $('[name=Category]').val() && a['FK_Product'] == $('[name=FK_Product]').val() && a['INSDFrom'] == "" && a['INSDTo'] == "")) {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Settings Already Exists.` });
                isValid = false;
            }
            else if (prevdata.find(a => a['Category'] == $('[name=Category]').val() && a['FK_Product'] == $('[name=FK_Product]').val() && parseFloat(a['INSDFrom']) <= parseFloat(From) && parseFloat(a['INSDTo']) >= parseFloat(To))) {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Settings for ${From} to ${To} Already Exists.` });
                isValid = false;
            }
            else if (prevdata.find(a => a['Category'] == $('[name=Category]').val() && a['FK_Product'] == $('[name=FK_Product]').val() && parseFloat(a['INSDFrom']) > parseFloat(From) && parseFloat(a['INSDTo']) <= parseFloat(To))) {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Settings Already Exists between ${From} and ${To}.` });
                isValid = false;
            }
            else if (prevdata.find(a => a['Category'] == $('[name=Category]').val() && a['FK_Product'] == $('[name=FK_Product]').val() && parseFloat(a['INSDFrom']) < parseFloat(From) && parseFloat(a['INSDTo']) < parseFloat(To) && parseFloat(a['INSDTo']) > parseFloat(From))) {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Settings Already Exists for ${From}.` });
                isValid = false;
            }
            else if (prevdata.find(a => a['Category'] == $('[name=Category]').val() && a['FK_Product'] == $('[name=FK_Product]').val() && parseFloat(a['INSDFrom']) > parseFloat(From) && parseFloat(a['INSDFrom']) <= parseFloat(To))) {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Settings Already Exists for ${To}.` });
                isValid = false;
            }
            else if (prevdata.find(a => a['Category'] == $('[name=Category]').val() && a['FK_Product'] == $('[name=FK_Product]').val() && parseFloat(a['INSDFrom']) < parseFloat(From) && parseFloat(a['INSDTo']) <= parseFloat(To) && parseFloat(a['INSDTo']) >= parseFloat(From))) {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Settings Already Exists for ${From}.` });
                isValid = false;
            }


            else if (prevdata.find(a => a['Category'] == "" && a['FK_Product'] == $('[name=FK_Product]').val() && a['INSDFrom'] == "" && a['INSDTo'] == "")) {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Settings Already Exists.` });
                isValid = false;
            }
            else if (prevdata.find(a => a['Category'] == "" && a['FK_Product'] == $('[name=FK_Product]').val() && parseFloat(a['INSDFrom']) <= parseFloat(From) && parseFloat(a['INSDTo']) >= parseFloat(To))) {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Settings for ${From} to ${To} Already Exists.` });
                isValid = false;
            }
            else if (prevdata.find(a => a['Category'] == "" && a['FK_Product'] == $('[name=FK_Product]').val() && parseFloat(a['INSDFrom']) > parseFloat(From) && parseFloat(a['INSDTo']) <= parseFloat(To))) {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Settings Already Exists between ${From} and ${To}.` });
                isValid = false;
            }
            else if (prevdata.find(a => a['Category'] == "" && a['FK_Product'] == $('[name=FK_Product]').val() && parseFloat(a['INSDFrom']) < parseFloat(From) && parseFloat(a['INSDTo']) < parseFloat(To) && parseFloat(a['INSDTo']) > parseFloat(From))) {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Settings Already Exists for ${From}.` });
                isValid = false;
            }
            else if (prevdata.find(a => a['Category'] == "" && a['FK_Product'] == $('[name=FK_Product]').val() && parseFloat(a['INSDFrom']) > parseFloat(From) && parseFloat(a['INSDFrom']) <= parseFloat(To))) {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Settings Already Exists for ${To}.` });
                isValid = false;
            }
            else if (prevdata.find(a => a['Category'] == "" && a['FK_Product'] == $('[name=FK_Product]').val() && parseFloat(a['INSDFrom']) < parseFloat(From) && parseFloat(a['INSDTo']) <= parseFloat(To) && parseFloat(a['INSDTo']) >= parseFloat(From))) {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Settings Already Exists for ${From}.` });
                isValid = false;
            }
            else if (prevdata.find(a => a['Category'] == "" && a['FK_Product'] == $('[name=FK_Product]').val() && parseFloat(a['INSDFrom']) < parseFloat(From) && parseFloat(a['INSDTo']) <= parseFloat(To) && parseFloat(a['INSDTo']) >= parseFloat(From))) {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Settings Already Exists for ${From}.` });
                isValid = false;
            }
            else if (prevdata.find(a => a['Category'] == $('[name=Category]').val() && a['FK_Product'] == $('[name=FK_Product]').val() && parseFloat(a['INSDFrom']) >= parseFloat(From) && parseFloat(a['INSDFrom']) < parseFloat(To))) {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Settings Already Exists between ${From} and ${To}.` });
                isValid = false;
            }
        }
        else if ($('[name=Category]').val() == "" && $('[name=FK_Product]').val() > 0 && parseFloat(Incentive) > 0 && parseFloat(To) > 0 && parseFloat(From) > 0) {

            if (prevdata.find(a =>  a['FK_Product'] == $('[name=FK_Product]').val() && a['INSDFrom'] == "" && a['INSDTo'] == "")) {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Settings Already Exists.` });
                isValid = false;
            }
            //else if (prevdata.find(a => a['FK_Category'] !== "" && a['FK_Product'] == $('[name=FK_Product]').val())) {
            //    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Settings Already Exists.` });
            //    isValid = false;
            //}
            else if (prevdata.find(a =>  a['FK_Product'] == $('[name=FK_Product]').val() && parseFloat(a['INSDFrom']) <= parseFloat(From) && parseFloat(a['INSDTo']) >= parseFloat(To))) {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Settings for ${From} to ${To} Already Exists.` });
                isValid = false;
            }
            else if (prevdata.find(a =>  a['FK_Product'] == $('[name=FK_Product]').val() && parseFloat(a['INSDFrom']) > parseFloat(From) && parseFloat(a['INSDTo']) <= parseFloat(To))) {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Settings Already Exists between ${From} and ${To}.` });
                isValid = false;
            }
            else if (prevdata.find(a =>  a['FK_Product'] == $('[name=FK_Product]').val() && parseFloat(a['INSDFrom']) < parseFloat(From) && parseFloat(a['INSDTo']) < parseFloat(To) && parseFloat(a['INSDTo']) > parseFloat(From))) {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Settings Already Exists for ${From}.` });
                isValid = false;
            }
            else if (prevdata.find(a =>  a['FK_Product'] == $('[name=FK_Product]').val() && parseFloat(a['INSDFrom']) > parseFloat(From) && parseFloat(a['INSDFrom']) <= parseFloat(To))) {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Settings Already Exists for ${To}.` });
                isValid = false;
            }
            else if (prevdata.find(a =>  a['FK_Product'] == $('[name=FK_Product]').val() && parseFloat(a['INSDFrom']) < parseFloat(From) && parseFloat(a['INSDTo']) <= parseFloat(To) && parseFloat(a['INSDTo']) >= parseFloat(From))) {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Settings Already Exists for ${From}.` });
                isValid = false;
            }
            else if (prevdata.find(a => a['FK_Product'] == $('[name=FK_Product]').val() && parseFloat(a['INSDFrom']) >= parseFloat(From) && parseFloat(a['INSDFrom']) < parseFloat(To))) {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Settings Already Exists between ${From} and ${To}.` });
                isValid = false;
            }
        }
        else if ($('[name=Category]').val() > 0 && $('[name=FK_Product]').val() == "" && parseFloat(Incentive) > 0 && parseFloat(To) > 0 && parseFloat(From) > 0) {
            if (prevdata.find(a => a['Category'] == $('[name=Category]').val()  && a['INSDFrom'] == "" && a['INSDTo'] == "")) {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Settings Already Exists.` });
                isValid = false;
            }
            else if (prevdata.find(a => a['Category'] == $('[name=Category]').val() && a['FK_Product'] !=="")) {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Settings Already Exists.` });
                isValid = false;
            }
            else if (prevdata.find(a => a['Category'] == $('[name=Category]').val() && parseFloat(a['INSDFrom']) <= parseFloat(From) && parseFloat(a['INSDTo']) >= parseFloat(To))) {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Settings for ${From} to ${To} Already Exists.` });
                isValid = false;
            }
            else if (prevdata.find(a => a['Category'] == $('[name=Category]').val() && parseFloat(a['INSDFrom']) > parseFloat(From) && parseFloat(a['INSDTo']) <= parseFloat(To))) {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Settings Already Exists between ${From} and ${To}.` });
                isValid = false;
            }
            else if (prevdata.find(a => a['Category'] == $('[name=Category]').val() && parseFloat(a['INSDFrom']) < parseFloat(From) && parseFloat(a['INSDTo']) < parseFloat(To) && parseFloat(a['INSDTo']) > parseFloat(From))) {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Settings Already Exists for ${From}.` });
                isValid = false;
            }
            else if (prevdata.find(a => a['Category'] == $('[name=Category]').val() && parseFloat(a['INSDFrom']) > parseFloat(From) && parseFloat(a['INSDFrom']) <= parseFloat(To))) {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Settings Already Exists for ${To}.` });
                isValid = false;
            }
            else if (prevdata.find(a => a['Category'] == $('[name=Category]').val() && parseFloat(a['INSDFrom']) < parseFloat(From) && parseFloat(a['INSDTo']) <= parseFloat(To) && parseFloat(a['INSDTo']) >= parseFloat(From))) {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Settings Already Exists for ${From}.` });
                isValid = false;
            }
            else if (prevdata.find(a => a['Category'] == $('[name=Category]').val() && parseFloat(a['INSDFrom']) >= parseFloat(From) && parseFloat(a['INSDFrom']) < parseFloat(To))) {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Settings Already Exists between ${From} and ${To}.` });
                isValid = false;
            }
        }
        //Existency Checking

        //


        return isValid
    }

    function productclear(ele, tablekey) {

        let $thisform = $(ele).closest('[perfect-class="form"]');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="select"]').val('').selectpicker('refresh');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="date"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="hidden"]').val('');

        $thisform.find('[perfect-tempTable-IncSettings="INSDFrom"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
        $thisform.find('[perfect-tempTable-IncSettings="INSDTo"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
        $thisform.find('[perfect-tempTable-IncSettings="INSDIncentive"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');

        //let lastIndex = 0;
        //let $tblcontainer = $thisform.find('[perfect-tempTable="' + tablekey + '"]');
        //if ($tblcontainer.find("tbody tr").length > 0) {
        //    lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;

        //}

        //$tblcontainer.attr('perfect-tempTable-lastindex', lastIndex);

        let $tblcontainer = $thisform.find('[perfect-tempTable="' + tablekey + '"]');
        $tblcontainer.attr('perfect-tempTable-action', 0);
    }

    function fn_IncentiveSettingsForm_update(ele, actionType) {
        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        //if (datecheck(ele)) {
            if ($thisForm.valid()) {
                let savedData = $thisForm.data('pData');
                let _ActionUrl = "";
                let IncetiveSettingsID = 0;
                if (actionType === "new") {
                    IncetiveSettingsID = 0;
                    _ActionUrl = "@Url.Action("AddIncentiveSettings", "IncentiveSettingsMaster")";
                }
                else if (actionType === "update") {

                    IncetiveSettingsID = $thisForm.find('[name="FK_IncentiveSettings"]').val();
                    _ActionUrl = "@Url.Action("UpdateIncentiveSettings", "IncentiveSettingsMaster")";
                }
                let IncProData = [];
                let $tblcontainer = $thisForm.find('[perfect-tempTable="IncSettings"]');
                $thisForm.find('[perfect-tempTable="IncSettings"]').find('tbody').find('tr').each(function () {
                    IncProData.push($(this).data('pData'));
                })
                console.log("IncProData>>>>>>", IncProData)
                debugger

                if (IncProData.length > 0) {

                    $(ele).prop('disabled', true);
                    let inputData = {
                        __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                        'ID_IncentiveSettings': IncetiveSettingsID,
                        'TransMode': IncentiveStngsMasterTransMode,
                        'FK_IncentiveType': $thisForm.find('[name="FK_IncentiveType"]').val(),
                        'INSEffectDate': $thisForm.find('[name=INSEffectDate]').val(),
                        'INSCalcBasedon': $thisForm.find('[name=INSCalcBasedon]').val(),
                        'INSCalcType': $thisForm.find('[name="INSCalcType"]').val(),
                        'INSPeriod': $thisForm.find('[name="INSPeriod"]').val(),
                        'INSActivity': $thisForm.find('[name="INSActivity"]').val(),
                        'INSActive': $thisForm.find('[name="INSActive"]').is(':checked'),
                        'IncSettingsDetails': IncProData,
                        'Dependency': $thisForm.find('[name="Dependency"]').val(),
                    };
                    $.ajax({
                        url: _ActionUrl,
                        type: "POST",
                        data: inputData,
                        dataType: "json",
                        contentType: "application/x-www-form-urlencoded; charset=utf-8",
                        success: function (ajaxOutput) {

                            if (ajaxOutput.Process.IsProcess) {

                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                    NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                                });

                                // Get the value set in form's perfect-onFormSuccess attribute
                                let onSuccess = $thisForm.attr('perfect-onFormSuccess');

                                if (onSuccess) {
                                    $('.dataTable tr').removeClass("SelectForDelete");
                                    fn_IncentiveStngsMasterIndex_initialLoad();
                                }
                            }
                            else {
                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                    $(ele).prop('disabled', false);
                                });
                            }
                        },
                        complete: function () {
                            $(ele).prop('disabled', false);
                        }

                    });

                }
                else {
                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': "Add Atleaset one Incentive Settings Details" });
                }

            }
        //}
    }



    function isNumberKey(evt) {
        var charCode = (evt.which) ? evt.which : evt.keyCode;
        if (charCode > 31 && (charCode < 48 || charCode > 57))
            return false;

        return true;
    }
    function decimalpnt(ele, id, range) {
        debugger
        let input = $('#' + id);

        ele.value = ele.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');
        let t = ele.value;
        ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t;

        $(document).on('keydown', '#' + id, function (event) {

            if (ele.value.includes('.')) {

            }
            else if (ele.value === '.' && (event.key === '.' || event.keyCode === 190)) {
                ele.value = '0.00'; // Change the value to '0.00' if only a dot is entered
                // Prevent the dot from being entered in the input field
            }
            var key = event.keyCode || event.charCode;
            if (key == 8 || key == 46) { }
            else {
                if (ele.value.indexOf('.') < 0 && ele.value.indexOf('.') !== 9 && ele.value.length > 8) {
                    ele.value = ele.value + '.';
                }
            }

        });

    }

</script>
