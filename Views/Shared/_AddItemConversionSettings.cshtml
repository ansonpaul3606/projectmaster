@model PerfectWebERP.Models.ItemConversionSettingsModel.ItemConversionSettingsView


<div class="card">
    <div class="card-header">
        <h4 class="card-title col-12">@ViewBag.PageTitle </h4>

        <span title="To View List" onclick="fn_showListView();"><svg id="Layer_1" class="layer" stroke="currentColor" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" height="20" width="20" viewBox="0 0 122.88 122.54"><title>To View List</title><path class="viewlst" d="M4.69,0H46.22a4.71,4.71,0,0,1,4.69,4.69V46a4.69,4.69,0,0,1-4.69,4.69H4.69a4.65,4.65,0,0,1-3.31-1.38l-.09-.09A4.67,4.67,0,0,1,0,46V4.69A4.71,4.71,0,0,1,4.69,0ZM89.44,61.94a26.56,26.56,0,0,1,10.18,2l.07,0a26.61,26.61,0,0,1,15.25,32.16,26.18,26.18,0,0,1-2.7,6.11l10.3,11.24a1.27,1.27,0,0,1-.07,1.8l-7.57,6.9a1.27,1.27,0,0,1-1.79-.07l-9.86-10.85a26.36,26.36,0,0,1-6.1,2.74,26.87,26.87,0,0,1-7.71,1.13,26.51,26.51,0,0,1-10.17-2l-.07,0A26.64,26.64,0,0,1,64.85,78.37l0-.07A26.6,26.6,0,0,1,89.44,61.94Zm15,11.59a21.38,21.38,0,0,0-6.89-4.61l-.06,0a21.22,21.22,0,0,0-23.07,4.64l-.07.07a21.25,21.25,0,0,0-4.54,6.83l0,.06a21.32,21.32,0,0,0-1.58,8.06,21.26,21.26,0,0,0,29.35,19.62,21.54,21.54,0,0,0,6.89-4.61l.07-.07a21.09,21.09,0,0,0,4.54-6.83l0-.06a21.35,21.35,0,0,0,0-16.17,21.34,21.34,0,0,0-4.62-6.9ZM4.69,63.2H46.22a4.71,4.71,0,0,1,4.69,4.7v41.34a4.68,4.68,0,0,1-4.69,4.69H4.69A4.69,4.69,0,0,1,0,109.24V67.9a4.71,4.71,0,0,1,4.69-4.7ZM68.78,0h41.53A4.71,4.71,0,0,1,115,4.69V46a4.71,4.71,0,0,1-4.69,4.69H68.78A4.71,4.71,0,0,1,64.09,46V4.69a4.69,4.69,0,0,1,1.37-3.31l.1-.09A4.67,4.67,0,0,1,68.78,0Z"></path></svg></span>
    </div>

    <div class="card-body">
        <form id="" class="form-valide" perfect-class="form" action="#" method="post" perfect-onFormSuccess="">
            <div class="">

                <div class="row">
                    @Html.AntiForgeryToken()



                    <div class="col-sm-12">
                        <div class="row">
                            <div class="col-sm-12 " perfect-class="TempTableAuthorizationLevel">
                                <div class="row">

                                    <div class="col-sm-3">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">Effect Date</span>
                                                <span class="text-danger">*</span>
                                            </label>
                                            <div class="col-sm-8">
                                                <div class="input-group">
                                                    <input type="date" class="form-control perfectValidate_date"  name="EffectDate" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" max="2050-01-01" />

                                                </div><div class="invalid-feedback animated limit-checkst fadeInUp" style="display: block;"></div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-sm-3">

                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">From Item</span>
                                                <span class="text-danger">*</span>
                                            </label>
                                            <div class="col-sm-8">
                                                <div class="input-group">
                                                    <input type="text" class="form-control " perfect-tempTable-ItemConversionSettings="FromProdName" name="FromProdName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled />
                                                    <input type="hidden" perfect-tempTable-ItemConversionSettings="FK_ProductFrom" name="FK_ProductFrom" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                    <div class="input-group-append">
                                                        <button id="addEmployee-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchVal(this,40,'Product Details',[],'')" Criterea1="0" Criterea2="0" BindName="FromProdName" BindVal="FK_ProductFrom"></button>

                                                    </div>
                                                </div>
                                                <span class="temptableError"></span>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-sm-3">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">To Item</span>
                                                <span class="text-danger">*</span>
                                            </label>
                                            <div class="col-sm-8">
                                                <div class="input-group">
                                                    <input type="text" class="form-control " perfect-tempTable-ItemConversionSettings="ToProdName" name="ToProdName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled />
                                                    <input type="hidden" name="FK_ProductTo" perfect-tempTable-ItemConversionSettings="FK_ProductTo"  class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                    <div class="input-group-append">
                                                        <button id="addEmployee-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchVal(this,40,'Product Details',[],'')" Criterea1="0" Criterea2="0" BindName="ToProdName" BindVal="FK_ProductTo"></button>

                                                    </div>
                                                </div>
                                                <span class="temptableError"></span>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-sm-3">
                                        <button class="btn btn-primary1" type="button" id="idbutton1" data-toggle="tooltip" data-placement="top" data-html="true" title="Add Items" onclick="fn_createItemSettingsTable(this,'ItemConversionSettings',['FromProdName','ToProdName'],tableOptionsTempOut)"><i class="fa fa-plus" aria-hidden="true"></i></button>

                                        <button class="btn btn-light1" id="refresh" type="button" data-toggle="tooltip" data-placement="top" data-html="true" onclick="clearsubtableproduct(this,'ItemConversionSettings')">
                                            <i class="fa fa-refresh" aria-hidden="true"></i>
                                        </button>
                                    </div>

                                    <div class="col-sm-12" style="padding: 25px;">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <div class="table-responsive" perfect-tempTable="ItemConversionSettings" id="ItemTHead" perfect-tempTable-lastindex="0" perfect-tempTable-action="0"></div>
                                        </div>
                                    </div>
                                </div>


                            </div>

                        </div>
                    </div>
                </div>
            </div>

            <input type="hidden" class="form-control" placeholder="" name="ID_CostCenter" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />

            <div class="card-footer text-right" perfect-class="formFooter">
                @if (ViewBag.PagedAccessRights.UsrrlMsEdt)
                {
                    <button id="" type="button" class="btn btn-primary mr-3 addcompany-jq-addnewuserUpdate d-none" name="update" perfect-css="button" onclick="fn_UpdateItemSettings(this,'update')"><i class="fa fa-refresh fa-spin loaderClass"></i>Update</button>
                }

                @if (ViewBag.PagedAccessRights.UsrrlMsAdd)
                {
                    <button id="addcompany-jq-addnewuser" type="button" class="btn btn-primary mr-3 " name="add" perfect-css="button" onclick="fn_UpdateItemSettings(this,'Add')"><i class="fa fa-refresh fa-spin loaderClass "></i>Save</button>
                }
                <button type="button" class="btn btn-light" perfect-css="button" onclick="Reset()" name="reset">Clear</button>
            </div>


        </form>
    </div>

</div>

<script src="~/Scripts/jqDOM/searchDOMCreation.js"></script>
<script>

    (function () {
        jQuery("select").selectpicker();

    });
    $(document).ready(function () {

        initFunctions('form');
        //$('.select2').select2();
        $('#active-header_collapseTwo').addClass('collapse');
        $('#active-header_collapseTwo').addClass('show');

        let $thisForm = $(this).closest('[perfect-class="form"]');

    });


    function fn_createItemSettingsTable(element, tkey, uniq, tableOptionsTempOut) {

        let $thisForm = $(element).closest('[perfect-class="form"]');
        let tableKey = tkey;
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');

        let insertData = {};
        let tableOptionsTemp = tableOptionsTempOut;

        let unique = (uniq) ? uniq : [];

        let isValid = true;
        let isValidratecheck = true;
        let errorClass = '.temptableError';


        let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
        let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
        let indexname = tkey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);
        let updateCond = '';
        let isNew = true;

        if (thisactionIndex > 0) {
            insertData[indexname] = thisactionIndex;
            updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
            isNew = false;
        }
        else {
            insertData[indexname] = lastIndex + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
            isNew = true;
        }


        if (tableKey == 'ItemConversionSettings') {
            if ($thisForm.find('[perfect-tempTable-' + tableKey + '="FromProdName"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="FromProdName"]').val == null || $thisForm.find('[perfect-tempTable-' + tableKey + '="FromProdName"]').val == '') {
                isValid = false;
                console.log('false');
                $thisForm.find('[perfect-tempTable-' + tableKey + '="FromProdName"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select From Item');
            }
            else {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="FromProdName"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }

            if ($thisForm.find('[perfect-tempTable-' + tableKey + '="ToProdName"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="ToProdName"]').val == null || $thisForm.find('[perfect-tempTable-' + tableKey + '="ToProdName"]').val == '') {

                isValid = false;
                console.log('false');
                $thisForm.find('[perfect-tempTable-' + tableKey + '="ToProdName"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select To Item');
            }
            else {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="ToProdName"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }

        }


        let prevData = [];
        $tblcontainer.find('table > tbody').find('tr').each(function () {
            if (isNew) {
                prevData.push($(this).data('pData'));
            }
            else {
                if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                    prevData.push($(this).data('pData'));
                }
            }

        })
 
        if (prevData.some(a => a['FK_ProductFrom'] === $('[name=FK_ProductFrom]').val() && a['FK_ProductTo'] === $('[name=FK_ProductTo]').val())) {
            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Already Exists' });
            isValid = false;
        } else if ($('[name=FK_ProductFrom]').val() === $('[name=FK_ProductTo]').val()) {
            if ($('[name=FK_ProductFrom]').val() == "" || $('[name=FK_ProductFrom]').val() == 0 && $('[name=FK_ProductTo]').val() == "" || $('[name=FK_ProductTo]').val() == 0) {

            } else {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'From Item and To Item must be different.' });  
                isValid = false;
            }
          
        } else if (prevData.some(a => a['FK_ProductTo'] === $('[name=FK_ProductTo]').val())) {
            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'The same To Item may not be entered more than once.' });
            isValid = false;
        }
        else if (prevData.find(a => a['FK_ProductFrom'] != $('[name=FK_ProductFrom]').val() )) {
            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Multiple entries with the different From item are not allowed.' });
            isValid = false;
        }


        if (isValid && isValidratecheck) {
            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                if ($this.is('select')) {
                    switch (headerName) {
                        case "FK_Category":
                            headerName = "Category";
                            break;

                        default:
                            break
                    }

                    tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                    tableOptionsTemp.hideColumn.push(nameAttr)
                    if ($this.val() != null) {
                        let selectText = ($this.val().length == 0) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    else {
                        let selectText = ($this.val() == null) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    insertData[nameAttr] = $this.val();

                    $this.val('').selectpicker('refresh');
                }
                else if ($this.is('input')) {


                    let inputType = $this.attr('type').toLocaleLowerCase();

                    if (inputType == 'checkbox') {

                        insertData[nameAttr] = $this.is(':checked');

                        tableOptionsTemp.isCheckType.push(nameAttr)
                        $this.prop('checked', false);

                    }
                    else if (inputType == 'hidden') {
                        insertData[nameAttr] = $this.val();
                        $this.val('');

                    }

                    else {
                        insertData[nameAttr] = $this.val();

                        $this.val('');
                    }
                }
                else {
                    insertData[nameAttr] = $this.val();

                    $this.val('');
                }
            });

            if (isNew) {
                if ($tblcontainer.find('table').length == 0) {
                    $tblcontainer.append(pft_table_createtable([insertData], tableOptionsTemp));
                }
                else {
                    let table = $tblcontainer.find('table').DataTable()
                    table.destroy()
                    pft_table_addTableRow($tblcontainer.find('table'), insertData, tableOptionsTemp);
                }
            }
            else {
                let table = $tblcontainer.find('table').DataTable()
                table.destroy()
                pft_table_replaceTableRow($tblcontainer.find('table'), updateCond, insertData, tableOptionsTemp);
            }

            $tblcontainer.attr('perfect-tempTable-action', 0);
            //$thisForm.find('[name="AldAmountTo"]').attr('readonly', true);
        }


    }


    var tableOptionsTempOut = {

        iconButton: {
            buttons: [
                {
                    icon: "fa fa-pencil btnPerfectGridEdit",


                    action: function () {
                        let savedData = $(this).closest('tr').data('pData')

                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let tableKey = $tablecontainer.attr('perfect-tempTable');
                        let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                        //index attribute name in table row
                        let indexname = tableKey + 'index';
                        //index number in table row
                        let rindex = $(this).closest('tr').attr(indexname);
                        $tablecontainer.attr('perfect-tempTable-action', rindex);

                        console.log('Editclick', savedData);
                        //filling data in available inputs
                        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                            let $thisNode = $(this);
                            let pf_name = $thisNode.attr('name');
                            if ($thisNode.is('select')) {

                                $thisNode.val(savedData[pf_name]).selectpicker('refresh');

                            }
                            else if ($thisNode.is('input')) {
                                let inputType = $thisNode.attr('type').toLocaleLowerCase();
                                if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                    $thisNode.prop('checked', savedData[pf_name]);
                                }
                                //else if (inputType == 'date') {
                                //    console.log('datess', savedData)
                                //    console.log('datess', savedData[pf_name])
                                //    // $thisNode.val(moment(savedData[pf_name]).format('YYYY-DD-MM'));
                                //    $thisNode.val(savedData[pf_name]);
                                //}
                                else {

                                    $thisNode.val(savedData[pf_name]);
                                }

                            }
                            else {

                                $thisNode.val(savedData[pf_name]);
                            }


                        });



                    }

                },

                {
                    icon: "fa fa-trash btnPerfectGridDelete",
                    action: function () {
                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let $thistbl = $(this).closest('table');
                        let table = $thistbl.DataTable();
                        table.destroy();
                        if ($(this).closest('tbody').find('tr').length > 1) {
                            $(this).closest('tr').remove();
                            pft_table_slreset($thistbl);
                            //$thistbl.dataTable({ paging: true, searchbtn: false });
                        }
                        else {
                            $thistbl.remove();
                        } //$("#btnresetLg").click(); /*$('[name="LogTotAmount"]').val(0); $('[name="LogNetAmount"]').val(0);*/
                        $("#refresh").click();
                        

                    }
                }

            ],


        },

        onlyShowColumn: ["FromProdName", "ToProdName"],
        hideColumn: ["FK_ProductTo", "FK_ProductFrom"],
        serialNo: true,
        renameHeader: { "FromProdName": "From Item", "ToProdName": "To Item", "FK_ProductTo": "FK_ProductTo", "FK_ProductFrom":"FK_ProductFrom" },
        rowAttribute: [],
        isCheckType: [],
        isDataType: [],
    };

    function clearsubtableproduct(ele, tablekey) {


        let $thisform = $(ele).closest('[perfect-class="form"]');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="select"]').val('').selectpicker('refresh');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="date"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="hidden"]').val('');
        let errorClass = '.temptableError';
        $thisform.find('[perfect-tempTable-' + 'costcenter' + '="CCName"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');

        let $tblcontainer = $thisform.find('[perfect-tempTable="' + tablekey + '"]');
        $tblcontainer.attr('perfect-tempTable-action', 0);



    }

    function Reset() {
        SettingsConversion_initLoad();
    }

    function fn_UpdateItemSettings(ele, actiontype) {
       
         let $thisForm = $(ele).closest('[perfect-class="form"]');

        if ($thisForm.valid()) {

            let ItemData = [];

            $thisForm.find('[perfect-tempTable="ItemConversionSettings"]').find('table>tbody').find('tr').each(function () {

                ItemData.push($(this).data('pData'));
            });
         
            if (ItemData.length  != 0) {

              var inputData = {
                  'TransMode': ICTransMode,
                  'EffectDate': $thisForm.find('[name="EffectDate"]').val(),
                  'ItemDataDetails': ItemData,
                  'FK_ItemConversionSettings': $thisForm.find('[name="ID_ItemConversionSettings"]').val()
              }

                let _ActionUrl = "";
                if (actiontype == "Add") { _ActionUrl = "@Url.Action("AddItemConversionSettings", "ItemConversionSettings")"; } else { _ActionUrl = "@Url.Action("UpdateItemConversionSettings", "ItemConversionSettings")"; }

                $.ajax({
                    url: (actiontype == "Add") ? "@Url.Action("AddItemConversionSettings", "ItemConversionSettings")" : "@Url.Action("UpdateItemConversionSettings", "ItemConversionSettings")",
                    type: "POST",
                    data: inputData,
                    dataType: "json",
                    contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                    success: function (data) {
                       
                        if (data.Process.IsProcess) {
                            $.each(data.Process.Message, function (key, value) {
                                NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                            });
                            $thisForm.find('[perfect-ctype="select"]').val('').selectpicker('refresh');
                            $thisForm.find('[perfect-ctype="input"]').val('');
                            $thisForm.find('[perfect-ctype="date"]').val('');
                            $thisForm.find('[perfect-ctype="hidden"]').val('');

                            let onSuccess = $thisForm.attr('perfect-onFormSuccess');
                            if (onSuccess) {
                                SettingsConversion_initLoad();
                            }
                        }
                        else {
                            $.each(data.Process.Message, function (key, value) {
                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                            });
                        }
                    },

                });
            }
            else {
                NotificationMessage({ 'type': 'error', 'heading': 'info', 'message': 'Please Enter Atleast One Data.!!!' });
            }

        }

    }

    function fn_fillItemcs(ele, tkey, data, tableOptionsTempOut) {
       
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let tableOptionsTempfill = tableOptionsTempOut;
        let insertData = []
        let tableKey = tkey;
        let indexname = tkey + 'index';
        tableOptionsTempfill.rowAttribute.push(indexname);
        tableOptionsTempfill.hideColumn.push(indexname);
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');
        $.each(data, function (keyOne, valOne) {

            let pData = {};

            pData[indexname] = keyOne + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', pData[indexname])

            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                //console.log('tfhyrtname', nameAttr)
                if (typeof valOne[nameAttr] !== undefined) {

                    if ($this.is('select')) {
                        // tableOptionsTempfill.renameHeader[nameAttr + '_d'] = headerName;
                        tableOptionsTempfill.hideColumn.push(nameAttr);
                        //displat text of select
                        pData[nameAttr + '_d'] = $this.find('[value="' + valOne[nameAttr] + '"]').text();
                        pData[nameAttr] = valOne[nameAttr];
                        console.log('select', $this.find('options[value="' + valOne[nameAttr] + '"]').text());

                    }
                    else if ($this.is('input')) {

                        let inputType = $this.attr('type').toLocaleLowerCase();
                        console.log(inputType)


                        if (inputType == 'date') {

                            if (valOne[nameAttr] == null) {
                                pData[nameAttr] = valOne[nameAttr];
                            }
                            else {
                                pData[nameAttr] = moment(valOne[nameAttr]).format('YYYY-MM-DD');
                            }


                        }
                        else {
                            pData[nameAttr] = valOne[nameAttr];


                        }
                    }
                    else {
                        pData[nameAttr] = valOne[nameAttr];


                    }
                }



            });

            insertData.push(pData);


            //----

        });
        $tblcontainer.empty();
        $tblcontainer.append(pft_table_createtable(insertData, tableOptionsTempfill));
        // $tblcontainer.find('table').dataTable({ paging: true });
    }

</script>



