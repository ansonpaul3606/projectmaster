@*----------------------------------------------------------------------
    Created By	: Kavya K
    Created On	: 19/12/2022
    Purpose		: Job Card Creation
    -------------------------------------------------------------------------
    Modification
    On			By					OMID/Remarks
    -------------------------------------------------------------------------
    -------------------------------------------------------------------------*@


@model PerfectWebERP.Models.JobCardCreationModel.PeriodTypeList
<div class="card ">
    <div class="card-header">
        <h4 class="card-title col-12">Job Card Creation</h4>
        <span title="To View List" onclick="fn_showListView();"><svg id="Layer_1" class="layer" stroke="currentColor" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" height="20" width="20" viewBox="0 0 122.88 122.54"><title>To View List</title><path class="viewlst" d="M4.69,0H46.22a4.71,4.71,0,0,1,4.69,4.69V46a4.69,4.69,0,0,1-4.69,4.69H4.69a4.65,4.65,0,0,1-3.31-1.38l-.09-.09A4.67,4.67,0,0,1,0,46V4.69A4.71,4.71,0,0,1,4.69,0ZM89.44,61.94a26.56,26.56,0,0,1,10.18,2l.07,0a26.61,26.61,0,0,1,15.25,32.16,26.18,26.18,0,0,1-2.7,6.11l10.3,11.24a1.27,1.27,0,0,1-.07,1.8l-7.57,6.9a1.27,1.27,0,0,1-1.79-.07l-9.86-10.85a26.36,26.36,0,0,1-6.1,2.74,26.87,26.87,0,0,1-7.71,1.13,26.51,26.51,0,0,1-10.17-2l-.07,0A26.64,26.64,0,0,1,64.85,78.37l0-.07A26.6,26.6,0,0,1,89.44,61.94Zm15,11.59a21.38,21.38,0,0,0-6.89-4.61l-.06,0a21.22,21.22,0,0,0-23.07,4.64l-.07.07a21.25,21.25,0,0,0-4.54,6.83l0,.06a21.32,21.32,0,0,0-1.58,8.06,21.26,21.26,0,0,0,29.35,19.62,21.54,21.54,0,0,0,6.89-4.61l.07-.07a21.09,21.09,0,0,0,4.54-6.83l0-.06a21.35,21.35,0,0,0,0-16.17,21.34,21.34,0,0,0-4.62-6.9ZM4.69,63.2H46.22a4.71,4.71,0,0,1,4.69,4.7v41.34a4.68,4.68,0,0,1-4.69,4.69H4.69A4.69,4.69,0,0,1,0,109.24V67.9a4.71,4.71,0,0,1,4.69-4.7ZM68.78,0h41.53A4.71,4.71,0,0,1,115,4.69V46a4.71,4.71,0,0,1-4.69,4.69H68.78A4.71,4.71,0,0,1,64.09,46V4.69a4.69,4.69,0,0,1,1.37-3.31l.1-.09A4.67,4.67,0,0,1,68.78,0Z"></path></svg></span>
    </div>
    <div class="card-body">
        <form id="" class="form-valide" perfect-class="form" action="#" method="post" perfect-onFormSuccess="">
            <div class="">
                @Html.AntiForgeryToken()
                <div class="row">
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Type</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-7">
                                <div class="input-group">
                                    <input type="hidden" name="ID_JobCard" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                    <select class="form-control perfectValidate_string" id="ddlTypeID" name="ddlTypeID" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" onchange="fn_ddlType(this)">
                                        <option value="1">New Job Card </option>
                                        <option value="2">Project</option>
                                        <option value="3">Sales Order</option>
                                    </select>
                                    <div class="text-danger temptableError"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Priority</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-7">
                                <div class="input-group">
                                    <select class="form-control perfectValidate_string" name="Priority" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select">
                                        <option value="">Please Select </option>
                                        <option value="1">Hot</option>
                                        <option value="2">Warm</option>
                                        <option value="3">Cold</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class=" row divjobcarddetails" id="divjobcarddetails" style="display:none;">
                    <div class="col-sm-12">
                        <div class="row">
                            <div class="col-sm-4">
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-5 col-form-label">
                                        <span perfect-class="formGroupLabel">Start Date</span>
                                        <span class="text-danger">*</span>
                                    </label>
                                    <div class="col-sm-7">
                                        <input type="date" class="form-control perfectValidate_date" name="JobCardStartDate" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" />
                                    </div>
                                </div>
                            </div>
                            <div class="col-sm-4">
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-5 col-form-label">
                                        <span perfect-class="formGroupLabel">Job Card No</span>
                                        <span class="text-danger">*</span>
                                    </label>
                                    <div class="col-sm-7">
                                        <div class="input-group">
                                            <input type="text" class="form-control perfectValidate_string" name="JobCardNo" perfect-class="formGroupControl" perfect-ctype="input"  value="@Model.JobCardNo" disabled/>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-sm-4">
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-5 col-form-label">
                                        <span perfect-class="formGroupLabel">Target Date</span>
                                        <span class="text-danger">*</span>
                                    </label>
                                    <div class="col-sm-7">
                                        <input type="date" class="form-control perfectValidate_date" name="JobCardTargetDate" perfect-class="formGroupControl" perfect-ctype="date" onchange="checkdatewithLDdate(this)"perfect-css="date" />
                                        <div class="invalid-feedback animated fadeInUp limit-check" style="display: block;"></div>

                                        <div id="CreateDate-error" class="Custominvalid animated fadeInUp CreateDateerror" style="display: none;">Target On Date sholud be greater than  Or Equal to sales Order Date</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <hr />
                    <div class="col-sm-12">
                        <div class="row">
                            <div class="col-sm-12">
                                <div class="accordion__item">
                                    <div class="accordion__header collapsed" id="MasterProjectDetails" data-target="#active-header_collapseTwo">
                                        <span class="accordion__header--icon"></span>
                                        <span class="accordion__header--text">Product Details</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-8">
                        <div class="row">
                            <div class="col-sm-12">
                                <div class="row">
                                    <div class="col-sm-6">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-3 col-form-label">
                                                <span perfect-class="formGroupLabel" name="lblProName">Product</span>
                                                <span class="text-danger">*</span>
                                            </label>
                                            <div class="col-sm-9">
                                                <div class="input-group">
                                                    <input type="text" class="form-control" name="ProductName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" perfect-tempTable-JobCard="ProductName" readonly />
                                                    <input type="hidden" name="FK_Product" perfect-tempTable-JobCard="FK_Product" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />


                                                    <div class="input-group-append">

                                                        <button id="addproduct-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchVal(this,81,'Product List',[],JobCardTransMode)" Criterea1="0" Criterea2="0" BindName="ProductName" BindVal="FK_Product"></button>
                                                    </div>
                                                    <div class="text-danger temptableError"></div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-sm-4">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-6 col-form-label">
                                                <span perfect-class="formGroupLabel" name="lblQty">Quantity</span>
                                                <span class="text-danger">*</span>
                                            </label>
                                            <div class="col-sm-6">
                                                <input type="number" class="form-control text-right" placeholder="" name="Quantity" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" perfect-tempTable-JobCard="Quantity" oninput="this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');" />
                                                <input type="hidden" name="Quantity" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                <div class="text-danger temptableError"></div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-sm-2 text-right">
                                        <div class="input-group">
                                            <div class="input-group-append">
                                                <div>
                                                    <button class="btn btn-primary1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" title="Add New Product" onclick="fn_CreateJobCard(this,'JobCard',['FK_Product'],JobCardtableOptionsTempOut)"><i class="fa fa-plus" aria-hidden="true"></i></button>

                                                    <button class="btn btn-light1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" onclick="JobCardproductclear(this,'JobCard')"><i class="fa fa-refresh" aria-hidden="true"></i></button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                    <div class="row"  style="margin-left:5px;">
                                        <div class="col-sm-12">
                                            <div class="form-group row" perfect-class="formGroup">
                                                <div class="table-responsive" perfect-tempTable="JobCard" perfect-tempTable-lastindex="0" perfect-tempTable-action="0">
                                                </div>
                                            </div>
                                        </div>
                                    </div>                             

                            </div>
                        </div>
                    </div>
                </div>
                <div class=" row divProjectdetails" id="divProjectdetails" style="display:none;">
                    <div class="col-sm-12">
                        <div class="row">
                            <div class="col-sm-4">
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-5 col-form-label">
                                        <span perfect-class="formGroupLabel">Start Date</span>
                                        <span class="text-danger">*</span>
                                    </label>
                                    <div class="col-sm-7">
                                        <input type="date" class="form-control perfectValidate_date" name="ProjectStartDate" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" />
                                    </div>
                                </div>
                            </div>
                            <div class="col-sm-4">
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-5 col-form-label">
                                        <span perfect-class="formGroupLabel" name="lblProName">Project Name</span>
                                        <span class="text-danger">*</span>
                                    </label>
                                    <div class="col-sm-7">
                                        <div class="input-group">
                                            <input type="text" class="form-control" name="ProjectName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                                            <input type="hidden" name="FK_Project" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />


                                            <div class="input-group-append">
                                                <button id="addproduct-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchValAssign(this, 77, 'Project List', [], ['EndDate'],JobCardTransMode)" Criterea1="0" Criterea2="0" BindName="ProjectName" BindVal="FK_Project"  function="1"></button>
                                            </div>
                                            <div class="text-danger temptableError"></div>
                                        </div>

                                    </div>

                                </div>
                            </div>
                            <div class="col-sm-4">
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-5 col-form-label">
                                        <span perfect-class="formGroupLabel">Target Date</span>
                                        <span class="text-danger">*</span>
                                    </label>
                                    <div class="col-sm-7">
                                        <input type="date" class="form-control perfectValidate_date" name="EndDate" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" disabled />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <hr />
                    <div class="col-sm-12">
                        <div class="row">
                            <div class="col-sm-12">
                                <div class="accordion__item">
                                    <div class="accordion__header collapsed" id="MasterProjectDetails" data-target="#active-header_collapseTwo">
                                        <span class="accordion__header--icon"></span>
                                        <span class="accordion__header--text">Product Details</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-8">
                        <div class="row">
                            <div class="col-sm-12">
                                <div class="row">
                                    <div class="col-sm-6">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-3 col-form-label">
                                                <span perfect-class="formGroupLabel" name="lblProName">Product</span>
                                                <span class="text-danger">*</span>
                                            </label>
                                            <div class="col-sm-9">
                                                <div class="input-group">
                                                    <input type="text" class="form-control" name="ProductName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" perfect-tempTable-Project="ProductName" readonly />
                                                    <input type="hidden" name="FK_Product" perfect-tempTable-Project="FK_Product" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />


                                                    <div class="input-group-append">

                                                        <button id="addproduct-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchVal(this,81,'Product List',[],JobCardTransMode)" Criterea1="0" Criterea2="0" BindName="ProductName" BindVal="FK_Product"></button>
                                                    </div>
                                                    <div class="text-danger temptableError"></div>
                                                </div>

                                            </div>

                                        </div>
                                    </div>

                                    <div class="col-sm-4">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-6 col-form-label">
                                                <span perfect-class="formGroupLabel" name="lblQty">Quantity</span>
                                                <span class="text-danger">*</span>
                                            </label>
                                            <div class="col-sm-6">
                                                <input type="text" class="form-control text-right" placeholder="" name="Quantity" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" perfect-tempTable-Project="Quantity" oninput="this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');" />
                                                <input type="hidden" name="Quantity" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                <div class="input-group-append">
                                                    <span class="invalid-feedback animated fadeInUp d-block temptableError"></span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-sm-2 text-right">
                                        <div class="input-group">
                                            <div class="input-group-append">
                                                <div>
                                                    <button class="btn btn-primary1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" title="Add New Product" onclick="fn_CreateProject(this,'Project',['FK_Product'],ProjecttableOptionsTempOut)"><i class="fa fa-plus" aria-hidden="true"></i></button>

                                                    <button class="btn btn-light1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" onclick="Projectproductclear(this,'Project')"><i class="fa fa-refresh" aria-hidden="true"></i></button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>


                    <div class="row">
                        <div class="col-sm-8" style="margin-left:25px;">
                            <div class="form-group row" perfect-class="formGroup">
                                <div class="table-responsive" perfect-tempTable="Project" perfect-tempTable-lastindex="0" perfect-tempTable-action="0">
                                </div>
                            </div>
                        </div>
                    </div>

                </div>

                <div class="row divSalOrderdetails" id="divSalOrderdetails" style="display:none;">
                    <div class="col-sm-12">
                        <div class="row">
                            <div class="col-sm-4">
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-5 col-form-label">
                                        <span perfect-class="formGroupLabel">Start Date</span>
                                        <span class="text-danger">*</span>
                                    </label>
                                    <div class="col-sm-7">
                                        <input type="date" class="form-control perfectValidate_date" name="SalOrderStartDate" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" />
                                    </div>
                                </div>
                            </div>
                            <div class="col-sm-4">
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-5 col-form-label">
                                        <span perfect-class="formGroupLabel" name="lblProName">Order No</span>
                                        <span class="text-danger">*</span>
                                    </label>
                                    <div class="col-sm-7">
                                        <div class="input-group">
                                            <input type="text" class="form-control" name="SoNo" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                                            <input type="hidden" name="OrderNo" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                            <input type="date" name="SODate" class="form-control" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" hidden />

                                            <div class="input-group-append">
                                                <button id="addproduct-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchValAssign(this, 78, 'Sales Order List', [], ['SODate','SoNo'],JobCardTransMode)" Criterea1="0" Criterea2="0" BindName="SoNo" BindVal="OrderNo"></button>
                                            </div>
                                           
                                            @*<div class="text-danger temptableError"></div>*@
                                        </div>

                                    </div>

                                </div>
                            </div>
                            <div class="col-sm-4">
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-5 col-form-label">
                                        <span perfect-class="formGroupLabel">Target Date</span>
                                        <span class="text-danger">*</span>
                                    </label>
                                    <div class="col-sm-7">
                                        <input type="date" class="form-control perfectValidate_date" name="SODates" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date"onchange="checkdatewithLDdate(this)" disabled />
                                       
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <hr />
                    <div class="col-sm-12">
                        <div class="row">
                            <div class="col-sm-12">
                                <div class="accordion__item">
                                    <div class="accordion__header collapsed" id="MasterProjectDetails" data-target="#active-header_collapseTwo">
                                        <span class="accordion__header--icon"></span>
                                        <span class="accordion__header--text">Product Details</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-8">
                        <div class="row">
                            <div class="col-sm-12">
                                <div class="row">
                                    <div class="col-sm-6">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-3 col-form-label">
                                                <span perfect-class="formGroupLabel" name="lblProName">Product</span>
                                                <span class="text-danger">*</span>
                                            </label>
                                            <div class="col-sm-9">
                                                <div class="input-group">
                                                    <input type="text" class="form-control" name="ProductName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" perfect-tempTable-SalOrder="ProductName" readonly />
                                                    <input type="hidden" name="FK_Product" perfect-tempTable-SalOrder="FK_Product" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />


                                                    <div class="input-group-append">

                                                        <button id="addproduct-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchVal(this,81,'Product List',[],JobCardTransMode)" Criterea1="0" Criterea2="0" BindName="ProductName" BindVal="FK_Product"></button>
                                                    </div>
                                                    <div class="text-danger temptableError"></div>
                                                </div>

                                            </div>

                                        </div>
                                    </div>

                                    <div class="col-sm-4">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-6 col-form-label">
                                                <span perfect-class="formGroupLabel" name="lblQty">Quantity</span>
                                                <span class="text-danger">*</span>
                                            </label>
                                            <div class="col-sm-6">
                                                <input type="text" class="form-control text-right" placeholder="" name="Quantity" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" perfect-tempTable-SalOrder="Quantity" oninput="this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');" />
                                                <input type="hidden" name="Quantity" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                <div class="input-group-append">
                                                    <span class="invalid-feedback animated fadeInUp d-block temptableError"></span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-sm-2">
                                        <div class="input-group">
                                            <div class="input-group-append">
                                                <div>
                                                    <button class="btn btn-primary1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" title="Add New Product" onclick="fn_CreateSalOrder(this,'SalOrder',['FK_Product '],SalOrdertableOptionsTempOut)"><i class="fa fa-plus" aria-hidden="true"></i></button>

                                                    <button class="btn btn-light1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" onclick="SalOrderproductclear(this,'JobCard')"><i class="fa fa-refresh" aria-hidden="true"></i></button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                </div>
                            </div>
                        </div>
                    </div>
                   
                    <div class="row">
                        <div class="col-sm-8" style="margin-left:25px;">
                            <div class="form-group row" perfect-class="formGroup">
                                <div class="table-responsive" perfect-tempTable="SalOrder" perfect-tempTable-lastindex="0" perfect-tempTable-action="0">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="modal fade" perfect-class="formGroupModalrecurringjob" id="formGroupModalrecurringjob">
                    <div class="modal-dialog  modal-dialog-centered modal-md" role="document">
                        <div class="modal-content">
                            <div class="modal-header border-0">
                                <h5 class="modal-title">Recurring Job</h5>
                                <button type="button" class="close" data-dismiss="modal">
                                    <span>&times;</span>
                                </button>
                            </div>
                            <div class="modal-body" perfect-class="formGroup" style="max-height: calc(100vh - 200px); overflow-y: auto;padding: 1rem;">
                                <div class="row">


                                    <div class="col-sm-12">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">Period Type <span class="text-danger">*</span></label>
                                            <div class="col-sm-8">
                                                <div class="input-group">
                                                    <select class="form-control" name="PeriodType" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select">
                                                        <option value="">Please Select </option>


                                                        @if (!(Model.PeriodType is null))
                                                        {
                                                            foreach (var PT in Model.PeriodType)
                                                            {
                                                                <option value="@PT.ID_Mode">@PT.ModeName</option>
                                                            }
                                                        }
                                                    </select>


                                                </div>
                                                <div class="text-danger temptableError"></div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-12">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">Period</span>

                                            </label>
                                            <div class="col-sm-8">

                                                <div class="input-group">
                                                    <input type="number" class="form-control text-right" name="Period" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" min="0" maxlength="12" oninput="fn_check(this)"/>
                                                </div>
                                                <div class="text-danger temptableError"></div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-sm-12">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">No. of Count</span>
                                                <span class="text-danger">*</span>
                                            </label>
                                            <div class="col-sm-8">
                                                <div class="input-group">
                                                    <input type="number" class="form-control text-right" id="NoofCount" name="NoofCount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" min="0" maxlength="12" />

                                                </div>
                                                <div class="text-danger temptableError"></div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-12">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">End Date</span>
                                                <span class="text-danger">*</span>
                                            </label>
                                            <div class="col-sm-8">
                                                <div class="input-group">
                                                    <input type="date" class="form-control text-right" id="TypeEndDate" name="TypeEndDate" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" min="0" maxlength="12" />

                                                </div>
                                                <div class="text-danger temptableError"></div>
                                            </div>
                                            @*<div class="col-sm-3">
                                                <button type="button" class="btn btn-primary1 " onclick="fn_CreateJobCardType(this,'JobCardType',['PeriodType'],JobCardTypetableOptionsTempOut)"><i class="fa fa-plus" aria-hidden="true"></i></button>
                                                <button class="btn btn-light1" type="button" onclick="jobcardclear(this, 'JobCardType')"><i class="fa fa-refresh" aria-hidden="true"></i></button>
                                            </div>*@
                                        </div>
                                    </div>                                 


                                    @*<div class="col-sm-12">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <div class="table-responsive" perfect-tempTable-JobCardType="" perfect-tempTable="JobCardType" id="JobCardTypedethead" perfect-tempTable-lastindex="0" perfect-tempTable-action="0">
                                                
                                                </div>
                                                <div class="text-danger temptableError"></div>
                                            </div>
                                    </div>*@


                                </div>
                                <div class="modal-footer">
                                    <button type="button" onclick="SubmitJobCard(this);" class="btn btn-primary">Submit</button>                                   
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
            <div class="card-footer text-right" perfect-class="formFooter">
                <button id="addcompany-jq-addnewuser" type="button" class="btn btn-primary mr-3 addcompany-jq-addnewuserUpdate d-none" name="update" perfect-css="button" onclick="fn_UpdateJobCard(this,'update')"><i class="fa fa-refresh fa-spin loaderClass "></i>Update</button>
                <button id="addcompany-jq-addnewuser" type="button" class="btn btn-primary mr-3" name="add" perfect-css="button" onclick="fn_UpdateJobCard(this,'new')"><i class="fa fa-refresh fa-spin loaderClass "></i>Save</button>
                <button type="button" class="btn btn-light" perfect-css="button" onclick="fn_resetJobCard(this)" name="reset">Clear</button>
            </div>
        </form>
    </div>
</div>

<script>

    $(document).ready(function () {
        initFunctions('form');
    });

    function fn_ddlType(element) {

        let $thisForm = $(element).closest('[perfect-class="form"]');
        if (parseFloat($thisForm.find('[name="ddlTypeID"]').val()) == 1) {

            $("#divjobcarddetails").css('display', 'block');
            $("#divProjectdetails").css('display', 'none');
            $("#divSalOrderdetails").css('display', 'none');
        }
        else if (parseFloat($thisForm.find('[name="ddlTypeID"]').val()) == 2) {

            $("#divProjectdetails").css('display', 'block');
            $("#divjobcarddetails").css('display', 'none');
            $("#divSalOrderdetails").css('display', 'none');

            $thisForm.find('[name="ProjectStartDate"]').val(moment().format('YYYY-MM-DD'));
        }
        else {
            $("#divSalOrderdetails").css('display', 'block');
            $("#divProjectdetails").css('display', 'none');
            $("#divjobcarddetails").css('display', 'none');

            $thisForm.find('[name="SalOrderStartDate"]').val(moment().format('YYYY-MM-DD'));
        }

    }

    function fn_check(ele) {
        debugger;
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let PeriodType = $thisForm.find('[name="PeriodType"]').val();
        let Period = $thisForm.find('[name="Period"]').val();
        let errorClass1 = '.temptableError';
        if (PeriodType == 4 && Period > 31) {
            $thisForm.find('[name="Period"]').closest('[perfect-class="formGroup"]').find(errorClass1).attr("style", "display:block");
            $thisForm.find('[name="Period"]').closest('[perfect-class="formGroup"]').find(errorClass1).text('Please Enter the Period less than or equal to 31');
        }
    }

    function fn_CreateJobCard(ele, tkey, uniq = []) {
     
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let tableKey = tkey;
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');
        let insertData = {};
        let tableOptionsTemp = JobCardtableOptionsTempOut;
        let unique = (uniq) ? uniq : [];
        let isValid = true;
        let errorClass = '.temptableError';
        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="ProductName"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="ProductName"]').val() == "") {
            isValid = false;
            $thisForm.find('[perfect-tempTable-' + tableKey + '="ProductName"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Product');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="ProductName"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }
        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').val() == "") {
            isValid = false;
            $thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter Quantity');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }
        let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
        let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
        let indexname = tkey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);
        let updateCond = '';
        let isNew = true;
        if (thisactionIndex > 0) {
            insertData[indexname] = thisactionIndex;
            updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
            isNew = false;
        }
        else {
            insertData[indexname] = lastIndex + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
            isNew = true;
        }
        console.log('check 3');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
            let $this = $(this);
            let headerName = $this.attr('perfect-tempTable-' + tableKey);
            let nameAttr = $this.attr('name');
            let $errorElement = $this.closest('[perfect-class="formGroup"]').find(errorClass);
            if ($this.is('select')) {
               
                if ($this.val().length > 0) {
                    $errorElement.text('');
                }
                else {
                    isValid = false;
                    if (headerName == 'FK_Product') {
                        headerName = "Product";
                    }
                    $errorElement.text('Please select ' + headerName);

                }
            }
            else if ($this.is('input')) {
                let inputType = $this.attr('type').toLocaleLowerCase();
                if (inputType == 'checkbox') {
                }
                else if (inputType == 'hidden') {
                }
                else {
                    if ($this.val().length > 0) {
                        $errorElement.text('');
                    }
                    else {

                        isValid = false;
                        if (headerName == 'ProductName') {
                            headerName = "Product";
                            $errorElement.text('Please select ' + headerName);
                        }
                        else if (headerName == 'Quantity') {
                            headerName = "Quantity";
                            $errorElement.text('Please enter ' + headerName);
                        }


                    }
                }
            }
        });
        if (unique.length > 0) {
            let prevData = [];
            $tblcontainer.find('table > tbody').find('tr').each(function () {
                if (isNew) {
                    prevData.push($(this).data('pData'));
                }
                else {
                    if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                        prevData.push($(this).data('pData'));
                    }
                }
            })
            console.log('previous data', prevData);
            unique.forEach(function (key, i) {
                console.log('unid -> key:' + key + "| index :" + i);
                let $thisEle = $thisForm.find('[perfect-tempTable-' + tableKey + '="' + key + '"]');
                let headerEleName = $thisEle.attr('perfect-tempTable-' + tableKey);
                let atname = $thisEle.attr('name');
                let cvalue;
                if ($thisEle.length != 0) {
                    let $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
                    if (headerEleName == 'FK_Product') {
                        headerEleName = "Product";
                    }
                    let errmessage = headerEleName + " Already exits"
                    if ($thisEle.is('select')) {
                        cvalue = $thisEle.val();
                    }
                    else if ($thisEle.is('input')) {
                        let inputEleType = $thisEle.attr('type').toLocaleLowerCase();
                        if (inputEleType == 'checkbox') { cvalue = $thisEle.is(':checked'); }
                        else if (inputEleType == 'hidden') { cvalue = $thisEle.val(); }
                        else { cvalue = $thisEle.val(); }
                    }
                    else {
                        cvalue = $thisEle.val();
                    }
                    if (prevData.find(a => a[atname] == cvalue)) {
                        $errorElement.text(errmessage);
                        isValid = false;
                    }
                }
            });
        }
        console.log('check 4');
        if (isValid) {
            console.log('check 4.1');
            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                if ($this.is('select')) {
                    tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                    tableOptionsTemp.hideColumn.push(nameAttr)
                    if ($this.val() != null) {
                        let selectText = ($this.val().length == 0) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    else {
                        let selectText = ($this.val() == null) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    insertData[nameAttr] = $this.val();
                    $this.val('').selectpicker('refresh');
                }
                else if ($this.is('input')) {
                    let inputType = $this.attr('type').toLocaleLowerCase();
                    if (inputType == 'checkbox') {
                        insertData[nameAttr] = $this.is(':checked');
                        tableOptionsTemp.isCheckType.push(nameAttr)
                        $this.prop('checked', false);
                    }
                    else if (inputType == 'hidden') {
                        tableOptionsTemp.hideColumn.push(nameAttr)
                        insertData[nameAttr] = $this.val();
                        $this.val('');
                    }
                    else if (inputType == 'date') {
                        insertData[nameAttr] = $this.val();
                        $this.val('');
                    }
                    else {
                        insertData[nameAttr] = $this.val();
                        $this.val('');
                    }
                }
                else {
                    insertData[nameAttr] = $this.val();
                    $this.val('');
                }
            });
            console.log('check 4.2');
            if (isNew) {
                console.log('check 4.2.1');
                if ($tblcontainer.find('table').length == 0) {
                    console.log('check 4.2.3');
                    $tblcontainer.append(pft_table_createtable([insertData], tableOptionsTemp));
                }
                else {
                    console.log('check 4.2.1');
                    let table = $tblcontainer.find('table').DataTable()
                    table.destroy()
                    pft_table_addTableRow($tblcontainer.find('table'), insertData, tableOptionsTemp);
                }
                console.log('check 4.2.1');
            }
            else {
                console.log('check 4.3');
                let table = $tblcontainer.find('table').DataTable()
                table.destroy()
                console.log('check 4.4');
                console.log('table', $tblcontainer.find('table'))
                console.log('check 4.5');
                pft_table_replaceTableRow($tblcontainer.find('table'), updateCond, insertData, tableOptionsTemp);
            }
            console.log(insertData);
            $tblcontainer.attr('perfect-tempTable-action', 0);
        }
        console.log('check 5');
        console.log("isValid", isValid);
        return isValid;
    }

    var JobCardtableOptionsTempOut = {
        iconButton: {
            buttons: [
                {
                    icon: "fa fa-pencil btnPerfectGridEdit",
                    action: function () {
                        let savedData = $(this).closest('tr').data('pData');
                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let tableKey = $tablecontainer.attr('perfect-tempTable');
                        let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                        let indexname = tableKey + 'index';
                        let rindex = $(this).closest('tr').attr(indexname);
                        $tablecontainer.attr('perfect-tempTable-action', rindex);
                        console.log('Editclick', savedData);
                        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                            let $thisNode = $(this);
                            let pf_name = $thisNode.attr('name');
                            if ($thisNode.is('select')) {
                                $thisNode.val(savedData[pf_name]).selectpicker('refresh');
                            }
                            else if ($thisNode.is('input')) {

                                if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                    $thisNode.prop('checked', savedData[pf_name]);
                                }
                                else {
                                    $thisNode.val(savedData[pf_name]);
                                }
                            }
                            else {
                                $thisNode.val(savedData[pf_name]);
                            }
                        });
                    }
                },
                {
                    icon: "fa fa-trash btnPerfectGridDelete",
                    action: function () {
                        let $thistbl = $(this).closest('table');
                        let table = $thistbl.DataTable();
                        table.destroy();
                        if ($(this).closest('tbody').find('tr').length > 1) {
                            $(this).closest('tr').remove();
                            pft_table_slreset($thistbl);
                        }
                        else {
                            $thistbl.remove();
                        }
                    }
                }

            ]
        },
        onlyShowColumn: ["ProductName", "Quantity"],
        hideColumn: ['FK_Product'],
        serialNo: true,
        renameHeader: { "ProductName": "Product", "Quantity": "Quantity" },
        rowAttribute: [],
        isCheckType: []
    };

    function fn_CreateProject(ele, tkey, uniq = []) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let tableKey = tkey;
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');
        let insertData = {};
        let tableOptionsTemp = ProjecttableOptionsTempOut;
        let unique = (uniq) ? uniq : [];
        let isValid = true;
        let errorClass = '.temptableError';
        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="ProductName"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="ProductName"]').val() == "") {
            isValid = false;
            $thisForm.find('[perfect-tempTable-' + tableKey + '="ProductName"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Product');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="ProductName"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }
        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').val() == "") {
            isValid = false;
            $thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter Quantity');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }
        let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
        let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
        let indexname = tkey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);
        let updateCond = '';
        let isNew = true;
        if (thisactionIndex > 0) {
            insertData[indexname] = thisactionIndex;
            updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
            isNew = false;
        }
        else {
            insertData[indexname] = lastIndex + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
            isNew = true;
        }
        console.log('check 3');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
            let $this = $(this);
            let headerName = $this.attr('perfect-tempTable-' + tableKey);
            let nameAttr = $this.attr('name');
            let $errorElement = $this.closest('[perfect-class="formGroup"]').find(errorClass);
            if ($this.is('select')) {
                if ($this.val().length > 0) {
                    $errorElement.text('');
                }
                else {
                    isValid = false;
                    if (headerName == 'FK_Product') {
                        headerName = "Product";
                    }
                    $errorElement.text('Please select ' + headerName);
                }
            }
            else if ($this.is('input')) {
                let inputType = $this.attr('type').toLocaleLowerCase();
                if (inputType == 'checkbox') {
                }
                else if (inputType == 'hidden') {
                }
                else {
                    if ($this.val().length > 0) {
                        $errorElement.text('');
                    }
                    else {

                        isValid = false;
                        if (headerName == 'FK_Product') {
                            headerName = "Product";
                        }
                        $errorElement.text('Please select ' + headerName);
                    }
                }
            }
        });
        if (unique.length > 0) {
            let prevData = [];
            $tblcontainer.find('table > tbody').find('tr').each(function () {
                if (isNew) {
                    prevData.push($(this).data('pData'));
                }
                else {
                    if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                        prevData.push($(this).data('pData'));
                    }
                }
            })
            console.log('previous data', prevData);
            unique.forEach(function (key, i) {
                console.log('unid -> key:' + key + "| index :" + i);
                let $thisEle = $thisForm.find('[perfect-tempTable-' + tableKey + '="' + key + '"]');
                let headerEleName = $thisEle.attr('perfect-tempTable-' + tableKey);
                let atname = $thisEle.attr('name');
                let cvalue;
                if ($thisEle.length != 0) {
                    let $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
                    if (headerEleName == 'FK_Product') {
                        headerEleName = "Product";
                    }
                    let errmessage = headerEleName + " Already exits"
                    if ($thisEle.is('select')) {
                        cvalue = $thisEle.val();
                    }
                    else if ($thisEle.is('input')) {
                        let inputEleType = $thisEle.attr('type').toLocaleLowerCase();
                        if (inputEleType == 'checkbox') { cvalue = $thisEle.is(':checked'); }
                        else if (inputEleType == 'hidden') { cvalue = $thisEle.val(); }
                        else { cvalue = $thisEle.val(); }
                    }
                    else {
                        cvalue = $thisEle.val();
                    }
                    if (prevData.find(a => a[atname] == cvalue)) {
                        $errorElement.text(errmessage);
                        isValid = false;
                    }
                }
            });
        }
        console.log('check 4');
        if (isValid) {
            console.log('check 4.1');
            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                if ($this.is('select')) {
                    tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                    tableOptionsTemp.hideColumn.push(nameAttr)
                    if ($this.val() != null) {
                        let selectText = ($this.val().length == 0) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    else {
                        let selectText = ($this.val() == null) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    insertData[nameAttr] = $this.val();
                    $this.val('').selectpicker('refresh');
                }
                else if ($this.is('input')) {
                    let inputType = $this.attr('type').toLocaleLowerCase();
                    if (inputType == 'checkbox') {
                        insertData[nameAttr] = $this.is(':checked');
                        tableOptionsTemp.isCheckType.push(nameAttr)
                        $this.prop('checked', false);
                    }
                    else if (inputType == 'hidden') {
                        tableOptionsTemp.hideColumn.push(nameAttr)
                        insertData[nameAttr] = $this.val();
                        $this.val('');
                    }
                    else if (inputType == 'date') {
                        insertData[nameAttr] = $this.val();
                        $this.val('');
                    }
                    else {
                        insertData[nameAttr] = $this.val();
                        $this.val('');
                    }
                }
                else {
                    insertData[nameAttr] = $this.val();
                    $this.val('');
                }
            });
            console.log('check 4.2');
            if (isNew) {
                console.log('check 4.2.1');
                if ($tblcontainer.find('table').length == 0) {
                    console.log('check 4.2.3');
                    $tblcontainer.append(pft_table_createtable([insertData], tableOptionsTemp));
                }
                else {
                    console.log('check 4.2.1');
                    let table = $tblcontainer.find('table').DataTable()
                    table.destroy()
                    pft_table_addTableRow($tblcontainer.find('table'), insertData, tableOptionsTemp);
                }
                console.log('check 4.2.1');
            }
            else {
                console.log('check 4.3');
                let table = $tblcontainer.find('table').DataTable()
                table.destroy()
                console.log('check 4.4');
                console.log('table', $tblcontainer.find('table'))
                console.log('check 4.5');
                pft_table_replaceTableRow($tblcontainer.find('table'), updateCond, insertData, tableOptionsTemp);
            }
            console.log(insertData);
            $tblcontainer.attr('perfect-tempTable-action', 0);
        }
        console.log('check 5');
        console.log("isValid", isValid);
        return isValid;
    }

    var ProjecttableOptionsTempOut = {
        iconButton: {
            buttons: [
                {
                    icon: "fa fa-pencil btnPerfectGridEdit",
                    action: function () {
                        let savedData = $(this).closest('tr').data('pData');
                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let tableKey = $tablecontainer.attr('perfect-tempTable');
                        let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                        let indexname = tableKey + 'index';
                        let rindex = $(this).closest('tr').attr(indexname);
                        $tablecontainer.attr('perfect-tempTable-action', rindex);
                        console.log('Editclick', savedData);
                        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                            let $thisNode = $(this);
                            let pf_name = $thisNode.attr('name');
                            if ($thisNode.is('select')) {
                                $thisNode.val(savedData[pf_name]).selectpicker('refresh');
                            }
                            else if ($thisNode.is('input')) {

                                if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                    $thisNode.prop('checked', savedData[pf_name]);
                                }
                                else {
                                    $thisNode.val(savedData[pf_name]);
                                }
                            }
                            else {
                                $thisNode.val(savedData[pf_name]);
                            }
                        });
                    }
                },
                {
                    icon: "fa fa-trash btnPerfectGridDelete",
                    action: function () {
                        let $thistbl = $(this).closest('table');
                        let table = $thistbl.DataTable();
                        table.destroy();
                        if ($(this).closest('tbody').find('tr').length > 1) {
                            $(this).closest('tr').remove();
                            pft_table_slreset($thistbl);
                        }
                        else {
                            $thistbl.remove();
                        }
                    }
                }

            ]
        },
        onlyShowColumn: ["ProductName", "Quantity"],
        hideColumn: ['FK_Product'],
        serialNo: true,
        renameHeader: {"ProductName": "Product", "Quantity": "Quantity" },
        rowAttribute: [],
        isCheckType: []
    };

    function fn_CreateSalOrder(ele, tkey, uniq = []) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let tableKey = tkey;
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');
        let insertData = {};
        let tableOptionsTemp = SalOrdertableOptionsTempOut;
        let unique = (uniq) ? uniq : [];
        let isValid = true;
        let errorClass = '.temptableError';
        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="ProductName"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="ProductName"]').val() == "") {
            isValid = false;
            $thisForm.find('[perfect-tempTable-' + tableKey + '="ProductName"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Product');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="ProductName"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }
        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').val() == "") {
            isValid = false;
            $thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter Quantity');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }
        let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
        let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
        let indexname = tkey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);
        let updateCond = '';
        let isNew = true;
        if (thisactionIndex > 0) {
            insertData[indexname] = thisactionIndex;
            updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
            isNew = false;
        }
        else {
            insertData[indexname] = lastIndex + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
            isNew = true;
        }
        console.log('check 3');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
            let $this = $(this);
            let headerName = $this.attr('perfect-tempTable-' + tableKey);
            let nameAttr = $this.attr('name');
            let $errorElement = $this.closest('[perfect-class="formGroup"]').find(errorClass);
            if ($this.is('select')) {
                if ($this.val().length > 0) {
                    $errorElement.text('');
                }
                else {
                    isValid = false;
                    if (headerName == 'FK_Product') {
                        headerName = "Product";
                    }
                    $errorElement.text('Please select ' + headerName);
                }
            }
            else if ($this.is('input')) {
                let inputType = $this.attr('type').toLocaleLowerCase();
                if (inputType == 'checkbox') {
                }
                else if (inputType == 'hidden') {
                }
                else {
                    if ($this.val().length > 0) {
                        $errorElement.text('');
                    }
                    else {

                        isValid = false;
                        if (headerName == 'FK_Product') {
                            headerName = "Product";
                        }
                        $errorElement.text('Please select ' + headerName);
                    }
                }
            }
        });
        if (unique.length > 0) {
            let prevData = [];
            $tblcontainer.find('table > tbody').find('tr').each(function () {
                if (isNew) {
                    prevData.push($(this).data('pData'));
                }
                else {
                    if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                        prevData.push($(this).data('pData'));
                    }
                }
            })
            console.log('previous data', prevData);
            unique.forEach(function (key, i) {
                console.log('unid -> key:' + key + "| index :" + i);
                let $thisEle = $thisForm.find('[perfect-tempTable-' + tableKey + '="' + key + '"]');
                let headerEleName = $thisEle.attr('perfect-tempTable-' + tableKey);
                let atname = $thisEle.attr('name');
                let cvalue;
                if ($thisEle.length != 0) {
                    let $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
                    if (headerEleName == 'FK_Product') {
                        headerEleName = "Product";
                    }
                    let errmessage = headerEleName + " Already exits"
                    if ($thisEle.is('select')) {
                        cvalue = $thisEle.val();
                    }
                    else if ($thisEle.is('input')) {
                        let inputEleType = $thisEle.attr('type').toLocaleLowerCase();
                        if (inputEleType == 'checkbox') { cvalue = $thisEle.is(':checked'); }
                        else if (inputEleType == 'hidden') { cvalue = $thisEle.val(); }
                        else { cvalue = $thisEle.val(); }
                    }
                    else {
                        cvalue = $thisEle.val();
                    }
                    if (prevData.find(a => a[atname] == cvalue)) {
                        $errorElement.text(errmessage);
                        isValid = false;
                    }
                }
            });
        }
        console.log('check 4');
        if (isValid) {
            console.log('check 4.1');
            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                if ($this.is('select')) {
                    tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                    tableOptionsTemp.hideColumn.push(nameAttr)
                    if ($this.val() != null) {
                        let selectText = ($this.val().length == 0) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    else {
                        let selectText = ($this.val() == null) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    insertData[nameAttr] = $this.val();
                    $this.val('').selectpicker('refresh');
                }
                else if ($this.is('input')) {
                    let inputType = $this.attr('type').toLocaleLowerCase();
                    if (inputType == 'checkbox') {
                        insertData[nameAttr] = $this.is(':checked');
                        tableOptionsTemp.isCheckType.push(nameAttr)
                        $this.prop('checked', false);
                    }
                    else if (inputType == 'hidden') {
                        tableOptionsTemp.hideColumn.push(nameAttr)
                        insertData[nameAttr] = $this.val();
                        $this.val('');
                    }
                    else if (inputType == 'date') {
                        insertData[nameAttr] = $this.val();
                        $this.val('');
                    }
                    else {
                        insertData[nameAttr] = $this.val();
                        $this.val('');
                    }
                }
                else {
                    insertData[nameAttr] = $this.val();
                    $this.val('');
                }
            });
            console.log('check 4.2');
            if (isNew) {
                console.log('check 4.2.1');
                if ($tblcontainer.find('table').length == 0) {
                    console.log('check 4.2.3');
                    $tblcontainer.append(pft_table_createtable([insertData], tableOptionsTemp));
                }
                else {
                    console.log('check 4.2.1');
                    let table = $tblcontainer.find('table').DataTable()
                    table.destroy()
                    pft_table_addTableRow($tblcontainer.find('table'), insertData, tableOptionsTemp);
                }
                console.log('check 4.2.1');
            }
            else {
                console.log('check 4.3');
                let table = $tblcontainer.find('table').DataTable()
                table.destroy()
                console.log('check 4.4');
                console.log('table', $tblcontainer.find('table'))
                console.log('check 4.5');
                pft_table_replaceTableRow($tblcontainer.find('table'), updateCond, insertData, tableOptionsTemp);
            }
            console.log(insertData);
            $tblcontainer.attr('perfect-tempTable-action', 0);
        }
        console.log('check 5');
        console.log("isValid", isValid);
        return isValid;
    }

    var SalOrdertableOptionsTempOut = {
        iconButton: {
            buttons: [
                {
                    icon: "fa fa-pencil btnPerfectGridEdit",
                    action: function () {
                        let savedData = $(this).closest('tr').data('pData');
                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let tableKey = $tablecontainer.attr('perfect-tempTable');
                        let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                        let indexname = tableKey + 'index';
                        let rindex = $(this).closest('tr').attr(indexname);
                        $tablecontainer.attr('perfect-tempTable-action', rindex);
                        console.log('Editclick', savedData);
                        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                            let $thisNode = $(this);
                            let pf_name = $thisNode.attr('name');
                            if ($thisNode.is('select')) {
                                $thisNode.val(savedData[pf_name]).selectpicker('refresh');
                            }
                            else if ($thisNode.is('input')) {

                                if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                    $thisNode.prop('checked', savedData[pf_name]);
                                }
                                else {
                                    $thisNode.val(savedData[pf_name]);
                                }
                            }
                            else {
                                $thisNode.val(savedData[pf_name]);
                            }
                        });
                    }
                },
                {
                    icon: "fa fa-trash btnPerfectGridDelete",
                    action: function () {
                        let $thistbl = $(this).closest('table');
                        let table = $thistbl.DataTable();
                        table.destroy();
                        if ($(this).closest('tbody').find('tr').length > 1) {
                            $(this).closest('tr').remove();
                            pft_table_slreset($thistbl);
                        }
                        else {
                            $thistbl.remove();
                        }
                    }
                }

            ]
        },
        onlyShowColumn: ["ProductName", "Quantity"],
        hideColumn: ['FK_Product'],
        serialNo: true,
        renameHeader: { "ProductName": "Product", "Quantity": "Quantity" },
        rowAttribute: [],
        isCheckType: []
    };

    function JobCardproductclear(ele, tableKey) {
            $thisForm = $(ele).closest('[perfect-class="form"]');
            $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="input"]').val('');
            $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="select"]').val('').selectpicker('refresh');
            $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="text"]').val('');
            $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="date"]').val('');
            $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="hidden"]').val('');
    }

    function Projectproductclear(ele, tableKey) {
        $thisForm = $(ele).closest('[perfect-class="form"]');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="input"]').val('');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="select"]').val('').selectpicker('refresh');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="text"]').val('');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="date"]').val('');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="hidden"]').val('');
    }

    function SalOrderproductclear(ele, tableKey) {
        $thisForm = $(ele).closest('[perfect-class="form"]');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="input"]').val('');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="select"]').val('').selectpicker('refresh');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="text"]').val('');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="date"]').val('');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="hidden"]').val('');
    }

    function jobcardclear(ele, tableKey) {
        $thisForm = $(ele).closest('[perfect-class="form"]');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="input"]').val('');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="select"]').val('').selectpicker('refresh');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="text"]').val('');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="date"]').val('');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="hidden"]').val('');
    }

    function fn_resetJobCard(ele) {
        fn_LoadJobCard();
    }

    function createItems(ele, callback) {

        if (transtype == 1) {
            if (fn_CreateJobCard(ele, 'JobCard', [])) {
                callback(1);
            }
            else {
                callback(0);
            }
        }
        else if (transtype == 2) {
            if (fn_CreateProject(ele, 'Project', [])) {
                callback(1);
            }
            else {
                callback(0);
            }
        }
        else {
            if (fn_CreateSalOrder(ele, 'SalOrder', [])) {
                callback(1);
            }
            else {
                callback(0);
            }
        }
    }

    //function fn_CreateJobCardType(ele, tkey, uniq = []) {
    //    debugger;
    //    let $thisForm = $(ele).closest('[perfect-class="form"]');
    //    let tableKey = tkey;
    //    let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');
    //    let insertData = {};
    //    let tableOptionsTemp = JobCardTypetableOptionsTempOut;
    //    let unique = (uniq) ? uniq : [];
    //    let isValid = true;
    //    let errorClass = '.temptableError';
    //    if ($thisForm.find('[perfect-tempTable-' + tableKey + '="PeriodType"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="PeriodType"]').val() == "") {
    //        isValid = false;
    //        $thisForm.find('[perfect-tempTable-' + tableKey + '="PeriodType"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Period Type');
    //    }
    //    else {
    //        $thisForm.find('[perfect-tempTable-' + tableKey + '="PeriodType"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
    //    }
    //    if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Period"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="Period"]').val() == "") {
    //        isValid = false;
    //        $thisForm.find('[perfect-tempTable-' + tableKey + '="Period"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter Period');
    //    }
    //    else {
    //        $thisForm.find('[perfect-tempTable-' + tableKey + '="Period"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
    //    }
    //    if ($thisForm.find('[perfect-tempTable-' + tableKey + '="NoofCount"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="NoofCount"]').val() == "") {
    //        isValid = false;
    //        $thisForm.find('[perfect-tempTable-' + tableKey + '="NoofCount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter No. of Count');
    //    }
    //    else {
    //        $thisForm.find('[perfect-tempTable-' + tableKey + '="NoofCount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
    //    }
    //    if ($thisForm.find('[perfect-tempTable-' + tableKey + '="TypeEndDate"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="TypeEndDate"]').val() == "") {
    //        isValid = false;
    //        $thisForm.find('[perfect-tempTable-' + tableKey + '="TypeEndDate"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select End Date');
    //    }
    //    else {
    //        $thisForm.find('[perfect-tempTable-' + tableKey + '="TypeEndDate"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
    //    }

    //    if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Period"]').val() > 31) {
    //        isValid = false;
    //        $thisForm.find('[perfect-tempTable-' + tableKey + '="Period"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter Period less than or equal to 31');
    //    }
    //    else {
    //        $thisForm.find('[perfect-tempTable-' + tableKey + '="Period"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
    //    }

    //    let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
    //    let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
    //    let indexname = tkey + 'index';
    //    tableOptionsTemp.rowAttribute.push(indexname);
    //    tableOptionsTemp.hideColumn.push(indexname);
    //    let updateCond = '';
    //    let isNew = true;
    //    if (thisactionIndex > 0) {
    //        insertData[indexname] = thisactionIndex;
    //        updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
    //        isNew = false;
    //    }
    //    else {
    //        insertData[indexname] = lastIndex + 1;
    //        $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
    //        isNew = true;
    //    }
    //    console.log('check 3');
    //    $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
    //        let $this = $(this);
    //        let headerName = $this.attr('perfect-tempTable-' + tableKey);
    //        let nameAttr = $this.attr('name');
    //        let $errorElement = $this.closest('[perfect-class="formGroup"]').find(errorClass);
    //        if ($this.is('select')) {

    //            if ($this.val().length > 0) {
    //                $errorElement.text('');
    //            }
    //            else {
    //                isValid = false;
    //                if (headerName == 'FK_Product') {
    //                    headerName = "Product";
    //                }
    //                $errorElement.text('Please select ' + headerName);

    //            }
    //        }
    //        else if ($this.is('input')) {
    //            let inputType = $this.attr('type').toLocaleLowerCase();
    //            if (inputType == 'checkbox') {
    //            }
    //            else if (inputType == 'hidden') {
    //            }
    //            else {
    //                if ($this.val().length > 0) {
    //                    $errorElement.text('');
    //                }
    //                else {

    //                    isValid = false;
    //                    if (headerName == 'ProductName') {
    //                        headerName = "Product";
    //                        $errorElement.text('Please select ' + headerName);
    //                    }
    //                    else if (headerName == 'Quantity') {
    //                        headerName = "Quantity";
    //                        $errorElement.text('Please enter ' + headerName);
    //                    }


    //                }
    //            }
    //        }
    //    });
    //    if (unique.length > 0) {
    //        let prevData = [];
    //        $tblcontainer.find('table > tbody').find('tr').each(function () {
    //            if (isNew) {
    //                prevData.push($(this).data('pData'));
    //            }
    //            else {
    //                if (parseInt($(this).attr(indexname)) != thisactionIndex) {
    //                    prevData.push($(this).data('pData'));
    //                }
    //            }
    //        })
    //        console.log('previous data', prevData);
    //        unique.forEach(function (key, i) {
    //            console.log('unid -> key:' + key + "| index :" + i);
    //            let $thisEle = $thisForm.find('[perfect-tempTable-' + tableKey + '="' + key + '"]');
    //            let headerEleName = $thisEle.attr('perfect-tempTable-' + tableKey);
    //            let atname = $thisEle.attr('name');
    //            let cvalue;
    //            if ($thisEle.length != 0) {
    //                let $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
    //                if (headerEleName == 'FK_Product') {
    //                    headerEleName = "Product";
    //                }
    //                let errmessage = headerEleName + " Already exits"
    //                if ($thisEle.is('select')) {
    //                    cvalue = $thisEle.val();
    //                }
    //                else if ($thisEle.is('input')) {
    //                    let inputEleType = $thisEle.attr('type').toLocaleLowerCase();
    //                    if (inputEleType == 'checkbox') { cvalue = $thisEle.is(':checked'); }
    //                    else if (inputEleType == 'hidden') { cvalue = $thisEle.val(); }
    //                    else { cvalue = $thisEle.val(); }
    //                }
    //                else {
    //                    cvalue = $thisEle.val();
    //                }
    //                if (prevData.find(a => a[atname] == cvalue)) {
    //                    $errorElement.text(errmessage);
    //                    isValid = false;
    //                }
    //            }
    //        });
    //    }
    //    console.log('check 4');
    //    if (isValid) {
    //        console.log('check 4.1');
    //        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
    //            let $this = $(this);
    //            let headerName = $this.attr('perfect-tempTable-' + tableKey);
    //            let nameAttr = $this.attr('name');
    //            if ($this.is('select')) {
    //                tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
    //                tableOptionsTemp.hideColumn.push(nameAttr)
    //                if ($this.val() != null) {
    //                    let selectText = ($this.val().length == 0) ? '' : $this.children(":selected").text();
    //                    insertData[nameAttr + '_d'] = selectText;
    //                }
    //                else {
    //                    let selectText = ($this.val() == null) ? '' : $this.children(":selected").text();
    //                    insertData[nameAttr + '_d'] = selectText;
    //                }
    //                insertData[nameAttr] = $this.val();
    //                $this.val('').selectpicker('refresh');
    //            }
    //            else if ($this.is('input')) {
    //                let inputType = $this.attr('type').toLocaleLowerCase();
    //                if (inputType == 'checkbox') {
    //                    insertData[nameAttr] = $this.is(':checked');
    //                    tableOptionsTemp.isCheckType.push(nameAttr)
    //                    $this.prop('checked', false);
    //                }
    //                else if (inputType == 'hidden') {
    //                    tableOptionsTemp.hideColumn.push(nameAttr)
    //                    insertData[nameAttr] = $this.val();
    //                    $this.val('');
    //                }
    //                else if (inputType == 'date') {
    //                    insertData[nameAttr] = $this.val();
    //                    $this.val('');
    //                }
    //                else {
    //                    insertData[nameAttr] = $this.val();
    //                    $this.val('');
    //                }
    //            }
    //            else {
    //                insertData[nameAttr] = $this.val();
    //                $this.val('');
    //            }
    //        });
    //        console.log('check 4.2');
    //        if (isNew) {
    //            console.log('check 4.2.1');
    //            if ($tblcontainer.find('table').length == 0) {
    //                console.log('check 4.2.3');
    //                $tblcontainer.append(pft_table_createtable([insertData], tableOptionsTemp));
    //            }
    //            else {
    //                console.log('check 4.2.1');
    //                let table = $tblcontainer.find('table').DataTable()
    //                table.destroy()
    //                pft_table_addTableRow($tblcontainer.find('table'), insertData, tableOptionsTemp);
    //            }
    //            console.log('check 4.2.1');
    //        }
    //        else {
    //            console.log('check 4.3');
    //            let table = $tblcontainer.find('table').DataTable()
    //            table.destroy()
    //            console.log('check 4.4');
    //            console.log('table', $tblcontainer.find('table'))
    //            console.log('check 4.5');
    //            pft_table_replaceTableRow($tblcontainer.find('table'), updateCond, insertData, tableOptionsTemp);
    //        }
    //        console.log(insertData);
    //        $tblcontainer.attr('perfect-tempTable-action', 0);
    //    }
    //    console.log('check 5');
    //    console.log("isValid", isValid);
    //    return isValid;
    //}

    //var JobCardTypetableOptionsTempOut = {
    //    iconButton: {
    //        buttons: [
    //            {
    //                icon: "fa fa-pencil btnPerfectGridEdit",
    //                action: function () {
    //                    let savedData = $(this).closest('tr').data('pData');
    //                    let $tablecontainer = $(this).closest('[perfect-tempTable]');
    //                    let tableKey = $tablecontainer.attr('perfect-tempTable');
    //                    let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
    //                    let indexname = tableKey + 'index';
    //                    let rindex = $(this).closest('tr').attr(indexname);
    //                    $tablecontainer.attr('perfect-tempTable-action', rindex);
    //                    console.log('Editclick', savedData);
    //                    $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
    //                        let $thisNode = $(this);
    //                        let pf_name = $thisNode.attr('name');
    //                        if ($thisNode.is('select')) {
    //                            $thisNode.val(savedData[pf_name]).selectpicker('refresh');
    //                        }
    //                        else if ($thisNode.is('input')) {

    //                            if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

    //                                $thisNode.prop('checked', savedData[pf_name]);
    //                            }
    //                            else {
    //                                $thisNode.val(savedData[pf_name]);
    //                            }
    //                        }
    //                        else {
    //                            $thisNode.val(savedData[pf_name]);
    //                        }
    //                    });
    //                }
    //            },
    //            {
    //                icon: "fa fa-trash btnPerfectGridDelete",
    //                action: function () {
    //                    let $thistbl = $(this).closest('table');
    //                    let table = $thistbl.DataTable();
    //                    table.destroy();
    //                    if ($(this).closest('tbody').find('tr').length > 1) {
    //                        $(this).closest('tr').remove();
    //                        pft_table_slreset($thistbl);
    //                    }
    //                    else {
    //                        $thistbl.remove();
    //                    }
    //                }
    //            }

    //        ]
    //    },
    //    onlyShowColumn: ["PeriodType_d", "Period","NoofCount","EndDate"],
    //    hideColumn: [],
    //    serialNo: true,
    //    renameHeader: {"PeriodType_d": "Period Type", "Period": "Period1R", "NoofCount": "No of Count1R","EndDate":"End Date" },
    //    rowAttribute: [],
    //    isCheckType: []
    //};

    var JobCardType = "";
    var StartDate = "";
    var EndDate = "";
    var TargetDate = "";
    var FK_Master = 0;
    var JobCardDetails = [];
    var JobCardTypeDetails = [];
    var Priority = "";
    var JobCardNo ="";
    var PeriodType = 0;
    var Period = 0;
    var NoofCount = 0;
    var TypeEndDate = "";

    function SubmitJobCard(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
       
         PeriodType = $thisForm.find('[name="PeriodType"]').val();
         Period = $thisForm.find('[name="Period"]').val();
         NoofCount = $thisForm.find('[name="NoofCount"]').val();
         TypeEndDate = $thisForm.find('[name="TypeEndDate"]').val();     

        $('#formGroupModalrecurringjob').modal('hide');
        btnsave(ele, 'new');
    }

   
    
  
    function fn_UpdateJobCard(element, actionType) {
        debugger;
        let $thisForm = $(element).closest('[perfect-class="form"]');
        console.log("is valid", $thisForm.valid());
        JobCardNo =  $thisForm.find('[name="JobCardNo"]').val();
        JobCardType = $thisForm.find('[name="ddlTypeID"]').val();
        Priority = $thisForm.find('[name="Priority"]').val();     
        PeriodType = PeriodType;
        Period = Period;
        NoofCount = NoofCount;
        TypeEndDate = $thisForm.find('[name="TypeEndDate"]').val();   

        if (JobCardType == 1) {
            StartDate = $thisForm.find('[name="JobCardStartDate"]').val();
            EndDate = $thisForm.find('[name="JobCardTargetDate"]').val();
            JobCardNo = JobCardNo;
            FK_Master = 0;
            $thisForm.find('[perfect-tempTable="JobCard"]').find('tbody').find('tr').each(function () {
                JobCardDetails.push($(this).data('pData'));
            })

        }
        else if (JobCardType == 2) {
            StartDate = $thisForm.find('[name="ProjectStartDate"]').val();
            EndDate = $thisForm.find('[name="EndDate"]').val();     
            JobCardNo = JobCardNo;
            FK_Master = $thisForm.find('[name="FK_Project"]').val();          
            $thisForm.find('[perfect-tempTable="Project"]').find('tbody').find('tr').each(function () {
                JobCardDetails.push($(this).data('pData'));
            })

        }
        else {
            StartDate = $thisForm.find('[name="SalOrderStartDate"]').val();
            EndDate = $thisForm.find('[name="SODates"]').val();  
            JobCardNo = JobCardNo;
            FK_Master = $thisForm.find('[name="OrderNo"]').val();
            $thisForm.find('[perfect-tempTable="SalOrder"]').find('tbody').find('tr').each(function () {
                JobCardDetails.push($(this).data('pData'));
            })

        }


        console.log("Valid", $thisForm.valid());
        if (JobCardDetails.length <= 0) {
            if (JobCardType == 1) {
                //  createatable(ele, 'ProductType', ['Name']);
                createItems(element, function (result) {
                    if (result == 1) {
                        $thisForm.find('[perfect-tempTable="JobCard"]').find('tbody').find('tr').each(function () {
                            JobCardDetails.push($(this).data('pData'));
                        })
                    }


                })
            }
            else if (JobCardType == 2) {
                createItems(element, function (result) {
                    if (result == 1) {
                        $thisForm.find('[perfect-tempTable="Project"]').find('tbody').find('tr').each(function () {
                            JobCardDetails.push($(this).data('pData'));
                        })
                    }


                })
            }
            else {
                createItems(element, function (result) {
                    if (result == 1) {
                        $thisForm.find('[perfect-tempTable="SalOrder"]').find('tbody').find('tr').each(function () {
                            JobCardDetails.push($(this).data('pData'));
                        })
                    }
                })
            }
        }
           
       
        if (actionType === "new") {
            ID_JobCard = 0;
            FK_JobCard = 0;
            _ActionUrl = "@Url.Action("AddNewJobCard", "JobCardCreation")";
        }
        else if (actionType === "update") {
            ID_JobCard = $thisForm.find('[name="ID_JobCard"]').val();
            FK_JobCard = $thisForm.find('[name="ID_JobCard"]').val();
            _ActionUrl = "@Url.Action("UpdateJobCard", "JobCardCreation")";
        }

        if (JobCardDetails.length > 0) {
            if (checkdatewithLDdate(ele)) {
                let inputData = {
                    __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                    'ID_JobCard': ID_JobCard,
                    'FK_JobCard': FK_JobCard,
                    'JobCardNo': JobCardNo,
                    'TransMode': JobCardTransMode,
                    'JobCardType': JobCardType,
                    'Priority': Priority,
                    'StartDate': StartDate,
                    'TargetDate': EndDate,
                    'FK_Master': FK_Master,
                    'JobCardDetails': JobCardDetails,
                    'PeriodType': PeriodType,
                    'Period': Period,
                    'NoofCount': NoofCount,
                    'TypeEndDate': TypeEndDate

                };
                if (JobCardType == 1) {
                    let confirmationDialogBoxOption = { heading: "Are you Sure?", body: "It is a recurring job card or not? ", confirm: "Yes", cancel: "No" };
                    var confirmBoxObj = ConfirmDialog(confirmationDialogBoxOption);
                    confirmBoxObj.then(function (selectedOption) {
                        if (selectedOption) {
                            $('#formGroupModalrecurringjob').modal('show');
                        }
                        else {
                            btnsave(element, actionType);
                        }
                    });
                }
                else {
                    btnsave(element, actionType);
                }
            }
            else {
                NotificationMessage({ 'type': 'error', 'heading': 'info', 'message': 'Target  Date sholud be greater than or equal to Order date' });

                }
            }

       
        else {
            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Please Add at lease One Product' });
        }
    }

    function btnsave(element, actionType) {
        debugger;
        let $thisForm = $(element).closest('[perfect-class="form"]');
           TypeEndDate = $thisForm.find('[name="TypeEndDate"]').val();   
        if (JobCardType == 1) {
            StartDate = $thisForm.find('[name="JobCardStartDate"]').val();
            EndDate = $thisForm.find('[name="JobCardTargetDate"]').val();
            JobCardNo = $thisForm.find('[name="JobCardNo"]').val();
            FK_Master = 0;
            $thisForm.find('[perfect-tempTable="JobCard"]').find('tbody').find('tr').each(function () {
                JobCardDetails.push($(this).data('pData'));
            })

        }
        else if (JobCardType == 2) {
            StartDate = $thisForm.find('[name="ProjectStartDate"]').val();
            EndDate = $thisForm.find('[name="EndDate"]').val();          
            FK_Master = $thisForm.find('[name="FK_Project"]').val();       
            $thisForm.find('[perfect-tempTable="Project"]').find('tbody').find('tr').each(function () {
                JobCardDetails.push($(this).data('pData'));
            })

        }
        else {
            StartDate = $thisForm.find('[name="SalOrderStartDate"]').val();
            EndDate = $thisForm.find('[name="SODates"]').val();         
            FK_Master = $thisForm.find('[name="OrderNo"]').val();
            $thisForm.find('[perfect-tempTable="SalOrder"]').find('tbody').find('tr').each(function () {
                JobCardDetails.push($(this).data('pData'));
            })

        }

          if (actionType === "new") {
            ID_JobCard = 0;
            FK_JobCard = 0;
            _ActionUrl = "@Url.Action("AddNewJobCard", "JobCardCreation")";
        }
        else if (actionType === "update") {
            ID_JobCard = $thisForm.find('[name="ID_JobCard"]').val();
            FK_JobCard = $thisForm.find('[name="ID_JobCard"]').val();
            _ActionUrl = "@Url.Action("UpdateJobCard", "JobCardCreation")";
        }
        let inputData = {
            __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
            'ID_JobCard': ID_JobCard,
            'FK_JobCard': FK_JobCard,
            'JobCardNo': JobCardNo,
            'TransMode': JobCardTransMode,
            'JobCardType': JobCardType,
            'Priority': Priority,
            'StartDate': StartDate,
            'TargetDate': EndDate,
            'FK_Master': FK_Master,
            'JobCardDetails': JobCardDetails,
            'PeriodType': PeriodType,
            'Period': Period,
            'NoofCount': NoofCount,
            'TypeEndDate': TypeEndDate
        };
        $.ajax({
            url: _ActionUrl,
            type: "POST",
            data: inputData,
            dataType: "json",
            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            success: function (ajaxOutput) {
                debugger;
                if (ajaxOutput.Process.IsProcess) {
                    $.each(ajaxOutput.Process.Message, function (key, value) {
                        NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                    });
                    $thisForm.find('[perfect-ctype="select"]').val('').selectpicker('refresh');
                    $thisForm.find('[perfect-ctype="input"]').val('');
                    $thisForm.find('[perfect-ctype="date"]').val('');
                    let onSuccess = $thisForm.attr('perfect-onFormSuccess')
                    if (onSuccess) {
                        window[onSuccess]();
                        fn_LoadJobCard();
                    }
                }
                else {
                    $.each(ajaxOutput.Process.Message, function (key, value) {
                        NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                        $(element).prop('disabled', false);
                    });
                }
            }
        });
    }  
        
    function getfunction(ele) {
        
        let $thisForm = $(ele).closest('[perfect-class="form"]');

        let ddlTypeID = $('#ddlTypeID').val();

        if (ddlTypeID == 2) {

            $("#divCusDetails").css('display', 'block');
            $("#divBilldetails").css('display', 'block');
            let ConsName = $thisForm.find('[name="CustomeName"]').val();
            let MobileNo = $thisForm.find('[name="Mobile"]').val();
            let Address = $thisForm.find('[name="Address"]').val();
            $thisForm.find('[name=CusName]').text(ConsName);
            $thisForm.find('[name=Mobile]').text(MobileNo);
            $thisForm.find('[name=Address]').text(Address);
            ShowBillDetails(ele);
        }
        else if (ddlTypeID == 3) {
            $("#divCusDetails").css('display', 'block');
            $("#divBilldetails").css('display', 'block');
            let ConsName = $thisForm.find('[name="CustomeName"]').val();
            let MobileNo = $thisForm.find('[name="Mobile"]').val();
            let Address = $thisForm.find('[name="Address"]').val();
            $thisForm.find('[name=CusName]').text(ConsName);
            $thisForm.find('[name=Mobile]').text(MobileNo);
            $thisForm.find('[name=Address]').text(Address);
            $thisForm.find('[name=BillNo]').text('');
            $thisForm.find('[name=Bill_Date]').text('');
            $thisForm.find('[name=SalNetAmount]').text('');
            ShowBillDetails(ele);
        }

    }
    function checkdatewithLDdate(ele) {

        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        console.log('SODate', $thisForm.find('[name=SODate]').val());
        console.log('SODates', $thisForm.find('[name=JobCardTargetDate]').val());
        let Sodate = $thisForm.find('[name=SODate]').val();
        let date = $thisForm.find('[name=JobCardTargetDate]').val();
        if (date < Sodate) {
            $thisForm.find('[name="JobCardTargetDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('Target  Date sholud be greater than or equal to Order date');
            return false;

        }
        else {

            $thisForm.find('[name="JobCardTargetDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('')
            return true;
        }



    }
</script>