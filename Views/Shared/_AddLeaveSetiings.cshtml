

@model PerfectWebERP.Models.LeaveSettingsModel.LeaveSettingsView

<style>

    input[type="number"]::-webkit-inner-spin-button,
    input[type="number"]::-webkit-outer-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

</style>
<div class="card ">
    <div class="card-header">
        <h4 class="card-title col-12">Leave Settings</h4>
        <span title="To View List" onclick="fn_showListView();"><svg id="Layer_1" class="layer" stroke="currentColor" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" height="20" width="20" viewBox="0 0 122.88 122.54"><title>To View List</title><path class="viewlst" d="M4.69,0H46.22a4.71,4.71,0,0,1,4.69,4.69V46a4.69,4.69,0,0,1-4.69,4.69H4.69a4.65,4.65,0,0,1-3.31-1.38l-.09-.09A4.67,4.67,0,0,1,0,46V4.69A4.71,4.71,0,0,1,4.69,0ZM89.44,61.94a26.56,26.56,0,0,1,10.18,2l.07,0a26.61,26.61,0,0,1,15.25,32.16,26.18,26.18,0,0,1-2.7,6.11l10.3,11.24a1.27,1.27,0,0,1-.07,1.8l-7.57,6.9a1.27,1.27,0,0,1-1.79-.07l-9.86-10.85a26.36,26.36,0,0,1-6.1,2.74,26.87,26.87,0,0,1-7.71,1.13,26.51,26.51,0,0,1-10.17-2l-.07,0A26.64,26.64,0,0,1,64.85,78.37l0-.07A26.6,26.6,0,0,1,89.44,61.94Zm15,11.59a21.38,21.38,0,0,0-6.89-4.61l-.06,0a21.22,21.22,0,0,0-23.07,4.64l-.07.07a21.25,21.25,0,0,0-4.54,6.83l0,.06a21.32,21.32,0,0,0-1.58,8.06,21.26,21.26,0,0,0,29.35,19.62,21.54,21.54,0,0,0,6.89-4.61l.07-.07a21.09,21.09,0,0,0,4.54-6.83l0-.06a21.35,21.35,0,0,0,0-16.17,21.34,21.34,0,0,0-4.62-6.9ZM4.69,63.2H46.22a4.71,4.71,0,0,1,4.69,4.7v41.34a4.68,4.68,0,0,1-4.69,4.69H4.69A4.69,4.69,0,0,1,0,109.24V67.9a4.71,4.71,0,0,1,4.69-4.7ZM68.78,0h41.53A4.71,4.71,0,0,1,115,4.69V46a4.71,4.71,0,0,1-4.69,4.69H68.78A4.71,4.71,0,0,1,64.09,46V4.69a4.69,4.69,0,0,1,1.37-3.31l.1-.09A4.67,4.67,0,0,1,68.78,0Z"></path></svg></span>
    </div>
    <div class="card-body">
        <form id="" class="form-valide" perfect-class="form" action="#" method="post" perfect-onFormSuccess="">
            <div class="">
                @Html.AntiForgeryToken()
                <div class="row">

                    <div class="col-md-12">

                        <div class="row">

                            <div class="col-sm-4">
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-4 col-form-label">
                                        <span perfect-class="formGroupLabel">Effect Date</span>
                                        <span class="text-danger">*</span>
                                    </label>
                                    <div class="col-sm-8">
                                        <div class="input-group">
                                            <input type="date" class="form-control perfectValidate_date" name="EffectDate" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" max="2050-01-01" />

                                        </div><div class="invalid-feedback animated limit-check fadeInUp" style="display: block;"></div>
                                    </div>
                                </div>
                            </div>

                            <div class="col-sm-4">
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-4 col-form-label">
                                        <span perfect-class="formGroupLabel">Salary Days in a Month</span>

                                    </label>
                                    <div class="col-sm-8">
                                        <input type="number" class="form-control" placeholder="" name="LsSalCalculateDays" onkeypress="return isNumberKey(event)" perfect-class="formGroupControl" min="0" max="31" perfect-ctype="input" perfect-css="input" />

                                    </div>
                                </div>

                            </div>




                            <div class="col-sm-4">
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-4 col-form-label">
                                        <span perfect-class="formGroupLabel">Leave Type</span>
                                        <span class="text-danger">*</span>
                                    </label>
                                    <div class="col-sm-8">
                                        <div class="input-group" i>

                                            <select id="mySelect" multiple class="form-control perfectValidate_string" name="FK_LeaveType" perfect-selectButtonAction="testing" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select">


                                                @if (!(Model.leaveTypeLists is null))
                                                {
                                                    foreach (var actlist in Model.leaveTypeLists)
                                                    {
                                                        <option value="@actlist.ID_LeaveType">@actlist.TypeName </option>
                                                    }
                                                }
                                            </select>


                                        </div>
                                        <div class="invalid-feedback animated" style="display: block;"></div>
                                    </div>
                                </div>
                            </div>

                        </div>

                    </div>
                 





                </div>

                <div class="row">
                    <div class="col-md-12">
                        <div id="accordion-Two" class="accordion accordion-active-header">

                            <div class="accordion__item">
                                <div class="accordion__header collapsed" id="LeaveDetails" data-target="#active-header_collapseTwo" aria-expanded="true">
                                    <span class="accordion__header--icon"></span>
                                    <span class="accordion__header--text">LEAVE DETAILS</span>

                                </div>


                                <div id="active-header_collapseTwo" class="collapse accordion__body" data-parent="#accordion-Two">
                                    <div class="accordion__body" style="padding-top:2rem">
                                        <div class="row">
                                            @*<div class="col-sm-12">*@
                                               
                                                @*<div class="row">*@
                                                    <div class="col-sm-4 PerError">
                                                        <div class="form-group row" perfect-class="formGroup">
                                                            <label class="col-sm-4 col-form-label">
                                                                <span perfect-class="formGroupLabel" name="AllowanceType">Allowance Recovery Type</span>
                                                                <span class="text-danger">*</span>
                                                            </label>

                                                            <div class="col-sm-8">
                                                                <div class="input-group">
                                                                    <select class="form-control" perfect-tempTable-LeaveSettingsDetails="FK_AllowanceType" name="FK_AllowanceType" perfect-selectButtonAction="testing" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select">
                                                                        <option value="">Please Select </option>

                                                                        @if (!(Model.recoveryTypeLists is null))
                                                                        {
                                                                            foreach (var typelist in Model.recoveryTypeLists)
                                                                            {
                                                                                <option value="@typelist.ID_AllowanceType">@typelist.AllowName </option>
                                                                            }
                                                                        }
                                                                    </select>
                                                                </div>
                                                                <div class="text-danger temptableError"></div>
                                                            </div>
                                                        </div>
                                                    </div>

                                                    <div class="col-sm-4">
                                                        <div class="form-group row" perfect-class="formGroup">
                                                            <label class="col-sm-4 col-form-label">
                                                                <span id="lblEmpl" perfect-class="formGroupLabel">Deduct Percentage</span>
                                                                <span class="text-danger">*</span>
                                                            </label>
                                                            <div class="col-sm-8">
                                                                <input type="text" class="form-control text-right" perfect-tempTable-LeaveSettingsDetails="LsdDeductPercent" name="LsdDeductPercent"  min="1" max="100" maxlength="6" perfect-class="formGroupControl" oninput="decimalpnt(this,'LsdDeductPercent',3)"  perfect-ctype="input" perfect-css="input" />
                                                                <div class="text-danger temptableError"></div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="col-sm-4">
                                                        <button class="btn btn-primary1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" title="Add leave details" onclick="AddLeavedetails(this,'LeaveSettingsDetails',['FK_AllowanceType'])"><i class="fa fa fa-plus" aria-hidden="true"></i></button>
                                                        <button class="btn btn-light1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" onclick="detailsClear(this,'LeaveSettingsDetails')"><i class="fa fa-refresh" aria-hidden="true"></i></button>

                                                    </div>

                                                @*</div>*@
                                            @*</div>*@
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="col-sm-12">
                            <div class="form-group row" perfect-class="formGroup">
                                <div class="table-responsive" perfect-tempTable="LeaveSettingsDetails" perfect-tempTable-lastindex="0" id="LeaveSettingHead" perfect-tempTable-action="0"></div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-footer text-right" perfect-class="formFooter">
                    @if (ViewBag.PagedAccessRights.UsrrlMsEdt)
                    {
                        <button id="" type="button" class="btn btn-primary mr-3 addcompany-jq-addnewuserUpdate d-none" name="update" perfect-css="button" onclick="UpdateLeaveSettings(this,'Update')"><i class="fa fa-refresh fa-spin  loaderClass"></i>Update</button>
                    }
                    @if (ViewBag.PagedAccessRights.UsrrlMsAdd)
                    {
                        <button id="addcompany-jq-addnewuser" type="button" class="btn btn-primary mr-3 " name="add" perfect-css="button" onclick="UpdateLeaveSettings(this,'Add')"><i class="fa fa-refresh fa-spin loaderClass "></i>Save</button>
                    }
                    <button type="button" class="btn btn-light" perfect-css="button" onclick="ResetButton(this)" name="reset">Clear</button>
                </div>
        </form>
    </div>
</div>
<script src="~/Scripts/jqDOM/searchDOMCreation.js"></script>
@*<link href="css/multi.select.css" rel="stylesheet">
    <script src="https://code.jquery.com/jquery-1.12.4.min.js"
            integrity="sha384-nvAa0+6Qg9clwYCGGPpDQLVpLNn0fRaROjHqs13t4Ggj3Ez50XnGQqc/r8MhnRDZ"
            crossorigin="anonymous">
    </script>
    <script src="js/multi.select.js"></script>*@
<script>
    (function () {
        jQuery("select").selectpicker();

    });
    $(document).ready(function () {

        initFunctions('form');
        //$('.select2').select2();
        $('#active-header_collapseTwo').addClass('collapse');
        $('#active-header_collapseTwo').addClass('show');

        let $thisForm = $(this).closest('[perfect-class="form"]');

    });


    function decimalpnt(ele, id, range) {

        let input = $('#' + id);
        ele.value = ele.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');
        let t = ele.value;
        ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t;
        input.on('keydown', function () {
            if (ele.value.includes('.')) {

            }
            var key = event.keyCode || event.charCode;
            if (key == 8 || key == 46) { }
            else {
                if (ele.value.length == 9) {
                    ele.value = ele.value + '.';
                }
            }

        });

    }

    function isNumberKey(evt) {
        var charCode = (evt.which) ? evt.which : event.keyCode
        if (charCode > 31 && (charCode < 48 || charCode > 57))
            return false;

        return true;
    }

    function ResetButton() {
        fn_LeaveSetting_initialLoad();
    }
    function UpdateLeaveSettings(ele, actiontype) {


        let $thisForm = $(ele).closest('[perfect-class="form"]');

        if ($thisForm.valid()) {
            debugger;
            let mainData = [];

            $thisForm.find('[perfect-tempTable="LeaveSettingsDetails"]').find('table>tbody').find('tr').each(function () {

                mainData.push($(this).data('pData'));
            });

            let leavetype = [];
            $thisForm.find('[name="FK_LeaveType[]"]').each(function () {
                leavetype.push({ "FK_LeaveType": $(this).val() });
                console.log('leavetype', leavetype);
            });
          




            if (mainData.length != 0) {

                var inputData = {
                    __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                    'TransMode': '',
                    'EffectDate': $thisForm.find('[name="EffectDate"]').val(),
                    'LsSalCalculateDays': $thisForm.find('[name="LsSalCalculateDays"]').val(),
                    'FK_LeaveType': $thisForm.find('[name="FK_LeaveType"]').val(),
                    LeaveDetails: mainData,
                    //leave: leavetype,
                    'LeaveType': $thisForm.find('[name="FK_LeaveType"]').val()
                };
                console.log('inp', inputData);

                 let _ActionUrl = "";
                        if (actiontype == "Add") { _ActionUrl = "@Url.Action("AddLeaveSetting", "LeaveSettings")"; } else { _ActionUrl = "@Url.Action("UpdateLeaveSetting", "LeaveSettings")"; }

                $.ajax({
                    url: (actiontype == "Add") ? "@Url.Action("AddLeaveSetting", "LeaveSettings")" : "@Url.Action("UpdateLeaveSetting", "LeaveSettings")",
                    type: "POST",
                    data: inputData,
                    dataType: "json",
                    contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                    success: function (data) {
                        debugger;

                        if (data.Process.IsProcess) {

                            $.each(data.Process.Message, function (key, value) {
                                NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                            });
                            $thisForm.find('[perfect-ctype="select"]').val('').selectpicker('refresh');
                            $thisForm.find('[perfect-ctype="input"]').val('');
                            $thisForm.find('[perfect-ctype="date"]').val('');
                            $thisForm.find('[perfect-ctype="hidden"]').val('');

                            let onSuccess = $thisForm.attr('perfect-onFormSuccess');
                            if (onSuccess) {
                                fn_LeaveSetting_initialLoad();
                            }

                        }
                        else {
                            $.each(data.Process.Message, function (key, value) {
                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                            });
                        }
                    },
                    complete: function () {
                        $(ele).prop('disabled', false);
                    }
                });

            }
            else {
                NotificationMessage({ 'type': 'error', 'heading': 'info', 'message': 'Please Enter Atleast One Leave Details!!!' });
            }

        }
    }




    function detailsClear(ele, tableKey) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');

        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="input"]').val('');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="select"]').val('').selectpicker('refresh');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="text"]').val('');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="date"]').val('');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="hidden"]').val('');

    }


    function AddLeavedetails(ele, tkey, uniq = []) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let tableKey = tkey;
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');

        let insertData = {};
        let tableOp = tableOptionsTemp;


        let uniqe = (uniq) ? uniq : [];

        let isValid = true;
        let errorClass = '.temptableError';


        let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
        let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
        let indexname = tkey + 'index';
        tableOp.rowAttribute.push(indexname);
        tableOp.hideColumn.push(indexname);
        let updateCond = '';
        let isNew = true;

        if (thisactionIndex > 0) {
            //means update
            insertData[indexname] = thisactionIndex;
            updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
            isNew = false;
        }
        else {
            //insert
            insertData[indexname] = lastIndex + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
            isNew = true;
        }
        debugger


        if (tableKey == 'LeaveSettingsDetails') {
            debugger
            if ($thisForm.find('[perfect-tempTable-' + tableKey + '="FK_AllowanceType"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="FK_AllowanceType"]').val == null || $thisForm.find('[perfect-tempTable-' + tableKey + '="FK_AllowanceType"]').val == '') {
                isValid = false;
                console.log('false');
                $thisForm.find('[perfect-tempTable-' + tableKey + '="FK_AllowanceType"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please select Allowance Type');
            }
            else {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="FK_AllowanceType"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }

            if ($thisForm.find('[perfect-tempTable-' + tableKey + '="LsdDeductPercent"]').val == null || $thisForm.find('[perfect-tempTable-' + tableKey + '="LsdDeductPercent"]').val == '') {
                isValid = false;
                console.log('false');
                $thisForm.find('[perfect-tempTable-' + tableKey + '="LsdDeductPercent"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter Deduct Percentage ');
            }
            else {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="LsdDeductPercent"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }
            if ($thisForm.find('[perfect-tempTable-' + tableKey + '="LsdDeductPercent"]').val() > 100) {
                isValid = false;
                $thisForm.find('[perfect-tempTable-' + tableKey + '="LsdDeductPercent"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }
            else {
                //$thisForm.find('[perfect-tempTable-' + tableKey + '="LsdDeductPercent"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }
            if ($thisForm.find('[perfect-tempTable-' + tableKey + '="LsdDeductPercent"]').val() < 1) {
                isValid = false;
                $thisForm.find('[perfect-tempTable-' + tableKey + '="LsdDeductPercent"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }
            else {
                //$thisForm.find('[perfect-tempTable-' + tableKey + '="LsdDeductPercent"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }

        }

        if (uniqe.length > 0) {
            //getting previous data
            let prevData = [];
            $tblcontainer.find('table > tbody').find('tr').each(function () {
                if (isNew) {
                    prevData.push($(this).data('pData'));
                }
                else {
                    if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                        prevData.push($(this).data('pData'));
                    }

                }

            })
            // console.log('previous data', prevData);

            uniqe.forEach(function (key, i) {
                console.log('unid -> key:' + key + "| index :" + i);
                let $thisEle = $thisForm.find('[perfect-tempTable-' + tableKey + '="' + key + '"]');
                let headerEleName = $thisForm.find('[name="lblEmpl"]').text();
                let atname = $thisEle.attr('name');
                let cvalue;

                //console.log('len')
                if ($thisEle.length != 0) {
                    console.log('len', $thisEle)
                    let $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
                    let errmessage = headerEleName + " Already exists"

                    //getting current value in cval
                    if ($thisEle.is('select')) {
                        cvalue = $thisEle.val();
                        //alert(cvalue);
                    }
                    else if ($thisEle.is('input')) {

                        let inputEleType = $thisEle.attr('type').toLocaleLowerCase();

                        if (inputEleType == 'checkbox') { cvalue = $thisEle.is(':checked'); }
                        else if (inputEleType == 'hidden') { cvalue = $thisEle.val(); }
                        else { cvalue = $thisEle.val(); }
                    }
                    else { cvalue = $thisEle.val(); }

                    // console.log('cvalue ->' + cvalue);

                    //searching in previous data
                    if (prevData.find(a => a[atname] == cvalue)) {
                        // console.log('Search =>' + cvalue + '| attr :' + atname)
                        $errorElement.text(errmessage);
                        isValid = false;
                    }
                }
            });

        }

        if (isValid) {
            //console.log('check 4.1');


            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                //console.log('nameAttr', nameAttr);
                //console.log('headerName', headerName);


                if ($this.is('select')) {
                    switch (headerName) {
                        case "FK_AllowanceType":
                            headerName = "Allowance Type";
                            break;

                        default:
                            break
                    }
                    tableOp.renameHeader[nameAttr + '_d'] = headerName;
                    tableOp.hideColumn.push(nameAttr)
                    if ($this.val() != null) {
                        let selectText = ($this.val().length == 0) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    else {
                        let selectText = ($this.val() == null) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    insertData[nameAttr] = $this.val();

                    $this.val('').selectpicker('refresh');

                }
                else if ($this.is('input')) {

                    let inputType = $this.attr('type').toLocaleLowerCase();

                    if (inputType == 'checkbox') {

                        insertData[nameAttr] = $this.is(':checked');

                        tableOp.isCheckType.push(nameAttr)
                        //clear field
                        $this.prop('checked', false);

                    }
                    else if (inputType == 'hidden') {

                        tableOp.hideColumn.push(nameAttr)
                        insertData[nameAttr] = $this.val();

                        //if ($thisForm.find('[name="FK_Employee"]').val() == $this.val()) { }

                        //else { $this.val(''); }

                        $this.val('');

                        //clear field

                    }
                    else if (inputType == 'date') {


                        if ($this.val() == '') {

                            insertData[nameAttr] = null;
                        }
                        else {

                            insertData[nameAttr] = $this.val();
                        }

                        //clear field
                        // $this.val('');
                    }

                    else {
                        insertData[nameAttr] = $this.val();
                        //$this.val() == "" ? "''" : $this.val();
                        //clear field

                        //if ($thisForm.find('[name="AssignEmp"]').val() == $this.val()) {

                        //}
                        //else { $this.val(''); }

                        $this.val('');
                    }
                }
                else {
                    insertData[nameAttr] = $this.val();
                    //if ($thisForm.find('[name="AssignEmp"]').val() == $this.val()) { }
                    //else { $this.val(''); }
                    $this.val('');
                }




            });

            // console.log('check 4.2', insertData);
            // console.log('check 4.2 tableoption', tableOp);




            if (isNew) {
                //console.log('check 4.2.1');
                //this section nake table.table row
                if ($tblcontainer.find('table').length == 0) {
                    //  console.log('check 4.2.3');
                    console.log(insertData);
                    $tblcontainer.append(pft_table_createtable([insertData], tableOp));
                    //  $tblcontainer.find('table').dataTable({ paging: false, ordering: false });
                }
                else {
                    //console.log('check 4.2.1');
                    let table = $tblcontainer.find('table').DataTable()
                    table.destroy()
                    pft_table_addTableRow($tblcontainer.find('table'), insertData, tableOp);


                    //  $tblcontainer.find('table').dataTable({ paging: false, ordering: false});
                    //   $tblcontainer.DataTable().draw();
                    //  table.ajax.reload();
                }
                //console.log('check 4.2.1');
            }
            else {
                // console.log('check 4.3');
                let table = $tblcontainer.find('table').DataTable()
                table.destroy()
                //console.log('check 4.4');
                console.log('table', $tblcontainer.find('table'))
                //  console.log('check 4.5');
                pft_table_replaceTableRow($tblcontainer.find('table'), updateCond, insertData, tableOp);


                // $tblcontainer.find('table').dataTable({ paging: false,ordering:false });
            }

            // console.log(insertData);
            //alert(1);
            // resetting the edit value
            $tblcontainer.attr('perfect-tempTable-action', 0);


        }
        // console.log('check 5');
        //totalamountcalc(ele);

    }

    var tableOptionsTemp = {

        iconButton: {
            buttons: [
                {
                    icon: "fa fa-pencil btnPerfectGridEdit",


                    action: function () {
                        let savedData = $(this).closest('tr').data('pData')

                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let tableKey = $tablecontainer.attr('perfect-tempTable');
                        let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                        //index attribute name in table row
                        let indexname = tableKey + 'index';
                        //index number in table row
                        let rindex = $(this).closest('tr').attr(indexname);
                        $tablecontainer.attr('perfect-tempTable-action', rindex);

                        console.log('Editclick', savedData);
                        //filling data in available inputs
                        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                            let $thisNode = $(this);
                            let pf_name = $thisNode.attr('name');
                            if ($thisNode.is('select')) {

                                $thisNode.val(savedData[pf_name]).selectpicker('refresh');

                            }
                            else if ($thisNode.is('input')) {
                                let inputType = $thisNode.attr('type').toLocaleLowerCase();
                                if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                    $thisNode.prop('checked', savedData[pf_name]);
                                }
                                //else if (inputType == 'date') {
                                //    console.log('datess', savedData)
                                //    console.log('datess', savedData[pf_name])
                                //    // $thisNode.val(moment(savedData[pf_name]).format('YYYY-DD-MM'));
                                //    $thisNode.val(savedData[pf_name]);
                                //}
                                else {

                                    $thisNode.val(savedData[pf_name]);
                                }

                            }
                            else {

                                $thisNode.val(savedData[pf_name]);
                            }


                        });



                    }

                },

                {
                    icon: "fa fa-trash btnPerfectGridDelete",
                    action: function () {
                        let $thistbl = $(this).closest('table');
                        let table = $thistbl.DataTable();
                        table.destroy();
                        if ($(this).closest('tbody').find('tr').length > 1) {
                            $(this).closest('tr').remove();
                            pft_table_slreset($thistbl);
                            //$thistbl.dataTable({ paging: true, searchbtn: false });
                        }
                        else {
                            $thistbl.remove();
                        }

                    }
                }

            ],


        },

        onlyShowColumn: [ "LsdDeductPercent", "FK_AllowanceType_d"],
        hideColumn: [],
        serialNo: true,
        renameHeader: { "FK_AllowanceType_d": "Allowance Type", "LsdDeductPercent": "Deduct Percentage", "FK_AllowanceType": "Allowance Type" },
        rowAttribute: [],
        isCheckType: [],
        isDataType: [],
    };


    function fn_fillLeavedetails(ele, tkey, data, tableOptionsTemp) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let tableOptionsTempfill = tableOptionsTemp;
        let insertData = []
        let tableKey = tkey;
        let indexname = tkey + 'index';
        tableOptionsTempfill.rowAttribute.push(indexname);
        tableOptionsTempfill.hideColumn.push(indexname);
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');
        $.each(data, function (keyOne, valOne) {
            //debugger
            let pData = {};

            pData[indexname] = keyOne + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', pData[indexname])
            //---

            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                //console.log('tfhyrtname', nameAttr)
                if (typeof valOne[nameAttr] !== undefined) {

                    if ($this.is('select')) {
                        // tableOptionsTempfill.renameHeader[nameAttr + '_d'] = headerName;
                        tableOptionsTempfill.hideColumn.push(nameAttr);
                        //displat text of select
                        pData[nameAttr + '_d'] = $this.find('[value="' + valOne[nameAttr] + '"]').text();
                        pData[nameAttr] = valOne[nameAttr];
                        console.log('select', $this.find('options[value="' + valOne[nameAttr] + '"]').text());

                    }
                    else if ($this.is('input')) {

                        let inputType = $this.attr('type').toLocaleLowerCase();
                        console.log(inputType)


                        if (inputType == 'date') {

                            if (valOne[nameAttr] == null) {
                                pData[nameAttr] = valOne[nameAttr];
                            }
                            else {
                                pData[nameAttr] = moment(valOne[nameAttr]).format('YYYY-MM-DD');
                            }


                        }
                        else {
                            pData[nameAttr] = valOne[nameAttr];


                        }
                    }
                    else {
                        pData[nameAttr] = valOne[nameAttr];


                    }
                }



            });

            insertData.push(pData);


            //----

        });
        $tblcontainer.empty();
        $tblcontainer.append(pft_table_createtable(insertData, tableOptionsTempfill));
    }

</script>