@model PerfectWebERP.Models.LogModel.LogListModel

<style>

    input[type="number"]::-webkit-inner-spin-button,
    input[type="number"]::-webkit-outer-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }
</style>

<div class="card ">
    <div class="card-header">
        <h4 class="card-title col-12">@ViewBag.PageTitle </h4>
        <span title="To View List" onclick="fn_showListView();"><svg id="Layer_1" class="layer" stroke="currentColor" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" height="20" width="20" viewBox="0 0 122.88 122.54"><title>To View List</title><path class="viewlst" d="M4.69,0H46.22a4.71,4.71,0,0,1,4.69,4.69V46a4.69,4.69,0,0,1-4.69,4.69H4.69a4.65,4.65,0,0,1-3.31-1.38l-.09-.09A4.67,4.67,0,0,1,0,46V4.69A4.71,4.71,0,0,1,4.69,0ZM89.44,61.94a26.56,26.56,0,0,1,10.18,2l.07,0a26.61,26.61,0,0,1,15.25,32.16,26.18,26.18,0,0,1-2.7,6.11l10.3,11.24a1.27,1.27,0,0,1-.07,1.8l-7.57,6.9a1.27,1.27,0,0,1-1.79-.07l-9.86-10.85a26.36,26.36,0,0,1-6.1,2.74,26.87,26.87,0,0,1-7.71,1.13,26.51,26.51,0,0,1-10.17-2l-.07,0A26.64,26.64,0,0,1,64.85,78.37l0-.07A26.6,26.6,0,0,1,89.44,61.94Zm15,11.59a21.38,21.38,0,0,0-6.89-4.61l-.06,0a21.22,21.22,0,0,0-23.07,4.64l-.07.07a21.25,21.25,0,0,0-4.54,6.83l0,.06a21.32,21.32,0,0,0-1.58,8.06,21.26,21.26,0,0,0,29.35,19.62,21.54,21.54,0,0,0,6.89-4.61l.07-.07a21.09,21.09,0,0,0,4.54-6.83l0-.06a21.35,21.35,0,0,0,0-16.17,21.34,21.34,0,0,0-4.62-6.9ZM4.69,63.2H46.22a4.71,4.71,0,0,1,4.69,4.7v41.34a4.68,4.68,0,0,1-4.69,4.69H4.69A4.69,4.69,0,0,1,0,109.24V67.9a4.71,4.71,0,0,1,4.69-4.7ZM68.78,0h41.53A4.71,4.71,0,0,1,115,4.69V46a4.71,4.71,0,0,1-4.69,4.69H68.78A4.71,4.71,0,0,1,64.09,46V4.69a4.69,4.69,0,0,1,1.37-3.31l.1-.09A4.67,4.67,0,0,1,68.78,0Z"></path></svg></span>
    </div>
    <div class="card-body">
        <form id="" class="form-valide" perfect-class="form" action="#" method="post" perfect-onFormSuccess="">
            <div class="">
                @Html.AntiForgeryToken()
                <div class="row">

                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel"> Log Date</span>


                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="date" class="form-control perfectValidate_date" name="VtlLogDate" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" max="2050-01-01" onchange="datenchecklogdate(this)" />
                                <div class="invalid-feedback animated fadeInUp limit-check" style="display: block;"></div>


                            </div>
                        </div>
                    </div>


                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Start Date/Time</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <input type="date" class="form-control perfectValidate_date" name="LogStartDate" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" max="2050-01-01" onchange="datecheckst(this)" />
                                    <input type="time" class="form-control" placeholder="" name="LogStartTime" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input">

                                </div><div class="invalid-feedback animated limit-checkst fadeInUp" style="display: block;"></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">End Date/Time</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <input type="date" class="form-control perfectValidate_date" name="LogEndDate" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" max="2050-01-01" onchange="datecheck(this)" />
                                    <input type="time" class="form-control" placeholder="" name="LogEndTime" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input">

                                </div>  <div class="invalid-feedback limit-checks animated" style="display: block;"></div>
                            </div>
                        </div>
                    </div>


                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label" id="Products">
                                @ViewBag.lblpro
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <input type="text" class="form-control perfectValidate_string" perfect-tempTable-Purchase="EmpName" name="ID_Name" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input"  readonly />
                                    <input type="hidden" name="ID_FIELD" perfect-tempTable-Purchase="Item" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input"  />
                                    <div class="input-group-append">
                                        <button id="addcountry-jq-searchButton3" name="prdbtn" class="btn btn-primary fa fa-search" type="button" onclick="fn_showpopuplist(this)" Function="1" perfect-css="button"></button>
                                    </div>
                                    <div class="text-danger temptableError"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">


                            <label class="col-sm-4 col-form-label" id="Employees">
                                @ViewBag.lblemp
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <input type="text" class="form-control perfectValidate_string" name="Employee" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly />
                                    <input type="hidden" name="EmployeeID" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                    <div class="input-group-append">
                                        <button id="addEmployee-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchValAssign(this,69,'Employee Details',[],['Branchs','BranchTypeID','FK_Departement','Department','BranchType','SLNo','FK_Department','FK_Branch'])" Criterea1="" Criterea2="0" Criterea3="0" BindName="Employee" BindVal="EmployeeID"></button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-4" id="klm">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Start Km/ End Km</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <div class="input-group">

                                    <input type="text" class="form-control perfectValidate_string" name="LogStartKm" maxlength="12" id="logStartKm" perfect-class="formGroupControl" min="0" perfect-ctype="input" oninput="decimalpnt(this,'logStartKm',3)" onkeypress='return isNumberKey(event)' perfect-css="input" readonly />

                                    <input type="text" class="form-control perfectValidate_string" name="LogEndKm" maxlength="12" id="logEndKm" perfect-class="formGroupControl" min="0" perfect-ctype="input" oninput="decimalpnt(this,'logEndKm',3)" onchange="kilometetcheck(this)" onkeypress='return isNumberKey(event)' perfect-css="input" />
                                    <div class="invalid-feedback animated fadeInUp limit-check" style="display: block;"></div>

                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">@ViewBag.lbldesc</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <textarea rows="3" name="LogDescription" class="form-control perfectValidate_string" perfect-ctype="input" maxlength="150"></textarea>
                            </div>
                        </div>
                    </div>



                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Remarks</span>

                            </label>
                            <div class="col-sm-8">
                                <textarea rows="3" name="LogRemarks" class="form-control" perfect-ctype="input" maxlength="150"></textarea>
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-6" id="fuelamt">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">FuelType/Amount</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <div class="input-group">

                                    <select class="form-control " name="LogFuelType" perfect-selectButtonAction="testing" perfect-class="formGroupControl" perfect-ctype="select" onchange="clearemployee(this)" perfect-css="select">
                                        <option value="">Please Select </option>

                                        @if (!(Model.ActionStatusList is null))
                                        {
                                            foreach (var actlist in Model.ActionStatusList)
                                            {
                                                <option value="@actlist.ID_Mode">@actlist.ModeName </option>
                                            }
                                        }
                                    </select>
                                    <input type="text" class="form-control text-right" name="LogFuelAmount" maxlength="12" id="fuelamt" perfect-class="formGroupControl" perfect-ctype="input" onchange="totalamountcalc(this)" perfect-css="input" oninput="decimalpnt(this,'fuelamt',3)" />



                                </div>
                                <div class="invalid-feedback animated" style="display: block;"></div>
                            </div>
                        </div>
                    </div>



                    


                </div>
            <div class="row">
                <div class="col-sm-12">

                    <div id="accordion-Two" class="accordion accordion-active-header">

                        <div class="accordion__item">
                            <div class="accordion__header collapsed" id="EmployeeDetails" data-target="#active-header_collapseTwo" aria-expanded="true">
                                <span class="accordion__header--icon"></span>
                                <span class="accordion__header--text">Maintenance Details</span>

                            </div>
                            <div id="active-header_collapseTwo" class="collapse accordion__body" data-parent="#accordion-Two">
                                <div class="accordion__body--text">
                                    <div class="row">
                                        <div class="col-sm-12 " perfect-class="TempTableProduct">
                                            <br />
                                            <div class="row">

                                                <div class="col-sm-3 PerError">
                                                    <div class="form-group row" perfect-class="formGroup">

                                                        <label class="col-sm-5 col-form-label">
                                                            <span perfect-class="formGroupLabel" name="lblMaintenancetype">Type</span>
                                                            @*<span class="text-danger">*</span>*@
                                                        </label>

                                                        <div class="col-sm-7">
                                                            <div class="input-group">
                                                                <select class="form-control" perfect-tempTable-MaintenanceDetails="FK_Maintenance" name="FK_Maintenance" perfect-selectButtonAction="testing" perfect-class="formGroupControl" perfect-ctype="select" onchange="clearemployee(this)" perfect-css="select">
                                                                    <option value="">Please Select </option>

                                                                    @if (!(Model.TypeListdata is null))
                                                                    {
                                                                        foreach (var typelist in Model.TypeListdata)
                                                                        {
                                                                            <option value="@typelist.TypeID">@typelist.TypeName </option>
                                                                        }
                                                                    }
                                                                </select>
                                                            </div>
                                                            <div class="text-danger temptableError"></div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="col-sm-3">
                                                    <div class="form-group row" perfect-class="formGroup">
                                                        <label class="col-sm-4 col-form-label">
                                                            <span id="lblEmpl" perfect-class="formGroupLabel">Amount</span>
                                                            @*<span class="text-danger">*</span>*@
                                                        </label>
                                                        <div class="col-sm-8">
                                                            <input type="text" class="form-control text-left" perfect-tempTable-MaintenanceDetails="VtlDetAmount" name="VtlDetAmount" maxlength="12" id="SalePrice" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="decimalpnt(this,'SalePrice',3)" value="0"/>
                                                            <div class="text-danger temptableError"></div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="col-sm-4">
                                                    <div class="form-group row" perfect-class="formGroup">
                                                        <label class="col-sm-5 col-form-label">
                                                            <span perfect-class="formGroupLabel">Remarks</span>
                                                        </label>
                                                        <div class="col-sm-7">
                                                            <textarea rows="1" name="VtlDetRemarks" class="form-control" perfect-tempTable-MaintenanceDetails="VtlDetRemarks" perfect-ctype="input" maxlength="150"></textarea>
                                                            <div class="text-danger temptableError"></div>

                                                        </div>
                                                    </div>

                                                </div>

                                                <div class="col-sm-2">
                                                    <button class="btn btn-primary1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" title="Add maintenance details" onclick="AddMaintenancedetails(this,'MaintenanceDetails',['FK_Maintenance'])"><i class="fa fa fa-plus" aria-hidden="true"></i></button>
                                                    <button class="btn btn-light1" type="button" id="btnresetLg"  data-toggle="tooltip" data-placement="top" data-html="true" onclick="detailsClear(this,'MaintenanceDetails')"><i class="fa fa-refresh" aria-hidden="true"></i></button>

                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-12">
                        <div class="form-group row" perfect-class="formGroup">
                            <div class="table-responsive" perfect-tempTable="MaintenanceDetails" perfect-tempTable-lastindex="0" id="MaintenanceHead" perfect-tempTable-action="0"></div>
                        </div>
                    </div>
                </div>
            </div>


            <hr />
            <div class="row">
               
                <div class="col-sm-3">
                    <div class="form-group row" perfect-class="formGroup">
                        <label class="col-sm-4 col-form-label">
                            <span perfect-class="formGroupLabel">Total Amount</span>

                        </label>
                        <div class="col-sm-8">
                            <input type="text" class="form-control text-right" placeholder="" readonly="" name="LogTotAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input">
                        </div>
                    </div>
                </div>
                <div class="col-sm-3">
                    <div class="form-group row" perfect-class="formGroup">
                        <label class="col-sm-4 col-form-label">
                            <span perfect-class="formGroupLabel">Other Charges</span>
                        </label>
                        <div class="col-sm-8">
                            <div class="input-group">
                                <input type="text" class="form-control text-right perfectValidate_string_nm" name="OtherCharge" perfect-class="formGroupControl" id="OtherChargelog" onchange="totalamountcalc(this)" perfect-ctype="input" perfect-css="input" readonly="">
                                <div class="input-group-append">
                                    <button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-credit-card" type="button" perfect-css="button" onclick="fn_showOtherCharges(LogTransMode, logID, 'OtherChargelog')"></button>
                                </div>
                                <div class="modal fade" perfect-class="formGroupModalOtherCharge" id="formGroupModalOtherCharge">
                                    <div class="modal-dialog modal-dialog-centered" role="document">
                                        <div class="modal-content  rounded-0">
                                            <div class="modal-header border-0">
                                                <h5 class="modal-title">Other Charge Details</h5>
                                                <button type="button" class="close" data-dismiss="modal">
                                                    <span>×</span>
                                                </button>
                                            </div>
                                            <div class="modal-body" perfect-class="formGroup" style="max-height: calc(100vh - 200px); overflow-y: auto;padding: 1rem;">

                                                <table id="zero_configOthercharge" class="table mb-0  table-striped  text-black">
                                                    <thead class="bg-primary text-white">
                                                        <tr>
                                                            <th class="t-head">SlNo</th>
                                                            <th class="t-head" style="display:none">ID_OtherChargeType</th>
                                                            <th class="t-head">Type</th>
                                                            <th class="t-head">Trans Type</th>
                                                            <th class="t-head">Amount</th>

                                                        </tr>
                                                    </thead>
                                                    <tbody id="formGroupModalOtherChargebody"></tbody>
                                                    <tfoot>
                                                    </tfoot>
                                                </table>
                                                <div class="modal-footer">
                                                    <button type="button" class="btn btn-primary light" data-dismiss="modal" onclick="BindOtherChargeAmount(this)">Apply</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-sm-3">
                    <div class="form-group row" perfect-class="formGroup">
                        <label class="col-sm-4 col-form-label">
                            <span perfect-class="formGroupLabel">Net Amount</span>

                        </label>
                        <div class="col-sm-8">
                            <input type="text" class="form-control text-right" placeholder="" readonly="" name="LogNetAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input">
                        </div>
                    </div>
                </div>

                <div class="col-sm-3">
                    <div class="form-group row" perfect-class="formGroup">
                        <label class="col-sm-4 col-form-label">Payment Method</label>
                        <div class="col-sm-5">
                            <div class="input-group">

                                <div class="input-group-append">
                                    &nbsp;<button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-money" type="button" perfect-css="button" title="Add Payment Method" onclick="GetPaymentlists(this)"></button>

                                </div>
                            </div>

                        </div>
                    </div>
                </div>
            </div>
            <div class="modal fade" perfect-class="formGroupModalpayment" id="formGroupModalpayment">
                <div class="modal-dialog  modal-dialog-centered modal-md" role="document">
                    <div class="modal-content">
                        <div class="modal-header border-0">
                            <h5 class="modal-title">Payment Method</h5>
                            <button type="button" class="close" data-dismiss="modal">
                                <span>&times;</span>
                            </button>
                        </div>
                        <div class="modal-body" perfect-class="formGroup" style="max-height: calc(100vh - 200px); overflow-y: auto;padding: 1rem;">
                            <div class="row">


                                <div class="col-sm-12">
                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-4 col-form-label">Method <span class="text-danger">*</span></label>
                                        <div class="col-sm-8">
                                            <div class="input-group">
                                                <select class="form-control" perfect-tempTable-Payment="PaymentMethod" name="PaymentMethod" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select">
                                                    <option value="">Please Select </option>


                                                    @if (!(Model.PaymentView is null))
                                                    {
                                                        foreach (var Module in Model.PaymentView)
                                                        {
                                                            if (Module.PMDefault == true)
                                                            {
                                                                <option value="@Module.PaymentmethodID" selected>@Module.Name</option>
                                                            }
                                                            else
                                                            {
                                                                <option value="@Module.PaymentmethodID">@Module.Name</option>
                                                            }

                                                        }
                                                    }
                                                </select>


                                            </div>
                                            <div class="text-danger temptableError"></div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-12">
                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-4 col-form-label">
                                            <span perfect-class="formGroupLabel">Ref No.</span>

                                        </label>
                                        <div class="col-sm-8">

                                            <div class="input-group">
                                                <input type="text" class="form-control perfectValidate_string_nm" perfect-tempTable-Payment="Refno" name="Refno" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" maxlength="250" />

                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="col-sm-12">
                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-4 col-form-label">
                                            <span perfect-class="formGroupLabel">Amount</span>
                                            <span class="text-danger">*</span>
                                        </label>
                                        <div class="col-sm-8">
                                            <div class="input-group">
                                                <input type="text" class="form-control perfectValidate_string_nm text-right" perfect-tempTable-Payment="PAmount" id="PAmount" name="PAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="decimalpnt(this,'PAmount',3)" onchange="Pamount(this)" maxlength="12" />

                                            </div>
                                            <div class="text-danger temptableError"></div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-9">


                                </div>
                                <div class="col-sm-3 text-right">
                                    <div class="input-group">

                                        <div class="input-group-append">
                                            <div>
                                                <button type="button" class="btn btn-primary1 " onclick="createtable(this,'Payment',['PaymentMethod'],paytableOptionsTempOut)"><i class="fa fa-plus" aria-hidden="true"></i></button>
                                                <button class="btn btn-light1" type="button" onclick="productclear(this, 'Payment')"><i class="fa fa-refresh" aria-hidden="true"></i></button>
                                            </div>
                                        </div>
                                    </div>

                                </div>
                                <div class="col-sm-12">
                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-4 col-form-label">
                                            <span perfect-class="formGroupLabel" style="font-weight:500;">Bal. Amount :</span>

                                        </label>
                                        <div class="col-sm-8">
                                            <div class="input-group">

                                                <label class="col-form-label">
                                                    <span perfect-class="formGroupLabel" style="font-weight:500;" name="BalAmt"></span>
                                                </label>
                                                @*<input type="text" class="form-control" perfect-temptable-payment="BalAmt" name="BalAmt" perfect-class="" perfect-ctype="input" perfect-css="input" readonly="" style="border:white;background:white;font-weight: 500;">*@
                                            </div>
                                        </div>
                                    </div>
                                </div>


                                <div class="col-sm-12">
                                    <div class="form-group row" perfect-class="formGroup">

                                        <div class="table-responsive" perfect-tempTable-Payment="" perfect-tempTable="Payment" id="Paymentdethead" perfect-tempTable-lastindex="0" perfect-tempTable-action="0"></div>
                                        <div class="text-danger temptableError"></div>

                                    </div>
                                </div>


                            </div>
                            <div class="modal-footer">
                                @*<button type="button" onclick="CreateProductCheckDescription(this);" class="btn btn-primary">Add</button>*@
                                <button type="button" class="btn btn-primary light" onclick="Billttlnetchck(this)">Apply</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <input type="hidden" name="ID_VehicleAndToolLog" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />


            </div>
            <div class="card-footer text-right" perfect-class="formFooter">
                @if (ViewBag.PagedAccessRights.UsrrlMsEdt)
                {
                    <button id="" type="button" class="btn btn-primary mr-3 addcompany-jq-addnewuserUpdate d-none" name="update" perfect-css="button" onclick="UpdateLog(this,'Update')"><i class="fa fa-refresh fa-spin  loaderClass"></i>Update</button>
                }
                @if (ViewBag.PagedAccessRights.UsrrlMsAdd)
                {
                    <button id="addcompany-jq-addnewuser" type="button" class="btn btn-primary mr-3 " name="add" perfect-css="button" onclick="UpdateLog(this,'Add')"><i class="fa fa-refresh fa-spin loaderClass "></i>Save</button>
                }
                <button type="button" class="btn btn-light" perfect-css="button" onclick="ResetButton(this)" name="reset">Clear</button>
            </div>
        </form>
    </div>
</div>
<script src="~/Scripts/jqDOM/searchDOMCreation.js"></script>
<script>
    (function () {
        jQuery("select").selectpicker();

    })();
    $(document).ready(function () {

        initFunctions('form');

        $('#active-header_collapseTwo').addClass('collapse');
        $('#active-header_collapseTwo').addClass('show');

        let $thisForm = $(this).closest('[perfect-class="form"]');
      
        console.log('LogTransMode', LogTransMode);

        if (LogTransMode == 'VLLOG') {

            document.getElementById("klm").style.display = 'block';
            document.getElementById("fuelamt").style.display = 'none';
        } else {
            document.getElementById("klm").style.display = 'none';
            document.getElementById('fuelamt').style.display = 'none';
            $('[name="LogFuelType"]').removeClass('perfectValidate_string');
            $('[name="LogFuelAmount"]').removeClass('perfectValidate_string');
            $('[name="LogStartKm"]').removeClass('perfectValidate_string');
            $('[name="LogEndKm"]').removeClass('perfectValidate_string');
          

        }


    });

    function getfunction(ele) {
        getstkm(ele);
    }


    function datecheck(ele) {
        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let RegDate = $thisForm.find('[name="LogEndDate"]').val();
        let startDate = $thisForm.find('[name="LogStartDate"]').val();
        let VtlLogDate = $thisForm.find('[name="VtlLogDate"]').val();
        VtlLogDate = new Date(VtlLogDate);
        RegDate = new Date(RegDate);
        startDate = new Date(startDate);
        RegDate.setHours(0, 0, 0, 0)
        startDate.setHours(0, 0, 0, 0)
        VtlLogDate.setHours(0, 0, 0, 0)

        //let today = new Date();
        //today.setHours(0, 0, 0, 0);

        if (RegDate < startDate) {
            $thisForm.find('[name="LogEndDate"]').closest('[perfect-class="formGroup"]').find('.limit-checks').text('End date should be greater than or equal to Start date')
            return false;

        }
        else if (RegDate > VtlLogDate) {
            $thisForm.find('[name="LogEndDate"]').closest('[perfect-class="formGroup"]').find('.limit-checks').text('End date should be Less than or equal to Log date')
            return false;

              }
        else
        {
            $thisForm.find('[name="LogEndDate"]').closest('[perfect-class="formGroup"]').find('.limit-checks').text('');
            return true;
        }

    }


    function datecheckst(ele) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let RegDate = $thisForm.find('[name="LogEndDate"]').val();
        let startDate = $thisForm.find('[name="LogStartDate"]').val();

        RegDate = new Date(RegDate);
        startDate = new Date(startDate);
        RegDate.setHours(0, 0, 0, 0)
        startDate.setHours(0,0,0,0)

       // let today = new Date();
      // today.setHours(0, 0, 0, 0);

        if (startDate > RegDate) {
            $thisForm.find('[name="LogStartDate"]').closest('[perfect-class="formGroup"]').find('.limit-checkst').text('Start date should be less than or equal to End date')
            return false;

        }
        else {
            $thisForm.find('[name="LogStartDate"]').closest('[perfect-class="formGroup"]').find('.limit-checkst').text('');
            return true;
        }

    }


    function fn_showpopuplist(ele) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        if (LogTransMode == 'VLLOG') {

            GetCmnPopUpSearchValAssign(ele, 95, 'Vehicle List', [], ['VehicleNo', 'ID_FIELD', 'ID_Name','FK_Master'], LogTransMode)



            
           
        }
        else if (LogTransMode == 'TOLOG') {

            GetCmnPopUpSearchValAssign(ele, 95, 'Tool List', [], ['ID_FIELD', 'ID_Name', 'FK_Master' ,'HSNCode','VehicleNo'], LogTransMode)
        }
        else {
            NotificationMessage({ 'type': 'info', 'heading': 'info', 'message': 'Please Select Import From' });
        }

            
       
    }

    function getstkm(ele) {
      
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        var input = {
            'FK_Vehicle': $thisForm.find('[name="ID_FIELD"]').val()
            //'FK_Vehicle': 15
        }

         $.ajax({
                url: "@Url.Action("GetStartKm", "EquipmentLog")",
                type: "Get",
                data: input,
                dataType: "json",
                contentType: 'application/json',
             success: function (output) {

                 $thisForm.find('[name="LogStartKm"]').val(output.obj.VtlogStartKm);

                   
                },
         });
    }



    function kilometetcheck(ele) {
        
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let stkl = $thisForm.find('[name="LogStartKm"]').val();
        let endkl = $thisForm.find('[name="LogEndKm"]').val();
            if (LogTransMode == 'VLLOG' && parseFloat(stkl) > parseFloat(endkl)) {
            $thisForm.find('[name="LogEndKm"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('End Kilometer should be greater than or equal to Start Kilometer')
            return false;
        }
        else {
            $thisForm.find('[name="LogEndKm"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('');
            return true;
        }
    }

    //function BindOtherChargeAmount(ele) {

        

    //    console.log('inside binddatat fn')
    //    let $modal = $(ele).closest('.modal');
    //    let $thisForm = $(ele).closest('[perfect-class="form"]');
    //    let sum = 0;
    //    othrchargelst = [];
    //    $modal.find('table tbody').find('tr').each(function () {

    //        let value = parseFloat($(this).find('.jq_OtherChagAmnt_td').find('input').val());;
    //        if ($(this).find('.jq_OtherChagAmnt_td').find('input').val() == '' || $(this).find('.jq_OtherChagAmnt_td').find('input').val() == null) {
    //            value = 0;
    //        }

    //        if (parseInt($(this).find('.jq_TransType_td').find('select').val()) == 0) {
    //            value = value * 0;
    //        }
    //        else if (parseInt($(this).find('.jq_TransType_td').find('select').val()) == 1) {
    //            value = value * 1;
    //        }
    //        else {
            
    //            value = value * -1;
    //        }
    //        sum = parseFloat(sum) + value;


    //        //(isNaN(parseFloat(sum)) ? 0 : parseInt(ele.value, 10));

    //        let othrcharge = {
    //            ID_OtherChargeType: $(this).find('.jq_ID_OtherChargeType_td').text(),
    //            OctyTransType: $(this).find('.jq_TransType_td').find('select').val(),
    //            OctyAmount: parseFloat($(this).find('.jq_OtherChagAmnt_td').find('input').val())
    //        };
    //        othrchargelst.push(othrcharge);
    //        $thisForm.data({ pOthrChgData: othrchargelst });
    //        console.log('othrchargelst', othrchargelst)

    //    });


    //    $thisForm.find('[name=OtherCharge]').val(parseFloat(sum).toFixed(2));
    //    totalamountcalc(ele);
    //}

    var otherchgcalled = 0;
    function BindOtherChargeAmount(ele) {
        otherchgcalled == 1;
        console.log('inside binddatat fn')
        let $modal = $(ele).closest('.modal');
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let sum = 0;
        othrchargelst = [];
        $modal.find('table tbody').find('tr').each(function () {

            let value = parseFloat($(this).find('.jq_OtherChagAmnt_td').find('input').val());;
            if ($(this).find('.jq_OtherChagAmnt_td').find('input').val() == '' || $(this).find('.jq_OtherChagAmnt_td').find('input').val() == null || $(this).find('.jq_OtherChagAmnt_td').find('input').val() == '.')  {
                value = 0;
            }

            if (parseInt($(this).find('.jq_TransType_td').find('select').val()) == 0) {
                value = value * 0;
            }
            else if (parseInt($(this).find('.jq_TransType_td').find('select').val()) == 1) {
                value = value * 1;
            }
            else {
                value = value * -1;
            }
            sum = parseFloat(sum) + value;

           


            let othrcharge = {
                ID_OtherChargeType: $(this).find('.jq_ID_OtherChargeType_td').text(),
                OctyTransType: $(this).find('.jq_TransType_td').find('select').val(),
                OctyAmount: parseFloat($(this).find('.jq_OtherChagAmnt_td').find('input').val()) || 0,
            };

            othrchargelst.push(othrcharge);
            $thisForm.data({ pOthrChgData: othrchargelst });
            console.log('othrchargelst', othrchargelst)


        });

        $thisForm.find('[name=OtherCharge]').val(sum.toFixed(2));
        totalamountcalc(ele);
    }

    var othrchargelst = [];

     function ShowOtherCharges(ele,mode) {
            debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let Othrinfo = [];
        if ($thisForm.data('pOthrChgData')) {
           

            if ($thisForm.data('pOthrChgData').length > 0) {
                if (otherchgcalled = 0)
                {
                     othrchargelst = $thisForm.data('pOthrChgData');
                }
            }
        }
        //else {
            BindChargeDetails("1", 'formGroupModalOtherCharge', ele)
        //}

            }
     //var othrchargelst="";

    function BindChargeDetails(Mode, ModalID, ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
     
        var InputData =
        {
            TransMode: LogTransMode,
        }
      
   
        $.ajax({
            url: "@Url.Action("GetOtherCharges","Purchase")",
            type: "Get",
            data: InputData,
            dataType: "json",
            contentType: "application/json",
            success: function (ajaxOutput) {
                if (ajaxOutput.OtherCharges.Process.IsProcess) {
                         var CheckListHTML = '';
                   
                         if (ajaxOutput.OtherCharges.Data.length > 0) {
                             //---
                          
                         

                             $.each(ajaxOutput.OtherCharges.Data, function (i, value) {
                                 console.log('Transtypelist',ajaxOutput.Transtypelist.Data)

                                 let options = ''
                                 if (othrchargelst != '') {
                                    
                                     $.each(othrchargelst, function (key, value1) {

                                         if (value1.ID_OtherChargeType == value.ID_OtherChargeType) {

                                             value.OctyAmount = value1.OctyAmount;
                                             $.each(ajaxOutput.Transtypelist.Data, function (i, valuea) {
                                                 if (valuea.TransTypeID.toString() == value1.OctyTransType) {
                                                   
                                                     options += '<option value=' + valuea.TransTypeID + ' selected="selected">' + valuea.TransType + '</option>'
                                                 }
                                                 else { 
                                                     options += '<option value=' + valuea.TransTypeID + '>' + valuea.TransType + '</option>'
                                                 }
                                             });
                                         }
                                     
                                        
                                     });

                                 }
                                 else
                                 {
                                    
                                     $.each(ajaxOutput.Transtypelist.Data, function (i, valuea) {
                                         options += '<option value=' + valuea.TransTypeID + '>' + valuea.TransType + '</option>'
                                     });
                                     //---
                                   
                                 }
                                 console.log('optionsl', options)
                                 let $dropdown = '<select class="form-control"name="selector" id="selector" >' + options + '</select>';
                                 CheckListHTML += "<tr>";
                                 CheckListHTML += "<td>" + value.SlNo + "</td>";
                                 CheckListHTML += "<td Class='jq_ID_OtherChargeType_td' Style='Display:none'>" + value.ID_OtherChargeType + "</td>";
                                 CheckListHTML += "<td Class='jq_Type_td'>" + value.OctyName + "</td>";
                                 CheckListHTML += "<td class='jq_TransType_td'>" + $dropdown + "</td>";
                                 
                                 //CheckListHTML += "<td class='jq_OtherChagAmnt_td' ><input min='0'  class='form-control text-right' name='otheramt' type='text' maxlength='12' oninput=decimalpnt(this, 'otheramt', 3)  onkeypress='return isNumberKey(event)'  value='" + (value.OctyAmount).toFixed(2) + "' /></td>";

                                 //CheckListHTML += "<td class='jq_OtherChagAmnt_td'><input min='0' class='form-control perfectValidate_string_nm text-right' name='otheramt' pattern='[0-9]{1,9}\.[0-9]{2}' id='otheramt' type='text' maxlength='12' value='" + (value.OctyAmount).toFixed(2) + "' /></td>";
                                 //CheckListHTML += "<td class='jq_OtherChagAmnt_td' ><input min='0' onkeypress='return isNumberKey(event)' class='form-control text-right'  type='number'  value='" + value.OctyAmount + "' ' maxlength='12' " + ` id="othercharge" name="othercharge"  oninput="decimalpnt(this,'othercharge',3)"` + "'/></td> /></td>";
                                 CheckListHTML += "<td class='jq_OtherChagAmnt_td' ><input min='0'  class='form-control text-right'  type='text'  value='" + value.OctyAmount + "' ' maxlength='12' " + ` id="othercharge" name="othercharge"  oninput="decimalpnt(this,'othercharge',3)"` + "'/></td> /></td>";

                                // CheckListHTML += "<td class='jq_OtherChagAmnt_td'><input min='0' class='form-control perfectValidate_string_nm text-right' name='othercharge' id='othercharge' type='text' maxlength='12' onkeypress='return isNumberKey(event)' oninput='decimalpnt(this,othercharge,3)' value='" + (value.OctyAmount).toFixed(2) + "' /></td>";

                                 //CheckListHTML += '<td class="jq_OtherChagAmnt_td"><input min="0" class="form-control text-right"   onKeyPress="if(this.value.length==12) return false;"  type="number" name="othramt" maxlength="12" value="' + (value.OctyAmount).toFixed(2) + '" /></td>';
                                // <input type="number" min="0" class="form-control text-right" name="otheramt" maxlength="12" oninput="decimalpnt(this, 'PAmount', 2)" onkeypress="return isNumberKey(event)">


                                 CheckListHTML += "</tr>";
                             })
                         }
                         else {
                             CheckListHTML += "<div class='form-group col-md-6'>";
                             CheckListHTML += "<div class='form-check mb-2'>";
                             CheckListHTML += "<label class='form-check-label' for='check1'>No Records...</label>";
                             CheckListHTML += "</div></div>"
                         }
                         //let $model = createSearchModalDOM();
                         //$model.modal.find('.modal-body').append(CheckListHTML);
                         //$model.show
                    $('#formGroupModalOtherCharge').modal({ backdrop: 'static', keyboard: false }) 
                    $("#formGroupModalOtherChargebody").html(CheckListHTML)
                    $('#formGroupModalOtherCharge').modal('show');

              
                        // $thisForm.find('[name=TaxAmount]').val(sum);
                     }
                else {
                  
                    $.each(ajaxOutput.OtherCharges.Process.Message, function (key, value) {
                             NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                         });
                     }
                },
                complete: function () {
                    $(ele).prop('disabled', false);
                    $('select').selectpicker('refresh');
                }
            });
            }
    function formatAmount(ele,id) {
        debugger
        let input = $('#' + id);
        ele.value = ele.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');
        let t = ele.value;
        ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t;
        input.on('keydown', function (event) {
            if (ele.value.includes('.')) {

            }
            var key = event.keyCode || event.charCode;
            if (key == 8 || key == 46) { }
            else {
                if (ele.value.length == 9) {
                    ele.value = ele.value + '.';
                }
            }

        });
    }




    function isNumberKeyNew(event) {
        var charCode = (evt.which) ? evt.which : event.keyCode
        if (charCode > 31 && (charCode < 46 || charCode > 57))
            return false;

        return true;
    }

    function UpdateLog(ele, actiontype)
    {


       // debugger
       
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        if ($thisForm.valid()) {

            if (datenchecklogdate(ele)) {
            if (datecheck(ele)) {

                if (datecheckst(ele)) {
                    if (BillAmountbind(ele)) {
                        if (kilometetcheck(ele)) {


                            $(ele).prop('disabled', true);

                            let mainData = [];
                            $thisForm.find('[perfect-tempTable="MaintenanceDetails"]').find('table>tbody').find('tr').each(function () {

                                mainData.push($(this).data('pData'));
                            })


                            //let $modal2 = $thisForm.find('#zero_configOthercharge');
                            //let OtherCharge = [];
                            //$modal2.find('tbody').find('tr').each(function () {

                            //    let OtChargeinfo = {};
                            //    OtChargeinfo['ID_OtherChargeType'] = $(this).find('.jq_ID_OtherChargeType_td').text();

                            //    OtChargeinfo['OctyTransType'] = $(this).find('.jq_TransType_td').find('select').val();
                            //    OtChargeinfo['OctyName'] = $(this).find('.jq_Type_td').text();
                            //    OtChargeinfo['OctyAmount'] = $(this).find('.jq_OtherChagAmnt_td').find('input').val();
                            //    console.log('OtChargeinfo', OtChargeinfo);
                            //    OtherCharge.push(OtChargeinfo);

                            //});

                            let $modal2 = $thisForm.find('#zero_configOthercharge');
                            othrchargelst;
                            let OtherCharge = [];
                            $modal2.find('tbody').find('tr').each(function () {
                                //debugger
                                let OtChargeinfo = {};
                                OtChargeinfo['ID_OtherChargeType'] = $(this).find('.jq_ID_OtherChargeType_td').text();

                                OtChargeinfo['OctyTransType'] = $(this).find('.jq_TransType_td').find('select').val();
                                OtChargeinfo['OctyName'] = $(this).find('.jq_Type_td').text();
                                OtChargeinfo['OctyAmount'] = $(this).find('.jq_OtherChagAmnt_td').find('input').val();
                                console.log('OtChargeinfo', OtChargeinfo);

                                OtherCharge.push(OtChargeinfo);

                            });
                            console.log('OtChargeinfo-', OtherCharge)


                            let paymentdetails = [];
                            $thisForm.find('[perfect-tempTable="Payment"]').find('tbody').find('tr').each(function () {
                                paymentdetails.push($(this).data('pData'));
                            })
                            //if (mainData.length != 0) {



                                var inputData = {
                                    __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                                    //'ID_Maker': isNaN(parseInt($thisForm.find('[name=ID_Make]').val())) ? 0 : parseInt($thisForm.find('[name=ID_Make]').val()),
                                    'TransMode': LogTransMode,
                                    'Employee': $thisForm.find('[name="EmployeeID"]').val(),
                                    'Vehicle': $thisForm.find('[name="ID_FIELD"]').val(),
                                    'VtlLogStartDate': $thisForm.find('[name="LogStartDate"]').val(),
                                    'VtlLogStartTime': $thisForm.find('[name="LogStartTime"]').val(),
                                    'VtlLogEndDate': $thisForm.find('[name="LogEndDate"]').val(),
                                    'VtlLogEndTime': $thisForm.find('[name="LogEndTime"]').val(),
                                    'VtlLogDescription': $thisForm.find('[name="LogDescription"]').val(),
                                    'VtlLogRemarks': $thisForm.find('[name="LogRemarks"]').val(),
                                    'VtlLogOtherCharges': $thisForm.find('[name="OtherCharge"]').val(),
                                    'VtlLogNetAmount': $thisForm.find('[name="LogNetAmount"]').val(),
                                    'VtlLogTotalAmount': $thisForm.find('[name="LogTotAmount"]').val(),
                                    'VtlLogDate':$thisForm.find('[name="VtlLogDate"]').val(),
                                    //'VtlogFuelAmount': $thisForm.find('[name="LogFuelAmount"]').val(),
                                    //'FK_FuelType': $thisForm.find('[name="LogFuelType"]').val(),

                                    'VtlLogStartKm': $thisForm.find('[name="LogStartKm"]').val(),
                                    'VtlLogEndKm': $thisForm.find('[name="LogEndKm"]').val(),
                                    MaintenanceDetails: mainData,
                                    'OtherChgDetails': OtherCharge,
                                    'PaymentDetail': paymentdetails,
                                    'ID_VehicleAndToolLog': $thisForm.find('[name="ID_VehicleAndToolLog"]').val(),
                                    TransMode: LogTransMode,
                                    LastID: LastID_EquipmentLog,

                            };
                            clearSessionValue(LastIDSessionKey);
                                console.log('ip', inputData);
                                let _ActionUrl = "";
                                if (actiontype == "Add") { _ActionUrl = "@Url.Action("AddNewVehicleAndToolLog", "EquipmentLog")"; } else { _ActionUrl = "@Url.Action("UpdateVehicleAndToolLog", "EquipmentLog")"; }

                                $.ajax({
                                    url: (actiontype == "Add") ? "@Url.Action("AddNewVehicleAndToolLog", "EquipmentLog")" : "@Url.Action("UpdateVehicleAndToolLog", "EquipmentLog")",
                                    type: "POST",
                                    data: inputData,
                                    dataType: "json",
                                    contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                                    success: function (data) {

                                        if (data.Process.IsProcess) {

                                            $.each(data.Process.Message, function (key, value) {
                                                NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                                            });
                                            $thisForm.find('[perfect-ctype="select"]').val('').selectpicker('refresh');
                                            $thisForm.find('[perfect-ctype="input"]').val('');
                                            $thisForm.find('[perfect-ctype="date"]').val('');
                                            $thisForm.find('[perfect-ctype="hidden"]').val('');


                                            let onSuccess = $thisForm.attr('perfect-onFormSuccess')

                                            if (onSuccess) {
                                                fn_LogIndex_initialLoad();
                                            }
                                        }
                                        else {
                                            $.each(data.Process.Message, function (key, value) {
                                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                            });
                                        }
                                    },
                                    complete: function () {
                                        $(ele).prop('disabled', false);
                                    }
                                });
                            //}
                            //else {
                            //    NotificationMessage({ 'type': 'error', 'heading': 'info', 'message': 'Please Enter Atleast One Maintenance Details!!!' });
                            //}


                        }
                       
                    else {

                        $(ele).prop('disabled', false);
                        NotificationMessage({ 'type': 'error', 'heading': 'Warning', 'message': 'End kilometer should be greater than or equal to Start kilometer' });

                    }

                    


                    }
                    else {
                        $(ele).prop('disabled', false);
                        NotificationMessage({ 'type': 'error', 'heading': 'Warning', 'message': 'In Payment Method Balance Amt. Should be  Zero ' });
                    }
                }
                else {

                    $(ele).prop('disabled', false);
                    NotificationMessage({ 'type': 'error', 'heading': 'Warning', 'message': 'Start date should be less than or equal to End date' });

            }

          }
           else {

              $(ele).prop('disabled', false);
                NotificationMessage({ 'type': 'error', 'heading': 'Warning', 'message': 'End date should be greater than or equal to start date and less than or equal to log date ' });

            }

        }
        else {
                $(ele).prop('disabled', false);
                NotificationMessage({ 'type': 'error', 'heading': 'Warning', 'message': 'Future Date not Allowed in Log Date' });
        }
    }
    }
    function ResetButton() {
        fn_LogIndex_initialLoad();
    }
    


    //function decimalpnt(ele, id, range, event) {

    //    let input = $('#' + id);
    //    ele.value = ele.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');
    //    let t = ele.value;
    //    ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t;
    //    input.on('keydown', function (event) {
    //        if (ele.value.includes('.')) {

    //        }
    //        var key = event.keyCode || event.charCode;
    //        if (key == 8 || key == 46) { }
    //        else {
    //            if (ele.value.length == 9) {
    //                ele.value = ele.value + '.';
    //            }
    //        }

    //    });

    //}



    //function decimalpnt(ele, id, range) {
    //    // debugger
    //   // alert('in')
    //    let input = $('#' + id);
    //    ele.value = ele.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');
    //    let t = ele.value;
    //    ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t;
    //    input.on('keydown', function () {
    //      //  debugger
    //        if (ele.value.includes('.')) {

    //        }
    //        var key = event.keyCode || event.charCode;
    //        if (key == 8 || key == 46) { }
    //        else {
    //            if (ele.value.indexOf('.') < 0 && ele.value.indexOf('.') !== 9 && ele.value.length > 8) {
    //                ele.value = ele.value + '.';
    //            }
    //        }

    //    });

    //}


    function decimalpnt(ele, id, range) {
        //console.log(ele, 'ele');
        let input = $('#' + id);

        ele.value = ele.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');
        let t = ele.value;
        ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t;

        $(document).on('keydown', '#' + id, function (event) {

            if (ele.value.includes('.')) {

            }
            var key = event.keyCode || event.charCode;
            if (key == 8 || key == 46) { }
            else {
                if (ele.value.indexOf('.') < 0 && ele.value.indexOf('.') !== 9 && ele.value.length > 8) {
                    ele.value = ele.value + '.';
                }
            }

        });

    }




    function AddMaintenancedetails(ele, tkey, uniq = []) {
        
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let tableKey = tkey;
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');

        let insertData = {};
        let tableOp = tableOptionsTemp;


        let uniqe = (uniq) ? uniq : [];

        let isValid = true;
        let ValueExist = false;
        let isValidQty = true;
        let errorClass = '.temptableError';


        let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
        let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
        let indexname = tkey + 'index';
        tableOp.rowAttribute.push(indexname);
        tableOp.hideColumn.push(indexname);
        let updateCond = '';
        let isNew = true;

        if (thisactionIndex > 0) {
            //means update
            insertData[indexname] = thisactionIndex;
            updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
            isNew = false;
        }
        else {
            //insert
            insertData[indexname] = lastIndex + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
            isNew = true;
        }

        debugger

        if (tableKey == 'MaintenanceDetails') {
            if ($thisForm.find('[perfect-tempTable-' + tableKey + '="FK_Maintenance"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="FK_Maintenance"]').val == null || $thisForm.find('[perfect-tempTable-' + tableKey + '="FK_Maintenance"]').val == '') {
                isValid = false;
                console.log('false');
                $thisForm.find('[perfect-tempTable-' + tableKey + '="FK_Maintenance"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please select MaintenanceType');
            }
            else {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="FK_Maintenance"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }


            if ($thisForm.find('[perfect-tempTable-' + tableKey + '="VtlDetRemarks"]').val() == "" || $thisForm.find('[perfect-tempTable-' + tableKey + '="VtlDetRemarks"]').val == null || $thisForm.find('[perfect-tempTable-' + tableKey + '="VtlDetRemarks"]').val == '') {

                isValid = false;
                console.log('false');
                $thisForm.find('[perfect-tempTable-' + tableKey + '="VtlDetRemarks"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter Remarks');
            }
            else {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="VtlDetRemarks"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }
            
        }

        if (uniqe.length > 0) {
            //getting previous data
            let prevData = [];
            $tblcontainer.find('table > tbody').find('tr').each(function () {
                if (isNew) {
                    prevData.push($(this).data('pData'));
                }
                else {
                    if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                        prevData.push($(this).data('pData'));
                    }

                }

            })
           // console.log('previous data', prevData);

            uniqe.forEach(function (key, i) {
                console.log('unid -> key:' + key + "| index :" + i);
                let $thisEle = $thisForm.find('[perfect-tempTable-' + tableKey + '="' + key + '"]');
                let headerEleName = $thisForm.find('[name="lblEmpl"]').text();
                let atname = $thisEle.attr('name');
                let cvalue;

                //console.log('len')
                if ($thisEle.length != 0) {
                    console.log('len', $thisEle)
                    let $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
                    let errmessage = "Type Already Exists"

                    //getting current value in cval
                    if ($thisEle.is('select')) {
                        cvalue = $thisEle.val();
                        //alert(cvalue);
                    }
                    else if ($thisEle.is('input')) {

                        let inputEleType = $thisEle.attr('type').toLocaleLowerCase();

                        if (inputEleType == 'checkbox') { cvalue = $thisEle.is(':checked'); }
                        else if (inputEleType == 'hidden') { cvalue = $thisEle.val(); }
                        else { cvalue = $thisEle.val(); }
                    }
                    else { cvalue = $thisEle.val(); }

                    // console.log('cvalue ->' + cvalue);

                    //searching in previous data
                    if (prevData.find(a => a[atname] == cvalue)) {
                        // console.log('Search =>' + cvalue + '| attr :' + atname)
                        $errorElement.text(errmessage);
                        isValid = false;
                    }
                }
            });

        }

        if (isValid) {
            //console.log('check 4.1');


            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                //console.log('nameAttr', nameAttr);
                //console.log('headerName', headerName);

             
                if ($this.is('select')) {
                    switch (headerName) {
                        case "FK_Maintenance":
                            headerName = "Maintenance Type";
                            break;

                        default:
                            break
                    }
                    tableOp.renameHeader[nameAttr + '_d'] = headerName;
                    tableOp.hideColumn.push(nameAttr)
                    if ($this.val() != null) {
                        let selectText = ($this.val().length == 0) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    else {
                        let selectText = ($this.val() == null) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    insertData[nameAttr] = $this.val();

                    $this.val('').selectpicker('refresh');

                }
                else if ($this.is('input')) {

                    let inputType = $this.attr('type').toLocaleLowerCase();

                    if (inputType == 'checkbox') {

                        insertData[nameAttr] = $this.is(':checked');

                        tableOp.isCheckType.push(nameAttr)
                        //clear field
                        $this.prop('checked', false);

                    }
                    else if (inputType == 'hidden') {

                        tableOp.hideColumn.push(nameAttr)
                        insertData[nameAttr] = $this.val();

                        //if ($thisForm.find('[name="FK_Employee"]').val() == $this.val()) { }

                        //else { $this.val(''); }

                        $this.val('');

                        //clear field

                    }
                    else if (inputType == 'date') {


                        if ($this.val() == '') {

                            insertData[nameAttr] = null;
                        }
                        else {

                            insertData[nameAttr] = $this.val();
                        }

                        //clear field
                        // $this.val('');
                    }

                    else {
                        insertData[nameAttr] = $this.val();
                        //$this.val() == "" ? "''" : $this.val();
                        //clear field

                        //if ($thisForm.find('[name="AssignEmp"]').val() == $this.val()) {

                        //}
                        //else { $this.val(''); }

                        $this.val('');
                    }
                }
                else {
                    insertData[nameAttr] = $this.val();
                    //if ($thisForm.find('[name="AssignEmp"]').val() == $this.val()) { }
                    //else { $this.val(''); }
                    $this.val('');
                }




            });

           // console.log('check 4.2', insertData);
           // console.log('check 4.2 tableoption', tableOp);




            if (isNew) {
                //console.log('check 4.2.1');
                //this section nake table.table row
                if ($tblcontainer.find('table').length == 0) {
                  //  console.log('check 4.2.3');
                    console.log(insertData);
                    $tblcontainer.append(pft_table_createtable([insertData], tableOp));
                    //  $tblcontainer.find('table').dataTable({ paging: false, ordering: false });
                }
                else {
                    //console.log('check 4.2.1');
                    let table = $tblcontainer.find('table').DataTable()
                    table.destroy()
                    pft_table_addTableRow($tblcontainer.find('table'), insertData, tableOp);


                    //  $tblcontainer.find('table').dataTable({ paging: false, ordering: false});
                    //   $tblcontainer.DataTable().draw();
                    //  table.ajax.reload();
                }
                //console.log('check 4.2.1');
            }
            else {
               // console.log('check 4.3');
                let table = $tblcontainer.find('table').DataTable()
                table.destroy()
                //console.log('check 4.4');
                console.log('table', $tblcontainer.find('table'))
              //  console.log('check 4.5');
                pft_table_replaceTableRow($tblcontainer.find('table'), updateCond, insertData, tableOp);


                // $tblcontainer.find('table').dataTable({ paging: false,ordering:false });
            }

           // console.log(insertData);
            //alert(1);
            // resetting the edit value
            $tblcontainer.attr('perfect-tempTable-action', 0);
            totalamountcalc(ele);

        }
       // console.log('check 5');
        //totalamountcalc(ele);

    }

    var tableOptionsTemp = {

        iconButton: {
            buttons: [
                {
                    icon: "fa fa-pencil btnPerfectGridEdit",


                    action: function () {
                        let savedData = $(this).closest('tr').data('pData')

                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let tableKey = $tablecontainer.attr('perfect-tempTable');
                        let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                        //index attribute name in table row
                        let indexname = tableKey + 'index';
                        //index number in table row
                        let rindex = $(this).closest('tr').attr(indexname);
                        $tablecontainer.attr('perfect-tempTable-action', rindex);

                        console.log('Editclick', savedData);
                        //filling data in available inputs
                        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                            let $thisNode = $(this);
                            let pf_name = $thisNode.attr('name');
                            if ($thisNode.is('select')) {

                                $thisNode.val(savedData[pf_name]).selectpicker('refresh');

                            }
                            else if ($thisNode.is('input')) {
                                let inputType = $thisNode.attr('type').toLocaleLowerCase();
                                if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                    $thisNode.prop('checked', savedData[pf_name]);
                                }
                                //else if (inputType == 'date') {
                                //    console.log('datess', savedData)
                                //    console.log('datess', savedData[pf_name])
                                //    // $thisNode.val(moment(savedData[pf_name]).format('YYYY-DD-MM'));
                                //    $thisNode.val(savedData[pf_name]);
                                //}
                                else {

                                    $thisNode.val(savedData[pf_name]);
                                }

                            }
                            else {

                                $thisNode.val(savedData[pf_name]);
                            }


                        });



                    }

                },

                {
                    icon: "fa fa-trash btnPerfectGridDelete",
                    action: function () {
                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let $thistbl = $(this).closest('table');
                        let table = $thistbl.DataTable();
                        table.destroy();
                        if ($(this).closest('tbody').find('tr').length > 1) {
                            $(this).closest('tr').remove();
                            pft_table_slreset($thistbl);
                            //$thistbl.dataTable({ paging: true, searchbtn: false });
                        }
                        else {
                            $thistbl.remove();
                        } //$("#btnresetLg").click(); /*$('[name="LogTotAmount"]').val(0); $('[name="LogNetAmount"]').val(0);*/
                        totalamountcalc($tablecontainer);

                    } 
                }

            ], 


        },

        onlyShowColumn: ["FK_Maintenance_d","VtlDetAmount","VtlDetRemarks"],
        hideColumn: [],
        serialNo: true,
        renameHeader: { "FK_Maintenance_d":"Maintenance Type", "VtlDetAmount": "Amount","VtlDetRemarks":"Remarks"},
        rowAttribute: [],
        isCheckType: [],
        isDataType: [],
    };

    function detailsClear(ele, tableKey)
    {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
       
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="input"]').val('');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="select"]').val('').selectpicker('refresh');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="text"]').val('');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="date"]').val('');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="hidden"]').val('');

    }

    function clearemployee(ele) {

    }
    function isNumberKey(evt) {
        var charCode = (evt.which) ? evt.which : event.keyCode
        if (charCode > 31 && (charCode < 46 || charCode > 57))
            return false;

        return true;
    }

    function isNumberKeyOthr(evt) {
        var charCode = (evt.which) ? evt.which : event.keyCode;
        var inputVal = evt.target.value;
        var dotPos = inputVal.indexOf('.');

        // Allow only digits, dot and backspace
        if (charCode == 8 || charCode == 46 || (charCode >= 48 && charCode <= 57)) {
            // Allow only one dot and two digits after dot
            if (dotPos != -1 && inputVal.length - dotPos > 2 && charCode != 8 && charCode != 46) {
                return false;
            } else if (dotPos == -1 && charCode == 46) {
                return true;
            } else if (inputVal.length >= 12 && charCode != 8) { // Add max length check
                return false;
            } else {
                return true;
            }
        } else {
            return false;
        }
    }




    function totalamountcalc(ele) {
        //debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');

        let netamt = 0;
        let otheramt = 0;
        let amt = 0;
        let totamt = 0;
        let fuelamt = 0;
        otheramt = $thisForm.find('[name="OtherCharge"]').val() == "" ? "0" : $thisForm.find('[name="OtherCharge"]').val();
       //otherchg = $thisForm.find('[name="OtherCharge"]').val() == "" ? "0" : $thisForm.find('[name="OtherCharge"]').val();
         amt = $thisForm.find('[name="VtlDetAmount"]').val() == "" ? "0" : $thisForm.find('[name="VtlDetAmount"]').val();
        totamt = $thisForm.find('[name="LogTotAmount"]').val() == "" ? "0" : $thisForm.find('[name="LogTotAmount"]').val();
        fuelamt = $thisForm.find('[name="LogFuelAmount"]').val() == "" ? "0" : $thisForm.find('[name="LogFuelAmount"]').val();


        let sum = 0;

        $thisForm.find('[perfect-tempTable="MaintenanceDetails"]').find('table>tbody').find('tr').each(function (index,ele) {

        //$thisForm.find('[name=LogTotAmount]').val() == "" ? "0" : $thisForm.find('[name=LogTotAmount]').val();
        
           // sum = sum + parseFloat($(ele).find('.VtlDetAmount').text());
            var amountText = $(ele).find('.VtlDetAmount').text();
            var amtText = parseFloat(amountText);
            if (isNaN(amtText)) {
                amtText = 0;
            }

            sum += amtText;
        });
        $thisForm.find('[name=VtlDetAmount]').val(parseFloat(amt).toFixed(2));

        let totsum = 0;
        totsum = parseFloat(amt) + parseFloat(sum);

        totamt = parseFloat(totsum) + parseFloat(fuelamt);
        $thisForm.find('[name="LogTotAmount"]').val(parseFloat(totamt).toFixed(2));

        netamt = parseFloat(otheramt) + parseFloat(totamt);
        $thisForm.find('[name="LogNetAmount"]').val(parseFloat(netamt).toFixed(2));

        let billamt = 0;
        let bilamt = 0;

        //if ($thisForm.find('[name=BalAmt]').text() == '') {
        //    bilamt = 0;
        //}
        //else {
        //    bilamt = netamt;
        //}
        bilamt = netamt;
        $('#Paymentdethead').find('tbody tr').each(function (index, ele) {
            billamt += parseFloat($(ele).find('.PAmount').text());

        });
        bilamt = parseFloat(bilamt) - billamt;

        $thisForm.find('[name=BalAmt]').text(bilamt.toFixed(2));
        $thisForm.find('[name=PAmount]').val(bilamt.toFixed(2));
    }



    function fn_fillVtLog(ele, tkey, data, tableOptionsTemp) {
  
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let tableOptionsTempfill = tableOptionsTemp;
        let insertData = []
        let tableKey = tkey;
        let indexname = tkey + 'index';
        tableOptionsTempfill.rowAttribute.push(indexname);
        tableOptionsTempfill.hideColumn.push(indexname);
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');
        $.each(data, function (keyOne, valOne) {
        
            let pData = {};

            pData[indexname] = keyOne + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', pData[indexname])
       
            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                //console.log('tfhyrtname', nameAttr)
                if (typeof valOne[nameAttr] !== undefined) {

                    if ($this.is('select')) {
                        // tableOptionsTempfill.renameHeader[nameAttr + '_d'] = headerName;
                        tableOptionsTempfill.hideColumn.push(nameAttr);
                        //displat text of select
                        pData[nameAttr + '_d'] = $this.find('[value="' + valOne[nameAttr] + '"]').text();
                        pData[nameAttr] = valOne[nameAttr];
                        console.log('select', $this.find('options[value="' + valOne[nameAttr] + '"]').text());

                    }
                    else if ($this.is('input')) {

                        let inputType = $this.attr('type').toLocaleLowerCase();
                        console.log(inputType)


                        if (inputType == 'date') {

                            if (valOne[nameAttr] == null) {
                                pData[nameAttr] = valOne[nameAttr];
                            }
                            else {
                                pData[nameAttr] = moment(valOne[nameAttr]).format('YYYY-MM-DD');
                            }


                        }
                        else {
                            pData[nameAttr] = valOne[nameAttr];


                        }
                    }
                    else {
                        pData[nameAttr] = valOne[nameAttr];


                    }
                }



            });

            insertData.push(pData);


            //----

        });
        $tblcontainer.empty();
        $tblcontainer.append(pft_table_createtable(insertData, tableOptionsTempfill));
        // $tblcontainer.find('table').dataTable({ paging: true });
        
       
    }
 //payment method///


    function createtable(ele, tkey, uniq = [], tableOptionsTempOut) {


        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let tableKey = tkey;
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');

        let insertData = {};
        let tableOptionsTemp = tableOptionsTempOut;
        console.log('tableOptionsTemp', tableOptionsTemp)
        let unique = (uniq) ? uniq : [];

        let isValid = true;
        let errorClass = '.temptableError';

        //make index
        console.log('check 1');

        let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
        let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
        let indexname = tkey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);
        console.log('tableOptionsTemp.rowAttribute', tableOptionsTemp.rowAttribute)
        let updateCond = '';
        let isNew = true;

        if (thisactionIndex > 0) {
            //means update
            insertData[indexname] = thisactionIndex;
            updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
            isNew = false;
        }
        else {
            //insert
            insertData[indexname] = lastIndex + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
            isNew = true;
        }
        //
        if (tableKey == 'Warranty') {

            isValid = validwartdetail(ele, tableKey, errorClass, isValid);
        }
        else if (tableKey == 'Payment') {
            isValid = validpaymntdetail(ele, tableKey, errorClass, isValid);
        }
        else if (tableKey == 'Purchase') {
            isValid = validsaledetail(ele, tableKey, errorClass, isValid);
        }

        if (unique.length > 0) {
            //getting previous data
            let prevData = [];
            $tblcontainer.find('table > tbody').find('tr').each(function () {
                if (isNew) {
                    prevData.push($(this).data('pData'));
                }
                else {
                    if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                        prevData.push($(this).data('pData'));
                    }

                }

            })
            console.log('previous data', prevData);

            unique.forEach(function (key, i) {
                console.log('unid -> key:' + key + "| index :" + i);
                let $thisEle = $thisForm.find('[perfect-tempTable-' + tableKey + '="' + key + '"]');
                // let headerEleName = $thisForm.find('[name="lblProName"]').text();
                let atname = $thisEle.attr('name');
                let cvalue;
                console.log('atname', atname);
                console.log('$thisEle.length', $thisEle.length);
                if ($thisEle.length != 0) {
                    console.log('len', $thisEle)
                    let $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
                    let errmessage = key + " Already exists"

                    //getting current value in cval
                    if ($thisEle.is('select')) {
                        cvalue = $thisEle.val();
                        //alert(cvalue);
                    }
                    else if ($thisEle.is('input')) {

                        let inputEleType = $thisEle.attr('type').toLocaleLowerCase();
                        if (inputEleType == 'checkbox') { cvalue = $thisEle.is(':checked'); }
                        else if (inputEleType == 'hidden') { cvalue = $thisEle.val(); console.log('cvalue ->', cvalue); }
                        else { cvalue = $thisEle.val(); }
                    }
                    else { cvalue = $thisEle.val(); }



                    //searching in previous data
                    if (prevData.find(a => a[atname] == cvalue)) {
                        // console.log('Search =>' + cvalue + '| attr :' + atname)
                        $errorElement.text(errmessage);
                        isValid = false;
                    }
                }
            });

        }

        console.log('isValid', isValid);

        if (isValid) {

            if (tableKey == 'Purchase') {
                Warrantyadd(this);
            }

            console.log('check 4.1');
            // this section make table column data
            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                //console.log('nameAttr', nameAttr);
                console.log('headerName', headerName);

                if ($this.is('select')) {

                    //tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                    tableOptionsTemp.hideColumn.push(nameAttr)
                    //displat text of select
                    if ($this.val() != null) {
                        let selectText = ($this.val().length == 0) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    else {
                        let selectText = ($this.val() == null) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    //tableOptionsTemp.onlyShowColumn.push(nameAttr + '_d')
                    insertData[nameAttr] = $this.val();
                    //insertData[nameAttr] = $this.val();

                    $this.val('').selectpicker('refresh');


                }
                else if ($this.is('input')) {

                    insertData[nameAttr] = $this.val();
                    console.log('insertData[nameAttr]', insertData[nameAttr])
                    if (nameAttr == "prodtid") { }
                    else if (nameAttr == "stkid") { }
                    else {
                        $this.val('');
                    }
                }
                else {
                    insertData[nameAttr] = $this.val();

                    $this.val('');
                }

            });
            console.log('check 4.2', insertData);
            console.log('check 4.2 tableoption', tableOptionsTemp);
            if (isNew) {
                console.log('check 4.2.1');
                //this section nake table.table row
                if ($tblcontainer.find('table').length == 0) {
                    console.log('check 4.2.3');
                    console.log(insertData);
                    console.log(',tableOptionsTemp', tableOptionsTemp)
                    $tblcontainer.append(pft_table_createtable([insertData], tableOptionsTemp));

                    //  $tblcontainer.find('table').dataTable({ paging: false, ordering: false });
                }
                else {
                    console.log('check 4.2.1');
                    let table = $tblcontainer.find('table').DataTable()
                    table.destroy()
                    pft_table_addTableRow($tblcontainer.find('table'), insertData, tableOptionsTemp);


                }

            }
            else {

                let table = $tblcontainer.find('table').DataTable()
                table.destroy()

                pft_table_replaceTableRow($tblcontainer.find('table'), updateCond, insertData, tableOptionsTemp);

            }

            console.log(insertData);
            //alert(1);
            // resetting the edit value
            $tblcontainer.attr('perfect-tempTable-action', 0);

            if (tableKey == 'Warranty') {

                BindWarrantyAmount(ele);
            }
            else if (tableKey == 'Payment') {
                BillAmountbind(ele);
            }
            else if (tableKey == 'Purchase') {
                $thisForm.find('[name=prdbtn]').removeAttr("disabled", "disabled")

                $thisForm.data({ pwarranty: warrantydetails });

                $thisForm.data({ addpImageselect: $thisForm.data('pImageselect') });

                BindBilldetails(ele);
                checkemi(this);
            }

        }



    }

    function validpaymntdetail(ele, tableKey, errorClass, isValid) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').val() == null) {

            isValid = false;
            console.log('false', $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').val());
            $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Payment Method');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }

        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="PAmount"]').val() < 1) {
            console.log('false', $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').val());
            isValid = false;

            $thisForm.find('[perfect-tempTable-' + tableKey + '="PAmount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please enter a value greater than or equal to 1');
        }
        else {

            $thisForm.find('[perfect-tempTable-' + tableKey + '="PAmount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }


        return isValid;

    }

    var paytableOptionsTempOut = {
        iconButton: {
            buttons: [

                {
                    icon: "fa fa-pencil btnPerfectGridEdit",
                    action: function () {
                        let savedData = $(this).closest('tr').data('pData')

                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let tableKey = $tablecontainer.attr('perfect-tempTable');
                        let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                        //index attribute name in table row
                        let indexname = tableKey + 'index';

                        //index number in table row
                        let rindex = $(this).closest('tr').attr(indexname);

                        $tablecontainer.attr('perfect-tempTable-action', rindex);

                        console.log('Editclick', savedData);
                        //filling data in available inputs
                        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                            let $thisNode = $(this);
                            let pf_name = $thisNode.attr('name');
                            if ($thisNode.is('select')) {

                                $thisNode.val(savedData[pf_name]).selectpicker('refresh');

                            }
                            else if ($thisNode.is('input')) {
                                let inputType = $thisNode.attr('type').toLocaleLowerCase();
                                if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                    $thisNode.prop('checked', savedData[pf_name]);
                                }

                                else {

                                    $thisNode.val(savedData[pf_name]);
                                }

                            }
                            else {
                                $thisNode.val(savedData[pf_name]);
                            }


                        });



                    }
                },
                {
                    icon: "fa fa-trash btnPerfectGridDelete",
                    action: function () {
                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let $thistbl = $(this).closest('table');
                        let table = $thistbl.DataTable();
                        table.destroy();
                        if ($(this).closest('tbody').find('tr').length > 1) {
                            $(this).closest('tr').remove();
                            pft_table_slreset($thistbl);
                            //$thistbl.dataTable({ paging: true, searchbtn: false });
                        }
                        else {
                            $thistbl.remove();
                        } $('#btnresetLg').click();
                        totalamountcalc($tablecontainer);
                    }
                },
            ]
        },

        rowAttribute: [],
        onlyShowColumn: ['PAmount', 'Refno', 'PaymentMethod_d'],
        renameHeader: { "PAmount": "Amount1R", "Refno": "Ref No", "PaymentMethod_d": "Method" },
        hideColumn: ['BalAmt'],

        serialNo: true,

    };

    function productclear(ele, tablekey) {

        let $thisform = $(ele).closest('[perfect-class="form"]');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="select"]').val('').selectpicker('refresh');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="date"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="hidden"]').val('');

        let $tblcontainer = $thisform.find('[perfect-tempTable="' + tablekey + '"]');
        $tblcontainer.attr('perfect-tempTable-action', 0);
        //debugger
        if (tablekey == "Purchase") {
            $thisform.find('[name=prdbtn]').removeAttr("disabled", "disabled")

            TempWarrantyDetails = [];

        }
        else if (tablekey == "Warranty") {

            //warrantydetails = [];
        }
        else if (tablekey == "Payment") {

        }
    }

    function Billttlnetchck(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');

        let balamt = $thisForm.find('[name=BalAmt]').text();


        if (parseFloat(balamt) == 0) {
            $('#formGroupModalpayment').modal('hide');
            $thisForm.find('[perfect-tempTable="Payment"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
        }
        else {

            $thisForm.find('[perfect-tempTable="Payment"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('Balance Amt. should be Zero');

        }
    }
    function Pamount(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let amtp = $thisForm.find('[name="PAmount"]').val() == "" ? "0" : $thisForm.find('[name="PAmount"]').val();
        $thisForm.find('[name="PAmount"]').val(parseFloat(amtp).toFixed(2))
    }


    function BillAmountbind(ele) {

        //debugger;
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let netamt = $thisForm.find('[name="LogNetAmount"]').val() == "" ? 0 : $thisForm.find('[name="LogNetAmount"]').val();

       
        let billamt = 0;
        let bilamt = 0;

        if ($thisForm.find('[name=BalAmt]').text() == '') {
            bilamt = 0;
        }
        else {

            bilamt = netamt;
        }

        $thisForm.find('[name=LogNetAmount]').val(Number(netamt).toFixed(2));

        $('#Paymentdethead').find('tbody tr').each(function (index, ele) {
            billamt += parseFloat($(ele).find('.PAmount').text());

        });


        bilamt = parseFloat(bilamt) - billamt;
     
        $thisForm.find('[name=BalAmt]').text(bilamt.toFixed(2));
        $thisForm.find('[name=PAmount]').val(bilamt.toFixed(2));
        if (bilamt == 0) {

            return true;

        }
        else {

            return false;

        }
    }

   
    function GetPaymentlists(ele) {
        $('#formGroupModalpayment').modal({ backdrop: 'static', keyboard: false })

        $('#formGroupModalpayment').modal('show');

    }
    function fillTableSales(ele, tkey, data, tableOptionsTempOut) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let tableOptionsTempfill = tableOptionsTempOut;
        let insertData = []
        let tableKey = tkey;
        let indexname = tkey + 'index';
        tableOptionsTempfill.rowAttribute.push(indexname);
        tableOptionsTempfill.hideColumn.push(indexname);
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');
        $.each(data, function (keyOne, valOne) {

            let pData = {};

            pData[indexname] = keyOne + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', pData[indexname])
            //---

            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                //console.log('tfhyrtname', nameAttr)
                if (typeof valOne[nameAttr] !== undefined) {

                    if ($this.is('select')) {
                        // tableOptionsTempfill.renameHeader[nameAttr + '_d'] = headerName;
                        tableOptionsTempfill.hideColumn.push(nameAttr);
                        //displat text of select
                        pData[nameAttr + '_d'] = $this.find('[value="' + valOne[nameAttr] + '"]').text();
                        pData[nameAttr] = valOne[nameAttr];
                        console.log('select', $this.find('options[value="' + valOne[nameAttr] + '"]').text());

                    }
                    else if ($this.is('input')) {

                        let inputType = $this.attr('type').toLocaleLowerCase();
                        console.log(inputType)


                        if (inputType == 'date') {

                            if (valOne[nameAttr] == null) {
                                pData[nameAttr] = valOne[nameAttr];
                            }
                            else {
                                pData[nameAttr] = moment(valOne[nameAttr]).format('YYYY-MM-DD');
                            }


                        }
                        else {
                            pData[nameAttr] = valOne[nameAttr];


                        }
                    }
                    else {
                        pData[nameAttr] = valOne[nameAttr];


                    }
                }



            });

            insertData.push(pData);


            //----

        });
        $tblcontainer.empty();
        $tblcontainer.append(pft_table_createtable(insertData, tableOptionsTempfill));
        // $tblcontainer.find('table').dataTable({ paging: true });
       
    }
    $("#pssModalOtherCharges").on('hide.bs.modal', function () {
        $("#OtherChargelog").trigger("change");
    });
    function datenchecklogdate(ele) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        //invalid-feedback
        let RegDate = $thisForm.find('[name="VtlLogDate"]').val();

        //SalEnterDate = new Date(SalEnterDate);

        //var today = new Date();
        RegDate = new Date(RegDate);
        RegDate.setHours(0, 0, 0, 0)


        let today = new Date();
        today.setHours(0, 0, 0, 0);


        if (RegDate > today) {
            $thisForm.find('[name="VtlLogDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('Log date should be less than or equal to Todays date')
            return false;

        }
        else {

            $thisForm.find('[name="VtlLogDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('');
            return true;
        }


    }
</script>


