@*----------------------------------------------------------------------
    Created By	: Santhisree
    Created On	: 22/08/2022
    Purpose		: Material Allocation
    -------------------------------------------------------------------------
    Modification
    On			By					OMID/Remarks
    -------------------------------------------------------------------------
    -------------------------------------------------------------------------*@
@model PerfectWebERP.Models.MaterialAllocationModel.MaterialAllocationListModel


<div class="card ">
    <div class="card-header">
        <h4 class="card-title col-12">Material Allocation</h4>
        <span title="To View List" onclick="fn_showListView();"><svg id="Layer_1" class="layer" stroke="currentColor" data-name="Layer 1" height="20" width="20" viewBox="0 0 122.88 122.54"><title>To View List</title><path class="viewlst" d="M4.69,0H46.22a4.71,4.71,0,0,1,4.69,4.69V46a4.69,4.69,0,0,1-4.69,4.69H4.69a4.65,4.65,0,0,1-3.31-1.38l-.09-.09A4.67,4.67,0,0,1,0,46V4.69A4.71,4.71,0,0,1,4.69,0ZM89.44,61.94a26.56,26.56,0,0,1,10.18,2l.07,0a26.61,26.61,0,0,1,15.25,32.16,26.18,26.18,0,0,1-2.7,6.11l10.3,11.24a1.27,1.27,0,0,1-.07,1.8l-7.57,6.9a1.27,1.27,0,0,1-1.79-.07l-9.86-10.85a26.36,26.36,0,0,1-6.1,2.74,26.87,26.87,0,0,1-7.71,1.13,26.51,26.51,0,0,1-10.17-2l-.07,0A26.64,26.64,0,0,1,64.85,78.37l0-.07A26.6,26.6,0,0,1,89.44,61.94Zm15,11.59a21.38,21.38,0,0,0-6.89-4.61l-.06,0a21.22,21.22,0,0,0-23.07,4.64l-.07.07a21.25,21.25,0,0,0-4.54,6.83l0,.06a21.32,21.32,0,0,0-1.58,8.06,21.26,21.26,0,0,0,29.35,19.62,21.54,21.54,0,0,0,6.89-4.61l.07-.07a21.09,21.09,0,0,0,4.54-6.83l0-.06a21.35,21.35,0,0,0,0-16.17,21.34,21.34,0,0,0-4.62-6.9ZM4.69,63.2H46.22a4.71,4.71,0,0,1,4.69,4.7v41.34a4.68,4.68,0,0,1-4.69,4.69H4.69A4.69,4.69,0,0,1,0,109.24V67.9a4.71,4.71,0,0,1,4.69-4.7ZM68.78,0h41.53A4.71,4.71,0,0,1,115,4.69V46a4.71,4.71,0,0,1-4.69,4.69H68.78A4.71,4.71,0,0,1,64.09,46V4.69a4.69,4.69,0,0,1,1.37-3.31l.1-.09A4.67,4.67,0,0,1,68.78,0Z"></path></svg></span>
    </div>
    <div class="card-body">
        <form id="" class="form-valide" perfect-class="form" action="#" method="post" perfect-onFormSuccess="">
            <div class="row">
                <div class="col-sm-12">
                    <div class="default-tab">
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="nav-item">
                                <a class="nav-link active" id="Todolist" data-toggle="tab" href="#MainScreen"><i class="las la-tasks  mr-2"></i>Material Allocation  &nbsp;&nbsp;<span><label id="todobadge" class="badge badge-circle badge-info"></label></span> </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" id="OverdueList" data-toggle="tab" href="#Teaminfo" onclick="fn_TeamDetails_Project(this)"><i class="las la-book-reader mr-2"></i>Project Team Details&nbsp;&nbsp;<label id="overduebadge" class="badge badge-circle badge-primary"></label></a>
                            </li>

                        </ul>
                        <div><label></label></div>
                        <div class="tab-content">
                            <div class="tab-pane fade active show" role="tabpanel" id="MainScreen">

                                <div class="row">



                                    <div class="col-sm-6">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">Project/Request</span>
                                                @*<span class="text-danger">*</span>*@
                                            </label>
                                            <div class="col-sm-8">
                                                <select class="form-control" id="ModeID" perfect-elemet="ModeID1" name="ModeID" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" onchange="changepop(this)">
                                                    @*<option value="">Please select</option>*@
                                                    @if (!(Model.ActionStatusList is null))
                                                    {
                                                        foreach (var ModeList in Model.ActionStatusList)
                                                        {
                                                            <option value="@ModeList.ID_Mode">@ModeList.ModeName</option>
                                                        }
                                                    }
                                                </select>
                                            </div>
                                        </div>
                                    </div>







                                    @*<div class="col-sm-6">
            <div class="form-group row" perfect-class="formGroup">
                <label class="col-sm-4 col-form-label">

                    <span perfect-class="formGroupLabel">Project/Request</span>
                    <span class="text-danger">*</span>

                </label>
                <div class="col-sm-8">
                    <div class="input-group">
                        <select class="form-control" name="Selectrequestid" id="Selectrequestid" perfect-class="formGroupControl perfectValidate_string" perfect-ctype="select" perfect-css="select" onchange="HideFields(this)">
                            <option value="1">Please Select </option>
                            <option value="2">Project</option>
                            <option value="3">Request</option>


                        </select>

                    </div>
                </div>
            </div>
        </div>*@
                                    <div class="col-sm-6">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">Branch</span>
                                                <span class="text-danger">*</span>
                                            </label>
                                            <div class="col-sm-8">
                                                <select class="form-control perfectValidate_string_nm" id="BranchID" name="BranchID" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" data-live-search="true">

                                                    <option value="0">All</option>


                                                    @if (!(Model.BranchList is null))
                                                    {
                                                        foreach (var branchList in Model.BranchList)
                                                        {
                                                            if (branchList.BranchID == ViewBag.FK_Branch)
                                                            {
                                                                <option value="@branchList.BranchID" selected>@branchList.BranchName</option> }
                                                            else
                                                            {
                                                                <option value="@branchList.BranchID">@branchList.BranchName</option>
                                                            }

                                                        }

                                                    }

                                                </select>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-sm-6 d-none" id="MaterialRequestid" perfect-container="materialRequest">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label name="MaterialRequest" class="col-sm-4 col-form-label">Material Request<span class="text-danger">*</span></label>
                                            <div class="col-sm-8">
                                                <div class="input-group">
                                                    <input type="hidden" name="FK_Project" class="form-control " perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                    @*<input type="hidden" name="FK_ProjectMaterialRequest" class="form-control " perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />*@

                                                    <input type="text" class="form-control perfectValidate_string" perfect-elemet="Project1" name="ID_Name" id="MaterialRequest" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly />
                                                    <input type="hidden" name="ID_FIELD" perfect-tempTable-Purchase="Item" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                    <input type="hidden" name="FK_Team" perfect-tempTable-Purchase="Item" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                    <input type="hidden" name="MaterialAllocationDetailsId" perfect-ctype="hidden" />

                                                    <div class="input-group-append">
                                                        @*<button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" onclick="GetCmnPopUpSearchValAssign(this,112,'Material Request',[],['ID_FIELD','FK_Project','Project','RequestDate','FK_Stages','Stage','FK_Team','Team','FK_Employee','Employee'])" perfect-css="button"></button>*@
                                                        <button id="Materialbutton" class="btn btn-primary fa fa-search" type="button" perfect-elemet="Project1" onclick="GetCmnPopUpSearchValAssign(this,112,'Material Request',[],['ID_FIELD','ID_Name','FK_Project','Project','CreateDate','ExpectedDate','StageID','Stage','FK_Team','Team','TeamID','FK_Employee','Employee'])" Criterea1="BranchID" perfect-css="button" Function="1"  ></button>

                                                    </div>
                                                </div>
                                                <div class="text-danger temptableError"></div>
                                            </div>
                                        </div>
                                    </div>







                                    <div class="col-sm-6" id="proreq">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label name="lblProject" class="col-sm-4 col-form-label">Project&nbsp;<span class="text-danger">*</span></label>
                                            <div class="col-sm-8">
                                                <div class="input-group">
                                                    <input type="text" class="form-control form-control " id="Project" perfect-elemet="Project" name="Project" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly />
                                                    <input type="hidden" name="ProjectID" class="form-control form-control perfectValidate_string" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                    <input type="hidden" name="FK_Branch" value="@ViewBag.FK_Branch" />
                                                    <input type="hidden" name="FK_Department" value="@ViewBag.FK_Department" />
                                                    @*<div class="input-group-append">
                            <button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" onclick="GetCmnPopUpSearchValAssign(this, 41, 'Project Details')" BindName="Project" BindVal="ProjectID" Function="3" perfect-css="button"></button>
                        </div>*@
                                                    <input type="date" name="ProjectDate" class="form-control" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" hidden />
                                                    <div class="input-group-append">
                                                        @*<button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" onclick="GetCmnPopUpSearchValAssign(this, 41, 'Project Details',[],['ProjectDate'])" BindName="Project" BindVal="ProjectID" perfect-css="button"></button>*@
                                                        <button id="ProjectButton" perfect-elemet="ProjectButton" PERFECT-ONCLICK-CHECK="FALSE" class="btn btn-primary fa fa-search" type="button" onclick="GetCmnPopUpSearchValAssign(this, 41, 'Project Details',[],['ProjectDate'])" Criterea2="BranchID" BindName="Project" BindVal="ProjectID" perfect-css="button" Function="4"></button>

                                                    </div>
                                                </div>
                                                <div class="text-danger temptableError"></div>
                                            </div>
                                        </div>
                                    </div>


                                    <div class="col-sm-6">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">Stage</span>
                                                <span class="text-danger">*</span>
                                            </label>
                                            <div class="col-sm-8">
                                                <select class="form-control perfectValidate_string" name="StageID" id="StageID" perfect-elemet="stage" perfect-selectButtonAction="testing" perfect-class="formGroupControl" onchange="GetTeam(this)" perfect-ctype="select" perfect-css="select">
                                                    <option value="">Please Select </option>


                                                    @if (!(Model.StageList is null))
                                                    {
                                                        foreach (var cat in Model.StageList)
                                                        {
                                                            <option value="@cat.StageID">@cat.StageName</option>
                                                        }
                                                    }
                                                </select>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-sm-6">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">Team</span>
                                                <span class="text-danger">*</span>
                                            </label>
                                            <div class="col-sm-8">
                                                <select class="form-control perfectValidate_string" name="TeamID" id="TeamID" perfect-elemet="team" perfect-selectButtonAction="testing" onchange="ClearEmployee(this)" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select">
                                                    <option value="">Please Select </option>


                                                    @if (!(Model.TeamList is null))
                                                    {
                                                        foreach (var cat in Model.TeamList)
                                                        {
                                                            <option value="@cat.TeamID">@cat.TeamName</option>
                                                        }
                                                    }
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span id="lblEmpl" perfect-class="formGroupLabel">Employee</span>
                                            </label>
                                            <div class="col-sm-8">
                                                <div class="input-group">
                                                    <input type="text" class="form-control " name="Employee" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled />
                                                    <input type="hidden" name="FK_Employee" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                    <input type="hidden" name="DepartmentID" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />

                                                    <div class="input-group-append">
                                                        <button id="employeesButton" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchValAssign(this,51,'Employee List',['TeamID','Team'],['DepartmentID'])" criterea1="TeamID" bindname="Employee" bindval="FK_Employee"></button>
                                                    </div>
                                                </div>
                                                <div class="text-danger temptableError"></div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">Allocation Date</span>
                                                <span class="text-danger">*</span>
                                            </label>
                                            <div class="col-sm-8">
                                                <input type="date" id="CreateDate" class="form-control" name="CreateDate" perfect-class="formGroupControl" onchange="checkdate(this)" perfect-ctype="date" max="2050-01-01" perfect-css="date" />
                                                <div class="invalid-feedback animated fadeInUp limit-check" style="display: block;"></div>

                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-sm-6 noon1">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">Category</span>

                                            </label>
                                            <div class="col-sm-8">
                                                <select class="form-control" name="CategoryID" perfect-selectButtonAction="testing" perfect-elemet="cat" perfect-class="formGroupControl" @*onchange="GetProductDetails(this)"*@ onchange="GetBomList(this,0,0)" perfect-ctype="select" perfect-css="select">
                                                    <option value="0">Please select </option>


                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-6 noon1">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">BOM</span>

                                            </label>
                                            <div class="col-sm-8">
                                                <select class="form-control" name="ID_BOMProject" perfect-selectButtonAction="testing" perfect-elemet="bom" perfect-class="formGroupControl" onchange="GetProductDetails1(this)" perfect-ctype="select" perfect-css="select">
                                                    <option value="0">Please Select </option>


                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-12">

                                        <div id="accordion-Two" class="accordion accordion-active-header">


                                            <div class="accordion__header collapsed" id="MaterialDetails" data-target="#active-header_collapseTwo1" aria-expanded="true">
                                                <span class="accordion__header--icon"></span>
                                                <span class="accordion__header--text">Material Management</span>

                                            </div>
                                            <div id="active-header_collapseTwo1" class="collapse accordion__body" data-parent="#accordion-Two">
                                                <div class="accordion__body--text">
                                                    <div class="row">
                                                        <div class="col-sm-12 " perfect-class="TempTableProduct">
                                                            <br />
                                                            <div class="row">
                                                                @*<div class="col-sm-3 hideStyle" id="ModeIDD">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-3 col-form-label">
                                                <span perfect-class="formGroupLabel">Mode</span>
                                                <span class="text-danger">*</span>
                                            </label>
                                            <div class="col-sm-7">
                                                <input type="hidden" name="Mode" />
                                                <select class="form-control" name="Mode" perfect-tempTable-MaterialDetailsTable="Mode" perfect-selectButtonAction="testing" perfect-class="formGroupControl" onchange="clearproductqty(this)" perfect-ctype="select" perfect-css="select">
                                                    <option value="">Please Select </option>


                                                    @if (!(Model.ModeList is null))
                                                    {
                                                        foreach (var Module in Model.ModeList)
                                                        {
                                                            <option value="@Module.Mode">@Module.ModeName</option>
                                                        }
                                                    }
                                                </select>
                                                <span class="temptableError"></span>
                                            </div>

                                        </div>
                                    </div>*@

                                                                <div class="col-sm-4">
                                                                    <div class="form-group row" perfect-class="formGroup">
                                                                        <label name="lblProduct" class="col-sm-3 col-form-label">Product<span class="text-danger">*</span></label>
                                                                        <div class="col-sm-9">
                                                                            <div class="input-group">
                                                                                <input type="text" class="form-control " perfect-tempTable-MaterialDetailsTable="Product" name="Product" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly />
                                                                                <input type="hidden" name="ProductID" perfect-tempTable-MaterialDetailsTable="ProductID" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                                                <input type="hidden" name="StockId" perfect-tempTable-MaterialDetailsTable="StockId" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                                                <input type="hidden" name="CrntQnty" perfect-tempTable-MaterialDetailsTable="CrntQnty" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                                                <input type="hidden" name="ProdNumbering" perfect-tempTable-MaterialDetailsTable="ProdNumbering" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                                                <div class="input-group-append">
                                                                                    <button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" onclick="getproductdetails(this)" BindName="Product" BindVal="ProductID" Criterea1="FK_Branch" Criterea2="FK_Department" function="2" perfect-css="button"></button>
                                                                                </div>
                                                                            </div>
                                                                            <div class="text-danger temptableError"></div>
                                                                        </div>
                                                                    </div>
                                                                </div>

                                                                <div class="col-sm-4">
                                                                    <div class="form-group row" perfect-class="formGroup">
                                                                        <label class="col-sm-3 col-form-label">Quantity <span class="text-danger">*</span></label>
                                                                        <div class="col-sm-9">
                                                                            <div class="input-group">
                                                                                <input type="text" class="form-control text-right" perfect-tempTable-MaterialDetailsTable="Quantity" name="Quantity" id="idquantity" oninput="decimalpnt(this,'idquantity',4)" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" onchange="calcsalpttl(this)" />
                                                                                <div class="input-group-append">
                                                                                    <button id="btn_Slno" style="display:none;" class="btn btn-primary1 fa fa-list-ol float-right" title="Select Serial Numbers" perfect-css="button" type="button" onclick="fn_getSerialNumbers(this,0,0)" name="SlNumber"></button>
                                                                                </div>
                                                                                <div class="text-danger temptableError"></div>
                                                                            </div>
                                                                            <div id="FldId-error" class="Custominvalid animated fadeInUp producterror" style="display: none;">Please Enter Quantity</div>
                                                                        </div>
                                                                    </div>

                                                                </div>

                                                                @*<div class="col-sm-3">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-3 col-form-label">Quantity<span class="text-danger">*</span></label>
                                            <div class="col-sm-9">

                                                <input type="text" class="form-control text-right" perfect-tempTable-MaterialDetailsTable="Quantity" name="Quantity" id="idquantity" oninput="decimalpnt(this,'idquantity',4)" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" onchange="calcsalpttl(this)" />
                                                <div class="input-group-append">
                                                    <button type="button" class="btn btn-primary1 fa fa-list-ol float-right" perfect-css="button" onclick="fn_getSerialNumbers(this,0,0)" name="SlNumber"></button>
                                                </div>
                                                <div class="text-danger temptableError"></div>
                                            </div>
                                            <div id="FldId-error" class="Custominvalid animated fadeInUp producterror" style="display: none;">Please Enter Quantity</div>
                                        </div>
                                    </div>*@

                                                                <div class="col-sm-4">
                                                                    <div class="form-group row" perfect-class="formGroup">
                                                                        <label class="col-sm-3 col-form-label">
                                                                            <span perfect-class="formGroupLabel">Amount</span>
                                                                            <span class="text-danger">*</span>
                                                                        </label>
                                                                        <div class="col-sm-9">
                                                                            <input type="hidden" class="form-control" name="SalePrice" perfect-tempTable-MaterialDetailsTable="SalePrice" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                                                                            <input type="text" class="form-control text-right " perfect-tempTable-MaterialDetailsTable="Amount" name="Amount" id="Amount" perfect-class="formGroupControl" oninput="decimalpnt(this,'Amount',3)" @*oninput="this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');"*@ perfect-ctype="input" perfect-css="input" />
                                                                            <div class="text-danger temptableError"></div>
                                                                        </div>
                                                                    </div>
                                                                </div>

                                                                <div class="col-sm-4" style="display:none" id="stockZero">
                                                                    <div>
                                                                        <div class="form-group row" perfect-class="formGroup">
                                                                            <label class="col-sm-3 col-form-label">Stand By Product</label>
                                                                            <div class="col-sm-9">
                                                                                <div class="input-group">
                                                                                    <input type="text" class="form-control" perfect-tempTable-MaterialDetailsTable="StandByProdName" name="StandByProdName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly />
                                                                                    <input type="hidden" name="StandByProduct" perfect-tempTable-MaterialDetailsTable="StandByProduct" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                                                    <input type="hidden" name="CrntQntys" perfect-tempTable-MaterialDetailsTable="CrntQntys" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                                                    <input type="hidden" name="StandByStockId" perfect-tempTable-MaterialDetailsTable="StandByStockId" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                                                    <div class="input-group-append">
                                                                                        <button id="addcountry-jq-searchButton3132" name="prdbtn1" class="btn btn-primary fa fa-search" type="button" onclick="GetCmnPopUpSearchValAssign(this, 142, 'Product Details', [], ['Department','CrntQntys','StandByStockId'],MaterialAllocationTransMode)" BindName="StandByProdName" BindVal="StandByProduct" Criterea1="FK_Branch" Criterea2="FK_Department" perfect-css="button"></button>
                                                                                    </div>
                                                                                    <div class="text-danger temptableError"></div>
                                                                                </div>
                                                                            </div>
                                                                        </div>

                                                                    </div>


                                                                </div>

                                                                <div class="col-sm-4" style="display:none" id="stockZero1">
                                                                    <div>
                                                                        <div class="form-group row" perfect-class="formGroup">
                                                                            <label class="col-sm-3 col-form-label">Stand By Quantity </label>
                                                                            <div class="col-sm-9">
                                                                                <div class="input-group">
                                                                                    <input type="text" class="form-control text-right " perfect-tempTable-MaterialDetailsTable="StandByQuantity" name="StandByQuantity" id="id_StandByQuantity" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="decimalpnt(this,'id_StandByQuantity',4)" onfocus="this.oldvalue = this.value;" min="0" maxlength="13" disabled />
                                                                                </div>
                                                                                <div class="text-danger temptableError"></div>
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                                <div class="col-sm-4">
                                                                    <div>
                                                                        <div class="form-group row" perfect-class="formGroup">
                                                                            <label class="col-sm-3 col-form-label"></label>
                                                                            <div class="col-sm-9">
                                                                                <div class="input-group">
                                                                                    <div class="text-right">
                                                                                        <button class="btn btn-primary1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" title="Add New Product" onclick="createatable(this,'MaterialDetailsTable',['ProductID'])"><i class="fa fa fa-plus" aria-hidden="true"></i></button>
                                                                                        <button class="btn btn-light1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" onclick="MaterialDetailsclear(this,'MaterialDetailsTable')"><i class="fa fa-refresh" aria-hidden="true"></i></button>

                                                                                    </div>
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                </div>

                                                                <div class="col-sm-4 ">
                                                                    <div class="form-group row" perfect-class="formGroup">
                                                                        <label class="col-sm-4 col-form-label" style="display:none">Warranty/AMC&nbsp;</label>
                                                                        <div class="col-sm-4" style="display:none">
                                                                            <div class="input-group">
                                                                                <div class="input-group-append">
                                                                                    @*<button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-outdent mr-1" type="button" perfect-css="button" title="Add Warranty Details" onclick="GetWarrantylists(this,0)"></button>*@
                                                                                </div>

                                                                            </div>
                                                                        </div>

                                                                    </div>
                                                                </div>

                                                                <div class="col-sm-2">

                                                                    @*<button class="btn btn-primary1" style="margin-top: 4px;" type="button" onclick="createatable(this,'MaterialDetailsTable',['ProductID'])">Add</button>*@
                                                                    @*<button type="button" class="btn btn-primary mr-3" perfect-css="button" onclick="addToTempTable(this,'ProductType')" name="reset">Add</button>*@

                                                                </div>

                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>

                                        </div>
                                        <div class="col-sm-12">
                                            <div class="form-group row" perfect-class="formGroup">

                                                <div class="table-responsive" perfect-tempTable="MaterialDetailsTable" id="Material" perfect-tempTable-lastindex="0" perfect-tempTable-action="0"></div>
                                                @*<div class="table-responsive" perfect-ProductType="ProductType"></div>*@
                                            </div>
                                        </div>
                                    </div>

                                </div>
                                <div class="card-footer text-right" perfect-class="formFooter">
                                    @if (ViewBag.PagedAccessRights.UsrrlMsEdt)

                                    {
                                        <button id="" type="button" class="btn btn-primary mr-3 addcompany-jq-addnewuserUpdate d-none" name="slip" perfect-css="button" onclick="getDeliverySlip(this)"><i class="fa fa-refresh fa-spin loaderClass"></i>Delivery Slip</button>
                                        <button id="" type="button" class="btn btn-primary mr-3 addcompany-jq-addnewuserUpdate d-none" name="update" perfect-css="button" onclick="updateMaterialAllocation(this)"><i class="fa fa-refresh fa-spin loaderClass"></i>Update</button>
                                    }
                                    @if (ViewBag.PagedAccessRights.UsrrlMsAdd)
                                    {
                                        <button id="addcompany-jq-addnewuser" type="button" class="btn btn-primary mr-3 " name="add" perfect-css="button" onclick="AddMaterialAllocation(this)"><i class="fa fa-refresh fa-spin loaderClass "></i>Save</button>
                                    }
                                       
                                    <button type="button" class="btn btn-light" perfect-css="button" onclick="ResetButton(this)" name="reset">Clear</button>
									<button type="button" class="btn btn-primary mr-3 d-none" id="btnclose" perfect-css="button" onclick="Close(this)" name="btnclose">Close</button>
                                </div>
                            </div>
                            <div id="Teaminfo" class="tab-pane">
                                <div class="row" style="margin-top:1.5rem;">
                                    <div class="col-sm-10" name="TeamDetails">
                                    </div>
                                    @*<div class="col-sm-6" name="divDetails">
                                        </div>*@
                                    @*<div class="card-body">
                                            <div class="table-responsive">
                                                <table class="table  table-striped" id="ProductDett">
                                                    <thead class="thead-primary">
                                                        <tr>
                                                            <th>Sl No.</th>
                                                            <th>Department</th>
                                                            <th>Employee</th>
                                                            <th>Employee Type</th>

                                                        </tr>
                                                    </thead>
                                                    <tbody id="TeamDet">
                                                        <tr id="0">
                                                            <td colspan="9" style="text-align:center;">No Records...</td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>*@
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <input type="hidden" id="ID_LeadGenerateActionhdns" />
            </div>

            <div class="modal fade" id="modalProductSerialNumbers" data-backdrop="static" data-keyboard="false" tabindex="1000">
                <div class="modal-dialog modal-dialog-centered modal-md" role="dialog">
                    <div class="modal-content">
                        <div class="modal-header border-0">
                            <h5 class="modal-title">Serial Numbers</h5>
                        </div>
                        <div class="modal-body" perfect-class="formGroup" style="max-height: calc(100vh - 200px); overflow-y: auto;padding: 1rem;">
                            <div class="row" id="divProductSerialNumbers" style="overflow-y: scroll;height:300px;">
                            </div>
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-primary" onclick="fn_ProductSerialNumberPopupHide(this)">
                                OK
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </form>

    </div>


</div>


<script>
    (function () {
        //jQuery('form').validate();//<-----  Validate/initialize our form on page load

    })();

    function getfunctionAssignchnage(ele) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let $tempArr = $thisForm.data('popValueData');

        let ProjectID = $thisForm.find('[name=ProjectID]').val() == "" ? $thisForm.find('[name=FK_Project]').val() : $thisForm.find('[name=ProjectID]').val();
          console.log('123', ProjectID);
        let $placeDropdown = $thisForm.find('[name=StageID]');//<--- Will give place select html element
        $placeDropdown.empty();
        $placeDropdown.append($('<option/>', { "value": '' }).text('Please select')).selectpicker('refresh');
        $thisForm.find('[name=TeamID]').val('').selectpicker('refresh');

        let inputData = {
            __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
            FK_Project: ProjectID,
        };
        $.ajax({
            url: "@Url.Action("GetProjectStages", "MaterialAllocation")",
            type: "POST",

            data: inputData,
            dataType: "json",
            contentType: "application/x-www-form-urlencoded;charset=utf-8",
            success: function (ajaxOutput) {



                if (ajaxOutput.Process.IsProcess) {

                    $.each(ajaxOutput.Data, function (key, value) {
                        $placeDropdown.append($('<option/>', { "value": value.ProjectStagesID }).text(value.StageName)).selectpicker('refresh')
                    });


                }
                else {
                    $.each(ajaxOutput.Process.Message, function (key, value) {
                        //toastr.warning(value, "Error");
                        //NotificationMessage({ 'type': 'info', 'heading': 'info', 'message': value });
                    });
                }
            },
            complete: function () {
                GetCategoryList(ele, ProjectID);
            }

        });



    }
    var ChekStandBy12 = '';
    $(document).ready(function () {

        initFunctions('form');
		let $thisForm = $(this).find('[perfect-class="form"]');
        $('#MeasurementDetails').removeClass('collapsed');
        $('#active-header_collapseTwo').addClass('collapse');
        $('#active-header_collapseTwo').addClass('show');
        $('#MasterProjectDetails').attr('aria-expanded', "true");
        $('#active-header_collapseTwo1').addClass('collapse');
        $('#active-header_collapseTwo1').addClass('show');
        $('#active-header_collapseTwo2').addClass('collapse');
        $('#active-header_collapseTwo2').addClass('show');
       // document.getElementById("MaterialRequestid").style.display = 'none';

        if (ChekStandBy1 == "True") {

            document.getElementById('stockZero').style.display = "block";
            document.getElementById('stockZero1').style.display = "block";
            //$('#addcountry-jq-searchButton3132').attr('disabled', true);

        }
        else {
            document.getElementById('stockZero').style.display = "none";
            document.getElementById('stockZero1').style.display = "none";
            //$('#addcountry-jq-searchButton3132').attr('disabled', false);
        }

        console.log('ChekStandBy>>>>>', ChekStandBy1);

        ChekStandBy12 = ChekStandBy1;
		const urlParams = new URLSearchParams(window.location.search);
		if(urlParams.get('ProjectID')>0)
			{
			debugger;
			$thisForm.find('[name="ModeID"]').val(1);
			$thisForm.find('[name="ProjectID"]').val(urlParams.get('ProjectID'));
			$thisForm.find('button[name=btnclose]').removeClass('d-none')
			$('#ProjectButton').attr('PERFECT-ONCLICK-CHECK',"TRUE");
			$('#ProjectButton').trigger('click');
        }
        if (Admin == 'True') {
            debugger;
            //$thisForm.find('[name=BranchID]').val(value.ID_Branch).selectpicker('refresh');
            $('#BranchID').prop('disabled', false);
        }
        else {
            $('#BranchID').prop('disabled', true);
        }
      

    });
    

    function changepop(ele) {
        
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        productSerialNum = [];
        productSerialNumTemp = [];
        $thisForm.find('[perfect-tempTable="MaterialDetailsTable"]').empty();
       // $thisForm.find('[name="Selectrequestid"]').val('');
        $('#Project').val('');
        $('#CreateDate').val('');
        //$thisForm.find('[perfect-elemet="stage"]').val('').selectpicker('refresh');
        $thisForm.find('[perfect-elemet="team"]').val('').selectpicker('refresh');
        $thisForm.find('[name="Project"]').val('');
        $thisForm.find('[name="Employee"]').val('');
        $thisForm.find('[name="ProjectID"]').val('');
        $thisForm.find('[name="FK_Project"]').val('');

        $thisForm.find('[name="ID_FIELD"]').val('');
        $thisForm.find('[name="ID_Name"]').val('');
        $thisForm.find('[name="CategoryID"]').val('0');
        $thisForm.find('[name="ID_BOMProject"]').val('0');
        materialid = 0;


        $thisForm.find('[name="StageID"]').closest('[perfect-ctype="select"]').val('').selectpicker('refresh');


        if ($thisForm.find('[name="ModeID"]').val() == 2) {

            $thisForm.find('[perfect-elemet="stage"]').prop('disabled', true).selectpicker('refresh');
            $thisForm.find('[perfect-elemet="team"]').prop('disabled', true).selectpicker('refresh');
            $thisForm.find('[perfect-container="materialRequest"]').removeClass('d-none');
            $thisForm.find('[perfect-elemet="Project"]').prop('disabled', true).selectpicker('refresh');
            $thisForm.find('[perfect-elemet="ProjectButton"]').prop('disabled', true).selectpicker('refresh');
            $thisForm.find('[perfect-elemet="cat"]').selectpicker('refresh');
            $thisForm.find('[perfect-elemet="bom"]').selectpicker('refresh');
            $('.noon1').hide();
            //document.getElementById("ModeIDD").style.display = 'none';
            //$("#CreateDate").attr('readOnly', false);



        }
        else {

            $thisForm.find('[perfect-elemet="stage"]').prop('disabled', false).selectpicker('refresh');
            $thisForm.find('[perfect-elemet="team"]').prop('disabled', false).selectpicker('refresh');
            $thisForm.find('[perfect-elemet="Project"]').prop('disabled', false).selectpicker('refresh');
            $thisForm.find('[perfect-elemet="ProjectButton"]').prop('disabled', false).selectpicker('refresh');
            $thisForm.find('[perfect-container="materialRequest"]').addClass('d-none');
            $thisForm.find('[perfect-elemet="cat"]').selectpicker('refresh');
            $thisForm.find('[perfect-elemet="bom"]').selectpicker('refresh');
            $('.noon1').show();
            //$("#CreateDate").attr('readOnly', false);
            //document.getElementById("ModeIDD").style.display = 'block';


        }
    }


    //function getproject(ele) {
    //    alert("hai")

    //}

    function Amountcheck(ele, tkey = 'Material') {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let tableKey = tkey;
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');
        if (tableKey == "MaterialDetailsTable") {
            if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Amount"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="Amount"]').val() == null) {

                isValid = false;
                console.log('false');
                $thisForm.find('[perfect-tempTable-' + tableKey + '="Amount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter Amount');
            }
            else {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="Amount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
                isValid = true;
            }
        }


        const tablerow = $('#Material').find('tbody').find('tr')

    }






    function checkdate(ele) {


        let $thisForm = $(ele).closest('[perfect-class="form"]');
        console.log('Ldate', $thisForm.find('[name=LeadDates]').val());
        let createdate = $thisForm.find('[name=CreateDate]').val();
        let leaddate = $thisForm.find('[name=ProjectDate]').val();

        if (createdate < leaddate) {
            $thisForm.find('[name="CreateDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('Allocation Date sholud be greater than Project Create Date');
            return false;

        }
        else {

            $thisForm.find('[name="CreateDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('')
            return true;
        }



    }
    var tableOptionsTempOut = {


        iconButton: {
            buttons: [

                {
                  icon: "fa fa-pencil btnPerfectGridEdit",
                    action: function () {
                        let savedData = $(this).closest('tr').data('pData')

                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let tableKey = $tablecontainer.attr('perfect-tempTable');
                        let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                        //index attribute name in table row
                        let indexname = tableKey + 'index';
                        //index number in table row
                        let rindex = $(this).closest('tr').attr(indexname);
                        $tablecontainer.attr('perfect-tempTable-action', rindex);

                        console.log('Editclick', savedData);
                        //filling data in available inputs
                        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                            let $thisNode = $(this);
                            let pf_name = $thisNode.attr('name');
                            if ($thisNode.is('select')) {

                                $thisNode.val(savedData[pf_name]).selectpicker('refresh');

                            }
                            else if ($thisNode.is('input')) {
                                let inputType = $thisNode.attr('type').toLocaleLowerCase();
                                if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                    $thisNode.prop('checked', savedData[pf_name]);
                                }
                                else if (inputType == 'date') {
                                    console.log('datess', savedData)
                                    console.log('datess', savedData[pf_name])
                                    // $thisNode.val(moment(savedData[pf_name]).format('YYYY-DD-MM'));
                                    $thisNode.val(savedData[pf_name]);
                                }
                                else {

                                    $thisNode.val(savedData[pf_name]);
                                }

                            }
                            else {
                                $thisNode.val(savedData[pf_name]);
                            }


                        });

                        fillSerialNumberTemp(this);
                        SerialNumberButtonsState(this);
                    }
                },
                {
                icon: "fa fa-trash btnPerfectGridDelete",
                    action: function () {
                        let $thistbl = $(this).closest('table');
                        let table = $thistbl.DataTable();
                        let savedData = $(this).closest('tr').data('pData')
                        table.destroy();
                        if ($(this).closest('tbody').find('tr').length > 1) {
                            $(this).closest('tr').remove();
                            pft_table_slreset($thistbl);
                            //$thistbl.dataTable({ paging: true, searchbtn: false });
                        }
                        else {
                            $thistbl.remove();
                        }
                        DeleteSerialNumbersRow(this, savedData.StockId);
                    }
                },
            ]
        },



        onlyShowColumn: ["Department_d", "Employee", "EmployeeType_d", "Amount", "Product", "Quantity", "WorkType_d", "DurationType_d", "Duration", "WorkAmount"],
        hideColumn: ["EmployeeTypeID", "MeasurementTypeID", "MeasurementUnitID", "Mode_d", "StandByProduct", "StandByQuantity", "StandByProdName"],
        serialNo: true,
        renameHeader: {
            "Amount":"Amount1R","Quantity": "Quantity1R", "EmployeeType_d": "Employeee Type", "WorkType": "Work Type", "StandByQuantity": "Stand By Quantity1R", "StandByProdName":"Stand By Product"},

        rowAttribute: [],
        isCheckType: [],
        isDateType: ["NextActionDate"],
    };

    var tableOptionsTempOutBom = {


        iconButton: {
            buttons: [

                {
                    icon: "fa fa-pencil btnPerfectGridEdit",
                    action: function () {
                        let savedData = $(this).closest('tr').data('pData')

                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let tableKey = $tablecontainer.attr('perfect-tempTable');
                        let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                        //index attribute name in table row
                        let indexname = tableKey + 'index';
                        //index number in table row
                        let rindex = $(this).closest('tr').attr(indexname);
                        $tablecontainer.attr('perfect-tempTable-action', rindex);

                        console.log('Editclick', savedData);
                        //filling data in available inputs
                        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                            let $thisNode = $(this);
                            let pf_name = $thisNode.attr('name');
                            if ($thisNode.is('select')) {

                                $thisNode.val(savedData[pf_name]).selectpicker('refresh');

                            }
                            else if ($thisNode.is('input')) {
                                let inputType = $thisNode.attr('type').toLocaleLowerCase();
                                if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                    $thisNode.prop('checked', savedData[pf_name]);
                                }
                                else if (inputType == 'date') {
                                    console.log('datess', savedData)
                                    console.log('datess', savedData[pf_name])
                                    // $thisNode.val(moment(savedData[pf_name]).format('YYYY-DD-MM'));
                                    $thisNode.val(savedData[pf_name]);
                                }
                                else {

                                    $thisNode.val(savedData[pf_name]);
                                }

                            }
                            else {
                                $thisNode.val(savedData[pf_name]);
                            }


                        });

                        fillSerialNumberTemp(this);
                        SerialNumberButtonsState(this);
                    }
                },
                {
                    icon: "fa fa-trash btnPerfectGridDelete",
                    action: function () {
                        let $thistbl = $(this).closest('table');
                        let table = $thistbl.DataTable();
                        let savedData = $(this).closest('tr').data('pData')
                        table.destroy();
                        if ($(this).closest('tbody').find('tr').length > 1) {
                            $(this).closest('tr').remove();
                            pft_table_slreset($thistbl);
                            //$thistbl.dataTable({ paging: true, searchbtn: false });
                        }
                        else {
                            $thistbl.remove();
                        }
                        DeleteSerialNumbersRow(this, savedData.StockId);
                    }
                },
            ]
        },



        onlyShowColumn: ["Department_d", "Employee", "EmployeeType_d", "Amount", "Product", "Quantity", "WorkType_d", "DurationType_d", "Duration", "WorkAmount"],
        hideColumn: ["EmployeeTypeID", "MeasurementTypeID", "MeasurementUnitID", "Mode_d", "StandByProduct", "StandByQuantity", "StandByProdName"],
        serialNo: true,
        renameHeader: {
            "Amount": "Amount1R", "Quantity": "Quantity1R", "EmployeeType_d": "Employeee Type", "WorkType": "Work Type"
        },

        rowAttribute: [],
        isCheckType: [],
        isDateType: ["NextActionDate"],
    };

    //var tableOptionsTempOut1 = {


    //    iconButton: {
    //        buttons: [

    //            {
    //                icon: "fa fa-pencil btnPerfectGridEdit",
    //                action: function () {
    //                    let savedData = $(this).closest('tr').data('pData')

    //                    let $tablecontainer = $(this).closest('[perfect-tempTable]');
    //                    let tableKey = $tablecontainer.attr('perfect-tempTable');
    //                    let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
    //                    //index attribute name in table row
    //                    let indexname = tableKey + 'index';
    //                    //index number in table row
    //                    let rindex = $(this).closest('tr').attr(indexname);
    //                    $tablecontainer.attr('perfect-tempTable-action', rindex);

    //                    console.log('Editclick', savedData);
    //                    //filling data in available inputs
    //                    $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
    //                        let $thisNode = $(this);
    //                        let pf_name = $thisNode.attr('name');
    //                        if ($thisNode.is('select')) {

    //                            $thisNode.val(savedData[pf_name]).selectpicker('refresh');

    //                        }
    //                        else if ($thisNode.is('input')) {
    //                            let inputType = $thisNode.attr('type').toLocaleLowerCase();
    //                            if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

    //                                $thisNode.prop('checked', savedData[pf_name]);
    //                            }
    //                            else if (inputType == 'date') {
    //                                console.log('datess', savedData)
    //                                console.log('datess', savedData[pf_name])
    //                                // $thisNode.val(moment(savedData[pf_name]).format('YYYY-DD-MM'));
    //                                $thisNode.val(savedData[pf_name]);
    //                            }
    //                            else {

    //                                $thisNode.val(savedData[pf_name]);
    //                            }

    //                        }
    //                        else {
    //                            $thisNode.val(savedData[pf_name]);
    //                        }


    //                    });



    //                }
    //            },
    //            {
    //                icon: "fa fa-trash btnPerfectGridDelete",
    //                action: function () {
    //                    let $thistbl = $(this).closest('table');
    //                    let table = $thistbl.DataTable();
    //                    table.destroy();
    //                    if ($(this).closest('tbody').find('tr').length > 1) {
    //                        $(this).closest('tr').remove();
    //                        pft_table_slreset($thistbl);
    //                        //$thistbl.dataTable({ paging: true, searchbtn: false });
    //                    }
    //                    else {
    //                        $thistbl.remove();
    //                    }

    //                }
    //            },
    //        ]
    //    },



    //    onlyShowColumn: ["Department_d", "Employee", "EmployeeType_d", "Amount", "Product", "Quantity", "WorkType_d", "DurationType_d", "Duration", "WorkAmount"],
    //    hideColumn: ["EmployeeTypeID", "MeasurementTypeID", "MeasurementUnitID"],
    //    serialNo: true,
    //    renameHeader: {
    //        "Quantity": "Quantity", "EmployeeType_d": "Employeee Type", "WorkType": "Work Type"
    //    },

    //    rowAttribute: [],
    //    isCheckType: [],
    //    isDateType: ["NextActionDate"],
    //};

    var Subimg = "";
    function Getsubimg(dataimg) {
        Subimg = dataimg;
    }
    var $imgContainer = $('#Image-form');
      function ImageLoad(ele) {

        $imgContainer.load('@Url.Action("LoadImageForm", "MaterialAllocation")', function () {
            getcase('Company');

            if (Subimg != "") {
                $.each(Subimg, function (key, value) {

                    var Mode = value.ImgMode;
                    console.log('Mode', Mode);
                    var imgal = value.ImgValue;
                    var ModeName = value.ModeName;
                    Getimgcntrl1(ele, "data:image/;base64," + imgal, Subimg, ModeName, Mode, value.ImgName)
                });
            }


        });
    }


    function decimalpnt(ele, name, range) {

        let input = $('#' + name);
        ele.value = ele.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');
        let t = ele.value;
        ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t;
        input.on('keydown', function () {
            if (ele.value.includes('.')) {

            }
            var key = event.keyCode || event.charCode;
            if (key == 8 || key == 46) { }
            else {
                if (ele.value.length == 8) {
                    ele.value = ele.value + '.';
                }
            }

        });

    }

    //function calcsalpttl(ele) {
    //    debugger
    //    let $thisForm = $(ele).closest('[perfect-class="form"]');

    //    let ctstk = parseFloat($thisForm.find('[name="CrntQnty"]').val()) || 0;
    //    let currentqty = parseFloat($thisForm.find('[name=Quantity]').val()) || 0;

    //    let Spric = parseFloat($thisForm.find('[name="SalePrice"]').val()) === "" ? 0 : parseFloat($thisForm.find('[name="SalePrice"]').val());
    //    let qtys = parseFloat($thisForm.find('[name="Quantity"]').val()) == "" ? 0 : parseFloat($thisForm.find('[name="Quantity"]').val());
    //    let caltot = Spric * qtys;
    //    $thisForm.find('[name=Amount]').val(caltot.toFixed(2));

    //    if (ChekStandBy1 == "True") {
    //        if (currentqty > ctstk) {
    //            let balStck = parseFloat(ctstk) - parseFloat(currentqty);
    //            $thisForm.find('[name="StandByQuantity"]').val(Math.abs(balStck).toFixed(3));

    //            //let Stval = $thisForm.find('[name="StandByQuantity"]').val(Math.abs(balStck).toFixed(3));
    //            //if (Math.abs(balStck).toFixed(3) > 0) {
    //            //    $('#addcountry-jq-searchButton3132').attr('disabled', false);
    //            //} else {
    //            //    $('#addcountry-jq-searchButton3132').attr('disabled', true);
    //            //}
    //        } else {
    //            $thisForm.find('[name="StandByQuantity"]').val(0.000.toFixed(3));
    //            $thisForm.find('[name="StandByProduct"]').val(0);
    //            $thisForm.find('[name="StandByProdName"]').val('');
    //            //$('#addcountry-jq-searchButton3132').attr('disabled', true);

    //        }

    //    }

    //}

    function calcsalpttl(ele) {
        debugger;
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let ctstk = parseFloat($thisForm.find('[name="CrntQnty"]').val()) || 0;
        let currentqty = parseFloat($thisForm.find('[name="Quantity"]').val()) || 0;

        // Parse SalePrice value only if it's not empty
        let Spric = $thisForm.find('[name="SalePrice"]').val() === "" ? 0 : parseFloat($thisForm.find('[name="SalePrice"]').val());
        let qtys = parseFloat($thisForm.find('[name="Quantity"]').val()) || 0;
        let caltot = Spric * qtys;
        $thisForm.find('[name="Amount"]').val(caltot.toFixed(2));

        if (ChekStandBy1 == "True") {
            if (currentqty > ctstk) {
                let balStck = parseFloat(ctstk) - parseFloat(currentqty);
                $thisForm.find('[name="StandByQuantity"]').val(Math.abs(balStck).toFixed(3));

                // Handle UI or other logic based on StandByQuantity value
                // if (Math.abs(balStck).toFixed(3) > 0) {
                //     $('#addcountry-jq-searchButton3132').attr('disabled', false);
                // } else {
                //     $('#addcountry-jq-searchButton3132').attr('disabled', true);
                // }
            } else {
                $thisForm.find('[name="StandByQuantity"]').val(0.000.toFixed(3));
                $thisForm.find('[name="StandByProduct"]').val(0);
                $thisForm.find('[name="StandByProdName"]').val('');
                //$('#addcountry-jq-searchButton3132').attr('disabled', true);
            }
        }
    }

    function getEmployee(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');

               //console.log("Input data",inputData)

                $.ajax({
                 url: '@Url.Action("GetEmployeeList", "Branch")',//<----- Controller URL : url path in our controller eq: /Home/InsertSampleData or http://localhost:64212/Home/InsertSampleData
                    type: "GET",


                dataType: "json",
                    contentType: "application/x-www-form-urlencoded;charset=utf-8",
                    success: function (ajaxOutput) {//<----- if ajax method executed succesfully,  we get the data passed from controller in this variable  => success: function (variable) {
                       // console.log("Data", data);

                        if (ajaxOutput.Process.IsProcess) {
                            var employeeModel = createSelectList({ data: ajaxOutput.Data, hideColumn: ['FK_Employee'] });
                            employeeModel.then(function (ret) {
                                if (ret) {
                                    console.log('>_ Search button > list click', ret);
                                    $thisForm.find('[name=FK_Employee]').val(ret.FK_Employee);
                                    $thisForm.find('[name=Employee]').val(ret.Employee);

                                   //-----
                                    $.ajax({
                                        url: "@Url.Action("GetEmployeeBaseInfo", "ServiceMapping")",
                                        type: "POST",
                                        data: { employeeID: ret.FK_Employee, __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),},
                                        dataType: "json",
                                        contentType: "application/x-www-form-urlencoded; charset=utf-8",
                                        success: function (ajaxOutEmp) {
                                            //code to make table
                                            //fill table
                                            //show
                                            if (ajaxOutEmp.Process.IsProcess) {

                                                let $tbl = $thisForm.find('.jq_serviceMap_empdetails');

                                                $tbl.find('.jq_serviceMap_empdetails_name').text(ajaxOutEmp.Data[0].EmployeeName);
                                                $tbl.find('.jq_serviceMap_empdetails_num').text(ajaxOutEmp.Data[0].Number);
                                                $tbl.find('.jq_serviceMap_empdetails_dsgn').text(ajaxOutEmp.Data[0].EmployeeDesignation);
                                                $tbl.find('.jq_serviceMap_empdetails_dept').text(ajaxOutEmp.Data[0].EmployeeDepartment);
                                                $tbl.removeClass('d-none');
                                            }

                                        }
                                    });

                                    //------

                                }
                                else {
                                    console.log(ret);
                                }
                            });
                        }
                        else {
                            $.each(ajaxOutput.Process.Message, function (key, value) {
                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                            });
                        }





                },


            });


    }
     function CalEndDate(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let startDate = $thisForm.find('[name=StartDate]').val().trim();
        let duration = $thisForm.find('[name=PWSDuration]').val();

        var days = 0;
        if ($thisForm.find('[name=PWSDurationType]').val() == '4') { /// Month
            var nwEndDate = new Date(startDate).setMonth(new Date(startDate).getMonth() + parseInt(duration));
                $thisForm.find('[name=EndDate]').val(moment(nwEndDate).format('YYYY-MM-DD'));
        }
        else if ($thisForm.find('[name=PWSDurationType]').val() == '3') { /// Week
            days = parseInt(duration) * 7;
            var nwEndDate = new Date(startDate).setDate(new Date(startDate).getDate() + days);
            $thisForm.find('[name=EndDate]').val(moment(nwEndDate).format('YYYY-MM-DD'));
        }
        else if ($thisForm.find('[name=PWSDurationType]').val() == '2') { /// Days
            days = parseInt(duration);
            var nwEndDate = new Date(startDate).setDate(new Date(startDate).getDate() + days);
            $thisForm.find('[name=EndDate]').val(moment(nwEndDate).format('YYYY-MM-DD'));
        }
        else if ($thisForm.find('[name=PWSDurationType]').val() == '1') { /// Hours
            $thisForm.find('[name=EndDate]').val(moment(startDate).format('YYYY-MM-DD'));
        }
    }
    function createatable(ele, tkey, uniq = []) {
        

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let tableKey = tkey;
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');
        let tableOptionsTemp = '';
        let insertData = {};
        tableOptionsTemp = tableOptionsTempOut
        //if ($thisForm.find('[name="ModeID"]').val() == 1) {
        //     tableOptionsTemp = tableOptionsTempOut;
        //}
        //else {
        //    tableOptionsTemp = tableOptionsTempOut1;
        //}

        let unique = (uniq) ? uniq : [];

        let isValid = true;
        let errorClass = '.temptableError';

        //make index
        console.log('check 1');

        let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
        let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
        let indexname = tkey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);
        let updateCond = '';
        let isNew = true;
        if (thisactionIndex > 0) {
            //means update
            insertData[indexname] = thisactionIndex;
            updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
            isNew = false;
        }
        else {
            //insert
            insertData[indexname] = lastIndex + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
            isNew = true;
        }//

        if (tableKey == 'EmployeeDetailsTable') {
            if ($thisForm.find('[perfect-tempTable-' + tableKey + '="FK_Employee"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="FK_Employee"]').val == null || $thisForm.find('[perfect-tempTable-' + tableKey + '="FK_Employee"]').val == '') {
                isValid = false;
                console.log('false');
                $thisForm.find('[perfect-tempTable-' + tableKey + '="FK_Employee"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please select Employee');
            }
            else {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="FK_Employee"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }

            if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Department"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="Department"]').val == null || $thisForm.find('[perfect-tempTable-' + tableKey + '="Department"]').val == '') {

                isValid = false;
                console.log('false');
                $thisForm.find('[perfect-tempTable-' + tableKey + '="Department"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Department');
            }
            else {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="Department"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }
        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="EmployeeType"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="EmployeeType"]').val() == null) {

            isValid = false;
            console.log('false');
            $thisForm.find('[perfect-tempTable-' + tableKey + '="EmployeeType"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Employee Type');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="EmployeeType"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }
            AddMaterials($tblcontainer, indexname, thisactionIndex, unique, $thisForm, tableKey, isValid, errorClass, tableOptionsTemp, insertData, isNew, updateCond );
        }

        if (tableKey == "MaterialDetailsTable") {

            let SerialChecking = [];
            let StockId = $('[name="StockId"]').val();
            let ProdNumbering = $('[name="ProdNumbering"]').val();
            let Quantity = $thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').val();
            SerialChecking = (productSerialNumTemp.filter(obj => obj.FK_MasterID.toString() == StockId.toString() && obj.FK_Stock.toString() == StockId.toString().toString())).length;

            if ($thisForm.find('[perfect-tempTable-' + tableKey + '="ProductID"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="ProductID"]').val() == null) {

                isValid = false;
                console.log('false');
                $thisForm.find('[perfect-tempTable-' + tableKey + '="ProductID"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Product');
            }
            else {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="ProductID"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }
            if (parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').val()) == 0 || parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').val()) == null) {

                isValid = false;
                console.log('false');
                $thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter Quantity');
            }
            else if (parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').val()) <=0 ){

                isValid = false;
                console.log('false');
                $thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Quantity Should be Greater than Zero ');
            }
            else if (parseFloat(ProdNumbering) == 1 && SerialChecking == 0 && parseFloat(Quantity)>0) {
                isValid = false;
                $thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Serial Number For Product Based on Quantity');
            }
            else if ((parseFloat(SerialChecking) > parseFloat(Quantity) || parseFloat(SerialChecking) < parseFloat(Quantity)) && parseFloat(ProdNumbering) == 1 && parseFloat(Quantity) > 0) {
                isValid = false;
                $thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Limit Serial Number For Product Based on given Quantity');
            }
            else {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }

            if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Amount"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="Amount"]').val() == null) {

                isValid = false;
                console.log('false');
                $thisForm.find('[perfect-tempTable-' + tableKey + '="Amount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter Amount');
            }
            else {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="Amount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }



            let CntStk = parseFloat($('[name="CrntQnty"]').val()) || 0;
            let StandByQuantity1 = $thisForm.find('[perfect-tempTable-' + tableKey + '="StandByQuantity"]').val();
            //if (ChekStandBy1 == "true") {

                if (StandByQuantity1 > 0) {
                    if ($thisForm.find('[perfect-tempTable-' + tableKey + '="StandByProduct"]').val() <= 0) {
                        isValid = false;
                        $thisForm.find('[perfect-tempTable-' + tableKey + '="StandByProduct"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Stand By Product');

                    } else {
                        $thisForm.find('[perfect-tempTable-' + tableKey + '="StandByProduct"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
                    }

                    let stbyP = parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="StandByProduct"]').val());

                    let stQty = parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="StandByQuantity"]').val()) || 0;
                    let stCrntQntys = parseFloat($thisForm.find('[name="CrntQntys"]').val()) || 0;

                    if (stbyP > 0) {
                        if (stCrntQntys < stQty) {
                            isValid = false;
                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'StandBy Stock Should be greater or equal to StandBy Quantity.' })
                        }

                    }


                }
            //}




            let pdata = $thisForm.data('pData'); var FK_ProjectMaterialAllocation = 0;
            if (pdata != null) {
                FK_ProjectMaterialAllocation=  pdata["ProjectMaterialAllocationID"];
            }
            var inputCheckData = {
                __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                FK_Product: $thisForm.find("[name='ProductID']").val(),
                FK_Project: $thisForm.find("[name='ProjectID']").val(),
                FK_Stage: $thisForm.find("[name='StageID']").val(),
                FK_Team: $thisForm.find("[name='TeamID']").val(),
                Quantity: $thisForm.find("[name='Quantity']").val(),
                FK_ProjectMaterialAllocation: FK_ProjectMaterialAllocation
            };
             $.ajax({
                url: "@Url.Action("CheckAdditionalQuantity", "MaterialAllocation")",
                type: "POST",
                data: inputCheckData,
                dataType: "json",
                contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                success: function (Warnmsg) {
                    if (Warnmsg.trim() != "") {
                        let confirmationDialogBoxOption = { heading: "Are you Sure?", body: Warnmsg, confirm: "Yes", cancel: "No" };
                        var confirmBoxObj = ConfirmDialog(confirmationDialogBoxOption);
                        confirmBoxObj.then(function (selectedOption) {

                            if (selectedOption) {
                                AddMaterials($tblcontainer, indexname, thisactionIndex, unique, $thisForm, tableKey, isValid, errorClass, tableOptionsTemp, insertData, isNew, updateCond   );
                            }
                            else {
                                isValid = false;
                            }
                        });
                    }
                    else{
                        AddMaterials($tblcontainer, indexname, thisactionIndex, unique, $thisForm, tableKey, isValid, errorClass, tableOptionsTemp, insertData, isNew, updateCond  );
                    }
                }


            });







        }
        //if (tableKey == "MaterialDetailsTable" && ($thisForm.find('[name="ModeID"]').val() == 2)) {

        //    if ($thisForm.find('[perfect-tempTable-' + tableKey + '="ProductID"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="ProductID"]').val() == null) {

        //        isValid = false;
        //        console.log('false');
        //        $thisForm.find('[perfect-tempTable-' + tableKey + '="ProductID"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Product');
        //    }
        //    else {
        //        $thisForm.find('[perfect-tempTable-' + tableKey + '="ProductID"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        //    }
        //    if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').val() == null) {

        //        isValid = false;
        //        console.log('false');
        //        $thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter Quantity');
        //    }
        //    else if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').val() <= 0) {

        //        isValid = false;
        //        console.log('false');
        //        $thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Quantity Should be Greater than Zero ');
        //    }
        //    else {
        //        $thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        //    }

        //    if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Amount"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="Amount"]').val() == null) {

        //        isValid = false;
        //        console.log('false');
        //        $thisForm.find('[perfect-tempTable-' + tableKey + '="Amount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter Amount');
        //    }
        //    else {
        //        $thisForm.find('[perfect-tempTable-' + tableKey + '="Amount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        //    }

        //}
        if (tableKey == "WorkDetailsTable") {
            if ($thisForm.find('[perfect-tempTable-' + tableKey + '="WorkType"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="WorkType"]').val() == null) {

                isValid = false;
                console.log('false');
                $thisForm.find('[perfect-tempTable-' + tableKey + '="WorkType"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select WorkType');
            }
            else {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="WorkType"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }
            if ($thisForm.find('[perfect-tempTable-' + tableKey + '="DurationType"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="DurationType"]').val() == null) {

                isValid = false;
                console.log('false');
                $thisForm.find('[perfect-tempTable-' + tableKey + '="DurationType"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select DurationType');
            }
            else {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="DurationType"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }
            if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Duration"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="Duration"]').val() == null) {

                isValid = false;
                console.log('false');
                $thisForm.find('[perfect-tempTable-' + tableKey + '="Duration"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter Duration');
            }
            else {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="Duration"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }
            if ($thisForm.find('[perfect-tempTable-' + tableKey + '="WorkAmount"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="WorkAmount"]').val() == null) {

                isValid = false;
                console.log('false');
                $thisForm.find('[perfect-tempTable-' + tableKey + '="WorkAmount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter WorkAmount');
            }
            else {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="WorkAmount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }




            AddMaterials($tblcontainer, indexname, thisactionIndex, unique, $thisForm, tableKey, isValid, errorClass, tableOptionsTemp, insertData, isNew, updateCond  );


        }

        let upperlimit = $thisForm.find('[name="RegDate"]').val();
        let lowerlimit = $thisForm.find('[name="NextActionDate"]').val();
        var enqDate = new Date(upperlimit);
        var nxtDate = new Date(lowerlimit);
        var today = new Date();

        //if (enqDate.getTime() > nxtDate.getTime()) {
        //    isValid = false;
        //    console.log('inside limit check if')
        //    $thisForm.find('[name="NextActionDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('Follow up date should be greaterthan or equal to Enquiry date')
        //}

    }
    function AddMaterials($tblcontainer, indexname, thisactionIndex, unique, $thisForm, tableKey, isValid, errorClass, tableOptionsTemp, insertData, isNew, updateCond) {
        let StockId = $('[name="StockId"]').val();

        if (unique.length > 0) {

            let prevData = [];
            $tblcontainer.find('table > tbody').find('tr').each(function () {
                if (isNew) {
                    prevData.push($(this).data('pData'));
                }
                else {
                    if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                        prevData.push($(this).data('pData'));
                    }

                }

            })
            console.log('previous data', prevData);

            unique.forEach(function (key, i) {
                console.log('unid -> key:' + key + "| index :" + i);
                let $thisEle = $thisForm.find('[perfect-tempTable-' + tableKey + '="' + key + '"]');
                let headerEleName = tableKey == "MaterialDetailsTable" ? $thisForm.find('[name="lblProduct"]').text() : $thisForm.find('[name="lblEmployee"]').text();
                let atname = $thisEle.attr('name');
                let cvalue;
                headerEleName = headerEleName.replace('*', '');

                //console.log('len')
                if ($thisEle.length != 0) {

                    let $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
                    let errmessage = headerEleName + " Already exits"

                    //getting current value in cval
                    if ($thisEle.is('select')) {
                        cvalue = $thisEle.val();
                        //alert(cvalue);
                    }
                    else if ($thisEle.is('input')) {

                        let inputEleType = $thisEle.attr('type').toLocaleLowerCase();

                        if (inputEleType == 'checkbox') { cvalue = $thisEle.is(':checked'); }
                        else if (inputEleType == 'hidden') { cvalue = $thisEle.val(); }
                        else { cvalue = $thisEle.val(); }
                    }
                    else { cvalue = $thisEle.val(); }

                    // console.log('cvalue ->' + cvalue);

                    //searching in previous data
                    if (prevData.find(a => a[atname] == cvalue)) {
                        // console.log('Search =>' + cvalue + '| attr :' + atname)
                        $errorElement.text(errmessage);
                        isValid = false;
                    }
                }
            });

        }
        if (isValid) {

            console.log('check 4.1');
            // this section make table column data
            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);

                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                //console.log('nameAttr', nameAttr);


                if ($this.is('select')) {

                    //tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                    tableOptionsTemp.hideColumn.push(nameAttr)
                    //displat text of select
                    if ($this.val() != null) {
                        let selectText = ($this.val().length == 0) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    else {
                        let selectText = ($this.val() == null) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    //tableOptionsTemp.onlyShowColumn.push(nameAttr + '_d')
                    insertData[nameAttr] = $this.val();
                    //insertData[nameAttr] = $this.val();

                  //  $this.val('').selectpicker('refresh');

                    if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Action"]').val() != 0) { }



                    if ($thisForm.find('[name="FK_NetAction"]').val() == $this.val()) { }
                    else if ($thisForm.find('[name="FK_ActionType"]').val() == $this.val()) { }
                    else if ($thisForm.find('[name="BranchTypeID"]').val() == $this.val()) { }
                    else if ($thisForm.find('[name="BranchID"]').val() == $this.val()) { }
                    else if ($thisForm.find('[name="FK_Departement"]').val() == $this.val()) { }
                    else { $this.val('').selectpicker('refresh'); }


                }
                else if ($this.is('input')) {




                    insertData[nameAttr] = $this.val();
                    //if (ChekStandBy1 == "False") {

                    //    if (nameAttr == "StandByQuantity") {
                    //        alert(nameAttr);
                    //        tableOptionsTemp.hideColumn.push(nameAttr);
                    //        tableOptionsTemp.hideColumn.push("Stand By Quantity"); insertData[nameAttr] = $this.val();
                    //    }
                    //    else if (nameAttr == "StandByProdName") {
                    //        alert(nameAttr);
                    //        tableOptionsTemp.hideColumn.push(nameAttr); insertData[nameAttr] = $this.val();

                    //    }

                    //}

                    if (ChekStandBy1=="True") {

                        if (nameAttr == "StandByQuantity") {
                            tableOptionsTemp.onlyShowColumn.push(nameAttr);
                            tableOptionsTemp.onlyShowColumn.push("Stand By Quantity");
                        }
                        else if (nameAttr == "StandByProdName") {
                            tableOptionsTemp.onlyShowColumn.push(nameAttr);

                        }

                    }


                    let inputType = $this.attr('type').toLocaleLowerCase();
                    if (inputType == 'checkbox') {

                        insertData[nameAttr] = $this.is(':checked');

                        tableOptionsTemp.isCheckType.push(nameAttr)
                        //clear field
                        $this.prop('checked', false);

                    }
                    else if (inputType == 'hidden') {

                        tableOptionsTemp.hideColumn.push(nameAttr)
                        insertData[nameAttr] = $this.val();

                        if ($thisForm.find('[name="FK_Employee"]').val() == $this.val()) { }

                        else { $this.val(''); }

                        //clear field

                    }
                    else if (inputType == 'date') {


                        if ($this.val() == '') {

                            insertData[nameAttr] = null;
                        }
                        else {

                            insertData[nameAttr] = $this.val();
                        }

                        //clear field
                        // $this.val('');
                    }

                    else {
                        insertData[nameAttr] = $this.val();
                        //$this.val() == "" ? "''" : $this.val();
                        //clear field

                        if ($thisForm.find('[name="AssignEmp"]').val() == $this.val()) {

                        }
                        else { $this.val(''); }
                    }
                }
                else {
                    insertData[nameAttr] = $this.val();
                    if ($thisForm.find('[name="AssignEmp"]').val() == $this.val()) { }
                    else { $this.val(''); }
                }




            });
            console.log('check 4.2', insertData);
            console.log('check 4.2 tableoption', tableOptionsTemp);
            if (isNew) {
                console.log('check 4.2.1');
                //this section nake table.table row
                if ($tblcontainer.find('table').length == 0) {
                    console.log('check 4.2.3');
                    console.log(insertData);
                    $tblcontainer.append(pft_table_createtable([insertData], tableOptionsTemp));
                    //  $tblcontainer.find('table').dataTable({ paging: false, ordering: false });
                }
                else {
                    console.log('check 4.2.1');
                    let table = $tblcontainer.find('table').DataTable()
                    table.destroy()
                    pft_table_addTableRow($tblcontainer.find('table'), insertData, tableOptionsTemp);


                    //  $tblcontainer.find('table').dataTable({ paging: false, ordering: false});
                    //   $tblcontainer.DataTable().draw();
                    //  table.ajax.reload();
                }
                console.log('check 4.2.1');
            }
            else {
                console.log('check 4.3');
                let table = $tblcontainer.find('table').DataTable()
                table.destroy()
                console.log('check 4.4');
                console.log('table', $tblcontainer.find('table'))
                console.log('check 4.5');
                pft_table_replaceTableRow($tblcontainer.find('table'), updateCond, insertData, tableOptionsTemp);


                // $tblcontainer.find('table').dataTable({ paging: false,ordering:false });
            }

            console.log(insertData);

            // resetting the edit value
            $tblcontainer.attr('perfect-tempTable-action', 0);
            //serial number
            if (productSerialNumTemp != null) {
                console.log('productSerialNum ADDED OLD>', productSerialNum);

                productSerialNum = productSerialNum.filter(obj => obj.FK_MasterID.toString() !== StockId.toString());
                productSerialNumTemp = productSerialNumTemp.filter(obj => obj.FK_MasterID.toString() == StockId.toString());

                //console.log('productSerialNum ADDED NEW>', productSerialNum);

                productSerialNum = productSerialNum.concat(productSerialNumTemp);

                console.log('productSerialNum ADDED Now>', productSerialNum);

                productSerialNumTemp = [];
            }
            //serial number
            SerialNumberButtonsState(this);
        }

    }

    function MaterialDetailsclear(ele, tableKey) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="input"]').val('');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="select"]').val('').selectpicker('refresh');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="text"]').val('');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="date"]').val('');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="hidden"]').val('');
        $('[name="Mode"]').val('P');
        document.getElementById('btn_Slno').style.display = 'none';

        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');
        $tblcontainer.attr('perfect-tempTable-action', 0);

        productSerialNumTemp = [];
    }

         function ResetButton(ele) {

             MaterialAllocationInitialLoad();
			var newParams = new URLSearchParams(window.location.search)
									newParams.delete('ProjectID');
		 history.replaceState({}, document.title, "?" + newParams.toString());
       
    }

    function getproductdetails(ele) {



        let $thisForm = $(ele).closest('[perfect-class="form"]');
        //if ($thisForm.find('[name="ModeID"]').val() == 2) {
        //    GetCmnPopUpSearchValAssign(ele, 32, 'Product Details', [], ['MRPs', 'SalePrice', 'StockId'])
        //}

        let Mode = 'P';/*$thisForm.find('[name="Mode"] option:selected').val();*/

            if (Mode == 'P') {
                GetCmnPopUpSearchValAssign(ele, 143, 'Product Details', [], ['MRPs', 'SalePrice', 'StockId', 'CrntQnty', 'ProdNumbering'])
            }
            else if (Mode == 'T') {
                GetCmnPopUpSearchValAssign(ele, 120, 'Tools Details', [], ['MRPs', 'SalePrice', 'StockId', 'VehicleNo', 'FK_Master'])
            }
            else if (Mode == 'V') {
                GetCmnPopUpSearchValAssign(ele, 121, 'Vehicle Details', [], ['MRPs', 'SalePrice', 'StockId', 'FK_Master', 'VehicleNo'])
            }
            //else if (Mode == 'A') {
            //    GetCmnPopUpSearchValAssign(ele, 32, 'Product Details', [], ['MRPs', 'SalePrice', 'StockId'])
            //}
            else {
                NotificationMessage({ 'type': 'info', 'heading': 'info', 'message': 'No Data Found' });
            }




    }

    // Function to add new MaterialAllocation


    function AddMaterialAllocation(ele) {

	 debugger;
        let $thisForm = $(ele).closest('[perfect-class="form"]');//<------Form element :  Our Form which contain our input elements ,saved in a variable for reusability

		console.log($thisForm,'$thisForm')
        //$(ele).find('i').removeClass();
        if ($thisForm.find('[name="ModeID"]').val() == 1) {
            $thisForm.find('[name="ProjectID"]').addClass('perfectValidate_string');
            $thisForm.find('[name="ID_Name"]').removeClass('perfectValidate_string');
        }
        else {
            $thisForm.find('[name="ProjectID"]').removeClass("perfectValidate_string");
            $thisForm.find('[name="ID_Name"]').addClass("perfectValidate_string");
        }
        

        if ($thisForm.valid() && checkAmount()) {//<---------Validation :  To Check whether the form is vaild(ie; values in the form contrls are valid)
           
		   if (checkdate(ele)) {
			

                      $(ele).prop('disabled', true); // avoiding form submit the double click

                let $modal2 = $thisForm.find('#zero_configOthercharge');

                let MaterialDetails = [];
                $thisForm.find('[perfect-tempTable="MaterialDetailsTable"]').find('tbody').find('tr').each(function () {
                    MaterialDetails.push($(this).data('pData'));
                })

                
                let Amount = 0;
                let WorkAmount = 0;
                $('#Material').find('tbody tr').each(function (index, ele) {
                    Amount = Amount + parseFloat($(ele).find('.Amount').text());

                });
                $('#Work').find('tbody tr').each(function (index, ele) {
                    WorkAmount = WorkAmount + parseFloat($(ele).find('.WorkAmount').text());

                });
                getSessionValue(LastIDSessionKey, function (result) {
                    LastID_MaterialUsage = result;
                });
                if (MaterialDetails.length > 0) {
                    if (($thisForm.find('[name="ModeID"]').val() == 2)) {
                        var inputData = {//<---- Input Json : this is the variable we pass to controller
                            __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),

                            Date: $thisForm.find('[name=CreateDate]').val().trim(),
                            RequestMode: $thisForm.find('[name=ModeID]').val(),
                            FK_Project: $thisForm.find('[name=FK_Project]').val(),
                            FK_Team: $thisForm.find('[name=TeamID]').val(),
                            FK_Stage: $thisForm.find('[name=StageID]').val(),
                            FK_Employee: $thisForm.find('[name=FK_Employee]').val(),
                            FK_Department: $thisForm.find('[name=DEpartmentID]').val(),
                            //FK_ProjectMaterialRequest: $thisForm.find('[name=FK_ProjectMaterialRequest]').val(),
                            FK_ProjectMaterialRequest: $thisForm.find('[name=ID_FIELD]').val(),
                            FK_Branch: $thisForm.find('[name=BranchID]').val(),
                            'MaterialDetails': MaterialDetails,
                            'LastID': LastID_MaterialAllocation,
                            TransMode: MaterialAllocationTransMode,
                            'ProductSerialNumbers': productSerialNum
                        };
                        clearSessionValue(LastIDSessionKey);
                    }
                    else {
                        var inputData = {//<---- Input Json : this is the variable we pass to controller
                            __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),

                            Date: $thisForm.find('[name=CreateDate]').val().trim(),
                            RequestMode: $thisForm.find('[name=ModeID]').val(),
                            FK_Project: $thisForm.find('[name=ProjectID]').val(),
                            FK_Team: $thisForm.find('[name=TeamID]').val(),
                            FK_Stage: $thisForm.find('[name=StageID]').val(),
                            FK_Employee: $thisForm.find('[name=FK_Employee]').val(),
                            FK_Department: $thisForm.find('[name=DEpartmentID]').val(),
                            FK_Branch: $thisForm.find('[name=BranchID]').val(),
                            'MaterialDetails': MaterialDetails,
                            'LastID': LastID_MaterialAllocation,
                            TransMode: MaterialAllocationTransMode,
                            'ProductSerialNumbers': productSerialNum,
                            'FK_Category': $thisForm.find('[name=CategoryID]').val(),
                            'FK_BOMProject': $thisForm.find('[name=ID_BOMProject]').val(),
                        };
                        clearSessionValue(LastIDSessionKey);
                    }




                    console.log('> Add MaterialAllocation ajax input', inputData);


                    $.ajax({
                        url: "@Url.Action("AddNewMaterialAllocationDetails", "MaterialAllocation")",
                        type: "POST",

                        data: inputData,//<---- Input json : data passed to controller
                        dataType: "json",
                        contentType: 'application/x-www-form-urlencoded;charset=utf-8',
                        success: function (ajaxOutput) {//<----- if ajax method executed succesfully,  we get the data passed from controller in this variable  => success: function (variable) {

                            if (ajaxOutput.Process.IsProcess) {

                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                    //toastr.success(value, "Success");
                                    NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                                });
                                $thisForm.find('[perfect-ctype="input"]').val('');
                                $thisForm.find('[perfect-ctype="number"]').val('');
							var newParams = new URLSearchParams(window.location.search)
									newParams.delete('ProjectID');
						     history.replaceState({}, document.title, "?" + newParams.toString());


                                let onSuccess = $thisForm.attr('perfect-onFormSuccess')

                                if (onSuccess) {
                                    window[onSuccess]();
                                    MaterialAllocationInitialLoad();
                                }

                                //---------- Do stuff if success
                                $thisForm.find('[name = "MaterialAllocationDetailsId"]').val(ajaxOutput.Process.code);
                                getDeliverySlip('');

                                console.log('> Add new MaterialAllocation success data', ajaxOutput);
                            }
                            else {
                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                    //toastr.warning(value, "Error");
                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                });
                            }
                        },
                        complete: function () {
                            $(ele).prop('disabled', false);
                        }

                    });
                }
                else {

                    let $modal = createSearchModalDOM();

                    let $message = '<span>Enter Atleast One Material !!!</span>';
                    $modal.modal.find('.modal-body')
                        .addClass('text-black')
                        .html($message);
                    $modal.modal.find('.modal-title')
                        .addClass('text-primary')
                        .text('Message');

                    $modal.modal.show();
                    $(ele).prop('disabled', false)
                }





            }
            else {
                NotificationMessage({ 'type': 'error', 'heading': 'info', 'message': 'Allocation Date sholud be greater than Project Create Date' });
            }
         }

        }




    // Function to update a customer
    //$('.addcompany-jq-addnewuserUpdate').on('click',
    function updateMaterialAllocation(ele) {


        let $thisForm = $(ele).closest('[perfect-class="form"]');//<------Form element :  Our Form which contain our input elements ,saved in a variable for reusability

        //perfectCRMvalidation.init($thisForm);

        if ($thisForm.valid()) {
            if (checkdate(ele)) {//<---------Validation :  To Check whether the form is vaild(ie; values in the form contrls are valid)
                $(ele).prop('disabled', true);

                let pdata = $thisForm.data('pData');

                console.log('> Update MaterialAllocation form data saved', pdata);

                let $modal2 = $thisForm.find('#zero_configOthercharge');


                let MaterialDetails = [];
                $thisForm.find('[perfect-tempTable="MaterialDetailsTable"]').find('tbody').find('tr').each(function () {
                    MaterialDetails.push($(this).data('pData'));
                })




                let Amount = 0;
                let WorkAmount = 0;
                $('#Material').find('tbody tr').each(function (index, ele) {
                    Amount = Amount + parseFloat($(ele).find('.Amount').text());

                });
                $('#Work').find('tbody tr').each(function (index, ele) {
                    WorkAmount = WorkAmount + parseFloat($(ele).find('.WorkAmount').text());

                }); //Testcheck

                if (MaterialDetails.length > 0) {
                    if (($thisForm.find('[name="ModeID"]').val() == 2)) {
                        var inputData = {//<---- Input Json : this is the variable we pass to controller
                            __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                            Date: $thisForm.find('[name=CreateDate]').val().trim(),
                            FK_Project: $thisForm.find('[name=ProjectID]').val(),
                            FK_Team: $thisForm.find('[name=TeamID]').val(),
                            FK_Stage: $thisForm.find('[name=StageID]').val(),
                            FK_Employee: $thisForm.find('[name=FK_Employee]').val(),
                            FK_Department: $thisForm.find('[name=DEpartmentID]').val(),
                            FK_ProjectMaterialRequest: $thisForm.find('[name=ID_FIELD]').val(),
                            FK_Branch: $thisForm.find('[name=BranchID]').val(),
                            RequestMode: $thisForm.find('[name=ModeID]').val(),
                            'MaterialDetails': MaterialDetails,
                            TransMode: MaterialAllocationTransMode,
                            ProjectMaterialAllocationID: pdata["ProjectMaterialAllocationID"],
                            'ProductSerialNumbers': productSerialNum
                        };
                    }
                    else {
                        var inputData = {//<---- Input Json : this is the variable we pass to controller
                            __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                            Date: $thisForm.find('[name=CreateDate]').val().trim(),
                            FK_Project: $thisForm.find('[name=ProjectID]').val(),
                            FK_Team: $thisForm.find('[name=TeamID]').val(),
                            FK_Stage: $thisForm.find('[name=StageID]').val(),
                            FK_Employee: $thisForm.find('[name=FK_Employee]').val(),
                            FK_Department: $thisForm.find('[name=DEpartmentID]').val(),
                            RequestMode: $thisForm.find('[name=ModeID]').val(),
                            'MaterialDetails': MaterialDetails,
                            TransMode: MaterialAllocationTransMode,
                            ProjectMaterialAllocationID: pdata["ProjectMaterialAllocationID"],
                            FK_Branch: $thisForm.find('[name=BranchID]').val(),
                            'ProductSerialNumbers': productSerialNum,
                            'FK_Category': $thisForm.find('[name=CategoryID]').val(),
                            'FK_BOMProject': $thisForm.find('[name=ID_BOMProject]').val(),
                            
                        };
                    }





                    console.log('> Update state ajax input', inputData);
                    $.ajax({
                        url: "@Url.Action("UpdateMaterialAllocationDetails", "MaterialAllocation")",
                        type: "POST",

                        data: inputData,
                        dataType: "json",
                        contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                        success: function (ajaxOutput) { //<----- if ajax method executed succesfully,  we get the data passed from controller in this variable  => success: function (variable) {

                            if (ajaxOutput.Process.IsProcess) {

                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                    //toastr.success(value, "Success");
                                    NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                                });


                                let onSuccess = $thisForm.attr('perfect-onFormSuccess')

                                if (onSuccess) {
                                    window[onSuccess]();
                                    MaterialAllocationInitialLoad();
                                }

                                //---------- Do stuff if success
                                //toastr.success("Inside success", "Confirmation Box in table");

                                console.log('> update new MaterialAllocation success data', ajaxOutput);
                            }
                            else {
                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                    //toastr.warning(value, "Error");
                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                });
                            }


                        },
                        complete: function () {
                            $(ele).prop('disabled', false);
                        }

                    });

                }
                else {

                    let $modal = createSearchModalDOM();

                    let $message = '<span>Enter Atleast One Material !!!</span>';
                    $modal.modal.find('.modal-body')
                        .addClass('text-black')
                        .html($message);
                    $modal.modal.find('.modal-title')
                        .addClass('text-primary')
                        .text('Message');

                    $modal.modal.show();
                    $(ele).prop('disabled', false)
                }


            }

            else {
                NotificationMessage({ 'type': 'error', 'heading': 'info', 'message': 'Allocation Date sholud be greater than Project Create Date' });
            }
        }

    }

        //////New change///

    function fn_GetEmployee(ele) {



        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let $placeDropdown = $thisForm.find('[name=FK_Employee]');//<--- Will give place select html element
        $placeDropdown.empty();
        $placeDropdown.append($('<option/>', { value: '' }).text('Please select')).selectpicker('refresh');

        let StageID = $(ele).val();
        let ProjectID = $thisForm.find('[name=ProjectID]').val()
         $.ajax({
                 url: "@Url.Action("GetEmployees", "MaterialAllocation")",
                type: "POST",

             data: JSON.stringify({ FK_Stage: StageID, FK_Project: ProjectID}),
                dataType: "json",
                contentType: "application/json",
             success: function (ajaxOutput) {



                 if (ajaxOutput.Process.IsProcess) {

                             $.each(ajaxOutput.Data, function (key, value) {
                                 $placeDropdown.append($('<option/>', { "value": value.FK_Employee }).text(value.EmployeeName)).selectpicker('refresh')
                                 });


                     }
                     else {
                     $.each(ajaxOutput.Process.Message, function (key, value) {
                             //toastr.warning(value, "Error");
                             //NotificationMessage({ 'type': 'info', 'heading': 'info', 'message': value });
                         });
                     }
                     }

                 });


    }
    function getfunctionAssign(ele) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let saleprice = $thisForm.find('[name="SalePrice"]').val() == "" ? "0" : $thisForm.find('[name="SalePrice"]').val();

        //let $numEnable = $thisForm.find('[name="ProdNumbering"]').val();

        //if ($numEnable == 1) {
        //    document.getElementById('btn_Slno').style.display = 'block';
        //}
        //else {
        //    document.getElementById('btn_Slno').style.display = 'none';
        //}
        SerialNumberButtonsState(ele);

        $thisForm.find('[name=Amount]').val(parseFloat(saleprice).toFixed(2));
        $thisForm.find('[name=Quantity]').val(0);
        $thisForm.find('[name="StandByQuantity"]').val(0.000.toFixed(3));
        $thisForm.find('[name="StandByProduct"]').val(0);
        $thisForm.find('[name="StandByProdName"]').val('');
        $thisForm.find('[name="StandByStockId"]').val(0);
        productSerialNumTemp = [];
    }



        function SetControl(ele, tt) {
            console.log(tt);
            let ProjectID = tt.ID_FIELD;

            let $thisForm = $(ele).closest('[perfect-class="form"]');
            let $placeDropdown = $thisForm.find('[name=TeamID]');//<--- Will give place select html element
            $placeDropdown.empty();
            $placeDropdown.append($('<option/>', { value: '' }).text('Please select')).selectpicker('refresh');
            //let inputData = {
            //    __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
            //    LeadGenerateID: $thisForm.find('[name=Lead]').val().trim()
            //};
            $.ajax({
                url: "@Url.Action("GetProjectTeam", "MaterialAllocation")",
                type: "POST",

                data: JSON.stringify({ FK_Project: ProjectID }),
                dataType: "json",
                contentType: "application/json",
                success: function (ajaxOutput) {

                    if (ajaxOutput.Process.IsProcess) {

                        $.each(ajaxOutput.Data, function (key, value) {
                            $placeDropdown.append($('<option/>', { "value": value.TeamID }).text(value.TeamName)).selectpicker('refresh')
                        });


                    }
                    else {
                        $.each(ajaxOutput.Process.Message, function (key, value) {
                            //toastr.warning(value, "Error");
                            //NotificationMessage({ 'type': 'info', 'heading': 'info', 'message': value });
                        });
                    }
                }

            });


        }
 function fn_TeamDetails_Project(ele) {


        let $thisForm = $(ele).closest('[perfect-class="form"]');//<------Form element :  Our Form which contain our input elements ,saved in a variable for reusability
        let $formFolowDivContainer = $(this).closest('[perfect-class="form"]').closest('.jq_leadgeneration_body').find('.jq_leadgeneration_followup_status');
            let inputData = {
                __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                ProjectID: $thisForm.find('[name=ProjectID]').val().trim(),
                TransMode:'PRTC'
        };
        console.log(inputData);
        if ($thisForm.find('[name=ProjectID]').val().trim() != '' || $thisForm.find('[name=ProjectID]').val().trim() != 0) {
            $.ajax({
                url: "@Url.Action("GetExistingTeamInfo", "TeamCreation")",
                type: "POST",
                // headers: { "token_key": "1234" },
                data: inputData,
                dataType: "json",
                contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                success: function (ajaxOutput) {

                    console.log('sss', ajaxOutput)
                    if (ajaxOutput.TeamDetails.Data != null) {
                        let strHtml = ""; let $ProductHtml = "";
                        for (var t = 0; t < ajaxOutput.distTeams.length; t++) {
                            let rowCount = 0;
                            strHtml += "<div class='tab-pane'>";
                            strHtml += "<div class='row' style='margin - top: 1.5rem;>";
                            strHtml += "<div class='col-sm-6'>";
                            strHtml += "<label style='width:3%'></label>";
                            strHtml += "<label style='width:25%'><strong style='width:100%'>Team: </strong><span class='mb-0' style='width:100%'>" + ajaxOutput.distTeams[t][0]['Name'] + "</span></label>";
                            strHtml += "<label style='width:25%'><strong style='width:100%'>Short Name: </strong><span class='mb-0' style='width:100%'>" + ajaxOutput.distTeams[t][0]['ShortName'] + "</span></label>";
                            strHtml += "<label style='width:25%'><strong style='width:100%'>Created Date: </strong><span class='mb-0' style='width:100%'>" + moment(ajaxOutput.distTeams[t][0]['CreateDate']).format('DD-MM-YYYY') + "</span></label>";
                            //strHtml += "<li class='list-group-item d-flex px-0 justify-content-between'><strong>g </strong><span class='mb-0'></span></li>";
                            //strHtml += "<li class='list-group-item d-flex px-0 justify-content-between'><strong>Collected By</strong><span class='mb-0'>" + ajaxOutput.prInfo.Data[0]['CollectedByName'] + "</span></li>";
                            strHtml += "</div></div></div>";

                            strHtml += '<div class="card-body"><div class="table-responsive"><table class="table table-striped"  id="EmployeeTable"><thead class="thead-primary"><tr><th>Sl No.</th><th>Department</th><th>Employee</th><th>Employee Type</th></tr>'
                            strHtml += '</thead ><tbody id="EmployeeDt">  ';

                            if (ajaxOutput != null) {
                                $('#EmployeeDt').empty();
                                $ProductHtml = "";
                                var ProductData = ajaxOutput.TeamDetails.Data;
                                if (ProductData) {
                                    $.each(ProductData, function (i, value) {
                                        if (value.TeamID == ajaxOutput.distTeams[t][0]["TeamID"]) {
                                            rowCount = (rowCount + 1);
                                            $ProductHtml += "<tr id = " + rowCount + " > ";
                                            $ProductHtml += "<td style='width:20%;'>" + rowCount + "</td>";
                                            $ProductHtml += "<td style='width:20%;'>" + value.DepartmentName + "</td>";
                                            $ProductHtml += "<td>" + value.Employee + "</td>";
                                            $ProductHtml += "<td>" + value.EmployeeTypeName + "</td>";

                                            $ProductHtml += "</tr> ";
                                        }
                                    });
                                }
                                else {
                                    $ProductHtml += "<tr id='0'><td colspan='4' style'text-align:center'>No Records..</td></tr>";
                                }

                                //$thisForm.find('#EmployeeDt').append($ProductHtml);
                                strHtml += $ProductHtml + '</tbody ></table > </div></div>';
                            }
                            //else {
                            //    $ProductHtml += "<tr id='0'><td colspan='8' style'text-align:center'>No Records..</td></tr>";
                            //    $thisForm.find('#EmployeeDt').append($ProductHtml);
                            //    $.each(ajaxOutput.Process.Message, function (key, value) {
                            //        NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                            //    });
                            //}
                        }
                        $thisForm.find('[name=TeamDetails]').html(strHtml);

                        initFunctions($thisForm);
                    }
                    else {
                        $('#EmployeeDt').empty();
                        strHtml = "<label class='col - xl - 10' style='text-align:center'>No Team Found For The Selected Project</label> ";
                        $thisForm.find('[name=TeamDetails]').html(strHtml);
                    }

                }
            });
        }

    }

    function ClearEmployee(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');

        $thisForm.find('[name=FK_Employee]').val(0);
        $thisForm.find('[name=Employee]').val('');
    }
    function clearproductqty(ele) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');

        $thisForm.find('[name=ProductID]').val(0);
        $thisForm.find('[name=Product]').val('');
        $thisForm.find('[name=Amount]').val('');
        $thisForm.find('[name=SalePrice]').val('');
        $thisForm.find('[name=Quantity]').val('');
        $thisForm.find('[name=StockId]').val('');

    }


    @*function GetTeam(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
             let ProjectID = $thisForm.find('[name=ProjectID]').val();
             let StageID = $thisForm.find('[name=StageID]').val();
             ClearEmployee(ele);
            let $placeDropdown = $thisForm.find('[name=TeamID]');//<--- Will give place select html element
            $placeDropdown.empty();
            $placeDropdown.append($('<option/>', { value: '' }).text('Please select')).selectpicker('refresh');
            //let inputData = {
            //    __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
            //    LeadGenerateID: $thisForm.find('[name=Lead]').val().trim()
            //};
            $.ajax({
                url: "@Url.Action("GetProjectTeam", "MaterialAllocation")",
                type: "POST",

                data: JSON.stringify({ FK_Project: ProjectID, FK_Stage: StageID  }),
                dataType: "json",
                contentType: "application/json",
                success: function (ajaxOutput) {



                    if (ajaxOutput.Process.IsProcess) {

                        $.each(ajaxOutput.Data, function (key, value) {
                            $placeDropdown.append($('<option/>', { "value": value.TeamID }).text(value.TeamName)).selectpicker('refresh')
                        });


                    }
                    else {
                        $.each(ajaxOutput.Process.Message, function (key, value) {
                            //toastr.warning(value, "Error");
                            //NotificationMessage({ 'type': 'info', 'heading': 'info', 'message': value });
                        });
                    }
                }

            });


    }*@
    function GetTeam(ele) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');

        let $actionDropdown = $thisForm.find('[name="TeamID"]');
        $actionDropdown.empty();
        $actionDropdown.append($('<option/>', { value: '' }).text('Please select')).selectpicker('refresh');


        let inputData =
        {
            __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
            FK_Project: ($thisForm.find('[name=ProjectID]').val() == null || $thisForm.find('[name=ProjectID]').val()=="" ? $thisForm.find('[name=FK_Project]').val() : $thisForm.find('[name=ProjectID]').val()),
            FK_Stages: $thisForm.find('[name=StageID]').val()
        };
        $.ajax({
            url: "@Url.Action("GetProjectTeam", "MaterialAllocation")",
            type: "POST",
            dataType: "json",
            data: inputData,
            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            success: function (ajaxOutput) {
                if (ajaxOutput.Data.length > 0) {
                    $.each(ajaxOutput.Data, function (key, value) {
                        $actionDropdown.append($('<option/>', { value: value.TeamID }).text(value.TeamName)).selectpicker('refresh');
                    });
                    if ($actionDropdown.attr('perfect-onloadSelect')) {
                        $actionDropdown.val($actionDropdown.attr('perfect-onloadSelect')).selectpicker('refresh')
                    }

                    if ($thisForm.find('[name="FK_Team"]').val() != "") {
                        $thisForm.find('[name="TeamID"]').val($thisForm.find('[name="FK_Team"]').val()).selectpicker('refresh');

                    }
                }
                else {
                    $.each(ajaxOutput.Process.Message, function (key, value) {
                        NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                    });
                }
            }
        });

     }

    function getfunction(ele) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');

      GetTeam(ele);

      let $Ptblcontainer = $thisForm.find('[perfect-tempTable="MaterialDetailsTable"]');


      $Ptblcontainer.empty();
         let searchPin = {
             FK_ProjectMaterialRequest: $thisForm.find('[name="ID_FIELD"]').val(),

         };
        if ($thisForm.find('[name="ID_FIELD"]').val() != "") {
             $.ajax({

                 url: '@Url.Action("GetMaterialnewfill", "MaterialAllocation")',
                 type: "POST",
                 data: searchPin,//<---- Input json : data passed to controller
                 dataType: "json",
                 contentType: 'application/x-www-form-urlencoded;charset=utf-8',
                 success: function (ajaxOutput) {

                     if (ajaxOutput.Process.IsProcess)
                     {
                         var WarnMsg = "";
                         if (ajaxOutput.Data.length > 0) {
                             WarnMsg = ajaxOutput.Data[0]["WarnMsg"];
                         }
                         if (WarnMsg != "") {
                             let confirmationDialogBoxOption = { heading: "Are you Sure?", body: WarnMsg, confirm: "Yes", cancel: "No" };
                             var confirmBoxObj = ConfirmDialog(confirmationDialogBoxOption);
                             confirmBoxObj.then(function (selectedOption) {

                                 if (selectedOption) {
                                     fillTable($thisForm, 'MaterialDetailsTable', ajaxOutput.Data, tableOptionsTempOut);

                                     if (ajaxOutput.Data) {
                                         if (ajaxOutput.Data.length == 0) {
                                             $thisForm.find('[name="temprenuew"]').val("false");
                                         }
                                         else {
                                             $thisForm.find('[name="temprenuew"]').val("true");
                                         }

                                     }
                                     else {
                                         console.log('ajaxOutput.Data != null else');
                                         $thisForm.find('[name="temprenuew"]').val("false");
                                     }
                                 }
                                 else {
                                     //NotificationMessage({ 'message': 'No option selected' });
                                 }

                             });



                         }
                         else {
                             fillTable($thisForm, 'MaterialDetailsTable', ajaxOutput.Data, tableOptionsTempOut);

                             if (ajaxOutput.Data) {
                                 if (ajaxOutput.Data.length == 0) {
                                     $thisForm.find('[name="temprenuew"]').val("false");
                                 }
                                 else {
                                     $thisForm.find('[name="temprenuew"]').val("true");
                                 }

                             }
                             else {
                                 console.log('ajaxOutput.Data != null else');
                                 $thisForm.find('[name="temprenuew"]').val("false");
                             }
                         }

                     }
                     else {

                         if (ajaxOutput.Data) {
                             if (ajaxOutput.Data.length == 0) {
                                 $thisForm.find('[name="temprenuew"]').val("false");
                             }
                             else {
                                 $thisForm.find('[name="temprenuew"]').val("true");
                             }

                         }
                         else {
                             console.log('ajaxOutput.Data != null else');
                             $thisForm.find('[name="temprenuew"]').val("false");
                         }


                         $.each(ajaxOutput.Process.Message, function (key, value) {
                             NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'No records found' });
                             let $Ptblcontainer = $thisForm.find('[perfect-tempTable="MaterialDetailsTable"]');
                             $Ptblcontainer.empty();
                         });
                     }
                 },
                 complete: function () {

                 }
             });
         }

    }

    function checkAmount() {
       
        let $thisForm = $('[perfect-class="form"]');

        let idbom = parseFloat($thisForm.find('[name="ID_BOMProject"]').val()) || 0;
        let idCat = parseFloat($thisForm.find('[name="CategoryID"]').val()) || 0;

        if (idbom > 0 && idCat > 0) {
            var $valid = true;
            return $valid;
        }
        else {
            var $valid = true;
            $('[perfect-tempTable="MaterialDetailsTable"]').find('table>tbody').find('tr').each(function (index, ele) {

                //$thisForm.find('[name=LogTotAmount]').val() == "" ? "0" : $thisForm.find('[name=LogTotAmount]').val();

                // sum = sum + parseFloat($(ele).find('.VtlDetAmount').text());
                console.log(ele, 'ele')
                //var amountText = $(ele).find('.py-2 text-left Amount').text();



                amountText = $(ele).find('td.Amount')
                amount_value = amountText.text();

                var amtText = parseFloat(amount_value);
                if (amtText) {
                    if (isNaN(amtText)) {
                        $valid = false;

                        NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Please enter Amount' });
                        return $valid;
                    }
                }
                else {
                    $valid = false;

                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Please enter Amount' });
                    return $valid;
                }

                // sum += amtText;
            });
            return $valid;
			
        }


    }
    var productSerialNum = [];
    var productSerialNumTemp = [];
    var productSerialNumTempListPop = [];
    function fn_getSerialNumbers(ele, Mod, Prodid,CurrentStock) {

            let $thisForm = $(ele).closest('[perfect-class="form"]');
            let productid ='';
            let stockid = 0;
            let Qty = 0;
            let isValid = false;

            serialNumberPopup = false;
            if (Mod == 0 || Mod == 2) {
                productid = $('[name="ProductID"]').val();
                stockid = $('[name="StockId"]').val();
                Qty = parseFloat(isNaN($('[name="Quantity"]').val()) ? 0 : $('[name="Quantity"]').val());
            }

        if (productid != "") {
            isValid = true;
        }
        else {
            isValid = false;
            NotificationMessage({ 'type': 'info', 'heading': 'info', 'message': "Please Select Product" });
        }
        if (Qty > 0) {
            isValid = true;
        }
        else {
            isValid = false;
            NotificationMessage({ 'type': 'info', 'heading': 'info', 'message': "Please Enter Quantity" });
        }

            $("#divProductSerialNumbers").empty();
        debugger
        var inputData = {
            __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
            'ID_ProjectMaterialDetails': materialid,
            'TransMode': MaterialAllocationTransMode,
            'FK_Product': productid,
            'StockID': stockid,
            'Mode': 2
        }

        if (isValid) {
                $.ajax({
                     url: "@Url.Action("GetSubProductsDetailInfo", "MaterialAllocation")",
                    type: "POST",
                    data: inputData,
                    dataType: "json",
                    contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                    success: function (ajaxOutput) {
                        debugger
                        let Slnumbers = [];
                        if (ajaxOutput.subproduct.Process.IsProcess) {

                            if (ajaxOutput.subproduct.Data.length > 0) {
                                $("#divProductSerialNumbers").empty();
                                console.log('ajaxOutput.subproduct.Data>>>>>', ajaxOutput.subproduct.Data[0].FK_Stock);

                                $.each(ajaxOutput.subproduct.Data, function (key, value) {
                                    let blnChecked = false;
                                    debugger
                                    let tempavailable;
                                    let temData;
                                    console.log('productSerialNum pop up>>',productSerialNum)
                                    tempavailable = productSerialNum.filter(obj => obj.ID_ProductNumberingDetails.toString() == value.ID_ProductNumberingDetails && obj.FK_MasterID != $('[name="StockId"]').val());

                                    temData = productSerialNumTemp.filter(obj => obj.FK_MasterID == $('[name="StockId"]').val());
                                    let unavailable = productSerialNumTemp.filter(obj => obj.FK_MasterID == $('[name="StockId"]').val() && obj.FK_Stock == value.FK_Stock);

                                    if (temData.filter((obj => obj.ID_ProductNumberingDetails == value.ID_ProductNumberingDetails)).length > 0) {
                                        if (temData.filter(obj => obj.FK_MasterID == $('[name="StockId"]').val() && obj.FK_Stock == value.FK_Stock).length > 0) {
                                            blnChecked = true;

                                        }
                                    }

                                    if (tempavailable == 0) {

                                        $("#divProductSerialNumbers").append(`<div class="col-sm-6 DivSlNo">
                                           <div class="form-check form-check-inline" perfect-class="formCheck">
                                             <label class="form-check-label" perfect-class="formCheckLabel">
                                              <input onchange="fn_checkedAllowed(this,${Mod} ,${Qty})" type="checkbox" class="form-check-input pssProductSerialSelect" SerialProduct="${productid}" Serialtext="${value.ProdSerielNo}" Qty="${Qty}" SubOrProd="${Mod}" value="${value.FK_Stock}" name="${value.ID_ProductNumberingDetails}" perfect-class="formCheckInput" perfect-ctype="checkbox" perfect-css="checkbox" ${(blnChecked ? "checked" : "")}>
                                                <span perfect-class="formCheckInputText">${value.ProdSerielNo}</span>
                                             </label>
                                           </div>
                                        </div>`);
                                    }

                                });
                                if (Mod == 2) {
                                    $('#modalProductSerialNumbers').modal('hide');
                                    SerialNumberExist = true;
                                }
                                else {
                                    $('#modalProductSerialNumbers').modal('show');
                                }
                                serialNumberPopup = true;

                            }
                        }
                        else {
                            if (Mod != 2) {
                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Serial Number Settings Not Found' });
                            }
                        }
                    },
                    complete: function () {
                        //ResetAMCandWarranty(ele, oldvalue);
                    }
                });
            }
    }


    function fn_ProductSerialNumberPopupHide(ele) {

        let Qty = parseFloat(isNaN($("#divProductSerialNumbers .pssProductSerialSelect").attr("qty")) ? 0 : $("#divProductSerialNumbers .pssProductSerialSelect").attr("qty"));
        let ProductOrSub = $("#divProductSerialNumbers .pssProductSerialSelect").attr("SubOrProd");
        debugger
        if (fn_setProductSerialNumber(this, Qty, ProductOrSub)) {
            $('#modalProductSerialNumbers').modal('hide');
        }
        else {
            let qty = parseInt(isNaN($('[name="Quantity"]').val()) ? 0 : $('[name="Quantity"]').val());
            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Please Select Minimum ${Qty} Sl No` });
        }
    }


    function fn_setProductSerialNumber(ele, Qty, ProductOrSub) {
        debugger
        let $thisForm = $('[perfect-class="form"]');

        let Master_stockid = $thisForm.find('[name=StockId]').val();
        let stockid = $('input.pssProductSerialSelect:checkbox:checked').val();
        let SerialProduct = $("#divProductSerialNumbers .pssProductSerialSelect").attr("SerialProduct");
        let SerialNum = $("#divProductSerialNumbers .pssProductSerialSelect").attr("Serialtext");

        let numberOfChecked = parseInt($('input.pssProductSerialSelect:checkbox:checked').length);
        let qty = parseInt(isNaN($thisForm.find('[name="Quantity"]').val()) ? 0 : $thisForm.find('[name="Quantity"]').val());
        if (numberOfChecked == Qty) {
            //remove old slno
            //$("#divProductSerialNumbers").empty();
            debugger
            //console.log('SERIAL NUMBER OLD>>>>', productSerialNumTemp)

            productSerialNumTemp = productSerialNumTemp.filter(obj => obj.UID.toString() !== (Master_stockid.toString() + stockid.toString()));
            //remove old slno
            let UID = Master_stockid.toString() + stockid.toString()
            $('input.pssProductSerialSelect:checkbox:checked').each(function () {
                let sThisVal = $(this).attr('name');
                let serialNumInfo = {};
                serialNumInfo['UID'] = UID;
                serialNumInfo['ProductId'] = SerialProduct;
                serialNumInfo['FK_Stock'] = stockid;
                serialNumInfo['FK_MasterID'] = Master_stockid;
                serialNumInfo['ID_ProductNumberingDetails'] = sThisVal;
                serialNumInfo['ProdSerielNo'] = SerialNum;
                productSerialNumTemp.push(serialNumInfo);
            });
            console.log('SERIAL NUMBER CURRENT>>>>', productSerialNumTemp)
            console.log('MAIN SERIAL NUMBER CURRENT>>>>', productSerialNum)


            return true;
        }
        else {
            return false;
        }
        //console.log(productSerialNum)
    }


    function fn_checkedAllowed(ele, Mod, Qty) {
        debugger
        let $thisForm = $('[perfect-class="form"]');
        let numberOfChecked = parseInt($('input.pssProductSerialSelect:checkbox:checked').length);
        let qty;
        if (Mod == 0) {
            qty = parseFloat(isNaN($thisForm.find('[name="Quantity"]').val()) ? 0 : $thisForm.find('[name="Quantity"]').val());
        }
        else {
            qty = Qty;
        }
        debugger
        if (numberOfChecked > qty) {
            $(ele).prop('checked', false)
            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Your limit is ${qty}` });
        }
    }
    function fillSerialNumberTemp(ele) {
        productSerialNumTemp = [];
        debugger
        if (productSerialNum != null) {
            if (productSerialNum.length > 0) {
                productSerialNumTemp = productSerialNumTemp.concat(productSerialNum);
            }
        }
    }
	function Close(ele)
	{

	 //  window.open("@Url.Action("Index", "ProjectList") ,'_self');
	var url = "@Url.Action("Index", "ProjectList")" 
	window.open(url, '_self');
	}
    function DeleteSerialNumbersRow(ele, StockId) {
        if (productSerialNum != null) {
            if (productSerialNum.length > 0) {
                productSerialNum = productSerialNum.filter(obj => obj.FK_MasterID.toString() !== StockId);
            }
        }
    }
    function SerialNumberButtonsState(ele) {
        let $thisForm = $('[perfect-class="form"]');
        let $numEnable = $thisForm.find('[name="ProdNumbering"]').val();

        if ($numEnable == 1) {
            document.getElementById('btn_Slno').style.display = 'block';
        }
        else {
            document.getElementById('btn_Slno').style.display = 'none';
        }
    }
    function onInvoicecall(Tabledata, Otherdata) {
        if (Otherdata.Data[0].Comlogo != "") {
            Otherdata.Data[0].Comlogo = "/" + Otherdata.Data[0].Comlogo;
        }
        const OutputType = {
            Save: "save", //save pdf as a file
            DataUriString: "datauristring", //returns the data uri string
            DataUri: "datauri", //opens the data uri in current window
            DataUrlNewWindow: "dataurlnewwindow", //opens the data uri in new window
            Blob: "blob", //return blob format of the doc,
            ArrayBuffer: "arraybuffer", //return ArrayBuffer format
        };
        var props = {
            outputType: OutputType.Save,
            returnJsPDFDocObject: true,
            fileName: "Delivery Slip " + Otherdata.Data[0].deliveryNoteId,
            orientationLandscape: false,
            compress: true,

            logo: {
                inAllPages: true, //by default = false, just in the last page
                src: Otherdata.Data[0].Comlogo,
                type: Otherdata.Data[0].Extension,
               // type: 'PNG', //optional, when src= data:uri (nodejs case)
                width: 53.33, //aspect ratio = width/height
                height: 26.66,
                margin: {
                    top: 0, //negative or positive num, from the current position
                    left: 0 //negative or positive num, from the current position
                }
            },
          
            header: {
                firstRigthLn: "Original for Recipient",
                deliveryNote: "DELIVERY NOTE " + Otherdata.Data[0].deliveryNoteId,
                date:"Date  " + convertDateFormat(Otherdata.Data[0].date),
                shipping_date:"Shipping Date  " +convertDateFormat(Otherdata.Data[0].shipping_date),
                showinAllpage: true
            },
            subheaderinAllpage: true,
            business: {
                companyname: Otherdata.Data[0].ComName,
               // address: "Ashiqa Tower Logans Road Thalassery Kannur, Kerala(KL - 32), PIN Code 670101, India1",
                address: Otherdata.Data[0].ComAddress,
                phone: Otherdata.Data[0].ComPhone,
                email: Otherdata.Data[0].ComEmail,
                website: Otherdata.Data[0].Comwebsite,
                //email_1: "info@example.al",
                //website: "www.example.al",
            },
            contact: {
                label: "Invoice issued for:",
                name: "Client Name",
                address: "Albania, Tirane, Astir",
                phone: "(+355) 069 22 22 222 dfgdfg ghdfgdfh5552555",
                email: "spectrumbusinessco@gmail.com",
                website: "spectrumbusinessco@gmail.com",
            },
            bill_to: {
                header: "Bill to: ",
                name: Otherdata.Data[0].BillCusname,
                address: Otherdata.Data[0].BillCusAddress,
                phone: Otherdata.Data[0].BillCusMobile,
                email:"",
                otherInfo: "",
            },
            ship_to: {
                header:"Ship to:",
                name: Otherdata.Data[0].shipCusname,
                address: Otherdata.Data[0].shipCusAddress,
                phone: Otherdata.Data[0].shipCusMobile,
                email: "",
                otherInfo: "",
            },
            invoice: {
              
                headerBorder: false,
                tableBodyBorder: false,
                header: [
                    {
                        title: "No",
                        style: {
                            width: 10
                        }
                    },
                    {
                        title: "PRODUCT / SERVICE NAME ",
                        style: {
                            width: 100
                        }
                    },
                    {
                        title: "HSN/SAC",
                        style: {
                            width: 40
                        }
                    },
                    { title: "QTY UOM" }
                  
                ],
                tableDatakey: ["No", "Product", "HSNCode", "Quantity", "Service", "Uom"],
                secounflineInTable: ["Service","Uom"],
              
                table: Tabledata.Data,
                //additionalRows: [{
                //    col1: 'Total:',
                //    col2: '145,250.50',
                //    col3: 'ALL',
                //    style: {
                //        fontSize: 14 //optional, default 12
                //    }
                //},
                //{
                //    col1: 'VAT:',
                //    col2: '20',
                //    col3: '%',
                //    style: {
                //        fontSize: 10 //optional, default 12
                //    }
                //},
                //{
                //    col1: 'SubTotal:',
                //    col2: '116,199.90',
                //    col3: 'ALL',
                //    style: {
                //        fontSize: 10 //optional, default 12
                //    }
                //}],
                invDescLabel: "",
                fullLength:true,
                invDesc: "",
            },
            subfooter: {
                title: "Note :",
                line1: "The above mentioned material is received without any damage and in good condition",
                line2: "",
                line3: "Received by",
                line4: "Name :",
                line5: "Contact No.",
                line6:"Signature :"

            },
            footer: {
               
                text: "",
            },
            pageEnable: true,
            pageLabel: "Page ",
        };


        //debugger
        InvoiceTemplate2(props)

    }
    
    var arraydata = [{ No: 1, Product: "AMC", Service: "Amc-105", Qty: 24, Uom: "meters", Hsn: "8544" }, { No: 1, Product: "AMC", Service: "Amc-105", Qty: 24, Uom: "meters", Hsn: "" }, { No: 1, Product: "AMC", Service: "Amc-105", Qty: 24, Uom: "meters", Hsn: "" }, { No: 1, Product: "AMC", Service: "Amc-105", Qty: 24, Uom: "meters", Hsn: "" },
        { No: 1, Product: "AMC", Service: "Amc-105", Qty: 24, Uom: "meters", Hsn: "8544" }, { No: 1, Product: "AMC", Service: "Amc-105", Qty: 24, Uom: "meters", Hsn: "" }, { No: 1, Product: "AMC", Service: "Amc-105", Qty: 24, Uom: "meters", Hsn: "" }, { No: 1, Product: "AMC", Service: "Amc-105", Qty: 24, Uom: "meters", Hsn: "" }, { No: 1, Product: "AMC", Service: "Amc-105", Qty: 24, Uom: "meters", Hsn: "8544" }, { No: 1, Product: "AMC", Service: "Amc-105", Qty: 24, Uom: "meters", Hsn: "" }, { No: 1, Product: "AMC", Service: "Amc-105", Qty: 24, Uom: "meters", Hsn: "" }, { No: 1, Product: "AMC", Service: "Amc-105", Qty: 24, Uom: "meters", Hsn: "" }
        , { No: 1, Product: "AMC", Service: "Amc-105", Qty: 24, Uom: "meters", Hsn: "8544" }, { No: 1, Product: "AMC", Service: "Amc-105", Qty: 24, Uom: "meters", Hsn: "" }, { No: 1, Product: "AMC", Service: "Amc-105", Qty: 24, Uom: "meters", Hsn: "" }, { No: 1, Product: "AMC", Service: "Amc-105", Qty: 24, Uom: "meters", Hsn: "" }, { No: 1, Product: "AMC", Service: "Amc-105", Qty: 24, Uom: "meters", Hsn: "8544" }, { No: 1, Product: "AMC", Service: "Amc-105", Qty: 24, Uom: "meters", Hsn: "" }, { No: 1, Product: "AMC", Service: "Amc-105", Qty: 24, Uom: "meters", Hsn: "" }, { No: 1, Product: "AMC", Service: "Amc-105", Qty: 24, Uom: "meters", Hsn: "" },
        { No: 1, Product: "AMC", Service: "Amc-105", Qty: 24, Uom: "meters", Hsn: "8544" }, { No: 1, Product: "AMC", Service: "Amc-105", Qty: 24, Uom: "meters", Hsn: "" }, { No: 1, Product: "AMC", Service: "Amc-105", Qty: 24, Uom: "meters", Hsn: "" }, { No: 1, Product: "AMC", Service: "Amc-105", Qty: 24, Uom: "meters", Hsn: "" }, { No: 1, Product: "AMC", Service: "Amc-105", Qty: 24, Uom: "meters", Hsn: "8544" }, { No: 1, Product: "AMC", Service: "Amc-105", Qty: 24, Uom: "meters", Hsn: "" }, { No: 1, Product: "AMC", Service: "Amc-105", Qty: 24, Uom: "meters", Hsn: "" }, { No: 1, Product: "AMC", Service: "Amc-105", Qty: 24, Uom: "meters", Hsn: "" }, { No: 1, Product: "AMC", Service: "Amc-105", Qty: 24, Uom: "meters", Hsn: "8544" }, { No: 1, Product: "AMC", Service: "Amc-105", Qty: 24, Uom: "meters", Hsn: "" }, { No: 1, Product: "AMC", Service: "Amc-105", Qty: 24, Uom: "meters", Hsn: "" }, { No: 1, Product: "AMC", Service: "Amc-105", Qty: 24, Uom: "meters", Hsn: "" }]



    function getDeliverySlip(els) {
    
        let $thisForm = $('[perfect-class="form"]');

        var inputData = {
            Fk_MaterilaAllocation:$thisForm.find('[name="MaterialAllocationDetailsId"]').val()
        };



         $.ajax({
            url: "@Url.Action("GetDeliverySlip", "MaterialAllocation")",
            type: "POST",
            data: inputData,
            dataType: "json",
            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            success: function (ajaxOutput) {
                if (ajaxOutput.Tabledata.Process.IsProcess && ajaxOutput.Otherdata.Process.IsProcess) {
                    onInvoicecall(ajaxOutput.Tabledata, ajaxOutput.Otherdata);
                } else {
                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': "No data " });
                }
                        
            },
            complete: function () {
                //ResetAMCandWarranty(ele, oldvalue);
            }
         });

    };
    function convertDateFormat(dateStr) {
        var timestamp = parseInt(dateStr.match(/\d+/)[0]);
        var date = new Date(timestamp);
        var formattedDate = date.toLocaleDateString('en-US', {
            month: 'long',
            day: 'numeric',
            year: 'numeric'
        });
        return formattedDate;
    }




    function GetCategoryList(ele, FK_Project,id) {
        
        let $thisForm = $('[perfect-class="form"]');    
        let $menuDropdown = $thisForm.find('[name="CategoryID"]');
        $menuDropdown.empty();
        $menuDropdown.append($('<option/>', { value: '' }).text('Please Select')).selectpicker('refresh');

        let inputdata = {
            FK_Project: FK_Project,
        }

        $.ajax({
            url: '@Url.Action("GetCategoryList", "MaterialAllocation")',
            type: "POST",
            data: inputdata,//<---- Input json : data passed to controller
            dataType: "json",
            contentType: 'application/x-www-form-urlencoded;charset=utf-8',
            success: function (ajaxOutput) {


                //let $menuDropdown = $thisForm.find('[name=CategoryID]');//<--- Will give place select html element

                //$menuDropdown.empty().selectpicker('refresh');
                //$menuDropdown.append($('<option/>', { "value": "" }).text("Please select")).selectpicker('refresh')
                if (ajaxOutput.Process.IsProcess) {
                    debugger
                    console.log("ajaxOutput>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", ajaxOutput.Data)
                    $.each(ajaxOutput.Data, function (key, value) {
                        debugger
                        $menuDropdown.append($('<option/>', { "value": value.CategoryID }).text(value.CategoryName)).selectpicker('refresh')
                    });

                    if ($menuDropdown.attr('perfect-onloadSelect')) {
                        $menuDropdown.val($menuDropdown.attr('perfect-onloadSelect')).selectpicker('refresh');
                        //$menuDropdown.attr('perfect-onloadSelect', '');
                    }
                    //if ($actionDropdown.attr('perfect-onloadSelect')) {
                    //    $actionDropdown.val($actionDropdown.attr('perfect-onloadSelect')).selectpicker('refresh')
                    //}

                    //if (id != "") {
                    //    $thisForm.find('[name="CategoryID"]').val(id).selectpicker('refresh');

                    //}
                }
                else {
                    $.each(ajaxOutput.Process.Message, function (key, value) {

                        NotificationMessage({ 'type': 'warning', 'heading': 'warning', 'message': 'Category not found' });
                    });
                }
            },
            complete: function () {

            }
        });

    }


    function GetBomList(ele, CategoryID, Bomval) {
        

        let inputdata = 0;

        let $thisForm = $('[perfect-class="form"]');
        $thisForm.find('[name="ID_BOMProject"]').val(0);
        $thisForm.find('[name="ID_BOMProject"]').val('');
        $thisForm.find('[perfect-elemet="bom"]').selectpicker('refresh');

        let tablekey = 'MaterialDetailsTable';
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tablekey + '"]');
        $tblcontainer.attr('perfect-tempTable-action', 0);
        $tblcontainer.empty();

        if (CategoryID == 0) {
            inputdata = {
                FK_Category: $thisForm.find('[name="CategoryID"]').val() || 0,
            }
        }
        else {
            inputdata = {
                FK_Category: CategoryID,
            }
        }
             
        
        $.ajax({
            url: '@Url.Action("GetBOMList", "MaterialAllocation")',
            type: "POST",
            data: inputdata,//<---- Input json : data passed to controller
            dataType: "json",
            contentType: 'application/x-www-form-urlencoded;charset=utf-8',
            success: function (ajaxOutput) { 


                let $menuDropdown = $thisForm.find('[name=ID_BOMProject]');//<--- Will give place select html element
                
                $menuDropdown.empty().selectpicker('refresh');
                $menuDropdown.append($('<option/>', { "value": "" }).text("Please Select")).selectpicker('refresh')
                if (ajaxOutput.Process.IsProcess) {

                    $.each(ajaxOutput.Data, function (key, value) {
                        $menuDropdown.append($('<option/>', { "value": value.ID_BOMProject }).text(value.BOMName)).selectpicker('refresh')
                    });

                    if ($menuDropdown.attr('perfect-onloadSelect')) {
                        $menuDropdown.val($menuDropdown.attr('perfect-onloadSelect')).selectpicker('refresh');
                        $menuDropdown.attr('perfect-onloadSelect', '');
                    }
                    if (Bomval != 0) {
                        $thisForm.find('[name="ID_BOMProject"]').val(Bomval).selectpicker('refresh');
                    }
                }
                else {
                    $.each(ajaxOutput.Process.Message, function (key, value) {

                        NotificationMessage({ 'type': 'warning', 'heading': 'warning', 'message': 'BOM Records not found' });
                    });
                }
            },
            complete: function () {


            }
        });

    }


    function GetProductDetails1(ele) {
        
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let CategoryID = $thisForm.find('[name=CategoryID]').val();
        let ID_BOMProject = $thisForm.find('[name=ID_BOMProject]').val();
        //for clear the material details grid if ID_BOMProject==0;
       // if (ID_BOMProject == 0 || ID_BOMProject == "") {
            let tablekey = 'MaterialDetailsTable';
            let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tablekey + '"]');
            $tblcontainer.attr('perfect-tempTable-action', 0);
            $tblcontainer.empty();
       // }

        $.ajax({
            url: "@Url.Action("GetProductDetails", "MaterialAllocation")",
            type: "POST",
            data: JSON.stringify({ FK_Category: CategoryID, ID_BOMProject: ID_BOMProject }),
            dataType: "json",
            contentType: "application/json",
            success: function (ajaxOutput) {
                console.log(ajaxOutput);
                if (ajaxOutput.Process.IsProcess) {

                    let table = ajaxOutput.Data;
                    
                    //fillgrid('MaterialDetailsTable', tableOptionsTempOut, $thisForm, table.dtable);

                    fillgrid($thisForm, 'MaterialDetailsTable', table, tableOptionsTempOutBom);
                }
                else {
                    $.each(ajaxOutput.Process.Message, function (key, value) {
                        NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': "No Stock Found For this BOM" });
                    });
                }
            }

        });


    }

    //function fillgrid(tablk, tableOptionsTempOut, $thisForm, data) {
    //    debugger
    //    console.log(data, 'gdfg');
    //    let tableOptionsTemp = tableOptionsTempOut;
    //    console.log(tableOptionsTempOut, 'gdfg');
    //    let insertData = [];
    //    let tableKey = tablk;
    //    let indexname = tableKey + 'index';
    //    tableOptionsTemp.rowAttribute.push(indexname);
    //    tableOptionsTemp.hideColumn.push(indexname);
    //    let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');
    //    console.log($tblcontainer, 'New');
    //    $.each(data, function (keyOne, valOne) {
    //        let pData = {};
    //        pData[indexname] = keyOne + 1;
    //        $tblcontainer.attr('perfect-tempTable-lastindex', pData[indexname])
    //        //---

    //        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
    //            let $this = $(this);
    //            let headerName = $this.attr('perfect-tempTable-' + tableKey);
    //            let nameAttr = $this.attr('name');
    //            console.log('name', valOne[nameAttr])
    //            if (typeof valOne[nameAttr] !== undefined) {

    //                if ($this.is('select')) {
    //                    tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
    //                    tableOptionsTemp.hideColumn.push(nameAttr);
    //                    //displat text of select
    //                    pData[nameAttr + '_d'] = $this.find('[value="' + valOne[nameAttr] + '"]').text();
    //                    pData[nameAttr] = valOne[nameAttr];
    //                    console.log('select', $this.find('options[value="' + valOne[nameAttr] + '"]').text());

    //                }
    //                else if ($this.is('input')) {

    //                    pData[nameAttr] = valOne[nameAttr];

    //                }

    //            }

    //        });

    //        insertData.push(pData);
    //        console.log('pData', pData)
    //        console.log('insertData', insertData)
    //        //----


    //    });
    //    $tblcontainer.empty();
    //    $tblcontainer.append(pft_table_createtable(insertData, tableOptionsTemp));


    //}


    function fillgrid(ele, tkey, data, tableOptionsTempOutBom) {
        
        var ChekStandBy1 = ChekStandBy12;
            console.log('ChekStandBy1>>>213', ChekStandBy1)
            

            let $thisForm = $(ele).closest('[perfect-class="form"]');

        let tableOptionsTemp = tableOptionsTempOutBom;
            let insertData = []
            let tableKey = tkey;

            let indexname = tkey + 'index';
            tableOptionsTemp.rowAttribute.push(indexname);
            tableOptionsTemp.hideColumn.push(indexname);

            let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');


            $.each(data, function (keyOne, valOne) {

                let pData = {};

                pData[indexname] = keyOne + 1;
                $tblcontainer.attr('perfect-tempTable-lastindex', pData[indexname])
                //---

                $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                    let $this = $(this);
                    let headerName = $this.attr('perfect-tempTable-' + tableKey);
                    let nameAttr = $this.attr('name');
                  
                   
                    if (typeof valOne[nameAttr] !== undefined) {

                        if ($this.is('select')) {


                            //tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                            tableOptionsTemp.hideColumn.push(nameAttr);
                            //displat text of select
                            
                            pData[nameAttr + '_d'] = $this.find('[value="' + valOne[nameAttr] + '"]').text();
                            pData[nameAttr] = valOne[nameAttr];

                          
                        }
                        else if ($this.is('input')) {

                            pData[nameAttr] = valOne[nameAttr];
                            if (ChekStandBy1 == "True") {

                                if (nameAttr == "StandByQuantity") {
                                    
                                    tableOptionsTemp.onlyShowColumn.push(nameAttr);
                                    tableOptionsTemp.onlyShowColumn.push("Stand By Quantity");
                                }
                                else if (nameAttr == "StandByProdName") {
                                    
                                    tableOptionsTemp.onlyShowColumn.push(nameAttr);

                                }
                               
                            } 

                            let inputType = $this.attr('type').toLocaleLowerCase();
                            
                            if (inputType == 'checkbox') {

                                pData[nameAttr] = valOne[nameAttr];

                                tableOptionsTemp.isCheckType.push(nameAttr);

                                


                            }
                            else if (inputType == 'hidden') {

                                tableOptionsTemp.hideColumn.push(nameAttr);
                                pData[nameAttr] = valOne[nameAttr];


                            }
                            else if (inputType == 'date') {

                                if (valOne[nameAttr] == null) {
                                    pData[nameAttr] = valOne[nameAttr];
                                }
                                else {
                                    pData[nameAttr] = moment(valOne[nameAttr]).format('YYYY-MM-DD');
                                }


                            }
                            else {
                                pData[nameAttr] = valOne[nameAttr];


                            }
                        }
                        else {
                            pData[nameAttr] = valOne[nameAttr];


                        }
                    }



                });

                insertData.push(pData);


                //----

            });
            $tblcontainer.empty();
            $tblcontainer.append(pft_table_createtable(insertData, tableOptionsTemp));
            // $tblcontainer.find('table').dataTable({ paging: true });

        }

</script>





<script src="~/Scripts/exportFile.js"></script>
<script src="~/Scripts/jspdf.min.js"></script>