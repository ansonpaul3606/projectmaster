
@model PerfectWebERP.Models.MaterialModel.MaterialRequestView
<style>
    .yy {
        padding-left: 0px !important;
    }
</style>

<div class="card ">

    <div class="card-header">
        <h4 class="card-title col-12">Material Request </h4>
        <span title="To View List" onclick="fn_showListView();"><svg id="Layer_1" class="layer" stroke="currentColor" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" height="20" width="20" viewBox="0 0 122.88 122.54"><title>To View List</title><path class="viewlst" d="M4.69,0H46.22a4.71,4.71,0,0,1,4.69,4.69V46a4.69,4.69,0,0,1-4.69,4.69H4.69a4.65,4.65,0,0,1-3.31-1.38l-.09-.09A4.67,4.67,0,0,1,0,46V4.69A4.71,4.71,0,0,1,4.69,0ZM89.44,61.94a26.56,26.56,0,0,1,10.18,2l.07,0a26.61,26.61,0,0,1,15.25,32.16,26.18,26.18,0,0,1-2.7,6.11l10.3,11.24a1.27,1.27,0,0,1-.07,1.8l-7.57,6.9a1.27,1.27,0,0,1-1.79-.07l-9.86-10.85a26.36,26.36,0,0,1-6.1,2.74,26.87,26.87,0,0,1-7.71,1.13,26.51,26.51,0,0,1-10.17-2l-.07,0A26.64,26.64,0,0,1,64.85,78.37l0-.07A26.6,26.6,0,0,1,89.44,61.94Zm15,11.59a21.38,21.38,0,0,0-6.89-4.61l-.06,0a21.22,21.22,0,0,0-23.07,4.64l-.07.07a21.25,21.25,0,0,0-4.54,6.83l0,.06a21.32,21.32,0,0,0-1.58,8.06,21.26,21.26,0,0,0,29.35,19.62,21.54,21.54,0,0,0,6.89-4.61l.07-.07a21.09,21.09,0,0,0,4.54-6.83l0-.06a21.35,21.35,0,0,0,0-16.17,21.34,21.34,0,0,0-4.62-6.9ZM4.69,63.2H46.22a4.71,4.71,0,0,1,4.69,4.7v41.34a4.68,4.68,0,0,1-4.69,4.69H4.69A4.69,4.69,0,0,1,0,109.24V67.9a4.71,4.71,0,0,1,4.69-4.7ZM68.78,0h41.53A4.71,4.71,0,0,1,115,4.69V46a4.71,4.71,0,0,1-4.69,4.69H68.78A4.71,4.71,0,0,1,64.09,46V4.69a4.69,4.69,0,0,1,1.37-3.31l.1-.09A4.67,4.67,0,0,1,68.78,0Z"></path></svg></span>
    </div>
    <div class="card-body">
        <form id="" class="form-valide" perfect-class="form" action="#" method="post" perfect-onFormSuccess="">
            @Html.AntiForgeryToken()
            <div class="">

                <div class="row">




                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label name="lblProject" class="col-sm-4 col-form-label">Project<span class="text-danger">*</span></label>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    <input type="hidden" name="ID_ProjectMaterialRequest" class="form-control " perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                    <input type="date" name="ProjectDate" class="form-control" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" hidden />
                                    <input type="text" class="form-control" name="Project" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly />
                                    <input type="hidden" name="ProjectID" class="form-control perfectValidate_string"" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                    <div class="input-group-append">
                                        <button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" onclick="GetCmnPopUpSearchValAssign(this, 41, 'Project Details',[],['ProjectDate'])" Function="3" BindName="Project" BindVal="ProjectID" perfect-css="button"></button>
                                    </div>
                                </div>
                                <div class="text-danger temptableError"></div>
                            </div>
                        </div>
                    </div>



                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Stage</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-6">

                                <select class="form-control perfectValidate_string" name="StageID" perfect-selectButtonAction="testing" perfect-class="formGroupControl" onchange="GetTeam(this)" perfect-ctype="select" perfect-css="select">
                                    <option value="">Please Select </option>


                                    @if (!(Model.StageList is null))
                                    {
                                        foreach (var cat in Model.StageList)
                                        {
                                            <option value="@cat.StageID">@cat.StageName</option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Team</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-6">
                                <select class="form-control perfectValidate_string" name="TeamID" perfect-selectButtonAction="testing" onchange="ClearEmployee(this)" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select">
                                    <option value="">Please Select </option>


                                    @if (!(Model.TeamList is null))
                                    {
                                        foreach (var cat in Model.TeamList)
                                        {
                                            <option value="@cat.TeamID">@cat.TeamName</option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span id="lblEmpl" perfect-class="formGroupLabel">Employee</span>
                            </label>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    <input type="text" class="form-control " name="Employee" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled />
                                    <input type="hidden" name="EmployeeID" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                    <input type="hidden" name="DepartmentID" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />

                                    <div class="input-group-append">
                                        <button id="addemployee-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchValAssign(this,51,'Employee List',['TeamID','Team'],['DepartmentID'])" criterea1="TeamID" bindname="Employee" bindval="EmployeeID"></button>
                                    </div>
                                </div>

                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Requested Date</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-6">

                                <input type="date" class="form-control perfectValidate_date" id="ProMatRequestDate" name="ProMatRequestDate" perfect-class="formGroupControl" perfect-ctype="date" max="2050-01-01" perfect-css="date" onchange="checkdatewithLDdate(this)" />
                                <div class="invalid-feedback animated fadeInUp limit-check" style="display: block;"></div>
                                <div id="CreateDate-error" class="Custominvalid animated fadeInUp CreateDateerror" style="display: none;">Created On sholud be greater than or equal to Project Date</div>
                            </div>

                        </div>
                    </div>



                </div>

                <div class="row ">

                    <div class="col-sm-12">
                        <div class="daccordion__header" id="Discount">
                            <span class="accordion__header--text">Details</span>
                        </div>
                        <br />

                        <div class="row">
                            <div class="col-sm-3 hideStyle" >
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-4 col-form-label">
                                        <span perfect-class="formGroupLabel">Mode</span>
                                        <span class="text-danger">*</span>
                                    </label>
                                    <div class="col-sm-6">
                                        <input type="hidden" name="Mode" />
                                        <select class="form-control" name="Mode" perfect-tempTable-Opening="Mode" perfect-selectButtonAction="testing" perfect-class="formGroupControl" onchange="clearproductqty(this)" perfect-ctype="select" perfect-css="select">
                                            <option value="">Please Select </option>


                                            @if (!(Model.ModeList is null))
                                            {
                                                foreach (var Module in Model.ModeList)
                                                {
                                                    <option value="@Module.Mode">@Module.ModeName</option>
                                                }
                                            }
                                        </select>
                                        <span class="temptableError"></span>
                                    </div>

                                </div>
                            </div>

                            <div class="col-sm-3">

                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-4 col-form-label">
                                        <span perfect-class="formGroupLabel">Product</span>
                                        <span class="text-danger">*</span>
                                    </label>

                                    <div class="col-sm-6 PerError">
                                        <div class="input-group">
                                            <input type="text" class="form-control" name="Product" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" perfect-tempTable-Opening="Product" disabled />
                                            @*<button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" onclick="getproductdetails(this)" BindName="Product" BindVal="ProductID" Criterea1="FK_Branch" Criterea2="FK_Department" function="2" perfect-css="button"></button>*@

                                            <input type="hidden" name="ProductID" class="form-control" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" perfect-tempTable-Opening="ProductID" />
                                            <input type="hidden" name="ID_ProjectMaterialRequest" class="form-control " perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" perfect-tempTable-Opening="ID_ProjectMaterialRequest" />
                                            <input type="hidden" name="ID_Stock" class="form-control" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" perfect-tempTable-Opening="ID_Stock" />

                                            <div class="input-group-append">
                                                @{

                                                    @*<button id="prdbtn" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="fn_productpopupcondition(this)" Criterea1="" Criterea2="" Criterea3="" BindName="Product" BindVal="ProductID"></button>*@
                                                    <button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" onclick="getproductdetails(this)" BindName="Product" BindVal="ProductID" Criterea1="FK_Branch" Criterea2="FK_Department" function="2" perfect-css="button"></button>

                                                }
                                            </div>

                                        </div>

                                        <span class="invalid-feedback animated fadeInUp d-block temptableError"></span>
                                    </div>


                                </div>
                            </div>


                            <div class="col-sm-3">
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-4 col-form-label">
                                        <span perfect-class="formGroupLabel">Quantity</span>
                                        <span class="text-danger">*</span>
                                    </label>
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            <input type="text" class="form-control text-right" placeholder="" name="Quantity" id="Quantity" oninput="decimalpnt(this,'Quantity',4)" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" perfect-tempTable-Opening="Quantity" maxlength="13" />

                                            <span class="invalid-feedback animated fadeInUp d-block" style="display:none"></span>

                                        </div>

                                    </div>

                                </div>
                            </div>


                            <div class="col-sm-3" style="text-align:right;">
                                <button type="button" class="btn btn-primary1" perfect-css="button" onclick="MaterialDetailsTable_create(this,'Opening',['ProductID'])" name="reset" align="center"><i class="fa fa fa-plus" aria-hidden="true"></i></button>
                                <button class="btn btn-light1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" onclick="clearproducts(this,'Opening')"><i class="fa fa-refresh" aria-hidden="true"></i></button>
                            </div>


                        </div>



                        <div class="col-sm-12">
                            <div class="form-group row" perfect-class="formGroup">

                                <div class="table-responsive" perfect-tempTable="Opening" perfect-tempTable-lastindex="0" perfect-tempTable-action="0">

                                </div>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
            <div class="card-footer text-right" perfect-class="formFooter">
                <button id="" type="button" class="btn btn-primary mr-3 addcompany-jq-addnewuserUpdate d-none" name="update" perfect-css="button" onclick="AddMaterialrequest(this,'update')"><i class="fa fa-refresh fa-spin  loaderClass"></i>Update</button>
                <button id="addcompany-jq-addnewuser" type="button" class="btn btn-primary mr-3 " name="add" perfect-css="button" onclick="AddMaterialrequest(this,'add')"><i class="fa fa-refresh fa-spin loaderClass "></i>Save</button>
                <button type="button" class="btn btn-light" perfect-css="button" onclick="ResetButton(this)" name="reset">Clear</button>
            </div>

        </form>
    </div>
</div>



<script src="~/Scripts/jqDOM/searchDOMCreation.js"></script>


<script>


    (function () {

        jQuery("select").selectpicker();

    })();

    $(document).ready(function () {

       let $thisForm = $(this).find('[perfect-class="form"]');




    });


    //function decimalpnt(ele, name, range) {

    //    let input = $('#' + name);
    //    ele.value = ele.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');
    //    let t = ele.value;
    //    ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t;
    //    input.on('keydown', function () {
    //        if (ele.value.includes('.')) {

    //        }
    //        var key = event.keyCode || event.charCode;
    //        if (key == 8 || key == 46) { }
    //        else {
    //            if (ele.value.length == 6) {
    //                ele.value = ele.value + '.';
    //            }
    //        }

    //    });

    //}
    function decimalpnt(ele, id, range) {
        let input = $('#' + id);

        ele.value = ele.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');
        let t = ele.value;
        ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t;

        $(document).on('keydown', '#' + id, function (event) {

            if (ele.value.includes('.')) {

            }
            var key = event.keyCode || event.charCode;
            if (key == 8 || key == 46) { }
            else {
                if (ele.value.indexOf('.') < 0 && ele.value.indexOf('.') !== 9 && ele.value.length > 8) {
                    ele.value = ele.value + '.';
                }
            }

        });

    }

    function clearproducts(ele, tablekey) {


        let $thisform = $(ele).closest('[perfect-class="form"]');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="select"]').val('').selectpicker('refresh');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="date"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="hidden"]').val('');
        let $tblcontainer = $thisform.find('[perfect-tempTable="' + tablekey + '"]');
        $tblcontainer.attr('perfect-tempTable-action', 0);

        if (tablekey = "Opening") {

        }

    }





    function fn_productpopupcondition(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let stockmode = $thisForm.find('[name=StockMode]').val();

        GetCmnPopUpSearchVal(ele, 40, 'Product Details', [], '@ViewBag.TransMode')

    }



    function ResetButton(ele) {
        fn_MaterialRequestIndex_initialLoad();
    }

    function clearproductqty(ele) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');

        $thisForm.find('[name=ProductID]').val(0);
        $thisForm.find('[name=Product]').val('');
        $thisForm.find('[name=Amount]').val('');
        $thisForm.find('[name=SalePrice]').val('');
        $thisForm.find('[name=Quantity]').val('');
        $thisForm.find('[name=StockId]').val('');

    }





     function fillgrid(tablk, wartableOptionsTempOut, $thisForm, data) {
        let tableOptionsTemp = wartableOptionsTempOut;
        let insertData = [];
        let tableKey = tablk;
        let indexname = tableKey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');
        $.each(data, function (keyOne, valOne) {
            let pData = {};
            pData[indexname] = keyOne + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', pData[indexname])
            //---

            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                //console.log('name', valOne[nameAttr])
                if (typeof valOne[nameAttr] !== undefined) {

                    if ($this.is('select')) {
                        //tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                        tableOptionsTemp.hideColumn.push(nameAttr);
                        //displat text of select
                        pData[nameAttr + '_d'] = $this.find('[value="' + valOne[nameAttr] + '"]').text();
                        pData[nameAttr] = valOne[nameAttr];
                        console.log('select', $this.find('options[value="' + valOne[nameAttr] + '"]').text());

                    }
                    else if ($this.is('input')) {

                        pData[nameAttr] = valOne[nameAttr];

                    }

                }

            });

            insertData.push(pData);
            console.log('pData', pData)
            console.log('insertData', insertData)
            //----

        });
        $tblcontainer.empty();
        $tblcontainer.append(pft_table_createtable(insertData, tableOptionsTemp));

    }

    var tableOptionsTempOut = {
        iconButton: {
            buttons: [

                {

                    icon: "fa fa-pencil btnPerfectGridEdit",

                    action: function () {

                        let savedData = $(this).closest('tr').data('pData')
                        console.log('', savedData);


                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let tableKey = $tablecontainer.attr('perfect-tempTable');
                        let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                        //index attribute name in table row
                        let indexname = tableKey + 'index';
                        //index number in table row
                        let rindex = $(this).closest('tr').attr(indexname);
                        $tablecontainer.attr('perfect-tempTable-action', rindex);

                        console.log('Editclick', savedData);
                        //filling data in available inputs
                        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                            let $thisNode = $(this);
                            let pf_name = $thisNode.attr('name');
                            if ($thisNode.is('select')) {

                                $thisNode.val(savedData[pf_name]).selectpicker('refresh');
                            }
                            else if ($thisNode.is('input')) {

                                if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                    $thisNode.prop('checked', savedData[pf_name]);
                                }
                                else {
                                    $thisNode.val(savedData[pf_name]);
                                }

                            }
                            else {
                                $thisNode.val(savedData[pf_name]);
                            }


                        });



                    }
                },

                {

                    icon: "fa fa-trash btnPerfectGridDelete",
                    action: function () {
                        let $thistbl = $(this).closest('table');
                        let table = $thistbl.DataTable();
                        table.destroy();
                        if ($(this).closest('tbody').find('tr').length > 1) {
                            $(this).closest('tr').remove();
                            pft_table_slreset($thistbl);

                        }
                        else {

                            $thistbl.remove();
                        }

                    }
                },
            ]
        },

        onlyShowColumn: [],
        hideColumn: ['ID_Product','Mode'],
        serialNo: true,
        renameHeader: { },
        rowAttribute: [],
        isCheckType: []
    };

    var tableOptionsTempOut2 = {
        iconButton: {
            buttons: [

                {

                    icon: "fa fa-pencil btnPerfectGridEdit",

                    action: function () {

                        let savedData = $(this).closest('tr').data('pData')
                        console.log('', savedData);


                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let tableKey = $tablecontainer.attr('perfect-tempTable');
                        let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                        //index attribute name in table row
                        let indexname = tableKey + 'index';
                        //index number in table row
                        let rindex = $(this).closest('tr').attr(indexname);
                        $tablecontainer.attr('perfect-tempTable-action', rindex);

                        console.log('Editclick', savedData);
                        //filling data in available inputs
                        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                            let $thisNode = $(this);
                            let pf_name = $thisNode.attr('name');
                            if ($thisNode.is('select')) {

                                $thisNode.val(savedData[pf_name]).selectpicker('refresh');
                            }
                            else if ($thisNode.is('input')) {

                                if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                    $thisNode.prop('checked', savedData[pf_name]);
                                }
                                else {
                                    $thisNode.val(savedData[pf_name]);
                                }

                            }
                            else {
                                $thisNode.val(savedData[pf_name]);
                            }


                        });



                    }
                },

                {

                    icon: "fa fa-trash btnPerfectGridDelete",
                    action: function () {
                        let $thistbl = $(this).closest('table');
                        let table = $thistbl.DataTable();
                        table.destroy();
                        if ($(this).closest('tbody').find('tr').length > 1) {
                            $(this).closest('tr').remove();
                            pft_table_slreset($thistbl);

                        }
                        else {

                            $thistbl.remove();
                        }

                    }
                },
            ]
        },

        onlyShowColumn: [],
        hideColumn: ['ID_Product', "Mode_d"],
        serialNo: true,
        renameHeader: {  },
        rowAttribute: [],
        isCheckType: []
    };

    function ComDetailsTable_Fill(ele, tkey, data, tableOptionsTempOut) {

        let $thisForm = $(ele)

        let tableOptionsTemp = tableOptionsTempOut;
        let insertData = []
        let tableKey = tkey;

        let indexname = tkey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);

        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');


        $.each(data, function (keyOne, valOne) {

            let pData = {};

            pData[indexname] = keyOne + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', pData[indexname])
            //---

            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');


                if (typeof valOne[nameAttr] !== undefined) {

                    if ($this.is('select')) {


                        tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                        tableOptionsTemp.hideColumn.push(nameAttr);
                        //displat text of select

                        let selectText = ($this.val().length == 0) ? '' : $this.find('[value="' + valOne[nameAttr] + '"]').text();

                        pData[nameAttr + '_d'] = $this.find('[value="' + valOne[nameAttr] + '"]').text();
                        pData[nameAttr] = valOne[nameAttr];

                        console.log('select', $this.find('options[value="' + valOne[nameAttr] + '"]').text());
                        console.log('selectText', $this.find('[value="' + valOne[nameAttr] + '"]').text());



                    }
                    else if ($this.is('input')) {

                        let inputType = $this.attr('type').toLocaleLowerCase();

                        if (inputType == 'checkbox') {

                            pData[nameAttr] = valOne[nameAttr];

                            tableOptionsTemp.isCheckType.push(nameAttr);

                            console.log('checkbox', nameAttr)


                        }
                        else if (inputType == 'hidden') {

                            tableOptionsTemp.hideColumn.push(nameAttr);
                            pData[nameAttr] = valOne[nameAttr];


                        }
                        else if (inputType == 'date') {


                            pData[nameAttr] = moment(valOne[nameAttr]).format('DD-MM-YYYY');


                        }
                        else {

                            pData[nameAttr] = valOne[nameAttr];


                        }
                    }
                    else {
                        pData[nameAttr] = valOne[nameAttr];


                    }
                }



            });

            insertData.push(pData);
            console.log('insertdata', insertData)

            //----

        });

        $tblcontainer.append(pft_table_createtable(insertData, tableOptionsTemp));


    }
    function ComDetailsTable_Fill(ele, tkey, data, tableOptionsTempOut2) {

        let $thisForm = $(ele)

        let tableOptionsTemp = tableOptionsTempOut2;
        let insertData = []
        let tableKey = tkey;

        let indexname = tkey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);

        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');


        $.each(data, function (keyOne, valOne) {

            let pData = {};

            pData[indexname] = keyOne + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', pData[indexname])
            //---

            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');


                if (typeof valOne[nameAttr] !== undefined) {

                    if ($this.is('select')) {


                        tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                        tableOptionsTemp.hideColumn.push(nameAttr);
                        //displat text of select

                        let selectText = ($this.val().length == 0) ? '' : $this.find('[value="' + valOne[nameAttr] + '"]').text();

                       // pData[nameAttr + '_d'] = selectText;
                        pData[nameAttr + '_d'] = $this.find('[value="' + valOne[nameAttr] + '"]').text();
                        pData[nameAttr] = valOne[nameAttr];


                        console.log('select1', $this.find('options[value="' + valOne[nameAttr] + '"]').text());
                        console.log('selectText2', $this.find('[value="' + valOne[nameAttr] + '"]').text());



                    }
                    else if ($this.is('input')) {

                        let inputType = $this.attr('type').toLocaleLowerCase();

                        if (inputType == 'checkbox') {

                            pData[nameAttr] = valOne[nameAttr];

                            tableOptionsTemp.isCheckType.push(nameAttr);

                            console.log('checkbox', nameAttr)


                        }
                        else if (inputType == 'hidden') {

                            tableOptionsTemp.hideColumn.push(nameAttr);
                            pData[nameAttr] = valOne[nameAttr];


                        }
                        else if (inputType == 'date') {


                            pData[nameAttr] = moment(valOne[nameAttr]).format('DD-MM-YYYY');


                        }
                        else {

                            pData[nameAttr] = valOne[nameAttr];


                        }
                    }
                    else {
                        pData[nameAttr] = valOne[nameAttr];


                    }
                }



            });

            insertData.push(pData);
            console.log('insertdata', insertData)

            //----

        });

        $tblcontainer.append(pft_table_createtable(insertData, tableOptionsTemp));


    }

    function checkQuantity($thisForm) {
            debugger;

    }





    function MaterialDetailsTable_create(ele, tkey, uniq) {

        debugger
        let Quantitys = $('[name=Quantity]').val() == null || $('[name=Quantity]').val() == "" || $('[name=Quantity]').val() == undefined ? 0 : $('[name=Quantity]').val();

        $('[name=Quantity]').val(Quantitys);

        //let QuantityStandBys = $('[name=QuantityStandBy]').val() == null || $('[name=QuantityStandBy]').val() == "" || $('[name=QuantityStandBy]').val() == undefined ? 0 : $('[name=QuantityStandBy]').val();
        //$('[name=QuantityStandBy]').val(QuantityStandBys);

        console.log('Data', tkey);
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let tableKey = tkey;
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');

        let insertData = {};
        let tableOptionsTemp= tableOptionsTempOut2;


        let unique = (uniq) ? uniq : [];

        let isValid = true;
        let ValueExist = false;
        // let QuantityCheck = false;
        let errorClass = '.temptableError';

        //make index
        console.log('check 1');

        let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
        let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
        let indexname = tkey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);
        let updateCond = '';
        let isNew = true;
        if (thisactionIndex > 0) {
            //means update
            insertData[indexname] = thisactionIndex;
            updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
            isNew = false;
        }
        else {
            //insert
            insertData[indexname] = lastIndex + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
            isNew = true;
        }





        if ($thisForm.find("[name='Quantity']").val() > 0 ) {
            ValueExist = true;
        }

        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Mode"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="Mode"]').val() == null) {

            isValid = false;
            console.log('false');
            $thisForm.find('[perfect-tempTable-' + tableKey + '="Mode"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Mode');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="Mode"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }

        if ($thisForm.find("[name='ProductID']").val() > 0) {



        }
        else if ($thisForm.find("[name='ProductID']").val() == "" || $thisForm.find("[name='ProductID']").val() <= 0 || $thisForm.find("[name='ProductID']").val() == undefined) {
            isValid = false;
            $thisForm.find("[name='ProductID']").closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Product');
        }

        //if (StockTransferTransMode == 'INST') {

        //    if ($thisForm.find("[name='StockMode']").val() > 0) {
        //    }
        //    else if ($thisForm.find("[name='StockMode']").val() == "" || $thisForm.find("[name='StockMode']").val() <= 0 || $thisForm.find("[name='StockMode']").val() == undefined) {
        //        isValid = false;
        //        $thisForm.find("[name='StockMode']").closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Stock Mode');
        //    }
        //}


        if (ValueExist == false) {

            NotificationMessage({ 'type': 'error', 'heading': 'info', 'message': 'Please Enter Quantity ' });
        }
        else {

        }




        if (isValid == true && ValueExist == true) {  
            console.log('check 3');
            var inputCheckData = {
                __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                FK_Product: $thisForm.find("[name='ProductID']").val(),
                FK_Project: $thisForm.find("[name='ProjectID']").val(),
                FK_Stage: $thisForm.find("[name='StageID']").val(),
                FK_Team: $thisForm.find("[name='TeamID']").val(),
                Quantity: $thisForm.find("[name='Quantity']").val()


            };


            var _cntnueAdd = false;
            $.ajax({
                url: "@Url.Action("CheckAdditionalQuantity", "Material")",
                type: "POST",
                data: inputCheckData,
                dataType: "json",
                contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                success: function (Warnmsg) {
                    //console.log(Warnmsg + "Warnmsgggggggggggggggggggggggggggggggg");
                    //debugger;

                    if (Warnmsg.trim() != "") {


                        let confirmationDialogBoxOption = { heading: "Are you Sure?", body: Warnmsg, confirm: "Yes", cancel: "No" };
                        var confirmBoxObj = ConfirmDialog(confirmationDialogBoxOption);
                        confirmBoxObj.then(function (selectedOption) {

                            if (selectedOption) {
                                AddMaterials($tblcontainer, $thisForm, unique, tableKey, errorClass, isValid, ValueExist, tableOptionsTemp, insertData, isNew, indexname, thisactionIndex, updateCond);
                            }
                            else {
                                //NotificationMessage({ 'message': 'No option selected' });
                            }

                        });
                    } else {

                        AddMaterials($tblcontainer, $thisForm, unique, tableKey, errorClass, isValid, ValueExist, tableOptionsTemp, insertData, isNew, indexname, thisactionIndex, updateCond);
                    }
                }
                //---

            });
        }
        $('[name="Mode"]').val('P');
    }
    function AddMaterials($tblcontainer, $thisForm, unique, tableKey, errorClass, isValid, ValueExist, tableOptionsTemp, insertData, isNew, indexname, thisactionIndex, updateCond ) {
   
        if (unique.length > 0) {
            //getting previous data
            let prevData = [];
            $tblcontainer.find('table > tbody').find('tr').each(function () {
                if (isNew) {
                    prevData.push($(this).data('pData'));
                }
                else {
                    if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                        prevData.push($(this).data('pData'));
                    }

                }

            })

            console.log('previous data', prevData);

            unique.forEach(function (key, i) {

                console.log('unid -> key:' + key + "| index :" + i);
                let $thisEle = $thisForm.find('[perfect-tempTable-' + tableKey + '="' + key + '"]');

                let headerEleName = $thisEle.attr('perfect-tempTable-' + tableKey);
                let atname = $thisEle.attr('name');
                let cvalue;


                if ($thisEle.length != 0) {
                    let $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
                    let errmessage = "Product Already Exists"
                    //getting current value in cval


                    if ($thisEle.is('select')) {
                        cvalue = $thisEle.val();
                    }





                    else if ($thisEle.is('input')) {

                        let inputEleType = $thisEle.attr('type').toLocaleLowerCase();

                        if (inputEleType == 'checkbox') { cvalue = $thisEle.is(':checked'); }
                        else if (inputEleType == 'hidden') { cvalue = $thisEle.val(); }
                        else { cvalue = $thisEle.val(); }
                    }
                    else { cvalue = $thisEle.val(); }


                    if (prevData.find(a => a[atname] == cvalue)) {
                        // console.log('Search =>' + cvalue + '| attr :' + atname)
                        $errorElement.text(errmessage);
                        isValid = false;
                    }
                }

            });




            // console.log('check 4', ValueExist, isValid);

            if (isValid == true && ValueExist == true) {

                $thisForm.find("[name='ProductID']").closest('[perfect-class="formGroup"]').find(errorClass).text('');


                console.log('check 4.1');
                // this section make table column data
                $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                    let $this = $(this);
                    let headerName = $this.attr('perfect-tempTable-' + tableKey);
                    let nameAttr = $this.attr('name');

                    //if ($this.is('select')) {

                    //    tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                    //    tableOptionsTemp.hideColumn.push(nameAttr)

                    //    if ($this.val() != null) {
                    //        let selectText = ($this.val().length == 0) ? '' : $this.children(":selected").text();
                    //        insertData[nameAttr + '_d'] = selectText;
                    //    }
                    //    else {
                    //        let selectText = ($this.val() == null) ? '' : $this.children(":selected").text();
                    //        insertData[nameAttr + '_d'] = selectText;
                    //    }

                    //    insertData[nameAttr] = $this.val();



                    //    $this.val('').selectpicker('refresh');
                    //}

                    if ($this.is('select')) {

                        tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                        tableOptionsTemp.hideColumn.push(nameAttr)
                        //displat text of select
                        let selectText = ($this.val().length == 0) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;

                        // insertData[nameAttr + '_d'] = $this.children(":selected").text();
                        insertData[nameAttr] = $this.val();


                        //clear field
                        $this.val('').selectpicker('refresh');
                    }
                    else if ($this.is('input')) {

                        let inputType = $this.attr('type').toLocaleLowerCase();

                        if (inputType == 'checkbox') {

                            insertData[nameAttr] = $this.is(':checked');

                            tableOptionsTemp.isCheckType.push(nameAttr)

                            $this.prop('checked', false);

                        }
                        else if (inputType == 'hidden') {

                            tableOptionsTemp.hideColumn.push(nameAttr)
                            insertData[nameAttr] = $this.val();


                            $this.val('');
                        }
                        else if (inputType == 'date') {


                            insertData[nameAttr] = $this.val();


                            $this.val('');
                        }

                        else {
                            insertData[nameAttr] = $this.val();


                            $this.val('');
                        }
                    }

                    else {

                        insertData[nameAttr] = $this.val();


                        $this.val('');

                    }




                });
                console.log('check 4.2');
                if (isNew) {
                    console.log('check 4.2.1');

                    if ($tblcontainer.find('table').length == 0) {
                        console.log('check 4.2.3');
                        $tblcontainer.append(pft_table_createtable([insertData], tableOptionsTemp));

                    }
                    else {
                        console.log('check 4.2.1');
                        let table = $tblcontainer.find('table').DataTable()
                        table.destroy()
                        pft_table_addTableRow($tblcontainer.find('table'), insertData, tableOptionsTemp);


                    }



                    //if (insertData[indexname] > 0) {


                    //    console.log('1234', insertData[indexname])
                    //    $thisForm.find('[name="DepartmentID"]').attr("disabled", "disabled");
                    //    $('#employeefromid').attr("disabled", true);

                    //}
                    //else {
                    //    $('#employeefromid').attr("disabled", false);
                    //}


                    //console.log('check 4.2.1');
                }
                else {
                    console.log('check 4.3');
                    let table = $tblcontainer.find('table').DataTable()
                    table.destroy()
                    console.log('check 4.4');
                    console.log('table', $tblcontainer.find('table'))
                    console.log('check 4.5');
                    pft_table_replaceTableRow($tblcontainer.find('table'), updateCond, insertData, tableOptionsTemp);



                }

                console.log(insertData);
                // reetting the edit value
                $tblcontainer.attr('perfect-tempTable-action', 0);
            }

            console.log('check 5');
        }
        $('[name="Mode"]').val('P');
    }
    function AddMaterialrequest(ele, actiontype) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');

        let prevData = [];
        $thisForm.find('[perfect-tempTable="Opening"]').find('table > tbody').find('tr').each(function () {

            prevData.push($(this).data('pData'));

        })


        debugger



        if ($thisForm.valid() && prevData.length != 0) {
            if (checkdatewithLDdate(ele)) {
                
                $(ele).prop('disabled', true);

                console.log("prevData >", prevData)
                var inputData = {
                    __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                    'ID_ProjectMaterialRequest': isNaN(parseInt($thisForm.find('[name=ID_ProjectMaterialRequest]').val())) ? 0 : parseInt($thisForm.find('[name=ID_ProjectMaterialRequest]').val()),
                    'ProMatRequestDate': $thisForm.find('[name=ProMatRequestDate]').val().trim(),
                    'Project': $thisForm.find('[name=Project]').val().trim(),
                    'TransMode': MaterialRequestTransMode,
                    'FK_Project': $thisForm.find('[name=ProjectID]').val(),
                    'FK_Team': $thisForm.find('[name=TeamID]').val(),
                    'FK_Stages': $thisForm.find('[name=StageID]').val(),
                    'FK_Employee': $thisForm.find('[name=EmployeeID]').val(),
                    'MaterialRequestDetailsView': prevData,
                    LastID: LastID_MaterialRequest
                };

                clearSessionValue(LastIDSessionKey);
                let _ActionUrl = "";
                if (actiontype == "add") { _ActionUrl = "@Url.Action("AddMaterialRequest", "Material")"; } else { _ActionUrl = "@Url.Action("UpdateMaterialRequest", "Material")"; }

                $.ajax({
                    url: (actiontype == "add") ? "@Url.Action("AddMaterialRequest", "Material")" : "@Url.Action("UpdateMaterialRequest", "Material")",
                    type: "POST",
                    data: inputData,
                    dataType: "json",
                    contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                    success: function (data) {

                        if (data.Process.IsProcess) {

                            $.each(data.Process.Message, function (key, value) {
                                NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                            });
                            $thisForm.find('[perfect-ctype="select"]').val('').selectpicker('refresh');
                            $thisForm.find('[perfect-ctype="input"]').val('');
                            $thisForm.find('[perfect-ctype="date"]').val('');
                            $thisForm.find('[perfect-ctype="hidden"]').val('');



                            let onSuccess = $thisForm.attr('perfect-onFormSuccess')

                            if (onSuccess) {
                                fn_MaterialRequestIndex_initialLoad();

                            }

                            //---------- Do stuff if success
                            // loadUnitList();
                            // console.log('> Add new post success data', data);
                        }
                        else {
                            $.each(data.Process.Message, function (key, value) {
                                //toastr.warning(value, "Error");
                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                            });
                        }
                    },
                    complete: function () {
                        $(ele).prop('disabled', false);
                    }

                });
            }

        else {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Requested Date should greater than  or equal to Project Date' });
        }



        }

        else {

            NotificationMessage({ 'type': 'error', 'heading': 'info', 'message': 'Please Fill all mandatory fields' });
        }
    }


    function getproductdetails(ele) {

        debugger;

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        //if ($thisForm.find('[name="ModeID"]').val() == 2) {
        //    GetCmnPopUpSearchValAssign(ele, 32, 'Product Details', [], ['MRPs', 'SalePrice', 'StockId'])
        //}
        //else {
        let Mode = 'P'/*$thisForm.find('[name="Mode"] option:selected').val()*/;
        console.log('Mode', Mode)
            debugger
            if (Mode == 'P') {
                GetCmnPopUpSearchValAssign(ele, 179, 'Product Details', [], ['MRPs', 'SalePrice', 'StockId'], MaterialRequestTransMode)
            }
            else if (Mode == 'T') {
                GetCmnPopUpSearchValAssign(ele, 120, 'Tools Details', [], ['MRPs', 'SalePrice', 'StockId', 'VehicleNo', 'FK_Master'])
            }
            else if (Mode == 'V') {
                GetCmnPopUpSearchValAssign(ele, 95, 'Vehicle Details', [], ['MRPs', 'SalePrice', 'StockId', 'FK_Master','VehicleNo'], MaterialRequestTransMode)
            }
            //else if (Mode == 'A') {
            //    GetCmnPopUpSearchValAssign(ele, 32, 'Product Details', [], ['MRPs', 'SalePrice', 'StockId'])
            //}
            else {
                NotificationMessage({ 'type': 'info', 'heading': 'info', 'message': 'No Data Found' });
            }




    }



   function fn_GetEmployee(ele) {


        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let $placeDropdown = $thisForm.find('[name=EmployeeID]');//<--- Will give place select html element
        $placeDropdown.empty();
        $placeDropdown.append($('<option/>', { value: '' }).text('Please select')).selectpicker('refresh');

        let StageID = $(ele).val();
        let ProjectID = $thisForm.find('[name=ProjectID]').val()
         $.ajax({
                 url: "@Url.Action("GetEmployees", "Material")",
                type: "POST",

             data: JSON.stringify({ FK_Stage: StageID, FK_Project: ProjectID}),
                dataType: "json",
                contentType: "application/json",
             success: function (ajaxOutput) {



                 if (ajaxOutput.Process.IsProcess) {

                             $.each(ajaxOutput.Data, function (key, value) {
                                 $placeDropdown.append($('<option/>', { "value": value.EmployeeID }).text(value.EmployeeName)).selectpicker('refresh')
                                 });


                     }
                     else {
                     $.each(ajaxOutput.Process.Message, function (key, value) {
                             //toastr.warning(value, "Error");
                             //NotificationMessage({ 'type': 'info', 'heading': 'info', 'message': value });
                         });
                     }
                     }

                 });


    }
    @*function SetControl(ele, tt) {
        debugger
            console.log(tt);
         let ProjectID = tt.ProjectID;

            let $thisForm = $(ele).closest('[perfect-class="form"]');
            let $placeDropdown = $thisForm.find('[name=TeamID]');//<--- Will give place select html element
            $placeDropdown.empty();
            $placeDropdown.append($('<option/>', { value: '' }).text('Please select')).selectpicker('refresh');
            //let inputData = {
            //    __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
            //    LeadGenerateID: $thisForm.find('[name=Lead]').val().trim()
            //};
            $.ajax({
                url: "@Url.Action("GetProjectTeam", "Material")",
                type: "POST",

                data: JSON.stringify({ FK_Project: ProjectID }),
                dataType: "json",
                contentType: "application/json",
                success: function (ajaxOutput) {



                    if (ajaxOutput.Process.IsProcess) {

                        $.each(ajaxOutput.Data, function (key, value) {
                            $placeDropdown.append($('<option/>', { "value": value.TeamID }).text(value.TeamName)).selectpicker('refresh')
                        });


                    }
                    else {
                        $.each(ajaxOutput.Process.Message, function (key, value) {
                            //toastr.warning(value, "Error");
                            //NotificationMessage({ 'type': 'info', 'heading': 'info', 'message': value });
                        });
                    }
                }

            });


        }*@
   function GetTeam(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
       let ProjectID = $thisForm.find('[name=ProjectID]').val();
             let StageID = $thisForm.find('[name=StageID]').val();
             ClearEmployee(ele);

            //let inputData = {
            //    __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
            //    LeadGenerateID: $thisForm.find('[name=Lead]').val().trim()
            //};
            $.ajax({
                url: "@Url.Action("GetProjectTeam", "Material")",
                type: "POST",

                data: JSON.stringify({ FK_Project: ProjectID, FK_Stage: StageID  }),
                dataType: "json",
                contentType: "application/json",
                success: function (ajaxOutput) {

                    let $placeDropdown = $thisForm.find('[name=TeamID]');//<--- Will give place select html element
                    $placeDropdown.empty().selectpicker('refresh');
                    $placeDropdown.append($('<option/>', { value: '' }).text('Please select')).selectpicker('refresh');

                    if (ajaxOutput.Process.IsProcess) {

                        $.each(ajaxOutput.Data, function (key, value) {
                            $placeDropdown.append($('<option/>', { "value": value.ID_ProjectTeam }).text(value.TeamName)).selectpicker('refresh')

                        });
                        if ($placeDropdown.attr('perfect-onloadSelect')) {
                            $placeDropdown.val($placeDropdown.attr('perfect-onloadSelect')).selectpicker('refresh')
                        }

                    }
                    else {
                        $.each(ajaxOutput.Process.Message, function (key, value) {

                        });
                    }
                }



            });


     }


 function fn_TeamDetails_Project(ele) {


        let $thisForm = $(ele).closest('[perfect-class="form"]');//<------Form element :  Our Form which contain our input elements ,saved in a variable for reusability
        let $formFolowDivContainer = $(this).closest('[perfect-class="form"]').closest('.jq_leadgeneration_body').find('.jq_leadgeneration_followup_status');
            let inputData = {
                __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                ProjectID: $thisForm.find('[name=ProjectID]').val().trim(),
                TransMode:'PRMR'
        };
        console.log(inputData);
        if ($thisForm.find('[name=ProjectID]').val().trim() != '' || $thisForm.find('[name=ProjectID]').val().trim() != 0) {
            $.ajax({
                url: "@Url.Action("GetExistingTeamInfo", "TeamCreation")",
                type: "POST",
                // headers: { "token_key": "1234" },
                data: inputData,
                dataType: "json",
                contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                success: function (ajaxOutput) {

                    console.log('sss', ajaxOutput)
                    if (ajaxOutput.TeamDetails.Data != null) {
                        let strHtml = ""; let $ProductHtml = "";
                        for (var t = 0; t < ajaxOutput.distTeams.length; t++) {
                            let rowCount = 0;
                            strHtml += "<div class='tab-pane'>";
                            strHtml += "<div class='row' style='margin - top: 1.5rem;>";
                            strHtml += "<div class='col-sm-6'>";
                            strHtml += "<label style='width:3%'></label>";
                            strHtml += "<label style='width:25%'><strong style='width:100%'>Team: </strong><span class='mb-0' style='width:100%'>" + ajaxOutput.distTeams[t][0]['Name'] + "</span></label>";
                            strHtml += "<label style='width:25%'><strong style='width:100%'>Short Name: </strong><span class='mb-0' style='width:100%'>" + ajaxOutput.distTeams[t][0]['ShortName'] + "</span></label>";
                            strHtml += "<label style='width:25%'><strong style='width:100%'>Created Date: </strong><span class='mb-0' style='width:100%'>" + moment(ajaxOutput.distTeams[t][0]['CreateDate']).format('DD-MM-YYYY') + "</span></label>";
                            //strHtml += "<li class='list-group-item d-flex px-0 justify-content-between'><strong>g </strong><span class='mb-0'></span></li>";
                            //strHtml += "<li class='list-group-item d-flex px-0 justify-content-between'><strong>Collected By</strong><span class='mb-0'>" + ajaxOutput.prInfo.Data[0]['CollectedByName'] + "</span></li>";
                            strHtml += "</div></div></div>";

                            strHtml += '<div class="card-body"><div class="table-responsive"><table class="table table-striped"  id="EmployeeTable"><thead class="thead-primary"><tr><th>Sl No.</th><th>Department</th><th>Employee</th><th>Employee Type</th></tr>'
                            strHtml += '</thead ><tbody id="EmployeeDt">  ';

                            if (ajaxOutput != null) {
                                $('#EmployeeDt').empty();
                                $ProductHtml = "";
                                var ProductData = ajaxOutput.TeamDetails.Data;
                                if (ProductData) {
                                    $.each(ProductData, function (i, value) {
                                        if (value.TeamID == ajaxOutput.distTeams[t][0]["TeamID"]) {
                                            rowCount = (rowCount + 1);
                                            $ProductHtml += "<tr id = " + rowCount + " > ";
                                            $ProductHtml += "<td style='width:20%;'>" + rowCount + "</td>";
                                            $ProductHtml += "<td style='width:20%;'>" + value.DepartmentName + "</td>";
                                            $ProductHtml += "<td>" + value.Employee + "</td>";
                                            $ProductHtml += "<td>" + value.EmployeeTypeName + "</td>";

                                            $ProductHtml += "</tr> ";
                                        }
                                    });
                                }
                                else {
                                    $ProductHtml += "<tr id='0'><td colspan='4' style'text-align:center'>No Records..</td></tr>";
                                }

                                //$thisForm.find('#EmployeeDt').append($ProductHtml);
                                strHtml += $ProductHtml + '</tbody ></table > </div></div>';
                            }
                            //else {
                            //    $ProductHtml += "<tr id='0'><td colspan='8' style'text-align:center'>No Records..</td></tr>";
                            //    $thisForm.find('#EmployeeDt').append($ProductHtml);
                            //    $.each(ajaxOutput.Process.Message, function (key, value) {
                            //        NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                            //    });
                            //}
                        }
                        $thisForm.find('[name=TeamDetails]').html(strHtml);

                        initFunctions($thisForm);
                    }
                    else {
                        $('#EmployeeDt').empty();
                        strHtml = "<label class='col - xl - 10' style='text-align:center'>No Team Found For The Selected Project</label> ";
                        $thisForm.find('[name=TeamDetails]').html(strHtml);
                    }

                }
            });
        }

    }


    function ClearEmployee(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');

        $thisForm.find('[name=EmployeeID]').val(0);
        $thisForm.find('[name=Employee]').val('');
    }

    //function getfunction(ele, tablekey) {

    //    debugger
    //   // $thisForm = (ele).find
    //    let $thisForm = $(ele).closest('[perfect-class="form"]');

    //    $thisForm.find('[name="StageID"]').val("").selectpicker('refresh');
    //    $thisForm.find('[name="TeamID"]').val("").selectpicker('refresh');
    //    //$thisForm.find('[name="StageID"]').val('0').selectpicker('refresh');
    //    $thisForm.find('[name=EmployeeID]').val(0);
    //    $thisForm.find('[name=Employee]').val('');
    //    $thisForm.find('[name=ProductID]').val(0);
    //    $thisForm.find('[name=Product]').val('');
    //    $thisForm.find('[name=Quantity]').val('');
    //    $thisForm.find('[name=ProMatRequestDate]').val('');

    //    let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tablekey + '"]');
    //    $tblcontainer.attr('perfect-tempTable-action', 0);

    //    if (tablekey = "Opening") {

    //    }

    //}
       function SetControl(ele, tt) {
        debugger
            console.log(tt);
            //cleartable(ele);
            productSerialNum = [];
            productSerialNumTemp = [];

            let ProjectID = tt.ID_FIELD;
            let $thisForm = $(ele).closest('[perfect-class="form"]');
            let $placeDropdown = $thisForm.find('[name=StageID]');
            let $teamDropdown = $thisForm.find('[name=TeamID]');
        
        //<--- Will give place select html element
        $placeDropdown.empty();
        $teamDropdown.empty();
        $placeDropdown.append($('<option/>', { value: '' }).text('Please select')).selectpicker('refresh');
        $teamDropdown.append($('<option/>', { value: '' }).text('Please select')).selectpicker('refresh');
            //$thisForm.find('[name=TeamID]').val('').selectpicker('refresh');
            //let inputData = {
            //    __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
            //    LeadGenerateID: $thisForm.find('[name=Lead]').val().trim()
            //};
            $.ajax({
                url: "@Url.Action("GetProjectStages", "Material")",
                type: "POST",

                data: JSON.stringify({ FK_Project: ProjectID }),
                dataType: "json",
                contentType: "application/json",
                success: function (ajaxOutput) {



                    if (ajaxOutput.Process.IsProcess) {

                        $.each(ajaxOutput.Data, function (key, value) {
                            $placeDropdown.append($('<option/>', { "value": value.ProjectStagesID }).text(value.StageName)).selectpicker('refresh')
                        });


                    }
                    else {
                        $.each(ajaxOutput.Process.Message, function (key, value) {
                            //toastr.warning(value, "Error");
                            //NotificationMessage({ 'type': 'info', 'heading': 'info', 'message': value });
                        });
                    }
                }

            });


    }
    function checkdatewithLDdate(ele) {
        debugger;
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        console.log('Projectdate', $thisForm.find('[name=ProjectDate]').val());
        let ProjectDate = $thisForm.find('[name=ProjectDate]').val();
        let CreateDate = $thisForm.find('[name=ProMatRequestDate]').val();
        if (CreateDate < ProjectDate) {
            $thisForm.find('[name="ProMatRequestDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('Requested Date sholud be greater than or equal to Project Date');
            return false;
        }
        else {
            $thisForm.find('[name="ProMatRequestDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('')
            return true;
        }



    }

    function getfunctionAssign() {

    }
</script>








