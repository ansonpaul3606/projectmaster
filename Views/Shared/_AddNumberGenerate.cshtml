@model PerfectWebERP.Models.NumberGenerateModel.NumberGenerateNew

<div class="card ">

    <div class="card-header">
        <h4 class="card-title col-12">Number Generation</h4>
        <span title="To View List" onclick="fn_showListView();"><svg id="Layer_1" class="layer" stroke="currentColor" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" height="20" width="20" viewBox="0 0 122.88 122.54"><title>To View List</title><path class="viewlst" d="M4.69,0H46.22a4.71,4.71,0,0,1,4.69,4.69V46a4.69,4.69,0,0,1-4.69,4.69H4.69a4.65,4.65,0,0,1-3.31-1.38l-.09-.09A4.67,4.67,0,0,1,0,46V4.69A4.71,4.71,0,0,1,4.69,0ZM89.44,61.94a26.56,26.56,0,0,1,10.18,2l.07,0a26.61,26.61,0,0,1,15.25,32.16,26.18,26.18,0,0,1-2.7,6.11l10.3,11.24a1.27,1.27,0,0,1-.07,1.8l-7.57,6.9a1.27,1.27,0,0,1-1.79-.07l-9.86-10.85a26.36,26.36,0,0,1-6.1,2.74,26.87,26.87,0,0,1-7.71,1.13,26.51,26.51,0,0,1-10.17-2l-.07,0A26.64,26.64,0,0,1,64.85,78.37l0-.07A26.6,26.6,0,0,1,89.44,61.94Zm15,11.59a21.38,21.38,0,0,0-6.89-4.61l-.06,0a21.22,21.22,0,0,0-23.07,4.64l-.07.07a21.25,21.25,0,0,0-4.54,6.83l0,.06a21.32,21.32,0,0,0-1.58,8.06,21.26,21.26,0,0,0,29.35,19.62,21.54,21.54,0,0,0,6.89-4.61l.07-.07a21.09,21.09,0,0,0,4.54-6.83l0-.06a21.35,21.35,0,0,0,0-16.17,21.34,21.34,0,0,0-4.62-6.9ZM4.69,63.2H46.22a4.71,4.71,0,0,1,4.69,4.7v41.34a4.68,4.68,0,0,1-4.69,4.69H4.69A4.69,4.69,0,0,1,0,109.24V67.9a4.71,4.71,0,0,1,4.69-4.7ZM68.78,0h41.53A4.71,4.71,0,0,1,115,4.69V46a4.71,4.71,0,0,1-4.69,4.69H68.78A4.71,4.71,0,0,1,64.09,46V4.69a4.69,4.69,0,0,1,1.37-3.31l.1-.09A4.67,4.67,0,0,1,68.78,0Z"></path></svg></span>
    </div>
    <div class="card-body">
        <form id="" class="form-valide" perfect-class="form" action="#" method="post" perfect-onFormSuccess="">
            <div class="">
                @Html.AntiForgeryToken()
                <div class="row">
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Module</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-7">
                                <div class="input-group">
                                    <input type="hidden" name="ID_CommonSettings" value="0" />
                                    <select class="form-control perfectValidate_string" id="Module" name="FK_Module" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" onchange="fn_fillSubModule(this)">
                                        <option value="">Please Select </option>
                                        @if (!(Model.ModuleList is null))
                                        {
                                            foreach (var menuGroup in Model.ModuleList)
                                            {
                                                <option value="@menuGroup.ID_MenuGroup">@menuGroup.MnuGrpName</option>
                                            }
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Sub Module</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-7">
                                <select class="form-control perfectValidate_string" id="SubModule" name="SubModule" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select">
                                    <option value="">Please Select</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Generation Criteria</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-7">
                                <select class="form-control perfectValidate_string" name="GenerationCriteria" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select">
                                    <option value="">Please Select</option>
                                    @if (!(Model.GenerationCriteria is null))
                                    {
                                        foreach (var Module in Model.GenerationCriteria)
                                        {
                                            <option value="@Module.ID_Mode">@Module.ModeName</option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Reset Period</span>
                            </label>
                            <div class="col-sm-7">
                                <select class="form-control" name="ResetPeriod" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select">
                                    <option value="">Please Select</option>
                                    @if (!(Model.ResetPeriod is null))
                                    {
                                        foreach (var Module in Model.ResetPeriod)
                                        {
                                            <option value="@Module.ID_Mode">@Module.ModeName</option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Effect Date</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-7">
                                <input type="date" class="form-control perfectValidate_date" name="EffectDate" perfect-class="formGroupControl" perfect-ctype="date" max="2050-01-01" @*onchange="datecheck(this)"*@ perfect-css="date" />
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                       
                    </div>
                </div>

                <div class="row">
                    <div class="col-sm-12">
                        <div class="daccordion__header">
                            <span class="accordion__header--text">Details</span>
                        </div>
                        <div class="row">
                            <div class="col-sm-12 " perfect-class="TempTableNumberG">
                                <br />
                                <div class="row">
                                    <div class="col-sm-3">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-5 col-form-label">
                                                <span perfect-class="formGroupLabel" name="lblType">Type</span>
                                                <span class="text-danger">*</span>
                                            </label>
                                            <div class="col-sm-7">
                                                <select class="form-control" name="CSDetType" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" perfect-tempTable-NumberG="CSDetType" onchange="fn_getSelectionName(this)">
                                                    <option value="">Please select</option>
                                                    @if (!(Model.Type is null))
                                                    {
                                                        foreach (var Module in Model.Type)
                                                        {
                                                            <option value="@Module.ID_Mode">@Module.ModeName</option>
                                                        }
                                                    }

                                                </select>
                                                <div class="text-danger temptableError"></div>
                                            </div>

                                        </div>
                                    </div>

                                    <div class="col-sm-3">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-5 col-form-label">
                                                <span perfect-class="formGroupLabel">Preference</span>
                                                <span class="text-danger">*</span>
                                            </label>
                                            <div class="col-sm-6">
                                                <input type="number" class="form-control text-right" perfect-tempTable-NumberG="CSDetPreference" name="CSDetPreference" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="javascript: if (this.value.length > this.maxLength) this.value = this.value.slice(0, this.maxLength);" maxlength="10" onkeydown="if(event.key==='.' || event.key==='+' || event.key==='-' || event.key==='e'|| event.key==='E'){event.preventDefault();}if(this.value<0){this.value= this.value * -1}" />
                                                <div class="text-danger temptableError"></div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-sm-2">
                                        <div class="form-group row" perfect-class="formGroup">                                           
                                            <label class="col-sm-5 col-form-label">
                                                <span perfect-class="formGroupLabel">Length</span>
                                                <span name="textDangerLength" class="text-danger">*</span>
                                            </label>
                                            <div class="col-sm-7">
                                                <input type="number" class="form-control text-right" perfect-tempTable-NumberG="CSDetMinLength" name="CSDetMinLength" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="javascript: if (this.value.length > this.maxLength) this.value = this.value.slice(0, this.maxLength);" maxlength="10" onkeydown="if(event.key==='.' || event.key==='+' || event.key==='-' || event.key==='e'|| event.key==='E'){event.preventDefault();}if(this.value<0){this.value= this.value * -1}" onchange="fn_setLength(this);"/>
                                                <div class="text-danger temptableError"></div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-sm-4">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-3 col-form-label">
                                                <span perfect-class="formGroupLabel" name="lblValue">Value</span>
                                                <span name="textDangerValue" class="text-danger">*</span>
                                            </label>
                                            <div class="col-sm-5">
                                                <div class="input-group">
                                                    <input type="hidden" name="FK_CSDetValue" perfect-tempTable-NumberG="FK_CSDetValue" />
                                                    <input type="text" class="form-control" name="CSDetValue" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" perfect-tempTable-NumberG="CSDetValue" autocomplete="off" />
                                                    <div class="input-group-append">
                                                        <button id="addProduct-jq-searchButton3" class="btn btn-primary fa fa-search" name="SelectBtnbyType" type="button" perfect-css="button" onclick="fn_searchlistData(this)" style="display:none"></button>
                                                    </div>
                                                </div>
                                                <div class="text-danger temptableError"></div>
                                            </div>
                                            <button class="btn btn-primary1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" title="Add New Product" onclick="fn_createNumberGTable(this,'NumberG',['CSDetType'])"><i class="fa fa-plus" aria-hidden="true"></i></button>
                                            <button class="btn btn-light1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" onclick="fn_resetNumberGItem(this)"><i class="fa fa-refresh" aria-hidden="true"></i></button>
                                        </div>
                                    </div>
                                </div>
                                <div class="card-footer text-right" perfect-class="formFooter">
                                    @*<button class="btn btn-primary1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" title="Add New Product" onclick="fn_createNumberGTable(this,'NumberG',['CSDetType'])">Add</button>
        <button class="btn btn-light1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" onclick="fn_resetNumberGItem(this)">Clear</button>*@
                                   
                                </div>
                                <div class="row">
                                    <div class="col-sm-12" style="padding-right:25px;padding-left:25px;">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <div class="table-responsive" perfect-tempTable="NumberG" id="NumberGItemHead" perfect-tempTable-lastindex="0" perfect-tempTable-action="0"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>



            </div>
            <div class="card-footer text-right" perfect-class="formFooter">
                @if (ViewBag.PagedAccessRights.UsrrlStEdt)
                {
                    <button id="" type="button" class="btn btn-primary mr-3 addcompany-jq-addnewuserUpdate d-none" name="update" perfect-css="button" onclick="fn_UpdateNumberGen(this,'update')"><i class="fa fa-refresh fa-spin  loaderClass"></i>Update</button>
                }
                @if (ViewBag.PagedAccessRights.UsrrlStAdd)
                {
                    <button id="addcompany-jq-addnewuser" type="button" class="btn btn-primary mr-3 " name="add" perfect-css="button" onclick="fn_UpdateNumberGen(this,'new')"><i class="fa fa-refresh fa-spin loaderClass "></i>Save</button>
                }
                <button type="button" class="btn btn-light" perfect-css="button" onclick="ResetButton(this)" name="reset">Clear</button>
            </div>
        </form>
    </div>


</div>

<script>
    var tableOptionsTempOut = {
        iconButton: {
            buttons: [
                {
                    icon: "fa fa-pencil btnPerfectGridEdit",
                    action: function () {
                        let savedData = $(this).closest('tr').data('pData')

                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let tableKey = $tablecontainer.attr('perfect-tempTable');
                        let $thisForm = $tablecontainer.closest('[perfect-class="form"]');

                        let indexname = tableKey + 'index';


                        let rindex = $(this).closest('tr').attr(indexname);

                        $tablecontainer.attr('perfect-tempTable-action', rindex);

                        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                            let $thisNode = $(this);
                            let pf_name = $thisNode.attr('name');
                            if ($thisNode.is('select')) {

                                $thisNode.val(savedData[pf_name]).selectpicker('refresh');

                            }
                            else if ($thisNode.is('input')) {
                                let inputType = $thisNode.attr('type').toLocaleLowerCase();
                                if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                    $thisNode.prop('checked', savedData[pf_name]);
                                }
                                else {
                                    $thisNode.val(savedData[pf_name]);
                                }
                            }
                            else {
                                $thisNode.val(savedData[pf_name]);
                            }
                        });
                        
                        fn_setSelectedData($thisForm);
                    }
                },
                {
                    icon: "fa fa-trash btnPerfectGridDelete",
                    action: function () {
                        let $thistbl = $(this).closest('table');
                        let table = $thistbl.DataTable();
                        table.destroy();
                        if ($(this).closest('tbody').find('tr').length > 1) {
                            $(this).closest('tr').remove();
                            pft_table_slreset($thistbl);
                        }
                        else {
                            $thistbl.remove();
                        }

                    }
                },
            ]
        },

        rowAttribute: [],
        renameHeader: { "CSDetType": "Type", "CSDetPreference": "Preference", "CSDetMinLength": "Length", "CSDetValue": "Value" },
        hideColumn: ['ID_CommonSettingsDetails','FK_CSDetValue'],
        serialNo: true,

    };
    function fn_setLength(element) {
        let $thisForm = $(element).closest('[perfect-class="form"]');
        $thisForm.find('[name="CSDetValue"]').attr('maxlength', $thisForm.find('[name="CSDetMinLength"]').val());
    }
    function fn_setSelectedData($thisForm) {
        let sel = $thisForm.find('[name=CSDetType] option:selected').text();
        let id = parseInt($thisForm.find('[name="CSDetType"]').val());
      
        if (sel != 'Please select') {
            $thisForm.find('[name="SelectBtnbyType"]').hide();
            $thisForm.find('[name="textDangerLength"]').show();
            $thisForm.find('[name="textDangerValue"]').show();
            $thisForm.find('[name="CSDetValue"]').attr('readonly', false);
            $thisForm.find('[name="CSDetMinLength"]').attr('readonly', false);

            $thisForm.find('[name="CSDetValue"]').attr('type', 'text');
            $thisForm.find('[name="CSDetValue"]').removeAttr('oninput');
            $thisForm.find('[name="CSDetValue"]').removeAttr('onkeydown');
            switch (id) {
                case 1:
                    $thisForm.find('[name="CSDetValue"]').attr('readonly', true);
                    $thisForm.find('[name="textDangerValue"]').hide();
                    break;
                case 2:
                case 6:
                case 7:
                case 8:
                    $thisForm.find('[name="CSDetValue"]').attr('readonly', true);
                    $thisForm.find('[name="textDangerValue"]').hide();
                    $thisForm.find('[name="CSDetMinLength"]').attr('readonly', true);
                    $thisForm.find('[name="textDangerLength"]').hide();
                    break;
                case 3:
                    $thisForm.find('[name="CSDetMinLength"]').attr('readonly', true);
                    $thisForm.find('[name="textDangerLength"]').hide();
                    break;
                case 4:
                    $thisForm.find('[name="SelectBtnbyType"]').show();
                    $thisForm.find('[name="CSDetValue"]').attr('readonly', true);
                    $thisForm.find('[name="CSDetMinLength"]').attr('readonly', true);
                    $thisForm.find('[name="textDangerLength"]').hide();
                    break;
                case 5:
                    $thisForm.find('[name="CSDetValue"]').attr('type', 'number');
                    $thisForm.find('[name="CSDetValue"]').attr('oninput', 'javascript: if (this.value.length > this.maxLength) this.value = this.value.slice(0, this.maxLength);');
                    $thisForm.find('[name="CSDetValue"]').attr('onkeydown', "if(event.key==='.'){event.preventDefault();}");                    
                    break;
                default:
                    break;
            }


        }
    }
    //to create Quotation items details table
    function fn_createNumberGTable(element, tkey, uniq = []) {       
        let $thisForm = $(element).closest('[perfect-class="form"]');
        let tableKey = tkey;
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');

        let insertData = {};
        let tableOptionsTemp = tableOptionsTempOut;

        let unique = (uniq) ? uniq : [];

        let isValid = true;
        let errorClass = '.temptableError';


        let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
        let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
        let indexname = tkey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);
        let updateCond = '';
        let isNew = true;

        if (thisactionIndex > 0) {
            insertData[indexname] = thisactionIndex;
            updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
            isNew = false;
        }
        else {
            insertData[indexname] = lastIndex + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
            isNew = true;
        }

        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="CSDetType"]').val().length == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="CSDetType"]').val().length == null) {
            isValid = false;

            $thisForm.find('[perfect-tempTable-' + tableKey + '="CSDetType"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please select the Type');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="CSDetType"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }
        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="CSDetPreference"]').val().length == 0 || parseInt($thisForm.find('[perfect-tempTable-' + tableKey + '="CSDetPreference"]').val())<1) {
            isValid = false;

            $thisForm.find('[perfect-tempTable-' + tableKey + '="CSDetPreference"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please enter preference');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="CSDetPreference"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }
        if (!$thisForm.find('[perfect-tempTable-' + tableKey + '="CSDetMinLength"]').is('[readonly]')) {
            if ($thisForm.find('[perfect-tempTable-' + tableKey + '="CSDetMinLength"]').val().length == 0 ) {
                isValid = false;

                $thisForm.find('[perfect-tempTable-' + tableKey + '="CSDetMinLength"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please enter Length');
            }
            else {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="CSDetMinLength"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="CSDetMinLength"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }

        if (!$thisForm.find('[perfect-tempTable-' + tableKey + '="CSDetValue"]').is('[readonly]')) {
            if ($thisForm.find('[perfect-tempTable-' + tableKey + '="CSDetValue"]').val().length == 0 ) {
                isValid = false;

                $thisForm.find('[perfect-tempTable-' + tableKey + '="CSDetValue"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please enter value');
            }
            else {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="CSDetValue"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }
        }
        else if ($thisForm.find('[perfect-tempTable-' + tableKey + '="CSDetValue"]').is('[readonly]') && parseInt($thisForm.find('[perfect-tempTable-' + tableKey + '="CSDetType"]').val()) == 4) {
            if ($thisForm.find('[perfect-tempTable-' + tableKey + '="CSDetValue"]').val().length == 0) {
                isValid = false;

                $thisForm.find('[perfect-tempTable-' + tableKey + '="CSDetValue"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please select at least one');
            }
            else {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="CSDetValue"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="CSDetValue"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }
       

        if (unique.length > 0) {
            let prevData = [];
            $tblcontainer.find('table > tbody').find('tr').each(function () {
                if (isNew) {
                    prevData.push($(this).data('pData'));
                }
                else {
                    if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                        prevData.push($(this).data('pData'));
                    }

                }

            })

            unique.forEach(function (key, i) {
                let $thisEle = $thisForm.find('[perfect-tempTable-' + tableKey + '="' + key + '"]');
                let headerEleName = $thisForm.find('[name="lblType"]').text();
                let atname = $thisEle.attr('name');
                let cvalue;


                if ($thisEle.length != 0) {
                    let $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
                    let errmessage = headerEleName + " Already exits"

                    if ($thisEle.is('select')) {
                        cvalue = $thisEle.val();

                    }
                    else if ($thisEle.is('input')) {

                        let inputEleType = $thisEle.attr('type').toLocaleLowerCase();

                        if (inputEleType == 'checkbox') { cvalue = $thisEle.is(':checked'); }
                        else if (inputEleType == 'hidden') { cvalue = $thisEle.val(); }
                        else { cvalue = $thisEle.val(); }
                    }
                    else {
                        cvalue = $thisEle.val();
                    }

                    if (prevData.find(a => a[atname] == cvalue)) {
                        $errorElement.text(errmessage);
                        isValid = false;
                    }
                }
            });

        }
        if (isValid) {
            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                if ($this.is('select')) {
                    switch (headerName) {
                        case "CSDetType":
                            headerName = "Type";
                            break;
                        default:
                            break
                    }
                    tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                    tableOptionsTemp.hideColumn.push(nameAttr)
                    if ($this.val() != null) {
                        let selectText = ($this.val().length == 0) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    else {
                        let selectText = ($this.val() == null) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    insertData[nameAttr] = $this.val();

                    $this.val('').selectpicker('refresh');
                }
                else if ($this.is('input')) {

                    let inputType = $this.attr('type').toLocaleLowerCase();

                    if (inputType == 'checkbox') {

                        insertData[nameAttr] = $this.is(':checked');

                        tableOptionsTemp.isCheckType.push(nameAttr)
                        //clear field
                        $this.prop('checked', false);

                    }
                    else if (inputType == 'hidden') {
                        insertData[nameAttr] = $this.val();
                        $this.val('');

                    }

                    else {
                        insertData[nameAttr] = $this.val();

                        $this.val('');
                    }
                }
                else {
                    insertData[nameAttr] = $this.val();

                    $this.val('');
                }
            });

            if (isNew) {
                if ($tblcontainer.find('table').length == 0) {
                    $tblcontainer.append(pft_table_createtable([insertData], tableOptionsTemp));
                }
                else {
                    let table = $tblcontainer.find('table').DataTable()
                    table.destroy()
                    pft_table_addTableRow($tblcontainer.find('table'), insertData, tableOptionsTemp);
                }
            }
            else {
                let table = $tblcontainer.find('table').DataTable()
                table.destroy()
                pft_table_replaceTableRow($tblcontainer.find('table'), updateCond, insertData, tableOptionsTemp);
            }

            $tblcontainer.attr('perfect-tempTable-action', 0);
        }
    }
    function fn_resetNumberGItem(ele) {
        let $thisItem = $(ele).closest('[perfect-class="TempTableNumberG"]');
        $thisItem.find('[perfect-ctype="input"]').val('');
        $thisItem.find('[name="CSDetType"]').val('').selectpicker('refresh');
    }

    function fn_getSelectionName(ele) {
     
        let $thisForm = $(ele).closest('[perfect-class="form"]');      
        $thisForm.find('[name="CSDetValue"]').val('');
        fn_setSelectedData($thisForm);
    }
    function fn_searchlistData(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let $this = $(ele).closest('[perfect-class="formGroup"]');
        if ($thisForm.find('[name=CSDetType]').val() != '')
            {
                  $.ajax({
                    url: '@Url.Action("GetDataSearch", "NumberGeneration")',
                    type: "Post",
                    dataType: "json",
                    contentType: "application/json",
                    success: function (successData) {
                        if (successData.Process.IsProcess) {
                            if (successData.Data.length> 1) {
                                var sss = createSelectList({
                                    data: successData.Data,
                                    hideColumn: ['ID_Mode'],
                                    headingText: 'List',
                                    renameHeader: { "ModeName": "Name"},
                                });

                                sss.then(function (ret) {
                                    if (ret) {
                                        $thisForm.find('[name=FK_CSDetValue]').val(ret.ID_Mode);
                                        $thisForm.find('[name=CSDetValue]').focus().val(ret.ModeName);

                                       $this.find('table').append($('<tr>').append($('<td/>').text(ret.ProdName)).append($('<td/>').html('&times;').click(function () { $(this).closest('tr').remove() })))
                                    }
                                });
                            }                            
                        }
                        else {
                            $.each(successData.Process.Message, function (key, value) {
                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                            });
                        }

                    },
                    complete: function () {
                    }
                });
            }
        else
        {
            NotificationMessage({  'message': 'Please Select Category' });
        }
    }
    function fn_fillSubModule(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let $actionDropdown = $thisForm.find('[name="SubModule"]');
        $actionDropdown.empty();
        $actionDropdown.append($('<option/>', { value: '' }).text('Please select')).selectpicker('refresh');
        let inputData =
        {
            __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
            'FK_MenuGroup': $thisForm.find('[name=FK_Module]').val()
        };

        $.ajax({
            url: "@Url.Action("FillMenuWithoutParent", "Menu")",
            type: "POST",
            dataType: "json",
            data: inputData,
            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            success: function (ajaxOutput) {
                if (ajaxOutput.length > 0) {
                    $.each(ajaxOutput, function (key, value) {
                        $actionDropdown.append($('<option/>', { value: value.ID_MenuList }).text(value.MnuLstName)).selectpicker('refresh');
                    });
                    if ($actionDropdown.attr('perfect-onloadSelect')) {
                        $actionDropdown.val($actionDropdown.attr('perfect-onloadSelect')).selectpicker('refresh')
                    }
                }
                else {
                    $.each(ajaxOutput.Process.Message, function (key, value) {
                        NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                    });
                }
            }
        });
    }
     function fn_UpdateNumberGen(element,actionType)
    {
        let $thisForm = $(element).closest('[perfect-class="form"]');
        if ($thisForm.valid())
            {
                    $(element).prop('disabled', true);
                    let $thisForm = $(element).closest('[perfect-class="form"]');
           
          
                  let DetailsData = [];
            $thisForm.find('[perfect-tempTable="NumberG"]').find('tbody').find('tr').each(function () {
                     DetailsData.push($(this).data('pData'));
                    })
          
                    let _ID_CommonSettings = 0;
                    let _ActionUrl = "";

                    if (actionType === "new") {
                        _ID_CommonSettings = 0;
                        _ActionUrl = "@Url.Action("AddCommonNumberGeneration", "NumberGeneration")";
                    }
                    else if (actionType === "update") {
                        _ID_CommonSettings = $thisForm.find('[name="ID_CommonSettings"]').val();
                        _ActionUrl = "@Url.Action("UpdateNewCommonNumbergeneration", "NumberGeneration")";
                    }
           
                    let inputData = {
                        __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                        'ID_CommonSettings': _ID_CommonSettings,
                        'EffectDate': $thisForm.find('[name="EffectDate"]').val(),
                        'CSNoGenCriteria': $thisForm.find('[name="GenerationCriteria"]').val(),
                        'CSNoResetPeriod': $thisForm.find('[name="ResetPeriod"]').val(),
                        'FK_Module': $thisForm.find('[name="FK_Module"]').val(),
                        'FK_SubModule': $thisForm.find('[name="SubModule"]').val(),                        
                        'CommonSettingsDetails': DetailsData
                    };

            if (DetailsData.length > 0)
                            {
                               $.ajax({
                                         url: _ActionUrl,
                                         type: "POST",
                                         data: inputData,
                                         dataType: "json",
                                         contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                                         success: function (ajaxOutput) {
                                             if (ajaxOutput.Process.IsProcess) {
                                                 $.each(ajaxOutput.Process.Message, function (key, value) {
                                                     NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                                                 });
                                             }
                                             else {
                                                 $.each(ajaxOutput.Process.Message, function (key, value) {
                                                     NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                                     $(element).prop('disabled', false);
                                                 });
                                             }

                                             $thisForm.find('[perfect-ctype="select"]').val('').selectpicker('refresh');
                                             $thisForm.find('[perfect-ctype="input"]').val('');
                                             $thisForm.find('[perfect-ctype="date"]').val('');
                                             let onSuccess = $thisForm.attr('perfect-onFormSuccess')
                                             if (onSuccess) {
                                                 window[onSuccess]();
                                                 NumberGenerationCommonInitialLoad();
                                             }
                                         },
                                         complete: function ()
                                         {
                                                $(element).prop('disabled', false);
                                         }
                                    });
                            }
                            else
                            {                              
                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Please fill details section' });
                            }
                     }
    }
    function ResetButton(ele) {
        NumberGenerationCommonInitialLoad();
    }


    (function () {
        jQuery('form').validate();
        jQuery('select').selectpicker();

    })();

</script>
