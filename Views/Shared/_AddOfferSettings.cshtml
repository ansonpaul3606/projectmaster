@model PerfectWebERP.Models.OfferSettingsModel.OfferView


<div class="card ">
    <div class="card-header">
        <h4 class="card-title col-12">Offer/Price Fixing</h4>
        <span title="To View List" onclick="fn_showListView();"><svg id="Layer_1" class="layer" stroke="currentColor" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" height="20" width="20" viewBox="0 0 122.88 122.54"><title>To View List</title><path class="viewlst" d="M4.69,0H46.22a4.71,4.71,0,0,1,4.69,4.69V46a4.69,4.69,0,0,1-4.69,4.69H4.69a4.65,4.65,0,0,1-3.31-1.38l-.09-.09A4.67,4.67,0,0,1,0,46V4.69A4.71,4.71,0,0,1,4.69,0ZM89.44,61.94a26.56,26.56,0,0,1,10.18,2l.07,0a26.61,26.61,0,0,1,15.25,32.16,26.18,26.18,0,0,1-2.7,6.11l10.3,11.24a1.27,1.27,0,0,1-.07,1.8l-7.57,6.9a1.27,1.27,0,0,1-1.79-.07l-9.86-10.85a26.36,26.36,0,0,1-6.1,2.74,26.87,26.87,0,0,1-7.71,1.13,26.51,26.51,0,0,1-10.17-2l-.07,0A26.64,26.64,0,0,1,64.85,78.37l0-.07A26.6,26.6,0,0,1,89.44,61.94Zm15,11.59a21.38,21.38,0,0,0-6.89-4.61l-.06,0a21.22,21.22,0,0,0-23.07,4.64l-.07.07a21.25,21.25,0,0,0-4.54,6.83l0,.06a21.32,21.32,0,0,0-1.58,8.06,21.26,21.26,0,0,0,29.35,19.62,21.54,21.54,0,0,0,6.89-4.61l.07-.07a21.09,21.09,0,0,0,4.54-6.83l0-.06a21.35,21.35,0,0,0,0-16.17,21.34,21.34,0,0,0-4.62-6.9ZM4.69,63.2H46.22a4.71,4.71,0,0,1,4.69,4.7v41.34a4.68,4.68,0,0,1-4.69,4.69H4.69A4.69,4.69,0,0,1,0,109.24V67.9a4.71,4.71,0,0,1,4.69-4.7ZM68.78,0h41.53A4.71,4.71,0,0,1,115,4.69V46a4.71,4.71,0,0,1-4.69,4.69H68.78A4.71,4.71,0,0,1,64.09,46V4.69a4.69,4.69,0,0,1,1.37-3.31l.1-.09A4.67,4.67,0,0,1,68.78,0Z"></path></svg></span>
    </div>
    <div class="card-body">
        <form id="" class="form-valide" perfect-class="form" action="#" method="post" perfect-onFormSuccess="">
            <div class="">
                @Html.AntiForgeryToken()
                <div class="row">
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Type</span>
                                <span class="text-danger">*</span>

                            </label>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <select class="form-control perfectValidate_string" name="FK_Type" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" onchange="showdepandontype(this)">
                                        <option value="0">Offer</option>
                                        <option value="1">Price Fixing</option>

                                    </select>

                                </div>
                                <div class="text-danger temptableError"></div>
                            </div>

                        </div>
                    </div>
                    <div class="col-sm-4" id="divoffername">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Offer Name</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control" placeholder="" name="OfrName" perfect-class="formGroupControl" maxlength="150" perfect-ctype="input" perfect-css="input" />

                            </div>
                        </div>

                    </div>

                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Effect Date</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <input type="date" class="form-control perfectValidate_date" name="OfrEffectDate" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" max="2050-01-01" onchange="dateCheck(this)" />

                                </div><div class="invalid-feedback animated limit-check fadeInUp" style="display: block;"></div>
                            </div>
                        </div>
                    </div>



                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Expiry Date</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <input type="date" class="form-control perfectValidate_date" name="OfrExpireDate" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" max="2050-01-01" onchange="expiredate(this)" />

                                </div><div class="invalid-feedback animated limits-checks fadeInUp" style="display: block;"></div>
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-4" id="divofferdescription">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Offer Description</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <textarea rows="3" name="OfrDescription" class="form-control" perfect-ctype="input" maxlength="500" ></textarea>
                            </div>
                        </div>
                    </div>


                    <div class="col-md-3">
                        <div class="form-check form-check-inline" perfect-class="formCheck">
                            <label class="form-check-label" perfect-class="formCheckLabel">
                                <span perfect-class="formCheckInputText">Active</span>
                            </label> &nbsp;&nbsp;&nbsp;<input type="checkbox" class="form-check-input" name="OfrActive" perfect-class="formCheckInput" perfect-ctype="checkbox" perfect-css="checkbox" checked>
                        </div>

                    </div>

                </div>

                <div class="row">
                    <div class="col-sm-12">
                        <div class="daccordion__header">
                            <span class="accordion__header--text">Product Details</span>
                        </div>
                        <div class="row">
                            <div class="col-sm-12 " perfect-class="TempTableAuthorizationLevel">
                                <br />

                                <div class="row">
                                    <div class="col-sm-3">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">Category</span>

                                            </label>

                                            <div class="col-sm-8">
                                                <select class="form-control" name="FK_Category" id="Categoryid" perfect-tempTable-Offers="FK_Category" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" data-live-search="true" onchange="clearproduct(this)">

                                                    <option value="">Please Select </option>

                                                    @if (!(Model.CategoryList is null))
                                                    {
                                                        foreach (var categorylist in Model.CategoryList)
                                                        {
                                                            <option value="@categorylist.FK_Category">@categorylist.Category</option>
                                                        }

                                                    }

                                                </select>
                                                <div class="text-danger temptableError"></div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-3">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">Product</span>

                                            </label>
                                            <div class="col-sm-8">
                                                <div class="input-group">
                                                    <input type="text" class="form-control " name="Product" perfect-tempTable-Offers="Product" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled />
                                                    <input type="hidden" name="FK_Product" perfect-tempTable-Offers="FK_Product" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                    <input type="hidden" name="MinRate" perfect-tempTable-Offers="MinRate" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                    <input type="hidden" name="MaxRate" perfect-tempTable-Offers="MaxRate" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                    <div class="input-group-append">

                                                        <button id="addproduct-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchValAssign(this,85,'Product List',[],['MinRate','MaxRate'])" Criterea1="FK_Category" Criterea2="0" BindName="Product" BindVal="FK_Product"Function="2"></button>

                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-2  pricefixing">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">Sales Price</span>
                                                <span class="text-danger">*</span>
                                            </label>
                                            <div class="col-sm-8">
                                                <input type="text" class="form-control text-right" perfect-tempTable-Offers="SalPrice"maxlength="12" placeholder="" name="SalPrice" oninput="decimalpnt(this,'SalPrice',3)" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" min="0" onchange="checkmrpsalesrate(this,'Offers')" />
                                                <span class="invalid-feedback animated fadeInUp d-block temptableError"></span>
                                            </div>
                                          
                                        </div>
                                    </div>
                                    <div class="col-sm-2 pricefixing">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">M R P</span>
                                                <span class="text-danger">*</span>
                                            </label>
                                            <div class="col-sm-8">
                                                <input type="text" class="form-control text-right" perfect-tempTable-Offers="MRP" maxlength="12"placeholder="" name="MRP" oninput="decimalpnt(this,'MRP',3)" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" min="0" onchange="checkmrpsalesrate(this,'Offers')" />
                                                <span class="invalid-feedback animated fadeInUp d-block temptableError"></span>
                                            </div>
                                           
                                        </div>
                                    </div>


                                    <div class="col-sm-2">
                                        <button class="btn btn-primary1" type="button" id="idbutton1"data-toggle="tooltip" data-placement="top" data-html="true" title="Add Offering details" onclick="fn_createOfferdetailsTable(this,'Offers',['FK_Category'],tableOptionsTempOut)"><i class="fa fa-plus" aria-hidden="true"></i></button>
                                        <button class="btn btn-primary1" type="button"id="idbutton2" data-toggle="tooltip" data-placement="top" data-html="true" title="Add Offering details" onclick="fn_createOfferdetailsTable(this,'Offers',['FK_Category'],tableOptionsTempOutPricefixing)"><i class="fa fa-plus" aria-hidden="true"></i></button>
                                        <button class="btn btn-light1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" onclick="clearsubtableproduct(this,'Offers')">
                                            <i class="fa fa-refresh" aria-hidden="true"></i>
                                        </button>
                                    </div>
                                </div>


                                <div class="card-footer text-right" perfect-class="formFooter">

                                </div>
                                <div class="row">
                                    <div class="col-sm-12" style="padding-right:25px;padding-left:25px;">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <div class="table-responsive" perfect-tempTable="Offers" id="OffersTHead" perfect-tempTable-lastindex="0" perfect-tempTable-action="0"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <input type="hidden" name="FK_Offers"  class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
            </div>
            <div class="card-footer text-right" perfect-class="formFooter">
                @if (ViewBag.PagedAccessRights.UsrrlMsEdt)
                {
                    <button id="" type="button" class="btn btn-primary mr-3 addcompany-jq-addnewuserUpdate d-none" name="update" perfect-css="button" onclick="UpdateOfferettings(this,'Update')"><i class="fa fa-refresh fa-spin  loaderClass"></i>Update</button>
                }
                @if (ViewBag.PagedAccessRights.UsrrlMsAdd)
                {
                    <button id="addcompany-jq-addnewuser" type="button" class="btn btn-primary mr-3 " name="add" perfect-css="button" onclick="UpdateOfferettings(this,'Add')"><i class="fa fa-refresh fa-spin loaderClass "></i>Save</button>
                }
                <button type="button" class="btn btn-light" perfect-css="button" onclick="ResetButton(this)" name="reset">Clear</button>
            </div>
        </form>
    </div>
</div>
<script src="~/Scripts/jqDOM/searchDOMCreation.js"></script>
<script>

    (function () {
        jQuery("select").selectpicker();

    });
    $(document).ready(function () {

        initFunctions('form');
        //$('.select2').select2();
        $('#active-header_collapseTwo').addClass('collapse');
        $('#active-header_collapseTwo').addClass('show');

        let $thisForm = $(this).closest('[perfect-class="form"]');

    });
    function dateCheck(ele) {
        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');

        let effct = $thisForm.find('[name="OfrEffectDate"]').val();
        effct = new Date(effct);
        effct.setHours(0, 0, 0, 0);

        var today = new Date();
        today.setHours(0, 0, 0, 0)

        if (effct >= today) {
            $thisForm.find('[name="OfrEffectDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('');
            return true;
        }
        else {
            $thisForm.find('[name="OfrEffectDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('Effect date should be greater than or equal to Todays date');
            return false;
        }

    }

    function decimalpnt(ele, id, range) {
        debugger
        let input = $('#' + id);

        ele.value = ele.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');
        let t = ele.value;
        ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t;

        $(document).on('keydown', '#' + id, function (event) {

            if (ele.value.includes('.')) {

            }
            else if (ele.value === '.' && (event.key === '.' || event.keyCode === 190)) {
                ele.value = '0.00'; // Change the value to '0.00' if only a dot is entered
                // Prevent the dot from being entered in the input field
            }
            var key = event.keyCode || event.charCode;
            if (key == 8 || key == 46) { }
            else {
                if (ele.value.indexOf('.') < 0 && ele.value.indexOf('.') !== 9 && ele.value.length > 8) {
                    ele.value = ele.value + '.';
                }
            }

        });

    }
    function expiredate(ele) {
        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');

        let effctdt = $thisForm.find('[name="OfrEffectDate"]').val();
        let expiredt = $thisForm.find('[name="OfrExpireDate"]').val();
        expiredt = new Date(expiredt);
        expiredt.setHours(0, 0, 0, 0);

        effctdt = new Date(effctdt);
        effctdt.setHours(0, 0, 0, 0);

        if (expiredt >= effctdt) {

            $thisForm.find('[name="OfrExpireDate"]').closest('[perfect-class="formGroup"]').find('.limits-checks').text('');
            return true;
        }
        else {
            $thisForm.find('[name="OfrExpireDate"]').closest('[perfect-class="formGroup"]').find('.limits-checks').text('Expiry date should be greater than or equal to Effect date');
            return false;
        }
    }

    function UpdateOfferettings(ele, actiontype) {
        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');

        let Mode = $thisForm.find('[name=FK_Type]').val().trim();
        if (Mode == 1) {


            $thisForm.find('[name="OfrName"]').removeClass('perfectValidate_string');
            $thisForm.find('[name="OfrDescription"]').removeClass('perfectValidate_Remarks');

        }
        else {

            $thisForm.find('[name="OfrName"]').addClass('perfectValidate_string');
            $thisForm.find('[name="OfrDescription"]').addClass('perfectValidate_Remarks');
        }
        let OfferData = [];

        $thisForm.find('[perfect-tempTable="Offers"]').find('table>tbody').find('tr').each(function () {

            OfferData.push($(this).data('pData'));
        });

        if ($thisForm.valid()) {

            if (OfferData.length > 0) {

                debugger
                if (dateCheck(ele)) {

                    if (expiredate(ele)) {

                        //if (OfferData.length != 0) {

                        var inputData = {
                            'TransMode': '',
                            'OfrName': $thisForm.find('[name="OfrName"]').val(),
                            'OfrEffectDate': $thisForm.find('[name="OfrEffectDate"]').val(),
                            'OfrExpireDate': $thisForm.find('[name="OfrExpireDate"]').val(),
                            'OfrActive': $thisForm.find('[name="OfrActive"]').is(":checked"),
                            'OfrDescription': $thisForm.find('[name="OfrDescription"]').val(),
                            'OfferDetails': OfferData,
                            'FK_Type': $thisForm.find('[name="FK_Type"]').val(),
                            'FK_Offers': $thisForm.find('[name="FK_Offers"]').val(),
                            'LastID': LastID_offer
                        }
                        clearSessionValue(LastIDSessionKey);
                        let _ActionUrl = "";
                        if (actiontype == "Add") { _ActionUrl = "@Url.Action("AddOfferSetting", "OfferSettings")"; } else { _ActionUrl = "@Url.Action("UpdateOfferSetting", "OfferSettings")"; }

                        $.ajax({
                            url: (actiontype == "Add") ? "@Url.Action("AddOfferSetting", "OfferSettings")" : "@Url.Action("UpdateOfferSetting", "OfferSettings")",
                            type: "POST",
                            data: inputData,
                            dataType: "json",
                            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                            success: function (data) {

                                if (data.Process.IsProcess) {

                                    $.each(data.Process.Message, function (key, value) {
                                        NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                                    });
                                    $thisForm.find('[perfect-ctype="select"]').val('').selectpicker('refresh');
                                    $thisForm.find('[perfect-ctype="input"]').val('');
                                    $thisForm.find('[perfect-ctype="date"]').val('');
                                    $thisForm.find('[perfect-ctype="hidden"]').val('');

                                    let onSuccess = $thisForm.attr('perfect-onFormSuccess');
                                    if (onSuccess) {
                                        fn_OfferSettings_initialLoad();
                                    }

                                }
                                else {
                                    $.each(data.Process.Message, function (key, value) {
                                        NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                    });
                                }

                            },

                        });

                       
                    } else {
                        $(ele).prop('disabled', false);
                        NotificationMessage({ 'type': 'error', 'heading': 'Warning', 'message': 'Expiry date should be greater than or equal to Effect date' });

                    }
                }
                else {
                    $(ele).prop('disabled', false);
                    NotificationMessage({ 'type': 'error', 'heading': 'Warning', 'message': 'Effect date should be greater than or equal to Todays date' });

                }
            }
            else {
                NotificationMessage({ 'type': 'error', 'heading': 'info', 'message': 'Please Enter Atleast One Offer Details!!!' });
            }


        }
    }
    function clearproduct(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        $thisForm.find('[name=ProductID]').val(0);
        $thisForm.find('[name=Product]').val('');

    }

    function clearsubtableproduct(ele, tablekey) {


        let $thisform = $(ele).closest('[perfect-class="form"]');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="select"]').val('').selectpicker('refresh');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="date"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="hidden"]').val('');
        let errorClass = '.temptableError';
        $thisform.find('[perfect-tempTable-' + 'Offers' + '="Category"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');

        let $tblcontainer = $thisform.find('[perfect-tempTable="' + tablekey + '"]');
        $tblcontainer.attr('perfect-tempTable-action', 0);

        if (tablekey = "Offers") {

        }

    }


    function fn_createOfferdetailsTable(element, tkey, uniq, tableOptionsTempOut) {

        debugger

        let $thisForm = $(element).closest('[perfect-class="form"]');
        let tableKey = tkey;
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');

        let insertData = {};
        let tableOptionsTemp = tableOptionsTempOut;

        let unique = (uniq) ? uniq : [];

        let isValid = true;
        let isValidratecheck = true;
        let errorClass = '.temptableError';


        let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
        let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
        let indexname = tkey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);
        let updateCond = '';
        let isNew = true;

        if (thisactionIndex > 0) {
            insertData[indexname] = thisactionIndex;
            updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
            isNew = false;
        }
        else {
            insertData[indexname] = lastIndex + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
            isNew = true;
        }
       

        if (tableKey == 'Offers') {
            if (($thisForm.find('[perfect-tempTable-' + tableKey + '="FK_Category"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="FK_Category"]').val == null || $thisForm.find('[perfect-tempTable-' + tableKey + '="FK_Category"]').val == '') && ($thisForm.find('[perfect-tempTable-' + tableKey + '="FK_Product"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="FK_Product"]').val == null || $thisForm.find('[perfect-tempTable-' + tableKey + '="FK_Product"]').val == '')) {
                isValid = false;
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Please Add Product details!!' });
            }
            else {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="FK_Category"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }

            debugger
            let Mode = $thisForm.find('[name=FK_Type]').val().trim();
            console.log("salesprice", $thisForm.find('[perfect-tempTable-' + tableKey + '="SalPrice"]').val);
            if (Mode == 1) {             
                let MinRate = $thisForm.find('[perfect-tempTable-' + tableKey + '="MinRate"]').val();
                let MAxRate = $thisForm.find('[perfect-tempTable-' + tableKey + '="MaxRate"]').val();
                if ($thisForm.find('[perfect-tempTable-' + tableKey + '="SalPrice"]').val() == "0" || $thisForm.find('[perfect-tempTable-' + tableKey + '="SalPrice"]').val() == null || $thisForm.find('[perfect-tempTable-' + tableKey + '="SalPrice"]').val() == '' || $thisForm.find('[perfect-tempTable-' + tableKey + '="SalPrice"]').val() == undefined) {

                    isValid = false;
                    console.log('false');
                    $thisForm.find('[perfect-tempTable-' + tableKey + '="SalPrice"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter Sales Price');
                }
                else {
                    if (parseFloat(MinRate) != 0 && $thisForm.find('[perfect-tempTable-' + tableKey + '="SalPrice"]').val() < parseFloat(MinRate))
                    {
                        isValid = false;
                        $thisForm.find('[perfect-tempTable-' + tableKey + '="SalPrice"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Sales Price Should Not Be Less Than Minimum Rate In Product');
                    }
                    else if (parseFloat(MAxRate) != 0 && $thisForm.find('[perfect-tempTable-' + tableKey + '="SalPrice"]').val() > parseFloat(MAxRate)) {                       
                        isValid = false;
                        $thisForm.find('[perfect-tempTable-' + tableKey + '="SalPrice"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Sales Price Should Not Be Greater Than Maximum Rate In Product');
                    }
                    else {
                        $thisForm.find('[perfect-tempTable-' + tableKey + '="SalPrice"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
                    }
                }
                if ($thisForm.find('[perfect-tempTable-' + tableKey + '="MRP"]').val() == "0" || $thisForm.find('[perfect-tempTable-' + tableKey + '="MRP"]').val() == null || $thisForm.find('[perfect-tempTable-' + tableKey + '="MRP"]').val() == '' || $thisForm.find('[perfect-tempTable-' + tableKey + '="MRP"]').val() == undefined) {

                    isValid = false;
                    console.log('false');
                    $thisForm.find('[perfect-tempTable-' + tableKey + '="MRP"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter MRP');
                }
                else {
                    if (parseFloat(MinRate) != 0 && $thisForm.find('[perfect-tempTable-' + tableKey + '="MRP"]').val() < parseFloat(MinRate)) {
                        isValid = false;
                        $thisForm.find('[perfect-tempTable-' + tableKey + '="MRP"]').closest('[perfect-class="formGroup"]').find(errorClass).text('MRP Should Not Be Less Than Minimum Rate In Product');
                    }
                    else if (parseFloat(MAxRate) != 0 && $thisForm.find('[perfect-tempTable-' + tableKey + '="MRP"]').val() > parseFloat(MAxRate)) {
                        isValid = false;
                        $thisForm.find('[perfect-tempTable-' + tableKey + '="MRP"]').closest('[perfect-class="formGroup"]').find(errorClass).text('MRP Should Not Be Greater Than Maximum Rate In Product');
                    }
                    else {
                        $thisForm.find('[perfect-tempTable-' + tableKey + '="MRP"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
                    }
                }



                let upperlimit = $thisForm.find('[perfect-tempTable-' + tableKey + '="MRP"]').val();

                let lowerlimit = $thisForm.find('[perfect-tempTable-' + tableKey + '="SalPrice"]').val();

                if (parseFloat(upperlimit) < parseFloat(lowerlimit)) {


                    isValidratecheck = false;
                    console.log('false');
                    $thisForm.find('[perfect-tempTable-' + tableKey + '="SalPrice"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Sales Price Should be less or Equal to MRP');



                }
                else {

                    console.log('inside limit check else');

                }



            }
            else {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="SalPrice"]').val(0);
                $thisForm.find('[perfect-tempTable-' + tableKey + '="MRP"]').val(0);
            }


          
           

        }

     
        let prevData = [];
        $tblcontainer.find('table > tbody').find('tr').each(function () {
            if (isNew) {
                prevData.push($(this).data('pData'));
            }
            else {
                if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                    prevData.push($(this).data('pData'));
                }
            }

        })
     
       
        if (prevData.find(a => a['FK_Category'] == $('[name=FK_Category]').val() && a['FK_Product'] == $('[name=FK_Product]').val())) {           
            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Already Exists' });
            isValid = false;
        }
        else if (prevData.find(a => a['FK_Category'] == $('[name=FK_Category]').val() && $('[name=FK_Product]').val() === "")) {           
            if (prevData.find(a => a['FK_Category'] == $('[name=FK_Category]').val())) {              
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Already Exists' });
                isValid = false;
            }
        }
        else if (prevData.find(a => a['FK_Category'] == $('[name=FK_Category]').val() && $('[name=FK_Product]').val() != "")) {          
            if (prevData.find(a => a['FK_Category'] == $('[name=FK_Category]').val() && a['FK_Product'] === "")) {               
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Already Exists' });
                isValid = false;
            }
            else if (prevData.find(a => a['FK_Category'] == $('[name=FK_Category]').val() && a['FK_Product'] == $('[name=FK_Product]').val())) {              
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Already Exists' });
                isValid = false;
            }
        }

        if (isValid && isValidratecheck) {
            debugger
            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                if ($this.is('select')) {
                    switch (headerName) {
                        case "FK_Category":
                            headerName = "Category";
                            break;
                       
                        default:
                            break
                    }

                    tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                    tableOptionsTemp.hideColumn.push(nameAttr)
                    if ($this.val() != null) {
                        let selectText = ($this.val().length == 0) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    else {
                        let selectText = ($this.val() == null) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    insertData[nameAttr] = $this.val();

                    $this.val('').selectpicker('refresh');
                }
                else if ($this.is('input')) {

                 
                    let inputType = $this.attr('type').toLocaleLowerCase();

                    if (inputType == 'checkbox') {

                        insertData[nameAttr] = $this.is(':checked');

                        tableOptionsTemp.isCheckType.push(nameAttr)
                        $this.prop('checked', false);

                    }
                    else if (inputType == 'hidden') {
                        insertData[nameAttr] = $this.val();
                        $this.val('');

                    }

                    else {
                        insertData[nameAttr] = $this.val();

                        $this.val('');
                    }
                }
                else {
                    insertData[nameAttr] = $this.val();

                    $this.val('');
                }
            });

            if (isNew) {
                if ($tblcontainer.find('table').length == 0) {
                    $tblcontainer.append(pft_table_createtable([insertData], tableOptionsTemp));
                }
                else {
                    let table = $tblcontainer.find('table').DataTable()
                    table.destroy()
                    pft_table_addTableRow($tblcontainer.find('table'), insertData, tableOptionsTemp);
                }
            }
            else {
                let table = $tblcontainer.find('table').DataTable()
                table.destroy()
                pft_table_replaceTableRow($tblcontainer.find('table'), updateCond, insertData, tableOptionsTemp);
            }

            $tblcontainer.attr('perfect-tempTable-action', 0);
            //$thisForm.find('[name="AldAmountTo"]').attr('readonly', true);
        }
    }
    var tableOptionsTempOut = {
        iconButton: {
            buttons: [

                {
                    icon: "fa fa-pencil btnPerfectGridEdit",
                    action: function () {
                        let savedData = $(this).closest('tr').data('pData')
                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let tableKey = $tablecontainer.attr('perfect-tempTable');
                        let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                        let indexname = tableKey + 'index';
                        let rindex = $(this).closest('tr').attr(indexname);
                        $tablecontainer.attr('perfect-tempTable-action', rindex);
                        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                            let $thisNode = $(this);
                            let pf_name = $thisNode.attr('name');
                            if ($thisNode.is('select')) {
                                $thisNode.val(savedData[pf_name]).selectpicker('refresh');
                            }
                            else if ($thisNode.is('input')) {

                                if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                    $thisNode.prop('checked', savedData[pf_name]);
                                }
                                else {
                                    $thisNode.val(savedData[pf_name]);
                                }
                            }
                            else {
                                $thisNode.val(savedData[pf_name]);
                            }
                        });
                    }
                },
                {
                    icon: "fa fa-trash btnPerfectGridDelete",
                    action: function () {
                        let $thistbl = $(this).closest('table');
                        let table = $thistbl.DataTable();
                        table.destroy();
                        if ($(this).closest('tbody').find('tr').length > 1) {
                            $(this).closest('tr').remove();
                            pft_table_slreset($thistbl);
                            //$thistbl.dataTable({ paging: true });
                        }
                        else {
                            $thistbl.remove();
                        }
                    }
                },
            ]
        },
        onlyShowColumn: [],
        hideColumn: ["FK_Category", "FK_Product", "SalPrice", "MRP","MinRate", "MaxRate"],
        serialNo: true,
        renameHeader: { "FK_Category_d": "Category", "FK_Product": "Product", "SalPrice": "Sales Price"},
        rowAttribute: [],
        isCheckType: []



    };

    var tableOptionsTempOutPricefixing = {
        iconButton: {
            buttons: [

                {
                    icon: "fa fa-pencil btnPerfectGridEdit",
                    action: function () {
                        let savedData = $(this).closest('tr').data('pData')
                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let tableKey = $tablecontainer.attr('perfect-tempTable');
                        let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                        let indexname = tableKey + 'index';
                        let rindex = $(this).closest('tr').attr(indexname);
                        $tablecontainer.attr('perfect-tempTable-action', rindex);
                        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                            let $thisNode = $(this);
                            let pf_name = $thisNode.attr('name');
                            if ($thisNode.is('select')) {
                                $thisNode.val(savedData[pf_name]).selectpicker('refresh');
                            }
                            else if ($thisNode.is('input')) {

                                if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                    $thisNode.prop('checked', savedData[pf_name]);
                                }
                                else {
                                    $thisNode.val(savedData[pf_name]);
                                }
                            }
                            else {
                                $thisNode.val(savedData[pf_name]);
                            }
                        });
                    }
                },
                {
                    icon: "fa fa-trash btnPerfectGridDelete",
                    action: function () {
                        let $thistbl = $(this).closest('table');
                        let table = $thistbl.DataTable();
                        table.destroy();
                        if ($(this).closest('tbody').find('tr').length > 1) {
                            $(this).closest('tr').remove();
                            pft_table_slreset($thistbl);
                            //$thistbl.dataTable({ paging: true });
                        }
                        else {
                            $thistbl.remove();
                        }
                    }
                },
            ]
        },
        onlyShowColumn: [],
        hideColumn: ["FK_Category", "FK_Product", "MinRate", "MaxRate"],
        serialNo: true,
        renameHeader: { "FK_Category_d": "Category", "FK_Product": "Product" },
        rowAttribute: [],
        isCheckType: []



    };

    function ResetButton(ele) {
        fn_OfferSettings_initialLoad();
    }


    function fn_fillOfferdetails(ele, tkey, data, tableOptionsTempOut) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let tableOptionsTempfill = tableOptionsTempOut;
        let insertData = []
        let tableKey = tkey;
        let indexname = tkey + 'index';
        tableOptionsTempfill.rowAttribute.push(indexname);
        tableOptionsTempfill.hideColumn.push(indexname);
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');
        $.each(data, function (keyOne, valOne) {
            //debugger
            let pData = {};

            pData[indexname] = keyOne + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', pData[indexname])
            //---

            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                //console.log('tfhyrtname', nameAttr)
                if (typeof valOne[nameAttr] !== undefined) {

                    if ($this.is('select')) {
                        // tableOptionsTempfill.renameHeader[nameAttr + '_d'] = headerName;
                        tableOptionsTempfill.hideColumn.push(nameAttr);
                        //displat text of select
                        pData[nameAttr + '_d'] = $this.find('[value="' + valOne[nameAttr] + '"]').text();
                        pData[nameAttr] = valOne[nameAttr];
                        console.log('select', $this.find('options[value="' + valOne[nameAttr] + '"]').text());

                    }
                    else if ($this.is('input')) {

                        let inputType = $this.attr('type').toLocaleLowerCase();
                        console.log(inputType)


                        if (inputType == 'date') {

                            if (valOne[nameAttr] == null) {
                                pData[nameAttr] = valOne[nameAttr]; 
                            }
                            else {
                                pData[nameAttr] = moment(valOne[nameAttr]).format('YYYY-MM-DD');
                            }


                        }
                        else {
                            pData[nameAttr] = valOne[nameAttr];


                        }
                    }
                    else {
                        pData[nameAttr] = valOne[nameAttr];


                    }
                }



            });

            insertData.push(pData);


            //----

        });
        $tblcontainer.empty();
        $tblcontainer.append(pft_table_createtable(insertData, tableOptionsTempfill));
    }

    function showdepandontype(ele) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        $thisForm.find('[name="OfrName"]').val('');
        $thisForm.find('[name="OfrDescription"]').val('');
       
        $("#OffersTHead").empty();
        debugger
        let Mode = $thisForm.find('[name=FK_Type]').val().trim();
        if (Mode == 1) {
            
            $("#divofferdescription").hide();
            $("#divoffername").hide();
            $(".pricefixing").show();
            $("#idbutton1").hide();
            $("#idbutton2").show();
            $thisForm.find('[name="OfrName"]').removeClass('perfectValidate_string');
            $thisForm.find('[name="OfrDescription"]').removeClass('perfectValidate_Remarks');
            
        }
        else {
            $("#divofferdescription").show();
            $("#divoffername").show();
            $(".pricefixing").hide();
            $("#idbutton1").show();
            $("#idbutton2").hide();
            $thisForm.find('[name="OfrName"]').addClass('perfectValidate_string');
            $thisForm.find('[name="OfrDescription"]').addClass('perfectValidate_Remarks');
        }
    }

    function checkmrpsalesrate(ele, tkey) {


        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let tableKey = tkey;


        let upperlimit = $thisForm.find('[perfect-tempTable-' + tableKey + '="MRP"]').val();
        let lowerlimit = $thisForm.find('[perfect-tempTable-' + tableKey + '="SalPrice"]').val();

        if (parseFloat(upperlimit) < parseFloat(lowerlimit)) {


            NotificationMessage({ 'type': 'error', 'heading': 'info', 'message': 'Sales Price Should be less or Equal to MRP' });



        }
        else {

            console.log('inside limit check else');

        }


    }

       function getfunctionAssign(ele) {

               let $thisForm = $(ele).closest('[perfect-class="form"]');
          
        let productId = {
             __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
            ProductID: $thisForm.find('[name="FK_Product"]').val()
         };
                $.ajax({
                 url: '@Url.Action("GetProductCategory", "OfferSettings")',
                type: "POST",
                    data: productId ,
                  dataType: "json",
                    contentType: "application/x-www-form-urlencoded;charset=utf-8",
                    success: function (ajaxOutput) {//<----- if ajax method executed succesfully,  we get the data passed from controller in this variable  => success: function (variable) {

                        if (ajaxOutput.Process.IsProcess) {

                            if (ajaxOutput.Data) {
                           
                                $thisForm.find('[name="FK_Category"]').val(ajaxOutput.Data[0].FK_Category).selectpicker('refresh');
                              

                            }

                        }

                    },
                    complete: function () {
                       
                    }


            });

    }

</script>