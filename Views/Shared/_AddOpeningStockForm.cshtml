
@model PerfectWebERP.Models.OpeningStockModel.OpeningStockListModel
<style>
</style>

<div class="card ">

    <div class="card-header">
        <h4 class="card-title col-12">Opening Stock<span class="badge light badge-success float-right" ></span></h4>
    </div>
    <div class="card-body">
        <form id="" class="form-valide" perfect-class="form" action="#" method="post" perfect-onFormSuccess="">
            <div class="">
                @Html.AntiForgeryToken()
                <div class="row">
                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Branch</span>
                               
                            </label>

                            <div class="col-sm-8">
                                <select class="form-control " perfect-tempTable-Opening="Branch" name="BranchID" perfect-selectButton="BranchName" perfect-selectButtonAction="BranchAdding" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" data-live-search="true">

                                  

                                    @if (!(Model.BranchList is null))
                                    {
                                        foreach (var branchList in Model.BranchList)
                                        {
                                            <option value="@branchList.BranchID">@branchList.BranchName</option>
                                        }

                                    }

                                </select>

                                <input type="hidden" name="LastID" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" value="@Model.LastID" />
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Department</span>
                             
                            </label>
                            <div class="col-sm-8">
                               
                                <select class="form-control " perfect-tempTable-Opening="Department" name="DepartmentID" perfect-selectButtonAction="testing" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select">
                                

                                    @if (!(Model.DepartmentList is null))
                                    {
                                        foreach (var DepartmentModule in Model.DepartmentList)
                                        {
                                            <option value="@DepartmentModule.DepartmentID">@DepartmentModule.DepartmentName</option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Mode</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">


                                <select class="form-control " perfect-tempTable-Opening="Mode" name="Mode" perfect-selectButtonAction="testing" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" onchange="clearproduct(this)">
                                    <option value="">Please Select </option>


                                    @if (!(Model.ModeList is null))
                                    {
                                        foreach (var Module in Model.ModeList)
                                        {
                                            <option value="@Module.Mode">@Module.ModeName</option>
                                        }
                                    }
                                </select>
                                <span class="temptableError"></span>
                            </div>

                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Product</span>
                                <span class="text-danger">*</span>

                            </label>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <input type="text" class="form-control" name="Product" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" perfect-tempTable-Opening="Product" disabled />
                                    <input type="hidden" name="ProductID" class="form-control" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" perfect-tempTable-Opening="ProductID" />
                                 
                                    <div class="input-group-append">
                                      
                                        <button id="addaccounthead-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchValAssign(this,58,'Product Details',[])" Criterea3="Mode" BindName="Product" BindVal="ProductID"></button>
                                    </div>
                                    <span class="temptableError"></span>

                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Serial Number</span>

                            </label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control " perfect-tempTable-Opening="SerialNumber" placeholder="" name="SerialNumber" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" value="@Model.SerialNumber" onkeypress="return blockSpecialChars(event)" disabled />
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel"></span>

                            </label>
                            <div class="col-sm-8">


                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">M R P</span>

                            </label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control text-right" perfect-tempTable-Opening="MRP" placeholder="" name="MRP"oninput="decimalpnt(this,'MRP',3)" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" min="1" maxlength="9" onchange="checkmrpsalesrate(this,'Opening')" />
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Sales Price</span>

                            </label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control text-right" perfect-tempTable-Opening="SalPrice" placeholder="" name="SalPrice"oninput="decimalpnt(this,'SalPrice',3)" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" min="1" maxlength="9" onchange="checkmrpsalesrate(this,'Opening')" />
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Product Cost</span>
                                
                            </label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control text-right" perfect-tempTable-Opening="ProductionCost" placeholder="" name="ProductionCost"oninput="decimalpnt(this,'ProductionCost',3)" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" min="1" maxlength="9" />
                               
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Purchase Rate</span>

                            </label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control text-right" perfect-tempTable-Opening="PurRate" placeholder="" name="PurRate"oninput="decimalpnt(this,'PurRate',3)" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" min="1" maxlength="9"  onchange="checkmrpsalesrate(this,'Opening')" />
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Opening Quantity</span>

                            </label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control text-right" perfect-tempTable-Opening="OpeningQuantity" placeholder="" name="OpeningQuantity"oninput="decimalpnt(this,'OpeningQuantity',4)" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" min="0" maxlength="9"  />
                            </div>
                        </div>
                    </div>

                 

                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel"> Stand By Quantity</span>

                            </label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control text-right" perfect-tempTable-Opening="OpeningStbyQuantity" placeholder=""oninput="decimalpnt(this,'OpeningStbyQuantity',4)" name="OpeningStbyQuantity" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" min="0" maxlength="9" />
                            </div>
                        </div>
                    </div>

                    <hr />

                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Q R Code</span>

                            </label>
                            <div class="col-sm-8">
                                @*<input type="text" class="form-control perfectValidate_specialcode_nm" perfect-tempTable-Opening="QRCode" placeholder="" name="QRCode" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" maxlength="15" />*@
                                <input type="text" class="form-control perfectValidate_specialcode_nm " perfect-tempTable-Opening="QRCode" placeholder="" name="QRCode" perfect-class="formGroupControl" perfect-ctype="input" onkeypress="filterSpecialCharacters(event)" perfect-css="input" maxlength="15" />

                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Bar Code</span>

                            </label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control perfectValidate_specialcode_nm " perfect-tempTable-Opening="BarCode" name="BarCode" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" onkeypress="return blockSpecialChars(event)" maxlength="15" />
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Batch No</span>

                            </label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control perfectValidate_specialcode_nm" perfect-tempTable-Opening="BatchNo" name="BatchNo" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" onkeypress="filterSpecialCharacters(event)"    maxlength="15" />
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Expiry date</span>

                            </label>
                            <div class="col-sm-6">
                                <input type="date" class="form-control" perfect-tempTable-Opening="ExpiryDate" name="ExpiryDate" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" max="2050-01-01" />


                            </div>

                            <button class="btn btn-primary1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" title="Add Opening Stock" onclick="fn_openStock_temptable(this, 'Opening',['ProductID'],['ProductionCost','SerialNumber','QRCode','BarCode','SalPrice','MRP','Department','Branch','OpeningStbyQuantity','OpeningQuantity','ExpiryDate','BatchNo','PurRate'])"><i class="fa fa-plus" aria-hidden="true"></i></button>


                            &nbsp;<button id="btnOpeningStockReset" class="btn btn-light1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" onclick="clearopeningproducts(this,'Opening')"><i class="fa fa-refresh" aria-hidden="true"></i></button>
                        </div>
                 
                    </div>
                
                    <div class="col-sm-12">
                        <div class="table-responsive" perfect-tempTable="Opening" perfect-tempTable-lastindex="0" perfect-tempTable-action="0"></div>
                    </div>
                </div>
                <div class="card-footer text-right" perfect-class="formFooter">
                  
                    <button id="addcompany-jq-addnewuser" type="button" class="btn btn-primary mr-3 " name="add" perfect-css="button" onclick="AddOpeningStock(this)"><i class="fa fa-refresh fa-spin loaderClass "></i>Save</button>
                    <button type="button" class="btn btn-light" perfect-css="button" onclick="ResetButton(this)" name="reset">Clear</button>
                </div>
            </div>
        </form>
    </div>
</div>

<script>
    (function () {

        jQuery("select").selectpicker();
     
    })();

    $(document).ready(function () {


        let $thisForm = $(this).find('[perfect-class="form"]');
       

        $thisForm.validate({ messages: validationMessage });

       

        var today = new Date();
        var day = today.getDate() > 9 ? today.getDate() : "0" + today.getDate(); // format should be "DD" not "D" e.g 09
        var month = (today.getMonth() + 1) > 9 ? (today.getMonth() + 1) : "0" + (today.getMonth() + 1);
        var year = today.getFullYear();

        $thisForm.find('[name="ExpiryDate"]').attr('min', year + "-" + month + "-" + day);


    });
    function ResetButton(ele) {


       
        fn_openingstockIndex_initialLoad();
    }

    function clearopeningproducts(ele, tablekey) {

        let $thisform = $(ele).closest('[perfect-class="form"]');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="select"]').val('').selectpicker('refresh');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="date"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="hidden"]').val('');
        let $tblcontainer = $thisform.find('[perfect-tempTable="' + tablekey + '"]');
        $tblcontainer.attr('perfect-tempTable-action', 0);
        Getbranchdepartmentdefault();
        //fn_openingstockIndex_initialLoad();

        if (tablekey = "Opening") {

        }

    }          
    function getfunctionAssign(ele) {

    }

    function decimalpnt(ele, name, range) {

        let input = $('#' + name);
        ele.value = ele.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');
        let t = ele.value;
        ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t;
        input.on('keydown', function () {
            if (ele.value.includes('.')) {

            }
            var key = event.keyCode || event.charCode;
            if (key == 8 || key == 46) { }
            else {
                if (ele.value.length == 9) {
                    ele.value = ele.value + '.';
                }
            }

        });

    }
    function blockSpecialChars(e) {
        var k;
        document.all ? k = e.keyCode : k = e.which;
        return ((k > 64 && k < 91) || (k > 96 && k < 123) || k == 8 || k == 32 || (k >= 48 && k <= 57) || k >= 96 && k <= 105);
    }
    function clearproduct(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        $thisForm.find('[name=ProductID]').val(0);
        $thisForm.find('[name=Product]').val('');
    }
    function checkmrpsalesrate(ele, tkey) {


        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let tableKey = tkey;
             

        let upperlimit = $thisForm.find('[perfect-tempTable-' + tableKey + '="MRP"]').val();
                   let lowerlimit = $thisForm.find('[perfect-tempTable-' + tableKey + '="SalPrice"]').val();
             
               if (parseFloat(upperlimit) < parseFloat(lowerlimit)) {
                 

                   NotificationMessage({ 'type': 'error', 'heading': 'info', 'message': 'Sales Price Should be less or Equal to MRP' });
                

      
               }
               else {
                 
                   console.log('inside limit check else')
                 
               }


        }

    


    
    function getproductdetails(ele) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let ModeID = $(ele).val();
    
        let Mode = { Mode: $thisForm.find('[name="Mode"] option:selected').val() };

        console.log("Mode :", Mode);

                $.ajax({
                 url: '@Url.Action("GetBindproductdata", "OpeningStock")',//<----- Controller URL : url path in our controller eq: /Home/InsertSampleData or http://localhost:64212/Home/InsertSampleData
                    type: "POST",
                    data: Mode,
                  dataType: "json",
                    contentType: "application/x-www-form-urlencoded;charset=utf-8",
                    success: function (ajaxOutput) {//<----- if ajax method executed succesfully,  we get the data passed from controller in this variable  => success: function (variable) {
                       // console.log("Data", data);

                        if (ajaxOutput.Process.IsProcess) {
                            var productModel = createSelectList({ data: ajaxOutput.Data, hideColumn: ['ProductID'] });
                            productModel.then(function (ret) {
                                if (ret) {
                                    console.log('>_ Search button > list click', ret);
                                    $thisForm.find('[name=ProductID]').val(ret.ProductID);
                                    $thisForm.find('[name=Product]').val(ret.Product);
                                    $thisForm.find('[name=ProdHSNCode]').val(ret.ProdHSNCode);

                                }
                                else {
                                    console.log(ret);
                                }
                            });
                        }
                        else {
                            $.each(ajaxOutput.Process.Message, function (key, value) {
                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                            });
                        }





                },


            });


    }

    
     function Getbranchdepartmentdefault() {
         let $thisForm = $('[perfect-class="form"]');
         $.ajax({
             url: '@Url.Action("GetEmployeeLeadDefault", "LeadGeneration")',
             type: "Get",
             dataType: "json",
             contentType: "application/json",
             success: function (ajaxOutput) {//<----- if ajax method executed succesfully,  we get the data passed from controller in this variable  => success: function (variable) {

                 if (ajaxOutput.Process.IsProcess) {
                   
                     $.each(ajaxOutput.Data, function (key, value) {

                         console.log('>_ Search button > list click', value);

                     
                         $thisForm.find('[name=BranchID]').val(value.ID_Branch).selectpicker('refresh');
                         $thisForm.find('[name=DepartmentID]').val(value.FK_Department).selectpicker('refresh');


                     });


                 

                 }
                 else {
                     $.each(ajaxOutput.Process.Message, function (key, value) {
                         NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                     });
                 }

             },


         });


    }



    // Function to add new OpeningStock

          function AddOpeningStock(ele) {
              debugger;
           let $thisForm = $(ele).closest('[perfect-class="form"]');//<------Form element :  Our Form which contain our input elements ,saved in a variable for reusability


              let prevData = [];
              $thisForm.find('[perfect-tempTable="Opening"]').find('table > tbody').find('tr').each(function () {

                  prevData.push($(this).data('pData'));

              })

              if ($thisForm.valid() && prevData.length != 0) {
                

                  $(ele).prop('disabled', true); // avoiding form submit the double click



                  console.log("prevData >", prevData)
                  var inputData = {//<---- Input Json : this is the variable we pass to controller
                      __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                      LastID: $thisForm.find('[name=LastID]').val(),
                      TransMode: OpeningStockTransMode,
                      'OpeningStockListxmls': prevData
                  }

                  $thisForm.find('[name=LastID]').val(0);
                  console.log('> Add OpeningStock ajax input', inputData);


                  $.ajax({
                      url: "@Url.Action("AddNewOpeningStock", "OpeningStock")",
                      type: "POST",

                      data: inputData,//<---- Input json : data passed to controller
                      dataType: "json",
                      contentType: 'application/x-www-form-urlencoded;charset=utf-8',
                      success: function (ajaxOutput) {//<----- if ajax method executed succesfully,  we get the data passed from controller in this variable  => success: function (variable) {

                          if (ajaxOutput.Process.IsProcess) {

                              $.each(ajaxOutput.Process.Message, function (key, value) {
                                  //toastr.success(value, "Success");
                                  NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                              });
                              $thisForm.find('[perfect-ctype="select"]').val('').selectpicker('refresh');
                              $thisForm.find('[perfect-ctype="input"]').val('');
                              $thisForm.find('[perfect-ctype="number"]').val('');
                              $thisForm.find('[perfect-ctype="date"]').val('');


                              //let onSuccess = $thisForm.attr('perfect-onFormSuccess')

                              //if (onSuccess) {
                                  //window[onSuccess]($thisForm);
                                  fn_openingstockIndex_initialLoad();
                             // }

                              //---------- Do stuff if success

                              console.log('> Add new OpeningStock success data', ajaxOutput);
                          }
                          else {
                              $.each(ajaxOutput.Process.Message, function (key, value) {
                                  //toastr.warning(value, "Error");
                                  NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                              });
                          }
                      },
                      complete: function () {
                          $(ele).prop('disabled', false);
                      }

                  });

              }
              else {

                  NotificationMessage({ 'type': 'error', 'heading': 'info', 'message': 'Please check whether  All Mandatory(*) Fields Where Filled And  Enter Opening Quantity Or Opening Stand By Quantity' });
                  
                 
              }

        }




    var tableOptionsTempOut = {
        iconButton: {
            buttons: [
              
                {
                    icon: "fa fa-pencil btnPerfectGridEdit",
                   
                    action: function () {
                        let savedData = $(this).closest('tr').data('pData')

                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let tableKey = $tablecontainer.attr('perfect-tempTable');
                        let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                        //index attribute name in table row
                        let indexname = tableKey + 'index';
                        //index number in table row
                        let rindex = $(this).closest('tr').attr(indexname);
                        $tablecontainer.attr('perfect-tempTable-action', rindex);

                        console.log('Editclick', savedData);
                        //filling data in available inputs
                        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                            let $thisNode = $(this);
                            let pf_name = $thisNode.attr('name');
                            if ($thisNode.is('select')) {

                                $thisNode.val(savedData[pf_name]).selectpicker('refresh');
                            }
                            else if ($thisNode.is('input')) {

                                if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                    $thisNode.prop('checked', savedData[pf_name]);
                                }
                                else {
                                    $thisNode.val(savedData[pf_name]);
                                }

                            }
                            else {
                                $thisNode.val(savedData[pf_name]);
                            }


                        });



                    }
                },
                {

                    icon: "fa fa-trash btnPerfectGridDelete",
                    action: function () {
                        let $thistbl = $(this).closest('table');
                        let table = $thistbl.DataTable();
                        table.destroy();
                        if ($(this).closest('tbody').find('tr').length > 1) {
                            $(this).closest('tr').remove();
                            pft_table_slreset($thistbl);
                            //  $thistbl.dataTable({ paging: true });
                        }
                        else {
                            $thistbl.remove();
                        }
                        $("#btnOpeningStockReset").click();
                    }
                },
            ]
        },
        onlyShowColumn: [],
        hideColumn: [],
        serialNo: true,
        renameHeader: { },
        rowAttribute: [],
        isCheckType: [],
        isDateType: ["ExpiryDate"],
        //rowClickAction
    };

    
    
    function fn_openStock_temptable(ele, tkey, uniq, remov = []) {
        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let tableKey = tkey;
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');

        let insertData = {};
        let tableOptionsTemp = tableOptionsTempOut;

        let unique = (uniq) ? uniq : [];
        let notValidate = (remov) ? remov : [];

        let isValid = true;
        let isValidPrice = true;
        let errorClass = '.temptableError';

        //make index

        let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
        let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
        let indexname = tkey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);
        let updateCond = '';
        let isNew = true;
        if (thisactionIndex > 0) {
            //means update
            insertData[indexname] = thisactionIndex;
            updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
            isNew = false;
        }
        else {
            //insert
            insertData[indexname] = lastIndex + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
            isNew = true;
           
        }


  
        let upperlimit = $thisForm.find('[perfect-tempTable-' + tableKey + '="MRP"]').val();
        let lowerlimit = $thisForm.find('[perfect-tempTable-' + tableKey + '="SalPrice"]').val();
        if (parseFloat(upperlimit) < parseFloat(lowerlimit)) {
     
     
            isValidPrice = false;
            $thisForm.find('[perfect-tempTable-' + tableKey + '="OpeningQuantity"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Sales Price Should be less or Equal to MRP');



            NotificationMessage({ 'type': 'error', 'heading': 'info', 'message': 'Sales Price Should be less or Equal to MRP' });
           

        }

        let expirydate = $thisForm.find('[name="ExpiryDate"]').val();
      
        var enqDate = new Date(expirydate);

        enqDate.setHours(0, 0, 0, 0)

        var todays = new Date();
        todays.setHours(0, 0, 0, 0)

        let $this = $(this);
        //let errorClass = '.temptableError';
    
      //  if (enqDate < todays || expirydate =='') {
            if (enqDate < todays) {
            isValid = false;
            $thisForm.find('[perfect-tempTable-' + tableKey + '="ExpiryDate"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter A Valid date and be a future date');
        }

      

        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="OpeningQuantity"]').val().length < 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="OpeningQuantity"]').val().length == '' || $thisForm.find('[perfect-tempTable-' + tableKey + '="OpeningQuantity"]').val().length == undefined || $thisForm.find('[perfect-tempTable-' + tableKey + '="OpeningQuantity"]').val() == 0) {
            if ($thisForm.find('[perfect-tempTable-' + tableKey + '="OpeningStbyQuantity"]').val().length < 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="OpeningStbyQuantity"]').val().length == '' || $thisForm.find('[perfect-tempTable-' + tableKey + '="OpeningStbyQuantity"]').val().length == undefined || $thisForm.find('[perfect-tempTable-' + tableKey + '="OpeningStbyQuantity"]').val() == 0 ) {

                isValid = false;
                $thisForm.find('[perfect-tempTable-' + tableKey + '="OpeningQuantity"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter The Opening Stand by Quantity OR Opening Quantity');

                NotificationMessage({ 'type': 'error', 'heading': 'info', 'message': 'Please Enter Opening Quantity Or Opening Stand By Quantity' });
             
            }

        }


     
        //empty field vaidation
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
            let $this = $(this);
            let headerName = $this.attr('perfect-tempTable-' + tableKey);
            let nameAttr = $this.attr('name');
            let $errorElement = $this.closest('[perfect-class="formGroup"]').find(errorClass);
      
          
            if (!notValidate.includes(headerName)) {
                if ($this.is('select')) {
                    if ($this.val().length > 0) {
                        //something selected
                        $errorElement.text('');
                    }
                    else {
                        //noting selected
                        isValid = false;
                        $errorElement.text('Please Select ' + headerName);
                        //console.log('reee' + headerName)
                    }
                }

             
                else if ($this.is('input')) {

                    let inputType = $this.attr('type').toLocaleLowerCase();

                    if (inputType == 'checkbox') {

                        //if need any not checked validation do it here
                    }
                    else if (inputType == 'hidden') {

                        //if need any not checked validation do it here
                    }
                    else {
                        if ($this.val().length > 0) {
                            //something selected
                            $errorElement.text('');
                        }
                        else {
                            //noting selected
                            isValid = false;
                            $errorElement.text('Please Enter ' + headerName);

                        }
                    }
                }
            }
        });




        if (unique.length > 0) {
            //getting previous data
            let prevData = [];
            $tblcontainer.find('table > tbody').find('tr').each(function () {
                if (isNew) {
                    prevData.push($(this).data('pData'));
                }
                else {
                    if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                        prevData.push($(this).data('pData'));
                    }

                }
               
            })
            // console.log('previous data', prevData);

           
            unique.forEach(function (key, i) {

                console.log('unid -> key:' + key + "| index :" + i);
                let $thisEle = $thisForm.find('[perfect-tempTable-' + tableKey + '="' + key + '"]');
                let headerEleName = $thisEle.attr('perfect-tempTable-' + tableKey);
                let atname = $thisEle.attr('name');
                let cvalue;

                //console.log('len')
                if ($thisEle.length != 0) {
                    let $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
                    let errmessage =  "  Product Already exits"

                    //getting current value in cval
                    if ($thisEle.is('select')) {
                        cvalue = $thisEle.val();
                    }
                    else if ($thisEle.is('input')) {

                        let inputEleType = $thisEle.attr('type').toLocaleLowerCase();

                        if (inputEleType == 'checkbox') { cvalue = $thisEle.is(':checked'); }
                        else if (inputEleType == 'hidden') { cvalue = $thisEle.val(); }
                        else { cvalue = $thisEle.val(); }
                    }
                    else { cvalue = $thisEle.val(); }

                  

                    //searching in previous data
                    if (prevData.find(a => a[atname] == cvalue)) {
                       
                        $errorElement.text(errmessage);
                        isValid = false;
                    }
                }
            });

        }
       
       
        if (isValid && isValidPrice == true) {
            
            // this section make table column data
            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                console.log('1', headerName);

                if ($this.is('select')) {

                    tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                    tableOptionsTemp.hideColumn.push(nameAttr)
                    //displat text of select
                    let selectText = ($this.val().length == 0) ? '' : $this.children(":selected").text();
                    insertData[nameAttr + '_d'] = selectText;

                    // insertData[nameAttr + '_d'] = $this.children(":selected").text();
                    insertData[nameAttr] = $this.val();


                    //clear field
                    $this.val('').selectpicker('refresh');
                }
                else if ($this.is('input')) {
                  
                    let inputType = $this.attr('type').toLocaleLowerCase();

                    if (inputType == 'checkbox') {

                        insertData[nameAttr] = $this.is(':checked');

                        //clear field
                        $this.prop('checked', false);

                    }
                    else if (inputType == 'hidden') {

                        tableOptionsTemp.hideColumn.push(nameAttr)
                        insertData[nameAttr] = $this.val();

                        //clear field
                        $this.val('');
                    }
              
                    else if (inputType == 'date') {
                     
                        if ($this.val() == '') {
                        
                            insertData[nameAttr] = '';
                             
                        }
                        else {
                            
                            insertData[nameAttr] = moment($this.val()).format('YYYY-MM-DD');
                            $this.val(moment().format('YYYY-MM-DD'));
                        }

                    }       
                    else {
                        
                        insertData[nameAttr] = $this.val();
                        if (headerName == 'SerialNumber') {
                            insertData[nameAttr] = $this.val();
                        }
                        else {
                            $this.val('');
                        }
                        //clear field
                       
                    }
                }
                else {
                    insertData[nameAttr] = $this.val();

                    //clear field
                    $this.val('');
                }
                console.log('inserti', insertData[nameAttr])
                Getbranchdepartmentdefault();
              
            });

            if (isNew) {
                //this section nake table.table row
                if ($tblcontainer.find('table').length == 0) {
                    $tblcontainer.append(pft_table_createtable([insertData], tableOptionsTemp));
                    //$tblcontainer.find('table').dataTable({ paging: false, ordering: false });
                }
                else {
                    let table = $tblcontainer.find('table').DataTable()
                    table.destroy()
                    pft_table_addTableRow($tblcontainer.find('table'), insertData, tableOptionsTemp);


                }
            }
            else {
                let table = $tblcontainer.find('table').DataTable()
                table.destroy()
                pft_table_replaceTableRow($tblcontainer.find('table'), updateCond, insertData, tableOptionsTemp);


                //$tblcontainer.find('table').dataTable({ paging: false, ordering: false });
            }

            // resetting the edit value
            $tblcontainer.attr('perfect-tempTable-action', 0);
        }
    }





    var tableOptionsTempOut = {
        iconButton: {
            buttons: [
                {
                    icon: "fa fa-pencil btnPerfectGridEdit",
                    action: function () {
                        let savedData = $(this).closest('tr').data('pData')

                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let tableKey = $tablecontainer.attr('perfect-tempTable');
                        let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                        //index attribute name in table row
                        let indexname = tableKey + 'index';
                        //index number in table row
                        let rindex = $(this).closest('tr').attr(indexname);
                        $tablecontainer.attr('perfect-tempTable-action', rindex);

                        console.log('Editclick', savedData);
                        //filling data in available inputs
                        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                            let $thisNode = $(this);
                            let pf_name = $thisNode.attr('name');
                            if ($thisNode.is('select')) {

                                $thisNode.val(savedData[pf_name]).selectpicker('refresh');
                            }
                            else if ($thisNode.is('input')) {

                                if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                    $thisNode.prop('checked', savedData[pf_name]);
                                }
                                else {
                                    $thisNode.val(savedData[pf_name]);
                                }

                            }
                            else {
                                $thisNode.val(savedData[pf_name]);
                            }


                        });



                    }
                },
                {
                    icon: "fa fa-trash btnPerfectGridDelete",
                    action: function () {
                        let $thistbl = $(this).closest('table');
                        let table = $thistbl.DataTable();
                        table.destroy();
                        if ($(this).closest('tbody').find('tr').length > 1) {
                            $(this).closest('tr').remove();
                            pft_table_slreset($thistbl);
                           // $thistbl.dataTable({ paging: false, ordering: false });
                        }
                        else {
                            $thistbl.remove();
                        }
                        $("#btnOpeningStockReset").click();
                    }
                },
              
            ]
        },
        onlyShowColumn: [],
        hideColumn: [],
        serialNo: true,
        isDateType: ["ExpiryDate"],
        renameHeader: {
            'SerialNumber':'Serial Number1R','MRP':'MRP1R','SalPrice':'Sal Price1R','ProductionCost': 'Product Cost1R', 'OpeningQuantity': 'Opening Qty1R', 'OpeningStbyQuantity': 'Stand By Qty1R','PurRate':'Pur Rate1R'
         

        },
        rowAttribute: []

    };
    function filterSpecialCharacters(event) {
        var input = event.target;
        var keyCode = event.which || event.keyCode;
        // Check if the pressed key is the pipe symbol (|)
        if (String.fromCharCode(keyCode) === '|') {
            // Prevent the default action of inserting the character
            event.preventDefault();
        }
    }

</script>



