

@model PerfectWebERP.Models.ProductionWiseServiceModel.PrdwiseViewList
<style>
</style>
<div class="card ">

    <div class="card-header">
        <h4 class="card-title col-12">Product Wise Service</h4>
        <span title="To View List" onclick="fn_showListView();"><svg id="Layer_1" class="layer" stroke="currentColor" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" height="20" width="20" viewBox="0 0 122.88 122.54"><title>To View List</title><path class="viewlst" d="M4.69,0H46.22a4.71,4.71,0,0,1,4.69,4.69V46a4.69,4.69,0,0,1-4.69,4.69H4.69a4.65,4.65,0,0,1-3.31-1.38l-.09-.09A4.67,4.67,0,0,1,0,46V4.69A4.71,4.71,0,0,1,4.69,0ZM89.44,61.94a26.56,26.56,0,0,1,10.18,2l.07,0a26.61,26.61,0,0,1,15.25,32.16,26.18,26.18,0,0,1-2.7,6.11l10.3,11.24a1.27,1.27,0,0,1-.07,1.8l-7.57,6.9a1.27,1.27,0,0,1-1.79-.07l-9.86-10.85a26.36,26.36,0,0,1-6.1,2.74,26.87,26.87,0,0,1-7.71,1.13,26.51,26.51,0,0,1-10.17-2l-.07,0A26.64,26.64,0,0,1,64.85,78.37l0-.07A26.6,26.6,0,0,1,89.44,61.94Zm15,11.59a21.38,21.38,0,0,0-6.89-4.61l-.06,0a21.22,21.22,0,0,0-23.07,4.64l-.07.07a21.25,21.25,0,0,0-4.54,6.83l0,.06a21.32,21.32,0,0,0-1.58,8.06,21.26,21.26,0,0,0,29.35,19.62,21.54,21.54,0,0,0,6.89-4.61l.07-.07a21.09,21.09,0,0,0,4.54-6.83l0-.06a21.35,21.35,0,0,0,0-16.17,21.34,21.34,0,0,0-4.62-6.9ZM4.69,63.2H46.22a4.71,4.71,0,0,1,4.69,4.7v41.34a4.68,4.68,0,0,1-4.69,4.69H4.69A4.69,4.69,0,0,1,0,109.24V67.9a4.71,4.71,0,0,1,4.69-4.7ZM68.78,0h41.53A4.71,4.71,0,0,1,115,4.69V46a4.71,4.71,0,0,1-4.69,4.69H68.78A4.71,4.71,0,0,1,64.09,46V4.69a4.69,4.69,0,0,1,1.37-3.31l.1-.09A4.67,4.67,0,0,1,68.78,0Z"></path></svg></span>
    </div>
    <div class="card-body">
        <form id="" class="form-valide" perfect-class="form" action="#" method="post" perfect-onFormSuccess="">
            <div class="">
                @Html.AntiForgeryToken()
                <div class="row">
                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">

                                <span perfect-class="formGroupLabel">Category</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <select class="form-control perfectValidate_numeric" name="CategoryID" id="Categoryid" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" data-live-search="true" onchange="clearproduct(this)">

                                    <option value="">Please Select </option>

                                    @if (!(Model.CategoryList is null))
                                    {
                                        foreach (var categorylist in Model.CategoryList)
                                        {
                                            <option value="@categorylist.CategoryID">@categorylist.Category</option>
                                        }

                                    }

                                </select>

                            </div>

                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Product</span>
                                @*<span class="text-danger">*</span>*@
                            </label>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <input type="text" class="form-control " name="Product" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled />
                                    <input type="hidden" name="PrdID" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                    <div class="input-group-append">

                                        <button id="addproduct-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchValAssign(this,85,'Product List',[],['MinRate','MaxRate'])" Criterea1="CategoryID" Criterea2="0" BindName="Product" BindVal="PrdID"></button>

                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Effected Date</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="date" class="form-control perfectValidate_date" name="EffectDate" id="EffectDate" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" max="2050-01-01" min="1970-01-01">

                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6" style="display:none;">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Tax Group</span>
                                @*<span class="text-danger">*</span>*@

                            </label>
                            <div class="col-sm-6">
                                <select class="form-control perfectValidate_string_nm" name="TaxGroupID" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select">
                                    <option value="0">Please Select </option>

                                    @if (!(Model.TaxgroupList is null))
                                    {
                                        foreach (var unit in Model.TaxgroupList)
                                        {
                                            <option value="@unit.TaxGroupID">@unit.TaxGroupName</option>
                                        }
                                    }

                                </select>
                            </div>
                            &nbsp; &nbsp; &nbsp; &nbsp;
                            <label class="form-check-label" perfect-class="formCheckLabel">
                                <input type="checkbox" class="form-check-input" name="IncludeTax" perfect-class="formCheckInput" perfect-ctype="checkbox" perfect-css="checkbox">Include Tax
                            </label>
                        </div>
                    </div>
                    <div class="card " id="subproductdetailsdiv">
                        <div class="card-header">
                            <h4 class="card-title col-12">Sub Product Details</h4>

                        </div>
                        <div class="card-body">

                            <div class="row">
                                <div class="col-sm-6">

                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-4 col-form-label">
                                            <span perfect-class="formGroupLabel">Sub Product</span>
                                          
                                        </label>

                                        <div class="col-sm-8">
                                            <div class="input-group">
                                                <input type="text" class="form-control" name="SubProduct" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" perfect-tempTable-cstatus="SubProductName" disabled />
                                                <input type="hidden" name="SubProductID" class="form-control" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" perfect-tempTable-cstatus="SubProductID" />
                                                <div class="input-group-append">
                                                   
                                                    <button id="addsubproduct-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchVal(this,87,'Sub Product List',[])" Criterea1="PrdID" Criterea2="0" BindName="SubProduct" BindVal="SubProductID"></button>
                                                </div>

                                            </div>
                                            <span class="invalid-feedback animated fadeInUp d-block temptableError"></span>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-4 col-form-label">
                                            <span perfect-class="formGroupLabel">Service</span>
                                            <span class="text-danger">*</span>
                                        </label>
                                        <div class="col-sm-8">
                                            <select class="form-control Subproduct" name="ServiceID" perfect-class="formGroupControl" data-id="subtableservice-error" onchange="Setservice(this)" perfect-ctype="select" perfect-css="select" perfect-tempTable-cstatus="Service">
                                                <option value="">Please Select </option>
                                                @if (!(Model.ServiceList is null))
                                                {
                                                    foreach (var services in Model.ServiceList)
                                                    {
                                                        <option value="@services.ServiceID">@services.ServiceList</option>
                                                    }
                                                }
                                            </select>
                                            <div id="subtableservice-error" class="invalid-feedback animated fadeInUp  temptableError" style="display: none;"></div>
                                        </div>
                                       
                                    </div>
                                   
                                </div>
                                <div class="col-sm-6">
                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-4 col-form-label">
                                            <span perfect-class="formGroupLabel">Period Type</span>

                                        </label>
                                        <div class="col-sm-8">
                                            <select class="form-control" name="ID_Mode" perfect-class="formGroupControl" data-id="" perfect-ctype="select" perfect-css="select" perfect-tempTable-cstatus="Period Type">
                                                <option value="">Please Select </option>
                                                @if (!(Model.PerdList is null))
                                                {
                                                    foreach (var perdtyp in Model.PerdList)
                                                    {
                                                        <option value="@perdtyp.ID_Mode">@perdtyp.ModeName</option>
                                                    }
                                                }
                                            </select>
                                            @*<div id="subtableperiodmode-error" class="invalid-feedback animated fadeInUp  temptableError" style="display: none;">Select Period Type.</div>*@
                                        </div>

                                        @*<span class="temptableError"></span>*@
                                    </div>
                                </div>


                                <div class="col-sm-6">
                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-4 col-form-label">
                                            <span perfect-class="formGroupLabel">Period From</span>

                                        </label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control text-right perfectValidate_numeric_nm" placeholder="" id="Fromperiod" name="PeriodFrom" oninput="decimalpnt(this,'Fromperiod',3)" data-id="subtableperiodfrom-error" onchange="checkLimit(this)" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" perfect-tempTable-cstatus="PeriodFrom" @*value="0"*@ maxlength="9" />
                                        </div>
                                        <span class="invalid-feedback animated fadeInUp d-block temptableError"></span>
                                        <div id="subtableperiodfrom-error" class="invalid-feedback animated fadeInUp  temptableError" style="display: none;">Please enter A value if no value enter Zero.</div>
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-4 col-form-label">
                                            <span perfect-class="formGroupLabel">Period To</span>

                                        </label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control text-right perfectValidate_numeric_nm" id="toperiod" placeholder="" name="PeriodTo" oninput="decimalpnt(this,'toperiod',0)" data-id="subtableperiodto-error" onchange="checkLimit(this)" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" perfect-tempTable-cstatus="PeriodTo" @*value="0"*@ maxlength="9" />
                                            <div style="display: block;"></div>
                                        </div>
                                        <div id="subtableperiodto-error" class="invalid-feedback animated fadeInUp  temptableError" style="display: none;">Please enter A value if no value enter Zero.</div>
                                    </div>
                                </div>

                                <div class="col-sm-6">
                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-4 col-form-label">
                                            <span perfect-class="formGroupLabel">Service Cost <span class="text-danger">*</span></span>

                                        </label>
                                        <div class="col-sm-4">
                                            <input type="text" class="form-control text-right Subproduct" id="ServiceCostids" placeholder="" name="ServiceCost" oninput="decimalpnt(this,'ServiceCostids',3)" data-id="subtableservicecost-error" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" perfect-tempTable-cstatus="ServiceCost" @*value="0"*@ />
                                            <span id="subtableservicecost-error" class="invalid-feedback animated fadeInUp  temptableError" style="display: none;"></span>

                                        </div>
                                       
                                        <button class="btn btn-primary1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" title="Add" onclick="SubProductDetailsTable_create(this,'cstatus',[])"><i class="fa fa-plus" aria-hidden="true"></i></button>

                                      &nbsp;
                                        <button class="btn btn-light1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" onclick="clearsubproduct(this,'cstatus')"><i class="fa fa-refresh" aria-hidden="true"></i></button>

                                    </div>

                                </div>
                            </div>
                            <div class="row">

                              
                                <div class="col-sm-12 mt-2">

                                    <div class="table-responsive" perfect-tempTable="cstatus" perfect-tempTable-lastindex="0" perfect-tempTable-action="0">

                                    </div>
                                </div>
                              
                                <div class="row">
                                    <div class="col-sm-8">
                                        <div class="table-responsive " perfect-tempTable="ComplaintDetails" id="Emptable" style="display:none">
                                            <table class="table table-responsive-md" id="EMPL">
                                                <thead class="btn-primary" id="EMPLS">
                                                    <tr>
                                                        <th scope="col" style="text-align:center">SL.NO</th>

                                                        <th style="display:none; text-align:center"><strong>SubProductID</strong></th>
                                                        <th scope="col" style="text-align:center">SubProduct</th>
                                                        <th style="display:none; text-align:center"><strong>ServiceID</strong></th>
                                                        <th scope="col" style="text-align:center">Service</th>
                                                        <th style="display:none; text-align:center"><strong>ID_Mode</strong></th>
                                                        <th scope="col" style="text-align:center">Period Type</th>
                                                        <th scope="col" style="text-align:center">Period From</th>
                                                        <th scope="col" style="text-align:center">Period To</th>
                                                        <th scope="col" style="text-align:center">Service Cost</th>


                                                        <th scope="col" style="text-align:center"></th>


                                                    </tr>
                                                </thead>
                                                <tbody id="ComplaintDetailstbody">
                                                    <tr id="0">
                                                        <td style="text-align:center;" colspan="4">No Records..</td>
                                                    </tr>

                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                               
                            </div>

                        </div>
                    </div>

                </div>


                    <div class="card-footer text-right" perfect-class="formFooter">
                        @if (ViewBag.PagedAccessRights.UsrrlStAdd)
                        {
                            <button id="addcompany-jq-addnewuser" type="button" class="btn btn-primary mr-3 " onclick="fn_ProductwiseForm_add(this)" name="add" perfect-css="button"><i class="fa fa-refresh fa-spin loaderClass "></i>Save</button>
                        }
                        <button type="button" class="btn btn-light" perfect-css="button" onclick="ResetButton(this)" name="reset">Clear</button>
                    </div>
                </div>
        </form>
    </div>
</div>
<script src="~/Scripts/jqDOM/searchDOMCreation.js"></script>
<script>
    //load fn
    (function () {
      // jQuery('form').validate();//<-----  Validate/initialize our form on page load
        jQuery('select').selectpicker();
    })();


    $(document).ready(function () {
        var now = new Date();

        var day = ("0" + now.getDate()).slice(-2);
        var month = ("0" + (now.getMonth() + 1)).slice(-2);

        var today = now.getFullYear() + "-" + (month) + "-" + (day);

        $('#EffectDate').val(today);
       

    });

    function clearproduct(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        $thisForm.find('[name=PrdID]').val(0);
        $thisForm.find('[name=Product]').val('');
        $thisForm.find('[name=SubProduct]').val('');
        $thisForm.find('[name=SubProductID]').val(0);
    }
    function decimalpnt(ele, name, range, md) {
        debugger
        if (md == 1) {
            ele = $(this).find('[perfect-class="form"]');
        }
        let input = $('#' + name);
        ele.value = ele.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');
        let t = ele.value;
        ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t;
        input.on('keydown', function () {
            if (ele.value.includes('.')) {

            }
            var key = event.keyCode || event.charCode;
            if (key == 8 || key == 46) { }
            else {
                if (ele.value.length == 9) {
                    ele.value = ele.value + '.';
                }
            }

        });

    }
    function ResetButton(ele)
    {
      
        prdwiseInitialLoad();
     
    }

    function checkLimit(ele) {
        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        //invalid-feedback
        let upperlimit = $thisForm.find('[name="PeriodFrom"]').val();
        let lowerlimit = $thisForm.find('[name="PeriodTo"]').val();

        if (parseFloat(upperlimit) > parseFloat(lowerlimit)) {
            console.log('inside limit check if')
            $thisForm.find('[name="PeriodTo"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('PeriodTo  should be greater than PeriodFrom Position Limit')
        }
        else {
            console.log('inside limit check else')
            $thisForm.find('[name="PeriodTo"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('')
        }


    }

    @*function getProduct(ele)
    {
        let $thisForm = $(ele).closest('[perfect-class="form"]');

               //console.log("Input data",inputData)

                $.ajax({
                 url: '@Url.Action("GetPrdList", "ProductWiseService")',//<----- Controller URL : url path in our controller eq: /Home/InsertSampleData or http://localhost:64212/Home/InsertSampleData
                    type: "GET",


                dataType: "json",
                    contentType: "application/x-www-form-urlencoded;charset=utf-8",
                    success: function (ajaxOutput) {//<----- if ajax method executed succesfully,  we get the data passed from controller in this variable  => success: function (variable) {
                       // console.log("Data", data);

                        if (ajaxOutput.Process.IsProcess) {
                            var employeeModel = createSelectList({ data: ajaxOutput.Data, hideColumn: ['PrdID'] });
                            employeeModel.then(function (ret) {
                                if (ret) {
                                    console.log('>_ Search button > list click', ret);
                                    $thisForm.find('[name=PrdID]').val(ret.PrdID);
                                    $thisForm.find('[name=Product]').val(ret.Product);
                                }
                                else {
                                    console.log(ret);
                                }
                            });
                        }
                        else
                        {
                            $.each(ajaxOutput.Process.Message, function (key, value) {
                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                            });
                        }
                },


            });


    }*@



 
     
 // Function to Add Productwise
    function fn_ProductwiseForm_add(ele) {
        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
       // if ($thisForm.valid() && ValidateAddOtherProductservicedetails()) {//<------Form element :  Our Form which contain our input elements ,saved in a variable for reusability
        if ($thisForm.valid() && ($thisForm.find('[name="PeriodFrom"]').val() != null || $thisForm.find('[name="PeriodTo"]').val() != null)) {
          
            let upperlimit = $thisForm.find('[name="PeriodFrom"]').val();
            let lowerlimit = $thisForm.find('[name="PeriodTo"]').val();
            let periodtype = $thisForm.find('[name="ID_Mode"]').val();
            if (parseFloat(upperlimit) > parseFloat(lowerlimit)) {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'PeriodTo  should be greater than PeriodFrom Position Limit' });
            }
            //<---------Validation :  To Check whether the form is vaild(ie; values in the form contrls are valid)

          
            let prevData = [];

            let $tblcontainer = $thisForm.find('[perfect-tempTable="cstatus"]');
            $thisForm.find('[perfect-tempTable="cstatus"]').find('table > tbody').find('tr').each(function () {

                prevData.push($(this).data('pData'));

            })

            if (($tblcontainer.attr('perfect-tempTable-action')) != 0 && prevData.length == 1) { prevData = []; }


            if (prevData.length <= 0) {
               
                createItems(ele, function (result) {
                    if (result == 1) {
                        $thisForm.find('[perfect-tempTable="cstatus"]').find('tbody').find('tr').each(function () {
                            prevData.push($(this).data('pData'));
                        })
                    }


                })

            }
            

          
            if (prevData.length != 0) {

                $(ele).prop('disabled', true); // avoiding form submit the double click

                console.log("prevData >", prevData)
                var inputData = {//<---- Input Json : this is the variable we pass to controller
                    __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                    ID_ProductWiseServices: 0,
                    PrdID: $thisForm.find('[name=PrdID]').val().trim(),
                    CategoryID: $thisForm.find('[name=CategoryID]').val().trim(),
                    TransMode: localStorage.getItem("FRM_TRANSMODE"),
                    EffectDate: $thisForm.find('[name=EffectDate]').val().trim(),
                    TaxGroupID: $thisForm.find('[name="TaxGroupID"]').val(),
                    IncludeTax: $thisForm.find('[name="IncludeTax"]').is(':Checked'),
                    SubproductServiceDetails: prevData
                };

                localStorage.removeItem("FRM_TRANSMODE");
                console.log('> Add productwise ajax input', inputData);

                $.ajax({
                    url: "@Url.Action("AddNewProductWiseService", "ProductWiseService")",
                    type: "POST",
                    // headers: { "token_key": "1234" },
                    data: inputData,
                    dataType: "json",

                    contentType: "application/x-www-form-urlencoded; charset=utf-8",
                    success: function (ajaxOutput) {

                        if (ajaxOutput.Process.IsProcess) {

                            $.each(ajaxOutput.Process.Message, function (key, value) {
                                NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                            });
                            $thisForm.find('[perfect-ctype="select"]').val('').selectpicker('refresh');
                            $thisForm.find('[perfect-ctype="input"]').val('');
                            $thisForm.find('[perfect-ctype="date"]').val('');
                            // Get the value set in form's perfect-onFormSuccess attribute
                            let onSuccess = $thisForm.attr('perfect-onFormSuccess');

                            if (onSuccess) {
                                window[onSuccess]();
                            }
                        }
                        else {
                            $.each(ajaxOutput.Process.Message, function (key, value) {
                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });

                            });
                        }
                    },
                    complete: function () {
                        $(ele).prop('disabled', false);
                    }

                });

            }
            else {

                let $modal = createSearchModalDOM();

                let $message = '<span>Enter Atleast One Entry In Sub Product details</span>';
                $modal.modal.find('.modal-body')
                    .addClass('text-black')
                    .html($message);
                $modal.modal.find('.modal-title')
                    .addClass('text-primary')
                    .text('Message');

                $modal.modal.show();
            }



        }

    }

        


   

    function Setservice(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');

        if ($thisForm.find('[name="ServiceID"]').val() < 1) {
           
            $('.subproductdetailsdiv').hide();

        }
        else {
           
            $('.subproductdetailsdiv').show();
        }

    }
      
   





    ///Table///


    var tableOptionsTempOut = {
        iconButton: {
            buttons: [
                
                {
                    icon: "fa fa-pencil btnPerfectGridEdit",
                    action: function () {
                        let savedData = $(this).closest('tr').data('pData')

                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let tableKey = $tablecontainer.attr('perfect-tempTable');
                        let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                        //index attribute name in table row
                        let indexname = tableKey + 'index';
                        //index number in table row
                        let rindex = $(this).closest('tr').attr(indexname);
                        $tablecontainer.attr('perfect-tempTable-action', rindex);

                        console.log('Editclick', savedData);
                        //filling data in available inputs
                        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                            let $thisNode = $(this);
                            let pf_name = $thisNode.attr('name');
                            if ($thisNode.is('select')) {

                               
                                $thisNode.val(savedData[pf_name]).selectpicker('refresh');
                                if ($thisForm.find('[name="ServiceID"]').val() < 1) {
                                    $('.subproductdetailsdiv').hide();
                                }
                                else {
                                    $('.subproductdetailsdiv').show();
                                   
                                }
                            }
                            else if ($thisNode.is('input')) {

                                if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                    $thisNode.prop('checked', savedData[pf_name]);
                                }
                                else {
                                    $thisNode.val(savedData[pf_name]);
                                }

                            }
                            else {
                                $thisNode.val(savedData[pf_name]);
                            }


                        });



                    }
                },
                {
                    icon: "fa fa-trash btnPerfectGridDelete",
                    action: function () {
                        let $thistbl = $(this).closest('table');
                        let table = $thistbl.DataTable();
                        table.destroy();
                        if ($(this).closest('tbody').find('tr').length > 1) {
                            $(this).closest('tr').remove();
                            pft_table_slreset($thistbl);
                            //  $thistbl.dataTable({ paging: true });
                        }
                        else {
                            $thistbl.remove();
                        }

                    }
                },
            ]
        },
        onlyShowColumn: [],
        hideColumn: [],
        serialNo: true,
        renameHeader: { CustomerData: "test nme","ModeName":"Period Type"},
        rowAttribute: [],
        isCheckType: []
    };
    
    function ComDetailsTable_Fill(ele, tkey, data, tableOptionsTempOut) {

        let $thisForm = $(ele)

        let tableOptionsTemp = tableOptionsTempOut;
        let insertData = []
        let tableKey = tkey;

        let indexname = tkey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);
       
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');


        $.each(data, function (keyOne, valOne) {

            let pData = {};

            pData[indexname] = keyOne + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', pData[indexname])
            //---

            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                console.log('name', valOne[nameAttr])
                if (typeof valOne[nameAttr] !== undefined) {

                    if ($this.is('select')) {


                        tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                        tableOptionsTemp.hideColumn.push(nameAttr);
                        //displat text of select

                        let selectText = ($this.val().length == 1) ? '' : $this.find('[value="' + valOne[nameAttr] + '"]').text();
                       
                        pData[nameAttr + '_d'] = selectText;
                        pData[nameAttr] = valOne[nameAttr];
                        console.log('select', $this.find('options[value="' + valOne[nameAttr] + '"]').text());
                        console.log('selectText', $this.find('[value="' + valOne[nameAttr] + '"]').text());

                    }
                    else if ($this.is('input')) {

                        let inputType = $this.attr('type').toLocaleLowerCase();
                        console.log('inputType', inputType)
                        if (inputType == 'checkbox') {

                            pData[nameAttr] = valOne[nameAttr];

                            tableOptionsTemp.isCheckType.push(nameAttr);

                            console.log('checkbox', nameAttr)


                        }
                        else if (inputType == 'hidden') {

                            tableOptionsTemp.hideColumn.push(nameAttr);
                            pData[nameAttr] = valOne[nameAttr];


                        }

                        else if (inputType == 'date') {


                            pData[nameAttr] = moment(valOne[nameAttr]).format('DD-MM-YYYY');


                        }
                        else {
                            pData[nameAttr] = valOne[nameAttr];


                        }
                    }
                    else {
                        pData[nameAttr] = valOne[nameAttr];


                    }
                }



            });

            insertData.push(pData);
            console.log('insertdata', insertData)

            //----

        });

        $tblcontainer.append(pft_table_createtable(insertData, tableOptionsTemp));
        // $tblcontainer.find('table').dataTable({ paging: true });

    }
    function SubProductDetailsTable_create(ele, tkey, uniq = []) {

        console.log('validate data', ValidateAddOtherProductservicedetails());

        //if (ValidateAddOtherProductservicedetails() <= 0) {

        debugger

            let $thisForm = $(ele).closest('[perfect-class="form"]');
            var tableKey = tkey;
            let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');

            let insertData = {};
            let tableOptionsTemp = tableOptionsTempOut;

            let unique = (uniq) ? uniq : [];

            console.log('unique', unique);
        let isValid = true;
            let isValids = true;
            let isValidPrice = true;
            let errorClass = '.temptableError';

            //make index
            console.log('check 1');

            let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
            let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
            let indexname = tkey + 'index';
            tableOptionsTemp.rowAttribute.push(indexname);
            tableOptionsTemp.hideColumn.push(indexname);
            let updateCond = '';
            let isNew = true;

            if (thisactionIndex > 0) {
                //means update
                insertData[indexname] = thisactionIndex;
                updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
                isNew = false;
            }
            else {
                //insert
                insertData[indexname] = lastIndex + 1;
                $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
                isNew = true;
            }
            if ( $thisForm.find('[perfect-tempTable-' + tableKey + '="ServiceCost"]').val() == "") {
                isValids = false;
                $thisForm.find('[perfect-tempTable-' + tableKey + '="ServiceCost"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please  Enter ServiceCost');
            }
            else {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="ServiceCost"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }

        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="ServiceID]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="ServiceID"]').val() == "") {

                isValids = false;
            $thisForm.find('[perfect-tempTable-' + tableKey + '="ServiceID"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Service');
        }


        else

        {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="ServiceID"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }

            let upperlimit = $thisForm.find('[name="PeriodFrom"]').val();
        let lowerlimit = $thisForm.find('[name="PeriodTo"]').val();
           let periodtype= $thisForm.find('[name="ID_Mode"]').val();

            if (parseFloat(upperlimit) > parseFloat(lowerlimit)) {
                console.log('inside limit check if')
                $thisForm.find('[perfect-tempTable-' + tableKey + '="PeriodTo"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Period To  should be greater than Period From Position Limit');



                NotificationMessage({ 'type': 'error', 'heading': 'info', 'message': 'Period To  should be greater than Period From Position Limit' });

                isValidPrice = false;
            }
            else {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="PeriodTo"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
                isValidPrice = true;
            }
      
        
        


        if (unique.length > 0) {
            //getting previous data
            let prevData = [];
            $tblcontainer.find('table > tbody').find('tr').each(function () {
                if (isNew) {
                    prevData.push($(this).data('pData'));
                }
                else {
                    if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                        prevData.push($(this).data('pData'));
                    }

                }

            })




            unique.forEach(function (key, i) {
                console.log('unid -> key:' + key + "| index :" + i);
                let $thisEle = $thisForm.find('[perfect-tempTable-' + tableKey + '="' + key + '"]');
                let headerEleName = $thisEle.attr('perfect-tempTable-' + tableKey);
                let atname = $thisEle.attr('name');
                let cvalue;



                if ($thisEle.length != 0) {
                    let $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
                    let errmessage = headerEleName + " Already exits"

                    //getting current value in cval
                    if ($thisEle.is('select')) {
                        cvalue = $thisEle.val();
                    }
                    else if ($thisEle.is('input')) {

                        let inputEleType = $thisEle.attr('type').toLocaleLowerCase();

                        if (inputEleType == 'checkbox') { cvalue = $thisEle.is(':checked'); }
                        else if (inputEleType == 'hidden') { cvalue = $thisEle.val(); }
                        else { cvalue = $thisEle.val(); }
                    }
                    else { cvalue = $thisEle.val(); }

                    // console.log('cvalue ->' + cvalue);

                    //searching in previous data
                    if (prevData.find(a => a[atname] == cvalue)) {
                        // console.log('Search =>' + cvalue + '| attr :' + atname)
                        $errorElement.text(errmessage);
                        isValid = false;
                    }
                }
            });


        }

            console.log('check 4.1');
            // this section make table column data
            if (isValid && isValidPrice && isValids) {
                $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                    let $this = $(this);
                    let headerName = $this.attr('perfect-tempTable-' + tableKey);
                    let nameAttr = $this.attr('name');


                    if ($this.is('select')) {

                        tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                        tableOptionsTemp.hideColumn.push(nameAttr)
                       
                        if ($this.val() != null) {
                            let selectText = ($this.val().length == 0) ? '' : $this.children(":selected").text();
                            insertData[nameAttr + '_d'] = selectText;
                        }
                        else {
                            let selectText = ($this.val() == null) ? '' : $this.children(":selected").text();
                            insertData[nameAttr + '_d'] = selectText;
                        }
                      
                        insertData[nameAttr] = $this.val();


                        //clear field
                        $this.val('').selectpicker('refresh');
                    }
                    else if ($this.is('input')) {

                        let inputType = $this.attr('type').toLocaleLowerCase();

                        if (inputType == 'checkbox') {

                            insertData[nameAttr] = $this.is(':checked');

                            tableOptionsTemp.isCheckType.push(nameAttr)
                            //clear field
                            $this.prop('checked', false);

                        }
                        else if (inputType == 'hidden') {

                            tableOptionsTemp.hideColumn.push(nameAttr)
                            insertData[nameAttr] = $this.val();

                            //clear field
                            $this.val('');
                        }
                        else if (inputType == 'date') {


                            insertData[nameAttr] = $this.val();

                            //clear field
                            $this.val('');
                        }
                        else if (inputType == 'number') {


                            insertData[nameAttr] = $this.val();

                            //clear field
                            $this.val('');
                        }
                        else {
                            insertData[nameAttr] = $this.val();

                            //clear field
                            $this.val('');
                        }
                    }
                    else {
                        insertData[nameAttr] = $this.val();

                        //clear field
                        $this.val('');
                    }




                });
                console.log('check 4.2');
                if (isNew) {
                    console.log('check 4.2.1');
                    //this section nake table.table row
                    if ($tblcontainer.find('table').length == 0) {
                        console.log('check 4.2.3');
                        $tblcontainer.append(pft_table_createtable([insertData], tableOptionsTemp));
                        // $tblcontainer.find('table').dataTable({ paging: true });
                    }
                    else {
                        console.log('check 4.2.1');
                        let table = $tblcontainer.find('table').DataTable()
                        table.destroy()
                        pft_table_addTableRow($tblcontainer.find('table'), insertData, tableOptionsTemp);


                        //   $tblcontainer.find('table').dataTable({ paging: true });
                        //   $tblcontainer.DataTable().draw();
                        //  table.ajax.reload();
                    }
                    console.log('check 4.2.1');
                }
                else {
                    console.log('check 4.3');
                    let table = $tblcontainer.find('table').DataTable()
                    table.destroy()
                    console.log('check 4.4');
                    console.log('table', $tblcontainer.find('table'))
                    console.log('check 4.5');
                    pft_table_replaceTableRow($tblcontainer.find('table'), updateCond, insertData, tableOptionsTemp);


                    //$tblcontainer.find('table').dataTable({ paging: true });
                }

                console.log(insertData);
                // resetting the edit value
                $tblcontainer.attr('perfect-tempTable-action', 0);



            }
            return isValid;
            console.log('check 5');

        
    }
    function ValidateAddOtherProductservicedetails() {
       
        var Error = 0;
        const $inp = $(".Subproduct");
        let is_empty = true;
        $inp.each((i, el) => {

            //const is_empty = !el.value.trim();

            console.log($(el).attr('name'), $('[name=' + $(el).attr('name') + ']').val());

            if (!$('[name=' + $(el).attr('name') + ']').val() == undefined || $('[name=' + $(el).attr('name') + ']').val() != "" ) {
                is_empty = false;

              
            }
            else {
                is_empty = true//!$('[name=' + $(el).attr('name') + ']').val();
            }

            let ErrorID = $(el).attr('data-id');

            console.log(ErrorID,is_empty)
            
            if (is_empty) {
                debugger

               
                $('#' + ErrorID).css('display', 'block');
                Error++;
              
            }
            else if (!is_empty) {
                $('#' + ErrorID).css('display', 'none');
               
                if (Error > 0) {
                    Error--;
                }
            }
            el.classList.toggle("is-empty", is_empty);
        });
        return Error
    }


    

   

   


    function RemoveProductComplaintdetails(ele) {

        let ObjectName = $(ele).closest("tr").find("td").eq(2).text().trim();

        if (confirm("Are you sure you want to delete " + " " + ObjectName + "?")) {
            var row = $(ele).closest('tr');

            var siblings = row.siblings();

            siblings.each(function (index) {
                $(this).children('td').first().text(index + 1);
            });

            // Removing the current row.
            $(ele).closest('tr').remove();

        }
        else {
            return false;
        }

        //If removed all rows
        var rowcount = document.getElementById('ComplaintDetailstbody').rows.length;
        if (rowcount == 0) {
            $('#Emptable').css('display', 'none');
            let TbodyHtml = '';
            TbodyHtml += "<tr id='0'> <td style='text-align:center;' colspan='5'>No Records..</td> </tr>";
            $('#ComplaintDetailstbody').html(TbodyHtml);
            $("#ComplaintDetailstbody tr").remove();
        }
    }

    function EditProductComplaintdetails(ele) {
        debugger
        let $container = $(ele).closest('[perfect-class="form"]');
        var tr = $(ele).closest('tr');
        var $tds = tr.find('td'),
            SubProductID = $tds.eq(0).text(),
            SubProduct = $tds.eq(1).text(),
            ServiceID = $tds.eq(2).text(),
            ID_Mode = $tds.eq(3).text(),
            PeriodFrom = $tds.eq(5).text(),
            PeriodTo = $tds.eq(6).text();
            ServiceCost = $tds.eq(7).text();

        $container.find('[name=SubProductID]').val(SubProductID);
        //$container.find('[name=DepartmentName]').val(DepartmentName);
        $container.find('[name=SubProduct]').val(SubProduct);
        $container.find('[name=ServiceID]').val(ServiceID);

        $('select[name=ID_Mode]').val(ID_Mode);
        $('select[name=ServiceID]').val(ServiceID);
        $container.find('[name=PeriodFrom]').val(PeriodFrom);
        $container.find('[name=PeriodTo]').val(PeriodTo);
        $container.find('[name=ServiceCost]').val(ServiceCost);
        //$container.find('[name=EmployeeType]').val(EmployeeType);




        //Re Calculate SI>NO

        var siblings = tr.siblings();
        console.log('Sibling>', siblings);
        siblings.each(function (index) {
            $(this).children('td').first().text(index + 1);
        });

        $(ele).closest('tr').remove();
        //End
        // Add no record if table empty
        var rowcount = document.getElementById('ComplaintDetailstbody').rows.length;
        if (rowcount == 0) {
            $('#Emptable').css('display', 'none');
            let TbodyHtml = '';
            TbodyHtml += "<tr id='0'> <td style='text-align:center;' colspan='4'>No Records..</td> </tr>";
            $('#ComplaintDetailstbody').html(TbodyHtml);
        }
        $('#TbtnUpdate').css('display', 'block');
        $('#TbtnSave').css('display', 'none');
        //end
        //$("#dept").on('change', function () {

        //    ClearEmployeeonchange(this);

        //})
    }

    function ClearProductComplaintdetails(ele) {


        let $container = $(ele).closest('[perfect-class="form"]');
        $container.find('[name=SubProductID]').val(SubProductID);
        //$container.find('[name=DepartmentName]').val(DepartmentName);
        $container.find('[name=SubProduct]').val(SubProduct);
        $container.find('[name=ServiceID]').val(ServiceID);

        $('select[name=ID_Mode]').val(ID_Mode);
        $('select[name=ServiceID]').val(ServiceID);
        $container.find('[name=PeriodFrom]').val(PeriodFrom);
        $container.find('[name=PeriodTo]').val(PeriodTo);
        $container.find('[name=ServiceCost]').val(ServiceCost);
        ValidateAddProductcomplaintdetails(this);
        if (CheckExisting($container.find('[name=FK_Employee]').val(), 'ComplaintDetails', ele, 'ProductNameExists-error') <= 0) {

            $thisForm.find('[name="FK_Employee"]').closest('[perfect-class="form"]').find('.producterror').attr("style", "display:none");
        }
    }
  

    function CheckExisting(Object_ID,SeviceID,PeriodFrom,PeriodTo,ServiceCost, val, ele, Error) {
        debugger
        let $container = $(ele).closest('[perfect-class="form"]');
        var Exist = 0;
        $container.find('[perfect-tempTable="' + val + '"]').find('tbody').find('tr').each(function () {
            var $tds = $(this).find('td'),
                SubproductId = $tds.eq(0).text();
            console.log('SubPRODUCT_ID-->', SubproductId)
            if (SubproductId == Object_ID) {
                console.log($tds);
                console.log(Exist);
                Exist++;

            }
            if (Exist > 0) {
                $('#' + Error).css('display', 'block');
                console.log('Yes it exist');
            }
            else {
                $('#' + Error).css('display', 'none');
                console.log('No it not exist');
            }
        })
        return Exist;

        $container.find('[perfect-tempTable="' + val + '"]').find('tbody').find('tr').each(function () {
            var $tds = $(this).find('td'),
                ServiceId = $tds.eq(2).text();
            console.log('Service_ID-->', ServiceId)
            if (ServiceId == SeviceID) {
                console.log($tds);
                console.log(Exist);
                Exist++;

            }
            if (Exist > 0) {
                $('#' + Error).css('display', 'block');
                console.log('Yes it exist');
            }
            else {
                $('#' + Error).css('display', 'none');
                console.log('No it not exist');
            }
        })

        return Exist;

     


        $container.find('[perfect-tempTable="' + val + '"]').find('tbody').find('tr').each(function () {
            var $tds = $(this).find('td'),
                Periodfrom = $tds.eq(6).text();
            console.log('Periodfrom-->', Periodfrom)
            if (Periodfrom == PeriodFrom) {
                console.log($tds);
                console.log(Exist);
                Exist++;

            }
            if (Exist > 0) {
                $('#' + Error).css('display', 'block');
                console.log('Yes it exist');
            }
            else {
                $('#' + Error).css('display', 'none');
                console.log('No it not exist');
            }
        })
        return Exist;

        $container.find('[perfect-tempTable="' + val + '"]').find('tbody').find('tr').each(function () {
            var $tds = $(this).find('td'),
                Periodto = $tds.eq(7).text();
            console.log('Periodto-->', Periodto)
            if (Periodto == PeriodTo) {
                console.log($tds);
                console.log(Exist);
                Exist++;

            }
            if (Exist > 0) {
                $('#' + Error).css('display', 'block');
                console.log('Yes it exist');
            }
            else {
                $('#' + Error).css('display', 'none');
                console.log('No it not exist');
            }
        })
        return Exist;

        $container.find('[perfect-tempTable="' + val + '"]').find('tbody').find('tr').each(function () {
            var $tds = $(this).find('td'),
                Servicecost = $tds.eq(8).text();
            console.log('Servicecost-->', Servicecost)
            if (Servicecost == ServiceCost) {
                console.log($tds);
                console.log(Exist);
                Exist++;

            }
            if (Exist > 0) {
                $('#' + Error).css('display', 'block');
                console.log('Yes it exist');
            }
            else {
                $('#' + Error).css('display', 'none');
                console.log('No it not exist');
            }
        })
        return Exist;
    }
    //End Product add,edit,delete,validate

    function RemoveEmptyRow(ID) {
        let val = $('#' + ID).find('tr:first').attr('id');
        if (val == 0) {
            $('#' + ID).empty();
        }
    }
    function createItems(ele, callback) {
        if (SubProductDetailsTable_create(ele, 'cstatus', [])) {
            callback(1);
        }
        else {
            callback(0);
        }
    }

      function GetProName(ele)
    {

                 let $thisForm = $(ele).closest('[perfect-class="form"]');
                 $thisForm.find('[name="ProdName"]').val('');


                 let sel = $thisForm.find('[name=FK_Category] option:selected').text();

                 let name = $thisForm.find('[name="FK_Category"]').children(":selected").attr('Project')

      
                if (name == 'False' && sel != 'Please select')
                {
                    $thisForm.find('[name="ProdBtn"]').show();
                }
                 else
                 {
                    $thisForm.find('[name="ProdBtn"]').hide();
                    $thisForm.find('[name="ID_Product"]').val(0);
                 }
                 if (name == 'False' && sel != 'Please select')
                 {
                    $thisForm.find('[name="lblProName"]').text('Product');
                 }
                 else
                 {
                  $thisForm.find('[name="lblProName"]').text('Model');
                 }
    }


    function clearsubproduct(ele, tablekey) {


        let $thisform = $(ele).closest('[perfect-class="form"]');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="select"]').val('').selectpicker('refresh');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="date"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="hidden"]').val('');

        let $tblcontainer = $thisform.find('[perfect-tempTable="' + tablekey + '"]');
        $tblcontainer.attr('perfect-tempTable-action', 0);

        if (tablekey = "cstatus") {

        }

    }
</script>
