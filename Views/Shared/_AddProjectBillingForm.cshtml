
@model PerfectWebERP.Models.ProjectBillingModel.ProjectBillingView
<style>
</style>

<div class="card ">

    <div class="card-header">
        <h4 class="card-title col-12">@ViewBag.PageTitles </h4>
        <span title="To View List" onclick="fn_showListView();"><svg id="Layer_1" class="layer" stroke="currentColor" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" height="20" width="20" viewBox="0 0 122.88 122.54"><title>To View List</title><path class="viewlst" d="M4.69,0H46.22a4.71,4.71,0,0,1,4.69,4.69V46a4.69,4.69,0,0,1-4.69,4.69H4.69a4.65,4.65,0,0,1-3.31-1.38l-.09-.09A4.67,4.67,0,0,1,0,46V4.69A4.71,4.71,0,0,1,4.69,0ZM89.44,61.94a26.56,26.56,0,0,1,10.18,2l.07,0a26.61,26.61,0,0,1,15.25,32.16,26.18,26.18,0,0,1-2.7,6.11l10.3,11.24a1.27,1.27,0,0,1-.07,1.8l-7.57,6.9a1.27,1.27,0,0,1-1.79-.07l-9.86-10.85a26.36,26.36,0,0,1-6.1,2.74,26.87,26.87,0,0,1-7.71,1.13,26.51,26.51,0,0,1-10.17-2l-.07,0A26.64,26.64,0,0,1,64.85,78.37l0-.07A26.6,26.6,0,0,1,89.44,61.94Zm15,11.59a21.38,21.38,0,0,0-6.89-4.61l-.06,0a21.22,21.22,0,0,0-23.07,4.64l-.07.07a21.25,21.25,0,0,0-4.54,6.83l0,.06a21.32,21.32,0,0,0-1.58,8.06,21.26,21.26,0,0,0,29.35,19.62,21.54,21.54,0,0,0,6.89-4.61l.07-.07a21.09,21.09,0,0,0,4.54-6.83l0-.06a21.35,21.35,0,0,0,0-16.17,21.34,21.34,0,0,0-4.62-6.9ZM4.69,63.2H46.22a4.71,4.71,0,0,1,4.69,4.7v41.34a4.68,4.68,0,0,1-4.69,4.69H4.69A4.69,4.69,0,0,1,0,109.24V67.9a4.71,4.71,0,0,1,4.69-4.7ZM68.78,0h41.53A4.71,4.71,0,0,1,115,4.69V46a4.71,4.71,0,0,1-4.69,4.69H68.78A4.71,4.71,0,0,1,64.09,46V4.69a4.69,4.69,0,0,1,1.37-3.31l.1-.09A4.67,4.67,0,0,1,68.78,0Z"></path></svg></span>
    </div>
    <div class="card-body">
        <form id="frmPrjBill" class="form-valide" perfect-class="form" action="#" method="post" perfect-onFormSuccess="">

            <div class="row">
                @Html.AntiForgeryToken()
                <div class="col-xl-8">
                    <div class="row">
                        <div class="col-xl-6">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-lg-4 col-form-label">
                                    <span perfect-class="formGroupLabel">Bill Date</span>
                                    <span class="text-danger">*</span>
                                </label>
                                <div class="col-lg-8">
                                    <input type="date" class="form-control perfectValidate_date" name="PrBillDate" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" onchange="billdatecheck(this)" />
                                    <div class="invalid-feedback animated fadeInUp limit-check" style="display: block;"></div>

                                </div>
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    <span perfect-class="formGroupLabel">Bill Type</span>
                                    <span class="text-danger">*</span>
                                </label>
                                <div class="col-sm-8">
                                    <select id="FK_BillType" class="form-control perfectValidate_string" name="FK_BillType" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select">
                                        <option value="">Please select</option>
                                        @if (!(Model.BillTypeListView is null))
                                        {
                                            foreach (var media in Model.BillTypeListView)
                                            {
                                                <option value="@media.BillTypeID">@media.BillType</option>
                                            }
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-6 Project">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">

                                    <span perfect-class="formGroupLabel">Project </span>
                                    <span class="text-danger">*</span>
                                </label>
                                <div class="col-sm-8">
                                    <div class="input-group">
                                        <input type="hidden" class="form-control" name="TaxableAmount" id="TaxableAmount" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="hidden" />
                                        <input type="hidden" class="form-control" name="ProjectStartDate" id="ProjectStartDate" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="hidden" />
                                        <input type="hidden" class="form-control" name="IncludeTax" id="IncludeTax" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="hidden" />
                                        <input type="hidden" class="form-control" name="FK_FinancePlanType" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="hidden" />
                                        <input type="hidden" class="form-control" id="FK_TaxGroup" name="FK_TaxGroup" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="hidden" />
                                        <input type="hidden" class="form-control" name="ID_ProjectBilling" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="hidden" />
                                        <input type="text" class="form-control perfectValidate_string" name="ProjectName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled />
                                        <input type="hidden" name="FK_Project" class="form-control perfectValidate_numeric" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" value="" />
                                        <input type="hidden" name="Performaview" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" value="@ViewBag.Performa" />
                                        <div class="input-group-append">
                                            <button id="addaccountsubhead-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchValAssign(this,107,'Project List',['PrBillMode','ProjectStartDate'],['ProjNumber','ProjName','CusName','CusMobile','PrBillAmount','PrAdvAmount','FK_TaxGroup','IncludeTax','BalanceAmount','PrDueAmount','TaxableAmount','FinancePlanType','DownPayment','AddAmount'])" Criterea1="0" Criterea2="0" Criterea3="PrBillDate" Criterea4="" BindName="TaxableAmount" BindVal="FK_Project" Function="1"></button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-xl-6">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-lg-4 col-form-label">
                                    <span perfect-class="formGroupLabel">Bill Mode</span>
                                    <span class="text-danger">*</span>
                                </label>
                                <div class="col-lg-8">
                                    <select class="form-control perfectValidate_string" name="PrBillMode" id="PrBillMode" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" onchange="ModeChange(this,0)">
                                        <option value="">Please select</option>
                                        @if (!(Model.PrBillModeList is null))
                                        {
                                            foreach (var PrBillMode in Model.PrBillModeList)
                                            {
                                                <option value="@PrBillMode.ID_Mode">@PrBillMode.ModeName</option>
                                            }
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="col-xl-6 Performa" style="display:none">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-lg-4 col-form-label">
                                    <span perfect-class="formGroupLabel"> </span>
                                    <span class="text-danger"></span>
                                </label>
                                <div class="col-lg-8">
                                    <label class="form-check-label " perfect-class="formCheckLabel" style="margin-left: 20px;">
                                        <input type="checkbox" class="form-check-input" id="Performa" name="Performa" perfect-class="formCheckInput" perfect-ctype="checkbox" perfect-css="checkbox" onclick="PerformaChange(this)"><span perfect-class="formCheckInputText">Performa </span>
                                    </label>
                                </div>
                            </div>
                        </div>


                        <div class="col-xl-6">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-lg-4 col-form-label">
                                    <span perfect-class="formGroupLabel">Amount </span>
                                    <span class="text-danger">*</span>
                                </label>
                                <div class="col-lg-8">
                                    <input type="text" class="form-control text-right perfectValidate_decimal" placeholder="" id="Amount" name="Amount" oninput="decimalpnt(this, 'Amount', 3);  " perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" onchange="PartialAmntChange(this)" />
                                </div>
                            </div>
                        </div>
                        @*<div class="col-xl-6 Partial ">
            <div class="form-group row" perfect-class="formGroup">
                <label class="col-lg-4 col-form-label">
                    <span perfect-class="formGroupLabel">Roundoff</span>

                </label>
                <div class="col-lg-8">
                    <input type="text" class="form-control text-right" placeholder="" onchange="roundoff(this)" name="Roundoff" id="Roundoff" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="decimalpntminus(this,'Roundoff',3)" />
                </div>
            </div>
        </div>*@



                        <div class="col-sm-6 Final PartialFinal">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">

                                    <span perfect-class="formGroupLabel">Tax Amount</span>

                                </label>
                                <div class="col-sm-8">
                                    <div class="input-group">
                                        <input type="number" id="PrTaxAmount" class="form-control text-right" placeholder="" name="PrTaxAmount" perfect-class="formGroupControl" perfect-ctype="input" @*onchange="CalculateTotalProjectBill(this)"*@ perfect-css="input" maxlength="10" readonly />

                                        <div class="input-group-append">
                                            <button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="ShowTax(this,1)"></button>
                                            @*<div class="modal fade" perfect-class="formGroupModalTax" id="formGroupModalTax">
                                <div class="modal-dialog modal-dialog-centered" role="document">
                                    <div class="modal-content  rounded-0">
                                        <div class="modal-header border-0">
                                            <h5 class="modal-title">Tax Details</h5>
                                            <button type="button" class="close" data-dismiss="modal">
                                                <span>&times;</span>
                                            </button>
                                        </div>
                                        <table id="TaxData" class="table mb-0  table-striped  text-black">
                                            <thead class="bg-primary text-white">
                                                <tr>
                                                    <th class="t-head">SlNo</th>
                                                    <th class="t-head" style="Display:none">ID_TaxType</th>
                                                    <th class="t-head">TaxType</th>
                                                    <th class="t-head">Amount</th>
                                                </tr>
                                            </thead>
                                            <tbody class="modal-body" id="formGroupModalTaxbody"></tbody>
                                            <tfoot>
                                            </tfoot>
                                        </table>
                                        <div class="modal-footer">
                                            <button type="button" id="btnBindTax" class="btn btn-primary1" data-dismiss="modal" onclick="BindTaxAmount(this)">Ok</button>
                                        </div>
                                    </div>
                                </div>
                            </div>*@

                                            <div class="modal fade" perfect-class="formGroupModalTax" id="formGroupModalTax">
                                                <div class="modal-dialog modal-dialog-centered" role="document">
                                                    <div class="modal-content  rounded-0">
                                                        <div class="modal-header border-0">
                                                            <h5 class="modal-title">Tax Details</h5>
                                                            <button type="button" class="close" data-dismiss="modal">
                                                                <span>&times;</span>
                                                            </button>
                                                        </div>
                                                        <div class="modal-body" perfect-class="formGroup" style="max-height: calc(100vh - 200px); overflow-y: auto;padding: 1rem;">

                                                            @*<div class="table-responsive" style="max-height: 100%; height: 80%; overflow: auto;">*@
                                                            <table id="zero_config" class="table mb-0  table-striped  text-black">
                                                                <thead class="bg-primary text-white">
                                                                    <tr>
                                                                        <th class="t-head">SlNo</th>
                                                                        <th class="t-head" style="Display:none">FK_TaxType</th>
                                                                        <th class="t-head">TaxType</th>
                                                                        <th class="t-head">Percentage</th>
                                                                        <th class="t-head">Amount</th>
                                                                    </tr>
                                                                </thead>
                                                                <tbody id="formGroupModalTaxbody"></tbody>
                                                                <tfoot>
                                                                </tfoot>
                                                            </table>
                                                            @*</div>*@
                                                            @*<div class="modal-body" id="formGroupModalTaxbody">
                                            </div>*@

                                                            <div class="modal-footer">
                                                                @*<button type="button" onclick="CreateProductCheckDescription(this);" class="btn btn-primary">Add</button>*@

                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                            </div>

                        </div>
                        <div class="col-sm-6 Final PartialFinal">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    <span perfect-class="formGroupLabel">Other Charges</span>

                                </label>
                                <div class="col-sm-8">
                                    <div class="input-group">
                                        <input type="text" class="form-control text-right" name="PrOtherCharges" perfect-class="formGroupControl" perfect-ctype="input" id="PrOtherChargesid" perfect-css="input" onchange=" CalculateTotalProjectBill(this);" readonly />
                                        <div class="input-group-append">
                                            @*<button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-credit-card" type="button" perfect-css="button" onclick="ShowOtherCharges(this,0)"></button>*@
                                            <button id="addcountry-jq-searchButtonothr" class="btn btn-primary fa fa-credit-card" type="button" perfect-css="button" onclick="fn_showOtherCharges(ProjectBillingTransMode,projectbillid,'PrOtherChargesid')"></button>

                                        </div>
                                        <div class="modal fade" perfect-class="formGroupModalOtherCharge" id="formGroupModalOtherCharge">
                                            <div class="modal-dialog modal-dialog-centered" role="document">
                                                <div class="modal-content  rounded-0">
                                                    <div class="modal-header border-0">
                                                        <h5 class="modal-title">Other Charge Details</h5>
                                                        <button type="button" class="close" data-dismiss="modal">
                                                            <span>&times;</span>
                                                        </button>
                                                    </div>
                                                    <div class="modal-body" perfect-class="formGroup" style="max-height: calc(100vh - 200px); overflow-y: auto;padding: 1rem;">
                                                        <table id="zero_configOthercharge" class="table mb-0  table-striped  text-black">
                                                            <thead class="bg-primary text-white">
                                                                <tr>
                                                                    <th class="t-head">SlNo</th>
                                                                    <th class="t-head" style="display:none">ID_OtherChargeType</th>
                                                                    <th class="t-head">Type</th>
                                                                    <th class="t-head">Trans Type</th>
                                                                    <th class="t-head">Amount</th>
                                                                </tr>
                                                            </thead>
                                                            <tbody id="formGroupModalOtherChargebody"></tbody>
                                                            <tfoot>
                                                            </tfoot>
                                                        </table>

                                                        <div class="modal-footer">
                                                            <button type="button" class="btn btn-primary light" data-dismiss="modal" onclick="BindOtherChargeAmount(this)">Apply</button>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-xl-6 " style="display:none">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-lg-4 col-form-label">
                                    <span perfect-class="formGroupLabel">Advance Amount</span>
                                    <span class="text-danger">*</span>
                                </label>
                                <div class="col-lg-8">
                                    <input type="text" class="form-control  text-right" placeholder="" name="AdvAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly />
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-6 Final PartialFinal">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    <span perfect-class="formGroupLabel">Round Off</span>

                                </label>
                                <div class="col-sm-8">
                                    <input type="text" class="form-control text-right" placeholder="" onchange="roundoff(this)" name="Roundoff" id="Roundoff2" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="decimalpntminus(this,'Roundoff2',3)" />
                                </div>
                            </div>
                        </div>
                        <div class="col-xl-6  PartialFinalEMI" style="display:none">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-lg-4 col-form-label">
                                    <span perfect-class="formGroupLabel">Processing Charge</span>
                                    <span class="text-danger">*</span>
                                </label>
                                <div class="col-lg-8">
                                    <input type="text" class="form-control  text-right emiText" placeholder="" name="AddAmount" id="AddAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly />
                                </div>
                            </div>
                        </div>
                        <div class="col-xl-6  PartialFinalEMI" style="display:none">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-lg-4 col-form-label">
                                    <span perfect-class="formGroupLabel">Total Amount</span>
                                    <span class="text-danger">*</span>
                                </label>
                                <div class="col-lg-8">
                                    <input type="text" class="form-control  text-right emiText" placeholder="" name="TotalAmount" id="TotalAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly />
                                </div>
                            </div>
                        </div>

                        <div class="col-xl-6  PartialFinalEMI" style="display:none">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-lg-4 col-form-label">
                                    <span perfect-class="formGroupLabel">Down Payment</span>
                                    <span class="text-danger">*</span>
                                </label>
                                <div class="col-lg-8">
                                    <input type="text" class="form-control  text-right emiText" placeholder="" name="DownPayment" id="DownPayment" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly />
                                </div>
                            </div>
                        </div>
                        @*<div class="row" name="buybacksection" style="display:none">
            <div class="col-sm-12" style="margin-top: 38px;">
                <div class="daccordion__header" style="margin-bottom: 22px;">
                    <span class="accordion__header--text">BUY BACK</span>
                </div>
                <div class="row">

                    <br />
                    <div class="col-sm-3" id="ProductDiv">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-3 col-form-label">Item&nbsp;<span class="text-danger">*</span></label>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <input type="text" class="form-control " perfect-tempTable-buyback="ProdName" name="ProdName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly />
                                    <input type="hidden" name="FK_Product" perfect-tempTable-buyback="FK_Product" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                    <div class="input-group-append">
                                        <button id="addcountry-jq-searchButton33" name="prdfbtn" class="btn btn-primary fa fa-search" type="button" onclick="GetCmnPopUpSearchValAssign(this, 131, 'Product Details', [], [],SalesTransMode)" BindName="ProdName" BindVal="FK_Product" Criterea1="FK_Branch" Criterea2="FK_Department" perfect-css="button"></button>

                                        <button id="addproduct-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchValAssign(this,85,'Product List',[],['MinRate','MaxRate'])" Criterea2="0" BindName="ProdName" BindVal="FK_Product"></button>
                                    </div>
                                    <div class="text-danger temptableError"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-3">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">Quantity<span class="text-danger">&nbsp;*</span></label>
                            <div class="col-sm-6">
                                <input type="text" maxlength="13" class="form-control text-right" perfect-tempTable-buyback="Quantity" name="Quantity" id="Quantity" oninput="decimalpnt(this,'Quantity',3)" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                                <div class="text-danger temptableError mtrlQtyerror">
                                </div>
                            </div>

                        </div>
                    </div>


                    <div class="col-sm-2">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">Rate<span class="text-danger">&nbsp;*</span></label>
                            <div class="col-sm-7">
                                <input type="text" maxlength="13" class="form-control text-right" perfect-tempTable-buyback="Rate" name="Rate" id="Rate" oninput="decimalpnt(this, 'Rate', 3)" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                                <div class="text-danger temptableError mtrlQtyerror">
                                </div>
                            </div>

                        </div>
                    </div>
                    <div class="col-sm-2">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">Serial No</label>
                            <div class="col-sm-7">
                                <input type="text" maxlength="13" class="form-control text-right" perfect-tempTable-buyback="SerialNo" name="SerialNo" id="inQuantity" oninput="blockDecimal(this)" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                                <div class="text-danger temptableError mtrlQtyerror">
                                </div>
                            </div>

                        </div>
                    </div>

                    <div class="col-sm-2" text-right">
                        <button class="btn btn-primary1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" title="Add New Product" onclick="createbuybacktable(this,'buyback',['FK_Product'],restableOptionsTempOut)" style="margin-left:0px" ;><i class="fa fa fa-plus" aria-hidden="true"></i></button>
                        <button class="btn btn-light1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" onclick="ProductDetailsclear(this,'buyback')" style="margin-left:-2px" ;><i class="fa fa-refresh" aria-hidden="true"></i></button>
                    </div>

                </div>
            </div>
        </div>*@
                        @*<div class="col-xl-12">
            <div class="col-sm-12" style="margin-left:-24px;margin-bottom:40px">
                <div class="table-responsive" perfect-tempTable="buyback" name="BuyBackTable" id="BuyBackTable" perfect-tempTable-lastindex="0" perfect-tempTable-action="0"></div>
            </div>
        </div>*@

                        @*<div class="row">*@
                        @*<div class="col-sm-4" style="display:none" name="Buybackamt">
            <div class="form-group row" perfect-class="formGroup">
                <label class="col-sm-4 col-form-label">
                    <span perfect-class="formGroupLabel">Buy Back Amount</span>

                </label>
                <div class="col-sm-8">
                    <input type="text" class="form-control text-right" placeholder="" readonly id="Buybcksum" name="buybacksumamt" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                </div>
            </div>
        </div>*@
                        <div class="col-sm-6 Final PartialFinal">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-lg-4 col-form-label">
                                    <span perfect-class="formGroupLabel">Net Amount Payable</span>
                                    <span class="text-danger">*</span>
                                </label>
                                <div class="col-lg-8">
                                    <input type="text" class="form-control  text-right" placeholder="" name="PrNetAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly />
                                </div>
                            </div>
                        </div>
                        @*</div>*@

                        <div class="col-sm-6 Final PartialFinal">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">Payment Method</label>
                                <div class="col-sm-5">
                                    <div class="input-group">

                                        <div class="input-group-append">
                                            &nbsp;<button id="addcountry-jq-searchButtonpymnt" class="btn btn-primary fa fa-money" type="button" perfect-css="button" title="Add Payment Method" onclick="GetPaymentlists(this)"></button>

                                        </div>
                                    </div>

                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-xl-4">
                    <div class="row">
                        <div class="col-sm-12">
                            <div class="cardEMICollection" id="divCusDetails">
                                <div class="card-header bg-primary text-white text-center">
                                    Customer Information
                                </div>
                                <div class="card-body" style="padding: 0rem">
                                    <table class="table table-bordered">
                                        <tbody>
                                            <tr>
                                                <td>Customer Name</td>
                                                <td> <span id="CusName" name="CusName"></span></td>
                                            </tr>
                                            <tr>
                                                <td>Mobile</td>
                                                <td><span id="CusMobile" name="CusMobile"></span></td>
                                            </tr>
                                            <tr>
                                                <td>Project Number</td>
                                                <td><span id="ProjNumber" name="ProjNumber"></span></td>
                                            </tr>

                                            <tr>
                                                <td>Project Amount</td>
                                                <td><span id="PrBillAmount" name="PrBillAmount"></span></td>
                                            </tr>
                                            <tr>
                                                <td>Due Amount</td>
                                                <td><span id="PrDueAmount" name="PrDueAmount"></span></td>
                                            </tr>
                                            <tr>
                                                <td>Advance Amount</td>
                                                <td><span id="AdvAmount" name="PrAdvAmount"></span></td>
                                            </tr>
                                            <tr>
                                                <td>Balance Amount</td>
                                                <td><span id="PrBalanceAmount" name="PrBalanceAmount"></span></td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                                @*<div class="card-footer" style="padding: 0;">
                            </div>*@
                            </div>
                            @*<br />*@

                        </div>
                    </div>
                </div>
            </div>
            <hr class="Final" />
            <div class="row">



                <div class="modal fade" perfect-class="formGroupModalpayment" id="formGroupModalpayment">
                    <div class="modal-dialog  modal-dialog-centered modal-md" role="document">
                        <div class="modal-content">
                            <div class="modal-header border-0">
                                <h5 class="modal-title">Payment Method</h5>
                                <button type="button" class="close" data-dismiss="modal">
                                    <span>&times;</span>
                                </button>
                            </div>
                            <div class="modal-body" perfect-class="formGroup" style="max-height: calc(100vh - 200px); overflow-y: auto;padding: 1rem;">
                                <div class="row">


                                    <div class="col-sm-12">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">Method <span class="text-danger">*</span></label>
                                            <div class="col-sm-8">
                                                <div class="input-group">
                                                    <select class="form-control" perfect-tempTable-Payment="PaymentMethod" name="PaymentMethod" id="ddlPaymentMethod" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select">
                                                        <option value="">Please Select </option>


                                                        @if (!(Model.PaymentView is null))
                                                        {
                                                            foreach (var Module in Model.PaymentView)
                                                            {
                                                                <option value="@Module.PaymentmethodID">@Module.Name</option>
                                                            }
                                                        }
                                                    </select>


                                                </div>
                                                <div class="text-danger temptableError"></div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-12">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">Ref No.</span>
                                            </label>
                                            <div class="col-sm-8">

                                                <div class="input-group">
                                                    <input type="text" class="form-control " perfect-tempTable-Payment="Refno" name="Refno" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" maxlength="140" />

                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-sm-12">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">Amount</span>
                                                <span class="text-danger">*</span>
                                            </label>
                                            <div class="col-sm-8">
                                                <div class="input-group">
                                                    <input type="text" class="form-control perfectValidate_string_nm text-right" perfect-tempTable-Payment="PAmount" id="PAmount" name="PAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="decimalpnt(this,'PAmount',3)" onchange="Pamount(this)" maxlength="12" />

                                                </div>
                                                <div class="text-danger temptableError"></div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-9">
                                    </div>
                                    <div class="col-sm-3 text-right">
                                        <div class="input-group">
                                            <div class="input-group-append">
                                                <div>
                                                    <button type="button" class="btn btn-primary1 " onclick="createtable(this,'Payment',['PaymentMethod'],paytableOptionsTempOut)"><i class="fa fa-plus" aria-hidden="true"></i></button>
                                                    <button class="btn btn-light1" type="button" onclick="productclear(this, 'Payment')"><i class="fa fa-refresh" aria-hidden="true"></i></button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-12">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel" style="font-weight:500;">Bal. Amount :</span>

                                            </label>
                                            <div class="col-sm-8">
                                                <div class="input-group">

                                                    <label class="col-form-label">
                                                        <span perfect-class="formGroupLabel" style="font-weight:500;" name="BalAmt"></span>
                                                    </label>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-sm-12">
                                        <div class="form-group row" perfect-class="formGroup">

                                            <div class="table-responsive" perfect-tempTable-Payment="" perfect-tempTable="Payment" id="Paymentdethead" perfect-tempTable-lastindex="0" perfect-tempTable-action="0"></div>
                                            <div class="text-danger temptableError"></div>

                                        </div>
                                    </div>


                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-primary light" onclick="Billttlnetchck(this)">Apply</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
               
            </div>
            <div class="card-footer text-right" perfect-class="formFooter">
                @if (ViewBag.PagedAccessRights.UsrrlPtRpt)
                {
                <button id="" type="button" class="btn btn-primary fa fa-print mr-3  d-none" name="Print" perfect-css="button" onclick="getPageSize(this,0)"><i class="fa fa-print fa-spin loaderClass"></i></button>
                }
                    @*<button id="" type="button" class="btn btn-info mr-3  d-none" name="Invoice" perfect-css="button" onclick="fn_ProjectBilling_invoice(this)"><i class="fa fa-refresh fa-spin loaderClass"></i>Invoice</button>*@
                    <button id="" type="button" class="btn btn-primary mr-3 addcompany-jq-addnewuserUpdate d-none" name="update" perfect-css="button" onclick=" ConfirmDatecheck(this,'Update')"><i class="fa fa-refresh fa-spin loaderClass"></i>Update</button>
                    <button id="addcompany-jq-addnewuser" type="button" class="btn btn-primary mr-3 " name="add" perfect-css="button" onclick=" ConfirmDatecheck(this,'Add')"><i class="fa fa-refresh fa-spin loaderClass "></i>Save</button>
                    <button type="button" class="btn btn-light" perfect-css="button" onclick="ResetButton(this)" name="reset">Clear</button>
                </div>
            <div id="Id_mock_div" style="visibility: hidden;"></div>
        </form>
    </div>
</div>
<script src="~/Scripts/jqDOM/searchDOMCreation.js"></script>
<script>

    //on load functions
    $(document).ready(function () {
        initFunctions('form');
        $('[name="Performaview"]').val('@ViewBag.Performa');
        //displayBuyBack();
        //ModeChange(this,0);
        //$(".Final").hide();
    });

    $("#pssModalOtherCharges").on('hide.bs.modal', function () {
        $("#PrOtherChargesid").trigger("change");
    });
    function roundoff(ele) {

        let $thisForm = $("#frmPrjBill");
        var FK_FinancePlanType = $thisForm.find('[name="FK_FinancePlanType"]').val() == "" ? "0" : $thisForm.find('[name="FK_FinancePlanType"]').val();

        // let roundof = $thisForm.find('[name="Roundoff"]').val() == "" ? "0" : $thisForm.find('[name="Roundoff"]').val();
        let roundof = parseFloat($('#Roundoff').val() == "" ? "0" : $('#Roundoff').val());
        let roundoff = parseFloat($('#Roundoff2').val() == "" ? "0" : $('#Roundoff2').val());
        if (isNaN(roundoff)) {
            roundoff = 0;
        }
        //if (roundof != "" && roundof != null) {
        //    $('#Roundoff').val(parseFloat(roundof).toFixed(2));

        //    let biltl = 0;
        //    let otherchg = 0;


        //    let netat = 0;
        //    let advamt = 0;
        //    let netamt = 0;
        //    let taxamount = 0;
        //    let billmode = 0;
        //    let amount = 0;
        //    biltl = parseFloat( $thisForm.find('[name="PrNetAmount"]').val() == "" ? "0" : $thisForm.find('[name="PrNetAmount"]').val());
        //    otherchg = parseFloat( $thisForm.find('[name="PrOtherCharges"]').val() == "" ? "0" : $thisForm.find('[name="PrOtherCharges"]').val());
        //    taxamount = parseFloat($thisForm.find('[name="PrTaxAmount"]').val() == "" ? "0" : $thisForm.find('[name="PrTaxAmount"]').val());
        //    amount = parseFloat( $thisForm.find('[name="Amount"]').val() == "" ? "0" : $thisForm.find('[name="Amount"]').val());
        //    advamt = parseFloat( $thisForm.find('[name="AdvAmount"]').val() == "" ? "0" : $thisForm.find('[name="AdvAmount"]').val());

        //    let Amount = 0;
        //    let BillAmount = parseFloat($thisForm.find('[name=PrBalanceAmount]').text()) + parseFloat($thisForm.find('[name=Roundoff]').text());
        //    let AdvanceAmount = parseFloat($thisForm.find('[name=PrAdvAmount]').text());
        //    let balanceamount = parseFloat( $thisForm.find('[name=PrBalanceAmount]').text());

        //    if ($thisForm.find('[name=FK_Project]').val() != 0 || $thisForm.find('[name=FK_Project]').val() != "") {

        //        if ($("#PrBillMode").val() == 1) {
        //            if (balanceamount >= BillAmount) {
        //                if (parseFloat(AdvanceAmount) > 0) {

        //                    Amount = (parseFloat(BillAmount)) - (parseFloat(AdvanceAmount));
        //                    //$("#Amount").attr('max', Number(Amount) - 0.01);
        //                    $("#Amount").attr('max', Number(balanceamount));
        //                    $thisForm.find('[name="AdvAmount"]').val(Number($thisForm.find('[name="Amount"]').val()).toFixed(2));
        //                }
        //            }
        //            else {
        //                Amount = $thisForm.find('[name="Amount"]').val() + $thisForm.find('[name=Roundoff]').text();
        //                //$("#Amount").attr('max', Number(BillAmount) - 0.01);
        //                $("#Amount").attr('max', Number(balanceamount));
        //                $thisForm.find('[name="AdvAmount"]').val(Number(Amount).toFixed(2));
        //            }


        //        }
        //        else if ($("#PrBillMode").val() == 2) {

        //                $thisForm.find('[name="Amount"]').val(Number(BillAmount).toFixed(2));

        //            $thisForm.find('[name="AdvAmount"]').val(Number(AdvanceAmount).toFixed(2));
        //            $("#Amount").removeAttr('max');
        //        }
        //    }

        //    billmode =$("#PrBillMode").val();

        //    if ($("#IncludeTax").val() == "true") {
        //        netat = parseFloat(amount) + parseFloat(otherchg) + parseFloat(roundof);

        //    } else {
        //        netat = parseFloat(amount) + parseFloat(otherchg) + parseFloat(taxamount) + parseFloat(roundof);

        //    }
        //    netamt = netat - parseFloat(advamt);
        //    //if (billmode == 2) {



        //    //}
        //    //else {
        //    //    netat = parseFloat(amount) + parseFloat(roundof);
        //    //    netamt = netat;
        //    //}

        //    if (FK_FinancePlanType != "0") {
        //        var ntamnt = parseFloat($thisForm.find('[name="DownPayment"]').val() == "" ? "0" : $thisForm.find('[name="DownPayment"]').val()) + parseFloat(parseFloat($thisForm.find('[name="PrOtherCharges"]').val() == "" ? "0" : $thisForm.find('[name="PrOtherCharges"]').val())) + parseFloat(roundoff);
        //        $thisForm.find('[name="PrNetAmount"]').val(Number(ntamnt).toFixed(2));
        //    } else {

        //        $thisForm.find('[name=PrNetAmount]').val(netamt.toFixed(2));
        //    }



        //    let billamt = 0;
        //    let bilamt = 0;

        //    if ($thisForm.find('[name=BalAmt]').text() == '') {
        //        bilamt = 0;
        //    }
        //    else {
        //        bilamt = netamt;
        //    }

        //    $('#Paymentdethead').find('tbody tr').each(function (index, ele) {
        //        billamt += parseFloat($(ele).find('.PAmount').text());

        //    });
        //    bilamt = parseFloat(bilamt) - billamt;

        //    $thisForm.find('[name=BalAmt]').text(bilamt.toFixed(2));

        //}

        if (roundoff != null) {

            $('#Roundoff2').val(parseFloat(roundoff).toFixed(2));
            debugger;
            let biltl = 0;
            let otherchg = 0;


            let netat = 0;
            let advamt = 0;
            let netamt = 0;
            let taxamount = 0;
            let billmode = 0;
            let amount = 0;
            biltl = $thisForm.find('[name="PrNetAmount"]').val() == "" ? "0" : $thisForm.find('[name="PrNetAmount"]').val();
            otherchg = $thisForm.find('[name="PrOtherCharges"]').val() == "" ? "0" : $thisForm.find('[name="PrOtherCharges"]').val();
            taxamount = $thisForm.find('[name="PrTaxAmount"]').val() == "" ? "0" : $thisForm.find('[name="PrTaxAmount"]').val();
            amount = $thisForm.find('[name="Amount"]').val() == "" ? "0" : $thisForm.find('[name="Amount"]').val();
            advamt = $thisForm.find('[name="AdvAmount"]').val() == "" ? "0" : $thisForm.find('[name="AdvAmount"]').val();

            let Amount = 0;
            let BillAmount = parseFloat($thisForm.find('[name="PrBalanceAmount"]').text() == "" ? "0" : $thisForm.find('[name="PrBalanceAmount"]').text()) + parseFloat($thisForm.find('[name="Roundoff"]').text() == "" ? "0" : $thisForm.find('[name="Roundoff"]').text());
            let AdvanceAmount = parseFloat($thisForm.find('[name="PrAdvAmount"]').text() == "" ? "0" : $thisForm.find('[name="PrAdvAmount"]').text());
            let balanceamount = parseFloat($thisForm.find('[name="PrBalanceAmount"]').text() == "" ? "0" : $thisForm.find('[name="PrBalanceAmount"]').text());

            if ($thisForm.find('[name="FK_Project"]').val() != 0 || $thisForm.find('[name="FK_Project"]').val() != "") {
                if ($("#PrBillMode").val() == 1) {
                    if (balanceamount >= BillAmount) {
                        if (parseFloat(AdvanceAmount) > 0) {
                            Amount = (parseFloat(BillAmount)) - (parseFloat(AdvanceAmount));
                            //$("#Amount").attr('max', Number(Amount) - 0.01);
                            $("#Amount").attr('max', Number(balanceamount));
                          //  $thisForm.find('[name="AdvAmount"]').text(Number($thisForm.find('[name="Amount"]').val()).toFixed(2));
                        }
                    }
                    else {
                        Amount = $thisForm.find('[name="Amount"]').val() + $thisForm.find('[name="Roundoff"]').text();
                        //$("#Amount").attr('max', Number(BillAmount) - 0.01);
                        $("#Amount").attr('max', Number(balanceamount));
                        //$thisForm.find('[name="AdvAmount"]').text(Number(Amount).toFixed(2));
                    }


                }
                else if ($("#PrBillMode").val() == 2) {
                    $thisForm.find('[name="Amount"]').val(Number(BillAmount).toFixed(2));
                    $thisForm.find('[name="AdvAmount"]').text(Number(AdvanceAmount).toFixed(2));
                    $("#Amount").removeAttr('max');
                }
            }

            billmode =$("#PrBillMode").val();

            //if (billmode == 2) {
            //    netat = parseFloat(amount) + parseFloat(otherchg) + parseFloat(taxamount) + parseFloat(roundoff);
            //    netamt = netat - parseFloat(advamt);
            //}
            //else {
            //    netat = parseFloat(amount) + parseFloat(roundoff);
            //    netamt = netat;
            //}
            if ($("#IncludeTax").val() == "true") {

                netat = parseFloat(amount) + parseFloat(otherchg) +   parseFloat(roundoff);
                netamt = netat - parseFloat(advamt);


            } else {
                netat = parseFloat(amount) + parseFloat(otherchg) + parseFloat(taxamount) + parseFloat(roundoff);
                netamt = netat - parseFloat(advamt);

            }
            
              if (FK_FinancePlanType != "0") {
                  var ntamnt = parseFloat($thisForm.find('[name="DownPayment"]').val() == "" ? "0" : $thisForm.find('[name="DownPayment"]').val()) + parseFloat(parseFloat($thisForm.find('[name="PrOtherCharges"]').val() == "" ? "0" : $thisForm.find('[name="PrOtherCharges"]').val())) + parseFloat(roundoff);
                 
                  $thisForm.find('[name="PrNetAmount"]').val(Number(ntamnt).toFixed(2)); 
            } else {

                  $thisForm.find('[name="PrNetAmount"]').val(netamt.toFixed(2));  
            }

            let billamt = 0;
            let bilamt = 0;

            if ($thisForm.find('[name="BalAmt"]').text() == '') {
                bilamt = 0;
            }
            else {
                bilamt = netamt;
            }

            $('#Paymentdethead').find('tbody tr').each(function (index, ele) {
                billamt += parseFloat($(ele).find('.PAmount').text());

            });
            bilamt = parseFloat(bilamt) - billamt;
            
            $thisForm.find('[name=BalAmt]').text(bilamt.toFixed(2));
           //$thisForm.find('[name="BalAmt"]').text(parseFloat($thisForm.find('[name="PrNetAmount"]').val()).toFixed(2));


        }
        CalcTotalAmount(ele);
    }

       @*function displayBuyBack() {
        debugger
           
         let $thisForm = $('[perfect-class="form"]');
                $.ajax({
                url: '@Url.Action("ShowBuyBack", "ProjectBilling")',
                type: "Get",
                dataType: "json",
                contentType: "application/json",
                success: function (ajaxOutput) {//<----- if ajax method executed succesfully,  we get the data passed from controller in this variable  => success: function (variable) {

                 if (ajaxOutput.Process.IsProcess) {
                     $.each(ajaxOutput.Data, function (key, value) {
                         if (value.GsValue == true ) {


                             $thisForm.find('[name="buybacksection"]').show();
                             $thisForm.find('[name="Buybackamt"]').show();
                             

                         }
                         else {
                             $thisForm.find('[name="buybacksection"]').hide();
                             $thisForm.find('[name="Buybackamt"]').hide();
                         
                         }
                        
                     });
                 } 
                 else {
                     $.each(ajaxOutput.Process.Message, function (key, value) {
                         NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                     });
                 }

             },


        });
      


    }*@
    //function calculateAndDisplaySum(ele) {
    //    debugger
    //    var sum = 0;
    //    $('#BuyBackTable tbody tr').each(function () {
    //        var value = parseFloat($(this).find('td:eq(3)').text()) || 0;
    //        sum += value;
    //    });
    //    $('#Buybcksum').val(sum);
    //    roundoff(ele);

    //}


    //function createbuybacktable(ele, tkey, uniq = []) {
    //    debugger
    //    //var quantity = parseFloat($('[name="Quantity"]').val().trim() == "" ? "0" : $('[name="Quantity"]').val().trim());
    //    let $thisForm = $(ele).closest('[perfect-class="form"]');
    //    let tableKey = tkey;
    //    let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');
    //    let insertData = {};
    //    let tableOptionsTemp = restableOptionsTempOut;
    //    let unique = (uniq) ? uniq : [];
    //    let isValid = true;
    //    let errorClass = '.temptableError';
    //    if ($thisForm.find('[perfect-tempTable-' + tableKey + '="ProdName"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="ProdName"]').val() == "") {
    //        isValid = false;

    //        $thisForm.find('[perfect-tempTable-' + tableKey + '="ProdName"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Product');
    //    }
    //    else {
    //        $thisForm.find('[perfect-tempTable-' + tableKey + '="ProdName"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
    //    }
    //    if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').val() == "") {
    //        isValid = false;

    //        $thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter Quantity');
    //    }
    //    else {
    //        $thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
    //    }
    //    if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Rate"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="Rate"]').val() == "") {
    //        isValid = false;

    //        $thisForm.find('[perfect-tempTable-' + tableKey + '="Rate"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter Rate');
    //    }
        //var rate = parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="Rate"]').val()) || 0;
        //var billtotal = parseFloat($thisForm.find('[name="SalNetAmount"]').val()) || 0;
        //if (rate >= billtotal) {
        //    isValid = false;
        //    $thisForm.find('[perfect-tempTable-' + tableKey + '="Rate"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Buy Back Amount must be less than Net Amount');
        //}
        //else {
        //    $thisForm.find('[perfect-tempTable-' + tableKey + '="Rate"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        //}
        //if (isValid) {
        //    let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
        //    let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
        //    let indexname = tkey + 'index';
        //    tableOptionsTemp.rowAttribute.push(indexname);
        //    tableOptionsTemp.hideColumn.push(indexname);
        //    let updateCond = '';
        //    let isNew = true;
        //    if (thisactionIndex > 0) {
        //        insertData[indexname] = thisactionIndex;
        //        updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
        //        isNew = false;
        //    }
        //    else {
        //        insertData[indexname] = lastIndex + 1;
        //        $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
        //        isNew = true;
        //    }
        //    if (unique.length > 0) {
        //        let prevData = [];
        //        $tblcontainer.find('table > tbody').find('tr').each(function () {
        //            if (isNew) {
        //                prevData.push($(this).data('pData'));
        //            }
        //            else {
        //                if (parseInt($(this).attr(indexname)) != thisactionIndex) {
        //                    prevData.push($(this).data('pData'));
        //                }
        //            }
        //        })



                //unique.forEach(function (key, i) {

                //    let $thisEle = $thisForm.find('[perfect-tempTable-' + tableKey + '="' + key + '"]');
                //    let headerEleName = $thisForm.find('[name="ProductName"]').text();
                //    let atname = $thisEle.attr('name');
                //    let cvalue;
                //    if ($thisEle.length != 0) {
                //        console.log('len', $thisEle)
                //        let $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
                //        let errmessage = headerEleName + " Already exits"

                //        //getting current value in cval
                //        if ($thisEle.is('select')) {
                //            cvalue = $thisEle.val();
                //        }
                //        else if ($thisEle.is('input')) {

                //            let inputEleType = $thisEle.attr('type').toLocaleLowerCase();

                //            if (inputEleType == 'checkbox') { cvalue = $thisEle.is(':checked'); }
                //            else if (inputEleType == 'hidden') { cvalue = $thisEle.val(); }
                //            else { cvalue = $thisEle.val(); }
                //        }
                //        else { cvalue = $thisEle.val(); }
                //        //searching in previous data
                //        if (prevData.find(a => a[atname] == cvalue)) {
                //            $errorElement.text(errmessage);
                //            isValid = false;
                //        }
                //    }
                //});
            //}

            //if (isValid) {
            //    $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
            //        let $this = $(this);
            //        let headerName = $this.attr('perfect-tempTable-' + tableKey);
            //        let nameAttr = $this.attr('name');

            //        if ($this.is('select')) {
            //            tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
            //            tableOptionsTemp.hideColumn.push(nameAttr)
            //            if ($this.val() != null) {
            //                let selectText = ($this.val().length == 0) ? '' : $this.children(":selected").text();
            //                insertData[nameAttr + '_d'] = selectText;
            //            }
            //            else {
            //                let selectText = ($this.val() == null) ? '' : $this.children(":selected").text();
            //                insertData[nameAttr + '_d'] = selectText;
            //            }
            //            insertData[nameAttr] = $this.val();
            //            $this.val('').selectpicker('refresh');
            //        }
            //        else if ($this.is('input')) {
            //            let inputType = $this.attr('type').toLocaleLowerCase();
            //            if (inputType == 'checkbox') {
            //                insertData[nameAttr] = $this.is(':checked');
            //                tableOptionsTemp.isCheckType.push(nameAttr)
            //                $this.prop('checked', false);
            //            }
            //            else if (inputType == 'hidden') {
            //                tableOptionsTemp.hideColumn.push(nameAttr)
            //                insertData[nameAttr] = $this.val();
            //                $this.val('');
            //            }

            //            else if (inputType == 'date') {
            //                insertData[nameAttr] = $this.val();
            //                $this.val('');
            //            }
            //            else {
            //                if (nameAttr == "Quantity") {
            //                    insertData[nameAttr] = $this.val().trim() == "" ? "0" : $this.val();
            //                } else {
            //                    insertData[nameAttr] = $this.val();
            //                }
            //                $this.val('');
            //            }
            //        }
            //        else {
            //            insertData[nameAttr] = $this.val();
            //            $this.val('');
            //        }
            //    });
            //    console.log('check 4.2');
            //    if (isNew) {
    //                console.log('check 4.2.1');
    //                if ($tblcontainer.find('table').length == 0) {
    //                    console.log('check 4.2.3');
    //                    $tblcontainer.append(pft_table_createtable([insertData], tableOptionsTemp));
    //                }
    //                else {
    //                    console.log('check 4.2.1');
    //                    let table = $tblcontainer.find('table').DataTable()
    //                    table.destroy()
    //                    pft_table_addTableRow($tblcontainer.find('table'), insertData, tableOptionsTemp);
    //                }
    //                console.log('check 4.2.1');
    //            }
    //            else {
    //                console.log('check 4.3');
    //                let table = $tblcontainer.find('table').DataTable()
    //                table.destroy()
    //                console.log('check 4.4');
    //                console.log('table', $tblcontainer.find('table'))
    //                console.log('check 4.5');
    //                pft_table_replaceTableRow($tblcontainer.find('table'), updateCond, insertData, tableOptionsTemp);
    //            }
    //            console.log(insertData);
    //            $tblcontainer.attr('perfect-tempTable-action', 0);
    //        }
    //        console.log('check 5');
    //    }
    //    calculateAndDisplaySum(ele);


    //}
    //var restableOptionsTempOut = {
    //    iconButton: {
    //        buttons: [
    //            {
    //                icon: "fa fa-pencil btnPerfectGridEdit",
    //                action: function () {
    //                    let savedData = $(this).closest('tr').data('pData');
    //                    let $tablecontainer = $(this).closest('[perfect-tempTable]');
    //                    let tableKey = $tablecontainer.attr('perfect-tempTable');
    //                    let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
    //                    let indexname = tableKey + 'index';
    //                    let rindex = $(this).closest('tr').attr(indexname);
    //                    $tablecontainer.attr('perfect-tempTable-action', rindex);
    //                    console.log('Editclick', savedData);
    //                    $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
    //                        let $thisNode = $(this);
    //                        let pf_name = $thisNode.attr('name');
    //                        if ($thisNode.is('select')) {
    //                            $thisNode.val(savedData[pf_name]).selectpicker('refresh');
    //                        }
    //                        else if ($thisNode.is('input')) {

    //                            if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

    //                                $thisNode.prop('checked', savedData[pf_name]);
    //                            }
    //                            else {
    //                                $thisNode.val(savedData[pf_name]);
    //                            }
    //                        }
    //                        else {
    //                            $thisNode.val(savedData[pf_name]);
    //                        }
    //                    });
    //                }
    //            },
    //            {
    //                icon: "fa fa-trash btnPerfectGridDelete",
    //                action: function () {
    //                    debugger
    //                    let $tablecontainer = $(this).closest('[perfect-tempTable]');
    //                    let $thistbl = $(this).closest('table');
    //                    let $thisForm = $(this).closest('[perfect-class="form"]');
    //                    ///$thistbl.destroy();
    //                    let table = $thistbl.DataTable();
    //                    table.destroy();

    //                    if ($(this).closest('tbody').find('tr').length > 1) {
    //                        $(this).closest('tr').remove();
    //                        pft_table_slreset($thistbl);
    //                    }
    //                    else {
    //                        $thistbl.remove();
    //                        $thisForm.find('[name="buybacksumamt"]').val('');
    //                    }
    //                    calculateAndDisplaySum();
    //                    roundof($tablecontainer);

    //                    $("#btnresetRes").click();

    //                }
    //            }

    //        ]
    //    },
    //    onlyShowColumn: ["ProdName", "Quantity", "Rate", "SerialNo"],
    //    hideColumn: ['FK_Product'],
    //    serialNo: true,
    //    renameHeader: { "ProdName": "Item", "Quantity": "Quantity", "Rate": "Rate", "SerialNo": "Serial No" },
    //    rowAttribute: [],
    //    isCheckType: [],
    //    Scroll: true
    //};

    function decimalpnt(ele, id, range) {
        debugger
        let input = $('#' + id);

        ele.value = ele.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');
        let t = ele.value;
        ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t;
        input.on('keydown', function () {

            if (ele.value.includes('.')) {

            }
            var key = event.keyCode || event.charCode;
            if (key == 8 || key == 46) { }
            else {
                if (ele.value.indexOf('.') < 0 && ele.value.indexOf('.') !== 9 && ele.value.length > 8) {
                    ele.value = ele.value + '.';
                }
            }

        });

    }

    function ModeChange(ele,Mod,Value) {
        let $thisForm = $("#frmPrjBill");
        let Amount;
        let BillAmount = $thisForm.find('[name="PrBillAmount"]').text() == "" ? "0" : $thisForm.find('[name="PrBillAmount"]').text();
        let AdvanceAmount = $thisForm.find('[name="PrAdvAmount"]').val() == ""?"0":$thisForm.find('[name="PrAdvAmount"]').text();
        let roundoff = $thisForm.find('[name=Roundoff]').text() == "" ? "0" : $thisForm.find('[name="Roundoff"]').text();
        let PrBalanceAmount = $("#PrBalanceAmount").text() == "" ? "0" : $("#PrBalanceAmount").text();
        let PrDueAmount = $("#PrDueAmount").text() == "" ? "0" : $("#PrDueAmount").text();
        //let AdvanceAmount = $("#AdvAmount").val();
        let Billmode;
        var FK_Project = $thisForm.find('[name="FK_Project"]').val() == "" ? "0" : $thisForm.find('[name="FK_Project"]').val();

        $(".PartialFinalEMI").hide();
        $thisForm.find('[name="AdvAmount"]').val('0');
        $thisForm.find('[name="PrOtherCharges"]').val('0');
        $thisForm.find('[name="PrNetAmount"]').val('0');
        $thisForm.find('[name="PrTaxAmount"]').val('0');
        if (Mod == 0) {
            Billmode =$("#PrBillMode").val();
        }
        else {
            Billmode = Value;
        }
        debugger
        $(".Final").hide();
        //
        if (Billmode == 1) {

            $(".Partial").show();
            if ($thisForm.find('[name="Performaview"]').val() == 'True') {
                $('.Performa').show();
            }
            else {
                $('.Performa').hide();
            }

            $(".Final").hide();
            $(".PartialFinal").show();
            $('#Amount').attr("disabled", false);
            $("#Amount").attr('max', Amount);
            //Amount = (parseFloat(BillAmount)) + (parseFloat(roundoff)) - (parseFloat(AdvanceAmount));
            //$thisForm.find('[name="AdvAmount"]').val(Number(Amount).toFixed(2));
            $thisForm.find('[name="Amount"]').val(PrDueAmount);
        }
        else if (Billmode == 2) {
            $thisForm.find('#Performa').prop("checked", false);
            $('.Performa').hide();
            $(".Partial").hide();
            $(".Final").show();
            $('#Amount').attr("disabled", true);
            $("#Amount").removeAttr('max');
            //Amount = (parseFloat(BillAmount)) + (parseFloat(roundoff)) - (parseFloat(AdvanceAmount));
            //$thisForm.find('[name="AdvAmount"]').val(Number(AdvanceAmount).toFixed(2));
            //$thisForm.find('[name="Amount"]').val(Number(Amount).toFixed(2));


            var FK_FinancePlanType = $thisForm.find('[name=FK_FinancePlanType]').val() == "" ? "0" : $thisForm.find('[name=FK_FinancePlanType]').val();
            if (FK_FinancePlanType != "0") {
                $(".PartialFinalEMI").show();

            } else {
                $(".PartialFinalEMI").hide();
                $(".emiText").val(0);

            }



            $thisForm.find('[name="Amount"]').val(PrBalanceAmount);
        }
        else{
            $(".Final").hide(); $('.Performa').hide();
        }

        $('#Paymentdethead').empty();
        if (FK_Project != 0) {

            ShowTax($("#addcountry-jq-searchButton3"), 0);
        } else {
            CalculateTotalProjectBill(ele);

        }
        //$thisForm.find('[name=BalAmt]').text(0.00);
    }
    function ResetButton() {
        fn_ProjectBillingIndex_initialLoad();
        projectbillid = 0;
    }
    function PartialAmntChange(ele) {
        debugger;
        var FK_Project = $("#FK_Project").val();
        if (FK_Project != 0) {

            ShowTax($("#addcountry-jq-searchButton3"), 0);
            CalculateTotalProjectBill(ele);
        } else {
            CalculateTotalProjectBill(ele);
        }
    }
    function PerformaChange(ele) {

        BindTaxDetails(ele, 0);

    }
    function getfunction(ele) {
        let $thisForm = $("#frmPrjBill");

        $("#Performa").prop("checked", false);
        $("#Amount").val("0");
        $("#PrTaxAmount").val("0");
        $("#PrOtherChargesid").val("0");
        $("#Roundoff2").val("0");
        $("#PrNetAmount").val("0");
        $("#Paymentdethead").html("");
     






        let BillAmount = 0;
        let AdvanceAmount = 0;
         
        if ($thisForm.data('popValueData')) {
            let $tempArr = $thisForm.data('popValueData');

            $thisForm.find('[name="CusName"]').text($tempArr.CusName);
            $thisForm.find('[name="CusMobile"]').text($tempArr.CusMobile);
            $thisForm.find('[name="ProjNumber"]').text($tempArr.ProjNumber);
            $thisForm.find('[name="ProjectName"]').val($tempArr.ProjName);
            $thisForm.find('[name="PrBillAmount"]').text(Number($tempArr.PrBillAmount).toFixed(2));
            $thisForm.find('[name="PrAdvAmount"]').text(Number($tempArr.PrAdvAmount).toFixed(2));
            $thisForm.find('[name="PrBalanceAmount"]').text(Number($tempArr.BalanceAmount).toFixed(2));
            $thisForm.find('[name="PrDueAmount"]').text(Number($tempArr.PrDueAmount).toFixed(2));
            $thisForm.find('[name="ProjectStartDate"]').val($tempArr.ProjectStartDate);

            $thisForm.find('[name="IncludeTax"]').val($tempArr.IncludeTax);
            //$thisForm.find('[name=FK_TaxGroup]').val( $tempArr.FK_TaxGroup);
            $thisForm.find('[name="FK_FinancePlanType"]').val($tempArr.FinancePlanType);
        }
        BillAmount = $thisForm.find('[name="PrBillAmount"]').text();
        AdvanceAmount = $thisForm.find('[name="PrAdvAmount"]').text();
        amount = $thisForm.find('[name="PrDueAmount"]').val();
        var balamt = $thisForm.find('[name="PrBalanceAmount"]').text();
        let valamount = (parseFloat(BillAmount)) - (parseFloat(AdvanceAmount));
        $('#PrBillMode').val(""); $('#PrBillMode').val("");
        var FK_FinancePlanType = $thisForm.find('[name="FK_FinancePlanType"]').val() == "" ? "0" : $thisForm.find('[name="FK_FinancePlanType"]').val();
        if (FK_FinancePlanType != "0") {

            $(".PartialFinalEMI").show();

            $('#PrBillMode option[value="1"]').hide(); $('#PrBillMode').selectpicker('refresh');


        } else {

            $(".PartialFinalEMI").hide();
            $(".emiText").val(0);

            $('#PrBillMode option[value="1"]').show(); $('#PrBillMode').selectpicker('refresh');
        }

        //$thisForm.find('[name=Amount]').val(valamount);
        debugger;
        if ($("#PrBillMode").val() == 1) {

            $thisForm.find('[name="Amount"]').val(amount);
        }
        else if ($("#PrBillMode").val() == 2)
        {
            $thisForm.find('[name="Amount"]').val(balamt);


        }


        ShowTax($("#addcountry-jq-searchButton3"), 0);



        calculateMaxAmount(ele);
        CalculateTotalProjectBill(ele);
        //if ($("#PrBillMode").val() == 2) {

        //}
    }

    function calculateMaxAmount(ele) {
        debugger
        let $thisForm = $('[perfect-class="form"]');
        let Amount = 0;
        var rndoff = 0;
        //if ($("#PrBillMode").val() == 2) {
        rndoff = parseFloat((Math.round(parseFloat($thisForm.find('[name="Amount"]').val() == "" ? "0" : $thisForm.find('[name="Amount"]').val())) - parseFloat($thisForm.find('[name="Amount"]').val() == "" ? "0" : $thisForm.find('[name="Amount"]').val())).toFixed(2));

        //}
        $("#Roundoff2").val(rndoff);

        let BillAmount = parseFloat($thisForm.find('[name="Amount"]').val().trim() == "" ? "0" : $thisForm.find('[name="Amount"]').val());
        let AdvanceAmount = parseFloat($thisForm.find('[name="PrAdvAmount"]').text().trim() == "" ? "0" : $thisForm.find('[name="PrAdvAmount"]').text());
        let balanceamount = parseFloat($thisForm.find('[name="PrBalanceAmount"]').text().trim() == "" ? "0" : $thisForm.find('[name="PrBalanceAmount"]').text() );
        if ($thisForm.find('[name="FK_Project"]').val() != 0 && $thisForm.find('[name="FK_Project"]').val().trim()!= "") {
            if ($("#PrBillMode").val() == 1) {
                debugger;
                //if (balanceamount >= BillAmount) {
                //    if (parseFloat(AdvanceAmount) > 0) {

                //        Amount = (parseFloat(BillAmount)) - (parseFloat(AdvanceAmount));
                //        $("#Amount").attr('max', Number(Amount) - 0.01);
                $("#Amount").attr('max', Number(balanceamount -parseFloat(0.01)));
                //        $thisForm.find('[name="AdvAmount"]').val(Number($thisForm.find('[name="Amount"]').val()).toFixed(2));
                //    }
                //}
                //else {
                //    Amount = parseFloat($thisForm.find('[name="PrBalanceAmount"]').val().trim() == "" ? "0" : $thisForm.find('[name="PrBalanceAmount"]').val()) + parseFloat($thisForm.find('[name=Roundoff]').text());
                //    $("#Amount").attr('max', Number(BillAmount) - 0.01);
                //    $("#Amount").attr('max', Number(BillAmount));
                //    $thisForm.find('[name="AdvAmount"]').val(Number(Amount).toFixed(2));
                //}
                let billamt = 0;
                let bilamt = 0;

                bilamt = parseFloat( $thisForm.find('[name="Amount"]').val());
                $('#Paymentdethead').find('tbody tr').each(function (index, ele) {
                    billamt += parseFloat($(ele).find('.PAmount').text());
                });
                bilamt = parseFloat(bilamt) - billamt;

                $thisForm.find('[name="BalAmt"]').text(parseFloat(bilamt.toFixed(2))  + parseFloat( rndoff));
                $thisForm.find('[name="PrNetAmount"]').val(parseFloat(bilamt.toFixed(2)) + parseFloat(rndoff));
            }
            else if ($("#PrBillMode").val() == 2) {

                $thisForm.find('[name="Amount"]').val(Number(BillAmount).toFixed(2));
                $thisForm.find('[name="AdvAmount"]').val(Number(AdvanceAmount).toFixed(2));
                $("#Amount").removeAttr('max');
            }


        }
        else {
            $thisForm.find('[name="Amount"]').val("");
            NotificationMessage({ 'type': 'info', 'heading': 'info', 'message': "Please Select Project" });
        }

    }

    //function TotalAmountCalculation(ele) {

    //    let $thisForm = $("#frmPrjBill");

    //    let BillAmount = $thisForm.find('[name=PrBillAmount]').text();
    //    let AdvanceAmount = $thisForm.find('[name=PrAdvAmount]').text();

    //    if ($("#PrBillMode").val() == 1) {
    //        let Amount = $thisForm.find('[name="Amount"]').val() + $thisForm.find('[name="Roundoff"]').val();
    //        $("#Amount").attr('max', Amount);
    //        $thisForm.find('[name="AdvAmount"]').val(Number(Amount).toFixed(2));
    //    }
    //    else if ($("#PrBillMode").val() == 2) {
    //        $("#Amount").removeAttr('max');
    //        $thisForm.find('[name="AdvAmount"]').val(0);
    //    }
    //}

    var othrchargelst = [];

    function ShowOtherCharges(ele, mode) {

        let $thisForm = $("#frmPrjBill");

        if ($thisForm.data('pOthrChgData')) {

            if ($thisForm.data('pOthrChgData').length > 0) {

                othrchargelst = $thisForm.data('pOthrChgData');
            }

        }

        BindChargeDetails(ele, mode)
    }

    function BindChargeDetails(ele, mode) {

        var InputData =
        {
            TransMode: ProjectBillingTransMode,
        }


        $.ajax({
            url: "@Url.Action("GetOtherCharges", "ProjectBilling")",
            type: "Get",
            data: InputData,
            dataType: "json",
            contentType: "application/json",
            success: function (ajaxOutput) {
                if (ajaxOutput.OtherCharges.Process.IsProcess) {
                         var CheckListHTML = '';

                         if (ajaxOutput.OtherCharges.Data.length > 0) {

                             $.each(ajaxOutput.OtherCharges.Data, function (i, value) {

                                 let options = ''
                                     if (othrchargelst != '') {

                                         $.each(othrchargelst, function (key, value1) {

                                             if (value1.ID_OtherChargeType == value.ID_OtherChargeType) {

                                                 value.OctyAmount = value1.OctyAmount;
                                                 $.each(ajaxOutput.Transtypelist.Data, function (i, valuea) {
                                                     if (valuea.TransTypeID.toString() == value1.OctyTransType) {

                                                         options += '<option value=' + valuea.TransTypeID + ' selected="selected">' + valuea.TransType + '</option>'
                                                     }
                                                     else {
                                                         options += '<option value=' + valuea.TransTypeID + '>' + valuea.TransType + '</option>'
                                                     }
                                                 });
                                             }


                                         });

                                     }
                                     else
                                     {

                                         $.each(ajaxOutput.Transtypelist.Data, function (i, valuea) {
                                             options += '<option value=' + valuea.TransTypeID + '>' + valuea.TransType + '</option>'
                                         });
                                         //---

                                     }

                                 let $dropdown = '<select class="form-control"name="selector" id="selector" >' + options + '</select>';
                                 CheckListHTML += "<tr>";
                                 CheckListHTML += "<td>" + value.SlNo + "</td>";
                                 CheckListHTML += "<td Class='jq_ID_OtherChargeType_td' Style='Display:none'>" + value.ID_OtherChargeType + "</td>";
                                 CheckListHTML += "<td Class='jq_Type_td'>" + value.OctyName + "</td>";
                                 CheckListHTML += "<td class='jq_TransType_td'>" + $dropdown + "</td>";
                                 CheckListHTML += "<td class='jq_OtherChagAmnt_td' ><input type='text' perfect-class='formGroupControl' perfect-ctype='input' perfect-css='input' class='form-control text-right' " +` id ="otherchg" name="otherchg" oninput="decimalpnt(this,'otherchg',3)"`+"  value='" + value.OctyAmount + "' ' /></td> /></td>";

                                 CheckListHTML += "</tr>";
                             })
                         }
                         else {
                             CheckListHTML += "<div class='form-group col-md-6'>";
                             CheckListHTML += "<div class='form-check mb-2'>";
                             CheckListHTML += "<label class='form-check-label' for='check1'>No Records...</label>";
                             CheckListHTML += "</div></div>"
                         }


                    $("#formGroupModalOtherChargebody").html(CheckListHTML)

                    if (mode == 0) {
                        $('#formGroupModalOtherCharge').modal({ backdrop: 'static', keyboard: false })
                     $('#formGroupModalOtherCharge').modal('show');
                    }
                    else {

                       $('#formGroupModalOtherCharge').modal('hide');
                    }


                }
                else {
                    $.each(ajaxOutput.OtherCharges.Process.Message, function (key, value) {

                        NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                    });
                }
            },
            complete: function () {
                $(ele).prop('disabled', false);
            }
        });
    }

    function BindOtherChargeAmount(ele) {

        let $modal = $(ele).closest('.modal');
        let $thisForm = $("#frmPrjBill");
        let sum = 0;
        othrchargelst = [];
        $modal.find('table tbody').find('tr').each(function () {

            let value = parseFloat($(this).find('.jq_OtherChagAmnt_td').find('input').val());;
            if ($(this).find('.jq_OtherChagAmnt_td').find('input').val() == '' || $(this).find('.jq_OtherChagAmnt_td').find('input').val() == null) {
                value = 0;
            }

            if (parseInt($(this).find('.jq_TransType_td').find('select').val()) == 0) {
                value = value * 0;
            }
            else if (parseInt($(this).find('.jq_TransType_td').find('select').val()) == 1) {
                value = value * 1;
            }
            else {
                value = value * 1;
            }
            sum = sum + value;

            let othrcharge = {
                ID_OtherChargeType: $(this).find('.jq_ID_OtherChargeType_td').text(),
                OctyTransType: $(this).find('.jq_TransType_td').find('select').val(),
                OctyAmount: parseFloat($(this).find('.jq_OtherChagAmnt_td').find('input').val())
            };
            othrchargelst.push(othrcharge);
            $thisForm.data({ pOthrChgData: othrchargelst });

        });

        $thisForm.find('[name="PrOtherCharges"]').val(Number(sum).toFixed(2));
        CalculateTotalProjectBill(ele);

       // roundof(ele);
    }
    function ProductDetailsclear(ele, tablekey) {
        debugger
        let $thisform = $(ele).closest('[perfect-class="form"]');

        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="select"]').val('').selectpicker('refresh');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="date"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="hidden"]').val('');
    }


    function ConfirmDatecheck(ele, actionType) {

        let $thisForm = $("#frmPrjBill");
        let upperlimits = $thisForm.find('[name="PrBillDate"]').val();
        var enqDates = new Date(upperlimits);
       
        let ProStartDate = $thisForm.find('[name="ProjectStartDate"]').val();

        let ndate = moment(ProStartDate, "DD/MM/YYYY").format("YYYY-MM-DD");

        var startdate = new Date(ndate);
       

        if (enqDates.getTime() < startdate.getTime()) {

            let confirmationDialogBoxOption = { heading: "Message", body: "Project Start Date is : <b>" + ProStartDate + "</b> ,Do you want to continue Project Billing?", cancel: "No", confirm: "Yes", reason: '' };
            var res = ConfirmDialog(confirmationDialogBoxOption);
            res.then(function (selectedOption) {
                if (selectedOption) {
                    fn_ProjectBillingForm_update(ele, actionType);
                }
                else {
                    fn_ProjectBillingIndex_initialLoad();
                    projectbillid = 0;
                }
            });
          
        }
        else {
            fn_ProjectBillingForm_update(ele, actionType);
        }
    }



    function fn_ProjectBillingForm_update(ele, actionType) {
        debugger
        
        let printAccess ='@ViewBag.PagedAccessRights.UsrrlPtRpt';
       
        let $thisForm = $("#frmPrjBill");
        debugger
        let ActionUrl = "";
        let _UserAction = 1;
        let Amount = 0;
        let Advance = 0;


        Amount = $thisForm.find('[name="Amount"]').val();
        Advance = $thisForm.find('[name="AdvAmount"]').val();

        let checkamout = false;
        let Amtcheck = $thisForm.find('[name="Amount"]').val();
        if (parseFloat(Amtcheck) <= 0) {
            checkamout = false;
        }
        else {
            checkamout = true;
        }
        debugger
        let validpay = true;
        let _ID_ProjectBilling;

        let isvalid = true;
        let upperlimits = $thisForm.find('[name="PrBillDate"]').val();
        var enqDates = new Date(upperlimits);
        var proamount = $thisForm.find('[name="PrBillAmount"]').val(); 
        let ProStartDate = $thisForm.find('[name="ProjectStartDate"]').val();

        let ndate = moment(ProStartDate, "DD/MM/YYYY").format("YYYY-MM-DD");
      
        var startdate = new Date(ndate);
        var todays = new Date();
        //var upperlimitsDate = new Date(upperlimits);
        //var ProStartDateDate = new Date(ProStartDate);

        if (enqDates.getTime() > todays.getTime()) {

            console.log('inside limit check if')
            $thisForm.find('[name="PrBillDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').attr("style", "display:block")
            $thisForm.find('[name="PrBillDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('Bill date should be less than or equal to Todays date')
            isvalid = false;


        }
        if (parseFloat(Amtcheck) > parseFloat(proamount)) {
            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': "Amount must not be greater than the project amount." });

        }
       

       else {
            if ($thisForm.valid() )  {
                var PrNetAmountval = parseFloat($thisForm.find('[name="PrNetAmount"]').val() == "" ? "0" : $thisForm.find('[name="PrNetAmount"]').val());
                if (PrNetAmountval > 0) {

                    if (checkamout) {

                        if (BillAmountbind(ele)) {
                            validpay = true;
                        }
                        else {
                            validpay = false;
                        }
                        if (validpay) {
                            debugger
                            $(ele).prop('disabled', true);
                            if (actionType === "Add") {
                                _ID_ProjectBilling = 0;
                                ActionUrl = "@Url.Action("AddNewProjectBilling", "ProjectBilling")";
                                _UserAction = 1;
                            }
                            else if (actionType === "Update") {
                                _ID_ProjectBilling = $thisForm.find('[name="ID_ProjectBilling"]').val();
                                ActionUrl = "@Url.Action("UpdateProjectBilling", "ProjectBilling")";
                                _UserAction = 2;
                            }
                            var tax = [];
                            let $modal = $thisForm.find('#zero_config');
                            $modal.find('tbody').find('tr').each(function () {
                                let taxinfo = {};
                                taxinfo['FK_TaxType'] = $(this).find('.jq_taxType_td').text();
                                taxinfo['TaxTyName'] = $(this).find('.jq_taxTypeName_td').text();
                                taxinfo['Amount'] = $(this).find('.jq_taxamount_td').find('input').val();
                                taxinfo['TaxPerc'] = $(this).find('.jq_taxPer_td').text();
                                console.log('taxinfo', taxinfo);
                                tax.push(taxinfo);
                            });
                            let OtherCharge = [];
                            let $modal2 = $thisForm.find('#zero_configOthercharge');
                            //$modal2.find('tbody').find('tr').each(function () {
                            $(".pssBodyOtherCharges tr").each(function () {
                                var OtChargeinfo = {};
                                OtChargeinfo['ID_OtherChargeType'] = $(this).find('.Othercharge_ID_OtherChargeType').text();

                                OtChargeinfo['OctyTransType'] = $(this).find('.jq_TransType_td').find('select').val();
                                OtChargeinfo['OctyName'] = $(this).find('.jq_Type_td').text();
                                OtChargeinfo['OctyAmount'] = $(this).find('.jq_OtherChagAmnt_td').find('input').val();
                                console.log('OtChargeinfo', OtChargeinfo);
                                OtherCharge.push(OtChargeinfo);

                            });

                            let paymentdetails = [];
                            $thisForm.find('[perfect-tempTable="Payment"]').find('tbody').find('tr').each(function () {
                                paymentdetails.push($(this).data('pData'));
                            })
                            //let buybackdetails = [];
                            //$thisForm.find('[perfect-tempTable="buyback"]').find('tbody').find('tr').each(function () {
                            //    buybackdetails.push($(this).data('pData'));
                            //})

                            var InputData =
                            {
                                __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                                'UserAction': _UserAction,
                                'ID_ProjectBilling': _ID_ProjectBilling,
                                'FK_Project': $thisForm.find('[name="FK_Project"]').val(),
                                'PrBillDate': $thisForm.find('[name="PrBillDate"]').val(),
                                'PrBillMode': $("#PrBillMode").val(),
                                'FK_BillType': $thisForm.find('[name="FK_BillType"]').val(),
                                'PrBillAmount': $thisForm.find('[name="Amount"]').val() == "" ? "0" : $thisForm.find('[name="Amount"]').val(),
                                'PrOtherCharges': $thisForm.find('[name="PrOtherCharges"]').val() == "" ? "0" : $thisForm.find('[name="PrOtherCharges"]').val(),
                                'PrAdvAmount': $thisForm.find('[name="AdvAmount"]').val() == "" ? "0" : $thisForm.find('[name="AdvAmount"]').val(),
                                'PrTaxAmount': $thisForm.find('[name="PrTaxAmount"]').val() == "" ? "0" : $thisForm.find('[name="PrTaxAmount"]').val(),
                                'PrNetAmount': $thisForm.find('[name="PrNetAmount"]').val() == "" ? "0" : $thisForm.find('[name="PrNetAmount"]').val(),
                                'RoundOff': $thisForm.find('[name="Roundoff"]').val() == "" ? "0" : $thisForm.find('[name="Roundoff"]').val(),
                                'OtherChgDetails': OtherCharge,
                                'TaxList': tax,
                                'TransMode': ProjectBillingTransMode,
                                'LastID': LastID_ProjectBilling,
                                'PaymentDetail': paymentdetails,
                                //'buyback': buybackdetails,
                                'PrPerforma': $("#Performa").is(":checked"),
                                'PrAddAmount': $thisForm.find('[name="AddAmount"]').val() == "" ? "0" : $thisForm.find('[name="AddAmount"]').val(),
                                'PrDownPayment': $thisForm.find('[name="DownPayment"]').val() == "" ? "0" : $thisForm.find('[name="DownPayment"]').val(),
                            }
                            console.log('InputData12 ----', InputData);
                            clearSessionValue(LastIDSessionKey);
                            console.log('InputData ----', InputData);
                            $.ajax({
                                url: ActionUrl,
                                type: "POST",
                                data: InputData,
                                dataType: "json",
                                contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                                success: function (ajaxOutput) {
                                    if (ajaxOutput.Process.IsProcess) {
                                        $.each(ajaxOutput.Process.Message, function (key, value) {
                                            NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                                            if (printAccess=='True') {
                                                let FK_ProjectBilling = ajaxOutput.Process.code;
                                                getPageSize(this, FK_ProjectBilling);
                                                let onSuccess = $thisForm.attr('perfect-onFormSuccess')

                                                if (onSuccess) {
                                                    window[onSuccess]();
                                                }
                                            }
                                        });
                                        othrchargelst = [];
                                      //  custumefun(this);
                                        $thisForm.data({ pOthrChgData: '' });
                                        fn_ProjectBillingIndex_initialLoad();
                                    }
                                    else {
                                        $.each(ajaxOutput.Process.Message, function (key, value) {
                                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                        });
                                    }
                                },
                                complete: function () {
                                    $(ele).prop('disabled', false);
                                }

                            });
                        }
                        else {
                            $(ele).prop('disabled', false);
                            NotificationMessage({ 'type': 'error', 'heading': 'Warning', 'message': 'In Payment Method Balance Amt. Should be  Zero ' });
                        }

                    }
                    else {
                        $(ele).prop('disabled', false);
                        NotificationMessage({ 'type': 'error', 'heading': 'Warning', 'message': 'Amount Should less than or Equal to Balance Amount' });
                    }
                }
                else {
                    $(ele).prop('disabled', false);
                    NotificationMessage({ 'type': 'error', 'heading': 'Warning', 'message': 'Net Payable Amount Should be greater than 0' });
                }
            }
        }
   }
    
    function ShowTax(ele, mod) {
        Taxcalled = 1;

        let $thisForm = $("#frmPrjBill");
        debugger;
        let taxinfo = {};
        if ($thisForm.data('pDataTax')) {

            if ($thisForm.data('pDataTax').length > 0) {
                taxinfo = $thisForm.data('pDataTax');
                taxinfo.push($thisForm.data('pDataTax'));
            }
            else {
                taxinfo.push($thisForm.data('pDataTax'));
            }
            //BindTaxDetails("1", 'formGroupModalTax', ele, mod)
            BindTaxDetails(ele, mod);
            if (mod == 1) {
                $('#formGroupModalTax').modal('show');
                $('#formGroupModalTax').modal({ backdrop: 'static', keyboard: false })
            }
            else {
                $('#formGroupModalTax').modal('hide');
            }
        }
        else {

            BindTaxDetails(ele, mod)
        }


    }

    function CalcTotalAmount(ele) {
        let $thisForm = $("#frmPrjBill");
        var IncludeTax = $thisForm.find('[name="IncludeTax"]').val();
        var totAmnt = 0; var billamt = parseFloat($("#Amount").val() == "" ? "0" : $("#Amount").val()); var othrchrg = parseFloat($("#PrOtherChargesid").val() == "" ? "0" : $("#PrOtherChargesid").val()); var Taxamnt = parseFloat($thisForm.find('[name="PrTaxAmount"]').val() == "" ? "0" : $thisForm.find('[name="PrTaxAmount"]').val());var ProcessngChrg = parseFloat($("#AddAmount").val() == "" ? "0" : $("#AddAmount").val());

        var roundoff = parseFloat($("#Roundoff2").val() == "" ? "0" : $("#Roundoff2").val());
        if (isNaN(roundoff)) {
            roundoff = 0;
        }
        if (IncludeTax=="false") {

            totAmnt = billamt + othrchrg + Taxamnt + ProcessngChrg + roundoff;
        } else {
            totAmnt = billamt + othrchrg + ProcessngChrg + roundoff;
        }

        $thisForm.find('[name="TotalAmount"]').val(parseFloat(totAmnt).toFixed(2));
    }


    function BindTaxDetails(ele,mod) {

        //let $thisForm = $("#frmPrjBill");
        let $thisForm = $("#frmPrjBill");
        var Performa = $thisForm.find('[name="Performa"]').is(":checked");

        console.log($(ele),"kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk");


        if (!Performa) {

            if ($("#FK_TaxGroup").val() != "") {

                var _amnt = 0;
                if ($("#PrBillMode").val() == "2") {
                    _amnt = $("#TaxableAmount").val() == "" ? "0" : $("#TaxableAmount").val();//
                }
                else {
                    _amnt = $thisForm.find('[name="Amount"]').val();
                }
                var InputData =
                {
                    FK_TaxGroup: $("#FK_TaxGroup").val(),
                    IncludeTax: $thisForm.find('[name="IncludeTax"]').val(),
                    Amount: _amnt,
                }

                $.ajax({
                    url: "@Url.Action("GetTaxAmountNew", "ProjectBilling")",
                    type: "Get",
                    data: InputData,
                    dataType: "json",
                    contentType: "application/json",
                    success: function (ajaxOutput) {
                        if (ajaxOutput != null) {
                            if (ajaxOutput.Process.IsProcess) {
                                var CheckListHTML = '';
                                let sum = 0;
                                if (ajaxOutput.Data.length > 0) {
                                    $.each(ajaxOutput.Data, function (i, value) {
                                        sum = sum + parseFloat(value.Amount.toFixed(2));
                                        CheckListHTML += "<tr>";
                                        CheckListHTML += "<td>" + value.SlNo + "</td>";
                                        CheckListHTML += "<td class='jq_taxType_td' Style='Display:none'>" + value.FK_TaxType + "</td>";
                                        CheckListHTML += "<td class='jq_taxTypeName_td'>" + value.TaxTyName + "</td>";
                                        CheckListHTML += "<td class='jq_taxPer_td text-center'>" + value.TaxPercentage + "</td>";
                                        CheckListHTML += "<td class='jq_taxamount_td ' ><input type='number' perfect-class='formGroupControl' perfect-ctype='input' perfect-css='input' class='form-control text-right' value='" + value.Amount.toFixed(2) + "' readonly/></td>";
                                        CheckListHTML += "</tr>";
                                    })

                                }
                                else {
                                    CheckListHTML += "<div class='form-group col-md-6'>";
                                    CheckListHTML += "<div class='form-check mb-2'>";
                                    CheckListHTML += "<input type='checkbox' class='form-check-input' >"
                                    CheckListHTML += "<label class='form-check-label' for='check1'>No Records...</label>";
                                    CheckListHTML += "</div></div>"
                                }

                                $("#formGroupModalTaxbody").html(CheckListHTML);

                                if (mod == 1) {
                                    $('#formGroupModalTax').modal('show');
                                    $('#formGroupModalTax').modal({ backdrop: 'static', keyboard: false })
                                }
                                else {
                                    $('#formGroupModalTax').modal('hide');
                                }
                                BindTaxAmount(ele);
                            }
                            else {
                                CalculateTotalProjectBill(ele);
                                $thisForm.find('[name="PrTaxAmount"]').val("0.00");

                                //$.each(ajaxOutput.Process.Message, function (key, value) {
                                //    alert("dd");
                                //    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                //});
                            }
                        }
                        else {
                            $("#PrTaxAmount").val("0.00");
                        }
                    },
                    complete: function () {
                        $(ele).prop('disabled', false);
                    }
                });

            }
            else {
                //NotificationMessage({ 'type': 'info', 'heading': 'Info', 'message': "Please Select Project" });
            }
        } else {
            $thisForm.find('[name="PrTaxAmount"]').val("0.00");
            CalculateTotalProjectBill(ele);
        }
    }


    //function BindTaxAmount(ele) {
    //    Taxcalled = 1;
    //    console.log('inside binddatat fn')
    //    let $modal = $(ele).closest('.modal');
    //    let $thisForm = $("#frmPrjBill");
    //    let sum = 0;

    //    $('#formGroupModalTaxbody tr').each(function (index, ele) {
    //        alert(sum);
    //        sum = sum + parseFloat($(this).find('.jq_taxamount_td').find('input').val());
    //    });
    //    $thisForm.find('[name=PrTaxAmount]').val(sum.toFixed(2));
    //    CalculateTotalProjectBill(ele);
    //}
    function BindTaxAmount(ele) {

        //let $thisForm = $("#frmPrjBill");
        let $thisForm = $("#frmPrjBill");;
        let sum = 0;

        $('#formGroupModalTaxbody tr').each(function (index, ele) {
            sum = sum + parseFloat($(ele).find('.jq_taxamount_td').find('input').val());

        });

        $thisForm.find('[name="PrTaxAmount"]').val(sum.toFixed(2));
        CalculateTotalProjectBill(ele);
    }


    function CalculateTotalProjectBill(ele) {

        let $thisForm = $("#frmPrjBill");
        let billamt = 0;
        let bilamt = 0;

        //if ($("#PrBillMode").val() == 2) {
        let Tax = 0;
        var Billmode =$("#PrBillMode").val();
        var checked = $("#Performa").is(":checked");
        if (!checked  ) {

            Tax = $thisForm.find('[name=PrTaxAmount]').val() == "" ? "0" : $thisForm.find('[name=PrTaxAmount]').val();
        }

            let OtherCharge = $thisForm.find('[name="PrOtherCharges"]').val() == "" ? "0" : $thisForm.find('[name="PrOtherCharges"]').val();
            let AdvanceAmt = $thisForm.find('[name="AdvAmount"]').val() == "" ? "0" : $thisForm.find('[name="AdvAmount"]').val();
            let BillAmt = $thisForm.find('[name="Amount"]').val() == "" ? "0" : $thisForm.find('[name="Amount"]').val();






            //let roundoff = $thisForm.find('[name=Roundoff]').val() == "" ? "0" : $thisForm.find('[name=Roundoff]').val();
        let NetAmount = 0;
        debugger;
        if ($("#IncludeTax").val() != null) {

            if ($("#IncludeTax").val() == "true") {

                var nettotal = parseFloat(BillAmt) +   parseFloat(OtherCharge);
                let roundoff = parseFloat(Math.round(nettotal) - nettotal).toFixed(2);
                $thisForm.find('[name="Roundoff"]').val(roundoff);


                NetAmount = (parseFloat(BillAmt) + parseFloat(OtherCharge) + parseFloat(roundoff));
               


            } else {
                var nettotal = parseFloat(BillAmt) + parseFloat(Tax) + parseFloat(OtherCharge);
                let roundoff = parseFloat(Math.round(nettotal) - nettotal).toFixed(2);
                $thisForm.find('[name="Roundoff"]').val(roundoff);
                    NetAmount = (parseFloat(BillAmt) + parseFloat(Tax) + parseFloat(OtherCharge) + parseFloat(roundoff));



            }
        }



       
        $thisForm.find('[name="PrNetAmount"]').val(Number(NetAmount).toFixed(2));
        var FK_FinancePlanType = $thisForm.find('[name="FK_FinancePlanType"]').val() == "" ? "0" : $thisForm.find('[name="FK_FinancePlanType"]').val();

        if (FK_FinancePlanType != "0") {
             var ntamnt = parseFloat($thisForm.find('[name="DownPayment"]').val() == "" ? "0" : $thisForm.find('[name="DownPayment"]').val()) + parseFloat($thisForm.find('[name="PrOtherCharges"]').val() == "" ? "0" : $thisForm.find('[name="PrOtherCharges"]').val()) + parseFloat($thisForm.find('[name="Roundoff"]').val() == "" ? "0" : $thisForm.find('[name="Roundoff"]').val());

            
            $thisForm.find('[name="PrNetAmount"]').val(Number(ntamnt).toFixed(2));
        }
        bilamt = $thisForm.find('[name="PrNetAmount"]').val() == "" ? "0" : $thisForm.find('[name="PrNetAmount"]').val();// NetAmount;
            $('#Paymentdethead').find('tbody tr').each(function (index, ele) {
                billamt += parseFloat($(ele).find('.PAmount').text() == "" ? "0":$(ele).find('.PAmount').text());
        });


            bilamt = parseFloat(bilamt) - parseFloat(billamt);
        $thisForm.find('[name=BalAmt]').text(parseFloat($thisForm.find('[name="PrNetAmount"]').val()).toFixed(2));
        //$thisForm.find('[name="BalAmt"]').text($thisForm.find('[name="PrNetAmount"]').val());
        CalcTotalAmount(ele);

        //}
        //else {
        //    let BillAmt1 = $thisForm.find('[name=Amount]').val() == "" ? "0" : $thisForm.find('[name=Amount]').val();
        //     let Tax1 = $thisForm.find('[name=PrTaxAmount]').val() == "" ? "0" : $thisForm.find('[name=PrTaxAmount]').val();
        //    let OtherCharge1 = $thisForm.find('[name=PrOtherCharges]').val() == "" ? "0" : $thisForm.find('[name=PrOtherCharges]').val();
        //    console.log(OtherCharge1,"othr");
        //    var nettotal = parseFloat(BillAmt1) + parseFloat(Tax1) + parseFloat(OtherCharge1);
        //    let roundoff1 = parseFloat(Math.round(nettotal) - nettotal).toFixed(2);
        //    $thisForm.find('[name=Roundoff]').val(roundoff1);/*== "" ? "0" : $thisForm.find('[name=Roundoff]').val();*/

        //    let NetAmount1 = (parseFloat(nettotal)+ parseFloat(roundoff1));
        //    $thisForm.find('[name=PrNetAmount]').val(Number(NetAmount1).toFixed(2));

        //    //bilamt = parseFloat(BillAmt1) + parseFloat(roundoff1);
        //    bilamt = NetAmount1;


        //    $('#Paymentdethead').find('tbody tr').each(function (index, ele) {
        //        billamt += parseFloat($(ele).find('.PAmount').text());
        //    });
        //    bilamt = parseFloat(bilamt) - parseFloat(billamt);
        //    $thisForm.find('[name=BalAmt]').text(parseFloat(bilamt.toFixed(2)));
        //}
    }

    ////////Payment Method/////////
    function GetPaymentlists(ele) {
        let $thisForm = $("#frmPrjBill");
        var PrNetAmount = parseFloat($thisForm.find('[name="PrNetAmount"]').val() == "" ? "0" : $thisForm.find('[name="PrNetAmount"]').val());
        $thisForm.find('[name=BalAmt]').text(PrNetAmount.toFixed(2));
        if (PrNetAmount > 0) {
            $('#formGroupModalpayment').modal({ backdrop: 'static', keyboard: false })
            $('#formGroupModalpayment').modal('show');
            
            
            var selectedValue = getValueByText("ddlPaymentMethod", "Cash");            
            $("#ddlPaymentMethod").val(selectedValue).selectpicker('refresh');
            $("#PAmount").val(PrNetAmount.toFixed(2));
        }
        else {
            NotificationMessage({ 'type': 'error', 'heading': 'Warning', 'message': 'Net Payable Amount Should be greater than 0' });
        }
    }

    function getValueByText(selectId, text) {
        var selectedValue = $("#" + selectId + " option:contains('" + text + "')").val();
        return selectedValue;
    }
    function Billttlnetchck(ele) {
        let $thisForm = $("#frmPrjBill");
        let balamt = $thisForm.find('[name="BalAmt"]').text() == "" ? "0" : $thisForm.find('[name="BalAmt"]').text();
        if (parseFloat(balamt) == 0) {
            $('#formGroupModalpayment').modal('hide');
            $thisForm.find('[perfect-tempTable="Payment"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
        }
        else {
            $thisForm.find('[perfect-tempTable="Payment"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('Balance Amt. should be Zero');

        }

    }

     ///////////////////////////////////////////////////////////////////////////////////////////hk edited start////////////////////////////////////
    //function GetSettgNamelists(ele) {
    //    // let $thisForm = $("#frmPrjBill");

    //    $('#formGroupModalSetgName').modal({ backdrop: 'static', keyboard: false })
    //    $('#formGroupModalSetgName').modal('show');
    //}
    //function AddPrintTemplate(ele) {
    //    let $thisForm = $("#frmPrjBill");
    //    const $formContainer = $('#CommonPrintSettings-form');

    //    let setgName = $thisForm.find('[name="SettingName"] option:selected').val();
    //    if (setgName != 0) {
    //        $('#formGroupModalSetgName').modal('hide');
    //        getPageSize(this, setgName);
    //    }
    //}
     var PageSizeArray;
    function getPageSize(ele, FK_ProjectBilling) {       
       
         $.ajax({
               url: "@Url.Action("GetPageSize", "CommonPrintSettings")",
               type: "Get",
               data: '',
               dataType: "json",
               contentType: 'application/x-www-form-urlencoded; charset=utf-8',
               success: function (ajaxOutput) {
                   console.log(ajaxOutput, 'GetPageSize');
                   if (ajaxOutput.Process.IsProcess) {
                       PageSizeArray=ajaxOutput.Data;
                   } else {
                       $.each(ajaxOutput.Process.Message, function (key, value) {
                           NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                       });
                   }
               },
             complete: function () {                  
                   getPrjBillingData(ele, FK_ProjectBilling)
                  // ProjectBilling_Invoice(ele);
               }
         });
    }
     var InvoiceData;
    function getPrjBillingData(ele, FK_ProjectBilling) { 
       
        let $thisForm = $('[perfect-class="form"]');
        console.log("FK_ProjectBilling", FK_ProjectBilling)
        if (FK_ProjectBilling == 0) {
            FK_ProjectBilling = $thisForm.find('[name="ID_ProjectBilling"]').val();
        }
        let inputData = {
            __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
            FK_Master: FK_ProjectBilling, //$thisForm.find('[name="ID_ProjectBilling"]').val(),
            TableCount: 0,
            TransMode:ProjectBillingTransMode
        };
         $.ajax({
               url: "@Url.Action("ProjectBilling_Invoice", "CommonPrintSettings")",
               type: "Post",
               data: inputData,
               dataType: "json",
               contentType: 'application/x-www-form-urlencoded; charset=utf-8',
             success: function (ajaxOutput) {
                 debugger;
                   console.log(ajaxOutput, 'ajaxOutput'); 
                 var jsonArray1 = JSON.parse(ajaxOutput.jsondata1);
                 var jsonArray2 = JSON.parse(ajaxOutput.jsondata2);
                 var jsonArray3 = JSON.parse(ajaxOutput.jsondata3);
                 var jsonArray4 = JSON.parse(ajaxOutput.jsondata4);
                 var jsonArray5 = JSON.parse(ajaxOutput.jsondata5);
                 var jsonArray6 = JSON.parse(ajaxOutput.jsondata6);
                 console.log(jsonArray1, 'jsonArray'); 
                 if (jsonArray1.Data && jsonArray1.Process.IsProcess) {
                     InvoiceData = jsonArray1;
                     if (jsonArray2.Data) {
                         InvoiceData.jsonArray1 = jsonArray2;
                       }
                     if (jsonArray3.Data) {
                         InvoiceData.jsonArray2 = jsonArray3;
                       }
                     if (jsonArray4.Data) {
                         InvoiceData.jsonArray3 = jsonArray4;
                     }
                     if (jsonArray5.Data) {
                         InvoiceData.jsonArray4 = jsonArray5;
                     }
                     if (jsonArray6.Data) {
                         InvoiceData.jsonArray5 = jsonArray6;
                     }
                       console.log(InvoiceData, 'InvoiceData');      
                   } else {
                       $.each(ajaxOutput.Process.Message, function (key, value) {
                           NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                       });
                   }
               },
               complete: function () {
                   GetTemplate(ele)
               }
         });
         
        };
  
    function GetTemplate(ele) {
        var Cmp_obj = {
            table1_last_index: 0,
            table2_last_index: 0,
            table3_last_index: 0,
            table4_last_index: 0,
            table5_last_index: 0,
            table6_last_index: 0,
            next_page: false
        };
        var mockDiv1 = document.getElementById("Id_mock_div");
        mockDiv1.style.display = "block";
        let $thisForm = $(ele).closest('[perfect-class="form"]');
       var InputData =
       {
           TransMode: 4,
           FK_Master: 0
        };
        $.ajax({
            url: "@Url.Action("GetTemplate", "CommonPrintSettings")",
            type: "POST",
            data: InputData,
            dataType: "json",
            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            success: function (ajaxOutput) {
               
                console.log(ajaxOutput, 'ajaxOutput');
                if (ajaxOutput.Process.IsProcess) {
                    let div0 = document.getElementById("Id_mock_div");
                    var childElements = div0.getElementsByClassName("child_Page");
                    while (childElements.length > 0) {
                        div0.removeChild(childElements[0]);
                    };
                    let PageWidth = 0;
                    let Pageheigth = 0;
                    PageSizeArray.forEach((data) => {
                        if (data.PValue == ajaxOutput.Data[0].PageSize) {
                            Pageheigth = data.height_in_px+"mm";
                            PageWidth = data.width_in_px+"mm";
                        }
                    });
                    debugger;
                   //// let page1 = Create_page('ChildDiv1', PageWidth, Pageheigth);
                   // let page1 = document.getElementById('Id_mock_div');
                   // page1.innerHTML = ajaxOutput.Data[0].FrontSideString;
                   // let main_div=page1.querySelector('#FrontSide');
                   // main_div.style.backgroundImage = 'url(' + ajaxOutput.Data[0].FrntImg + ')';
                   //// let elemt = document.getElementById('Id_mock_div');
                   ////elemt.append(main_div);
                   // let Cmp_binddata_retrn = Cmp_binddata(main_div, Cmp_obj);
                   // Cmp_obj = Cmp_binddata_retrn.Cmp_retrn_obj;
                   // div0.appendChild(Cmp_binddata_retrn.cmp_div);

                    let i = 0;
                    do {
                        let page1 = Create_page('ChildDiv' + i, PageWidth, Pageheigth);
                        page1.innerHTML = ajaxOutput.Data[0].FrontSideString;
                        let main_div = page1.querySelector('#FrontSide');
                        main_div.id = 'FrontSide_' + i;
                        main_div.style.backgroundImage = 'url(' + ajaxOutput.Data[0].FrntImg + ')';
                        div0.appendChild(page1);
                        let Cmp_binddata_retrn = Cmp_binddata(main_div, Cmp_obj);
                        Cmp_obj = Cmp_binddata_retrn.Cmp_obj;
                        i++;
                    } while (Cmp_obj.next_page);
                   
                    let Div0 = div0.innerHTML;
                    getPrint_main({ Pageheigth, PageWidth, Div0  });
                } else {
                    //if (ajaxOutput.Data == null) {
                    if (ajaxOutput.Process.Status == "No Print Template Found.") {
                        NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': "No Print Template Found." });
                    } else {
                        $.each(ajaxOutput.Process.Message, function (key, value) {
                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                        });
                    }
                }
            },
            complete: function () {
                var mockDiv = document.getElementById("Id_mock_div");
                mockDiv.style.display = "none";
            }
        });
    };

    function Create_page(Div_id, width, heigth) {
        var div1 = document.createElement("div");
        div1.className = 'child_Page';
        div1.id = Div_id;
        div1.style.position = 'relative';
        div1.style.width = width;
        div1.style.height = heigth;
        div1.style.border = "1px solid black";
        div1.textContent = "Div 1";
        return div1;
    };
     function getPrint_main(layout){
         debugger;
         var IdcardWidth = layout.PageWidth;
         var IdcardHeight = layout.Pageheigth;
         var ICW = '210mm';
         var ICH = '297mm';
         var styles = {
            'A4P': `
                @@page {
                    size: A4 portrait;
                    margin: 10mm;

                }
            `,
            'A4L': `
                @@page {
                    size: A4 landscape;
                    margin: 0mm;
                    size1: '297mm 210mm',
                }
            `,
            'A5P': `
                @@page {
                    size: A5 portrait;
                    margin: 10mm;
                }
            `,
            'A5L': `
                @@page {
                    size: A5 landscape;
                    margin: 10mm;
                }
            `
         };
        
         var printWindow = window.open('', '', 'width=' + 793+', height=' + 1123);
        printWindow.document.write('<html><head>');
        //printWindow.document.write('<style>' + styles[layout] + '</style>');
        printWindow.document.write('<link rel="stylesheet" href="@Url.Content("~/Assets/css/CommonPrintTemplate.css")" >');
        //printWindow.document.write('<style>@@media print {  * {-webkit-print-color-adjust:exact;} @@page { -webkit-print-color-adjust: exact;size: ' + ICW + ' ' + ICH + ';margin:0;    }   }   </style >');
        //printWindow.document.write('<style>table { border-collapse: collapse;   } tr,th, td { border: 1px solid black; text-align: left; }</style>');
        printWindow.document.write('</head><body style="margin:0px;max-width:' + IdcardWidth +';max-height:' + IdcardHeight + ' ">');
      //  printWindow.document.write('</head><body style="margin:0px;max-width:' + styles[layout].size + ';max-height:' + styles[layout].size + ' ">');
       //// printWindow.document.write('<div id="FrontIDCard" style="background-image: url(\'' + backgroundImageUrl + '\');">');
         //printWindow.document.write(document.getElementById("FrontSideParent").innerHTML);
       
         printWindow.document.body.innerHTML = layout.Div0;
        
      ////  printWindow.document.write('</div>');
        printWindow.document.write('</body></html>');
        printWindow.document.close(); // necessary for IE >= 10
        printWindow.focus(); // necessary for IE >= 10*/
    };
    function getWordWrapLineCount(sentence, maxWidth) {
        // Split the sentence into words
        const words = sentence.split(' ');
        debugger;
        let lineCount = 0;
        let currentLineLength = 0;

        // Iterate through each word in the sentence
        for (let i = 0; i < words.length; i++) {
            const word = words[i];
            const wordLength = word.length;

            // If adding the current word exceeds the maximum width, start a new line
            if (currentLineLength + wordLength > maxWidth) {
                lineCount++;
                currentLineLength = 0;
            }

            // Update the current line length
            currentLineLength += wordLength;

            // Add extra space after the word if it's not the last word on the line
            if (i !== words.length - 1) {
                currentLineLength++; // for the space
            }
        }

        // If there are remaining words, count them as a line
        if (currentLineLength > 0) {
            lineCount++;
        }

        return lineCount;
    }
    function Cmp_binddata(cmp_div, Cmp_obj) {
        debugger
        console.log('cmp_div', cmp_div);
        Cmp_obj.next_page = false;
        var SObj = { ...Cmp_obj };
        var Data = {
            //PBillDate: "03 Jun 2024",
            table1Data: [
                { sl: 1, ProductName: "ABCABC1", Quantity: "3", HSNCode: "300045", TotalAmount: "155525.5", image: "https://upload.wikimedia.org/wikipedia/commons/b/b6/Image_created_with_a_mobile_phone.png" },
                { sl: 1, ProductName: "Pending ", Quantity: "", HSNCode: "", TotalAmount: "", image: "", subline: true },
                { sl: 2, ProductName: "ABC2 ", Quantity: "3", HSNCode: "300045", TotalAmount: "155525.5", image: "https://upload.wikimedia.org/wikipedia/commons/b/b6/Image_created_with_a_mobile_phone.png" },
                { sl: 3, ProductName: "ABC3 ", Quantity: "3", HSNCode: "300045", TotalAmount: "155525.5", image: "https://upload.wikimedia.org/wikipedia/commons/b/b6/Image_created_with_a_mobile_phone.png" },
                { sl: 4, ProductName: "ABC4 ", Quantity: "3", HSNCode: "300045", TotalAmount: "155525.5", image: "https://upload.wikimedia.org/wikipedia/commons/b/b6/Image_created_with_a_mobile_phone.png" },
                { sl: 5, ProductName: "ABC5 ", Quantity: "3", HSNCode: "300045", TotalAmount: "155525.5", image: "https://upload.wikimedia.org/wikipedia/commons/b/b6/Image_created_with_a_mobile_phone.png" },
                { sl: 6, ProductName: "ABC6 ", Quantity: "3", HSNCode: "300045", TotalAmount: "155525.5", image: "https://upload.wikimedia.org/wikipedia/commons/b/b6/Image_created_with_a_mobile_phone.png" },
                { sl: 7, ProductName: "ABC7", Quantity: "3", HSNCode: "300045", TotalAmount: "155525.5", image: "https://upload.wikimedia.org/wikipedia/commons/b/b6/Image_created_with_a_mobile_phone.png" },
                { sl: 1, ProductName: "ABCABC1", Quantity: "3", HSNCode: "300045", TotalAmount: "155525.5", image: "https://upload.wikimedia.org/wikipedia/commons/b/b6/Image_created_with_a_mobile_phone.png" },
                { sl: 1, ProductName: "Pending ", Quantity: "", HSNCode: "", TotalAmount: "", image: "", subline: true },
                { sl: 2, ProductName: "ABC2 ", Quantity: "3", HSNCode: "300045", TotalAmount: "155525.5", image: "https://upload.wikimedia.org/wikipedia/commons/b/b6/Image_created_with_a_mobile_phone.png" },
                { sl: 3, ProductName: "ABC3 ", Quantity: "3", HSNCode: "300045", TotalAmount: "155525.5", image: "https://upload.wikimedia.org/wikipedia/commons/b/b6/Image_created_with_a_mobile_phone.png" },
                { sl: 4, ProductName: "ABC4 ", Quantity: "3", HSNCode: "300045", TotalAmount: "155525.5", image: "https://upload.wikimedia.org/wikipedia/commons/b/b6/Image_created_with_a_mobile_phone.png" },
                { sl: 5, ProductName: "ABC5 ", Quantity: "3", HSNCode: "300045", TotalAmount: "155525.5", image: "https://upload.wikimedia.org/wikipedia/commons/b/b6/Image_created_with_a_mobile_phone.png" },
                { sl: 6, ProductName: "ABC6 ", Quantity: "3", HSNCode: "300045", TotalAmount: "155525.5", image: "https://upload.wikimedia.org/wikipedia/commons/b/b6/Image_created_with_a_mobile_phone.png" },
                { sl: 7, ProductName: "ABC7", Quantity: "3", HSNCode: "300045", TotalAmount: "155525.5", image: "https://upload.wikimedia.org/wikipedia/commons/b/b6/Image_created_with_a_mobile_phone.png" },
                { sl: 1, ProductName: "ABCABC1", Quantity: "3", HSNCode: "300045", TotalAmount: "155525.5", image: "https://upload.wikimedia.org/wikipedia/commons/b/b6/Image_created_with_a_mobile_phone.png" },
                { sl: 1, ProductName: "Pending ", Quantity: "", HSNCode: "", TotalAmount: "", image: "", subline: true },
                { sl: 2, ProductName: "ABC2 ", Quantity: "3", HSNCode: "300045", TotalAmount: "155525.5", image: "https://upload.wikimedia.org/wikipedia/commons/b/b6/Image_created_with_a_mobile_phone.png" },
                { sl: 3, ProductName: "ABC3 ", Quantity: "3", HSNCode: "300045", TotalAmount: "155525.5", image: "https://upload.wikimedia.org/wikipedia/commons/b/b6/Image_created_with_a_mobile_phone.png" },
                { sl: 4, ProductName: "ABC4 ", Quantity: "3", HSNCode: "300045", TotalAmount: "155525.5", image: "https://upload.wikimedia.org/wikipedia/commons/b/b6/Image_created_with_a_mobile_phone.png" },
                { sl: 5, ProductName: "ABC5 ", Quantity: "3", HSNCode: "300045", TotalAmount: "155525.5", image: "https://upload.wikimedia.org/wikipedia/commons/b/b6/Image_created_with_a_mobile_phone.png" },
                { sl: 6, ProductName: "ABC6 ", Quantity: "3", HSNCode: "300045", TotalAmount: "155525.5", image: "https://upload.wikimedia.org/wikipedia/commons/b/b6/Image_created_with_a_mobile_phone.png" },
                { sl: 7, ProductName: "ABC7", Quantity: "3", HSNCode: "300045", TotalAmount: "155525.5", image: "https://upload.wikimedia.org/wikipedia/commons/b/b6/Image_created_with_a_mobile_phone.png" }
            ],
            table2Data: [
                { sl: 1, GSTType: "CGST1 ", Quantity: "3", IGST2: "300045", Amount: "155525.5" },
                { sl: 1, GSTType: "CGST2 ", Quantity: "3", IGST2: "300045", Amount: "155525.5" }
            ]
        };

        const childElements = cmp_div.querySelectorAll('[id]');
        // Separate IDs based on the "PT_" prefix
        const ptPrefixIds = [];
        const pt2PrefixIds = []; const pt3PrefixIds = []; const pt4PrefixIds = []; const pt5PrefixIds = []; const pt6PrefixIds = []; 
        const otherIds = [];        
        childElements.forEach(child => {
            if (child.id.startsWith('PT2_')) {
                pt2PrefixIds.push(child.id);
            }
            else if (child.id.startsWith('PT3_')) {
                pt3PrefixIds.push(child.id);
            }
            else if (child.id.startsWith('PT4_')) {
                pt4PrefixIds.push(child.id);
            }
            else if (child.id.startsWith('PT5_')) {
                pt5PrefixIds.push(child.id);
            }
            else if (child.id.startsWith('PT6_')) {
                pt6PrefixIds.push(child.id);
            }
            else {
                otherIds.push(child.id);
            }
        });
        // Display the separated lists
        pt2PrefixIdsArray2 = []; pt3PrefixIdsArray2 = []; pt4PrefixIdsArray2 = []; pt5PrefixIdsArray2 = []; pt6PrefixIdsArray2 = [];
        pt2PrefixIds.forEach((d, i) => {
            const targetElement = cmp_div.querySelector("#" + d);
            const leftPosition = targetElement.offsetLeft;
            const elementWidth = targetElement.offsetWidth;
            const elementlength = targetElement.style.maxlength;
            var elementLength = targetElement.getAttribute('maxlength');

            const elementFont = targetElement.style.fontFamily;
            const elementFontsize = targetElement.style.fontSize;
            const elementAlign = targetElement.style.getPropertyValue('text-align');
            pt2PrefixIdsArray2.push({ id: d, left: leftPosition, width: elementWidth, fontfamily: elementFont, fontsize: elementFontsize, textalign: elementAlign, maxLength: elementLength });
            if (targetElement) {
                cmp_div.removeChild(targetElement);
            };
        })
        pt3PrefixIds.forEach((d, i) => {
            const targetElement = cmp_div.querySelector("#" + d);
            const leftPosition = targetElement.offsetLeft;
            const elementWidth = targetElement.offsetWidth;
            const elementlength = targetElement.style.maxlength;
            var elementLength = targetElement.getAttribute('maxlength');

            const elementFont = targetElement.style.fontFamily;
            const elementFontsize = targetElement.style.fontSize;
            const elementAlign = targetElement.style.getPropertyValue('text-align');
            pt3PrefixIdsArray2.push({ id: d, left: leftPosition, width: elementWidth, fontfamily: elementFont, fontsize: elementFontsize, textalign: elementAlign, maxLength: elementLength });
            if (targetElement) {
                cmp_div.removeChild(targetElement);
            };
        })
        pt4PrefixIds.forEach((d, i) => {
            const targetElement = cmp_div.querySelector("#" + d);
            const leftPosition = targetElement.offsetLeft;
            const elementWidth = targetElement.offsetWidth;
            const elementlength = targetElement.style.maxlength;
            var elementLength = targetElement.getAttribute('maxlength');

            const elementFont = targetElement.style.fontFamily;
            const elementFontsize = targetElement.style.fontSize;
            const elementAlign = targetElement.style.getPropertyValue('text-align');
            pt4PrefixIdsArray2.push({ id: d, left: leftPosition, width: elementWidth, fontfamily: elementFont, fontsize: elementFontsize, textalign: elementAlign, maxLength: elementLength });
            if (targetElement) {
                cmp_div.removeChild(targetElement);
            };
        })
        pt5PrefixIds.forEach((d, i) => {
            const targetElement = cmp_div.querySelector("#" + d);
            const leftPosition = targetElement.offsetLeft;
            const elementWidth = targetElement.offsetWidth;
            const elementlength = targetElement.style.maxlength;
            var elementLength = targetElement.getAttribute('maxlength');

            const elementFont = targetElement.style.fontFamily;
            const elementFontsize = targetElement.style.fontSize;
            const elementAlign = targetElement.style.getPropertyValue('text-align');
            pt5PrefixIdsArray2.push({ id: d, left: leftPosition, width: elementWidth, fontfamily: elementFont, fontsize: elementFontsize, textalign: elementAlign, maxLength: elementLength });
            if (targetElement) {
                cmp_div.removeChild(targetElement);
            };
        })
        pt6PrefixIds.forEach((d, i) => {
            const targetElement = cmp_div.querySelector("#" + d);
            const leftPosition = targetElement.offsetLeft;
            const elementWidth = targetElement.offsetWidth;
            const elementlength = targetElement.style.maxlength;
            var elementLength = targetElement.getAttribute('maxlength');

            const elementFont = targetElement.style.fontFamily;
            const elementFontsize = targetElement.style.fontSize;
            const elementAlign = targetElement.style.getPropertyValue('text-align');
            pt6PrefixIdsArray2.push({ id: d, left: leftPosition, width: elementWidth, fontfamily: elementFont, fontsize: elementFontsize, textalign: elementAlign, maxLength: elementLength });
            if (targetElement) {
                cmp_div.removeChild(targetElement);
            };
        })
        const idsToRemove = ["ptableMarkerStarter", "ptableMarkerEnder", "ptable2MarkerStarter", "ptable2MarkerEnder", "ptable3MarkerStarter", "ptable3MarkerEnder"];
        
        otherIds.forEach((data, index) => {          
            if (data == "ptableMarkerStarter" || data == "ptableMarkerEnder" || data == "ptable2MarkerStarter" || data == "ptable2MarkerEnder" || data == "ptable3MarkerStarter" || data == "ptable3MarkerEnder") {
            } else {
                debugger;
                const newData = data.substring(2);
                let element = cmp_div.querySelector("#" + data);
                console.log("InvoiceData>>==>>>", InvoiceData.Data[0][newData]);
                element.innerHTML = InvoiceData.Data[0][newData];
            }
        });
        let startPoint = cmp_div.querySelector("#ptableMarkerStarter");
        let startEnd = cmp_div.querySelector("#ptableMarkerEnder");
        let startPoint2 = cmp_div.querySelector("#ptable2MarkerStarter");
        let startEnd2 = cmp_div.querySelector("#ptable2MarkerEnder");
        let startPoint3 = cmp_div.querySelector("#ptable3MarkerStarter");
        let startEnd3 = cmp_div.querySelector("#ptable3MarkerEnder");
        let Starter_Top_Position = 0; let Ender_Top_Position = 0; let Starter_Top_Position2 = 0; let Ender_Top_Position2 = 0; let Starter_Top_Position3 = 0; let Ender_Top_Position3 = 0;
        if (startPoint) Starter_Top_Position = startPoint.offsetTop;
        if (startEnd) Ender_Top_Position = startEnd.offsetTop;
        if (startPoint2) Starter_Top_Position2 = startPoint2.offsetTop;
        if (startEnd2) Ender_Top_Position2 = startEnd2.offsetTop;
        if (startPoint3) Starter_Top_Position3 = startPoint3.offsetTop;
        if (startEnd3) Ender_Top_Position3 = startEnd3.offsetTop;
        idsToRemove.forEach(id => {
            const elementToRemove = cmp_div.querySelector("#" + id);
            if (elementToRemove) {
                cmp_div.removeChild(elementToRemove);
            };
        });
        if (pt2PrefixIdsArray2.length > 0) {
            if (InvoiceData.jsonArray1.Data) {
            if (InvoiceData.jsonArray1.Data.length > 0) {              
                let html = "";
                let topPosition = 0;
                var num0;
                //let Count = 0;
                let Count = 1;
                InvoiceData.jsonArray1.Data.forEach((data, i) => {                 
                    if (i >= Cmp_obj.table1_last_index) {
                        if (i == Cmp_obj.table1_last_index) {
                            topPosition += Starter_Top_Position;
                        } else {
                            // if (data.subline) { topPosition += 13 } else { topPosition += 20 }
                            if (data.subline) { topPosition += 13 } else { topPosition += Count * 15 }
                        };
                        debugger;
                        pt2PrefixIdsArray2.forEach((data2, i2) => {
                            const newId = data2.id.substring(4);
                            const leftPosition = data2.left;
                            const ElementWidth = data2.width;
                            const fontsize = data2.fontsize;
                            const fontfamily = data2.fontfamily;
                            const txtalign = data2.textalign;
                            const maxLength = data2.maxLength;
                            if (data[newId]) {
                                if (topPosition > Ender_Top_Position) {
                                    if (num0 == undefined) {
                                        num0 = i;
                                        Cmp_obj.table1_last_index = i;
                                        Cmp_obj.next_page = true;
                                    }
                                } else {

                                    // if (maxLength != 0 && data[newId].length > maxLength) {
                                    if (maxLength != null && data[newId].length > maxLength) {                                       
                                        Count = getWordWrapLineCount(data[newId], maxLength);
                                        //const excess = Math.ceil(data[newId].length / maxLength) - 1;
                                        //NoOflines = parseInt(excess * maxLength);

                                        ////var lineCount = getWordWrapLineCount(data[newId]);
                                        ////console.log('Word wrap line count:', lineCount);
                                        //if (NoOflines > Count) {
                                        //    Count = NoOflines;
                                        //}
                                    }
                                    if (topPosition + (Count * 15) > Ender_Top_Position) {//checking before printing
                                        if (num0 == undefined) {
                                            num0 = i;
                                            Cmp_obj.table1_last_index = i;
                                            Cmp_obj.next_page = true;
                                        }
                                    }
                                    else if (newId == "image") {
                                        // html += `<img src="${data[newId]}" alt="Your Image" class="custom-image" style="position: absolute; top: ${topPosition}px; left: ${leftPosition}px; width:10mm;height:10mm;>`;
                                        html += `<img src="${data[newId]}" alt="Your Image" class="custom-image" style="position: absolute; top: ${topPosition}px; left: ${leftPosition}px; width:5mm;height:5mm;>`;
                                    } else {
                                        html += ` <p style="position: absolute; top: ${topPosition}px; left: ${leftPosition}px;color: black; width:${ElementWidth}px; font-size:${fontsize};font-family:${fontfamily};text-align:${txtalign}; overflow:auto ; margin-top: 0px;">${data[newId]} </p>`;
                                    }
                                };
                            };
                        });
                        //topPosition += Count;

                    }
                    if (i == InvoiceData.jsonArray1.Data.length - 1 && SObj.table1_last_index == Cmp_obj.table1_last_index) {
                        Cmp_obj.table1_last_index = i + 1;
                    }
                });
                console.log(html, 'html>>>---');
                cmp_div.insertAdjacentHTML('beforeend', html);

            }
            }
        };
        debugger;
        if (pt3PrefixIdsArray2.length > 0) {
            if (InvoiceData.jsonArray2.Data.length) {
                if (InvoiceData.jsonArray2.Data.length > 0) {
                    let html = "";
                    let topPosition = 0;
                    var num2;
                    //  let Count = 0;
                    let Count = 1;
                    InvoiceData.jsonArray2.Data.forEach((data, i) => {
                        debugger;
                        if (i >= Cmp_obj.table2_last_index) {
                            if (i == Cmp_obj.table2_last_index) {
                                topPosition += Starter_Top_Position2;
                            } else {
                                // if (data.subline) { topPosition += 13 } else { topPosition += 20 }
                                if (data.subline) { topPosition += 13 } else { topPosition += Count * 15 }
                            };
                            pt3PrefixIdsArray2.forEach((data2, i2) => {
                                debugger
                                const newId = data2.id.substring(4);
                                //if (data.subline) topPosition -= 10;
                                const leftPosition = data2.left;
                                const ElementWidth = data2.width;
                                const fontsize = data2.fontsize;
                                const fontfamily = data2.fontfamily;
                                const txtalign = data2.textalign;
                                const maxLength = data2.maxLength;
                                if (data[newId]) {
                                    if (topPosition >= Ender_Top_Position2) {
                                        if (num2 == undefined) {
                                            num2 = i;
                                            Cmp_obj.table2_last_index = i;
                                            Cmp_obj.next_page = true;
                                        }
                                    } else {
                                        //if (maxLength != 0 && data[newId].length > maxLength) {
                                        if (maxLength != null && data[newId].length > maxLength) {
                                            Count = getWordWrapLineCount(data[newId], maxLength);
                                        }
                                        if (topPosition + (Count * 15) > Ender_Top_Position2) {//checking before printing
                                            if (num2 == undefined) {
                                                num2 = i;
                                                Cmp_obj.table2_last_index = i;
                                                Cmp_obj.next_page = true;
                                            }
                                        }
                                        else if (newId == "image") {
                                            html += `<img src="${data[newId]}" alt="Your Image" class="custom-image" style="position: absolute; top: ${topPosition}px; left: ${leftPosition}px; width:10mm;height:10mm;>`;
                                        } else {
                                            html += `<p style="position: absolute; top: ${topPosition}px; left: ${leftPosition}px;color: black; margin-top: 0px; font-size:${fontsize};font-family:${fontfamily};text-align:${txtalign}; ">${data[newId]}</p>`;
                                        };
                                    }
                                }
                            });
                            //topPosition += Count;
                        }
                        if (i == InvoiceData.jsonArray2.Data.length - 1 && SObj.table2_last_index == Cmp_obj.table2_last_index) {
                            Cmp_obj.table2_last_index = i + 1;
                        }
                    });
                    // console.log(html, 'html>>>---');
                    cmp_div.insertAdjacentHTML('beforeend', html);
                };
            }
        };
        if (pt4PrefixIdsArray2.length > 0) {
            if (InvoiceData.jsonArray3.Data.length) {
                if (InvoiceData.jsonArray3.Data.length > 0) {
                    let html = "";
                    let topPosition = 0;
                    var num3;
                    //  let Count = 0;
                    let Count = 1;
                    InvoiceData.jsonArray3.Data.forEach((data, i) => {
                        debugger;
                        if (i >= Cmp_obj.table3_last_index) {
                            if (i == Cmp_obj.table3_last_index) {
                                topPosition += Starter_Top_Position3;
                            } else {
                                // if (data.subline) { topPosition += 13 } else { topPosition += 20 }
                                if (data.subline) { topPosition += 13 } else { topPosition += Count * 15 }
                            };
                            pt4PrefixIdsArray2.forEach((data2, i2) => {
                                debugger
                                const newId = data2.id.substring(4);
                                //if (data.subline) topPosition -= 10;
                                const leftPosition = data2.left;
                                const ElementWidth = data2.width;
                                const fontsize = data2.fontsize;
                                const fontfamily = data2.fontfamily;
                                const txtalign = data2.textalign;
                                const maxLength = data2.maxLength;
                                if (data[newId]) {
                                    if (topPosition >= Ender_Top_Position3) {
                                        if (num3 == undefined) {
                                            num3 = i;
                                            Cmp_obj.table3_last_index = i;
                                            Cmp_obj.next_page = true;
                                        }
                                    } else {
                                        //if (maxLength != 0 && data[newId].length > maxLength) {
                                        if (maxLength != null && data[newId].length > maxLength) {
                                            Count = getWordWrapLineCount(data[newId], maxLength);
                                        }
                                        if (topPosition + (Count * 15) > Ender_Top_Position3) {//checking before printing
                                            if (num3 == undefined) {
                                                num3 = i;
                                                Cmp_obj.table3_last_index = i;
                                                Cmp_obj.next_page = true;
                                            }
                                        }
                                        else if (newId == "image") {
                                            html += `<img src="${data[newId]}" alt="Your Image" class="custom-image" style="position: absolute; top: ${topPosition}px; left: ${leftPosition}px; width:10mm;height:10mm;>`;
                                        } else {
                                            html += `<p style="position: absolute; top: ${topPosition}px; left: ${leftPosition}px;color: black; margin-top: 0px; font-size:${fontsize};font-family:${fontfamily};text-align:${txtalign}; ">${data[newId]}</p>`;
                                        };
                                    }
                                }
                            });
                            //topPosition += Count;
                        }
                        if (i == InvoiceData.jsonArray3.Data.length - 1 && SObj.table3_last_index == Cmp_obj.table3_last_index) {
                            Cmp_obj.table3_last_index = i + 1;
                        }
                    });
                    // console.log(html, 'html>>>---');
                    cmp_div.insertAdjacentHTML('beforeend', html);
                };
            }
        };
        if (pt5PrefixIdsArray2.length > 0) {
            if (InvoiceData.jsonArray4.Data.length) {
                if (InvoiceData.jsonArray4.Data.length > 0) {
                    let html = "";
                    let topPosition = 0;
                    var num4;
                    //  let Count = 0;
                    let Count = 1;
                    InvoiceData.jsonArray4.Data.forEach((data, i) => {
                        debugger;
                        if (i >= Cmp_obj.table4_last_index) {
                            if (i == Cmp_obj.table4_last_index) {
                                topPosition += Starter_Top_Position4;
                            } else {
                                // if (data.subline) { topPosition += 13 } else { topPosition += 20 }
                                if (data.subline) { topPosition += 13 } else { topPosition += Count * 15 }
                            };
                            pt5PrefixIdsArray2.forEach((data2, i2) => {
                                debugger
                                const newId = data2.id.substring(4);
                                //if (data.subline) topPosition -= 10;
                                const leftPosition = data2.left;
                                const ElementWidth = data2.width;
                                const fontsize = data2.fontsize;
                                const fontfamily = data2.fontfamily;
                                const txtalign = data2.textalign;
                                const maxLength = data2.maxLength;
                                if (data[newId]) {
                                    if (topPosition >= Ender_Top_Position4) {
                                        if (num4 == undefined) {
                                            num4 = i;
                                            Cmp_obj.table4_last_index = i;
                                            Cmp_obj.next_page = true;
                                        }
                                    } else {
                                        //if (maxLength != 0 && data[newId].length > maxLength) {
                                        if (maxLength != null && data[newId].length > maxLength) {
                                            Count = getWordWrapLineCount(data[newId], maxLength);
                                        }
                                        if (topPosition + (Count * 15) > Ender_Top_Position4) {//checking before printing
                                            if (num4 == undefined) {
                                                num4 = i;
                                                Cmp_obj.table4_last_index = i;
                                                Cmp_obj.next_page = true;
                                            }
                                        }
                                        else if (newId == "image") {
                                            html += `<img src="${data[newId]}" alt="Your Image" class="custom-image" style="position: absolute; top: ${topPosition}px; left: ${leftPosition}px; width:10mm;height:10mm;>`;
                                        } else {
                                            html += `<p style="position: absolute; top: ${topPosition}px; left: ${leftPosition}px;color: black; margin-top: 0px; font-size:${fontsize};font-family:${fontfamily};text-align:${txtalign}; ">${data[newId]}</p>`;
                                        };
                                    }
                                }
                            });
                            //topPosition += Count;
                        }
                        if (i == InvoiceData.jsonArray4.Data.length - 1 && SObj.table4_last_index == Cmp_obj.table4_last_index) {
                            Cmp_obj.table4_last_index = i + 1;
                        }
                    });
                    // console.log(html, 'html>>>---');
                    cmp_div.insertAdjacentHTML('beforeend', html);
                };
            }
        };
        if (pt6PrefixIdsArray2.length > 0) {
            if (InvoiceData.jsonArray5.Data.length) {
                if (InvoiceData.jsonArray5.Data.length > 0) {
                    let html = "";
                    let topPosition = 0;
                    var num4;
                    //  let Count = 0;
                    let Count = 1;
                    InvoiceData.jsonArray5.Data.forEach((data, i) => {
                        debugger;
                        if (i >= Cmp_obj.table5_last_index) {
                            if (i == Cmp_obj.table5_last_index) {
                                topPosition += Starter_Top_Position5;
                            } else {
                                // if (data.subline) { topPosition += 13 } else { topPosition += 20 }
                                if (data.subline) { topPosition += 13 } else { topPosition += Count * 15 }
                            };
                            pt6PrefixIdsArray2.forEach((data2, i2) => {
                                debugger
                                const newId = data2.id.substring(4);
                                //if (data.subline) topPosition -= 10;
                                const leftPosition = data2.left;
                                const ElementWidth = data2.width;
                                const fontsize = data2.fontsize;
                                const fontfamily = data2.fontfamily;
                                const txtalign = data2.textalign;
                                const maxLength = data2.maxLength;
                                if (data[newId]) {
                                    if (topPosition >= Ender_Top_Position5) {
                                        if (num4 == undefined) {
                                            num4 = i;
                                            Cmp_obj.table5_last_index = i;
                                            Cmp_obj.next_page = true;
                                        }
                                    } else {
                                        //if (maxLength != 0 && data[newId].length > maxLength) {
                                        if (maxLength != null && data[newId].length > maxLength) {
                                            Count = getWordWrapLineCount(data[newId], maxLength);
                                        }
                                        if (topPosition + (Count * 15) > Ender_Top_Position5) {//checking before printing
                                            if (num4 == undefined) {
                                                num4 = i;
                                                Cmp_obj.table5_last_index = i;
                                                Cmp_obj.next_page = true;
                                            }
                                        }
                                        else if (newId == "image") {
                                            html += `<img src="${data[newId]}" alt="Your Image" class="custom-image" style="position: absolute; top: ${topPosition}px; left: ${leftPosition}px; width:10mm;height:10mm;>`;
                                        } else {
                                            html += `<p style="position: absolute; top: ${topPosition}px; left: ${leftPosition}px;color: black; margin-top: 0px; font-size:${fontsize};font-family:${fontfamily};text-align:${txtalign}; ">${data[newId]}</p>`;
                                        };
                                    }
                                }
                            });
                            //topPosition += Count;
                        }
                        if (i == InvoiceData.jsonArray5.Data.length - 1 && SObj.table5_last_index == Cmp_obj.table5_last_index) {
                            Cmp_obj.table5_last_index = i + 1;
                        }
                    });
                    // console.log(html, 'html>>>---');
                    cmp_div.insertAdjacentHTML('beforeend', html);
                };
            }
        };
            //if (InvoiceData.table3Data) {
            //    if (InvoiceData.table3Data.length > 0) {
            //        let html = "";
            //        let topPosition = 0;
            //        var num3;
            //        InvoiceData.table3Data.forEach((data, i) => {
            //            if (i >= Cmp_obj.table3_last_index) {
            //                if (i == Cmp_obj.table3_last_index) {
            //                    topPosition += Starter_Top_Position3;
            //                } else {
            //                    if (data.subline) { topPosition += 13 } else { topPosition += 20 }
            //                }
            //                ptPrefixIdsArray2.forEach((data2, i2) => {
            //                    //debugger;
            //                    const newId = data2.id.substring(3);
            //                    // let topPosition = Starter_Top_Position3 + i * 20; // Adjust the increment based on your layout
            //                    //const leftPosition = 50 + i2 * 100; // Adjust the increment based on your layout
            //                    if (data.subline) topPosition -= 10;
            //                    const leftPosition = data2.left;
            //                    if (data[newId]) {
            //                        if (topPosition >= Ender_Top_Position3) {
            //                            if (num3 == undefined) {
            //                                num3 = i;
            //                                cmp_div.table3_last_index = i;
            //                                Cmp_obj.next_page = true;
            //                            }
            //                        } else {
            //                            if (newId == "image") {
            //                                html += `<img src="${data[newId]}" alt="Your Image" class="custom-image" style="position: absolute; top: ${topPosition}px; left: ${leftPosition}px; width:10mm;height:10mm;>`;
            //                            } else {
            //                                html += `<p style="position: absolute; top: ${topPosition}px; left: ${leftPosition}px;color: black; margin-top: 0px;">${data[newId]}</p>`;
            //                            }
            //                            // Cmp_obj.next_page = false;
            //                        }
            //                    }
            //                });
            //            }

            //            if (i == InvoiceData.table3Data.length - 1 && SObj.table3_last_index == Cmp_obj.table3_last_index) {
            //                Cmp_obj.table3_last_index = i + 1;
            //            }
            //        });
            //        console.log(html, 'html>>>---');
            //        // cmp_div.insertAdjacentHTML('beforeend', html);
            //    };
            //}
      
        return { Cmp_obj, cmp_div };
    }
    function getWordWrapLineCount(sentence, maxWidth) {
        // Split the sentence into words
        const words = sentence.split(' ');
        debugger;
        let lineCount = 0;
        let currentLineLength = 0;

        // Iterate through each word in the sentence
        for (let i = 0; i < words.length; i++) {
            const word = words[i];
            const wordLength = word.length;

            // If adding the current word exceeds the maximum width, start a new line
            if (currentLineLength + wordLength > maxWidth) {
                lineCount++;
                currentLineLength = 0;
            }

            // Update the current line length
            currentLineLength += wordLength;

            // Add extra space after the word if it's not the last word on the line
            if (i !== words.length - 1) {
                currentLineLength++; // for the space
            }
        }

        // If there are remaining words, count them as a line
        if (currentLineLength > 0) {
            lineCount++;
        }

        return lineCount;
    }
    ///////////////////////////////////////////////////////////////////////////////////////////hk edited end////////////////////////////////////
  

    //var paytableOptionsTempOut = {
    //    iconButton: {
    //        buttons: [

    //            {
    //                icon: "fa fa-pencil btnPerfectGridEdit",
    //                class: "btnPerfectGridEdit",
    //                action: function () {
    //                    let savedData = $(this).closest('tr').data('pData')

    //                    let $tablecontainer = $(this).closest('[perfect-tempTable]');
    //                    let tableKey = $tablecontainer.attr('perfect-tempTable');
    //                    let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
    //                    //index attribute name in table row
    //                    let indexname = tableKey + 'index';

    //                    //index number in table row
    //                    let rindex = $(this).closest('tr').attr(indexname);

    //                    $tablecontainer.attr('perfect-tempTable-action', rindex);

    //                    console.log('Editclick', savedData);
    //                    //filling data in available inputs
    //                    $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
    //                        let $thisNode = $(this);
    //                        let pf_name = $thisNode.attr('name');
    //                        if ($thisNode.is('select')) {

    //                            $thisNode.val(savedData[pf_name]).selectpicker('refresh');

    //                        }
    //                        else if ($thisNode.is('input')) {
    //                            let inputType = $thisNode.attr('type').toLocaleLowerCase();
    //                            if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

    //                                $thisNode.prop('checked', savedData[pf_name]);
    //                            }

    //                            else {

    //                                $thisNode.val(savedData[pf_name]);
    //                            }

    //                        }
    //                        else {
    //                            $thisNode.val(savedData[pf_name]);
    //                        }


    //                    });



    //                }
    //            },
    //            {
    //                icon: "fa fa-trash btnPerfectGridDelete",
    //                class: "btnPerfectGridDelete",
    //                action: function () {
    //                    let $tablecontainer = $(this).closest('[perfect-tempTable]');
    //                    let $thistbl = $(this).closest('table');
    //                    let table = $thistbl.DataTable();
    //                    table.destroy();
    //                    if ($(this).closest('tbody').find('tr').length > 1) {
    //                        $(this).closest('tr').remove();
    //                        pft_table_slreset($thistbl);
    //                        //$thistbl.dataTable({ paging: true, searchbtn: false });
    //                    }
    //                    else {
    //                        $thistbl.remove();
    //                    }
    //                    BillAmountbind($tablecontainer);
    //                }
    //            },
    //        ]
    //    },

    //    rowAttribute: [],
    //    onlyShowColumn: ['PAmount', 'Refno', 'PaymentMethod_d'],
    //    renameHeader: { "PAmount": "Amount1R", "Refno": "Ref No", "PaymentMethod_d": "Method" },
    //    hideColumn: ['BalAmt'],
    //    serialNo: true,

    //};

    function Pamount(ele) {

        let $thisForm = $("#frmPrjBill");
        let amtp = $thisForm.find('[name="PAmount"]').val() == "" ? "0" : $thisForm.find('[name="PAmount"]').val();
        $thisForm.find('[name="PAmount"]').val(parseFloat(amtp).toFixed(2));
        //salroundoff(ele);
    }
    function validpaymntdetail(ele, tableKey, errorClass, isValid) {
        debugger

        let $thisForm = $("#frmPrjBill");
        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').val() == null) {

            isValid = false
            console.log('false', $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').val());
            $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Payment Method');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }

        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="PAmount"]').val() <= 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="PAmount"]').val() == '' || $thisForm.find('[perfect-tempTable-' + tableKey + '="PAmount"]').val() == null || $thisForm.find('[perfect-tempTable-' + tableKey + '="PAmount"]').val() == undefined) {
            console.log('false', $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').val());
            isValid = false;

            $thisForm.find('[perfect-tempTable-' + tableKey + '="PAmount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please enter a value greater than 0');
        }
        else {

            $thisForm.find('[perfect-tempTable-' + tableKey + '="PAmount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }


        return isValid;

    }

    var payele;
    function createtable(ele, tkey, uniq = [], tableOptionsTempOut) {
        payele = ele;

        let $thisForm = $("#frmPrjBill");
        let tableKey = tkey;
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');

        let insertData = {};
        let tableOptionsTemp = tableOptionsTempOut;
        console.log('tableOptionsTemp', tableOptionsTemp)
        let unique = (uniq) ? uniq : [];

        let isValid = true;
        let errorClass = '.temptableError';

        //make index
        console.log('check 1');
        let MRPss = $('[name=MRPs]').val() == null || $('[name=MRPs]').val() == "" || $('[name=MRPs]').val() == undefined ? 0 : $('[name=MRPs]').val();
        $('[name=MRPs]').val(MRPss);

        let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
        let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
        let indexname = tkey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);
        console.log('tableOptionsTemp.rowAttribute', tableOptionsTemp.rowAttribute)
        let updateCond = '';
        let isNew = true;

        if (thisactionIndex > 0) {
            //means update
            insertData[indexname] = thisactionIndex;
            updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
            isNew = false;
        }
        else {
            //insert
            insertData[indexname] = lastIndex + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
            isNew = true;
        }
        //
        if (tableKey == 'Warranty') {

            isValid = validwartdetail(ele, tableKey, errorClass, isValid);
        }
        else if (tableKey == 'Payment') {
            isValid = validpaymntdetail(ele, tableKey, errorClass, isValid);
        }
        else if (tableKey == 'Purchase') {
            isValid = validsaledetail(ele, tableKey, errorClass, isValid);
        }

        if (unique.length > 0) {
            //getting previous data
            let prevData = [];
            $tblcontainer.find('table > tbody').find('tr').each(function () {
                if (isNew) {
                    prevData.push($(this).data('pData'));
                }
                else {
                    if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                        prevData.push($(this).data('pData'));
                    }

                }

            })
            console.log('previous data', prevData);

            unique.forEach(function (key, i) {
                console.log('unid -> key:' + key + "| index :" + i);
                let $thisEle = $thisForm.find('[perfect-tempTable-' + tableKey + '="' + key + '"]');
                // let headerEleName = $thisForm.find('[name="lblProName"]').text();
                let atname = $thisEle.attr('name');
                let cvalue;
                console.log('atname', atname);
                console.log('$thisEle.length', $thisEle.length);
                if ($thisEle.length != 0) {
                    console.log('len', $thisEle)
                    let $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
                    let errmessage = key + " Already exits"

                    //getting current value in cval
                    if ($thisEle.is('select')) {
                        cvalue = $thisEle.val();
                        //alert(cvalue);
                    }
                    else if ($thisEle.is('input')) {

                        let inputEleType = $thisEle.attr('type').toLocaleLowerCase();
                        if (inputEleType == 'checkbox') { cvalue = $thisEle.is(':checked'); }
                        else if (inputEleType == 'hidden') { cvalue = $thisEle.val(); console.log('cvalue ->', cvalue); }
                        else { cvalue = $thisEle.val(); }
                    }
                    else { cvalue = $thisEle.val(); }



                    //searching in previous data
                    if (prevData.find(a => a[atname] == cvalue)) {
                        // console.log('Search =>' + cvalue + '| attr :' + atname)
                        $errorElement.text(errmessage);
                        isValid = false;
                    }
                }
            });

        }

        console.log('isValid', isValid);

        if (isValid) {

            console.log('check 4.1');
            // this section make table column data
            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                //console.log('nameAttr', nameAttr);
                console.log('headerName', headerName);

                if ($this.is('select')) {
                    //    switch (headerName) {
                    //        case "FK_AllowanceType":
                    //            headerName = "Allowance Type";
                    //            break;

                    //        default:
                    //            break
                    //    }

                    tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                    tableOptionsTemp.hideColumn.push(nameAttr)
                    //displat text of select
                    if ($this.val() != null) {
                        let selectText = ($this.val().length == 0) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    else {
                        let selectText = ($this.val() == null) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    //tableOptionsTemp.onlyShowColumn.push(nameAttr + '_d')
                    insertData[nameAttr] = $this.val();
                    //insertData[nameAttr] = $this.val();

                    $this.val('').selectpicker('refresh');


                }
                else if ($this.is('input')) {


                    insertData[nameAttr] = $this.val();
                    console.log('insertData[nameAttr]', insertData[nameAttr])
                    if (nameAttr == "prodtid") { }
                    else if (nameAttr == "stkid") { }
                    else {
                        $this.val('');
                    }
                }
                else {
                    insertData[nameAttr] = $this.val();

                    $this.val('');
                }

            });
            console.log('check 4.2', insertData);
            console.log('check 4.2 tableoption', tableOptionsTemp);
            if (isNew) {
                console.log('check 4.2.1');
                //this section nake table.table row
                if ($tblcontainer.find('table').length == 0) {
                    console.log('check 4.2.3');
                    console.log(insertData);
                    console.log(',tableOptionsTemp', tableOptionsTemp)
                    $tblcontainer.append(pft_table_createtable([insertData], tableOptionsTemp));

                    //  $tblcontainer.find('table').dataTable({ paging: false, ordering: false });
                }
                else {
                    console.log('check 4.2.1');
                    let table = $tblcontainer.find('table').DataTable()
                    table.destroy()
                    pft_table_addTableRow($tblcontainer.find('table'), insertData, tableOptionsTemp);


                }

            }
            else {

                let table = $tblcontainer.find('table').DataTable()
                table.destroy()

                pft_table_replaceTableRow($tblcontainer.find('table'), updateCond, insertData, tableOptionsTemp);

            }

            console.log(insertData);
            //alert(1);
            // resetting the edit value
            $tblcontainer.attr('perfect-tempTable-action', 0);

            if (tableKey == 'Warranty') {

                BindWarrantyAmount(ele);
            }
            else if (tableKey == 'Payment') {
                BillAmountbind(ele);
            }
            else if (tableKey == 'Purchase') {
                $thisForm.find('[name="prdbtn"]').removeAttr("disabled", "disabled")




            }

        }

        //Binddatadetails(ele);
        //CalculateTotalProjectBill(ele);

    }

    function BillAmountbind(ele) {


        let $thisForm = $('[perfect-class="form"]');
        let netamt;
        let amount;
        let roundoff;

        //if ($("#PrBillMode").val() == 1) {

        //    amount = $thisForm.find('[name="Amount"]').val() == "" ? 0 : $thisForm.find('[name="Amount"]').val();
        //    roundoff = $thisForm.find('[name="Roundoff"]').val() == "" ? 0 : $thisForm.find('[name="Roundoff"]').val();
        //    netamt = parseFloat(amount) + parseFloat(roundoff);

        //}
        //else {

        netamt = parseFloat($thisForm.find('[name="PrNetAmount"]').val() == "" ? 0 : $thisForm.find('[name="PrNetAmount"]').val());
        //}

        let billamt = 0;
        let bilamt = 0;

        if ($thisForm.find('[name="BalAmt"]').text() == '') {
            bilamt = 0;
        }
        else {
            bilamt = netamt;
        }

        $('#Paymentdethead').find('tbody tr').each(function (index, ele) {

            billamt += parseFloat($(ele).find('.PAmount').text());

        });

        bilamt = parseFloat(bilamt) - parseFloat(billamt);
       
        $thisForm.find('[name=BalAmt]').text(bilamt.toFixed(2));
        //$thisForm.find('[name="BalAmt"]').text(parseFloat($thisForm.find('[name="PrNetAmount"]').val()).toFixed(2));

        if (bilamt == 0) {

            return true;

        }
        else {

            return false;

        }
    }

    /////////Payment Method////////
    var paytableOptionsTempOut = {
        iconButton: {
            buttons: [

                {
                    icon: "fa fa-pencil btnPerfectGridEdit",
                    action: function () {
                        let savedData = $(this).closest('tr').data('pData')

                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let tableKey = $tablecontainer.attr('perfect-tempTable');
                        let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                        //index attribute name in table row
                        let indexname = tableKey + 'index';

                        //index number in table row
                        let rindex = $(this).closest('tr').attr(indexname);

                        $tablecontainer.attr('perfect-tempTable-action', rindex);

                        console.log('Editclick', savedData);
                        //filling data in available inputs
                        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                            let $thisNode = $(this);
                            let pf_name = $thisNode.attr('name');
                            if ($thisNode.is('select')) {

                                $thisNode.val(savedData[pf_name]).selectpicker('refresh');

                            }
                            else if ($thisNode.is('input')) {
                                let inputType = $thisNode.attr('type').toLocaleLowerCase();
                                if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                    $thisNode.prop('checked', savedData[pf_name]);
                                }

                                else {

                                    $thisNode.val(savedData[pf_name]);
                                }

                            }
                            else {
                                $thisNode.val(savedData[pf_name]);
                            }


                        });



                    }
                },
                {
                    icon: "fa fa-trash btnPerfectGridDelete",
                    action: function () {
                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let $thistbl = $(this).closest('table');
                        let table = $thistbl.DataTable();
                        table.destroy();
                        if ($(this).closest('tbody').find('tr').length > 1) {
                            $(this).closest('tr').remove();
                            pft_table_slreset($thistbl);
                            //$thistbl.dataTable({ paging: true, searchbtn: false });
                        }
                        else {
                            $thistbl.remove();
                        }
                        BillAmountbind($tablecontainer);
                    }
                },
            ]
        },

        rowAttribute: [],
        onlyShowColumn: ['PAmount', 'Refno', 'PaymentMethod_d'],
        renameHeader: { "PAmount": "Amount1R", "Refno": "Ref No", "PaymentMethod_d": "Method" },
        hideColumn: ['BalAmt'],

        serialNo: true,

    };
    function billdatecheck(ele) {

        let $thisForm = $("#frmPrjBill");

        let upperlimit = $thisForm.find('[name="PrBillDate"]').val();
        var enqDate = new Date(upperlimit);

        var today = new Date();


        if (enqDate.getTime() > today.getTime()) {

            console.log('inside limit check if')
            $thisForm.find('[name="PrBillDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('Bill date should be less than or equal to Today s date')

        }
        else {
            console.log('inside limit check else')
            $thisForm.find('[name="PrBillDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('')


        }



    }

    function productclear(ele, tablekey) {

        let $thisform = $(ele).closest('[perfect-class="form"]');
        $thisform.find('[name="PaymentMethod"]').val("").selectpicker('refresh');;
        $thisform.find('[name="Refno"]').val("");
        $thisform.find('[name="PAmount"]').val("");


    }
    function decimalpntminus(ele, id, range) {

        let input = $('#' + id);
        ele.value = ele.value.replace(/[^0-9.-]/g, '').replace(/(\..*)\./g, '$1');
        let t = ele.value;
        ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t;
        input.on('keydown', function () {
            if (ele.value.includes('.')) {

            }
            var key = event.keyCode || event.charCode;
            if (key == 8 || key == 46) { }
            else {
                if (ele.value.length == 9) {
                    ele.value = ele.value + '.';
                }
            }

        });

    };
    function fn_ProjectBilling_invoice(els) {
        debugger;
        $(els).prop('disabled', false);
        let $form = $(els).closest('[perfect-class="form"]');

        let InputData = {
            //__RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
            FK_Master: $form.find('[name=ID_ProjectBilling]').val(),
            TableCount:0
        };

        $.ajax({
            url: "@Url.Action("ProjectBilling_Invoice", "ProjectBilling")",
            type: "POST",
            data: InputData,
            //dataType: "json",
            //contentType: "application/json",
            dataType: "json",
            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            success: function (ajaxOutput) {
                console.log(ajaxOutput, "ajaxOutput");
                if (ajaxOutput.data1.Process.IsProcess && ajaxOutput.data2.Process.IsProcess
                    //&& ajaxOutput.data3.Process.IsProcess
                ) {

                    Generate_Invoice(ajaxOutput.data1.Data, ajaxOutput.data2.Data, ajaxOutput.data3.Data)
                } else {
                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': "Something went wrong" });
                }
              
            },
            complete: function () {
                $(els).prop('disabled', false);
            }
        });
    }



    function Generate_Invoice(data1,data2,data3) {
        const OutputType = {
            Save: "save", //save pdf as a file
            DataUriString: "datauristring", //returns the data uri string
            DataUri: "datauri", //opens the data uri in current window
            DataUrlNewWindow: "dataurlnewwindow", //opens the data uri in new window
            Blob: "blob", //return blob format of the doc,
            ArrayBuffer: "arraybuffer", //return ArrayBuffer format
        };

        let Table2Data = [];
        let header2 = [
            {
                title: "HSN/SAC",
                style: {
                    width: 25
                }
            },
            {
                title: "Taxable Value",
                style: {
                    width: 25
                }
            },
            {
                title: "Centeral Tax",
                style: {
                   // width: 30,
                    tax: true,
                    SubTitle1: "Rate",
                    SubTitle2: "Amount"
                }
            },
            {
                title: "State Tax",
                style: {
                   // width: 30,
                    tax: true,
                    SubTitle1: "Rate",
                    SubTitle2: "Amount"
                }
            },
            {
                title: "IG Tax",
                style: {
                   // width: 30,
                    tax: true,
                    SubTitle1: "Rate",
                    SubTitle2: "Amount"
                }
            },  
            {
                title: "Cess",
                style: {
                   // width: 30,
                    tax: true,
                    SubTitle1: "Rate",
                    SubTitle2: "Amount"
                }
            },
            {
                title: "Flod Cess",
                style: {
                  //  width: 30,
                    tax: true,
                    SubTitle1: "Rate",
                    SubTitle2: "Amount"
                }
            },
            {
                title: "Total Tax Amount"

            }

        ];
        console.log(data3, 'data3>>>')


        //for (let x = 0; x < data3.length; x++) {
        //    let obj = {};
        //    obj["Hsn"] = item.Hsn;
        //    Obj["TAmount"] = item.TotalAmount;
        //    obj["TaxVal"] = item.TaxableAmount;
        //    if (item.TaxType1 != null && item.TaxType1 != 1) {
        //        obj["Rate1"] = item.Tax1;
        //        obj["Amount1"] = item.Column1;
        //        header2[2].title = item.TaxType1;
        //    } else if (item.TaxType2 != null && item.TaxType2 != 2) {
        //        obj["Rate2"] = item.Tax2
        //        obj["Amount2"] = item.Column2
        //        header2[3].title = item.TaxType2;

        //    } else if (item.TaxType3 != null && item.TaxType3 != 3) {
        //        obj["Rate3"] = item.Tax3
        //        obj["Amount3"] = item.Column3
        //        header2[4].title = item.TaxType3;
        //    } else if (item.TaxType4 != null && item.TaxType4 != 4) {
        //        obj["Rate4"] = item.Tax4
        //        obj["Amount4"] = item.Column4
        //        header2[5].title = item.TaxType4;
        //    } else if (item.TaxType5 != null && item.TaxType5 != 5) {
        //        obj["Rate5"] = item.Tax4
        //        obj["Amount5"] = item.Column4
        //        header2[6].title = item.TaxType5;
        //    };
        //    Table2Data.push(obj);

        //    if (item.TaxType1 == 1 || item.TaxType1 != null) {
        //        header = header.filter((item, index) => index !== 2);
        //    };
        //    if (item.TaxType2 == 2 || item.TaxType2 != null) {
        //        header = header.filter((item, index) => index !== 3);
        //    }
        //    if (item.TaxType3 == 3 || item.TaxType3 != null) {
        //        header = header.filter((item, index) => index !== 4);
        //    }
        //    if (item.TaxType4 == 4 || item.TaxType4 != null) {
        //        header = header.filter((item, index) => index !== 5);
        //    }
        //    if (item.TaxType2 == 5 || item.TaxType5 != null) {
        //        header = header.filter((item, index) => index !== 6);
        //    }
        //}
        let TaxCol2 = [];
        let TaxType11 = [];
        let TacColmap2= {
            Hsn: 0,
            TaxVal: 1,
            
        };
        let table2Datakey2= ["Hsn", "TaxVal"];
       
        if (data3) {
            let taxNumArray = [];
            data3.forEach((item, index) => {
                if (item["TaxType5"] != null && item["TaxType5"] != 5) {
                    taxNumArray.push(5);
                } else if (item["TaxType4"] != null && item["TaxType4"] != 4) {
                    taxNumArray.push(4);
                } else if (item["TaxType3"] != null && item["TaxType3"] != 3) {
                    taxNumArray.push(3);
                } else if (item["TaxType2"] != null && item["TaxType2"] != 2) {
                    taxNumArray.push(2);
                } else if (item["TaxType1"] != null && item["TaxType1"] != 1) {
                    taxNumArray.push(1);
                }
            });
            debugger
            let Maxtaxindex = taxNumArray.indexOf(Math.max(...taxNumArray));
           

            data3.forEach((item,index) => {
                //console.log(item.TaxableAmount, 'item')

               
                if (index == Maxtaxindex) {
                    let obj = {};
                    obj["Hsn"] = item.Hsn;
                    obj["TAmount"] = item.TotalAmount;
                    obj["TaxVal"] = item.TaxableAmount;
                    if (item["TaxType1"] != null && item["TaxType1"] != 1) {
                        obj["Rate1"] = item.Tax1;
                        obj["Amount1"] = item.Column1;
                        header2[2].title = item.TaxType1;
                        TaxCol2.push("Rate1");
                        TaxCol2.push("Amount1");
                        TaxType11.push("Rate1");
                        TacColmap2["Rate1"] = 2;
                        TacColmap2["Amount1"] = 2;
                        table2Datakey2.push("Rate1", "Amount1")
                    }
                    if (item["TaxType2"] != null && item["TaxType2"] != 2) {
                        obj["Rate2"] = item.Tax2
                        obj["Amount2"] = item.Column2
                        header2[3].title = item.TaxType2;
                        TaxCol2.push("Rate2");
                        TaxCol2.push("Amount2");
                        TaxType11.push("Rate2");
                        TacColmap2["Rate2"] = 3;
                        TacColmap2["Amount2"] = 3;
                        table2Datakey2.push("Rate2", "Amount2")
                    }
                    if (item.TaxType3 != null && item.TaxType3 != 3) {

                        obj["Rate3"] = item.Tax3
                        obj["Amount3"] = item.Column3
                        header2[4].title = item.TaxType3;
                        TaxCol2.push("Rate3");
                        TaxCol2.push("Amount3");
                        TaxType11.push("Rate3");
                        TacColmap2["Rate3"] = 4;
                        TacColmap2["Amount3"] = 4;
                        table2Datakey2.push("Rate3", "Amount3")
                    }
                    if (item.TaxType4 != null && item.TaxType4 != 4) {
                        obj["Rate4"] = item.Tax4
                        obj["Amount4"] = item.Column4
                        header2[5].title = item.TaxType4;
                        TaxCol2.push("Rate4");
                        TaxCol2.push("Amount4");
                        TaxType11.push("Rate4");
                        TacColmap2["Rate4"] = 5;
                        TacColmap2["Amount4"] = 5;
                        table2Datakey2.push("Rate4", "Amount4")
                    }
                    if (item.TaxType5 != null && item.TaxType5 != 5) {
                        obj["Rate5"] = item.Tax4
                        obj["Amount5"] = item.Column4
                        header2[6].title = item.TaxType5;
                        TaxCol2.push("Rate5");
                        TaxCol2.push("Amount5");
                        TaxType11.push("Rate5");
                        TacColmap2["Rate5"] = 6;
                        TacColmap2["Amount5"] = 6;
                        table2Datakey2.push("Rate5", "Amount5")
                    };
                    Table2Data.push(obj);
                    let removeElementIndex = [];
                    if (item.TaxType1 == 1 || item.TaxType1 == null) {
                        
                        removeElementIndex.push(2)
                    };
                    if (item.TaxType2 == 2 || item.TaxType2 == null) {
                       
                        removeElementIndex.push(3)
                    }
                    if (item.TaxType3 == 3 || item.TaxType3 == null) {
                        
                        removeElementIndex.push(4)
                    }
                    if (item.TaxType4 == 4 || item.TaxType4 == null) {
                        
                        removeElementIndex.push(5)
                    }
                    if (item.TaxType5 == 5 || item.TaxType5 == null) {
                       
                        removeElementIndex.push(6)
                    }
                    table2Datakey2.push("TAmount");




                    header2.splice(removeElementIndex[0], removeElementIndex.length)

                } else {
                    let obj = {};
                    obj["Hsn"] = item.Hsn;
                    obj["TAmount"] = item.TotalAmount;
                    obj["TaxVal"] = item.TaxableAmount;
                    if (item["TaxType1"] != null && item["TaxType1"] != 1) {
                        obj["Rate1"] = item.Tax1;
                        obj["Amount1"] = item.Column1;
                      
                    }
                    if (item["TaxType2"] != null && item["TaxType2"] != 2) {
                        obj["Rate2"] = item.Tax2
                        obj["Amount2"] = item.Column2
                      
                    }
                    if (item.TaxType3 != null && item.TaxType3 != 3) {

                        obj["Rate3"] = item.Tax3
                        obj["Amount3"] = item.Column3
                       
                    }
                    if (item.TaxType4 != null && item.TaxType4 != 4) {
                        obj["Rate4"] = item.Tax4
                        obj["Amount4"] = item.Column4
                       
                    }
                    if (item.TaxType5 != null && item.TaxType5 != 5) {
                        obj["Rate5"] = item.Tax4
                        obj["Amount5"] = item.Column4
                      
                    };
                    Table2Data.push(obj);
                }
         
            });
            TacColmap2["TAmount"] = 1 +( TaxType11.length+1);
            

        } else {
            // No Tax there there no need of table 2
            //header2 = header2.filter((item, index) => index !== 2);
            //header2 = header2.filter((item, index) => index !== 3);
            //header2 = header2.filter((item, index) => index !== 4);
            //header2 = header2.filter((item, index) => index !== 5);
            //header2 = header2.filter((item, index) => index !== 6);
            //table2Datakey2.push("TAmount");
        }
       


        var props = {
            outputType: OutputType.Save,
            returnJsPDFDocObject: true,
            fileName: "Delivery Slip ",
            orientationLandscape: false,
            compress: true,
            header: {
                firstRigthLn: "(Original for Recipient )",
                invoiceNo: "Invoice No. " ,
                refNo: "Ref No." + data1[0].RefNo,
                date: "Dated  " + formatDate(data1[0].InvoiceDate) ,
                shipping_date: "Shipping Date  ",
                showinAllpage: false,
                companyName: data1[0].Company,
                Address1: data1[0].Address1,
                Address2: data1[0].Address2,
                Address3: data1[0].Address3,
                Address4:"",
                cusName: data1[0].Customer,
                cusAddress1: data1[0].CusAddress,
                cusAddesss2: data1[0].CusAddress2,
                cusAddress3: "",
                GSTINNo: data1[0].GSTINNo,
                GST: data1[0].GST,
                ID_Project: data1[0].ID_Project,
                Inwords: data1[0].Inwords,
                Place: data1[0].Place,
                PinCode: data1[0].PinCode,
                NetAmount: data1[0].NetAmount,
                ProjNumber: data1[0].ProjNumber,
                Branch: data1[0].Branch
            },
            table1: {

                header :
                [
                    {
                        title: "Sl No",
                        style: {
                            width: 10
                        }
                    },
                    {
                        title: "Description Of Goods",
                        style: {
                            width: 55
                        }
                    },
                    //{
                    //    title: "HSN/SAC",
                    //    style: {
                    //        width: 20
                    //    }
                    //},
                    {
                        title: "Quatity",
                        style: {
                            width: 20
                        }
                    },
                    {
                        title: "Rate",
                        style: {
                            width: 20
                        }
                    },
                    {
                        title: "Per",
                        style: {
                            width: 10
                        }
                    },
                    {
                        title: "Disc %",
                        style: {
                            width: 15
                        }
                    },
                    {
                        title: "Amount",
                        // style: {
                        //     width: 15
                        // }

                    }

                ],
                tableDatakey: ["No", "Description", "Qty", "Rate", "Per", "Disc", "TaxAmount"],
                toatlRow:[
                    { No: 1, Description: "Total", Amount: "34,12,625.00", Qty: "2000 nos", Disc: "", Hsn: "", Rate: "", Per: "" }
                ],

                Tabledata: data2,
                Cgstdata : [
                    { No: 1, Description: "OutPut CGST 6% OutPut CGST 6% OutPut CGST 6%", Amount: "2,12,625.00", Qty: "", Disc: "", Hsn: "", Rate: "6", Per: "%" },
                    { No: 1, Description: "OutPut CGST 6%", Amount: "2,12,625.00  fsdf sdgs sfsfsdfd", Qty: "", Disc: "", Hsn: "", Rate: "6", Per: "%" },
                    { No: 1, Description: "OutPut CGST 6%", Amount: "2,12,625.00", Qty: "", Disc: "", Hsn: "", Rate: "6", Per: "%" },
                    { No: 1, Description: "OutPut CGST 6%", Amount: "2,12,625.00", Qty: "", Disc: "", Hsn: "", Rate: "6", Per: "%" },
                    { No: 1, Description: "OutPut CGST 6%", Amount: "2,12,625.00", Qty: "", Disc: "", Hsn: "", Rate: "6", Per: "%" },
                    { No: 1, Description: "OutPut CGST 6%", Amount: "2,12,625.00", Qty: "", Disc: "", Hsn: "", Rate: "6", Per: "%" },
                    { No: 1, Description: "OutPut CGST 6% sfsdfsfsdfsfsfsfsfs", Amount: "2,12,625.00   sdfsfsfsfsfc  ee", Qty: "", Disc: "", Hsn: "", Rate: "6", Per: "%" },
                    { No: 1, Description: "OutPut CGST 6%", Amount: "2,12,625.00 sfs fsfsf xfsd", Qty: "", Disc: "", Hsn: "", Rate: "6", Per: "%" }
                ],

            },
            table2: {
                header2 :header2,
                Table2Total: { Hsn: "Total", TaxVal: "2,58554,0", Rate1: "", Amount1: "12,754.00", Rate2: "", Amount2: "885,585.00", TAmount: "45885585 fdg sdfsdf 554 5555", Amount3: "10525552", Rate: "" },
                table2Datakey: table2Datakey2,
                TaxCol: TaxCol2,
                TacColmap: TacColmap2,
                TaxType1: TaxType11,            
                Table2Data: Table2Data
            },
            pageEnable: true,
            pageLabel: "Page ",
        };
        console.log(props,'props>>>');
        custumefun(props);
    }
    /// invoice template 
    function custumefun(props) {
        console.log(props,'props>>>---')
       
       const param = {
           outputType: props.outputType || "save",
           returnJsPDFDocObject: props.returnJsPDFDocObject || false,
           fileName: props.fileName || "",
           orientationLandscape: props.orientationLandscape || false,
           compress: props.compress || false,     
           header: {
               firstRigthLn: props.header?.firstRigthLn || "",
               invoiceNo: props.header?.invoiceNo || "",
               date: props.header?.date || "",
               refNo: props.header?.refNo || "",
               showinAllpage: props.header?.showinAllpage || false,
               companyName: props.header?.companyName||"",
               Address1: props.header?.Address1||"",
               Address2: props.header?.Address2||"",
               Address3: props.header?.Address3||"",
               Address4: props.header?.PinCode||"",
               cusName: props.header?.cusName||"",
               cusAddress1: props.header?.cusAddress1||"",
               cusAddress2: props.header?.cusAddesss2||"",
               cusAddress3: props.header?.cusAddress3||"",
               GSTINNo: props.header?.GSTINNo||"",
               GST: props.header?.GST||"",
               ID_Project: props.header?.ID_Project||"",
               Inwords: props.header?.Inwords||"",
               Place: props.header?.Place||"",
               PinCode: props.header?.PinCode||"",
               NetAmount: props.header?.NetAmount||"",
               ProjNumber: props.header?.ProjNumber||"",
               Branch: props.header?.Branch||""
           },
           table1: {
               header: props.table1?.header || [],
               tableDatakey: props.table1?.tableDatakey || [],
               toatlRow: props.table1?.toatlRow || [],
               Tabledata: props.table1?.Tabledata || [],
               Cgstdata: props.table1?.Cgstdata || [],
           },
           table2: {
               header2: props.table2?.header2 || [],
               Table2Total: props.table2?.Table2Total || {},
               table2Datakey: props.table2?.table2Datakey || [],
               TaxCol: props.table2?.TaxCol || [],
               Table2Data: props.table2?.Table2Data || [],
               TaxType1: props.table2?.TaxType1 || [],
               TacColmap: props.table2.TacColmap || {}
           }
           
       };
      
        const splitTextAndGetHeight = (text, size) => {
            var lines = doc.splitTextToSize(text, size);
            return {
                text: lines,
                height: doc.getTextDimensions(lines).h,
            };
        };
        const options = {
            orientation: param.orientationLandscape ? "landscape" : "",
            compress: true
        };
        var doc = new jsPDF(options);
        var docWidth = doc.internal.pageSize.width;
        var docHeight = doc.internal.pageSize.height;
        var colorBlack = "#000000";
        var colorGray = "#4d4e53";
        var blue_theme = "#097bde";
        var currentHeight = 15;
        var pdfConfig = {
            headerTextSize: 20,
            labelTextSize: 12,
            fieldTextSize: 10,
            lineHeight: 6,
            lineHeight2: 8,
            subLineHeight: 4,
            f1: 20,
            f2: 15,
            f3: 10,
            f4: 12,
            XSeed: 10
        };
        //get center start width
        var center_startingpoint = (text, font) => {
            // var textWidth = doc.getStringUnitWidth(text) * font;
            var textWidth = doc.getTextWidth(text);
            var linestartpoint = ((docWidth - (pdfConfig.XSeed * 2)) - textWidth) / 2;
            var lineS = pdfConfig.XSeed + linestartpoint;
            return lineS;
        };
        var Column_center_startingpoint = (text, widthOfCol) => {
            // var textWidth = doc.getStringUnitWidth(text) * font;
            var textWidth = doc.getTextWidth(text);
            var linestartpoint = ((widthOfCol - textWidth) / 2);
            var lineS = pdfConfig.XSeed + linestartpoint;
            return lineS;
        };
        var TextWidth = (text) => {
            // var textWidth = doc.getStringUnitWidth(text) * font;
            var textWidth = doc.getTextWidth(text);
            return textWidth;
        };    
        var Table1TotalHeight=0;
        var addheader = () => {
         
            doc.setFontSize(pdfConfig.f4);
            doc.setFont("helvetica", "bold");
            doc.setTextColor(colorBlack); 
            doc.text(center_startingpoint(param.header.firstRigthLn, pdfConfig.f2), currentHeight, param.header.firstRigthLn, "left");
            doc.setFontSize(pdfConfig.f3);
            doc.setTextColor(colorGray);
            doc.setFont("helvetica", "normal");
            currentHeight += pdfConfig.subLineHeight;
            currentHeight += 2;
            //currentHeight += 12;
            doc.setFontSize(pdfConfig.f3);
            doc.setTextColor(colorBlack);
            
            //currentHeight+=pdfConfig.labelTextSize;
            doc.text(pdfConfig.XSeed, currentHeight, param.header.invoiceNo, "left");
          
            doc.text(docWidth - pdfConfig.XSeed, currentHeight, param.header.date, "right");
            //currentHeight += 2;
            // doc.setFontSize(pdfConfig.f4);
            // doc.setTextColor(colorGray);
            // // currentHeight += pdfConfig.subLineHeight;
            // //   doc.text(pdfConfig.XSeed, currentHeight,"Date 7-july-2023", "right");
            // doc.setFontSize(pdfConfig.f4);

            // doc.setTextColor(colorGray);
            currentHeight += pdfConfig.subLineHeight;
            doc.text(pdfConfig.XSeed, currentHeight, param.header.refNo, "left");

            // CENTER SECTION CODE
            doc.setFont("helvetica", "bold");
            currentHeight += pdfConfig.lineHeight;
            doc.text(center_startingpoint(param.header.companyName, pdfConfig.XSeed), currentHeight, param.header.companyName);
            currentHeight += pdfConfig.subLineHeight;
            doc.setFont("helvetica", "normal");
            doc.text(center_startingpoint(param.header.Address1, pdfConfig.XSeed), currentHeight, param.header.Address1);
            currentHeight += pdfConfig.subLineHeight;
            doc.text(center_startingpoint(param.header.Address2, pdfConfig.XSeed), currentHeight, param.header.Address2);
            currentHeight += pdfConfig.subLineHeight;
            doc.text(center_startingpoint(param.header.GSTINNo, pdfConfig.XSeed), currentHeight, param.header.GSTINNo);
            currentHeight += pdfConfig.subLineHeight;
            doc.text(center_startingpoint(param.header.Address3, pdfConfig.XSeed), currentHeight, param.header.Address3);
            let strpoint = center_startingpoint(param.header.Address3,pdfConfig.f3);
            let txtwid = doc.getTextWidth(param.header.Address3);
            doc.setDrawColor(colorGray);
            doc.line(strpoint,currentHeight+1,strpoint+txtwid,currentHeight+1);
            currentHeight += pdfConfig.lineHeight;
            doc.setDrawColor(colorBlack);   
           
            doc.setFont("helvetica", "bold");
            doc.text(center_startingpoint("Tax Invoice",pdfConfig.XSeed), currentHeight, "Tax Invoice");
            currentHeight += pdfConfig.lineHeight;
            doc.setFont("helvetica", "normal");
            doc.text(center_startingpoint(param.header.cusName, pdfConfig.XSeed), currentHeight, param.header.cusName);
            currentHeight += pdfConfig.subLineHeight;
            doc.text(center_startingpoint(param.header.cusAddress1, pdfConfig.XSeed), currentHeight, param.header.cusAddress1);
            currentHeight += pdfConfig.subLineHeight;
            doc.text(center_startingpoint(param.header.cusAddress2, pdfConfig.XSeed), currentHeight, param.header.cusAddress2);
            currentHeight += pdfConfig.subLineHeight;
            doc.text(center_startingpoint(param.header.cusAddress3, pdfConfig.XSeed), currentHeight, param.header.cusAddress3);
            // CENTER CODE END
        };
        addheader();
       
         //#region  Get table custome width of column
        var pageWidth = docWidth;
        var tdWidth = (pageWidth - 20) / param.table1.header.length;
        //#region TD WIDTH
        if (param.table1.header.length> 2) {
            const customColumnNo = param.table1.header.map(x => x?.style?.width || 0).filter(x => x > 0);
            let customWidthOfAllColumns = customColumnNo.reduce((a, b) => a + b, 0);
            //tdWidth = (140 - 20 - customWidthOfAllColumns) / (param.invoice.header.length - customColumnNo.length);
            tdWidth = (pageWidth - 20 - customWidthOfAllColumns) / (param.table1.header.length - customColumnNo.length);
        };
        //#region TABLE HEADER BORDER
        var haderendpoint = 0;
        var addTableHeaderBorder = () => {
            currentHeight += 2;
            const lineHeight = 7;
            let startWidth = 0;
            for (let i = 0; i < param.table1.header.length; i++) {
                const currentTdWidth = param.table1.header[i]?.style?.width || tdWidth;
                if (i === 0){
                   // doc.rect(10, currentHeight, currentTdWidth, lineHeight);
                    doc.line(10,currentHeight,10,currentHeight+lineHeight);
                    doc.line(10+currentTdWidth,currentHeight,10+currentTdWidth,currentHeight+lineHeight);
                } 
                else {
                    const previousTdWidth = param.table1.header[i - 1]?.style?.width || tdWidth;
                    const widthToUse = currentTdWidth == previousTdWidth ? currentTdWidth : previousTdWidth;
                    startWidth += widthToUse;
                    //doc.rect(startWidth + 10, currentHeight, currentTdWidth, lineHeight);
                    doc.line(10+startWidth+currentTdWidth,currentHeight,10+startWidth+currentTdWidth,currentHeight+lineHeight)
                    if (i + 1 == param.table1.header.length){
                        doc.line(10,currentHeight,10+startWidth+currentTdWidth,currentHeight)
                        doc.line(10,currentHeight+lineHeight,10+startWidth+currentTdWidth,currentHeight+lineHeight)
                    }
                }
            }
           // currentHeight -= 2;
            haderendpoint = currentHeight + lineHeight;
        };
        var addTableHeader = () => {
            addTableHeaderBorder();
            currentHeight += pdfConfig.subLineHeight;
            doc.setTextColor(colorBlack);
            doc.setFontSize(pdfConfig.fieldTextSize);
            doc.setDrawColor(colorGray);
            currentHeight += 2;
            let startWidth = 0;
            param.table1.header.forEach(function (row, index) {
                if (index == 0) doc.text(row.title, 11, currentHeight)
                else {
                    const currentTdWidth = row?.style?.width || tdWidth;
                    const previousTdWidth = param.table1.header[index - 1]?.style?.width || tdWidth;
                    const widthToUse = currentTdWidth == previousTdWidth ? currentTdWidth : previousTdWidth;
                    startWidth += widthToUse;
                    doc.text(row.title, startWidth + (Column_center_startingpoint(row.title,currentTdWidth)), currentHeight);
                }
            });
            doc.setTextColor(colorBlack);
        };
        addTableHeader();
        var addTableBodyBorder = (lineHeight) => {
           doc.setDrawColor(colorBlack);
            let startWidth = 0;
            currentHeighth=currentHeight;
            for (let i = 0; i < param.table1.header.length; i++) {
                const currentTdWidth = param.table1.header[i]?.style?.width || tdWidth;
                if (i === 0){
                     doc.line(10,currentHeighth,10,currentHeight+lineHeight)
                     doc.line(10+currentTdWidth,currentHeighth,10+currentTdWidth,currentHeight+lineHeight)
                }else {
                    const previousTdWidth = param.table1.header[i - 1]?.style?.width || tdWidth;
                    const widthToUse = currentTdWidth == previousTdWidth ? currentTdWidth : previousTdWidth;
                    startWidth += widthToUse;
                    doc.line(startWidth + 10+currentTdWidth, currentHeighth, startWidth + 10+currentTdWidth, currentHeight+lineHeight);
                }
            }
        };
        var addTableBodyBorderfooter = (lineHeight) => { 
           doc.setDrawColor(colorBlack);
            let startWidth = 0;
            for (let i = 0; i < param.table1.header.length; i++) {
                const currentTdWidth = param.table1.header[i]?.style?.width || tdWidth;
                if (i === 0){
                     doc.line(10,currentHeight,10,currentHeight+lineHeight)
                     doc.line(10+currentTdWidth,currentHeight,10+currentTdWidth,currentHeight+lineHeight)
                }else {
                    const previousTdWidth = param.table1.header[i - 1]?.style?.width || tdWidth;
                    const widthToUse = currentTdWidth == previousTdWidth ? currentTdWidth : previousTdWidth;
                    startWidth += widthToUse;
                    doc.line(startWidth + 10+currentTdWidth, currentHeight, startWidth + 10+currentTdWidth, currentHeight+lineHeight);
                }
            }
        };

        var addFreeSpace=(lineHeight)=>{
            let startWidth=0;
            for (let j = 0; j < param.table1.header.length; j++) {
                const currentTdWidth = param.table1.header[j]?.style?.width || tdWidth;
                if (j === 0){
                    //doc.rect(10, currentHeight, currentTdWidth, lineHeight);
                    doc.line(10,currentHeight,10,currentHeight+lineHeight)
                    doc.line(10+currentTdWidth,currentHeight,10+currentTdWidth,currentHeight+lineHeight)
                }else {
                    const previousTdWidth = param.table1.header[j - 1]?.style?.width || tdWidth;
                    const widthToUse = currentTdWidth == previousTdWidth ? currentTdWidth : previousTdWidth;
                    startWidth += widthToUse;
                    // doc.rect(startWidth + 10, currentHeight, currentTdWidth, lineHeight);
                    //  doc.line(startWidth + 10, currentHeight, startWidth + 10, currentHeight+lineHeight);
                    doc.line(startWidth + 10+currentTdWidth, currentHeight, startWidth + 10+currentTdWidth, currentHeight+lineHeight);
                };
            };
            currentHeight+=lineHeight;
        };
         
        //#region TABLE BODY
        var tableBodyLength = param.table1.Tabledata;
        param.table1.Tabledata.forEach(function (row, index) {
  
             //get nax height for the current row
            var getRowsHeight = function () {
                let rowsHeight = [];
                param.table1.tableDatakey.forEach((d, i) => {
                    const widthToUse = param.table1.header[i]?.style?.width || tdWidth;
                    if (row[d]) {
                        let item = splitTextAndGetHeight((row[d]).toString(), widthToUse - 1); //minus 1, to fix the padding issue between borders
                        rowsHeight.push(item.text.length);
                    }
                });
                return rowsHeight;
            };


            var maxHeightLe = Math.max(...getRowsHeight());


            //body borders 
            addTableBodyBorder((maxHeightLe*pdfConfig.subLineHeight)+1);
            let startWidth = 0;
            let secoundlineHeight = currentHeight; 
            let table2_width=0    
            param.table1.tableDatakey.forEach((data, index2) => {
         
              
                const currentTdWidth = param.table1.header[index2]?.style?.width || tdWidth;
                let item = splitTextAndGetHeight((row[data] ? row[data] : "").toString(), currentTdWidth - 1); //minus 1, to fix the padding issue between borders
                if (index2 == 0) doc.text((index + 1).toString(), 11, currentHeight + 4);
                else {

                    const previousTdWidth = param.table1.header[index2 - 1]?.style?.width || tdWidth;
                    const widthToUse = currentTdWidth == previousTdWidth ? currentTdWidth : previousTdWidth;
                    startWidth += widthToUse;

                    if (index2 + 1 == param.table1.tableDatakey.length){
                        doc.text( 10 + startWidth+currentTdWidth-1, currentHeight + 5,item.text,"right");
                        table2_width=startWidth+currentTdWidth;
                    }else{
                        doc.text(item.text, 11 + startWidth, currentHeight + 4);
                    }
                    if (tableBodyLength == index + 1 && param.table1.tableDatakey.length==index2+1){
                     
                     
                        const addLength= (maxHeightLe*pdfConfig.subLineHeight)+1;
                        const lastheight=currentHeight+addLength;
                        doc.line((startWidth+10+2),currentHeight+addLength,(startWidth+currentTdWidth+10-2),currentHeight+addLength);
                        currentHeight+=4;
                        doc.text(startWidth+10+currentTdWidth-2,currentHeight+addLength,"342,59865.00","right");

                        ///
                        let startWidth2 = 0;
                        for (let i = 0; i < param.table1.header.length; i++) {
                            const currentTdWidth = param.table1.header[i]?.style?.width || tdWidth;
                            if (i === 0){
                                doc.line(10,lastheight,10,lastheight+5);
                                doc.line(10+currentTdWidth,lastheight,10+currentTdWidth,lastheight+5);
                            }else {
                                const previousTdWidth = param.table1.header[i - 1]?.style?.width || tdWidth;
                                const widthToUse = currentTdWidth == previousTdWidth ? currentTdWidth : previousTdWidth;
                                startWidth2 += widthToUse;
                                //doc.line(startWidth2 + 10, lastheight, startWidth2 + 10, lastheight+addLength);
                                doc.line(startWidth2 + 10+currentTdWidth, lastheight, startWidth2 + 10+currentTdWidth, lastheight+5);
                               
                            }

                        };
                    };
                };
               
            });
             
            currentHeight += (maxHeightLe*pdfConfig.subLineHeight)+1;
            
            if (param.orientationLandscape && (currentHeight > 185 || (currentHeight > 178 && doc.getNumberOfPages() > 1)))
            { 
                currentHeight+=1;
                doc.line(10,currentHeight,10+table2_width,currentHeight); 
                doc.addPage();
                currentHeight = 10;
                if (index + 1 <= tableBodyLength) { 
                    addTableHeader(); 
                    //currentHeight += pdfConfig.subLineHeight
                }
               // else currentHeight += pdfConfig.subLineHeight;
            }


            if (!param.orientationLandscape &&(currentHeight > 265 ||(currentHeight > 255 && doc.getNumberOfPages() > 1)))
             {
                 
                currentHeight+=1;
                doc.line(10,currentHeight,10+table2_width,currentHeight); 
                doc.addPage();
                currentHeight = 10;
                if (index + 1 <= tableBodyLength) { 
                    addTableHeader(); 
                    //currentHeight += pdfConfig.subLineHeight
                 }
                // else
                //     currentHeight += pdfConfig.subLineHeight + 2 + pdfConfig.subLineHeight - 1; //same as in addtableHeader
            }


            // //reset the height that was increased to check the next row
            // if (index + 1 < tableBodyLength && currentHeight > 30)currentHeight -= maxHeight;


           // doc.text(10,currentHeight,"textyj1.1");
        });

        const AddtableCGST=()=>{
            var tableBodyLength = Cgstdata.length;
           
            param.table1.Cgstdata.forEach(function (row, index) {
                var getRowsHeight = function () {
                    let rowsHeight = [];
                
                    param.table1.tableDatakey.forEach((d, i) => {
                        const widthToUse = param.table1.header[i]?.style?.width || tdWidth;
                        if (row[d]) {
                            let item = splitTextAndGetHeight((row[d]).toString(), widthToUse - 1); //minus 1, to fix the padding issue between borders
                            rowsHeight.push(item.text.length);
                        }
                    });
                    return rowsHeight;
                };
                var maxHeightLe = Math.max(...getRowsHeight());
                //body borders
                addTableBodyBorder((maxHeightLe*pdfConfig.subLineHeight)+1);
                let startWidth = 0;      
                param.table1.tableDatakey.forEach((data, index2) => {
                    const currentTdWidth = param.table1.header[index2]?.style?.width || tdWidth;
                    let item = splitTextAndGetHeight((row[data] ? row[data] : "").toString(), currentTdWidth - 1); //minus 1, to fix the padding issue between borders

                    if (index2 == 0) {  
                    }
                    else {
                        const previousTdWidth = param.table1.header[index2 - 1]?.style?.width || tdWidth;
                        const widthToUse = currentTdWidth == previousTdWidth ? currentTdWidth : previousTdWidth;
                        startWidth += widthToUse;
                        doc.text(10-1 + startWidth+currentTdWidth,currentHeight,item.text,"right");
                    }; 
                });
               currentHeight +=(maxHeightLe* pdfConfig.subLineHeight)+1; 


                if (param.orientationLandscape && (currentHeight > 185 || (currentHeight > 178 && doc.getNumberOfPages() > 1)))
            { 
                currentHeight+=1;
                doc.line(10,currentHeight,10+(docWidth-(2*pdfConfig.XSeed)),currentHeight); 
                doc.addPage();
                currentHeight = 10;
                if (index + 1 < tableBodyLength) { 
                    addTableHeader(); 
                    //currentHeight += pdfConfig.subLineHeight
                }
                else currentHeight += pdfConfig.subLineHeight;
            }


                if (!param.orientationLandscape &&(currentHeight > 265 ||(currentHeight > 255 && doc.getNumberOfPages() > 1)))
             {
                 
                currentHeight+=1;
                doc.line(10,currentHeight,10+(docWidth-(2*pdfConfig.XSeed)),currentHeight); 
                doc.addPage();
                currentHeight = 10;
                if (index + 1 < tableBodyLength) { 
                    addTableHeader(); 
                    //currentHeight += pdfConfig.subLineHeight
                 }
                else
                    currentHeight += pdfConfig.subLineHeight + 2 + pdfConfig.subLineHeight - 1; //same as in addtableHeader
            }








            });
        }

        addFreeSpace(8);
       // AddtableCGST();
       //addFreeSpace(2);
        const Addtable1Total=()=>{
            let startWidth2 = 0;
            //Total Data
            let hH = 0;
            param.table1.toatlRow.forEach(function (row, index) {
                var getRowsHeight = function () {
                    let rowsHeight = [];
                    param.table1.tableDatakey.forEach((d, i) => {
                        const widthToUse = param.table1.header[i]?.style?.width || tdWidth;
                        if (row[d]) {
                            let item = splitTextAndGetHeight((row[d]).toString(), widthToUse - 1); //minus 1, to fix the padding issue between borders
                            rowsHeight.push(item.text.length);
                        }
                    });
                    return rowsHeight;
                };
                var maxHeightLe = Math.max(...getRowsHeight());
                //body borders
                //horizonta line
                 hH=(maxHeightLe*pdfConfig.lineHeight+2);
                for (let i = 0; i < param.table1.header.length; i++) {
                    const currentTdWidth = param.table1.header[i]?.style?.width || tdWidth;
                    if (i === 0){
                        //doc.rect(10, currentHeight, currentTdWidth, lineHeight);
                        
                        doc.line(10,currentHeight,10+currentTdWidth,currentHeight)
                        doc.line(10,currentHeight+hH,10+currentTdWidth,currentHeight+hH)
                    }else {
                        const previousTdWidth = param.table1.header[i - 1]?.style?.width || tdWidth;
                        const widthToUse = currentTdWidth == previousTdWidth ? currentTdWidth : previousTdWidth;
                        startWidth2 += widthToUse; 
                        doc.line(10+startWidth2,currentHeight,(10+startWidth2+currentTdWidth),currentHeight)
                        doc.line(10+startWidth2,currentHeight+hH,(10+startWidth2+currentTdWidth),currentHeight+hH)
                    
                    }
                };
                   
                addTableBodyBorderfooter(hH);
                
                let startWidth = 0;   
                let secoundlineHeight = currentHeight;     
                param.table1.tableDatakey.forEach((data, index2) => {
                    const currentTdWidth = param.table1.header[index2]?.style?.width || tdWidth;
                    //let widthToUse = header[index2]?.style?.width || tdWidth;
                    let item = splitTextAndGetHeight((row[data] ? row[data] : "").toString(), currentTdWidth - 1); //minus 1, to fix the padding issue between borders

                    if (index2 == 0) {  
                    }
                    else {
                        const previousTdWidth = param.table1.header[index2 - 1]?.style?.width || tdWidth;
                        const widthToUse = currentTdWidth == previousTdWidth ? currentTdWidth : previousTdWidth;
                        startWidth += widthToUse;
                        doc.text(10-1 + startWidth+currentTdWidth,currentHeight+hH-2,item.text,"right");
                        secoundlineHeight = currentHeight + pdfConfig.subLineHeight;   
                    };
                });
            });
            currentHeight+=hH;
        };
        Addtable1Total();
        currentHeight+=4;
        doc.text(10,currentHeight,"Amount Chargeble (in Words)");
        currentHeight+=pdfConfig.lineHeight;
        doc.setFont("helvetica", "bold");
        doc.text(10, currentHeight, param.header.Inwords);
        doc.setFont("helvetica", "normal");
       currentHeight += pdfConfig.lineHeight;

        const Table2=()=>{

            let tdWidth = (pageWidth - 20) / param.table2.header2.length;





            if (param.table2.header2.length > 2) {
                const customColumnNo = param.table2.header2.map(x => x?.style?.width || 0).filter(x => x > 0);
            let customWidthOfAllColumns = customColumnNo.reduce((a, b) => a + b, 0);
            //tdWidth = (140 - 20 - customWidthOfAllColumns) / (param.invoice.header.length - customColumnNo.length);
                tdWidth = (pageWidth - 20 - customWidthOfAllColumns) / (param.table2.header2.length - customColumnNo.length);
           };
           
            const Table2headerDraw=()=>{

        
                const mainHeight=12;
                currentHeight += 2;
              
                const lineHeight = 7;
                let startWidth = 0;
                //table2 header Draw
                for (let i = 0; i < param.table2.header2.length; i++) {
                    const currentTdWidth = param.table2.header2[i]?.style?.width || tdWidth;
                    if (i === 0){
                    //  doc.rect(10, currentHeight, currentTdWidth, lineHeight);
                        
                        doc.line(10,currentHeight,10,currentHeight+mainHeight);
                        doc.line(10 + currentTdWidth, currentHeight, 10 + currentTdWidth, currentHeight + mainHeight);
                        doc.text(Column_center_startingpoint(param.table2.header2[i].title, currentTdWidth), (currentHeight + (mainHeight / 2)) + 2, param.table2.header2[i].title);
                    }
                    else {
                        const previousTdWidth = param.table2.header2[i-1]?.style?.width || tdWidth;
                        const widthToUse = currentTdWidth == previousTdWidth ? currentTdWidth : previousTdWidth;
                        startWidth += widthToUse;
                        doc.line((10+startWidth+currentTdWidth),currentHeight,(10+startWidth+currentTdWidth),currentHeight+mainHeight);  //last horizontal line

                  
                        if (param.table2.header2[i]?.style?.tax){
                          
                           doc.line(10+startWidth,(currentHeight+(mainHeight/2)),10+startWidth+currentTdWidth, (currentHeight+(mainHeight/2))  );   //center Horizpntal line
                           doc.line((10+startWidth+(currentTdWidth/3)),(currentHeight+(mainHeight/2)),(10+startWidth+(currentTdWidth/3)),(currentHeight+mainHeight) );   //center verical line
                            doc.text(startWidth + (Column_center_startingpoint(param.table2.header2[i].title, currentTdWidth)), (currentHeight + (mainHeight / 2)) - 1, param.table2.header2[i].title);
                            doc.text(startWidth + (Column_center_startingpoint((param.table2.header2[i]?.style?.SubTitle1 || ""), currentTdWidth / 3)), (currentHeight + mainHeight - 1), (param.table2.header2[i]?.style?.SubTitle1||""));
                            doc.text(startWidth + (currentTdWidth / 3) + (Column_center_startingpoint((param.table2.header2[i]?.style?.SubTitle2 || ""), (2 * (currentTdWidth / 3)))), (currentHeight + mainHeight) - 1, (param.table2.header2[i]?.style?.SubTitle2||""));
                        } else if (i + 1 == param.table2.header2.length){

                            doc.line(10,currentHeight,10+startWidth+currentTdWidth,currentHeight);  //Horizontal line 
                            doc.line(10,currentHeight+mainHeight,10+startWidth+currentTdWidth,currentHeight+mainHeight); //Horizontal line 
                            doc.text(startWidth + (Column_center_startingpoint(param.table2.header2[i].title, currentTdWidth)), (currentHeight + (mainHeight / 2)) + 2, param.table2.header2[i].title);
                        }else{
                            //1
                            doc.text(startWidth + (Column_center_startingpoint(param.table2.header2[i].title, currentTdWidth)), (currentHeight + (mainHeight / 2)) + 2, param.table2.header2[i].title);
                        }

                        /////
                        
                    };
                };
                currentHeight+=mainHeight;
            }
            Table2headerDraw();

            //insert data
            param.table2?.Table2Data.forEach((row, index) => {
              
                var getRowsHeight = function () {
                    let rowsHeight = [];
                    param.table2.table2Datakey.forEach((d, i) => {
                        
                        /////
                        if (param.table2.TaxCol.includes(d)){
                           let PointVal= param.table2.TacColmap[d];
                           if(param.table2.TaxType1.includes(d)){
                                //Rate
                                const widthToUse = ((param.table2.header2[PointVal]?.style?.width)/3) || tdWidth;
                           }else{
                                //Amount
                               widthToUse = (((param.table2.header2[PointVal]?.style?.width)/3)*2) || tdWidth;
                           }
                            
                        }else{
                            let PointVal = param.table2.TacColmap[d];
                            widthToUse = param.table2.header2[PointVal]?.style?.width || tdWidth;
                        }

                        if (row[d]) {
                            let item = splitTextAndGetHeight((row[d]).toString(), widthToUse - 1); //minus 1, to fix the padding issue between borders
                            rowsHeight.push(item.text.length);
                            //rowsHeight3.push(item.height);
                            
                        }


                    });
                   return rowsHeight;
                };
                //getRowsHeight()
                var maxHeight = Math.max(...getRowsHeight());
                   
                let table2_width=0   
                let startWidth = 0;
               // let secoundlineHeight = currentHeight;  
                //const itemLengthArr=[]; 
                //let LineHeight3=7; 
                let LineHeight3=(maxHeight*(pdfConfig.lineHeight));
                //let LineHeight3=maxHeight; 
                param.table2.table2Datakey.forEach((data, index2) => {
                   let currentTdWidth=tdWidth;
                    
                  
                    if(param.table2.TaxCol.includes(data)){
                        let PointVal = param.table2.TacColmap[data];
                        if(param.table2.TaxType1.includes(data)){
                            //Rate
                            currentTdWidth = ((param.table2.header2[PointVal]?.style?.width)/3) ||( tdWidth/3);
                        }else{
                            //Amount
                            currentTdWidth = (((param.table2.header2[PointVal]?.style?.width)/3)*2) ||( (tdWidth/3)*2);
                        }
                        
                    }else{
                        let PointVal = param.table2.TacColmap[data];
                        currentTdWidth = param.table2.header2[PointVal]?.style?.width || tdWidth;
                    }



                    ////**********************************
                    let item = splitTextAndGetHeight((row[data] ? row[data] : "").toString(), currentTdWidth - 2); //minus 1, to fix the padding issue between borders
                   // itemLengthArr.push(item.text.length);
                    if (index2 == 0){
                        doc.line(10,currentHeight,10,(currentHeight+LineHeight3))
                        doc.line(10+currentTdWidth,currentHeight,10+currentTdWidth,(currentHeight+LineHeight3))
                        doc.text( 10+2, (currentHeight + pdfConfig.lineHeight),item.text);
                    }
                    else {
                        let previousTdWidth=10;
                    

                        let PointVal = param.table2.TacColmap[data];

                     
                       
                        if (param.table2.header2[PointVal].style?.tax && param.table2.TaxType1.includes(data)){
                            //rate
                            PointVal-=1;
                        } else if (param.table2.header2[PointVal].style?.tax && !param.table2.TaxType1.includes(data)){

                        }
                        else{
                            PointVal-=1;
                        }

                        if (param.table2.header2[PointVal].style?.tax){
                            //
                            
                            if (data == param.table2.table2Datakey[param.table2.table2Datakey.length-1]){
                                //last column or Tamount 
                                previousTdWidth = (((param.table2.header2[PointVal]?.style?.width)/3)*2) || ((tdWidth/3)*2);
                            }else
                            if (!param.table2.TaxType1.includes(data)){
                                //rate
                                previousTdWidth = ((param.table2.header2[PointVal]?.style?.width)/3) || (tdWidth/3);
                                }
                                else{
                                //Amount
                                previousTdWidth = (((param.table2.header2[PointVal]?.style?.width) / 3) * 2) || ((tdWidth / 3) * 2);
                            }
                        }else{
                            previousTdWidth = param.table2.header2[PointVal]?.style?.width || tdWidth;
                        }
                        


                        ///***************************

                       // const previousTdWidth = header2[index2 - 1]?.style?.width || tdWidth;
                        const widthToUse = currentTdWidth == previousTdWidth ? currentTdWidth : previousTdWidth;
                        startWidth += widthToUse;
                        
                       // doc.line(10+startWidth,currentHeight,10+startWidth,currentHeight+LineHeight3)
                        doc.line((10+startWidth+currentTdWidth),currentHeight,(10+startWidth+currentTdWidth),(currentHeight+LineHeight3))
                        doc.text( 10 + startWidth+currentTdWidth-2, currentHeight + pdfConfig.lineHeight,item.text,"right");
                    
                        
                    };
                    table2_width=startWidth+currentTdWidth;
                      ///Page Break Checking 
                        // if(index+1!=(Tabledata.length)){
                        //     currentHeight = secoundlineHeight;
                        //     currentHeight += 5;
                        // }else{
                        
                        // }
                    
                        
                        // //pre-increase currentHeight to check the height based on next row
                        // if (index + 1 < tableBodyLength) currentHeight += maxHeight;

                   
                });
                
                //currentHeight += pdfConfig.lineHeight+1;
                currentHeight +=(maxHeight*(pdfConfig.lineHeight)) ;
               // doc.text(10,currentHeight,"height");

                if (param.orientationLandscape && (currentHeight > 185 || (currentHeight > 178 && doc.getNumberOfPages() > 1)))
                {
                    
                    doc.line(10,currentHeight,10+table2_width,currentHeight)
                    doc.addPage();
                    currentHeight = 10;
                    if (index + 1 < props.table2?.Table2Data.length) {
                        Table2headerDraw();    
                     }
                    else currentHeight += pdfConfig.subLineHeight;
                }


                if (!param.orientationLandscape &&(currentHeight > 265 ||(currentHeight > 255 && doc.getNumberOfPages() > 1)))
                {
                    
                    doc.line(10,currentHeight,10+table2_width,currentHeight)
                    doc.addPage();
                    currentHeight = 10;
                    if (index + 1 < props.table2?.Table2Data.length) {
                        
                            Table2headerDraw();                           
                    }
                    else
                        currentHeight += pdfConfig.subLineHeight + 2 + pdfConfig.subLineHeight - 1; //same as in addtableHeader

                }
                 // // //reset the height that was increased to check the next row
                        // // if (index + 1 < tableBodyLength && currentHeight > 30)currentHeight -= maxHeight;

            });
            //fotter Draw;
            const Table2Footer=()=>{

                var getRowsHeight = function () {
                    let rowsHeight = [];
                    param.table2.table2Datakey.forEach((d, i) => {
                       


                        if(param.table2.TaxCol.includes(d)){
                            let PointVal = param.table2.TacColmap[d];
                           if(param.table2.TaxType1.includes(d)){
                                //Rate
                               const widthToUse = ((param.table2.header2[PointVal]?.style?.width)/3) || (tdWidth/3);
                           }else{
                                //Amount
                               widthToUse = (((param.table2.header2[PointVal]?.style?.width)/3)*2) || ((tdWidth/3)*2);
                           }
                            
                        }else{
                            let PointVal = param.table2.TacColmap[d];
                            widthToUse = param.table2.header2[PointVal]?.style?.width || tdWidth;
                        }

                        if (param.table2.Table2Total[d]) {
                            let item = splitTextAndGetHeight((param.table2.Table2Total[d]).toString(), widthToUse - 1); //minus 1, to fix the padding issue between borders
                            rowsHeight.push(item.text.length);
                            //rowsHeight3.push(item.height);
                            
                        }
                    });
                   return rowsHeight;
                };
           
                var maxHeight = Math.max(...getRowsHeight());




                //let itemLengthArr=[];
               // let LineHeight3=7;
                let LineHeight3=(maxHeight*pdfConfig.lineHeight2);
                let startWidth=0;
                param.table2.table2Datakey.forEach((data, index2) => {
                    let currentTdWidth = tdWidth;
                   // debugger

                    if (param.table2.TaxCol.includes(data)){
                        let PointVal = param.table2.TacColmap[data];
                        if(param.table2.TaxType1.includes(data)){
                            //Rate
                            currentTdWidth = ((param.table2.header2[PointVal]?.style?.width)/3) || (tdWidth/3);
                        }else{
                            //Amount
                            currentTdWidth = (((param.table2.header2[PointVal]?.style?.width)/3)*2) || ((tdWidth/3)*2);
                        }
                        
                    }else{
                        let PointVal = param.table2.TacColmap[data];
                        currentTdWidth = param.table2.header2[PointVal]?.style?.width || tdWidth;
                    }

                 
                    let item = splitTextAndGetHeight((param.table2.Table2Total[data] ? param.table2.Table2Total[data] : "").toString(), currentTdWidth - 1); //minus 1, to fix the padding issue between borders
                   // itemLengthArr.push(item.text.length);
                    if (index2 == 0){
                        doc.line(10,currentHeight,10,(currentHeight+LineHeight3))
                        doc.line(10+currentTdWidth,currentHeight,10+currentTdWidth,(currentHeight+LineHeight3))
                       // doc.text( 10+2, (currentHeight + pdfConfig.lineHeight),item.text);
                        doc.text( 10+currentTdWidth-2, (currentHeight + pdfConfig.lineHeight2-1),item.text,"right");
                    }
                    else {
                        
                        let previousTdWidth=10;
                        
                        
                        let PointVal = param.table2.TacColmap[data];

                        if (param.table2.header2[PointVal].style?.tax && param.table2.TaxType1.includes(data)){
                            //rate
                            PointVal -= 1;
                        } else if (param.table2.header2[PointVal].style?.tax && !param.table2.TaxType1.includes(data)) {

                        }
                        else{
                            PointVal-=1;
                        }

                        if(param.table2.header2[PointVal].style?.tax){
                            //
                            
                            if (data == param.table2.table2Datakey[param.table2.table2Datakey.length-1]){
                                //last column or Tamount 
                                previousTdWidth = (((param.table2.header2[PointVal]?.style?.width)/3)*2) || ((tdWidth/3)*2);
                            }else
                            if(!param.table2.TaxType1.includes(data)){
                                //rate
                                previousTdWidth = ((param.table2.header2[PointVal]?.style?.width)/3) || (tdWidth/3);
                            }
                            else{
                                //Amount
                                previousTdWidth = (((param.table2.header2[PointVal]?.style?.width) / 3) * 2) || ((tdWidth / 3) * 2);
                            }
                        }else{
                            previousTdWidth = param.table2.header2[PointVal]?.style?.width || tdWidth;
                        }


                        
                       // const previousTdWidth = header2[index2 - 1]?.style?.width || tdWidth;
                        const widthToUse = currentTdWidth == previousTdWidth ? currentTdWidth : previousTdWidth;
                        startWidth += widthToUse;
                        
                       // doc.line(10+startWidth,currentHeight,10+startWidth,currentHeight+LineHeight3)
                        doc.line((10+startWidth+currentTdWidth),currentHeight,(10+startWidth+currentTdWidth),(currentHeight+LineHeight3)) //veritical line
                        //doc.text(item.text, 10 + startWidth+2, currentHeight + pdfConfig.lineHeight);
                        doc.text( 10 + startWidth+currentTdWidth-2, currentHeight + pdfConfig.lineHeight2-1,item.text,"right");
                    
                        if (index2 + 1 == param.table2.table2Datakey.length) {
                            debugger
                            doc.line(10,currentHeight+2,10+startWidth+currentTdWidth,currentHeight+2);  //horizontal line 
                            doc.line(10,currentHeight+LineHeight3,10+startWidth+currentTdWidth,currentHeight+LineHeight3); //horizontal line
                        };
                       
                    };
                   
                });
                currentHeight+=LineHeight3;
            }
            Table2Footer();
        };
       doc.setFontSize(9);
       Table2();
       doc.setFontSize(10);
        currentHeight+=pdfConfig.lineHeight;
        var textWidth = doc.getTextWidth("Tax Amount in Words : ");
        doc.text(10,currentHeight,"Tax Amount in Words : ");
        doc.setFont("helvetica", "bold");
        doc.text(10 + textWidth, currentHeight, "INR Three lakh Forty Thousand Two Hundred Only");
        currentHeight += pdfConfig.lineHeight;
        doc.setFont("helvetica", "normal");
        var textWidth2 = doc.getTextWidth("Company's PAN        :       ");
        doc.text(10,currentHeight,"Company's PAN        :       ");
        doc.setFont("helvetica", "bold");
        doc.text(10+textWidth2,currentHeight,"ABCHF58HJS");
        //doc.setFont("helvetica", "normal");
        currentHeight += 9;
        if (currentHeight < 263) { currentHeight = 264 }
        doc.text(docWidth-10,currentHeight,"for Spectrum Techno Products","right");
        doc.setFont("helvetica", "normal");

      
        doc.text(10,currentHeight,"Declaration");
        currentHeight+=pdfConfig.subLineHeight;
        var invDesc="We declare  that the invoice show is the actual price of goods all the perticular are correct ";
        var lines = doc.splitTextToSize(invDesc, docWidth / 2);
        doc.text(lines, 10, currentHeight);

        var footer_desc = "This is Computer Generated Invoice";
        doc.text(center_startingpoint(footer_desc, pdfConfig.XSeed), docHeight - 10, footer_desc);

        doc.save("Invoice" + (param.header.ID_Project).toString());
    };
    function formatDate(inputDate) {
        debugger

        const months = [
            'January', 'February', 'March', 'April',
            'May', 'June', 'July', 'August',
            'September', 'October', 'November', 'December'
        ];

        const dateObject = new Date(inputDate);
        const day = dateObject.getDate();
        const month = months[dateObject.getMonth()];
        const year = dateObject.getFullYear();

        return `${day}-${month}-${year}`;
    }
</script>

<script src="~/Scripts/jspdf.min.js"></script>