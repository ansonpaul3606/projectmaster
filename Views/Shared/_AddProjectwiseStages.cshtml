@*----------------------------------------------------------------------
    Created By	: Santhisree
    Created On	: 02/08/2022
    Purpose		: Projectwise Stages
    -------------------------------------------------------------------------
    Modification
    On			By					OMID/Remarks
    -------------------------------------------------------------------------
    -------------------------------------------------------------------------*@
@model PerfectWebERP.Models.ProjectwiseStagesModel.ProjectwiseStagesListModel


<div class="card ">

    <div class="card-header">
        <h4 class="card-title col-12">Project wise Stages </h4>
        <span title="To View List" onclick="fn_showListView();"><svg id="Layer_1" class="layer" stroke="currentColor" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" height="20" width="20" viewBox="0 0 122.88 122.54"><title>To View List</title><path class="viewlst" d="M4.69,0H46.22a4.71,4.71,0,0,1,4.69,4.69V46a4.69,4.69,0,0,1-4.69,4.69H4.69a4.65,4.65,0,0,1-3.31-1.38l-.09-.09A4.67,4.67,0,0,1,0,46V4.69A4.71,4.71,0,0,1,4.69,0ZM89.44,61.94a26.56,26.56,0,0,1,10.18,2l.07,0a26.61,26.61,0,0,1,15.25,32.16,26.18,26.18,0,0,1-2.7,6.11l10.3,11.24a1.27,1.27,0,0,1-.07,1.8l-7.57,6.9a1.27,1.27,0,0,1-1.79-.07l-9.86-10.85a26.36,26.36,0,0,1-6.1,2.74,26.87,26.87,0,0,1-7.71,1.13,26.51,26.51,0,0,1-10.17-2l-.07,0A26.64,26.64,0,0,1,64.85,78.37l0-.07A26.6,26.6,0,0,1,89.44,61.94Zm15,11.59a21.38,21.38,0,0,0-6.89-4.61l-.06,0a21.22,21.22,0,0,0-23.07,4.64l-.07.07a21.25,21.25,0,0,0-4.54,6.83l0,.06a21.32,21.32,0,0,0-1.58,8.06,21.26,21.26,0,0,0,29.35,19.62,21.54,21.54,0,0,0,6.89-4.61l.07-.07a21.09,21.09,0,0,0,4.54-6.83l0-.06a21.35,21.35,0,0,0,0-16.17,21.34,21.34,0,0,0-4.62-6.9ZM4.69,63.2H46.22a4.71,4.71,0,0,1,4.69,4.7v41.34a4.68,4.68,0,0,1-4.69,4.69H4.69A4.69,4.69,0,0,1,0,109.24V67.9a4.71,4.71,0,0,1,4.69-4.7ZM68.78,0h41.53A4.71,4.71,0,0,1,115,4.69V46a4.71,4.71,0,0,1-4.69,4.69H68.78A4.71,4.71,0,0,1,64.09,46V4.69a4.69,4.69,0,0,1,1.37-3.31l.1-.09A4.67,4.67,0,0,1,68.78,0Z"></path></svg></span>
    </div>
    <div class="card-body">
        <form id="" class="form-valide" perfect-class="form" action="#" method="post" perfect-onFormSuccess="">
            <div class="row">
                <div class="col-sm-12">
                    <div class="default-tab">
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="nav-item">
                                <a class="nav-link active" id="Todolist" data-toggle="tab" href="#MainScreen"><i class="las la-tasks  mr-2"></i> Project wise Stages  &nbsp;&nbsp;<span><label id="todobadge" class="badge badge-circle badge-info"></label></span> </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" id="OverdueList" data-toggle="tab" href="#Teaminfo" onclick="fn_TeamDetails_Project(this)"><i class="las la-book-reader mr-2"></i>Project Team Details&nbsp;&nbsp;<label id="overduebadge" class="badge badge-circle badge-primary"></label></a>
                            </li>

                        </ul>
                        <div><label></label></div>
                        <div class="tab-content">
                            <div class="tab-pane fade active show" role="tabpanel" id="MainScreen">

                                <div class="row">

                                    <div class="col-sm-6">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label name="lblProject" class="col-sm-4 col-form-label">Project&nbsp;<span class="text-danger">*</span></label>
                                            <div class="col-sm-8">
                                                <div class="input-group">
                                                    <input type="date" name="ProjectDate" class="form-control" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" hidden />
                                                    <input type="hidden" name="FinalAmount" class="form-control" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" hidden />
                                                    <input type="text" class="form-control form-control " name="Project" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly />

                                                    <input type="hidden" name="ProjectIDj" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                    <input type="hidden" name="ProjectID" class="form-control form-control perfectValidate_string" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                    <div class="input-group-append">
                                                        <button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" onclick="GetCmnPopUpSearchValAssign(this, 41, 'Project Details',[],['ProjectDate','FinalAmount'],ProjectwiseStagesTranMode)" BindName="Project" BindVal="ProjectID" Function="3" perfect-css="button"></button>
                                                    </div>
                                                </div>
                                                <div class="text-danger temptableError"></div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">Created On</span>
                                                <span class="text-danger">*</span>
                                            </label>
                                            <div class="col-sm-8">

                                                <input type="date" id="CreateDate" class="form-control" name="CreateDate" perfect-class="formGroupControl" perfect-ctype="date" max="2050-01-01" perfect-css="date" onchange="checkdatewithLDdate(this)" />
                                                <div class="invalid-feedback animated fadeInUp limit-check" style="display: block;"></div>
                                                <div id="CreateDate-error" class="Custominvalid animated fadeInUp CreateDateerror" style="display: none;">Created On sholud be greater than or equal to Project Date</div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-sm-6">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">Stage</span>
                                                <span class="text-danger">*</span>
                                            </label>
                                            <div class="col-sm-8">
                                                <select class="form-control perfectValidate_string" name="StageID" perfect-selectButtonAction="testing" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select">
                                                    <option value="">Please Select </option>


                                                    @if (!(Model.StageList is null))
                                                    {
                                                        foreach (var cat in Model.StageList)
                                                        {
                                                            <option value="@cat.ProjectStagesID">@cat.StageName</option>
                                                        }
                                                    }
                                                </select>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-sm-6">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">Team</span>
                                                <span class="text-danger">*</span>
                                            </label>
                                            <div class="col-sm-8">
                                                <select class="form-control perfectValidate_string" name="TeamID" perfect-selectButtonAction="testing" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select">
                                                    <option value="">Please Select </option>


                                                    @if (!(Model.TeamList is null))
                                                    {
                                                        foreach (var cat in Model.TeamList)
                                                        {
                                                            <option value="@cat.ID_ProjectTeam">@cat.TeamName</option>
                                                        }
                                                    }
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">Start Date</span>
                                                <span class="text-danger">*</span>
                                            </label>
                                            <div class="col-sm-8">
                                                <input type="date" id="StartDate" class="form-control" name="StartDate" perfect-class="formGroupControl" perfect-ctype="date" max="2050-01-01" perfect-css="date" onchange="CalEndDate(this)" />
                                                <div class="invalid-feedback animated fadeInUp limit-check" style="display: block;"></div>

                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">Duration Type</span>
                                                <span class="text-danger">*</span>
                                            </label>
                                            <div class="col-sm-8">
                                                <div class="input-group">
                                                    <select class="form-control perfectValidate_numeric " name="PWSDurationType" perfect-tempTable="DurationType" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" data-live-search="true" onchange="CalEndDate(this)">

                                                        <option value="">Please Select </option>

                                                        @if (!(Model.DurationTypeList is null))
                                                        {
                                                            foreach (var durationTypeList in Model.DurationTypeList)
                                                            {
                                                                <option value="@durationTypeList.ID_Mode">@durationTypeList.ModeName</option>
                                                            }

                                                        }

                                                    </select>
                                                </div>
                                            </div>
                                            <div class="text-danger temptableError"></div>
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">Duration</span>
                                                <span class="text-danger">*</span>
                                            </label>
                                            <div class="col-sm-8">

                                                <input type="text" class="form-control text-left perfectValidate_decimal" name="PWSDuration"id="PWSDuration" perfect-class="formGroupControl"  oninput="decimalpnt(this,'PWSDuration',3)"onfocus="this.oldvalue = this.value;" onchange="CalEndDate(this)" perfect-ctype="input" perfect-css="input"maxlength="12" />
                                                <div class="text-danger temptableError"></div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">Due Date</span>
                                                <span class="text-danger">*</span>
                                            </label>
                                            <div class="col-sm-8">
                                                <input type="date" id="EndDate" class="form-control" name="EndDate" perfect-class="formGroupControl" perfect-ctype="date" max="2050-01-01" perfect-css="date" onchange="dateValidate(this)"/>
                                                <div class="invalid-feedback animated fadeInUp limit-check" style="display: block;"></div>

                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">Work Percentage&nbsp;</label>
                                            <div class="col-sm-8">
                                                <input type="number" class="form-control text-right" name="Percentage" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" min="0" max="100" onchange="CheckPercentage(this)" />
                                                <div class="text-danger temptableError"></div>
                                            </div>
                                            <div id="FldId-error" class="Custominvalid animated fadeInUp producterror" style="display: none;">Please Enter Quantity</div>
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">Amount</span>
                                            </label>
                                            <div class="col-sm-8">
                                                <input type="text" class="form-control text-right " name="CollectionAmount" id="CollectionAmount" perfect-class="formGroupControl" oninput="decimalpnt(this,'CollectionAmount',3)" onfocus="this.oldvalue = this.value;" perfect-ctype="input" perfect-css="input" maxlength="12" onclick="checkamount(this)" />
                                                @*<div class="text-danger temptableError"></div>*@
                                                <div class="invalid-feedback animated fadeInUp limit-check" style="display: block;"></div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-12">

                                        <div id="accordion-Two" class="accordion accordion-active-header">


                                            <div class="accordion__header collapsed" id="MaterialDetails" data-target="#active-header_collapseTwo1" aria-expanded="true">
                                                <span class="accordion__header--icon"></span>
                                                <span class="accordion__header--text">Material Details</span>

                                            </div>
                                            <div id="active-header_collapseTwo1" class="collapse accordion__body" data-parent="#accordion-Two">
                                                <div class="accordion__body--text">
                                                    <div class="row">
                                                        <div class="col-sm-12 " perfect-class="TempTableProduct">
                                                            <br />
                                                            <div class="row">
                                                                <div class="col-sm-4">
                                                                    <div class="form-group row" perfect-class="formGroup">
                                                                        <label name="lblProduct" class="col-sm-3 col-form-label">Product&nbsp;</label>
                                                                        <div class="col-sm-8">
                                                                            <div class="input-group">
                                                                                <input type="text" class="form-control " perfect-tempTable-MaterialDetailsTable="Product" name="Product" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly />
                                                                                <input type="hidden" name="ProductID" perfect-tempTable-MaterialDetailsTable="ProductID" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                                                <input type="hidden" name="StockId" perfect-tempTable-MaterialDetailsTable="StockId" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" value="0"/>
                                                                                <div class="input-group-append">
                                                                                    @*<button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" onclick="GetCmnPopUpSearchValAssign(this, 32, 'Product Details', [ ], ['MRPs', 'SalePrice'],ProjectwiseStagesTranMode)" function="2" BindName="Product" BindVal="ProductID" perfect-css="button"></button>*@
                                                                                    <button id="addEmployee-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchValAssign(this,122,'Product Details',[],[],ProjectwiseStagesTranMode)" Criterea1="0" Criterea2="0" BindName="Product" BindVal="ProductID" Function="2"></button>

                                                                                </div>
                                                                            </div>
                                                                            <div class="text-danger temptableError"></div>
                                                                        </div>
                                                                    </div>
                                                                </div>

                                                                <div class="col-sm-3">
                                                                    <div class="form-group row" perfect-class="formGroup">
                                                                        <label class="col-sm-5 col-form-label">Quantity&nbsp;</label>
                                                                        <div class="col-sm-7">
                                                                            <input type="text" class="form-control text-right" perfect-tempTable-MaterialDetailsTable="Quantity" name="Quantity"id="Quantity"oninput="decimalpnt(this,'Quantity',4)" perfect-class="formGroupControl"onfocus="this.oldvalue = this.value;" perfect-ctype="input" perfect-css="input" maxlength="12" />
                                                                            <div class="text-danger temptableError"></div>
                                                                        </div>
                                                                        <div id="FldId-error" class="Custominvalid animated fadeInUp producterror" style="display: none;">Please Enter Quantity</div>
                                                                    </div>
                                                                </div>
                                                                <div class="col-sm-3">
                                                                    <div class="form-group row" perfect-class="formGroup">
                                                                        <label class="col-sm-5 col-form-label">
                                                                            <span perfect-class="formGroupLabel">Amount</span>
                                                                        </label>
                                                                        <div class="col-sm-7">
                                                                            <input type="hidden" class="form-control" name="SalePrice" perfect-tempTable-MaterialDetailsTable="SalePrice" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                                                                            <input type="text" class="form-control text-right " perfect-tempTable-MaterialDetailsTable="Amount" name="Amount"id="Amount" perfect-class="formGroupControl" oninput="decimalpnt(this,'Amount',3)" perfect-ctype="input"onfocus="this.oldvalue = this.value;" perfect-css="input" maxlength="12"/>
                                                                            <div class="text-danger temptableError"></div>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                                <div class="col-sm-2">

                                                                    @*<button class="btn btn-primary1" style="margin-top: 4px;" type="button" onclick="createatable(this,'MaterialDetailsTable',['ProductID'])">Add</button>*@
                                                                    <button class="btn btn-primary1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" title="Add New Product" onclick="createatable(this,'MaterialDetailsTable',['ProductID'])"><i class="fa fa fa-plus" aria-hidden="true"></i></button>
                                                                    <button class="btn btn-light1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" onclick="MaterialDetailsclear(this,'MaterialDetailsTable')"><i class="fa fa-refresh" aria-hidden="true"></i></button>
                                                                    @*<button type="button" class="btn btn-primary mr-3" perfect-css="button" onclick="addToTempTable(this,'ProductType')" name="reset">Add</button>*@

                                                                </div>

                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>

                                        </div>
                                        <div class="col-sm-12">
                                            <div class="form-group row" perfect-class="formGroup">

                                                <div class="table-responsive" perfect-tempTable="MaterialDetailsTable" id="Material" perfect-tempTable-lastindex="0" perfect-tempTable-action="0"></div>
                                                @*<div class="table-responsive" perfect-ProductType="ProductType"></div>*@
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-12">

                                        <div id="accordion-Two" class="accordion accordion-active-header">


                                            <div class="accordion__header collapsed" id="WorkDetails" data-target="#active-header_collapseTwo2" aria-expanded="true">
                                                <span class="accordion__header--icon"></span>
                                                <span class="accordion__header--text">Work Details</span>

                                            </div>
                                            <div id="active-header_collapseTwo2" class="collapse accordion__body" data-parent="#accordion-Two">
                                                <div class="accordion__body--text">
                                                    <div class="row">
                                                        <div class="col-sm-12 " perfect-class="TempTableProduct">
                                                            <br />
                                                            <div class="row">
                                                                <div class="col-sm-3 PerError">
                                                                    <div class="form-group row" perfect-class="formGroup">
                                                                        <label class="col-sm-4 col-form-label">
                                                                            <span perfect-class="formGroupLabel" name="lblWork">Work Type</span>
                                                                        </label>

                                                                        <div class="col-sm-7">
                                                                            <div class="input-group">
                                                                                <select class="form-control " perfect-tempTable-WorkDetailsTable="WorkType" name="WorkType" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" data-live-search="true">

                                                                                    <option value="">Please Select </option>

                                                                                    @if (!(Model.WorkTypeList is null))
                                                                                    {
                                                                                        foreach (var workTypeList in Model.WorkTypeList)
                                                                                        {
                                                                                            <option value="@workTypeList.WorkTypeID">@workTypeList.WorkType</option>
                                                                                        }

                                                                                    }

                                                                                </select>
                                                                            </div>
                                                                            <div class="text-danger temptableError"></div>
                                                                        </div>
                                                                    </div>
                                                                </div>



                                                                <div class="col-sm-3">
                                                                    <div class="form-group row" perfect-class="formGroup">
                                                                        <label class="col-sm-5 col-form-label">
                                                                            <span perfect-class="formGroupLabel">Duration Type</span>
                                                                        </label>
                                                                        <div class="col-sm-7">
                                                                            <div class="input-group">
                                                                                <select class="form-control " name="DurationType" perfect-tempTable-WorkDetailsTable="DurationType" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" data-live-search="true" onchange="fnDurationType(this)">

                                                                                    <option value="">Please Select </option>

                                                                                    @if (!(Model.DurationTypeList is null))
                                                                                    {
                                                                                        foreach (var durationTypeList in Model.DurationTypeList)
                                                                                        {
                                                                                            <option value="@durationTypeList.ID_Mode">@durationTypeList.ModeName</option>
                                                                                        }

                                                                                    }

                                                                                </select>
                                                                            </div>
                                                                            <div class="text-danger temptableError"></div>
                                                                        </div>

                                                                    </div>
                                                                </div>
                                                                <div class="col-sm-2">
                                                                    <div class="form-group row" perfect-class="formGroup">
                                                                        <label class="col-sm-5 col-form-label">
                                                                            <span perfect-class="formGroupLabel">Duration</span>
                                                                        </label>
                                                                        <div class="col-sm-6">
                                                                            <input type="hidden" class="form-control" name="SalePrice" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                                                                            <input type="text" class="form-control text-right " perfect-tempTable-WorkDetailsTable="Duration" name="Duration"id="Duration" perfect-class="formGroupControl" oninput="decimalpnt(this,'Duration',3)"onfocus="this.oldvalue = this.value;" perfect-ctype="input" perfect-css="input"maxlength="10" />
                                                                            <div class="text-danger temptableError"></div>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                                <div class="col-sm-2">
                                                                    <div class="form-group row" perfect-class="formGroup">
                                                                        <label class="col-sm-5 col-form-label">
                                                                            <span perfect-class="formGroupLabel">Amount</span>
                                                                        </label>
                                                                        <div class="col-sm-7">
                                                                            <input type="text" class="form-control text-right" perfect-tempTable-WorkDetailsTable="WorkAmount" name="WorkAmount"id="WorkAmount"  perfect-class="formGroupControl" oninput="decimalpnt(this,'WorkAmount',3)"onfocus="this.oldvalue = this.value;" perfect-ctype="input" perfect-css="input" maxlength="12"/>
                                                                            <div class="text-danger temptableError"></div>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                                <div class="col-sm-2">

                                                                    @*<button class="btn btn-primary1" style="margin-top: 4px;" type="button" onclick="createatable(this,'WorkDetailsTable',['Name'])">Add</button>*@
                                                                    <button class="btn btn-primary1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" title="Add New Work" onclick="createatable(this,'WorkDetailsTable',['WorkType'])"><i class="fa fa fa-plus" aria-hidden="true"></i></button>
                                                                    <button class="btn btn-light1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" onclick="WorkDetailsclear(this,'WorkDetailsTable')"><i class="fa fa-refresh" aria-hidden="true"></i></button>
                                                                    @*<button type="button" class="btn btn-primary mr-3" perfect-css="button" onclick="addToTempTable(this,'ProductType')" name="reset">Add</button>*@

                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>

                                        </div>

                                        <div class="col-sm-12">
                                            <div class="form-group row" perfect-class="formGroup">

                                                <div class="table-responsive" perfect-tempTable="WorkDetailsTable" id="Work" perfect-tempTable-lastindex="0" perfect-tempTable-action="0"></div>
                                                @*<div class="table-responsive" perfect-ProductType="ProductType"></div>*@
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="card-footer text-right" perfect-class="formFooter">
                                    @if (ViewBag.PagedAccessRights.UsrrlMsEdt)
                                    {
                                        <button id="" type="button" class="btn btn-primary mr-3 addcompany-jq-addnewuserUpdate d-none" name="update" perfect-css="button" onclick="updateProjectwiseStages(this)"><i class="fa fa-refresh fa-spin loaderClass"></i>Update</button>
                                    }
                                    @if (ViewBag.PagedAccessRights.UsrrlMsAdd)
                                    {
                                        <button id="addcompany-jq-addnewuser" type="button" class="btn btn-primary mr-3 " name="add" perfect-css="button" onclick="AddProjectwiseStages(this)"><i class="fa fa-refresh fa-spin loaderClass "></i>Save</button>
                                    }
                                    <button type="button" class="btn btn-light" perfect-css="button" onclick="ResetButton(this)" name="reset">Clear</button>
                                </div>
                            </div>
                            <div id="Teaminfo" class="tab-pane">
                                <div class="row" style="margin-top:1.5rem;">
                                    <div class="col-sm-10" name="TeamDetails">
                                    </div>
                                    @*<div class="col-sm-6" name="divDetails">
                                        </div>*@
                                    @*<div class="card-body">
                                            <div class="table-responsive">
                                                <table class="table  table-striped" id="ProductDett">
                                                    <thead class="thead-primary">
                                                        <tr>
                                                            <th>Sl No.</th>
                                                            <th>Department</th>
                                                            <th>Employee</th>
                                                            <th>Employee Type</th>

                                                        </tr>
                                                    </thead>
                                                    <tbody id="TeamDet">
                                                        <tr id="0">
                                                            <td colspan="9" style="text-align:center;">No Records...</td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>*@
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <input type="hidden" id="ID_LeadGenerateActionhdns" />
            </div>
        </form>

    </div>


</div>


<script>

    (function () {
        //jQuery('form').validate();//<-----  Validate/initialize our form on page load

    })();

    $(document).ready(function () {

        initFunctions('form');
        $('#MeasurementDetails').removeClass('collapsed');
        $('#active-header_collapseTwo').addClass('collapse');
        $('#active-header_collapseTwo').addClass('show');
        $('#MasterProjectDetails').attr('aria-expanded', "true");
        $('#active-header_collapseTwo1').addClass('collapse');
        $('#active-header_collapseTwo1').addClass('show');
        $('#active-header_collapseTwo2').addClass('collapse');
        $('#active-header_collapseTwo2').addClass('show');

    });
    var tableOptionsTempOut = {
        iconButton: {
            buttons: [
               
                {
                  icon: "fa fa-pencil btnPerfectGridEdit",
                    action: function () {
                        let savedData = $(this).closest('tr').data('pData')

                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let tableKey = $tablecontainer.attr('perfect-tempTable');
                        let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                        //index attribute name in table row
                        let indexname = tableKey + 'index';
                        //index number in table row
                        let rindex = $(this).closest('tr').attr(indexname);
                        $tablecontainer.attr('perfect-tempTable-action', rindex);

                        console.log('Editclick', savedData);
                        //filling data in available inputs
                        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                            let $thisNode = $(this);
                            let pf_name = $thisNode.attr('name');
                            if ($thisNode.is('select')) {

                                $thisNode.val(savedData[pf_name]).selectpicker('refresh');

                            }
                            else if ($thisNode.is('input')) {
                                let inputType = $thisNode.attr('type').toLocaleLowerCase();
                                if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                    $thisNode.prop('checked', savedData[pf_name]);
                                }
                                else if (inputType == 'date') {
                                    console.log('datess', savedData)
                                    console.log('datess', savedData[pf_name])
                                    // $thisNode.val(moment(savedData[pf_name]).format('YYYY-DD-MM'));
                                    $thisNode.val(savedData[pf_name]);
                                }
                                else {

                                    $thisNode.val(savedData[pf_name]);
                                }

                            }
                            else {
                                $thisNode.val(savedData[pf_name]);
                            }


                        });



                    }
                },
                {
                  icon: "fa fa-trash btnPerfectGridDelete",
                    action: function () {
                        let $thistbl = $(this).closest('table');
                        let table = $thistbl.DataTable();
                        table.destroy();
                        if ($(this).closest('tbody').find('tr').length > 1) {
                            $(this).closest('tr').remove();
                            pft_table_slreset($thistbl);
                            //$thistbl.dataTable({ paging: true, searchbtn: false });
                        }
                        else {
                            $thistbl.remove();
                        }

                    }
                },
            ]
        },



        onlyShowColumn: ["Department_d", "Employee", "EmployeeType_d", "Amount", "Product","Quantity","WorkType_d","DurationType_d","Duration","WorkAmount"],
        hideColumn: [ "EmployeeTypeID", "MeasurementTypeID","MeasurementUnitID"],
        serialNo: true,
        renameHeader: {
            "Quantity": "Quantity", "EmployeeType_d": "Employeee Type", "WorkType" : "Work Type"},

        rowAttribute: [],
        isCheckType: [],
        isDateType: ["NextActionDate"],
    };

    var Subimg = "";
    function Getsubimg(dataimg) {
        Subimg = dataimg;
    }
    var $imgContainer = $('#Image-form');
      function ImageLoad(ele) {

        $imgContainer.load('@Url.Action("LoadImageForm", "ProjectwiseStages")', function () {
            getcase('Company');
     
            if (Subimg != "") {
                $.each(Subimg, function (key, value) {

                    var Mode = value.ImgMode;
                    console.log('Mode', Mode);
                    var imgal = value.ImgValue;
                    var ModeName = value.ModeName;
                    Getimgcntrl1(ele, "data:image/;base64," + imgal, Subimg, ModeName, Mode, value.ImgName)
                });
            }


        });
    }

    function fnDurationType(ele) {
        
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let DurationType = $thisForm.find('[name=DurationType]').val();
        if((DurationType == 1) || (DurationType == 2) || (DurationType == 3) || (DurationType == 4)){
            $thisForm.find('[name=Duration]').val('');
            $thisForm.find('[name=WorkAmount]').val('');
        }
    }

    function getfunctionAssign(ele) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let saleprice = $thisForm.find('[name="SalePrice"]').val() == "" ? "0" : $thisForm.find('[name="SalePrice"]').val();

        //$thisForm.find('[name=Amount]').val(parseFloat(saleprice).toFixed(2));
        $thisForm.find('[name=Quantity]').val(0);
    }
 
    function checkamount(ele) {
        //debugger
        //let $thisForm = $(ele).closest('[perfect-class="form"]');
        //let Finalamount = $thisForm.find('[name="FinalAmount"]').val();
        //let amount = $thisForm.find('[name="CollectionAmount"]').val();
        //if (Finalamount < amount) {
        //    //console.log('inside limit check if')
        //    $thisForm.find('[name="CollectionAmount"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('Amount should be less than or equal to project final amount');
        //    $thisForm.find('[name="CollectionAmount"]').closest('[perfect-class="formGroup"]').find('.limit-check').show();
        //    $thisForm.find('[name="CollectionAmount"]').trigger('blur');
        //    return false;
        //}
        //else {
        //    $thisForm.find('[name="FinalAmount"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('');
        //    return true;
        //}
    }

    var validatePercentage = true;
    function CheckPercentage(ele) {
     
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let Percentage = $thisForm.find('[name="Percentage"]').val() == "" ? "0" : $thisForm.find('[name="Percentage"]').val();
        let FK_Project = $thisForm.find('[name="ProjectID"]').val();
        let pdata = $thisForm.data('pData');
        let id=0;
        if (pdata) {
            id = pdata["ProjectwiseStagesID"];
        }
        let errorClass = '.temptableError';
        $.ajax({
                url: "@Url.Action("GetProjectStagePercentageSum", "ProjectwiseStages")",
                type: "POST",
            data: { FK_Project: FK_Project, __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(), ProjectwiseStagesID :id},
                dataType: "json",
                contentType: "application/x-www-form-urlencoded; charset=utf-8",
            success: function (ajaxOutEmp) {
              
                if (parseInt(Percentage) + parseInt(ajaxOutEmp) > 100) {
                    validatePercentage=false;
                    $thisForm.find('[name="Percentage"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Project total percentage cannot be greater than 100');
                }
                else {
                    validatePercentage = true;
                    $thisForm.find('[name="Percentage"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
                }



                }
            });
    }
    function getEmployee(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');

               //console.log("Input data",inputData)

                $.ajax({
                 url: '@Url.Action("GetEmployeeList", "Branch")',//<----- Controller URL : url path in our controller eq: /Home/InsertSampleData or http://localhost:64212/Home/InsertSampleData
                    type: "GET",


                dataType: "json",
                    contentType: "application/x-www-form-urlencoded;charset=utf-8",
                    success: function (ajaxOutput) {//<----- if ajax method executed succesfully,  we get the data passed from controller in this variable  => success: function (variable) {
                       // console.log("Data", data);

                        if (ajaxOutput.Process.IsProcess) {
                            var employeeModel = createSelectList({ data: ajaxOutput.Data, hideColumn: ['EmployeeID'] });
                            employeeModel.then(function (ret) {
                                if (ret) {
                                    console.log('>_ Search button > list click', ret);
                                    $thisForm.find('[name=EmployeeID]').val(ret.EmployeeID);
                                    $thisForm.find('[name=Employee]').val(ret.Employee);

                                   //-----
                                    $.ajax({
                                        url: "@Url.Action("GetEmployeeBaseInfo", "ServiceMapping")",
                                        type: "POST",
                                        data: { employeeID: ret.EmployeeID, __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),},
                                        dataType: "json",
                                        contentType: "application/x-www-form-urlencoded; charset=utf-8",
                                        success: function (ajaxOutEmp) {
                                            //code to make table
                                            //fill table
                                            //show
                                            if (ajaxOutEmp.Process.IsProcess) {

                                                let $tbl = $thisForm.find('.jq_serviceMap_empdetails');

                                                $tbl.find('.jq_serviceMap_empdetails_name').text(ajaxOutEmp.Data[0].EmployeeName);
                                                $tbl.find('.jq_serviceMap_empdetails_num').text(ajaxOutEmp.Data[0].Number);
                                                $tbl.find('.jq_serviceMap_empdetails_dsgn').text(ajaxOutEmp.Data[0].EmployeeDesignation);
                                                $tbl.find('.jq_serviceMap_empdetails_dept').text(ajaxOutEmp.Data[0].EmployeeDepartment);
                                                $tbl.removeClass('d-none');
                                            }

                                        }
                                    });

                                    //------

                                }
                                else {
                                    console.log(ret);
                                }
                            });
                        }
                        else {
                            $.each(ajaxOutput.Process.Message, function (key, value) {
                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                            });
                        }





                },


            });


    }
    var DueEndDate = '';
    function CalEndDate(ele) {
        debugger;
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let startDate = $thisForm.find('[name=StartDate]').val().trim();
        let duration = $thisForm.find('[name=PWSDuration]').val();

        $thisForm.find('[name="EndDate"]').attr("disabled", false);
      
        var days = 0;
        if ($thisForm.find('[name=PWSDurationType]').val() == '4') { /// Month
            var nwEndDate = new Date(startDate).setMonth(new Date(startDate).getMonth() + parseInt(duration));
                $thisForm.find('[name=EndDate]').val(moment(nwEndDate).format('YYYY-MM-DD'));
        }
        else if ($thisForm.find('[name=PWSDurationType]').val() == '3') { /// Week
            days = parseInt(duration) * 7;
            var nwEndDate = new Date(startDate).setDate(new Date(startDate).getDate() + days);
            $thisForm.find('[name=EndDate]').val(moment(nwEndDate).format('YYYY-MM-DD'));
        }
        else if ($thisForm.find('[name=PWSDurationType]').val() == '2') { /// Days
            days = parseInt(duration);
            var nwEndDate = new Date(startDate).setDate(new Date(startDate).getDate() + days);
            $thisForm.find('[name=EndDate]').val(moment(nwEndDate).format('YYYY-MM-DD'));
        }
        else if ($thisForm.find('[name=PWSDurationType]').val() == '1') { /// Hours           

            //$thisForm.find('[name=EndDate]').val(moment(startDate).format('YYYY-MM-DD'));
            days = parseInt(duration);
            var nwEndDate = new Date(startDate).setHours(new Date(startDate).getHours() + parseInt(duration));
            $thisForm.find('[name=EndDate]').val(moment(nwEndDate).format('YYYY-MM-DD'));
        }

        DueEndDate = nwEndDate;
    }
    function createatable(ele, tkey, uniq = []) {
      
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let tableKey = tkey;
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');

        let insertData = {};
        let tableOptionsTemp = tableOptionsTempOut;

        let unique = (uniq) ? uniq : [];

        let isValid = true;
        let errorClass = '.temptableError';

        //make index
        console.log('check 1');

        let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
        let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
        let indexname = tkey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);
        let updateCond = '';
        let isNew = true;
        if (thisactionIndex > 0) {
            //means update
            insertData[indexname] = thisactionIndex;
            updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
            isNew = false;
        }
        else {
            //insert
            insertData[indexname] = lastIndex + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
            isNew = true;
        }//
    
        if (tableKey == 'EmployeeDetailsTable') {
            if ($thisForm.find('[perfect-tempTable-' + tableKey + '="EmployeeID"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="EmployeeID"]').val == null || $thisForm.find('[perfect-tempTable-' + tableKey + '="EmployeeID"]').val == '') {
                isValid = false;
                console.log('false');
                $thisForm.find('[perfect-tempTable-' + tableKey + '="EmployeeID"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please select Employee');
            }
            else {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="EmployeeID"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }

            if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Department"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="Department"]').val == null || $thisForm.find('[perfect-tempTable-' + tableKey + '="Department"]').val == '') {

                isValid = false;
                console.log('false');
                $thisForm.find('[perfect-tempTable-' + tableKey + '="Department"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Department');
            }
            else {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="Department"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }
        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="EmployeeType"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="EmployeeType"]').val() == null) {

            isValid = false;
            console.log('false');
            $thisForm.find('[perfect-tempTable-' + tableKey + '="EmployeeType"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Employee Type');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="EmployeeType"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }
        }

        if (tableKey == "MaterialDetailsTable") {
            if ($thisForm.find('[perfect-tempTable-' + tableKey + '="ProductID"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="ProductID"]').val() == null) {

                isValid = false;
                console.log('false');
                $thisForm.find('[perfect-tempTable-' + tableKey + '="ProductID"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Product');
            }
            else {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="ProductID"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }
            if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').val() == null) {

                isValid = false;
                console.log('false');
                $thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter Quantity');
            }
            else if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').val() <= 0) {

                isValid = false;
                console.log('false');
                $thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Quantity Should be Greater than Zero ');
            }
            else {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }

            if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Amount"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="Amount"]').val() == null) {

                isValid = false;
                console.log('false');
                $thisForm.find('[perfect-tempTable-' + tableKey + '="Amount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter Amount');
            }
            else {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="Amount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }

        }
        if (tableKey == "WorkDetailsTable") {
            if ($thisForm.find('[perfect-tempTable-' + tableKey + '="WorkType"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="WorkType"]').val() == null) {

                isValid = false;
                console.log('false');
                $thisForm.find('[perfect-tempTable-' + tableKey + '="WorkType"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select WorkType');
            }
            else {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="WorkType"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }
            if ($thisForm.find('[perfect-tempTable-' + tableKey + '="DurationType"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="DurationType"]').val() == null) {

                isValid = false;
                console.log('false');
                $thisForm.find('[perfect-tempTable-' + tableKey + '="DurationType"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Duration Type');
            }
            else {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="DurationType"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }
            if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Duration"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="Duration"]').val() == null) {

                isValid = false;
                console.log('false');
                $thisForm.find('[perfect-tempTable-' + tableKey + '="Duration"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter Duration');
            }
            else {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="Duration"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }
            if ($thisForm.find('[perfect-tempTable-' + tableKey + '="WorkAmount"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="WorkAmount"]').val() == null) {

                isValid = false;
                console.log('false');
                $thisForm.find('[perfect-tempTable-' + tableKey + '="WorkAmount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter Work Amount');
            }
            else {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="WorkAmount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }

        }

        let upperlimit = $thisForm.find('[name="RegDate"]').val();
        let lowerlimit = $thisForm.find('[name="NextActionDate"]').val();
        var enqDate = new Date(upperlimit);
        var nxtDate = new Date(lowerlimit);
        var today = new Date();

        //if (enqDate.getTime() > nxtDate.getTime()) {
        //    isValid = false;
        //    console.log('inside limit check if')
        //    $thisForm.find('[name="NextActionDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('Follow up date should be greaterthan or equal to Enquiry date')
        //}



       
        if (unique.length > 0) {
            //getting previous data
            let prevData = [];
            $tblcontainer.find('table > tbody').find('tr').each(function () {
                if (isNew) {
                    prevData.push($(this).data('pData'));
                }
                else {
                    if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                        prevData.push($(this).data('pData'));
                    }

                }

            })
            console.log('previous data', prevData);

            unique.forEach(function (key, i) {
                console.log('unid -> key:' + key + "| index :" + i);
                let $thisEle = $thisForm.find('[perfect-tempTable-' + tableKey + '="' + key + '"]');
                let headerEleName = tableKey == "MaterialDetailsTable" ? $thisForm.find('[name="lblProduct"]').text() : $thisForm.find('[name="lblEmployee"]').text();
                let atname = $thisEle.attr('name');
                let cvalue;
                headerEleName = headerEleName.replace('*', '');
               
                //console.log('len')
                if ($thisEle.length != 0) {
                    console.log('len', $thisEle)
                    let $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
                    let errmessage = headerEleName + " Already exists"

                    //getting current value in cval
                    if ($thisEle.is('select')) {
                        cvalue = $thisEle.val();
                        //alert(cvalue);
                    }
                    else if ($thisEle.is('input')) {

                        let inputEleType = $thisEle.attr('type').toLocaleLowerCase();

                        if (inputEleType == 'checkbox') { cvalue = $thisEle.is(':checked'); }
                        else if (inputEleType == 'hidden') { cvalue = $thisEle.val(); }
                        else { cvalue = $thisEle.val(); }
                    }
                    else { cvalue = $thisEle.val(); }

                    // console.log('cvalue ->' + cvalue);

                    //searching in previous data
                    if (prevData.find(a => a[atname] == cvalue)) {
                        // console.log('Search =>' + cvalue + '| attr :' + atname)
                        $errorElement.text(errmessage);
                        isValid = false;
                    }
                }
            });

        }

        console.log('isValid', isValid);

        if (isValid) {

            console.log('check 4.1');
            // this section make table column data
            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
              
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                //console.log('nameAttr', nameAttr);
                console.log('headerName', headerName);

                if ($this.is('select')) {

                    tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                    tableOptionsTemp.hideColumn.push(nameAttr)
                    //displat text of select
                    if ($this.val() != null) {
                        let selectText = ($this.val().length == 0) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    else {
                        let selectText = ($this.val() == null) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    //tableOptionsTemp.onlyShowColumn.push(nameAttr + '_d')
                    insertData[nameAttr] = $this.val();
                    //insertData[nameAttr] = $this.val();
                    if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Action"]').val() != 0) { }



                    if ($thisForm.find('[name="FK_NetAction"]').val() == $this.val()) { }
                    else if ($thisForm.find('[name="FK_ActionType"]').val() == $this.val()) { }
                    else if ($thisForm.find('[name="BranchTypeID"]').val() == $this.val()) { }
                    else if ($thisForm.find('[name="BranchID"]').val() == $this.val()) { }
                    else if ($thisForm.find('[name="FK_Departement"]').val() == $this.val()) { }
                    else { $this.val('').selectpicker('refresh'); }


                }
                else if ($this.is('input')) {

                    let inputType = $this.attr('type').toLocaleLowerCase();

                    if (inputType == 'checkbox') {

                        insertData[nameAttr] = $this.is(':checked');

                        tableOptionsTemp.isCheckType.push(nameAttr)
                        //clear field
                        $this.prop('checked', false);

                    }
                    else if (inputType == 'hidden') {

                        tableOptionsTemp.hideColumn.push(nameAttr)
                        insertData[nameAttr] = $this.val();

                        if ($thisForm.find('[name="FK_Employee"]').val() == $this.val()) { }

                        else { $this.val(''); }

                        //clear field

                    }
                    else if (inputType == 'date') {


                        if ($this.val() == '') {

                            insertData[nameAttr] = null;
                        }
                        else {

                            insertData[nameAttr] = $this.val();
                        }

                        //clear field
                        // $this.val('');
                    }

                    else {
                        insertData[nameAttr] = $this.val();
                        //$this.val() == "" ? "''" : $this.val();
                        //clear field

                        if ($thisForm.find('[name="AssignEmp"]').val() == $this.val()) {

                        }
                        else { $this.val(''); }
                    }
                }
                else {
                    insertData[nameAttr] = $this.val();
                    if ($thisForm.find('[name="AssignEmp"]').val() == $this.val()) { }
                    else { $this.val(''); }
                }




            });
            console.log('check 4.2', insertData);
            console.log('check 4.2 tableoption', tableOptionsTemp);
            if (isNew) {
                console.log('check 4.2.1');
                //this section nake table.table row
                if ($tblcontainer.find('table').length == 0) {
                    console.log('check 4.2.3');
                    console.log(insertData);
                    $tblcontainer.append(pft_table_createtable([insertData], tableOptionsTemp));
                    //  $tblcontainer.find('table').dataTable({ paging: false, ordering: false });
                }
                else {
                    console.log('check 4.2.1');
                    let table = $tblcontainer.find('table').DataTable()
                    table.destroy()
                    pft_table_addTableRow($tblcontainer.find('table'), insertData, tableOptionsTemp);


                    //  $tblcontainer.find('table').dataTable({ paging: false, ordering: false});
                    //   $tblcontainer.DataTable().draw();
                    //  table.ajax.reload();
                }
                console.log('check 4.2.1');
            }
            else {
                console.log('check 4.3');
                let table = $tblcontainer.find('table').DataTable()
                table.destroy()
                console.log('check 4.4');
                console.log('table', $tblcontainer.find('table'))
                console.log('check 4.5');
                pft_table_replaceTableRow($tblcontainer.find('table'), updateCond, insertData, tableOptionsTemp);


                // $tblcontainer.find('table').dataTable({ paging: false,ordering:false });
            }

            console.log(insertData);
            //alert(1);
            // resetting the edit value
            $tblcontainer.attr('perfect-tempTable-action', 0);
        }

        console.log('check 5');
    }

    function createWorktable(ele, tkey, uniq = []) {
        debugger;
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let tableKey = tkey;
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');

        let insertData = {};
        let tableOptionsTemp = tableOptionsTempOut;

        let unique = (uniq) ? uniq : [];

        let isValid = true;
        let errorClass = '.temptableError';

        //make index
        console.log('check 1');

        let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
        let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
        let indexname = tkey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);
        let updateCond = '';
        let isNew = true;
        if (thisactionIndex > 0) {
            //means update
            insertData[indexname] = thisactionIndex;
            updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
            isNew = false;
        }
        else {
            //insert
            insertData[indexname] = lastIndex + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
            isNew = true;
        }//


        if (tableKey == "WorkDetailsTable") {
            if ($thisForm.find('[perfect-tempTable-' + tableKey + '="WorkType"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="WorkType"]').val() == null) {

                isValid = false;
                console.log('false');
                $thisForm.find('[perfect-tempTable-' + tableKey + '="WorkType"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select WorkType');
            }
            else {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="WorkType"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }
            if ($thisForm.find('[perfect-tempTable-' + tableKey + '="DurationType"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="DurationType"]').val() == null) {

                isValid = false;
                console.log('false');
                $thisForm.find('[perfect-tempTable-' + tableKey + '="DurationType"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Duration Type');
            }
            else {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="DurationType"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }
            if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Duration"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="Duration"]').val() == null) {

                isValid = false;
                console.log('false');
                $thisForm.find('[perfect-tempTable-' + tableKey + '="Duration"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter Duration');
            }
            else {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="Duration"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }
            if ($thisForm.find('[perfect-tempTable-' + tableKey + '="WorkAmount"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="WorkAmount"]').val() == null) {

                isValid = false;
                console.log('false');
                $thisForm.find('[perfect-tempTable-' + tableKey + '="WorkAmount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter Work Amount');
            }
            else {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="WorkAmount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }

        }

        let upperlimit = $thisForm.find('[name="RegDate"]').val();
        let lowerlimit = $thisForm.find('[name="NextActionDate"]').val();
        var enqDate = new Date(upperlimit);
        var nxtDate = new Date(lowerlimit);
        var today = new Date();
        var key = "";
        var headerEleName = "";
        var atname = "";
        var cvalue = "";
        var $errorElement = "";
        var errmessage = "";

        if (tableKey == "WorkDetailsTable") {
            debugger;
            if (unique.length > 0) {
                let prevData = [];
                $tblcontainer.find('table > tbody').find('tr').each(function () {
                    if (isNew) {
                        prevData.push($(this).data('pData'));
                    }
                    else {
                        if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                            prevData.push($(this).data('pData'));
                        }

                    }

                })

                unique.forEach(function (key, i) {
                    debugger;
                    console.log('unid -> key:' + key + "| index :" + i);

                    $thisEle = $thisForm.find('[perfect-tempTable-' + tableKey + '="' + key + '"]');


                    // atname = $thisEle.attr('name');
                    cvalue;
                    headerEleName = headerEleName.replace('*', '');

                    //console.log('len')

                });
                if ($thisEle.length != 0) {
                   

                  

                        console.log('len', $thisEle);
                        $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
                        errmessage = headerEleName + " Already Exists"

                        //getting current value in cval
                        if ($thisEle.is('select')) {
                            cvalue = $thisEle.val();
                            //alert(cvalue);
                        }
                        else if ($thisEle.is('input')) {

                            let inputEleType = $thisEle.attr('type').toLocaleLowerCase();

                            if (inputEleType == 'checkbox') { cvalue = $thisEle.is(':checked'); }
                            else if (inputEleType == 'hidden') { cvalue = $thisEle.val(); }
                            else { cvalue = $thisEle.val(); }
                        }
                        else { cvalue = $thisEle.val(); }

                       
                }
            }
        }
        else {
            if (unique.length > 0) {
                //getting previous data
                let prevData = [];
                $tblcontainer.find('table > tbody').find('tr').each(function () {
                    if (isNew) {
                        prevData.push($(this).data('pData'));
                    }
                    else {
                        if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                            prevData.push($(this).data('pData'));
                        }

                    }

                })
                console.log('previous data', prevData);
                var $thisEle = "";
                unique.forEach(function (key, i) {
                    debugger;
                    console.log('unid -> key:' + key + "| index :" + i);
                    $thisEle = $thisForm.find('[perfect-tempTable-' + tableKey + '="' + key + '"]');

                    let cvalue;
                    headerEleName = headerEleName.replace('*', '');

                    //console.log('len')

                });
                if ($thisEle.length != 0) {
                    debugger;
                    console.log('len', $thisEle)
                    if ((unique[0] == "WorkType") && (unique[1] == "DurationType")) {
                        $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
                        errmessage = headerEleName + " Already Exists"

                        //getting current value in cval
                        if ($thisEle.is('select')) {
                            cvalue = $thisEle.val();
                            //alert(cvalue);
                        }
                        else if ($thisEle.is('input')) {

                            let inputEleType = $thisEle.attr('type').toLocaleLowerCase();

                            if (inputEleType == 'checkbox') { cvalue = $thisEle.is(':checked'); }
                            else if (inputEleType == 'hidden') { cvalue = $thisEle.val(); }
                            else { cvalue = $thisEle.val(); }
                        }
                        else { cvalue = $thisEle.val(); }

                        // console.log('cvalue ->' + cvalue);

                        //searching in previous data
                        if (prevData.find(a => a[atname] == cvalue)) {
                            // console.log('Search =>' + cvalue + '| attr :' + atname)
                            $errorElement.text(errmessage);
                            isValid = false;
                        }
                    }
                }

            }
        }
        console.log('isValid', isValid);

        if (isValid) {

            console.log('check 4.1');
            // this section make table column data
            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                //console.log('nameAttr', nameAttr);
                console.log('headerName', headerName);

                if ($this.is('select')) {

                    tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                    tableOptionsTemp.hideColumn.push(nameAttr)
                    //displat text of select
                    if ($this.val() != null) {
                        let selectText = ($this.val().length == 0) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    else {
                        let selectText = ($this.val() == null) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    //tableOptionsTemp.onlyShowColumn.push(nameAttr + '_d')
                    insertData[nameAttr] = $this.val();
                    //insertData[nameAttr] = $this.val();
                    if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Action"]').val() != 0) { }



                    if ($thisForm.find('[name="FK_NetAction"]').val() == $this.val()) { }
                    else if ($thisForm.find('[name="FK_ActionType"]').val() == $this.val()) { }
                    else if ($thisForm.find('[name="BranchTypeID"]').val() == $this.val()) { }
                    else if ($thisForm.find('[name="BranchID"]').val() == $this.val()) { }
                    else if ($thisForm.find('[name="FK_Departement"]').val() == $this.val()) { }
                    else { $this.val('').selectpicker('refresh'); }


                }
                else if ($this.is('input')) {

                    let inputType = $this.attr('type').toLocaleLowerCase();

                    if (inputType == 'checkbox') {

                        insertData[nameAttr] = $this.is(':checked');

                        tableOptionsTemp.isCheckType.push(nameAttr)
                        //clear field
                        $this.prop('checked', false);

                    }
                    else if (inputType == 'hidden') {

                        tableOptionsTemp.hideColumn.push(nameAttr)
                        insertData[nameAttr] = $this.val();

                        if ($thisForm.find('[name="FK_Employee"]').val() == $this.val()) { }

                        else { $this.val(''); }

                        //clear field

                    }
                    else if (inputType == 'date') {


                        if ($this.val() == '') {

                            insertData[nameAttr] = null;
                        }
                        else {

                            insertData[nameAttr] = $this.val();
                        }

                        //clear field
                        // $this.val('');
                    }

                    else {
                        insertData[nameAttr] = $this.val();
                        //$this.val() == "" ? "''" : $this.val();
                        //clear field

                        if ($thisForm.find('[name="AssignEmp"]').val() == $this.val()) {

                        }
                        else { $this.val(''); }
                    }
                }
                else {
                    insertData[nameAttr] = $this.val();
                    if ($thisForm.find('[name="AssignEmp"]').val() == $this.val()) { }
                    else { $this.val(''); }
                }




            });
            console.log('check 4.2', insertData);
            console.log('check 4.2 tableoption', tableOptionsTemp);
            if (isNew) {
                console.log('check 4.2.1');
                //this section nake table.table row
                if ($tblcontainer.find('table').length == 0) {
                    console.log('check 4.2.3');
                    console.log(insertData);
                    $tblcontainer.append(pft_table_createtable([insertData], tableOptionsTemp));
                    //  $tblcontainer.find('table').dataTable({ paging: false, ordering: false });
                }
                else {
                    console.log('check 4.2.1');
                    let table = $tblcontainer.find('table').DataTable()
                    table.destroy()
                    pft_table_addTableRow($tblcontainer.find('table'), insertData, tableOptionsTemp);


                    //  $tblcontainer.find('table').dataTable({ paging: false, ordering: false});
                    //   $tblcontainer.DataTable().draw();
                    //  table.ajax.reload();
                }
                console.log('check 4.2.1');
            }
            else {
                console.log('check 4.3');
                let table = $tblcontainer.find('table').DataTable()
                table.destroy()
                console.log('check 4.4');
                console.log('table', $tblcontainer.find('table'))
                console.log('check 4.5');
                pft_table_replaceTableRow($tblcontainer.find('table'), updateCond, insertData, tableOptionsTemp);


                // $tblcontainer.find('table').dataTable({ paging: false,ordering:false });
            }

            console.log(insertData);
            //alert(1);
            // resetting the edit value
            $tblcontainer.attr('perfect-tempTable-action', 0);
        }
        BindTotalAmount(ele)
        console.log('check 5');
    }
    function MaterialDetailsclear(ele, tableKey) {
      
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="input"]').val('');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="select"]').val('').selectpicker('refresh');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="text"]').val('');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="date"]').val('');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="hidden"]').val('');

    }
    function WorkDetailsclear(ele, tableKey) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="input"]').val('');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="select"]').val('').selectpicker('refresh');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="text"]').val('');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="date"]').val('');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="hidden"]').val('');

    }


         function ResetButton(ele) {

             ProjectwiseStagesInitialLoad();
    }


    // Function to add new ProjectwiseStages


    function AddProjectwiseStages(ele) {
        debugger

        let $thisForm = $(ele).closest('[perfect-class="form"]');//<------Form element :  Our Form which contain our input elements ,saved in a variable for reusability


        //$(ele).find('i').removeClass();
      
        console.log('> Add ProjectwiseStages form IS valid', $thisForm.valid())

        let upperlimit = $thisForm.find('[name="StartDate"]').val();
        let lowerlimit = $thisForm.find('[name="EndDate"]').val();
        let createlimit = $thisForm.find('[name="CreateDate"]').val();
        if (upperlimit > lowerlimit) {

            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Due Date should greater than or equal to Start Date' });
        }
        if (createlimit > upperlimit) {
            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Start Date should greater than or equal to Created On Date' });
        }

        else {
            if ($thisForm.valid() && validatePercentage) {//<---------Validation :  To Check whether the form is vaild(ie; values in the form contrls are valid)
                if (dateValidate(ele)) {
                    if (checkdatewithLDdate(ele)) {
                        //if (checkamount(ele)) {
                            $(ele).prop('disabled', true); // avoiding form submit the double click

                            let $modal2 = $thisForm.find('#zero_configOthercharge');

                            let MaterialDetails = [];
                            $thisForm.find('[perfect-tempTable="MaterialDetailsTable"]').find('tbody').find('tr').each(function () {
                                MaterialDetails.push($(this).data('pData'));
                            })
                            let WorkDetails = [];
                            $thisForm.find('[perfect-tempTable="WorkDetailsTable"]').find('tbody').find('tr').each(function () {
                                WorkDetails.push($(this).data('pData'));
                            })

                            let Amount = 0;
                            let WorkAmount = 0;
                            $('#Material').find('tbody tr').each(function (index, ele) {
                                Amount = Amount + parseFloat($(ele).find('.Amount').text());

                            });
                            $('#Work').find('tbody tr').each(function (index, ele) {
                                WorkAmount = WorkAmount + parseFloat($(ele).find('.WorkAmount').text());

                            });


                            var inputData = {//<---- Input Json : this is the variable we pass to controller
                                __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),

                                Date: $thisForm.find('[name=CreateDate]').val().trim(),
                                StartDate: $thisForm.find('[name=StartDate]').val().trim(),
                                EndDate: $thisForm.find('[name=EndDate]').val().trim(),
                                Duration: $thisForm.find('[name=PWSDuration]').val(),
                                DurationType: $thisForm.find('[name=PWSDurationType]').val(),
                                FK_Project: $thisForm.find('[name=ProjectID]').val(),
                                FK_Team: $thisForm.find('[name=TeamID]').val(),
                                FK_Stage: $thisForm.find('[name=StageID]').val(),
                                Percentage: $thisForm.find('[name=Percentage]').val(),
                                CollectionAmount: $thisForm.find('[name=CollectionAmount]').val(),

                                'MaterialDetails': MaterialDetails,
                                'WorkDetails': WorkDetails,
                                'TransMode': ProjectwiseStagesTranMode,
                                LastID: LastID_ProjectwiseStages
                            };
                            clearSessionValue(LastIDSessionKey);

                            console.log('> Add ProjectwiseStages ajax input', inputData);


                            $.ajax({
                                url: "@Url.Action("AddNewProjectwiseStagesDetails", "ProjectwiseStages")",
                                type: "POST",

                                data: inputData,//<---- Input json : data passed to controller
                                dataType: "json",
                                contentType: 'application/x-www-form-urlencoded;charset=utf-8',
                                success: function (ajaxOutput) {//<----- if ajax method executed succesfully,  we get the data passed from controller in this variable  => success: function (variable) {

                                    if (ajaxOutput.Process.IsProcess) {

                                        $.each(ajaxOutput.Process.Message, function (key, value) {
                                            //toastr.success(value, "Success");
                                            NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                                        });
                                        $thisForm.find('[perfect-ctype="input"]').val('');
                                        $thisForm.find('[perfect-ctype="number"]').val('');



                                        //let onSuccess = $thisForm.attr('perfect-onFormSuccess')

                                        //if (onSuccess) {
                                        // window[onSuccess]();
                                        ProjectwiseStagesInitialLoad();
                                        // }

                                        //---------- Do stuff if success

                                        console.log('> Add new ProjectwiseStages success data', ajaxOutput);
                                    }
                                    else {
                                        $.each(ajaxOutput.Process.Message, function (key, value) {
                                            //toastr.warning(value, "Error");
                                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                        });
                                    }
                                },
                                complete: function () {
                                    $(ele).prop('disabled', false);
                                }

                            });
                        //}

                    }
                    else {
                        NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Created On Date should greater than  or equal to Project Date' });
                    }
                }
            }//

        }

    }

    // Function to update a customer
    //$('.addcompany-jq-addnewuserUpdate').on('click',
    function updateProjectwiseStages(ele) {
        debugger;

        let $thisForm = $(ele).closest('[perfect-class="form"]');//<------Form element :  Our Form which contain our input elements ,saved in a variable for reusability

        //perfectCRMvalidation.init($thisForm);
        let upperlimit = $thisForm.find('[name="StartDate"]').val();
        let lowerlimit = $thisForm.find('[name="EndDate"]').val();
        let createlimit = $thisForm.find('[name="CreateDate"]').val();
        let pdata = $thisForm.data('pData');
        var input = {
            FK_Project: pdata["FK_Project"],
        };
        $.ajax({
            url: '@Url.Action("EnableEdit", "ProjectwiseStages")',
            type: "Get",
            dataType: "json",
            data: input,
            contentType: "application/json",
            success: function (ajaxOutput) {
                let continueExecution = true;

                if (ajaxOutput.Process.IsProcess) {
                    $.each(ajaxOutput.Data, function (key, value) {
                        if (value.PrFuCurrentStatus == 3) {
                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Project Follow Up already done for this Stage.' });
                            continueExecution = false;
                            return false; // exit the loop
                        }
                    });
                }
                if (continueExecution) {
                    if (upperlimit > upperlimit) {

                        NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Due Date should greater than  or equal to Start Date' });

                    }
                    if (createlimit > lowerlimit) {
                        NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Start Date should greater than or equal to Created On Date' });
                    }
                    else {
                        if ($thisForm.valid() && validatePercentage) {//<---------Validation :  To Check whether the form is vaild(ie; values in the form contrls are valid)
                            if (dateValidate(ele)) {
                                if (checkdatewithLDdate(ele)) {
                                    //if (checkamount(ele)) {
                                    $(ele).prop('disabled', true);

                                    let pdata = $thisForm.data('pData');

                                    console.log('> Update ProjectwiseStages form data saved', pdata);

                                    let $modal2 = $thisForm.find('#zero_configOthercharge');


                                    let MaterialDetails = [];
                                    $thisForm.find('[perfect-tempTable="MaterialDetailsTable"]').find('tbody').find('tr').each(function () {
                                        MaterialDetails.push($(this).data('pData'));
                                    })
                                    let WorkDetails = [];
                                    $thisForm.find('[perfect-tempTable="WorkDetailsTable"]').find('tbody').find('tr').each(function () {
                                        WorkDetails.push($(this).data('pData'));
                                    })



                                    let Amount = 0;
                                    let WorkAmount = 0;
                                    $('#Material').find('tbody tr').each(function (index, ele) {
                                        Amount = Amount + parseFloat($(ele).find('.Amount').text());

                                    });
                                    $('#Work').find('tbody tr').each(function (index, ele) {
                                        WorkAmount = WorkAmount + parseFloat($(ele).find('.WorkAmount').text());

                                    });

                                    var inputData = {//<---- Input Json : this is the variable we pass to controller
                                        __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                                        Date: $thisForm.find('[name=CreateDate]').val().trim(),
                                        StartDate: $thisForm.find('[name=StartDate]').val().trim(),
                                        EndDate: $thisForm.find('[name=EndDate]').val().trim(),
                                        Duration: $thisForm.find('[name=PWSDuration]').val(),
                                        DurationType: $thisForm.find('[name=PWSDurationType]').val(),
                                        FK_Project: $thisForm.find('[name=ProjectID]').val(),
                                        FK_Team: $thisForm.find('[name=TeamID]').val(),
                                        FK_Stage: $thisForm.find('[name=StageID]').val(),
                                        Percentage: $thisForm.find('[name=Percentage]').val(),
                                        CollectionAmount: $thisForm.find('[name=CollectionAmount]').val(),

                                        'MaterialDetails': MaterialDetails,
                                        'WorkDetails': WorkDetails,
                                        ProjectwiseStagesID: pdata["ProjectwiseStagesID"],
                                        'TransMode': ProjectwiseStagesTranMode,
                                        LastID: LastID_ProjectwiseStages
                                    };
                                    clearSessionValue(LastIDSessionKey);



                                    console.log('> Update state ajax input', inputData);
                                    $.ajax({
                                        url: "@Url.Action("UpdateProjectwiseStagesDetails", "ProjectwiseStages")",
                                        type: "POST",

                                        data: inputData,
                                        dataType: "json",
                                        contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                                        success: function (ajaxOutput) { //<----- if ajax method executed succesfully,  we get the data passed from controller in this variable  => success: function (variable) {

                                            if (ajaxOutput.Process.IsProcess) {

                                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                                    //toastr.success(value, "Success");
                                                    NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                                                });


                                                //let onSuccess = $thisForm.attr('perfect-onFormSuccess')

                                                //if (onSuccess) {
                                                // window[onSuccess]();
                                                ProjectwiseStagesInitialLoad();
                                                //  }

                                                //---------- Do stuff if success
                                                //toastr.success("Inside success", "Confirmation Box in table");

                                                console.log('> update new ProjectwiseStages success data', ajaxOutput);
                                            }
                                            else {
                                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                                    //toastr.warning(value, "Error");
                                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                                });
                                            }


                                        },
                                        complete: function () {
                                            $(ele).prop('disabled', false);
                                        }

                                    });

                                    //}

                                }
                                else {
                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Created On Date should greater than  or equal to Project Date' });
                                }
                            }
                        }

                    }
                }
            }
        });
    }
        //////New change///



        function SetControl(ele, tt) {
            console.log(tt);
            let ProjectID = tt.ID_FIELD;

            let $thisForm = $(ele).closest('[perfect-class="form"]');
            let $placeDropdown = $thisForm.find('[name=TeamID]');//<--- Will give place select html element
            $placeDropdown.empty();
            $placeDropdown.append($('<option/>', { value: '' }).text('Please select')).selectpicker('refresh');
            //let inputData = {
            //    __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
            //    LeadGenerateID: $thisForm.find('[name=Lead]').val().trim()
            //};
            $.ajax({
                url: "@Url.Action("GetProjectTeam", "ProjectwiseStages")",
                type: "POST",

                data: JSON.stringify({ FK_Project: ProjectID }),
                dataType: "json",
                contentType: "application/json",
                success: function (ajaxOutput) {



                    if (ajaxOutput.Process.IsProcess) {

                        $.each(ajaxOutput.Data, function (key, value) {
                            $placeDropdown.append($('<option/>', { "value": value.ID_ProjectTeam }).text(value.TeamName)).selectpicker('refresh')
                        });


                    }
                    else {
                        $.each(ajaxOutput.Process.Message, function (key, value) {
                            //toastr.warning(value, "Error");
                            //NotificationMessage({ 'type': 'info', 'heading': 'info', 'message': value });
                        });
                    }
                }

            });


        }
 function fn_TeamDetails_Project(ele) {


        let $thisForm = $(ele).closest('[perfect-class="form"]');//<------Form element :  Our Form which contain our input elements ,saved in a variable for reusability
        let $formFolowDivContainer = $(this).closest('[perfect-class="form"]').closest('.jq_leadgeneration_body').find('.jq_leadgeneration_followup_status');
            let inputData = {
                __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                ProjectID: $thisForm.find('[name=ProjectID]').val().trim(),
                TransMode:'PRTC' 
        };
        console.log(inputData);
        if ($thisForm.find('[name=ProjectID]').val().trim() != '' || $thisForm.find('[name=ProjectID]').val().trim() != 0) {
            $.ajax({
                url: "@Url.Action("GetExistingTeamInfo", "TeamCreation")",
                type: "POST",
                // headers: { "token_key": "1234" },
                data: inputData,
                dataType: "json",
                contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                success: function (ajaxOutput) {
                  
                    console.log('sss', ajaxOutput)
                    if (ajaxOutput.TeamDetails.Data != null) {
                        let strHtml = ""; let $ProductHtml = "";
                        for (var t = 0; t < ajaxOutput.distTeams.length; t++) {
                            let rowCount = 0;
                            strHtml += "<div class='tab-pane'>";
                            strHtml += "<div class='row' style='margin - top: 1.5rem;>";
                            strHtml += "<div class='col-sm-6'>";
                            strHtml += "<label style='width:3%'></label>";
                            strHtml += "<label style='width:25%'><strong style='width:100%'>Team: </strong><span class='mb-0' style='width:100%'>" + ajaxOutput.distTeams[t][0]['Name'] + "</span></label>";
                            strHtml += "<label style='width:25%'><strong style='width:100%'>Short Name: </strong><span class='mb-0' style='width:100%'>" + ajaxOutput.distTeams[t][0]['ShortName'] + "</span></label>";
                            strHtml += "<label style='width:25%'><strong style='width:100%'>Created Date: </strong><span class='mb-0' style='width:100%'>" + moment(ajaxOutput.distTeams[t][0]['CreateDate']).format('DD-MM-YYYY') + "</span></label>";
                            //strHtml += "<li class='list-group-item d-flex px-0 justify-content-between'><strong>g </strong><span class='mb-0'></span></li>";
                            //strHtml += "<li class='list-group-item d-flex px-0 justify-content-between'><strong>Collected By</strong><span class='mb-0'>" + ajaxOutput.prInfo.Data[0]['CollectedByName'] + "</span></li>";
                            strHtml += "</div></div></div>";

                            strHtml += '<div class="card-body"><div class="table-responsive"><table class="table table-striped"  id="EmployeeTable"><thead class="thead-primary"><tr><th>Sl No.</th><th>Department</th><th>Employee</th><th>Employee Type</th></tr>'
                            strHtml += '</thead ><tbody id="EmployeeDt">  ';

                            if (ajaxOutput != null) {
                                $('#EmployeeDt').empty();
                                $ProductHtml = "";
                                var ProductData = ajaxOutput.TeamDetails.Data;
                                if (ProductData) {
                                    $.each(ProductData, function (i, value) {
                                        if (value.TeamID == ajaxOutput.distTeams[t][0]["TeamID"]) {
                                            rowCount = (rowCount + 1);
                                            $ProductHtml += "<tr id = " + rowCount + " > ";
                                            $ProductHtml += "<td style='width:20%;'>" + rowCount + "</td>";
                                            $ProductHtml += "<td style='width:20%;'>" + value.DepartmentName + "</td>";
                                            $ProductHtml += "<td>" + value.Employee + "</td>";
                                            $ProductHtml += "<td>" + value.EmployeeTypeName + "</td>";

                                            $ProductHtml += "</tr> ";
                                        }
                                    });
                                }
                                else {
                                    $ProductHtml += "<tr id='0'><td colspan='4' style'text-align:center'>No Records..</td></tr>";
                                }
                             
                                //$thisForm.find('#EmployeeDt').append($ProductHtml);
                                strHtml += $ProductHtml + '</tbody ></table > </div></div>';
                            }
                            //else {
                            //    $ProductHtml += "<tr id='0'><td colspan='8' style'text-align:center'>No Records..</td></tr>";
                            //    $thisForm.find('#EmployeeDt').append($ProductHtml);
                            //    $.each(ajaxOutput.Process.Message, function (key, value) {
                            //        NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                            //    });
                            //}
                        }
                        $thisForm.find('[name=TeamDetails]').html(strHtml);

                        initFunctions($thisForm);
                    }
                    else {
                        $('#EmployeeDt').empty();
                        strHtml = "<label class='col - xl - 10' style='text-align:center'>No Team Found For The Selected Project</label> ";
                        $thisForm.find('[name=TeamDetails]').html(strHtml);
                    }

                }
            });
        }

    }

    function checkdatewithLDdate(ele) {
        debugger;
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        console.log('Projectdate', $thisForm.find('[name=ProjectDate]').val());
        let ProjectDate = $thisForm.find('[name=ProjectDate]').val();
        let CreateDate = $thisForm.find('[name=CreateDate]').val();      
        if (CreateDate < ProjectDate) {
            $thisForm.find('[name="CreateDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('Created On sholud be greater than or equal to Project Date');
            return false;
        }
        else {
            $thisForm.find('[name="CreateDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('')
            return true;
        }



    }

    function decimalpnt(ele, id, range) {
        debugger
        let input = $('#' + id);

        ele.value = ele.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');
        let t = ele.value;
        ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t;

        $(document).on('keydown', '#' + id, function (event) {

            if (ele.value.includes('.')) {

            }
            else if (ele.value === '.' && (event.key === '.' || event.keyCode === 190)) {
                ele.value = '0.00'; // Change the value to '0.00' if only a dot is entered
                // Prevent the dot from being entered in the input field
            }
            var key = event.keyCode || event.charCode;
            if (key == 8 || key == 46) { }
            else {
                if (ele.value.indexOf('.') < 0 && ele.value.indexOf('.') !== 9 && ele.value.length > 8) {
                    ele.value = ele.value + '.';
                }
            }

        });

    }

    function decimalpntminus(ele, id, range) {

        let input = $('#' + id);
        ele.value = ele.value.replace(/[^0-9.-]/g, '').replace(/(\..*)\./g, '$1');
        let t = ele.value;
        ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t;
        input.on('keydown', function () {
            if (ele.value.includes('.')) {

            }
            var key = event.keyCode || event.charCode;
            if (key == 8 || key == 46) { }
            else {
                if (ele.value.length == 9) {
                    ele.value = ele.value + '.';
                }
            }

        });

    }
    function minmax(min, max, ele, range) {
        if (min != '' || max != '') {
            let t = ele.value;
            if (parseInt(ele.value) < min || isNaN(parseInt(ele.value))) { ele.value = min; }
            else if (parseInt(ele.value) > max) { ele.value = max; }
            else { ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t; }

        }
    }

    function dateValidate(ele) {
        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let due = new Date($thisForm.find('[name="EndDate"]').val());
        due = new Date(due);
        due.setHours(0, 0, 0, 0);
        
        let datechk = moment(DueEndDate).format('YYYY-MM-DD');
        datechk = new Date(datechk);
        datechk.setHours(0, 0, 0, 0);

        if (due < datechk) {

            $thisForm.find('[name="EndDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('Due Date not allowed back Date.');
            $thisForm.find('[name="EndDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').show();
            return false;
        }
        else {

            $thisForm.find('[name="EndDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('');
            return true;
        }



    }
  
   

</script>



