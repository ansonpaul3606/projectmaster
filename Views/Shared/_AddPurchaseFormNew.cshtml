
@model PerfectWebERP.Models.PurchaseModel.DropDownListModel
<style type="text/css">
    .tableFixHead {
        overflow: auto;
        height: auto;
        max-height: 250px;
    }

        .tableFixHead thead tr {
            position: sticky;
            top: 0;
            z-index: 1;
        }

    table {
        border-collapse: collapse;
        width: 100%;
    }

    th, td {
        padding: 8px 16px;
    }

    th {
        background: var(--perfect-primary);
    }

    .media > span {
        height: 85px;
        width: 85px;
        border-radius: 30px;
        padding: 10px 12px;
        font-size: 32px;
        display: flex;
        justify-content: center;
        align-items: center;
        color: #464a53;
    }

    .btn-danger {
        color: #fff;
        background-color: #e94560;
        border-color: #e94560;
    }

        .btn-danger:hover {
            color: #fff;
            background-color: #e94560;
            border-color: #e94560;
        }
</style>
<div class="card ">

    <div class="card-header">
        <h4 class="card-title col-12">@ViewBag.PageTitle</h4>
        <span title="To View List" onclick="fn_showListView();"><svg id="Layer_1" class="layer" stroke="currentColor" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" height="20" width="20" viewBox="0 0 122.88 122.54"><title>To View List</title><path class="viewlst" d="M4.69,0H46.22a4.71,4.71,0,0,1,4.69,4.69V46a4.69,4.69,0,0,1-4.69,4.69H4.69a4.65,4.65,0,0,1-3.31-1.38l-.09-.09A4.67,4.67,0,0,1,0,46V4.69A4.71,4.71,0,0,1,4.69,0ZM89.44,61.94a26.56,26.56,0,0,1,10.18,2l.07,0a26.61,26.61,0,0,1,15.25,32.16,26.18,26.18,0,0,1-2.7,6.11l10.3,11.24a1.27,1.27,0,0,1-.07,1.8l-7.57,6.9a1.27,1.27,0,0,1-1.79-.07l-9.86-10.85a26.36,26.36,0,0,1-6.1,2.74,26.87,26.87,0,0,1-7.71,1.13,26.51,26.51,0,0,1-10.17-2l-.07,0A26.64,26.64,0,0,1,64.85,78.37l0-.07A26.6,26.6,0,0,1,89.44,61.94Zm15,11.59a21.38,21.38,0,0,0-6.89-4.61l-.06,0a21.22,21.22,0,0,0-23.07,4.64l-.07.07a21.25,21.25,0,0,0-4.54,6.83l0,.06a21.32,21.32,0,0,0-1.58,8.06,21.26,21.26,0,0,0,29.35,19.62,21.54,21.54,0,0,0,6.89-4.61l.07-.07a21.09,21.09,0,0,0,4.54-6.83l0-.06a21.35,21.35,0,0,0,0-16.17,21.34,21.34,0,0,0-4.62-6.9ZM4.69,63.2H46.22a4.71,4.71,0,0,1,4.69,4.7v41.34a4.68,4.68,0,0,1-4.69,4.69H4.69A4.69,4.69,0,0,1,0,109.24V67.9a4.71,4.71,0,0,1,4.69-4.7ZM68.78,0h41.53A4.71,4.71,0,0,1,115,4.69V46a4.71,4.71,0,0,1-4.69,4.69H68.78A4.71,4.71,0,0,1,64.09,46V4.69a4.69,4.69,0,0,1,1.37-3.31l.1-.09A4.67,4.67,0,0,1,68.78,0Z"></path></svg></span>
    </div>
    <div class="card-body">
        <form id="" class="form-valide" perfect-class="form" action="#" method="post" perfect-onFormSuccess="">
            <div class="">
                @Html.AntiForgeryToken()
                <div class="row">
                    <div class="col-sm-4" style="display:none">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Mode</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                @*<input type="hidden" name="ProductID" />*@
                                <input type="hidden" name="TransMode" />
                                <select class="form-control " name="TransMode" perfect-selectButtonAction="testing" perfect-class="formGroupControl" perfect-ctype="select" onchange="fn_bindropdown(this)" perfect-css="select">

                                    @if (!(Model.ModuleTypeList is null))
                                    {
                                        foreach (var Module in Model.ModuleTypeList)
                                        {
                                            <option value="@Module.Mode">@Module.ModuleName</option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                  



                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Import From</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <input type="hidden" name="ImportID" />
                                    <select class="form-control perfectValidate_string" name="Supplier" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" onchange="fun_imports(this)">
                                        <option value="">Please Select </option>
                                        <option value="1">Supplier</option>
                                        <option value="2">Purchase Order</option>
                                    </select>

                                    <div class="input-group-append">
                                        <input type="hidden" name="FK_BranchCodePur" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" value="" />

                                        <button id="addcountry-jq-searchButton3" data-toggle="tooltip " data-placement="top" data-html="true" title="Import from Supplier,Purchase Order" class="btn btn-primary" type="button" perfect-css="button" onclick="fn_showimportlists(this)" Function="1" Criterea1="FK_BranchCodePur"><i class="las la-file-import la-lg"></i></button>
                                        <button id="Newsupplieraddbutton" title="Add New Supplier" class="btn btn-primary fa fa-building-o" style="display:none" type="button" perfect-css="button" onclick="fn_supplierForm_loadState(this)"></button>

                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Supplier</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <input type="hidden" class="form-control" name="FK_PurchaseOrder" perfect-ctype="hidden" />
                                    <input type="hidden" name="SupplierID" class="form-control" perfect-ctype="hidden" />
                                    <input type="text" class="form-control perfectValidate_string" name="SupplierName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly />
                                    <input type="hidden" name="Statecode" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" value="" />
                                 
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Department</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <input type="text" class="form-control perfectValidate_string" name="DepartmentName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled />
                                    <input type="hidden" name="DepartmentID" class="perfectValidate_numeric" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                    <div class="input-group-append">
                                        <button id="depeartment" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchVal(this,35,'Department Details',[])" Criterea1="0" Criterea2="0" BindName="DepartmentName" BindVal="DepartmentID"></button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Invoice No</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">

                                <input type="text" class="form-control perfectValidate_specialCharName " placeholder="" name="InvoiceNo" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" maxlength="18" onkeypress="filterSpecialCharacters(event)" />
                                <input type="hidden" name="PurchaseID" class="form-control" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                <input type="hidden" name="LastID" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Invoice Date</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="date" class="form-control perfectValidate_date" name="InvoiceDate" perfect-class="formGroupControl" max="2050-01-01" onchange="datecheck(this)" perfect-ctype="date" perfect-css="date" />
                                <div class="invalid-feedback temptableErrors"></div>
                            </div>
                        </div>
                    </div>
                 



                </div>

                <div class="row">
                    <div class="col-sm-12">
                        <div class="daccordion__header">
                            <span class="accordion__header--text">Product Details</span>
                        </div>

                        <br />
                        <div class="row">
                            <div class="col-sm-3">
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-4 col-form-label">
                                        <span perfect-class="formGroupLabel">Product</span>
                                        <span class="text-danger">*</span>
                                    </label>
                                    <div class="col-sm-8">
                                        <div class="input-group">
                                            <input type="text" class="form-control " perfect-tempTable-Purchase="ProName" name="ProName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled />
                                            @*<input type="hidden" name="FK_Product" />*@
                                            <input type="hidden" name="ProductID" perfect-tempTable-Purchase="ProductID" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                            <input type="hidden" name="NoOfUnits" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                            <div class="input-group-append">
                                                @*<button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="showItemModal(this)"></button>*@
                                                <button id="addEmployee-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchVal(this,122,'Product Details',[],PurchaseTransMode)" Criterea1="0" Criterea2="0" BindName="ProName" BindVal="ProductID" Function="2"></button>

                                                <div class="modal fade" perfect-class="formGroupModal">
                                                    <div class="modal-dialog modal-xl" role="document">
                                                        <div class="modal-content  rounded-0">
                                                            <div class="modal-header border-0">
                                                                <h5 class="modal-title">Search Product</h5>
                                                                <button type="button" class="close" data-dismiss="modal">
                                                                    <span>&times;</span>
                                                                </button>
                                                            </div>
                                                            <div class="modal-body">
                                                                <div class="form-row">
                                                                    <div class="col-sm-4">
                                                                        <div class="form-group row" perfect-class="formGroup">
                                                                            <label class="col-sm-4 col-form-label">
                                                                                <span perfect-class="formGroupLabel"> Name</span>
                                                                            </label>
                                                                            <div class="col-sm-8">
                                                                                <input type="text" class="form-control" placeholder="" name="Name" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                    <div class="col-sm-3">
                                                                        <div class="form-group row" perfect-class="formGroup">
                                                                            <label class="col-sm-1 col-form-label">
                                                                                <span perfect-class="formGroupLabel"></span>

                                                                            </label>
                                                                            <div class="col-sm-8">
                                                                                @*<img src="~/Assets/images/search1.svg" />*@
                                                                                <button type="button" class="btn btn-rounded btn-primary" perfect-css="button" data-toggle="tooltip" data-placement="top" data-original-title="Serach Product By Name" onclick="searchbtn2(this)" name="reset"><span class="btn-icon-left text-primary"><i class="fa fa-search"></i></span>Search</button>
                                                                            </div>
                                                                        </div>
                                                                    </div>

                                                                    <div class="col-sm-6" style="display:none">
                                                                        <div class="form-group row" perfect-class="formGroup">
                                                                            <label class="col-sm-4 col-form-label">
                                                                                <span perfect-class="formGroupLabel">Manufacture</span>

                                                                            </label>
                                                                            <div class="col-sm-8">
                                                                                <input type="hidden" name="ManufactureID" />
                                                                                <select class="form-control" name="Manu" perfect-selectButtonAction="testing" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select">
                                                                                    <option value="">Please Select </option>

                                                                                </select>
                                                                            </div>
                                                                        </div>
                                                                    </div>

                                                                </div>
                                                                <div class="col-md-12 mt-3" perfect-class="formGroupModalTable">


                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <span class="temptableError"></span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-4 col-form-label">
                                        <span perfect-class="formGroupLabel">Unit</span>
                                        <span class="text-danger">*</span>
                                    </label>
                                    <div class="col-sm-8">
                                        <select class="form-control" perfect-tempTable-Purchase="Unit" onchange="checkfields(this)" name="UnitID" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select">
                                            <option value="">Please Select </option>
                                            @*<option value="1">Test</option>*@
                                            @if (!(Model.UnitList is null))
                                            {
                                                foreach (var unit in Model.UnitList)
                                                {
                                                    <option value="@unit.ID_Unit" UnitCountS="@unit.UnitCount">@unit.UnitName</option>
                                                }
                                            }

                                        </select>

                                        <span class="temptableError"></span>
                                    </div>
                                </div>
                                <span class="temptableError"></span>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-4 col-form-label">
                                        <span perfect-class="formGroupLabel">Barcode</span>

                                    </label>
                                    <div class="col-sm-8">
                                        <input type="text" class="form-control" perfect-tempTable-Purchase="PpdBarCode" name="PpdBarCode" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" onkeypress="return blockSpecialChar(event)" maxlength="15" />
                                    </div>
                                </div>
                                <span class="temptableError"></span>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-4 col-form-label">
                                        <span perfect-class="formGroupLabel">QR Code</span>

                                    </label>
                                    <div class="col-sm-8">
                                        <input type="text" class="form-control" perfect-tempTable-Purchase="PpdQRCode" name="PpdQRCode" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" onkeypress="return blockSpecialChar(event)" maxlength="15" />
                                    </div>
                                </div>
                                <span class="temptableError"></span>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-4 col-form-label">
                                        <span perfect-class="formGroupLabel">Quantity </span>
                                        <span class="text-danger">*</span>
                                    </label>
                                    <div class="col-sm-8">
                                        <div class="input-group">
                                            <input type="text" class="form-control text-right" perfect-tempTable-Purchase="Quantity" placeholder="" id="PpdQuantity" oninput="decimalpnt(this,'PpdQuantity',4)" onchange="ShowTax(this,0),CalcActualQuantity(this),PurchaseDiscount(this,1,5)" name="PpdQuantity" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" min="0" maxlength="13" />

                                            <div class="input-group-append">
                                                <button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-plus" type="button" perfect-css="button" onclick="ShowQuantityDetails(this)" title="Quantity Details"></button>
                                                <div class="modal fade" perfect-class="formGroupModalQuantity" id="formGroupModalQuantity">
                                                    <div class="modal-dialog modal-dialog-centered " role="document">
                                                        <div class="modal-content  rounded-lg">
                                                            <div class="modal-header border-0">
                                                                <h5 class="modal-title">Quantity Details</h5>
                                                                <button type="button" class="close" data-dismiss="modal" onclick="Clearqtypop(this)">
                                                                    <span>&times;</span>
                                                                </button>
                                                            </div>
                                                            <div class="modal-body" perfect-class="formGroup" style="max-height: calc(100vh - 200px); overflow-y: auto;padding: 1rem;">
                                                                <div class="form-row">
                                                                    <div class="col-sm-12">
                                                                        <div class="form-group row" perfect-class="formGroup">
                                                                            <label class="col-sm-5 col-form-label">
                                                                                <span perfect-class="formGroupLabel"> Shortage</span>
                                                                            </label>
                                                                            <div class="col-sm-6">
                                                                                <input type="text" class="form-control text-right" perfect-tempTable-Purchase="PpdShortage" name="PpdShortage" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" id="PpdShortage" oninput="decimalpnt(this,'PpdShortage',4)" min="0" maxlength="13" />
                                                                                <div class="text-danger temptableError"></div>
                                                                            </div>

                                                                        </div>
                                                                    </div>
                                                                    <div class="col-sm-12">
                                                                        <div class="form-group row" perfect-class="formGroup">
                                                                            <label class="col-sm-5 col-form-label">
                                                                                <span perfect-class="formGroupLabel"> Free</span>
                                                                            </label>
                                                                            <div class="col-sm-6">
                                                                                <input type="text" class="form-control text-right" perfect-tempTable-Purchase="PpdFreeQuantity" name="PpdFreeQuantity" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" id="PpdFreeQuantity" oninput="decimalpnt(this,'PpdFreeQuantity',4)" min="0" maxlength="13" />
                                                                            </div>
                                                                            <div class="text-danger temptableError"></div>
                                                                        </div>
                                                                    </div>
                                                                    <div class="col-sm-12">
                                                                        <div class="form-group row" perfect-class="formGroup">
                                                                            <label class="col-sm-5 col-form-label">
                                                                                <span perfect-class="formGroupLabel"> Less Quantity</span>
                                                                            </label>
                                                                            <div class="col-sm-6">
                                                                                <input type="text" class="form-control text-right" perfect-tempTable-Purchase="Ppdless" name="Ppdless" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" id="Ppdless" oninput="decimalpnt(this,'Ppdless',4)" min="0" maxlength="13" />
                                                                                <div class="text-danger temptableError"></div>
                                                                            </div>

                                                                        </div>
                                                                    </div>

                                                                </div>
                                                                <div class="modal-footer">
                                                                    <button type="button" class="btn btn-primary1" perfect-css="button" onclick="BindQuantityDetails(this)" name="reset">Apply</button>
                                                                    <button type="button" id="clearquantity" class="btn btn-light1" perfect-css="button" name="reset" onclick="ClearQuantity(this)">Clear</button>
                                                                </div>
                                                                <div class="col-md-12 mt-3" perfect-class="formGroupModalQuantitybody">


                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="modal-footer border-0"></div>
                                                </div>
                                            </div>
                                        </div>
                                        <span class="temptableError"></span>
                                    </div>
                                </div>
                            </div>

                            <div class="col-sm-3">
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-4 col-form-label">
                                        <span perfect-class="formGroupLabel">Act.Qty</span>
                                        <span class="text-danger">*</span>
                                    </label>
                                    <div class="col-sm-8">
                                        <input type="number" class="form-control text-right" perfect-tempTable-Purchase="PpdActualQuantity" name="PpdActualQuantity" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled />
                                    </div>
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-4 col-form-label">
                                        <span perfect-class="formGroupLabel">Pur.Rate</span>
                                        <span class="text-danger">*</span>
                                    </label>
                                    <div class="col-sm-8">
                                        <div class="input-group">
                                            <input type="text" class="form-control text-right" perfect-tempTable-Purchase="Pur.Rate" name="PpdRate" id="PpdRate" oninput="decimalpnt(this,'PpdRate',3)" onchange="BindNetAmount(this),ShowTax(this,0),PurchaseDiscount(this,1,5)" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" min="0" maxlength="12" />
                                            <div class="input-group-append">
                                                <button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-plus" type="button" perfect-css="button" onclick="ShowPurchaserateDetails(this)" title="Purchase Discount Details"></button>
                                                <div class="modal fade" perfect-class="formGroupModalPurchaserate" id="formGroupModalPurchaserate">
                                                    <div class="modal-dialog modal-dialog-centered " role="document">
                                                        <div class="modal-content  rounded-lg">
                                                            <div class="modal-header border-0">
                                                                <h5 class="modal-title">Purchase Discount Details</h5>
                                                                <button type="button" class="close" data-dismiss="modal" onclick="cleardiscountpopup(this)">
                                                                    <span>&times;</span>
                                                                </button>
                                                            </div>
                                                            <div class="modal-body" perfect-class="formGroup" style="max-height: calc(100vh - 200px); overflow-y: auto;padding: 1rem;">
                                                                <div class="form-row">

                                                                    <div class="col-sm-12">
                                                                        <div class="form-group row" perfect-class="formGroup">
                                                                            <label class="col-sm-5 col-form-label">
                                                                                <span perfect-class="formGroupLabel"> Discount %</span>
                                                                            </label>
                                                                            <div class="col-sm-6">
                                                                                <input type="text" class="form-control text-right" perfect-tempTable-Purchase="PpdpurDiscper" name="PpdpurDiscper" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" onchange="PurchaseDiscount(this,1)" oninput="minmax(0,100,this,3)" onkeypress="return isNumberKey(event)" />
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                    <div class="col-sm-12">
                                                                        <div class="form-group row" perfect-class="formGroup">
                                                                            <label class="col-sm-5 col-form-label">
                                                                                <span perfect-class="formGroupLabel"> Discount</span>
                                                                            </label>
                                                                            <div class="col-sm-6">
                                                                                <input type="text" class="form-control text-right" perfect-tempTable-Purchase="PpdpurDis" name="PpdpurDis"id="PpdpurDis" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" onchange="PurchaseDiscount(this,2)" oninput="decimalpnt(this,'PpdpurDis',3)" min="0" maxlength="12" />
                                                                                <div class="text-danger temptableError"></div>
                                                                            </div>

                                                                        </div>
                                                                    </div>
                                                                    <div class="col-sm-12">
                                                                        <div class="form-group row" perfect-class="formGroup">
                                                                            <label class="col-sm-5 col-form-label">
                                                                                <span perfect-class="formGroupLabel"></span>

                                                                            </label>
                                                                            <div class="col-sm-6 ">
                                                                                <button type="button" class="btn btn-primary1" perfect-css="button" data-dismiss="modal" onclick="BindpurchaseDetails(this)" name="reset">Apply</button>
                                                                                <button type="button" class="btn btn-light1" perfect-css="button" onclick="cleardiscount(this)" name="reset">Clear</button>
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                </div>

                                                                <div class="col-md-12 mt-1" perfect-class="formGroupModalPurchaseratebody">



                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        <span class="temptableError"></span>

                                    </div>
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-4 col-form-label">
                                        <span perfect-class="formGroupLabel">Tax </span>
                                        <span class="text-danger">*</span>
                                    </label>
                                    <div class="col-sm-8">
                                        <div class="input-group">
                                            <input type="number" class="form-control text-right" perfect-tempTable-Purchase="TaxAmount" placeholder="" name="TaxAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled />
                                            @*<input type="hidden" name="ProductID" perfect-tempTable-Purchase="ProductID" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />*@
                                            <div class="input-group-append">
                                                <button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="checkpurrateTax(this)"></button>
                                                <div class="modal fade" perfect-class="formGroupModalTax" id="formGroupModalTax">
                                                    <div class="modal-dialog modal-dialog-centered" role="document">
                                                        <div class="modal-content  rounded-0">
                                                            <div class="modal-header border-0">
                                                                <h5 class="modal-title">Tax Details</h5>
                                                                <button type="button" class="close" data-dismiss="modal">
                                                                    <span>&times;</span>
                                                                </button>
                                                            </div>
                                                            @*<div class="table-responsive" style="max-height: 100%; height: 80%; overflow: auto;">*@
                                                            <table id="zero_config" class="table mb-0  table-striped  text-black">
                                                                <thead class="bg-primary text-white">
                                                                    <tr>
                                                                        <th class="t-head">Sl No</th>
                                                                        <th class="t-head" style="Display:none">ProductID</th>
                                                                        <th class="t-head" style="Display:none">FK_TaxType</th>
                                                                        <th class="t-head">TaxType</th>
                                                                        <th class="t-head">Percentage</th>
                                                                        <th class="t-head">Amount</th>
                                                                        @*<th class="t-head" style="Display:none">ProductID</th>*@




                                                                    </tr>
                                                                </thead>
                                                                <tbody class="modal-body" id="formGroupModalTaxbody"></tbody>
                                                                <tfoot>
                                                                </tfoot>
                                                            </table>
                                                            @*</div>*@
                                                            @*<div class="modal-body" id="formGroupModalTaxbody">
                                                                </div>*@
                                                            <div class="modal-footer">
                                                                @*<button type="button" onclick="CreateProductCheckDescription(this);" class="btn btn-primary">Add</button>*@
                                                                <button type="button" class="btn btn-primary1" data-dismiss="modal" onclick="BindTaxAmount(this)">Ok</button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <span class="temptableError"></span>
                                        <div class="col-sm-8 ml-2">
                                            <input type="checkbox" class="form-check-input" name="IncludeTax" id="taxinclude" perfect-class="formCheckInput" perfect-tempTable-Purchase="IncludeTax" perfect-ctype="checkbox" perfect-css="checkbox" onchange="checkpurTaxInclude(this)"><span perfect-class="formCheckInputText">Include Tax</span>

                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-4 col-form-label">
                                        <span perfect-class="formGroupLabel">Total Rate</span>
                                        <span class="text-danger">*</span>
                                    </label>
                                    <div class="col-sm-8">
                                        <input type="text" class="form-control text-right" id="NETPurchase" perfect-tempTable-Purchase="PpdRate" oninput="decimalpnt(this,'NETPurchase',3)" onchange="CalculateRate(this),TaxchangeonNetpurchase(this)" name="NetPurchase" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled min="0" maxlength="12">
                                    </div>
                                </div>
                                <span class="temptableError"></span>
                            </div>

                            <div class="col-sm-3">
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-4 col-form-label">
                                        <span perfect-class="formGroupLabel">MRP</span>

                                    </label>
                                    <div class="col-sm-8">
                                        <input type="text" class="form-control text-right" perfect-tempTable-Purchase="MRP" id="MRP" name="MRP" perfect-class="formGroupControl" perfect-ctype="input" oninput="decimalpnt(this,'MRP',3)" perfect-css="input" min="0" maxlength="12" onchange="saleprice(this)" />
                                        <span class="temptableError"></span>
                                    </div>
                                </div>
                            </div>
                            @*<div class="col-sm-3">
                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-4 col-form-label">
                                            <span perfect-class="formGroupLabel">Sal.Price</span>

                                        </label>
                                        <div class="col-sm-8">
                                            <input type="number" class="form-control text-right" perfect-tempTable-Purchase="SalPrice" name="SalPrice" oninput="saleprice(this),Discountcalculation(this)" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" min="0" />
                                            <span class="temptableError"></span>
                                        </div>
                                    </div>
                                </div>*@@*DivSaleOthers*@
                                <div class="col-sm-3 ">
                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-4 col-form-label">
                                            <span perfect-class="formGroupLabel">Sal.Price</span>
                                            @*<span class="text-danger">*</span>*@
                                        </label>
                                        <div class="col-sm-8">
                                            <div class="input-group">

                                                <input type="text" class="form-control text-right" perfect-tempTable-Purchase="SalPrice" id="SalPrice" name="SalPrice" oninput="Discountcalculation(this,1,6),decimalpnt(this,'SalPrice',3)" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" min="0" maxlength="12" onchange="saleprice(this)" />
                                                <div class="input-group-append">
                                                    <button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-plus" type="button" perfect-css="button" onclick="ShowDiscDetails(this)" title="Sale Details"></button>
                                                    <div class="modal fade" perfect-class="formGroupModalDisc" id="formGroupModalDiscs">
                                                        <div class="modal-dialog modal-dialog-centered" role="document">
                                                            <div class="modal-content  rounded-1">
                                                                <div class="modal-header border-0">
                                                                    <h5 class="modal-title">Sales Details</h5>
                                                                    <button type="button" class="close" data-dismiss="modal" onclick="ClearsaleDiscountpopup(this)">
                                                                        <span>&times;</span>
                                                                    </button>
                                                                </div>
                                                                <div class="modal-body" perfect-class="formGroup" style="max-height: calc(100vh - 200px); overflow-y: auto;padding: 1rem;">
                                                                    <div class="form-row">
                                                                        <div class="col-sm-12">
                                                                            <div class="form-group row" perfect-class="formGroup">
                                                                                <label class="col-sm-5 col-form-label">
                                                                                    <span perfect-class="formGroupLabel">Sales Discount %</span>

                                                                                </label>
                                                                                <div class="col-sm-6">
                                                                                    <input type="text" class="form-control text-right" perfect-tempTable-Purchase="PpdDisper" name="PpdDisper" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" onchange="Discountcalculation(this,1)" oninput="minmax(0,100,this,3)" onkeypress="return isNumberKey(event)" />
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                        <div class="col-sm-12">
                                                                            <div class="form-group row" perfect-class="formGroup">
                                                                                <label class="col-sm-5 col-form-label">
                                                                                    <span perfect-class="formGroupLabel">Sales Discount Amount</span>

                                                                                </label>
                                                                                <div class="col-sm-6">
                                                                                    <input type="text" class="form-control text-right" perfect-tempTable-Purchase="PpdDiscount" name="PpdDiscount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" onchange="Discountcalculation(this,2)" oninput="decimalpnt(this,'PpdDiscount',3)" min="0" onkeypress="return isNumberKey(event)" maxlength="12" />
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                        <div class="col-sm-12">
                                                                            <div class="form-group row" perfect-class="formGroup">
                                                                                <label class="col-sm-5 col-form-label">
                                                                                    <span perfect-class="formGroupLabel">Prof%</span>

                                                                                </label>
                                                                                <div class="col-sm-6">
                                                                                    <input type="number" class="form-control text-right" perfect-tempTable-Purchase="PpdProPer" name="PpdProPer" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="Discountcalculation(this,3)" min="0" disabled />
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                        <div class="col-sm-12">
                                                                            <div class="form-group row" perfect-class="formGroup">
                                                                                <label class="col-sm-5 col-form-label">
                                                                                    <span perfect-class="formGroupLabel">ProAmnt</span>

                                                                                </label>
                                                                                <div class="col-sm-6">
                                                                                    <input type="number" class="form-control text-right" perfect-tempTable-Purchase="PpdProAmnt" name="PpdProAmnt" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="Discountcalculation(this,4)" min="0" disabled />
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                        <div class="col-sm-12 ">
                                                                            <div class="form-group row" perfect-class="formGroup">
                                                                                <label class="col-sm-5 col-form-label">
                                                                                    <span perfect-class="formGroupLabel"></span>

                                                                                </label>
                                                                                <div class="col-sm-6 ">
                                                                                    @*<button type="button" class="btn btn-danger light mr-3" onclick="BindQuantityDetails(this)" name="reset">ADD</button>*@
                                                                                    <button type="button" class="btn btn-primary1" data-dismiss="modal" onclick="BindSaleDiscount(this)">Apply</button>
                                                                                    <button type="button" class="btn btn-light1" perfect-css="button" name="reset" onclick="ClearsaleDiscount(this)">Clear</button>
                                                                                </div>
                                                                            </div>
                                                                        </div>

                                                                    </div>
                                                                    <div class="col-md-12 mt-3" perfect-class="formGroupModalDiscbody">


                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <span class="temptableError"></span>
                                        </div>
                                        @*<div class="col-sm-3">

                                                <div class="input-group">
                                                    <button type="button" class="btn btn-primary" onclick="AddPurchaseDetails(this,'Purchase',['ProductID'],['Unit','TaxAmount','UnitID','PpdBarCode','PpdQRCode','PpdShortage','Ppdless','PpdFreeQuantity','PpdDisper','PpdDiscount','PpdProPer','PpdProAmnt'])" data-placement="top" data-html="true" title="Add Product Details">ADD</button>
                                                </div>
                                            </div>
                                            <div class="col-sm-3">

                                                <div class="input-group">
                                                    <button type="button" id="reset" class="btn btn-light" perfect-css="button" onclick="ResetButtontable(this)" name="reset">Clear</button>
                                                </div>
                                            </div>*@
                                    </div>

                                </div>
                                <div class="col-sm-3">
                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-4 col-form-label">
                                            <span perfect-class="formGroupLabel">Expiry date</span>

                                        </label>
                                        <div class="col-sm-8">
                                            <input type="date" class="form-control" perfect-tempTable-Purchase="ExpiryDate" name="ExpiryDate" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" max="2050-01-01" />
                                            <span class="temptableError"></span>

                                        </div>


                                    </div>

                                </div>
                                <div class="col-sm-3">
                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-4 col-form-label">
                                            <span perfect-class="formGroupLabel">Description</span>
                                            @*<span class="text-danger">*</span>*@
                                        </label>
                                        <div class="col-sm-8">

                                            <input type="text" class="form-control" perfect-tempTable-Purchase="Description" placeholder="" name="Description" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" maxlength="150" onkeypress="filterSpecialCharacters(event)" />
                                            @*<input type="hidden" name="PurchaseID" class="form-control" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />*@
                                            @*<input type="hidden" name="LastID" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />*@
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-4 col-form-label">
                                            <span perfect-class="formGroupLabel">Batch No</span>

                                        </label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control" perfect-tempTable-Purchase="PpdBatchNo" name="PpdBatchNo" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" maxlength="20" onkeypress="filterSpecialCharacters(event)" />
                                        </div>
                                    </div>
                                    <span class="temptableError"></span>
                                </div>
                                @*<div class="col-sm-3">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label"></label>
                                            <div class="col-sm-8">

                                            </div>
                                        </div>
                                    </div>*@
                                <div class="col-sm-3">
                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-4 col-form-label"></label>
                                        <div class="col-sm-8">

                                        </div>
                                    </div>
                                </div>
                                @*<div class="col-sm-3">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label"></label>
                                            <div class="col-sm-8">

                                            </div>
                                        </div>
                                    </div>*@

                                <div class="col-sm-3">
                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-4 col-form-label"></label>
                                        <div class="col-sm-8">
                                            @*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*@
                                            <button type="button" id="purtupsave" class="btn btn-primary1" onclick="AddPurchaseDetails(this,'Purchase',['ProductID'],['Unit','TaxAmount','UnitID','UnitCountS','PpdBarCode','PpdQRCode','PpdShortage','Quantity','PpdShortage','Ppdless','PpdFreeQuantity','PpdActualQuantity','Pur.Rate','PpdpurDiscper','PpdpurDis','PpdRate','TaxAmount','MRP','SalPrice','PpdDisper','PpdDiscount','PpdProPer','PpdProAmnt','Description','PpdBatchNo'])" data-placement="top" data-html="true" title="Add Product Details"><i class="fa fa-plus" aria-hidden="true"></i></button>
                                            @*<button type="button" id="purtupdate" class="btn btn-primary1" onclick="AddPurchaseDetails(this,'Purchase',['ProductID'],['Unit','TaxAmount','UnitID','UnitCountS','PpdBarCode','PpdQRCode','PpdShortage','Quantity','PpdShortage','Ppdless','PpdFreeQuantity','PpdActualQuantity','Pur.Rate','PpdpurDiscper','PpdpurDis','PpdRate','TaxAmount','MRP','SalPrice','PpdDisper','PpdDiscount','PpdProPer','PpdProAmnt'])" data-placement="top" data-html="true" title="Add Product Details">Add</button>*@
                                            <button type="button" id="purreset" class="btn btn-light1" perfect-css="button" onclick="productclear(this,'Purchase')" name="reset" title="Reset"><i class="fa fa-refresh" aria-hidden="true"></i></button>
                                            <input type="hidden" min="0" class="form-control text-right" perfect-tempTable-Purchase="UID" name="UID" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-10">

                                </div>

                                @*<div class="col-sm-2">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">&nbsp;</label>
                                            <div class="col-sm-8">
                                                <button type="button" class="btn btn-primary1" onclick="AddPurchaseDetails(this,'Purchase',['ProductID'],['Unit','TaxAmount','UnitID','UnitCountS','PpdBarCode','PpdQRCode','PpdShortage','Quantity','PpdShortage','Ppdless','PpdFreeQuantity','PpdActualQuantity','Pur.Rate','PpdpurDiscper','PpdpurDis','PpdRate','TaxAmount','MRP','SalPrice','PpdDisper','PpdDiscount','PpdProPer','PpdProAmnt'])" data-placement="top" data-html="true" title="Add Product Details">Add</button>
                                                <button type="button" id="reset" class="btn btn-light1" perfect-css="button" onclick="ResetButtontable(this)" name="reset">Clear</button>
                                                <input type="number" min="0" class="form-control text-right" perfect-tempTable-Purchase="UID" name="UID" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                                            </div>
                                        </div>
                                    </div>*@

                            </div>





                            <div class="row">


                                @*<div class="media ai-icon">
                                        <span class=" bgl-danger text-danger">

                                            <i class="fa fa-plus-circle "></i>
                                            <!-- <svg id="icon-revenue" xmlns="http://www.w3.org/2000/svg" width="30" height="30" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-dollar-sign">
                                            <line x1="12" y1="1" x2="12" y2="23"></line>
                                            <path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"></path>
                                            </svg> -->
                                        </span>
                                    </div>*@



                                <div class="col-sm-3" style="Display:none">
                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-4 col-form-label">
                                            <span perfect-class="formGroupLabel">Sub Product</span>

                                        </label>
                                        <div class="col-sm-8">
                                            <input type="number" class="form-control" placeholder="" name="ProdMaxLevel" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                                        </div>
                                    </div>
                                </div>

                                <div class="col-sm-12">
                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-4 col-form-label">
                                            <span perfect-class="formGroupLabel"></span>

                                        </label>
                                        <div class="col-sm-12">
                                            <input type="hidden" name="customerIndex" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="hidden" perfect-tempTable-Purchase="Sl No" value="" />

                                            <div class="table-responsive tableFixHead" perfect-tempTable="Purchase" id="Purchasedetailshead" perfect-tempTable-lastindex="0" perfect-tempTable-action="0"></div>
                                        </div>
                                    </div>
                                </div>


                            </div>
                            @*</div>*@
                        </div>

                    </div>
                    <hr />
                    @*<div class="profile-personal-info">*@
                    <div class="row">
                        <div class="col-sm-12">

                            @*<h4 class="text-primary ">Other Details</h4>*@
                            <div class="row">
                                <div class="col-sm-4">
                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-4 col-form-label">
                                            <span perfect-class="formGroupLabel">Bill Total</span>

                                        </label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control text-right" name="BillTotal" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled />
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-4">
                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-4 col-form-label">
                                            <span perfect-class="formGroupLabel">Other Charge</span>

                                        </label>
                                        <div class="col-sm-8">
                                            <div class="input-group">
                                                <input type="text" class="form-control text-right" name="OtherCharge" perfect-class="formGroupControl" perfect-ctype="input" id="OtherChargePurchase" onchange="RoundOffCalc(this);"  perfect-css="input" readonly />
                                                <div class="input-group-append">
                                                    @*<button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-credit-card" type="button" perfect-css="button" onclick="ShowOtherCharges(this)"></button>*@
                                                    <button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-credit-card" type="button" perfect-css="button" onclick="fn_showOtherCharges(PurchaseTransMode, Purchaseid, 'OtherChargePurchase')"></button>

                                                    <div class="modal fade" perfect-class="formGroupModalOtherCharge" id="formGroupModalOtherCharge">
                                                        <div class="modal-dialog modal-dialog-centered" role="document">
                                                            <div class="modal-content  rounded-0">
                                                                <div class="modal-header border-0">
                                                                    <h5 class="modal-title">Other Charge Details</h5>
                                                                    <button type="button" class="close" data-dismiss="modal">
                                                                        <span>&times;</span>
                                                                    </button>
                                                                </div>
                                                                <div class="modal-body" perfect-class="formGroup" style="max-height: calc(100vh - 200px); overflow-y: auto;padding: 1rem;">
                                                                    @*<div class="table-responsive" style="max-height: 100%; height: 80%; overflow: auto;">*@
                                                                    <table id="zero_configOthercharge" class="table mb-0  table-striped  text-black">
                                                                        <thead class="bg-primary text-white">
                                                                            <tr>
                                                                                <th class="t-head">Sl No</th>
                                                                                <th class="t-head" style="display:none">ID_OtherChargeType</th>
                                                                                <th class="t-head">Type</th>
                                                                                <th class="t-head">Trans Type</th>
                                                                                <th class="t-head" style="text-align:right">Amount</th>

                                                                            </tr>
                                                                        </thead>
                                                                        <tbody id="formGroupModalOtherChargebody"></tbody>
                                                                        <tfoot>
                                                                        </tfoot>
                                                                    </table>
                                                                    @*</div>*@
                                                                    @*<div class="modal-body" id="formGroupModalTaxbody">
                                                                        </div>*@
                                                                    <div class="modal-footer">
                                                                        @*<button type="button" onclick="CreateProductCheckDescription(this);" class="btn btn-primary">Add</button>*@
                                                                        <button type="button" class="btn btn-primary1" data-dismiss="modal" onclick="BindOtherChargeAmount(this)">Apply</button>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-4">
                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-4 col-form-label">
                                            <span perfect-class="formGroupLabel text-right">Discount Amt/Perc</span>

                                        </label>
                                        <div class="col-sm-8">
                                            <div class="input-group">
                                                <input type="text" class="form-control text-right " placeholder="" name="Discount" id="Discount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" maxlength="13" onchange="PurchaseNetDiscount(this, 2);RoundOffCalc(this);" @*onkeyup="PurchaseNetDiscount(this, 2);"*@ oninput="decimalpnt(this,'Discount',3)" onkeypress="return isNumberKey(event)" />
                                                <input type="text" class="form-control text-right " placeholder="" name="DiscountPerc" id="DiscountPerc" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" maxlength="13" onchange="PurchaseNetDiscount(this, 1);RoundOffCalc(this);" @*onkeyup="PurchaseNetDiscount(this, 1);"*@ oninput="minmax(0,100,this,3)" @*oninput="decimalpnt(this,'DiscountPerc',3)"*@ onkeypress="return isNumberKey(event)" />
                                            </div>
                                        </div>

                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-4">
                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-4 col-form-label">
                                            <span perfect-class="formGroupLabel">Round Off</span>

                                        </label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control text-right" placeholder="" name="RoundOff" onchange="RoundOffCalcTotal(this);" oninput="minmax(0,100,this,3)" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-4 DivAdvanceAmount">
                                    <div class="form-group row " perfect-class="formGroup">
                                        <label class="col-sm-4 col-form-label">
                                            <span perfect-class="formGroupLabel">Advance Amount</span>
                                        </label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control text-right" placeholder="" name="AdvanceAmount" onchange="RoundOffCalcTotal(this)" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly />
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-4">
                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-4 col-form-label">
                                            <span perfect-class="formGroupLabel">Net Amount</span>

                                        </label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control text-right perfectValidate_string" placeholder="" name="NetAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" min="0" readonly />
                                            <label class="col-sm-12 col-form-label" id="lbAmountWords">
                                                @*<span perfect-class="formGroupLabel"></span>*@

                                            </label>
                                        </div>
                                    </div>
                                </div>

                            </div>
                        </div>
                    </div>

                </div>
                <div class="card-footer text-right" perfect-class="formFooter">
                    <button id="pupdate" type="button" class="btn btn-primary mr-3 addcompany-jq-addnewuserUpdate d-none" name="update" perfect-css="button" onclick="fn_PurchaseForm_update(this)"><i class="fa fa-refresh fa-spin loaderClass"></i>Update</button>
                    <button id="addcompany-jq-addnewuser" type="button" class="btn btn-primary mr-3 " name="add" perfect-css="button" onclick="fn_PurchaseForm_add(this)"><i class="fa fa-refresh fa-spin loaderClass "></i>Save</button>
                    <button type="button" id="" class="btn btn-light" perfect-css="button" onclick="ResetButtons(this)" name="reset">Clear</button>
                </div>
            </form>
            <div class="md-2 modal fade" perfect-class="formGroupModalcustmrformGroupModalcustmr" id="formGroupModalcustmr">
                <div class="modal-dialog modal-dialog-centered modal-xl" role="document">
                    <div class="modal-content">
                        <div class="modal-header border-0">
                            <h5 class="modal-title">Add Supplier</h5>
                            <button type="button" class="close" data-dismiss="modal">
                                <span>&times;</span>
                            </button>
                        </div>
                        <div class="modal-body" perfect-class="formGroup" style="max-height: calc(100vh - 200px); overflow-y: auto;padding: 1rem;">
                            <div class="row">

                                <div class="col-sm-12" id="custmr-sav">

                                </div>


                            </div>

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    @*<script src="~/Scripts/jqDOM/searchDOMCreation.js"></script>*@
    <script>

    //on load functions
    $(document).ready(function () {
        let $thisForm = $('[perfect-class="form"]');
        initFunctions('form');
        $('.DivSaleOthers').hide();
        //$('.DivAdvanceAmount').hide();
        $thisForm.find('[name="FK_BranchCodePur"]').val(FK_BranchCodePur);


    });


    function Clearqtypop(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');

        $thisForm.find('[name="PpdShortage"]').val('');
        $thisForm.find('[name="PpdFreeQuantity"]').val('');
        $thisForm.find('[name="Ppdless"]').val('');
        let $thissForm = $(ele).find('[perfect-class="form"]');
        let Qttydata = $thissForm.data('quantitydata');
        //alert(Qttydata)
        if (Qttydata != undefined) {


            if (Qttydata != '') {

                $.each(Qttydata, function (key, value1) {
                    $thissForm.find('[name=PpdShortage]').val(value1.PpdShortage);
                    $thissForm.find('[name=Ppdless]').val(value1.Ppdless);
                    $thissForm.find('[name=PpdFreeQuantity]').val(value1.PpdFreeQuantity);
                });
            }
        }
    }


    function blockSpecialChar(e) {
        var k;
        document.all ? k = e.keyCode : k = e.which;
        return ((k > 64 && k < 91) || (k > 96 && k < 123) || k == 8 || k == 32 || (k >= 48 && k <= 57) ||k>=96 && k<=105);
    }
    function blockSpecificSpecialChar(e) {

        var keyCode = e.which || e.keyCode;
        // Prevent space at the beginning

        // Prevent space if the first character is a space (trimming leading space)
        if ((keyCode === 32) || (keyCode === 36)) {
            e.preventDefault();
        }
     else if (e.key === '|') {
            e.preventDefault();
                                }
     }
    function ResetButtons(ele) {


        let $thisForm = $(ele).closest('[perfect-class="form"]');

        $thisForm.find('[perfect-ctype="select"]').val('').selectpicker('refresh');
        $thisForm.find('[perfect-ctype="input"]').val('');
        $thisForm.find('[perfect-ctype="hidden"]').val('');
        $thisForm.find('[perfect-ctype="digit"]').val('');
        $thisForm.find('[name="InvoiceDate"]').val(moment().format('YYYY-MM-DD'));
        Getdepartmentdefault();

        tax = [];
        othrchargelst = [];
        OtherCharge = [];

        let pDatas = $thisForm.data('pDatas');
        let pPurchaseproduct = $thisForm.data('pPurchaseproduct');
        console.log('pPurchaseproduct>', pPurchaseproduct);
        let purDatas = $thisForm.data('purDatas');
        console.log('purDatas>', purDatas);
        if (pDatas) {

            //$thisForm.find('[name="InvoiceDate"]').val(pDatas.PurInvoiceNo);
            if (pDatas.FK_PurchaseOrder > 0) {
                $('.DivAdvanceAmount').show();
                $thisForm.find('[name="Supplier"]').val(2).selectpicker('refresh');
                $thisForm.find('[name="AdvanceAmount"]').val(pDatas.PurAdvAmount.toFixed(2));
            }
            else {
                $('.DivAdvanceAmount').hide();
                $thisForm.find('[name="Supplier"]').val(1).selectpicker('refresh');
                $thisForm.find('[name="AdvanceAmount"]').val('');
            }
            $thisForm.find('[name="PurchaseID"]').val(pDatas.ID_Purchase);
            $thisForm.find('[name="SupplierName"]').val(pDatas.SuppName);
            $thisForm.find('[name="SupplierID"]').val(pDatas.FK_Supplier);
            $thisForm.find('[name="DepartmentID"]').val(pDatas.FK_Department);
            $thisForm.find('[name="DepartmentName"]').val(pDatas.DeptName);
            $thisForm.find('[name="InvoiceNo"]').val(pDatas.PurInvoiceNo);
            $thisForm.find('[name="InvoiceDate"]').val(moment(pDatas.PurInvoiceDateSel).format('YYYY-MM-DD'));
            $thisForm.find('[name="OtherCharge"]').val(pDatas.PurOtherCharge.toFixed(2));
            $thisForm.find('[name="BillTotal"]').val(pDatas.PurBillTotal.toFixed(2));
            $thisForm.find('[name="Discount"]').val(pDatas.PurDiscount.toFixed(2));
            $thisForm.find('[name="RoundOff"]').val(pDatas.PurRoundOff.toFixed(2));
            $thisForm.find('[name="NetAmount"]').val(pDatas.PurNetAmount.toFixed(2));
            console.log('pPurchaseproduc11', purDatas);

            othrchargelst = $thisForm.data('prtothchgData');
            tax = $thisForm.data('prtTaxData');

            fillTable($thisForm, 'Purchase', purDatas, tableOptionsTempOut);
            //$thisForm.find('[perfect-tempTable="Purchase"]').find('table');
            if (pDatas.ID_Purchase != 0) {

            }

        }
        //$('.DivAdvanceAmount').hide();
        //$thisForm.find('[name="InvoiceDate"]').val(moment().format('YYYY-MM-DD'));



        fn_PurchaseIndex_initialLoad();
        //fn_ProductIndex_initialLoad();
        Purchaseid = 0;
    }

    function cleardiscount(ele)
    {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        $thisForm.find('[name="PpdpurDis"]').val('');
        $thisForm.find('[name="PpdpurDiscper"]').val('');
        $thisForm.data({ pdiscdata: '' });
        BindpurchaseDetails(ele);
    }
    function cleardiscountpopup(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        $thisForm.find('[name="PpdpurDis"]').val('');
        $thisForm.find('[name="PpdpurDiscper"]').val('');

        let Purddata = $thisForm.data('pdiscdata');
        if (Purddata != undefined) {
            if (Purddata != '') {
                $.each(Purddata, function (key, value1) {
                    $thisForm.find('[name=PpdpurDis]').val(value1.PpdpurDis);
                    $thisForm.find('[name=PpdpurDiscper]').val(value1.PpdpurDiscPer);
                });
            }
            else {
                $thisForm.find('[name=PpdpurDis]').val(0);
                $thisForm.find('[name=PpdpurDiscper]').val(0);
            }
        }

    }
    function decimalpnt(ele, name, range) {

        let input = $('#' + name);
        ele.value = ele.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');
        let t = ele.value;
        ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t;
        input.on('keydown', function () {
            if (ele.value.includes('.')) {

            }
            var key = event.keyCode || event.charCode;
            if (key == 8 || key == 46) { }
            else {
                if (ele.value.length == 9) {
                    ele.value = ele.value + '.';
                }
            }

        });

    }

    function minmax(min, max, ele, range) {
        if (min != '' || max != '') {
            let t = ele.value;
            if (parseInt(ele.value) < min || isNaN(parseInt(ele.value))) { ele.value = min; }
            else if (parseInt(ele.value) > max) { ele.value = max; }
            else { ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t; }

        }
    }

    function checkfields(ele)
    {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let ProductID = $thisForm.find('[name="ProductID"]').val();
        let ProName = $thisForm.find('[name="ProName"]').val();
        let UnitID = $thisForm.find('[name="UnitID"]').val();
        let PpdQuantity = $thisForm.find('[name="PpdQuantity"]').val();
        let PpdRate = $thisForm.find('[name="PpdRate"]').val();
        let TaxAmount = $thisForm.find('[name="TaxAmount"]').val();
        let IncludeTax = $thisForm.find('[name="IncludeTax"]').val();

        if (UnitID != 0 && (ProductID == null || ProductID == 0 || ProName == '')) {
            NotificationMessage({ 'type': 'error', 'heading': 'Warning', 'message': "Please Select Product" });
            $thisForm.find('[name="UnitID"]').val('0');
        }
        else
        {
            //fn_selectUnit(this), CalcActualQuantity(this), BindQuantityDetails(this)
           // fn_selectUnit(ele);
             CalcActualQuantity(ele);
            //BindQuantityDetails(ele);
            //BindNetAmount(ele);
        }


    }
    function checkpurrateTax(ele)
    {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let ProductID = $thisForm.find('[name="ProductID"]').val();
        let ProName = $thisForm.find('[name="ProName"]').val();
        let UnitID = $thisForm.find('[name="UnitID"]').val();
        let PpdRate = $thisForm.find('[name="PpdRate"]').val();
        let TaxAmount = $thisForm.find('[name="TaxAmount"]').val();
        let IncludeTax = $thisForm.find('[name="IncludeTax"]').val();
        let PpdQuantity = $thisForm.find('[name="PpdQuantity"]').val();

        if (PpdRate != "" && (PpdQuantity != null || PpdQuantity != '') && (UnitID != null || UnitID != '') && (ProductID != null || ProductID != 0 || ProName != '') )
        {
            ShowTax(ele,1);
        }
        else if ((PpdRate == null || PpdRate == '') && (PpdQuantity == null || PpdQuantity == '') && (UnitID == null || UnitID == '') && (ProductID == null || ProductID == 0 || ProName == '')) {
            NotificationMessage({ 'type': 'error', 'heading': 'Warning', 'message': "Please Select Product" });
        }
        else if ((PpdRate == null || PpdRate == '') && (PpdQuantity == null || PpdQuantity == '') && (UnitID == null || UnitID == '')) {
            NotificationMessage({ 'type': 'error', 'heading': 'Warning', 'message': "Please Select Product" });
        }
        else if ((PpdRate == null || PpdRate == '') && (PpdQuantity == null || PpdQuantity == ''))
        {
            NotificationMessage({ 'type': 'error', 'heading': 'Warning', 'message': "Please Enter Quantity" });
        }
        else if (PpdRate == null || PpdRate == '') {
            NotificationMessage({ 'type': 'error', 'heading': 'Warning', 'message': "Please Enter Purchase Rate" });
        }

    }
    function checkpurTaxInclude(ele)
    {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let PpdRate = $thisForm.find('[name="PpdRate"]').val();
        let PpdQuantity = $thisForm.find('[name="PpdQuantity"]').val();
        let TaxAmount = $thisForm.find('[name="TaxAmount"]').val();
        let IncludeTax = $thisForm.find('[name="IncludeTax"]').val();
        let UnitID = $thisForm.find('[name="UnitID"]').val();
        let ProductID = $thisForm.find('[name="ProductID"]').val();
        let ProName = $thisForm.find('[name="ProName"]').val();
        //debugger
        if (PpdRate != "" && (PpdQuantity != null || PpdQuantity != '') && (UnitID != null || UnitID != '') && (ProductID != null || ProductID != 0 || ProName != ''))
        {

            TaxInclude(ele);
            //Taxdet(ele);
        }
        else if ((PpdRate == null || PpdRate == '') && (PpdQuantity == null || PpdQuantity == '') && (UnitID == null || UnitID == '') && (ProductID == null || ProductID == 0 || ProName == '')) {
            NotificationMessage({ 'type': 'error', 'heading': 'Warning', 'message': "Please Select Product" });
        }
        else if ((PpdRate == null || PpdRate == '') && (PpdQuantity == null || PpdQuantity == '') && (UnitID == 0 || UnitID=='')) {
            $('#taxinclude').not(":checked")
            NotificationMessage({ 'type': 'error', 'heading': 'Warning', 'message': "Please Select Unit" });

        }
        else if ((PpdRate == null || PpdRate == '') && (PpdQuantity == null || PpdQuantity == '')) {
            $('#taxinclude').not(":checked")
            NotificationMessage({ 'type': 'error', 'heading': 'Warning', 'message': "Please Enter Quantity" });

        }
        else if (PpdRate == null || PpdRate=='')
        {
            $('#taxinclude').not(":checked")
            NotificationMessage({ 'type': 'error', 'heading': 'Warning', 'message': "Please Enter Purchase Rate" });
        }

    }

    function fn_supplierForm_loadState_success(ele) {

        $('#formGroupModalcustmr').modal('hide');

    }




    var uval;
    function uniqueId(ele)
    {//debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        vals = $thisForm.find('[name=UID]').val();
        if ($thisForm.find('[name=UID]').val() == null || $thisForm.find('[name=UID]').val() == 0 || $thisForm.find('[name=UID]').val() == '')
        {
            uval = 1;
            $thisForm.find('[name=UID]').val(vals);
        }

        else if ($thisForm.find('[name=UID]').val() >=1)
        {
            vals = $thisForm.find('[name=UID]').val() + 1;
            $thisForm.find('[name=UID]').val(vals)
        }
    }

    function fn_supplierForm_loadState1(ele) {

        let $select = $(ele);

        let $tempModel = createSearchModalDOM().modal;

        $tempModel.find('.modal-title').addClass("d-none");
        $tempModel.show
        $tempModel.find('.modal-dialog').addClass('modal-xl')

        $tempModel.find('.modal-body').load('@Url.Action("LoadSupplierForm", "Supplier")', function () {

                let $thisForm = $(this).find('[perfect-class="form"]');
            $thisForm.attr('perfect-onFormSuccess', 'fn_supplierForm_loadState_success');
               // initFunctions($thisForm);

        });


    }
    function fn_supplierForm_loadState(ele)
            {

      

               $('#formGroupModalcustmr').modal('show');


               let $savimgContainer = $('#custmr-sav');



               $savimgContainer.load('@Url.Action("LoadSupplierForm", "Supplier")', function () {
                   let $thisForm = $(this).find('[perfect-class="form"]');
                   // ... Custom validation message
                   $thisForm.validate({ messages: sdvalidationMessage });
                   // ... Custom validation message
                   $(".SupplierViewListHeader").hide();
                   $thisForm.attr('perfect-onFormSuccess', 'fn_supplierForm_loadState_success');
                 
                   initFunctions($thisForm);
                    //let $thisForm = $(this).find('[perfect-class="form"]');
                    //$thisForm.attr('perfect-onFormSuccess', 'fn_customerForm_loadState_success');
                    //   // initFunctions($thisForm);

                      });
          }


    var sdvalidationMessage = {


        'Name': {
            'required': 'Please Enter Name',
            'maxlength': jQuery.validator.format('Name should be less than {0} characters'),
            // 'specialCharName': 'All Special Character Are not Allowed'


        },
        'Address': {
            'required': 'Please enter Address ',
            'maxlength': jQuery.validator.format('Address 1 should be less than {0} characters'),
            //   'specialCharName': 'All Special Character Are not Allowed'
        },


        'CountryID': {
            'required': 'Please select a Country',
            'digits': 'Invalid Country selected'
        },


        'StatesID': {
            'required': 'Please select a State',
            'digits': 'Invalid State selected'
        },

        'DistrictID': {
            'required': 'Please select a District',
            'digits': 'Invalid District selected'
        },

        'AreaID': {
            'required': 'Please select a Area',
            'digits': 'Invalid Area selected'
        },
        'PlaceID': {
            'required': 'Please select a Place',
            'digits': 'Invalid Place selected'
        },
        'PostID': {
            'required': 'Please select a Post',
            'digits': 'Invalid Post selected'
        },
        'Mobile': {
            'required': 'Please enter  mobile',
            'anyphonenumber': 'Invalid mobile number',
            'minlength': jQuery.validator.format(' Mobile should be more than {0} characters'),
            'maxlength': jQuery.validator.format(' Mobile should be less than {0} characters')
        },


        'ModeID': {
            'required': 'Please select a Mode',
            'digits': 'Invalid Mode selected'
        },
        'ID_SupplierType': {
            'required': 'Please select Supplier Type',
        },
        //'GSTINNo': {
        //    'required': 'Please enter Supplier GSTIN No.',
        //    'digits': 'Invalid Supplier GSTIN No',
        //    'minlength': jQuery.validator.format('Supplier GSTIN No. should be {0} characters'),
        //    'maxlength': jQuery.validator.format('Supplier GSTIN No. should be {0} characters'),
        //},


        'ContactPerson': {
            'required': 'Please enter Contact Person name',
            'maxlength': jQuery.validator.format('Contact Person name should be less than {0} characters'),
            //'specialCharName': 'All Special Character Are not Allowed'
        },
        'Phone': {
            'required': 'Please enter Phone No',
            'maxlength': jQuery.validator.format('Phone name should be less than {0} characters'),
            //'specialCharName': 'All Special Character Are not Allowed'
        },
        'Email': {

            'emailRegex': 'Please Enter Valid Email'
        },
        'AccountHolderName': {
            'required': 'Please enter Account Holder Name ',
            'maxlength': jQuery.validator.format('Account Holder Name  should be less than {0} characters'),
            //   'specialCharName': 'All Special Character Are not Allowed'
        },
        'BankAccount': {
            'required': 'Please enter Account No. ',
            'maxlength': jQuery.validator.format(' Account No. should be less than {0} characters'),
           
        },
        'IFSCCode': {
            'required': 'Please enter IFSC Code ',
            'maxlength': jQuery.validator.format('IFSC Code should be less than {0} characters'),

        },
        'BankName': {
            'required': 'Please enter Bank Name ',
            'maxlength': jQuery.validator.format('Bank Name should be less than {0} characters'),

        },
        
        
    }
    ////


    var cnt = 0;
    var $modal = $('#zero_config');
    var tax = [];

    function Taxdet(ele,Arr) {
        //debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        //let $modal = $thisForm.find('#zero_config');

        let UID = $('[name=UID]').val(cnt);



        $modal.find('tbody').find('tr').each(function () {
            //alert($thisForm.find('[name=ProductID]').val());
            let taxinfo = {};
            taxinfo['UID'] = $('[name=UID]').val();
            taxinfo['ProductID'] = $('[name=ProductID]').val();
            taxinfo['FK_TaxType'] = $(this).find('.jq_taxType_td').text();
            taxinfo['TaxTyName'] = $(this).find('.jq_taxTypeName_td').text();
            taxinfo['TaxPercentage'] = $(this).find('.jq_taxPer_td').text();
            taxinfo['TaxAmount'] = $(this).find('.jq_taxamount_td').find('input').val();
            console.log('taxinfo', taxinfo);



            tax.push(taxinfo);
            //alert('TAX DET')
        });
        console.log('TAX>123', tax);
    }


    function Taxret(ele)
    {

        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');

        let UID = $('[name=UID]').val();


        console.log('TAX>', tax);

        var foundItems = [];
        if (Taxcalled==1) {
            $.each(tax, function (key, value) {
                //debugger

                foundItems = tax.filter(x => x.UID == UID);
                console.log('tax.filter(x => x.UID>', tax.filter(x => x.UID));

                const indexOfObject = tax.findIndex(object => {
                    return object.UID === UID;
                });

                console.log('TAXFINDINDEX>', tax);
                console.log('foundItems length>', foundItems.length);
                console.log('foundItemsDATA>', foundItems);

                tax.splice(indexOfObject, foundItems.length);
                console.log('TAXSPLICED>', tax);
            });

            console.log('TAXFIND>', tax);

            $modal.find('tbody').find('tr').each(function () {
                //alert($thisForm.find('[name=ProductID]').val());
                let taxinfo = {};
                taxinfo['UID'] = $('[name=UID]').val();
                taxinfo['ProductID'] = $('[name=ProductID]').val();
                taxinfo['FK_TaxType'] = $(this).find('.jq_taxType_td').text();
                taxinfo['TaxTyName'] = $(this).find('.jq_taxTypeName_td').text();
                taxinfo['TaxPercentage'] = $(this).find('.jq_taxPer_td').text();
                taxinfo['TaxAmount'] = $(this).find('.jq_taxamount_td').find('input').val();
                console.log('taxinfo', taxinfo);



                tax.push(taxinfo);
                // alert('TAX DET')
            });
            console.log('TAXUPDATEFIND>', tax);

        }
        //foundItems = item;
    }


   function RemoveTaxArray(ele,id)
   {
        //debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');

       let UID = id; /*$('[name=UID]').val();*/

        console.log('TAX>', tax);

        var foundItems = [];

        $.each(tax, function (key, value) {

            foundItems = tax.filter(x => x.UID == UID);
            console.log('tax.filter(x => x.UID>', tax.filter(x => x.UID));

            const indexOfObject = tax.findIndex(object => {
                return object.UID === UID;
            });

            console.log('TAXFINDSSSS>', tax);
            console.log('foundItems length>', foundItems.length);

            tax.splice(indexOfObject, foundItems.length);
        });

        console.log('TAXDELETE>', tax);

   }

    // Function to Add Purchase
    function fn_PurchaseForm_add(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        //debugger
        let upperlimit = $thisForm.find('[name="InvoiceDate"]').val();
        let datevalid = 0;
        isValid = false;
        var enqDate = new Date(upperlimit);
        enqDate.setHours(0, 0, 0, 0)
        var today = new Date();
        today.setHours(0, 0, 0, 0)
        let errorclass = '.temptableErrors';
        if (enqDate > today) {

            console.log('inside limit check if')
            $thisForm.find('[name="InvoiceDate"]').closest('[perfect-class="formGroup"]').find(errorclass).attr("style", "display:block");
            $thisForm.find('[name="InvoiceDate"]').closest('[perfect-class="formGroup"]').find(errorclass).text('Invoice Date should be less than or equal to Todays date');
            isValid = false;
        }
        else {
            $thisForm.find('[name="InvoiceDate"]').closest('[perfect-class="formGroup"]').find(errorclass).attr("style", "display:none");
            $thisForm.find('[name="InvoiceDate"]').closest('[perfect-class="formGroup"]').find(errorclass).text('');
            isValid = true;
        }
        let discount = $thisForm.find('[name=Discount]').val() == "" ? 0 : $thisForm.find('[name=Discount]').val();
        let BillTotal = $thisForm.find('[name=BillTotal]').val() == "" ? "0" : $thisForm.find('[name=BillTotal]').val();


        console.log("is valid", $thisForm.valid());
        //debugger
        if (($thisForm.valid()) && (isValid==true))

        {
            let $thisForm = $(ele).closest('[perfect-class="form"]');


            //let tax = [];

            //$modal.find('tbody').find('tr').each(function () {
            //    //alert($thisForm.find('[name=ProductID]').val());
            //    let taxinfo = {};
            //    taxinfo['UID'] = $('[name=UID]').val();
            //    taxinfo['ProductID'] = $('[name=ProductID]').val();
            //    taxinfo['FK_TaxType'] = $(this).find('.jq_taxType_td').text();
            //    taxinfo['TaxTyName'] = $(this).find('.jq_taxTypeName_td').text();
            //    taxinfo['TaxPercentage'] = $(this).find('.jq_taxPer_td').text();
            //    taxinfo['TaxAmount'] = $(this).find('.jq_taxamount_td').find('input').val();
            //    console.log('taxinfo', taxinfo);



            //    tax.push(taxinfo);
            //    // alert('TAX DET')
            //});
            //console.log('TAXUPDATEFIND>', tax);
            //console.log('taxproduct-', tax)

            let $modal2 = $thisForm.find('#zero_configOthercharge');

            let OtherCharge = [];

            $modal2.find('tbody').find('tr').each(function () {
                //debugger
                let OtChargeinfo = {};
                OtChargeinfo['ID_OtherChargeType'] = $(this).find('.jq_ID_OtherChargeType_td').text();

                OtChargeinfo['OctyTransType'] = $(this).find('.jq_TransType_td').find('select').val();
                OtChargeinfo['OctyName'] = $(this).find('.jq_Type_td').text();
                OtChargeinfo['OctyAmount'] = $(this).find('.jq_OtherChagAmnt_td').find('input').val();
                console.log('OtChargeinfo', OtChargeinfo);

                OtherCharge.push(OtChargeinfo);

            });
            console.log('OtChargeinfo-', OtherCharge)

            let savedData = [];
            $thisForm.find('[perfect-tempTable="Purchase"]').find('tbody').find('tr').each(function () {
                savedData.push($(this).data('pData'));
            })

            console.log('save', savedData)
            console.log('saveTa', tax)
            if (savedData.length > 0) {
                //disable button to avoid multiple clicks
                $(ele).prop('disabled', true);
                let inputData = {

                    __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                    'PurchaseID': 0,
                    'TransMode': PurchaseTransMode,
                    //'BranchID': $thisForm.find('[name="BranchID"]').val(),
                    'SupplierID': $thisForm.find('[name="SupplierID"]').val(),
                    'Statecode': $thisForm.find('[name="Statecode"]').val(),
                    'InvoiceNo': $thisForm.find('[name="InvoiceNo"]').val(),
                    'InvoiceDate': $thisForm.find('[name="InvoiceDate"]').val(),
                    'DepartmentID': $thisForm.find('[name="DepartmentID"]').val(),
                    'BillTotal': $thisForm.find('[name="BillTotal"]').val(),
                    'Discount': $thisForm.find('[name="Discount"]').val(),
                    'PurDiscountPer': $thisForm.find('[name="DiscountPerc"]').val(),
                    'PurOtherCharge': $thisForm.find('[name="OtherCharge"]').val(),
                    'RoundOff': $thisForm.find('[name="RoundOff"]').val(),
                    'NetAmount': $thisForm.find('[name="NetAmount"]').val(),
                    'PurAdvAmount': $thisForm.find('[name="AdvanceAmount"]').val(),
                    'FK_PurchaseOrder': $thisForm.find('[name="FK_PurchaseOrder"]').val(),

                    'PurchaseDetails': savedData,
                    'PTaxDetails': tax,
                    'OtherChgDetails': OtherCharge,
                    'LastID': LastID_Purchase,

                };
                clearSessionValue(LastIDSessionKey);

                $.ajax({
                    url: "@Url.Action("AddNewPurchaseNew", "Purchase")",
                    type: "POST",
                    data: inputData,
                    dataType: "json",
                    contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                    success: function (ajaxOutput) {

                        if (ajaxOutput.Process.IsProcess) {

                            $.each(ajaxOutput.Process.Message, function (key, value) {
                                NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                            });

                            $thisForm.find('[perfect-ctype="select"]').val('').selectpicker('refresh');
                            $thisForm.find('[perfect-ctype="input"]').val('');
                            $thisForm.find('[perfect-ctype="date"]').val('');

                            // Get the value set in form's perfect-onFormSuccess attribute
                            let onSuccess = $thisForm.attr('perfect-onFormSuccess')

                            if (onSuccess) {
                                window[onSuccess]();
                            }
                        }
                        else {
                            $.each(ajaxOutput.Process.Message, function (key, value) {
                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                            });
                        }
                    },
                    complete: function () {
                        $(ele).prop('disabled', false);
                    }

                });
            }
            else {
                $(ele).prop('disabled', false);
                let message = "Add Atleast One Product to List"
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': message });
            }
        }
    }


    // Function to Update Purchase
    function fn_PurchaseForm_update(ele) {
        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        console.log("is valid", $thisForm.valid());

        let upperlimit = $thisForm.find('[name="InvoiceDate"]').val();
        let datevalid = 0;
        var enqDate = new Date(upperlimit);
        enqDate.setHours(0, 0, 0, 0)
        var today = new Date();
        today.setHours(0, 0, 0, 0)
        let errorclass = '.temptableErrors';
        if (enqDate > today) {

            console.log('inside limit check if')
            $thisForm.find('[name="InvoiceDate"]').closest('[perfect-class="formGroup"]').find(errorclass).attr("style", "display:block");
            $thisForm.find('[name="InvoiceDate"]').closest('[perfect-class="formGroup"]').find(errorclass).text('Invoice Date should be less than or equal to Todays date')
            datevalid = 0;
        }
        else {
            $thisForm.find('[name="InvoiceDate"]').closest('[perfect-class="formGroup"]').find(errorclass).attr("style", "display:none");
            $thisForm.find('[name="InvoiceDate"]').closest('[perfect-class="formGroup"]').find(errorclass).text('')
            datevalid = 1;
        }
        //debugger
        if ($thisForm.valid() && datevalid == 1) {


            //let $modal = $thisForm.find('#zero_config');

            //let tax = [];
            //$modal.find('tbody').find('tr').each(function () {
            //    //alert($thisForm.find('[name=ProductID]').val());
            //    let taxinfo = {};
            //    taxinfo['ProductID'] = $thisForm.find('[name=ProductID]').val();
            //    taxinfo['FK_TaxType'] = $(this).find('.jq_taxType_td').text();
            //    taxinfo['TaxTyName'] = $(this).find('.jq_taxTypeName_td').text();
            //    taxinfo['TaxPercentage'] = $(this).find('.jq_taxPer_td').text();
            //    taxinfo['TaxAmount'] = $(this).find('.jq_taxamount_td').find('input').val();
            //    console.log('taxinfo', taxinfo);

            //    tax.push(taxinfo);

            //});
            let $modal2 = $thisForm.find('#zero_configOthercharge');
            othrchargelst;
            let OtherCharge = [];
            if (otherchgcalled == 1) {
                $modal2.find('tbody').find('tr').each(function () {

                    let OtChargeinfo = {};
                    OtChargeinfo['ID_OtherChargeType'] = $(this).find('.jq_ID_OtherChargeType_td').text();

                    OtChargeinfo['OctyTransType'] = $(this).find('.jq_TransType_td').find('select').val();
                    OtChargeinfo['OctyName'] = $(this).find('.jq_Type_td').text();
                    OtChargeinfo['OctyAmount'] = $(this).find('.jq_OtherChagAmnt_td').find('input').val();
                    console.log('OtChargeinfo', OtChargeinfo);

                    OtherCharge.push(OtChargeinfo);

                });
            }
            else {
                OtherCharge = OtherCharge.concat(othrchargelst);
            }
            console.log('OTHER UPD-', OtherCharge);
            console.log('tax-', tax);



            let savedPData = $thisForm.data('pData');
            console.log('saveUp4545', savedPData)
            let TempdData = [];
            $thisForm.find('[perfect-tempTable="Purchase"]').find('tbody').find('tr').each(function () {
                TempdData.push($(this).data('pData'));
            })
            if (TempdData.length > 0) {
                $(ele).prop('disabled', true);
                //debugger
                let inputData = {

                    __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                    'ID_Purchase': $thisForm.find('[name="PurchaseID"]').val(),
                    //'Mode': $thisForm.find('[name="Mode"]').val(),
                    'TransMode': PurchaseTransMode, /*$thisForm.find('[name="TransMode"]').val()*/
                    //'BranchID': $thisForm.find('[name="BranchID"]').val(),
                    'DepartmentID': $thisForm.find('[name="DepartmentID"]').val(),
                    'SupplierID': $thisForm.find('[name="SupplierID"]').val(),
                    'InvoiceNo': $thisForm.find('[name="InvoiceNo"]').val(),
                    'InvoiceDate': $thisForm.find('[name="InvoiceDate"]').val(),
                    'BillTotal': $thisForm.find('[name="BillTotal"]').val(),
                    'Discount': $thisForm.find('[name="Discount"]').val(),
                    'PurDiscountPer': $thisForm.find('[name="DiscountPerc"]').val(),
                    'PurOtherCharge': $thisForm.find('[name="OtherCharge"]').val(),
                    'RoundOff': $thisForm.find('[name="RoundOff"]').val(),
                    'PayableAmount': $thisForm.find('[name="PayableAmount"]').val() || 0,
                    'FK_PurchaseOrder': $thisForm.find('[name="FK_PurchaseOrder"]').val(),
                    'PurAdvAmount': $thisForm.find('[name="AdvanceAmount"]').val(),
                    'NetAmount': $thisForm.find('[name="NetAmount"]').val(),
                    'PurchaseDetails': TempdData,
                    'TaxDetails': tax,
                    'OtherChgDetails': OtherCharge,

                };

                $.ajax({
                    url: "@Url.Action("UpdatePurchaseNew", "Purchase")",
                    type: "POST",
                    data: inputData,
                    dataType: "json",
                    contentType: "application/x-www-form-urlencoded; charset=utf-8",
                    success: function (ajaxOutput) {

                        if (ajaxOutput.Process.IsProcess) {

                            $.each(ajaxOutput.Process.Message, function (key, value) {
                                NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                            });

                            // Get the value set in form's perfect-onFormSuccess attribute
                            let onSuccess = $thisForm.attr('perfect-onFormSuccess');

                            if (onSuccess) {
                                window[onSuccess]();
                            }
                        }
                        else {
                            $.each(ajaxOutput.Process.Message, function (key, value) {
                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                            });
                        }
                    },
                    complete: function () {
                        $(ele).prop('disabled', false);

                    }

                });
            }
            else {
                $(ele).prop('disabled', false);
                let message = "Add Atleast One Product to List"
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': message });
            }
        }

    }
       function BindSupplier(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');

               //console.log("Input data",inputData)

                $.ajax({
                 url: '@Url.Action("GetSupplierList", "Purchase")',//<----- Controller URL : url path in our controller eq: /Home/InsertSampleData or http://localhost:64212/Home/InsertSampleData
                    type: "GET",


                dataType: "json",
                    contentType: "application/x-www-form-urlencoded;charset=utf-8",
                    success: function (ajaxOutput) {//<----- if ajax method executed succesfully,  we get the data passed from controller in this variable  => success: function (variable) {
                       // console.log("Data", data);

                        if (ajaxOutput.Process.IsProcess) {
                            var countryModel = createSelectList({ data: ajaxOutput.Data, hideColumn: ['SupplierID'],settings: {size: 'modal-lg'} });
                            countryModel.then(function (ret) {
                                if (ret) {
                                    console.log('>_ Search button > list click', ret);
                                    $thisForm.find('[name=SupplierID]').val(ret.SupplierID);
                                    $thisForm.find('[name=SupplierName]').val(ret.SupplierName);


                                }
                                else {
                                    console.log(ret);
                                }
                            });
                        }
                        else {
                            $.each(ajaxOutput.Process.Message, function (key, value) {
                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                            });
                        }





                },


            });


    }
    function BindDepartment(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');

               //console.log("Input data",inputData)

                $.ajax({
                 url: '@Url.Action("GetDepartmentList", "Purchase")',//<----- Controller URL : url path in our controller eq: /Home/InsertSampleData or http://localhost:64212/Home/InsertSampleData
                    type: "GET",


                dataType: "json",
                    contentType: "application/x-www-form-urlencoded;charset=utf-8",
                    success: function (ajaxOutput) {//<----- if ajax method executed succesfully,  we get the data passed from controller in this variable  => success: function (variable) {
                       // console.log("Data", data);

                        if (ajaxOutput.Process.IsProcess) {
                            //var countryModel = createSelectList({ data: ajaxOutput.Data, hideColumn: ['DepartmentID'] });
                            //countryModel.then(function (ret) {
                            //    if (ret) {
                            //        console.log('>_ Search button > list click', ret);
                            //        $thisForm.find('[name=DepartmentID]').val(ret.DepartmentID);
                            //        $thisForm.find('[name=DepartmentName]').val(ret.DepartmentName);

                            //    }
                            //    else {
                            //        console.log(ret);
                            //    }
                            //});
                            $thisForm.find('[name=DepartmentID]').val(ajaxOutput.Data[0].DepartmentID);
                            $thisForm.find('[name=DepartmentName]').val(ajaxOutput.Data[0].DepartmentName);
                        }
                        else {
                            $.each(ajaxOutput.Process.Message, function (key, value) {
                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                            });
                        }





                },


            });


    }
    function BindBranch(ele) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');

               //console.log("Input data",inputData)

                $.ajax({
                 url: '@Url.Action("GetBranchList", "Purchase")',//<----- Controller URL : url path in our controller eq: /Home/InsertSampleData or http://localhost:64212/Home/InsertSampleData
                    type: "GET",


                dataType: "json",
                    contentType: "application/x-www-form-urlencoded;charset=utf-8",
                    success: function (ajaxOutput) {//<----- if ajax method executed succesfully,  we get the data passed from controller in this variable  => success: function (variable) {
                       // console.log("Data", data);

                        if (ajaxOutput.Process.IsProcess) {
                           // var countryModel = createSelectList({ data: ajaxOutput.Data, hideColumn: ['BranchID'], settings:{size:"modal-lg"} });
                            //var countryModel = ({ data: ajaxOutput.Data, hideColumn: ['BranchID'], settings: { size: "modal-lg" } });
                            //countryModel.then(function (ret) {
                            //    if (ret) {
                            //        console.log('>_ Search button > list click', ret);
                            //        $thisForm.find('[name=BranchID]').val(ret.BranchID);
                            //        $thisForm.find('[name=BranchName]').val(ret.BranchName);


                            //    }
                            //    else {
                            //        console.log(ret);
                            //    }
                            //});

                            $thisForm.find('[name=BranchID]').val(ajaxOutput.Data[0].BranchID);
                            $thisForm.find('[name=BranchName]').val(ajaxOutput.Data[0].BranchName);
                        }
                        else {
                            $.each(ajaxOutput.Process.Message, function (key, value) {
                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                            });
                        }





                },


            });


    }
    function showItemModal(ele) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');

        $thisForm.find('[name=Name]').val($thisForm.find('[name="ProName"]').val())
        //ProName
        $(ele).closest('[perfect-class="formGroup"]').find('[perfect-class="formGroupModal"]').modal('show');

        searchbtn2(ele);
        //trigger search
       // $(ele).closest('[perfect-class="formGroup"]').find('[perfect-class="formGroupModal"]')
    }
    function searchbtn2(ele) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let searchValue = {
            Name: $thisForm.find('[name=Name]').val(),
            TransMode: $thisForm.find('[name=TransMode]').val()
        };
        console.log('searchValue:', searchValue)
        let $model = $(ele).closest('[perfect-class="formGroup"]').find('[perfect-class="formGroupModal"]');
        $(ele).closest('[perfect-class="formGroup"]').find('[perfect-class="formGroupModal"]').modal('show');
          $.ajax({
            url: '@Url.Action("GetProductList", "Product")',
            type: "POST",

             // data: JSON.stringify(searchValue),
              data:  searchValue,
            dataType: "json",
              contentType: "application/x-www-form-urlencoded; charset=utf-8",
            success: function (successData) {
                console.log('> Search button click success', successData);

                if (successData.Process.IsProcess) {
                    var sss = createSelectListWithSearch({
                        data: successData.Data, element: $model, onlyShowColumn: ["ProdName", "ProdShortName"],
                        renameHeader: { ProdName: "Name", ProdShortName: "ShortName" }
                    });
                    sss.then(function (ret) {
                        if (ret) {
                            console.log('>_ Search button > list click', ret);
                            $thisForm.find('[name=ProductID]').val(ret.ProductID);
                            $thisForm.find('[name=ProName]').focus().val(ret.ProdName);
                            $thisForm.find('[name=UnitID]').focus().val((ret.UnitID.length == 0) ? '' : ret.UnitID).selectpicker('refresh');
                            $thisForm.find('[name=NoOfUnits]').focus().val(ret.NoOfUnits);

                        }
                        else {
                            console.log(ret);
                        }
                    });

                      }
                      else {
                          $.each(successData.Process.Message, function (key, value) {
                              //toastr.warning(value, "Error");
                              NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                          });
                      }




                  },
                  complete: function () {

                      //a.find('.dataTables_wrapper').css('width', '100%');
                  }
              });
    }
    function getfunctionAssign(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
       //let prodid= $thisForm.find('[name=ProductID]').focus().val(ret.NoOfUnits);
        let PurRate = $thisForm.find('[name=PpdRate]').val() == "" ? "0" : $thisForm.find('[name=PpdRate]').val();
        CheckProductExist(ele, 'Purchase', ['ProductID','ProName']);
        Getproductunit(ele);
        GetProductTopRate(ele);
        //BindNetAmount(ele);
        if (PurRate > 0) {
            BindTaxDetails("1", 'formGroupModalTax', ele, 0);
            }



    }




    function GetProductTopRate(ele) {

           let $thisForm = $(ele).closest('[perfect-class="form"]');
         let productdetails = {
             __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
             'ProductID': $thisForm.find('[name="ProductID"]').val(),
             'DepartmentID': $thisForm.find('[name="DepartmentID"]').val(),


        };
          $.ajax({
          url: '@Url.Action("GetProductTopRate", "Purchase")',
          type: "POST",
              data: productdetails ,
          dataType: "json",
          contentType: "application/x-www-form-urlencoded;charset=utf-8",
          success: function (ajaxOutput) {//<----- if ajax method executed succesfully,  we get the data passed from controller in this variable  => success: function (variable) {

                  if (ajaxOutput.Process.IsProcess) {

                      if (ajaxOutput.Data) {

                          $thisForm.find('[name="SalPrice"]').val(ajaxOutput.Data[0].SalePrice);
                          $thisForm.find('[name="MRP"]').val(ajaxOutput.Data[0].MRP);
                      }
                  }
              },
              complete: function () {

              }
          });

    }

    function getfunction(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let $tblcontainer = $thisForm.find('[perfect-tempTable="Purchase"]');

       //alert($("#Purchasedetailshead").find('table').find('tr').length);//has table

        tax = [];
        othrchargelst = [];
        OtherCharge = [];

        $thisForm.data({ pDatas: null });
        $thisForm.data({ pData: null });
        $thisForm.data({ pDataTax: null});
        $thisForm.data({ pOthrChgData: null });
        $thisForm.data({ pTranstype: null });
        $thisForm.data({ pPurchaseproduct: null });
        $thisForm.data({ prtTaxData: null });
        $thisForm.data({ prtothchgData: null });

        $tblcontainer.empty();
        $thisForm.data({ quantitydata: '' });
        $thisForm.data({ pdiscdata: '' });
        $thisForm.data({ saldisdata: '' });

        ResetButtontable(ele);
        console.log('statecode', $thisForm.find('[name=Statecode]').val());
        console.log('FK_States', FK_States);
        if ($thisForm.find('[name=Statecode]').val() == FK_States) {

            IsStatecode = false;
        }

        else {
            IsStatecode = true;//hence it is IGSTCustomer
        }


        Getdepartmentdefault();

                let InputData;
                if ($thisForm.find('[name="Supplier"]').val() == 2) {
                    InputData =
                        {
                            FK_Master: $thisForm.find('[name="FK_PurchaseOrder"]').val(),
                            Mode: 2
                        }
                }

                if ($thisForm.find('[name="Supplier"]').val() != 1) {
                    $.ajax({
                        url: "@Url.Action("GetPurchaseFill", "Purchase")",
                        type: "Get",
                        data: InputData,
                        dataType: "json",
                        contentType: "application/json",
                        success: function (ajaxOutput) {
                            if (ajaxOutput.Process.IsProcess)
                            {
                                let table = JSON.parse(ajaxOutput.Data);
                                fillgrid('Purchase', PotableOptionsTempOut, $thisForm, table.dtable);
                                //BindBilldetails(ele);
                            }
                            else {
                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                });

                            }
                        },
                        complete: function () {
                            $(ele).prop('disabled', false);
                        }
                    });

                }
    }

    function fillgrid(tablk, wartableOptionsTempOut, $thisForm, data) {
        let tableOptionsTemp = wartableOptionsTempOut;
        let insertData = [];
        let tableKey = tablk;
        let indexname = tableKey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');
        $.each(data, function (keyOne, valOne) {
            let pData = {};
            pData[indexname] = keyOne + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', pData[indexname])
            //---

            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                //console.log('name', valOne[nameAttr])
                if (typeof valOne[nameAttr] !== undefined) {

                    if ($this.is('select')) {
                        tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                        tableOptionsTemp.hideColumn.push(nameAttr);
                        //displat text of select
                        pData[nameAttr + '_d'] = $this.find('[value="' + valOne[nameAttr] + '"]').text();
                        pData[nameAttr] = valOne[nameAttr];
                        console.log('select', $this.find('options[value="' + valOne[nameAttr] + '"]').text());

                    }
                    else if ($this.is('input')) {

                        pData[nameAttr] = valOne[nameAttr];

                    }

                }

            });

            insertData.push(pData);
            console.log('pData', pData)
            console.log('insertData', insertData)
            //----

        });
        $tblcontainer.empty();
        $tblcontainer.append(pft_table_createtable(insertData, tableOptionsTemp));

    }

    function CheckProductExist(ele, tkey, uniq = [], remov = [], ext = []) {

        //debugger

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let tableKey = tkey;
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');
       let Productmessage;

        let insertData = {};
        let tableOptionsTemp = tableOptionsTempOut;

        let unique = (uniq) ? uniq : [];
        let notValidate = (remov) ? remov : [];

        let isValid = true;

        let exiten = 0;
        let cname;

        let errorClass = '.temptableError';
        let errorClass1 = '.temptableError1';
        let errorClass2 = '.temptableError2';


        let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
        let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
        let indexname = tkey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);
        let updateCond = '';
        let isNew = true;
        if (thisactionIndex > 0) {
            //means update
            insertData[indexname] = thisactionIndex;
            updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
            isNew = false;
        }
        else {
            //insert
            insertData[indexname] = lastIndex + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
            isNew = true;
        }




        if (unique.length > 0) {
            //getting previous data
            let prevData = [];
            $tblcontainer.find('table > tbody').find('tr').each(function () {
                if (isNew) {
                    prevData.push($(this).data('pData'));
                }
                else {
                    if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                        prevData.push($(this).data('pData'));
                    }

                }

            })
            // console.log('previous data', prevData);

            unique.forEach(function (key, i) {

                console.log('unid -> key:' + key + "| index :" + i);
                let $thisEle = $thisForm.find('[perfect-tempTable-' + tableKey + '="' + key + '"]');
                let $thisElem = $thisForm.find('[perfect-tempTable-' + tableKey + '="ProName"]');
                let headerEleName = $thisEle.attr('perfect-tempTable-' + tableKey);
                let atname = $thisEle.attr('name');
                let Productname = $thisElem.attr('name');
                let cvalue;


                exiten = 0;

                //console.log('len')
                if ($thisEle.length != 0) {
                    let $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
                    let errmessage = headerEleName + " Already exits"

                    //getting current value in cval
                    if ($thisEle.is('select')) {
                        cvalue = $thisEle.val();
                    }
                    else if ($thisEle.is('input')) {

                        let inputEleType = $thisEle.attr('type').toLocaleLowerCase();

                        if (inputEleType == 'checkbox') { cvalue = $thisEle.is(':checked'); }
                        else if (inputEleType == 'hidden') { cvalue = $thisEle.val(); }
                        else { cvalue = $thisEle.val(); }
                    }
                    else { cvalue = $thisEle.val(); }

                    if ($thisElem.is('select')) {
                        cname = $thisElem.val();
                    }
                    else if ($thisElem.is('input')) {

                        let inputEleType = $thisElem.attr('type').toLocaleLowerCase();

                        if (inputEleType == 'checkbox') { cname = $thisElem.is(':checked'); }
                        else if (inputEleType == 'hidden') { cname = $thisElem.val(); }
                        else { cname = $thisElem.val(); }
                    }
                    else { cname = $thisElem.val(); }

                    console.log('cvalue ->', cvalue);
                    //alert(1);
                    Productmessage = cname + " Already Exists";
                    //searching in previous data
                    if (prevData.find(a => a[atname] == cvalue)) {
                        //alert(cname)
                        // console.log('Search =>' + cvalue + '| attr :' + atname)

                        //OLD SECTION
                        //$errorElement.text(errmessage);
                        //isValid = false;
                        //
                        exiten = 1;
                    }
                }


            });

            if (exiten == 1) {
                let confirmationDialogBoxOption = { heading: "Warning", body: Productmessage + ". Do you want to continue? ", cancel: "No", confirm: "Yes" };
                var confirmBoxObj = ConfirmDialog(confirmationDialogBoxOption);

                confirmBoxObj.then(function (selectedOption) {
                    if (selectedOption) {

                    }
                    else {
                        $('[name=ProductID]').val('0')
                        $('[name=ProName]').val('');
                        $('[name=UnitID]').val('0').selectpicker('refresh');;
                    }
                });
            }

        }
    }



    var payele;
    var s=0;
    function AddPurchaseDetails(ele, tkey, uniq = [], remov = [], ext = []) {
        //debugger
        payele = ele;
        //debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let tableKey = tkey;
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');

        let insertData = {};
        let tableOptionsTemp = tableOptionsTempOut;

        let unique = (uniq) ? uniq : [];
        let notValidate = (remov) ? remov : [];

        let isValid = true;
        //let errorClass = '.temptableError';

        //let tableKey = val;
        let errorClass = '.temptableError';
        let errorClass1 = '.temptableError1';
        let errorClass2 = '.temptableError2';
        //let isValid = true;
        //let $thisForm = $(ele).closest('[perfect-class="form"]');
        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="ProName"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="ProName"]').val() == "") {
            isValid = false;
            $thisForm.find('[perfect-tempTable-' + tableKey + '="ProName"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Product Name');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="ProName"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }
        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Unit"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="Unit"]').val() == "") {
            isValid = false;
            $thisForm.find('[perfect-tempTable-' + tableKey + '="Unit"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Unit');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="Unit"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }
        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').val() == "") {
            isValid = false;
            $thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter Quantity');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }
        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="PpdActualQuantity"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="PpdActualQuantity"]').val() == "") {
            isValid = false;
            $thisForm.find('[perfect-tempTable-' + tableKey + '="PpdActualQuantity"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter Actual Quantity');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="PpdActualQuantity"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }
        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Pur.Rate"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="Pur.Rate"]').val() == "") {
            isValid = false;
            $thisForm.find('[perfect-tempTable-' + tableKey + '="Pur.Rate"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter Pur.Rate');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="Pur.Rate"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }
        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="PpdRate"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="PpdRate"]').val() == "") {
            isValid = false;
            $thisForm.find('[perfect-tempTable-' + tableKey + '="PpdRate"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter Net Pur.Rate');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="PpdRate"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }
        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="TaxAmount"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="PpdRate"]').val() == "") {
            isValid = false;
            $thisForm.find('[perfect-tempTable-' + tableKey + '="TaxAmount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter Tax Amount');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="TaxAmount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }



      

        let expirydate = $thisForm.find('[name=ExpiryDate]').val();

        expirydate = new Date(expirydate);
        expirydate.setHours(0, 0, 0, 0)


        let today = new Date();
        today.setHours(0, 0, 0, 0);
        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="ExpiryDate"]').val() != 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="ExpiryDate"]').val() != "" || $thisForm.find('[perfect-tempTable-' + tableKey + '="ExpiryDate"]').val() != undefined) {
            if (expirydate < today) {


                isValid = false;
                $thisForm.find('[perfect-tempTable-' + tableKey + '="ExpiryDate"]').closest('[perfect-class="formGroup"]').find(errorClass).text("Expiry date should be greater than or equal to Today's date");

            }

            else {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="ExpiryDate"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }
        }
        //if ($thisForm.find('[name="MRP"]').val() != "" || $thisForm.find('[name="SalPrice"]').val() != "" )
        //{
        //    console.log('MRP CONSOLE',$thisForm.find('[name="MRP"]').val());
        //    if ((parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="MRP"]').val())) >= (parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="SalPrice"]').val())))
        //    {
        //        $thisForm.find('[perfect-tempTable-Purchase="SalPrice"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
        //        $thisForm.find('[perfect-tempTable-Purchase="MRP"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
        //    }
        //    else if ((parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="MRP"]').val())) == "" && (parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="MRP"]').val())) != 0 && (parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="SalPrice"]').val())) != "")
        //    {
        //        isValid = false;
        //        $thisForm.find('[perfect-tempTable-Purchase="MRP"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('Please Enter MRP');
        //    }
        //    else if ((parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="MRP"]').val())) != "" && (parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="SalPrice"]').val())) == "" && (parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="SalPrice"]').val())) != 0)
        //    {
        //        isValid = false;
        //        $thisForm.find('[perfect-tempTable-Purchase="SalPrice"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('Please Enter Sale Price');
        //    }
        //    else
        //    {
        //        isValid = false;
        //        $thisForm.find('[perfect-tempTable-Purchase="SalPrice"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('Sales Price Should not greater than MRP');
        //    }
        //}
        /////////////////////////////
        //if ((($thisForm.find('[perfect-tempTable-' + tableKey + '="MRP"]').val())) != "" || (($thisForm.find('[perfect-tempTable-' + tableKey + '="SalPrice"]').val())) != "") {
        //    if (((($thisForm.find('[perfect-tempTable-' + tableKey + '="MRP"]').val())) < (($thisForm.find('[perfect-tempTable-' + tableKey + '="SalPrice"]').val()))) && ((($thisForm.find('[perfect-tempTable-' + tableKey + '="MRP"]').val())) != "" && (($thisForm.find('[perfect-tempTable-' + tableKey + '="SalPrice"]').val())) != "") && ((($thisForm.find('[perfect-tempTable-' + tableKey + '="MRP"]').val())) !=0 && (($thisForm.find('[perfect-tempTable-' + tableKey + '="SalPrice"]').val())) != 0)) {
        //        isValid = false;
        //        $thisForm.find('[perfect-tempTable-Purchase="SalPrice"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('Sales Price Should not greater than MRP');
        //    }
        //    else if ((($thisForm.find('[perfect-tempTable-' + tableKey + '="MRP"]').val())) == "" && (($thisForm.find('[perfect-tempTable-' + tableKey + '="SalPrice"]').val())) != "")
        //    {
        //        isValid = false;
        //        $thisForm.find('[perfect-tempTable-Purchase="MRP"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('Please Enter MRP');
        //    }
        //    else if ((($thisForm.find('[perfect-tempTable-' + tableKey + '="MRP"]').val())) != "" && (($thisForm.find('[perfect-tempTable-' + tableKey + '="SalPrice"]').val())) == "")
        //    {
        //        isValid = false;
        //        $thisForm.find('[perfect-tempTable-Purchase="SalPrice"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('Please Enter Sale Price');
        //    }
        //    else {
        //        $thisForm.find('[perfect-tempTable-Purchase="SalPrice"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
        //        $thisForm.find('[perfect-tempTable-Purchase="MRP"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
        //    }
        //}
        //else {
        //    $thisForm.find('[perfect-tempTable-Purchase="SalPrice"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
        //    $thisForm.find('[perfect-tempTable-Purchase="MRP"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');

        //}
        let mrp = $thisForm.find('[perfect-tempTable-' + tableKey + '="MRP"]').val();
        let saleprice = $thisForm.find('[perfect-tempTable-' + tableKey + '="SalPrice"]').val();
        if ((parseFloat(mrp)) != "" || ((saleprice)) != "") {
            if (((parseFloat(mrp)) < (parseFloat(saleprice))) && ((parseFloat(mrp)) != "" && (parseFloat(saleprice)) != "") && ((parseFloat(mrp)) != 0 && (parseFloat(saleprice)) != 0)) {
                isValid = false;
                $thisForm.find('[perfect-tempTable-Purchase="SalPrice"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('Sales Price Should not be greater than MRP');
            }
            else if ((parseFloat(mrp)) == "" && (parseFloat(saleprice)) != "") {
                isValid = false;
                $thisForm.find('[perfect-tempTable-Purchase="MRP"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('Please Enter MRP');
            }
            else if ((parseFloat(mrp)) != "" && (parseFloat(saleprice)) == "") {
                isValid = false;
                $thisForm.find('[perfect-tempTable-Purchase="SalPrice"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('Please Enter Sale Price');
            }
            else {
                $thisForm.find('[perfect-tempTable-Purchase="SalPrice"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
                $thisForm.find('[perfect-tempTable-Purchase="MRP"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
            }
        }
        else {
            $thisForm.find('[perfect-tempTable-Purchase="SalPrice"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
            $thisForm.find('[perfect-tempTable-Purchase="MRP"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');

        }

        //make index

        let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
        let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
        let indexname = tkey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);
        let updateCond = '';
        let isNew = true;
        if (thisactionIndex > 0) {
            //means update
            insertData[indexname] = thisactionIndex;
            updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
            isNew = false;
        }
        else {
            //insert
            insertData[indexname] = lastIndex + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
            isNew = true;
        }








        //empty field vaidation
        //$thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
        //    let $this = $(this);
        //    let headerName = $this.attr('perfect-tempTable-' + tableKey);
        //    let nameAttr = $this.attr('name');
        //    let $errorElement = $this.closest('[perfect-class="formGroup"]').find(errorClass);
        //    if (!notValidate.includes(headerName)) {
        //        if ($this.is('select')) {
        //            if ($this.val().length > 0) {
        //                //something selected
        //                $errorElement.text('');
        //            }
        //            else {
        //                //noting selected
        //                isValid = false;
        //                $errorElement.text('Please enter ' + headerName);
        //                //console.log('reee' + headerName)
        //            }
        //        }
        //        else if ($this.is('input')) {

        //            let inputType = $this.attr('type').toLocaleLowerCase();

        //            if (inputType == 'checkbox') {

        //                //if need any not checked validation do it here
        //            }
        //            else if (inputType == 'hidden') {

        //                //if need any not checked validation do it here
        //            }
        //            else {
        //                if ($this.val().length > 0) {
        //                    //something selected
        //                    $errorElement.text('');
        //                }
        //                else {
        //                    //noting selected
        //                    isValid = false;
        //                    $errorElement.text('Please enter ' + headerName);

        //                }
        //            }
        //        }
        //}
        //});




        if (unique.length > 0) {
            //getting previous data
            let prevData = [];
            $tblcontainer.find('table > tbody').find('tr').each(function () {
                if (isNew) {
                    prevData.push($(this).data('pData'));
                }
                else {
                    if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                        prevData.push($(this).data('pData'));
                    }

                }

            })
            // console.log('previous data', prevData);

            unique.forEach(function (key, i) {

                console.log('unid -> key:' + key + "| index :" + i);
                let $thisEle = $thisForm.find('[perfect-tempTable-' + tableKey + '="' + key + '"]');
                let headerEleName = $thisEle.attr('perfect-tempTable-' + tableKey);
                let atname = $thisEle.attr('name');
                let cvalue;

                //console.log('len')
                if ($thisEle.length != 0) {
                    let $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
                    let errmessage = headerEleName + " Already exits"

                    //getting current value in cval
                    if ($thisEle.is('select')) {
                        cvalue = $thisEle.val();
                    }
                    else if ($thisEle.is('input')) {

                        let inputEleType = $thisEle.attr('type').toLocaleLowerCase();

                        if (inputEleType == 'checkbox') { cvalue = $thisEle.is(':checked'); }
                        else if (inputEleType == 'hidden') { cvalue = $thisEle.val(); }
                        else { cvalue = $thisEle.val(); }
                    }
                    else { cvalue = $thisEle.val(); }

                     console.log('cvalue ->' , cvalue);

                    //searching in previous data
                    if (prevData.find(a => a[atname] == cvalue)) {
                        // console.log('Search =>' + cvalue + '| attr :' + atname)
                        //let confirmationDialogBoxOption = { heading: "Warning", body: dtable[0].Message + "<br>Do you want to continue? ", cancel: "No", confirm: "Yes" };
                        //var confirmBoxObj = ConfirmDialog(confirmationDialogBoxOption);

                        //OLD SECTION
                        //$errorElement.text(errmessage);
                        //isValid = false;
                        //
                    }
                }
            });

        }

        //debugger
        if (isValid) {
            $thisForm.data({ quantitydata: '' });
            $thisForm.data({ pdiscdata: '' });
            $thisForm.data({ saldisdata: '' });
            if (isNew) {
                if ($('#pupdate').is(":visible")) {
                    let savedPDatas = $thisForm.data('purData');
                    //alert(savedPDatas.length)
                    if (savedPDatas.length > 0 || savedPDatas.length == null || !undefined) {
                        if (s == 0) {
                            cnt = savedPDatas.length + 1;
                            s++;

                        }
                        else {
                            cnt++;
                        }

                    }
                }
                else
                {
                    cnt++;
                }

                Taxdet(this);
                //alert($thisForm.find('[perfect-tempTable-' + tableKey + ']').find('table').length );
            }
            else
            {
                //debugger
                console.log('RETTAX>', tax);
                Taxret(this);
            }

            Taxcalled = 0;

            // this section make table column data
            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');


                if ($this.is('select')) {

                    tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                    tableOptionsTemp.hideColumn.push(nameAttr)
                    //displat text of select
                    insertData[nameAttr + '_d'] = $this.children(":selected").text();
                    insertData[nameAttr] = $this.val();


                    //clear field
                    $this.val('').selectpicker('refresh');
                }
                else if ($this.is('input')) {

                    let inputType = $this.attr('type').toLocaleLowerCase();

                    if (inputType == 'checkbox') {

                        insertData[nameAttr] = $this.is(':checked');

                        //clear field
                        $this.prop('checked', false);

                    }
                    else if (inputType == 'hidden') {

                        tableOptionsTemp.hideColumn.push(nameAttr)
                        insertData[nameAttr] = $this.val();

                        //clear field
                        $this.val('');
                    }
                    else {
                        insertData[nameAttr] = $this.val();

                        //clear field
                        $this.val('');
                    }
                }
                else {
                    insertData[nameAttr] = $this.val();

                    //clear field
                    $this.val('');
                }




            });

            if (isNew) {
                //this section nake table.table row
                if ($tblcontainer.find('table').length == 0) {
                    $tblcontainer.append(pft_table_createtable([insertData], tableOptionsTemp));
                   // $tblcontainer.find('table').dataTable({  });
                }
                else {
                    let table = $tblcontainer.find('table').DataTable()
                    table.destroy()
                    pft_table_addTableRow($tblcontainer.find('table'), insertData, tableOptionsTemp);


                   // $tblcontainer.find('table').dataTable({ });
                    //   $tblcontainer.DataTable().draw();
                    //  table.ajax.reload();
                }
            }
            else {
                let table = $tblcontainer.find('table').DataTable()
                table.destroy()
                pft_table_replaceTableRow($tblcontainer.find('table'), updateCond, insertData, tableOptionsTemp);


               // $tblcontainer.find('table').dataTable({ });
            }

            // resetting the edit value
            $tblcontainer.attr('perfect-tempTable-action', 0);
        }
        CalculateTotal(ele);
        RoundOffCalc(ele);

    }
    var tableOptionsTempOut = {
        iconButton: {
            buttons: [

                {
                    icon: "fa fa-pencil btnPerfectGridEdit",
                    action: function () {
                        //debugger
                        let $thisTD = $(this).closest('td');

                        $thisTD.find('.btnPerfectGridDelete').closest('.btnPerfectGrid ').prop('disabled', true);

                        let savedData = $(this).closest('tr').data('pData')

                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let tableKey = $tablecontainer.attr('perfect-tempTable');
                        let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                        //index attribute name in table row
                        let indexname = tableKey + 'index';
                        //index number in table row
                        let rindex = $(this).closest('tr').attr(indexname);
                        $tablecontainer.attr('perfect-tempTable-action', rindex);

                        console.log('Editclick', savedData);
                        //filling data in available inputs
                        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                            let $thisNode = $(this);
                            let pf_name = $thisNode.attr('name');
                            if ($thisNode.is('select')) {

                                $thisNode.val(savedData[pf_name]).selectpicker('refresh');
                            }
                            else if ($thisNode.is('input')) {

                                if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                    $thisNode.prop('checked', savedData[pf_name]);
                                }
                                else {
                                    $thisNode.val(savedData[pf_name]);
                                }

                            }
                            else {
                                $thisNode.val(savedData[pf_name]);
                            }


                        });
                       

                        BindQuantityDetails(this,1);
                        BindpurchaseDetails(this,1);
                        BindSaleDiscount(this);
                        //$('#purtupdate').show();
                        //$('#purtupdate').hide();
                        $('#formGroupModalTax').modal('hide');

                    }
                },
                {
                    icon: "fa fa-trash btnPerfectGridDelete",
                    action: function () {
                        let savedData = $(this).closest('tr').data('pData')
                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let $thistbl = $(this).closest('table');
                        let table = $thistbl.DataTable();
                        table.destroy();
                        if ($(this).closest('tbody').find('tr').length > 1) {
                            $(this).closest('tr').remove();
                            pft_table_slreset($thistbl);
                            //$thistbl.dataTable({ paging: false,  ordering: false });

                        }
                        else {
                            $thistbl.remove();
				           
                        }
                        $("#purreset").click();
                        CalculateTotal($tablecontainer, 1);
                        RoundOffCalc(this, 1);
                       RemoveTaxArray(this, savedData.UID);
                    }
                },
            ]
        },
        onlyShowColumn: ['ProName', 'UnitID_d', 'UnitCount', 'PpdBarCode', 'PpdQRCode', 'PpdQuantity', 'PpdActualQuantity', 'PpdRate', 'PpdpurDis', 'NetPurchase', 'TaxAmount', 'Description','PpdBatchNo'],
        hideColumn: ["UID", "UnitID", "PpdShortage", "Ppdless", "PpdFreeQuantity", "PpdpurDiscper", "PpdpurDis", "PpdDisper", "PpdDiscount", "PpdProPer", "PpdProAmnt", "ProductID", "IncludeTax"],
        serialNo: true,
        renameHeader: {
            "PpdQuantity": "Quantity1R", "PpdRate": "Pur Rate", "PpdActualQuantity": "Act Qty1R", "PpdBarCode": "BarCode", "PpdQRCode": "QR Code", "ProName": "Product Name", "UnitID": "Unit", "TaxAmount": "Tax1R","PpdpurDis":"Pur.Discount1R",
            "PpdActualQuantity": "Act Qty1R", "PpdDisper": "Dis%", "PpdDiscount": "Discount", "PpdProPer": "Prof%", "PpdProAmnt": "Pro Amnt1R", "PpdFreeQuantity": "Free", "PpdRate": "Pur.Rate1R", "NetPurchase": "Total Rate1R", "Description": "Description","PpdBatchNo":"Batch No"},
        rowAttribute: [],
        isCheckType: [],


    };


    var PotableOptionsTempOut = {
        iconButton: {
            buttons: [

                {
                    icon: "fa fa-pencil btnPerfectGridEdit",
                    action: function () {
                        //debugger
                        let savedData = $(this).closest('tr').data('pData')

                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let tableKey = $tablecontainer.attr('perfect-tempTable');
                        let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                        //index attribute name in table row
                        let indexname = tableKey + 'index';
                        //index number in table row
                        let rindex = $(this).closest('tr').attr(indexname);
                        $tablecontainer.attr('perfect-tempTable-action', rindex);

                        console.log('Editclick', savedData);
                        //filling data in available inputs
                        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                            let $thisNode = $(this);
                            let pf_name = $thisNode.attr('name');
                            if ($thisNode.is('select')) {

                                $thisNode.val(savedData[pf_name]).selectpicker('refresh');
                            }
                            else if ($thisNode.is('input')) {

                                if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                    $thisNode.prop('checked', savedData[pf_name]);
                                }
                                else {
                                    $thisNode.val(savedData[pf_name]);
                                }

                            }
                            else {
                                $thisNode.val(savedData[pf_name]);
                            }


                        });
                        //debugger;
                        //$('#purtupdate').show();
                        //$('#purtupdate').hide()
                        BindTaxDetails("1", 'formGroupModalTax', this, 0);
                        BindQuantityDetails(this);
                        BindSaleDiscount(this);
                        $('#formGroupModalTax').modal('hide');
                    }
                },
                {
                    icon: "fa fa-trash btnPerfectGridDelete",
                    action: function () {
                        let savedData = $(this).closest('tr').data('pData')
                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let $thistbl = $(this).closest('table');
                        let table = $thistbl.DataTable();
                        table.destroy();
                        if ($(this).closest('tbody').find('tr').length > 1) {
                            $(this).closest('tr').remove();
                            pft_table_slreset($thistbl);
                            //$thistbl.dataTable({ paging: false,  ordering: false });

                        }
                        else {
                            $thistbl.remove();
                        }
                        CalculateTotal($tablecontainer, 1);
                        RoundOffCalc(this, 1);
                        RemoveTaxArray(this, savedData.UID);
                    }
                },
            ]
        },
        onlyShowColumn: ['ProName', 'UnitID_d', 'UnitCount', 'PpdBarCode', 'PpdQRCode', 'PpdQuantity', 'PpdActualQuantity', 'PpdRate', 'PpdpurDis', 'NetPurchase', 'TaxAmount', 'Description','PpdBatchNo'],
        hideColumn: ["UID", "UnitID", "PpdShortage", "Ppdless", "PpdFreeQuantity", "PpdpurDiscper", "PpdpurDis", "PpdDisper", "PpdDiscount", "PpdProPer", "PpdProAmnt", "ProductID", "IncludeTax"],
        serialNo: true,
        renameHeader: {
            "PpdQuantity": "Quantity1R", "PpdRate": "Pur Rate", "PpdActualQuantity": "Act Qty1R", "PpdBarCode": "BarCode", "PpdQRCode": "QR Code", "ProName": "Product Name", "UnitID": "Unit", "TaxAmount": "Tax1R", "PpdpurDis": "Pur.Discount",
            "PpdActualQuantity": "Act Qty1R", "PpdDisper": "Dis%", "PpdDiscount": "Discount", "PpdProPer": "Prof%", "PpdProAmnt": "Pro Amnt1R", "PpdFreeQuantity": "Free", "PpdRate": "Pur.Rate1R", "NetPurchase": "Total Rate1R", "Description": "Description","PpdBatchNo":"Batch No"
        },
        rowAttribute: [],
        isCheckType: [],

    };
   
    function CalculateTotal(ele, md) {
       
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        //}
        let Net = 0;
        let Tax = 0;
        let TotalBill = $thisForm.find('[name=BillTotal]').val() == "" ? "0" : $thisForm.find('[name=BillTotal]').val();
        let Othercharg = $thisForm.find('[name=OtherCharge]').val() == "" ? "0" : $thisForm.find('[name=OtherCharge]').val();
        let Discount = $thisForm.find('[name=Discount]').val() == "" ? "0" : $thisForm.find('[name=Discount]').val();
        let AdvanceAmount = $thisForm.find('[name=AdvanceAmount]').val() == "" ? "0" : $thisForm.find('[name=AdvanceAmount]').val();

        $('#Purchasedetailshead').find('tbody tr').each(function (index, ele) {
            debugger
            Net = Net + parseFloat($(ele).find('.NetPurchase').text() == "" ? "0" : $(ele).find('.NetPurchase').text());
            Tax = Tax + parseFloat($(ele).find('.TaxAmount').text() == "" ? "0" : $(ele).find('.TaxAmount').text());
            let nt = parseFloat($(ele).find('.NetPurchase').text() == "" ? "0" : $(ele).find('.NetPurchase').text());
            //stax = stax + parseFloat($(ele).find('.TaxAmount').text());
            console.log('NET IN TABLE>', nt);

        });
        //alert(Net);
        //alert(Tax);
        console.log('NET>', Net);
        console.log('Tax>', Tax);
        let BillTotal = ( Net );
       // alert(BillTotal);
        console.log('BillTotal>', BillTotal);
        $thisForm.find('[name=BillTotal]').val(BillTotal.toFixed(2));
        Othercharg = $thisForm.find('[name=OtherCharge]').val() == "" ? "0" : $thisForm.find('[name=OtherCharge]').val();
        $thisForm.find('[name=NetAmount]').val(parseFloat(BillTotal) + parseFloat(Othercharg) - parseFloat(Discount) - parseFloat(AdvanceAmount));
        let Tt = $thisForm.find('[name=NetAmount]').val();
        var amtWords = amtInWords(Tt);
        //$("#lbAmountWords").text(amtWords);
    }

    function RoundOffCalc1(ele,md) {
        let $thisForm;
        if (md == 1) {
            $thisForm = $(payele).closest('[perfect-class="form"]');
        }
        else {
            $thisForm = $(ele).closest('[perfect-class="form"]');
        }
        let Discount = $thisForm.find('[name=Discount]').val() == "" ? "0" : $thisForm.find('[name=Discount]').val();
        let AdvanceAmount = $thisForm.find('[name=AdvanceAmount]').val() == "" ? "0" : $thisForm.find('[name=AdvanceAmount]').val();
        var RoundOff = $thisForm.find('[name=RoundOff]').val() == "" ? "0" : $thisForm.find('[name=RoundOff]').val();
        var totalAmount = $thisForm.find('[name=NetAmount]').val() == "" ? "0" : $thisForm.find('[name=NetAmount]').val();
        var BillTotal = $thisForm.find('[name=BillTotal]').val() == "" ? "0" : $thisForm.find('[name=BillTotal]').val();
        var OtherCharges = $thisForm.find('[name=OtherCharge]').val() == "" ? "0" : $thisForm.find('[name=OtherCharge]').val();

        var total = parseFloat(OtherCharges) + parseFloat(BillTotal) - parseFloat(Discount) - parseFloat(AdvanceAmount)
        //alert(total)
        var BilltotalAmount = $thisForm.find('[name=NetAmount]').val() == "" ? "0" : $thisForm.find('[name=NetAmount]').val();
        var fracpart = (((total < 1.0) ? total : (total % Math.floor(total))) * 100).toFixed(2);
        if (parseFloat(fracpart) >= 50) {
            var Balancefract = (parseFloat(100) - parseFloat(fracpart)) / parseFloat(100);
            var totalnetRoundamount = parseFloat(total) + parseFloat(Balancefract);
            var balfract = parseFloat(fracpart / 100).toFixed(2);
            $thisForm.find('[name=NetAmount]').val(totalnetRoundamount.toFixed(2));
            $thisForm.find('[name=RoundOff]').val(Balancefract);
        }
        else if (fracpart < 50)
        {
            var Balancefract = (parseFloat(100) - parseFloat(fracpart)) / parseFloat(100);
            var totalnetRoundamount = parseFloat(total) - parseFloat(fracpart / 100);
            var balfract = parseFloat(fracpart / 100).toFixed(2);
            $thisForm.find('[name=NetAmount]').val(totalnetRoundamount.toFixed(2));
            $thisForm.find('[name=RoundOff]').val(-balfract);
        }
        let Tt = $thisForm.find('[name=NetAmount]').val();
        var amtWords = amtInWords(Tt);
        //$("#lbAmountWords").text(amtWords);
    }

    function RoundOffCalc(ele, md)
    {
        //debugger
        let $thisForm;
        if (md == 1) {
            $thisForm = $(payele).closest('[perfect-class="form"]');
        }
        else {
            $thisForm = $(ele).closest('[perfect-class="form"]');
        }

        PurchaseNetDiscount(ele, 2);
        let Discount = $thisForm.find('[name=Discount]').val() == "" ? "0" : $thisForm.find('[name=Discount]').val();
        let AdvanceAmount = $thisForm.find('[name=AdvanceAmount]').val() == "" ? "0" : $thisForm.find('[name=AdvanceAmount]').val();
        var RoundOff = $thisForm.find('[name=RoundOff]').val() == "" ? "0" : $thisForm.find('[name=RoundOff]').val();
        var totalAmount = $thisForm.find('[name=NetAmount]').val() == "" ? "0" : $thisForm.find('[name=NetAmount]').val();
        var BillTotal = $thisForm.find('[name=BillTotal]').val() == "" ? "0" : $thisForm.find('[name=BillTotal]').val();
        var OtherCharges = $thisForm.find('[name=OtherCharge]').val() == "" ? "0" : $thisForm.find('[name=OtherCharge]').val();

        var total = Math.round(parseFloat(OtherCharges) + parseFloat(BillTotal) - parseFloat(Discount) - parseFloat(AdvanceAmount)) - (parseFloat(OtherCharges) + parseFloat(BillTotal) - parseFloat(Discount) - parseFloat(AdvanceAmount));
        $thisForm.find('[name=RoundOff]').val(total.toFixed(2));

        netat = parseFloat(OtherCharges) + parseFloat(BillTotal) - parseFloat(Discount) - parseFloat(AdvanceAmount) + parseFloat(total);
        $thisForm.find('[name=NetAmount]').val(netat.toFixed(2));
    }


    function ShowQuantityDetails(ele) {

        //debugger

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        if ($thisForm.find('[name="PpdQuantity"]').val().length >0) {
            let searchValue = {
                Name: $thisForm.find('[name=PpdShortage]').val()
            };

            let $model = $(ele).closest('[perfect-class="formGroup"]').find('[perfect-class="formGroupModalQuantity"]');
            $('#formGroupModalQuantity').modal({ backdrop: 'static', keyboard: false });
            $(ele).closest('[perfect-class="formGroup"]').find('[perfect-class="formGroupModalQuantity"]').modal('show');

            $(ele).closest('[perfect-class="formGroup"]').find('.temptableError').text('');
        }
        else {

            $(ele).closest('[perfect-class="formGroup"]').find('.temptableError').text('Please Enter Quantity');
        }
        let Qttydata = $thisForm.data('quantitydata');
        if (Qttydata != undefined) {
            if (Qttydata != '') {

                $.each(Qttydata, function (key, value1) {
                    $thisForm.find('[name=PpdShortage]').val(value1.PpdShortage);
                    $thisForm.find('[name=Ppdless]').val(value1.Ppdless);
                    $thisForm.find('[name=PpdFreeQuantity]').val(value1.PpdFreeQuantity);
                });
            }
            else {

                $('#formGroupModalQuantity').on('hidden.bs.modal', function (event) {
                    //$('#formGroupModalQuantity').empty();
                    //$thisForm.find('[name=PpdShortage]').val('');
                    //$thisForm.find('[name=Ppdless]').val('');
                    //$thisForm.find('[name=PpdFreeQuantity]').val('');
                });
            }
        }
    }
    function ShowPurchaserateDetails(ele) {



        let $thisForm = $(ele).closest('[perfect-class="form"]');
        if ($thisForm.find('[name="PpdRate"]').val() > 0) {


            let $model = $(ele).closest('[perfect-class="formGroup"]').find('[perfect-class="formGroupModalPurchaserate"]');
            $('#formGroupModalPurchaserate').modal({ backdrop: 'static', keyboard: false });
            $(ele).closest('[perfect-class="formGroup"]').find('[perfect-class="formGroupModalPurchaserate"]').modal('show');


            $(ele).closest('[perfect-class="formGroup"]').find('.temptableError').text('');
        }
        else {

            $(ele).closest('[perfect-class="formGroup"]').find('.temptableError').text('Please Enter Purchase Rate');
        }
        let PurDisc = $thisForm.find('[name=PpdpurDis]').val() == "" ? "0" : $thisForm.find('[name=PpdpurDis]').val();
        let PurDiscPer = $thisForm.find('[name=PpdpurDiscper]').val() == "" ? "0" : $thisForm.find('[name=PpdpurDiscper]').val();
        let Purddata = $thisForm.data('pdiscdata');
        if (Purddata != '') {
            $.each(Purddata, function (key, value1) {
                $thisForm.find('[name=PpdpurDis]').val(value1.PpdpurDis);
                $thisForm.find('[name=PpdpurDiscper]').val(value1.PpdpurDiscPer);
            });
        }
        else {
            $('#formGroupModalPurchaserate').on('hidden.bs.modal', function (event) {
                //$('#formGroupModalQuantity').empty();
                $thisForm.find('[name=PpdpurDis]').val('');
                $thisForm.find('[name=PpdpurDiscper]').val('');
            });
        }


    }


    function TaxchangeonNetpurchase(ele)
    {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let Netpurchase = $thisForm.find('[name=Netpurchase]').val();
        debugger
        if (Netpurchase>0) {
            $('NETPurchase').on('change', function () {
                ShowTax(this,0);
            });
        }
    }
        function ShowTax(ele, mod) {
            debugger;
        Taxcalled = 1;
        let $thisForm = $(ele).closest('[perfect-class="form"]');
         let taxinfo = {};
        if ($thisForm.data('pDataTax')) {
            if ($thisForm.data('pDataTax').length > 0)
            {
                taxinfo = $thisForm.data('pDataTax');
                taxinfo.push($thisForm.data('pDataTax'));
            }
            else
            {
                taxinfo.push($thisForm.data('pDataTax'));
            }
            BindTaxDetails("1", 'formGroupModalTax', ele,mod)
         
            if (mod == 1) {
                $('#formGroupModalTax').modal('show');
            }
            else {
                $('#formGroupModalTax').modal('hide');
            }
        }
        else {
            BindTaxDetails("1", 'formGroupModalTax', ele,mod)
        }


    }
    /////checkin
    var Taxcalled=0;
    function BindTaxDetails(Mode, ModalID, ele,mod) {
        Taxcalled = 1;
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let SalePrice = $thisForm.find('[name=SalPrice]').val();
        let MRP = $thisForm.find('[name=MRP]').val();
          let includetax;
          //debugger;
          let PurDis = 0;
        if ($thisForm.find('[name=PpdpurDis]').val() == "" || $thisForm.find('[name=PpdpurDis]').val() == undefined) {
            PurDis = 0;
        }
        else {
            PurDis = $thisForm.find('[name=PpdpurDis]').val();
        }

          if ($('#taxinclude').is(":checked")) {
              includetax = 1;
          }
          else {
              includetax = 0;
          }

        let Qty = $thisForm.find('[name=PpdQuantity]').val() == "" ? "0" : $thisForm.find('[name=PpdQuantity]').val();
        let PurRate = $thisForm.find('[name=PpdRate]').val() == "" ? "0" : $thisForm.find('[name=PpdRate]').val();


        let NetAmount = (parseFloat(Qty) * (parseFloat(PurRate)) - (parseFloat(PurDis)));
        console.log('NETAM', NetAmount);

        var InputData =
        {
            FK_Product: $thisForm.find('[name=ProductID]').val(),
            Includetax: includetax,

            Amount: NetAmount,
            TaxtyInterstate: IsStatecode,
        }

        $.ajax({
            url: "@Url.Action("GetTaxAmountNew","Purchase")",
            type: "Get",
            data: InputData,
            dataType: "json",
            contentType: "application/json",
            success: function (ajaxOutput) {
                     if (ajaxOutput.Process.IsProcess) {
                         var CheckListHTML = '';
                         let sum = 0;
                         if (ajaxOutput.Data.length > 0) {


                             $.each(ajaxOutput.Data, function (i, value) {
                                 sum = sum + parseFloat(value.Amount.toFixed(2));

                                 CheckListHTML += "<tr>";
                                 CheckListHTML += "<td>" + value.SlNo + "</td>";
                                 CheckListHTML += "<td Class='jq_ProductID_td' Style='Display:none'>" + value.ProductID + "</td>";
                                 CheckListHTML += "<td class='jq_taxType_td' Style='Display:none'>" + value.FK_TaxType + "</td>";
                                 CheckListHTML += "<td class='jq_taxTypeName_td'>" + value.TaxTyName + "</td>";
                                 CheckListHTML += "<td class='jq_taxPer_td'>" + value.TaxPercentage + "</td>";
                                 CheckListHTML += "<td class='jq_taxamount_td ' ><input type='number' class='text-right' value='" + value.Amount.toFixed(2) + "' /></td>";
                                
                                 CheckListHTML += "</tr>";
                             })
                             //BindTaxAmount(ele);
                         }
                         else {
                             CheckListHTML += "<div class='form-group col-md-6'>";
                             CheckListHTML += "<div class='form-check mb-2'>";
                             CheckListHTML += "<input type='checkbox' class='form-check-input' >"
                             CheckListHTML += "<label class='form-check-label' for='check1'>No Records...</label>";
                             CheckListHTML += "</div></div>"
                         }
                       

                         $("#formGroupModalTaxbody").html(CheckListHTML)
                      
                         if (mod == 1) {
                             $('#formGroupModalTax').modal('show');
                         }
                         else {
                             $('#formGroupModalTax').modal('hide');
                         }
                         BindTaxAmount(ele);
                     }
                     else {
                         $.each(ajaxOutput.Process.Message, function (key, value) {
                             NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                         });
                     }
                },
                complete: function () {
                    $(ele).prop('disabled', false);
                    BindNetAmount(ele); CalcActualQuantity(ele);
                    if (parseFloat(MRP) != 0 && parseFloat(SalePrice) != 0) {
                        Discountcalculation(ele, 1);
                    }
                }
            });
    }

    function TaxInclude(ele)
    {
        debugger;
        Taxcalled = 1;
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let SalePrice = $thisForm.find('[name=SalPrice]').val();
        let MRP = $thisForm.find('[name=MRP]').val();
        let includetax;
        let NetPur = 0;
        let ReducedNetPur;
        let AddNetPur = 0;
        let Taxamount = $thisForm.find('[name=TaxAmount]').val();
        let Qty = $thisForm.find('[name=PpdQuantity]').val();
        let PurRate = $thisForm.find('[name=PpdRate]').val();
        let currentNets = $thisForm.find('[name=NetPurchase]').val();
        let currentNet = 0;
        let PurDis = 0;
        if ($thisForm.find('[name=PpdpurDis]').val() == "" || $thisForm.find('[name=PpdpurDis]').val() == undefined) {
            PurDis = 0;
        }
        else {
            PurDis = $thisForm.find('[name=PpdpurDis]').val();
        }
        //let NetAmount = (parseFloat(Qty) * parseFloat(PurRate));
        let NetAmount = (parseFloat(Qty) * (parseFloat(PurRate))) - (parseFloat(PurDis));
        if ($('#taxinclude').is(":checked")) {
            includetax = 1;
        }
        else {
           includetax = 0;
            currentNet = currentNets + Taxamount;
        }
        var InputData =
        {


            FK_Product: $thisForm.find('[name=ProductID]').val(),
            Includetax: includetax,
            Amount: NetAmount,
            TaxtyInterstate: IsStatecode,

        }

        $.ajax({
            url: "@Url.Action("GetTaxAmountNew","Purchase")",
            type: "Get",
            data: InputData,
            dataType: "json",
            contentType: "application/json",
            success: function (ajaxOutput) {
                     if (ajaxOutput.Process.IsProcess) {
                         var CheckListHTML = '';
                         let sum = 0;
                         //let Netpur ;
                         if (ajaxOutput.Data.length > 0) {


                             $.each(ajaxOutput.Data, function (i, value) {
                                 sum = sum + parseFloat(value.Amount.toFixed(2));
                                 console.log(sum, 'sum1233');
                                 //alert(sum);
                                 CheckListHTML += "<tr>";
                                 CheckListHTML += "<td>" + value.SlNo + "</td>";
                                 CheckListHTML += "<td Class='jq_ProductID_td' Style='Display:none'>" + value.ProductID + "</td>";
                                 CheckListHTML += "<td class='jq_taxType_td' Style='Display:none'>" + value.FK_TaxType + "</td>";
                                 CheckListHTML += "<td class='jq_taxTypeName_td'>" + value.TaxTyName + "</td>";
                                 CheckListHTML += "<td class='jq_taxPer_td'>" + value.TaxPercentage + "</td>";
                                 CheckListHTML += "<td class='jq_taxamount_td' ><input type='number'  value='" + value.Amount.toFixed(2) + "' /></td>";
                              
                                 CheckListHTML += "</tr>";
                             })
                         }
                         else {
                             CheckListHTML += "<div class='form-group col-md-6'>";
                             CheckListHTML += "<div class='form-check mb-2'>";
                             CheckListHTML += "<input type='checkbox' class='form-check-input' >"
                             CheckListHTML += "<label class='form-check-label' for='check1'>No Records...</label>";
                             CheckListHTML += "</div></div>"
                         }
                         $("#formGroupModalTaxbody").html(CheckListHTML)
                         $('#formGroupModalTax').modal({ backdrop: 'static', keyboard: false })
                         $('#formGroupModalTax').modal('hide');

                       
                            
                         
                         BindTaxAmount(ele);
                        
                     }
                     else {
                         $.each(ajaxOutput.Process.Message, function (key, value) {
                             NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                         });
                     }
                },
                complete: function () {
                    $(ele).prop('disabled', false);
                    BindNetAmount(ele); CalcActualQuantity(ele);
                    if (parseFloat(MRP) != 0 && parseFloat(SalePrice) != 0)
                    {
                        Discountcalculation(ele, 1);
                    }
                }
        });
      

    }

    

        function BindTaxAmount(ele) {
        debugger
        Taxcalled = 1;
        console.log('inside binddatat fn')
        let $modal = $(ele).closest('.modal');
        let $thisForm = $(ele).closest('[perfect-class="form"]');

        let sum = 0;
        let PurDiscount = $thisForm.find('[name=PpdpurDis]').val() == "" ? "0" : $thisForm.find('[name=PpdpurDis]').val();

        debugger
        $('#formGroupModalTaxbody tr').each(function (index, ele){
            sum = sum + parseFloat($(this).find('.jq_taxamount_td').find('input').val());
        });
        $thisForm.find('[name=TaxAmount]').val(sum.toFixed(2));

        let Qty = $thisForm.find('[name=PpdQuantity]').val() == "" ? "0" : $thisForm.find('[name=PpdQuantity]').val();
        let PurRate = $thisForm.find('[name=PpdRate]').val();

        if ($('#taxinclude').is(":checked")) {
            Netpur = $thisForm.find('[name=NetPurchase]').val();
            let netrate = ((parseFloat(Qty) * parseFloat(PurRate))) - parseFloat(PurDiscount);//+sum;
            $thisForm.find('[name=NetPurchase]').val(netrate.toFixed(2));
        }
        else {

            $thisForm.find('[name=TaxAmount]').val(sum.toFixed(2));

            let netratenow = ((parseFloat(Qty) * parseFloat(PurRate)) - parseFloat(PurDiscount)) + sum;

            $thisForm.find('[name=NetPurchase]').val(netratenow.toFixed(2));

        }
       
    }
    //var q = [];
    function BindQuantityDetails(ele,mode) {
        //debugger
        let $modal = $(ele).closest('.modal');
        let $thisForm;
        if (mode == 1) {
            $thisForm = $('[perfect-class="form"]');
        }
        else {
            $thisForm = $(ele).closest('[perfect-class="form"]');
        }

        let Free = $thisForm.find('[name=PpdFreeQuantity]').val() == "" ? "0" : $thisForm.find('[name=PpdFreeQuantity]').val();
        let Shortage = $thisForm.find('[name=PpdShortage]').val() == "" ? "0" : $thisForm.find('[name=PpdShortage]').val();
        let less = $thisForm.find('[name=Ppdless]').val() == "" ? "0" : $thisForm.find('[name=Ppdless]').val();
        let Qty = $thisForm.find('[name=PpdQuantity]').val() == "" ? "0" : $thisForm.find('[name=PpdQuantity]').val();
        //let unit = $thisForm.find('[name=UnitID]').val() == "" ? "0" : $thisForm.find('[name=UnitID]').val();
        let Validqty = 0;
        let Validqty1 = 0;
        let Validqty2 = 0;
        if (parseFloat(Shortage) <= parseFloat(Qty) )
        {
            $thisForm.find('[perfect-tempTable-Purchase="PpdShortage"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
            Validqty = 1;
        }
        else
        {
            $thisForm.find('[perfect-tempTable-Purchase="PpdShortage"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('Shortage Should not be greater than Quantity');
            Validqty = 0;
        }
        if (parseFloat(less) <= parseFloat(Qty)) {
            $thisForm.find('[perfect-tempTable-Purchase="Ppdless"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
            Validqty2 = 1;
        }
        else {
            $thisForm.find('[perfect-tempTable-Purchase="Ppdless"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('Less Quantity Should not be greater than Quantity');
            Validqty2 = 0;
        }
        if (Validqty == 1 && Validqty2 == 1)
        {
           let unit = $thisForm.find('[name="UnitID"]').children(":selected").attr('UnitCounts');
           let sumActQty = (parseFloat(Qty) * parseFloat(unit) + parseFloat(Free) - parseFloat(less) - parseFloat(Shortage));
            $thisForm.find('[name=PpdActualQuantity]').val(sumActQty.toFixed(3));
           var q = [];
            let qtty = {
                PpdFreeQuantity: Free,
                PpdShortage: Shortage,
                Ppdless: less
            }
            q.push(qtty);
            console.log('qttty', qtty);

            $thisForm.data({ quantitydata: q});
           //$('#formGroupModalQuantity').modal({ backdrop: 'static', keyboard: false });
           $('#formGroupModalQuantity').modal('hide');
        }
    }
    function ClearQuantity(ele)
    {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let Qty = $thisForm.find('[name=PpdQuantity]').val() == "" ? "0" : $thisForm.find('[name=PpdQuantity]').val();
        let unit = $thisForm.find('[name="UnitID"]').children(":selected").attr('UnitCounts');
        let Free = $thisForm.find('[name=PpdFreeQuantity]').val() == "" ? "0" : $thisForm.find('[name=PpdFreeQuantity]').val();
        let Shortage = $thisForm.find('[name=PpdShortage]').val() == "" ? "0" : $thisForm.find('[name=PpdShortage]').val();
        let less = $thisForm.find('[name=Ppdless]').val() == "" ? "0" : $thisForm.find('[name=Ppdless]').val();
        let actqty = $thisForm.find('[name=PpdActualQuantity]').val();
        q = '';
        $thisForm.find('[name=PpdShortage]').val('');
        $thisForm.find('[name=PpdFreeQuantity]').val('');
        $thisForm.find('[name=Ppdless]').val('');
        let sumActQty = (parseFloat(Qty) * parseFloat(unit) + parseFloat($thisForm.find('[name=PpdFreeQuantity]').val() == "" ? "0" : $thisForm.find('[name=PpdFreeQuantity]').val()) - parseFloat($thisForm.find('[name=Ppdless]').val() == "" ? "0" : $thisForm.find('[name=Ppdless]').val()) - $thisForm.find('[name=PpdShortage]').val() == "" ? "0" : $thisForm.find('[name=PpdShortage]').val());
        console.log('sumActQty>', sumActQty)
        $thisForm.find('[name=PpdActualQuantity]').val(sumActQty.toFixed(3));
        $thisForm.data({ quantitydata: '' });
    }
    //Purchase Rate added by anson
    function BindpurchaseDetails(ele,sd) {
        //debugger
        let $modal = $(ele).closest('.modal');
        let $thisForm;
        if (sd == 1) {
            $thisForm = $('[perfect-class="form"]');
        }
        else {
            $thisForm = $(ele).closest('[perfect-class="form"]');
        }
        let valid = 0;

        let Qty = $thisForm.find('[name=PpdQuantity]').val() == "" ? "0" : $thisForm.find('[name=PpdQuantity]').val();
        let PurDisc = $thisForm.find('[name=PpdpurDis]').val() == "" ? "0" : $thisForm.find('[name=PpdpurDis]').val();
        let PurDiscPer = $thisForm.find('[name=PpdpurDiscper]').val() == "" ? "0" : $thisForm.find('[name=PpdpurDiscper]').val();
        let PurRate = $thisForm.find('[name=PpdRate]').val() == "" ? "0" : $thisForm.find('[name=PpdRate]').val();
        let NetPurRate = $thisForm.find('[name=NetPurchase]').val() == "" ? "0" : $thisForm.find('[name=NetPurchase]').val();
        let Dispur = 0;
       // if (parseFloat(PurDisc) > parseFloat(PurRate)) {
        if (parseFloat(PurDisc) > (parseFloat(Qty) * parseFloat(PurRate))) {

            $thisForm.find('[perfect-tempTable-Purchase="PpdpurDis"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('Discount Amount Should not be greater than Purchase Rate');
            $('#formGroupModalPurchaserate').modal({ backdrop: 'static', keyboard: false });
            $('#formGroupModalPurchaserate').modal('show');
            valid = 1;
        }
        else {
            valid = 0;
        }
      //  if ((parseFloat(PurDisc) <= parseFloat(PurRate)) && valid==0) {
        let sumNetPurRate = 0;
        if ((parseFloat(PurDisc) <= (parseFloat(Qty) * parseFloat(PurRate))) && valid == 0) {

            sumNetPurRate = (parseFloat(NetPurRate)  * parseFloat(Qty)) - (parseFloat(PurDisc));
            //Dispur = (parseFloat(PurRate) - (parseFloat(PurDisc))) * (parseFloat(Qty));
            Dispur = (parseFloat(NetPurRate) * parseFloat(Qty)) - (parseFloat(PurDisc));;
            console.log('CALC AFT DIS>', sumNetPurRate);
            if (isNaN(sumNetPurRate)) {
                sumNetPurRate = 0.00;
            }

            var p = [];
            let pdisc = {
                PpdpurDis: PurDisc,
                PpdpurDiscPer: PurDiscPer
            }
            p.push(pdisc);
            console.log('purdisc', pdisc);
            $thisForm.data({ pdiscdata: p });
            BindTaxDetails("1", 'formGroupModalTax', ele, 0);
            BindNetAmount(ele);
            
          
         
          
            $thisForm.find('[perfect-tempTable-Purchase="PpdpurDis"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
           
            $('#formGroupModalPurchaserate').modal('hide');

        }

    }
    function PurchaseDiscount(ele,field,rateid)
    {
        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let PurRate = $thisForm.find('[name=PpdRate]').val() == "" ? 0 : $thisForm.find('[name=PpdRate]').val();
        let discount = $thisForm.find('[name=PpdpurDis]').val() == "" ? 0 : $thisForm.find('[name=PpdpurDis]').val();
        var quantity = $thisForm.find('[name=PpdQuantity]').val() == "" ? 0 : $thisForm.find('[name=PpdQuantity]').val();
        let discountPer = $thisForm.find('[name=PpdpurDiscper]').val() == "" ? 0 : $thisForm.find('[name=PpdpurDiscper]').val();
        let discountamount=0;
        let discountPerc = 0;

        if (field == 1) {
           // discountamount = parseFloat(PurRate) * parseFloat(discountPer) / 100;
            discountamount =(parseFloat(quantity)* parseFloat(PurRate)) * (parseFloat(discountPer) / 100);
            $thisForm.find('[name=PpdpurDis]').val(discountamount.toFixed(2));
            $thisForm.find('[name=PpdpurDiscper]').val(discountPer);
        }
        else if (field == 2)
        {
           // if (parseFloat(discount) <= parseFloat(PurRate)) {
            if (parseFloat(discount) <= (parseFloat(quantity) * parseFloat(PurRate))) {
              // discountPerc = parseFloat(discount) * 100 / parseFloat(PurRate);
                discountPerc = (parseFloat(discount) / (parseFloat(quantity) * parseFloat(PurRate)))*100;
                $thisForm.find('[name=PpdpurDiscper]').val(discountPerc);
                $thisForm.find('[name=PpdpurDis]').val(discount);
                $thisForm.find('[perfect-tempTable-Purchase="PpdpurDis"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
            }
            else {
                $thisForm.find('[perfect-tempTable-Purchase="PpdpurDis"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('Discount Amount Should not be greater than Purchase Rate');
            }
        }
        if (rateid == 5) {
            BindpurchaseDetails(ele, 5);

            if (parseFloat(discount) != 0 || parseFloat(discountPer) != 0) {
                NotificationMessage({ 'type': 'info', 'heading': 'info', 'message': 'Check Purchase Discount' });
            }
        }

       
      

    }

    function BindNetAmount(ele) {
        debugger
        let $modal = $(ele).closest('.modal');
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let Qty = $thisForm.find('[name=PpdQuantity]').val() == "" ? "0" : $thisForm.find('[name="PpdQuantity"]').val();
        //addedby anson

        $thisForm.find('[name=PpdQuantity]').val(parseFloat(Qty).toFixed(3));
     
     
        let PurDis = $thisForm.find('[name=PpdpurDis]').val() == "" ? "0" : $thisForm.find('[name=PpdpurDis]').val();
        let PurDiscPer = $thisForm.find('[name=PpdpurDiscper]').val() == "" ? "0" : $thisForm.find('[name=PpdpurDiscper]').val();
            //addedby anson
        let PurRate = $thisForm.find('[name=PpdRate]').val() == "" ? "0" : $thisForm.find('[name=PpdRate]').val();
      
        let Tax = $thisForm.find('[name=TaxAmount]').val() == "" ? "0" : $thisForm.find('[name=TaxAmount]').val();
       
        if ($('#taxinclude').is(":checked")) {

           Tax = 0;
        }

     
        let NetAmount = 0;
        
        NetAmount = (((parseFloat(Qty) * parseFloat(PurRate)) - parseFloat(PurDis)) + parseFloat(Tax));

        $thisForm.find('[name=PpdRate]').val(parseFloat(PurRate).toFixed(2));
        if (isNaN(NetAmount)) {
            NetAmount = 0.00;
        }
        $thisForm.find('[name=NetPurchase]').val(NetAmount.toFixed(2));
        //alert(PurRate)
    }

    function saleprice(ele)
    {
        //debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let SalePrice = $thisForm.find('[name=SalPrice]').val() == "" ? "0" : $thisForm.find('[name=SalPrice]').val();
        let MRP = $thisForm.find('[name=MRP]').val() == "" ? "0" : $thisForm.find('[name=MRP]').val();
        if (SalePrice == 0 || SalePrice == null || SalePrice == '') {
            $('.DivSaleOthers').hide();
        }
        else
        {
            $('.DivSaleOthers').show();
        }
        //alert(1)
        $thisForm.find('[name=SalPrice]').val(parseFloat(SalePrice).toFixed(2));
        $thisForm.find('[name=MRP]').val(parseFloat(MRP).toFixed(2));

        let salediscountper = $thisForm.find('[name=PpdDisper]').val() == "" ? "0" : $thisForm.find('[name=PpdDisper]').val();
        let saleDiscount = $thisForm.find('[name=PpdDiscount]').val() == "" ? "0" : $thisForm.find('[name=PpdDiscount]').val();
        let profper = $thisForm.find('[name=PpdProPer]').val() == "" ? "0" : $thisForm.find('[name=PpdProPer]').val();
        let prof = $thisForm.find('[name=PpdProAmnt]').val() == "" ? "0" : $thisForm.find('[name=PpdProAmnt]').val();
        if (parseFloat(MRP) != "" || parseFloat(SalePrice) != "")
        {
            if ((parseFloat(MRP) < parseFloat(SalePrice)) && (parseFloat(MRP) != "" && parseFloat(SalePrice) != "")) {

                $thisForm.find('[perfect-tempTable-Purchase="SalPrice"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('Sales Price Should not be greater than MRP');
            }
            else if (parseFloat(MRP) == "" && parseFloat(SalePrice) != "") {

                $thisForm.find('[perfect-tempTable-Purchase="MRP"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('Please Enter MRP');
            }
            else if (parseFloat(MRP) != "" && parseFloat(SalePrice) == "") {
                $thisForm.find('[perfect-tempTable-Purchase="SalPrice"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('Please Enter Sale Price');
            }
            else {
                $thisForm.find('[perfect-tempTable-Purchase="SalPrice"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
                $thisForm.find('[perfect-tempTable-Purchase="MRP"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
            }
        }
        else
        {
            $thisForm.find('[perfect-tempTable-Purchase="SalPrice"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
            $thisForm.find('[perfect-tempTable-Purchase="MRP"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');

        }

    }
    function Discountcalculation(ele,DisOpt,dp)
    {
        //debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let SalePrice = $thisForm.find('[name=SalPrice]').val() == "" ? "0" : $thisForm.find('[name=SalPrice]').val();
        let profper = $thisForm.find('[name=PpdProPer]').val() == "" ? "0" : $thisForm.find('[name=PpdProPer]').val();
        let prof = $thisForm.find('[name=PpdProAmnt]').val() == "" ? "0" : $thisForm.find('[name=PpdProAmnt]').val();
        let salediscountper = $thisForm.find('[name=PpdDisper]').val() == "" ? "0" : $thisForm.find('[name=PpdDisper]').val();
        let saleDiscount = $thisForm.find('[name=PpdDiscount]').val() == "" ? "0" : $thisForm.find('[name=PpdDiscount]').val();
        let Qty = $thisForm.find('[name=PpdQuantity]').val() == "" ? "0" : $thisForm.find('[name=PpdQuantity]').val();
        let unitcount = $thisForm.find('[name="UnitID"]').children(":selected").attr('UnitCounts') == "" ? "0" : $thisForm.find('[name="UnitID"]').children(":selected").attr('UnitCounts');
            Qty = parseFloat(Qty) * parseFloat(unitcount);
        let PurRate = $thisForm.find('[name=PpdRate]').val() == "" ? "0" : $thisForm.find('[name=PpdRate]').val();
        let NetPurRate = $thisForm.find('[name=NetPurchase]').val() == "" ? "0" : $thisForm.find('[name=NetPurchase]').val();
        //let NetPurRate = (parseFloat(Qty) * parseFloat(PurRate));
        let Tax = $thisForm.find('[name=TaxAmount]').val() == "" ? "0" : $thisForm.find('[name=TaxAmount]').val();
        let saldisper=0;
        let saldisc = 0;
        let profitpersn;
        let profit;
        //debugger;

        if (DisOpt == 2 /*|| DisOpt == 4*/) {
            saldisper = (parseFloat(saleDiscount) * 100 )/ parseFloat(SalePrice);
                $thisForm.find('[name=PpdDisper]').val(saldisper.toFixed(2))
                $thisForm.find('[name=PpdDiscount]').val(saleDiscount);


              
            }
            else if (DisOpt == 1 /*|| DisOpt == 3*/) {
            saldisc = (parseFloat(SalePrice) * parseFloat(salediscountper) )/ 100;
                $thisForm.find('[name=PpdDiscount]').val(saldisc.toFixed(2));
                $thisForm.find('[name=PpdDisper]').val(salediscountper);

            saleDiscount = saldisc;

            }

        let singletax = parseFloat(Tax) / parseFloat(Qty);
      
        profit = (parseFloat(SalePrice) - (parseFloat(NetPurRate) / parseFloat(Qty)) - (parseFloat(saleDiscount)));
        //alert((parseFloat(saldisc)));
        //}
        //else {
        //    profit =parseFloat(SalePrice) - (parseFloat(NetPurRate) / Qty);
        //}

        $thisForm.find('[name=PpdProAmnt]').val(profit.toFixed(2));
        console.log('Profit profit >', profit);

        profitpersn = /*(parseFloat(SalePrice) - ((parseFloat(NetPurRate) / Qty)) - (parseFloat(saldisc) - parseFloat(singletax)))*/profit * (100 / ((parseFloat(NetPurRate) / Qty)));
        $thisForm.find('[name=PpdProPer]').val(profitpersn.toFixed(2));
        console.log('Profit per >', profitpersn);
        //else if ((saldisper == 0 || saldisc == 0) || (saldisper == null || saldisc == null))
        //{
        //    $thisForm.find('[name=PpdProPer]').val(profper);
        //    $thisForm.find('[name=PpdProAmnt]').val(prof);
        //}


        //else if (DisOpt == 3)
        //{

        //}
        //else if (DisOpt == 4)
        //{

        //}
        //if (profitpersn == 0 || profit == 0)
        //{
        //    $thisForm.find('[name=PpdProPer]').val('0');
        //    $thisForm.find('[name=PpdProAmnt]').val('0');
        //}

        if (dp == 6) {

            BindSaleDiscount(ele);
            if (parseFloat(saleDiscount) != 0 || parseFloat(salediscountper) != 0)
            {
                NotificationMessage({ 'type': 'info', 'heading': 'info', 'message': 'Check Sales Discount' });
            }
        }
    }
    function DiscountDcalculation(ele, DisOpt)
    {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let SalePrice = $thisForm.find('[name=SalPrice]').val() == "" ? "0" : $thisForm.find('[name=SalPrice]').val();
        let profper = $thisForm.find('[name=PpdProPer]').val() == "" ? "0" : $thisForm.find('[name=PpdProPer]').val();
        let prof = $thisForm.find('[name=PpdProAmnt]').val() == "" ? "0" : $thisForm.find('[name=PpdProAmnt]').val();
        let salediscountper = $thisForm.find('[name=PpdDisper]').val() == "" ? "0" : $thisForm.find('[name=PpdDisper]').val();
        let saleDiscount = $thisForm.find('[name=PpdDiscount]').val() == "" ? "0" : $thisForm.find('[name=PpdDiscount]').val();
        let unitcount = $thisForm.find('[name="UnitID"]').children(":selected").attr('UnitCounts');
        let Qty = $thisForm.find('[name=PpdQuantity]').val();
        Qty = parseFloat(Qty) * parseFloat(unitcount);
        let PurRate = $thisForm.find('[name=PpdRate]').val()
        let NetPurRate = $thisForm.find('[name=NetPurchase]').val()== "" ? "0" : $thisForm.find('[name=PpdDiscount]').val();
        //let NetPurRate = (parseFloat(Qty) * parseFloat(PurRate));
        let Tax = $thisForm.find('[name=TaxAmount]').val();
        let saldisper = 0;
        let saldisc = 0;
        let profitpersn;
        let profit;

        if (DisOpt == 2 /*|| DisOpt == 3*/) {
            saldisper = (parseFloat(saleDiscount) * 100) / parseFloat(SalePrice);
            $thisForm.find('[name=PpdDisper]').val(saldisper.toFixed(2))
            $thisForm.find('[name=PpdDiscount]').val(saleDiscount);
        }

        let singletax = parseFloat(Tax) / parseFloat(Qty);

        profit = (parseFloat(SalePrice) - ((parseFloat(NetPurRate) / parseFloat(Qty))) - (parseFloat(saldisc) ));

        $thisForm.find('[name=PpdProAmnt]').val(profit.toFixed(2));
        console.log('Profit profit >', profit);

        profitpersn = /*(parseFloat(SalePrice) - ((parseFloat(NetPurRate) / Qty)) - (parseFloat(saldisc) - parseFloat(singletax)))*/profit * (100 / ((parseFloat(NetPurRate) / Qty)));
        $thisForm.find('[name=PpdProPer]').val(profitpersn.toFixed(2));
        console.log('Profit per >', profitpersn);
    }
    function CalculateRate(ele) {
        let $modal = $(ele).closest('.modal');
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let PurRate = $thisForm.find('[name=PpdRate]').val() == "" ? "0" : $thisForm.find('[name=PpdRate]').val();
        let Qty = $thisForm.find('[name=PpdQuantity]').val() == "" ? "0" : $thisForm.find('[name=PpdQuantity]').val();
        let NetPur = $thisForm.find('[name=NetPurchase]').val() == "" ? "0" : $thisForm.find('[name=NetPurchase]').val();
        $thisForm.find('[name=PpdQuantity]').val(NetPur / PurRate);
        $thisForm.find('[name=PpdRate]').val(NetPur / Qty);
    }
    function CalcActualQuantity(ele,upasscount) {
        //debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let Qttydata = $thisForm.data('quantitydata');
        if (Qttydata != '') {

            $.each(Qttydata, function (key, value1) {
                $thisForm.find('[name=PpdShortage]').val(value1.PpdShortage);
                $thisForm.find('[name=Ppdless]').val(value1.Ppdless);
                $thisForm.find('[name=PpdFreeQuantity]').val(value1.PpdFreeQuantity);
            });
        }

        let qty = $thisForm.find('[name=PpdQuantity]').val() == "" ? "0" : $thisForm.find('[name=PpdQuantity]').val();
        let nounit = $thisForm.find('[name=NoOfUnits]').val() == "" ? "0" : $thisForm.find('[name=NoOfUnits]').val();
        let SalePrice = $thisForm.find('[name=SalPrice]').val() == "" ? "0" : $thisForm.find('[name=SalPrice]').val();
        let unitcount = $thisForm.find('[name="UnitID"]').children(":selected").attr('UnitCounts');
        //let Shortage = $thisForm.find('[name=PpdShortage]').val() == "" ? "0" : $thisForm.find('[name=PpdShortage]').val();
        //let less = $thisForm.find('[name=Ppdless]').val() == "" ? "0" : $thisForm.find('[name=Ppdless]').val();
        //let freeqty = $thisForm.find('[name=PpdFreeQuantity]').val() == "" ? "0" : $thisForm.find('[name=PpdFreeQuantity]').val();
        let $modal2 = $thisForm.find('#formGroupModalQuantity');
        let Shortage = $modal2.find('#PpdShortage').val() == "" ? "0" : $modal2.find('#PpdShortage').val();
        let less = $modal2.find('#Ppdless').val() == "" ? "0" : $modal2.find('#Ppdless').val();



        let freeqty = $modal2.find('#PpdFreeQuantity').val() == "" ? "0" : $modal2.find('#PpdFreeQuantity').val();
        //alert(Shortage);
        //alert(less);
        let ActQty = 0.000;

            if (unitcount == undefined) {
                ActQty = (parseFloat(upasscount) * parseFloat(qty) + parseFloat(freeqty) - parseFloat(less) - parseFloat(Shortage));
            }
            else {
                ActQty = (parseFloat(unitcount) * parseFloat(qty) + parseFloat(freeqty) - parseFloat(less) - parseFloat(Shortage));
            }
            console.log('UNIT NEW>', unitcount); //alert(qty);

        $thisForm.find('[name=PpdActualQuantity]').val(ActQty.toFixed(3));
        if (SalePrice > 0) {
            Discountcalculation(ele, 1);
            //Discountcalculation(ele, 2);
        }

    }



        function ShowOtherCharges(ele,mode) {
            //debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let Othrinfo = [];
        if ($thisForm.data('pOthrChgData')) {


            if ($thisForm.data('pOthrChgData').length > 0) {
                if (otherchgcalled = 0)
                {
                     othrchargelst = $thisForm.data('pOthrChgData');
                }
            }
        }
        //else {
            BindChargeDetails("1", 'formGroupModalOtherCharge', ele)
        //}

            }
     var othrchargelst="";

    function BindChargeDetails(Mode, ModalID, ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');

        var InputData =
        {
            TransMode: PurchaseTransMode,
        }


        $.ajax({
            url: "@Url.Action("GetOtherCharges","Purchase")",
            type: "Get",
            data: InputData,
            dataType: "json",
            contentType: "application/json",
            success: function (ajaxOutput) {
                if (ajaxOutput.OtherCharges.Process.IsProcess) {
                         var CheckListHTML = '';

                         if (ajaxOutput.OtherCharges.Data.length > 0) {
                             //---



                             $.each(ajaxOutput.OtherCharges.Data, function (i, value) {
                                 console.log('Transtypelist',ajaxOutput.Transtypelist.Data)

                                 let options = ''
                                 if (othrchargelst != '') {

                                     $.each(othrchargelst, function (key, value1) {

                                         if (value1.ID_OtherChargeType == value.ID_OtherChargeType) {

                                             value.OctyAmount = value1.OctyAmount;
                                             $.each(ajaxOutput.Transtypelist.Data, function (i, valuea) {
                                                 if (valuea.TransTypeID.toString() == value1.OctyTransType) {

                                                     options += '<option value=' + valuea.TransTypeID + ' selected="selected">' + valuea.TransType + '</option>'
                                                 }
                                                 else {
                                                     options += '<option value=' + valuea.TransTypeID + '>' + valuea.TransType + '</option>'
                                                 }
                                             });
                                         }


                                     });

                                 }
                                 else
                                 {

                                     $.each(ajaxOutput.Transtypelist.Data, function (i, valuea) {
                                         options += '<option value=' + valuea.TransTypeID + '>' + valuea.TransType + '</option>'
                                     });
                                     //---

                                 }
                                 console.log('optionsl', options)
                                 let $dropdown = '<select class="form-control"name="selector" id="selector" >' + options + '</select>';
                                 CheckListHTML += "<tr>";
                                 CheckListHTML += "<td>" + value.SlNo + "</td>";
                                 CheckListHTML += "<td Class='jq_ID_OtherChargeType_td' Style='Display:none'>" + value.ID_OtherChargeType + "</td>";
                                 CheckListHTML += "<td Class='jq_Type_td'>" + value.OctyName + "</td>";
                                 CheckListHTML += "<td class='jq_TransType_td'>" + $dropdown + "</td>";
                                 CheckListHTML += "<td class='jq_OtherChagAmnt_td' ><input min='0'  class='form-control text-right' type='number' onkeypress='return isNumberKey(event)' value='" + (value.OctyAmount).toFixed(2) + "' ' /></td> /></td>";

                                 CheckListHTML += "</tr>";
                             })
                         }
                         else {
                             CheckListHTML += "<div class='form-group col-md-6'>";
                             CheckListHTML += "<div class='form-check mb-2'>";
                             CheckListHTML += "<label class='form-check-label' for='check1'>No Records...</label>";
                             CheckListHTML += "</div></div>"
                         }
                         //let $model = createSearchModalDOM();
                         //$model.modal.find('.modal-body').append(CheckListHTML);
                         //$model.show
                    $('#formGroupModalOtherCharge').modal({ backdrop: 'static', keyboard: false })
                    $("#formGroupModalOtherChargebody").html(CheckListHTML)
                    $('#formGroupModalOtherCharge').modal('show');


                        // $thisForm.find('[name=TaxAmount]').val(sum);
                     }
                else {

                    $.each(ajaxOutput.OtherCharges.Process.Message, function (key, value) {
                             NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                         });
                     }
                },
                complete: function () {
                    $(ele).prop('disabled', false);
                    $('select').selectpicker('refresh');
                }
            });
            }


            function GetPaymentlists(ele) {
                $('#formGroupModalpayment').modal({ backdrop: 'static', keyboard: false })
                 $('#formGroupModalpayment').modal('show');
    }
    function isNumberKey(evt) {
        var charCode = (evt.which) ? evt.which : event.keyCode
        if (charCode > 31 && (charCode < 46 || charCode > 57))
            return false;

        return true;
    }
    var otherchgcalled = 0;
    function BindOtherChargeAmount(ele) {
        otherchgcalled == 1;
        console.log('inside binddatat fn')
        let $modal = $(ele).closest('.modal');
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let sum = 0;
         othrchargelst = [];
        $modal.find('table tbody').find('tr').each(function () {

            let value = parseFloat($(this).find('.jq_OtherChagAmnt_td').find('input').val());;
            if ($(this).find('.jq_OtherChagAmnt_td').find('input').val() == '' || $(this).find('.jq_OtherChagAmnt_td').find('input').val() == null) {
                value = 0;
            }

            if (parseInt($(this).find('.jq_TransType_td').find('select').val()) == 0) {
                value = value * 0;
            }
            else if (parseInt($(this).find('.jq_TransType_td').find('select').val()) == 1) {
                value = value * 1;
            }
            else {
                value = value * -1;
            }
            sum = parseFloat(sum) + value;

            let othrcharge = {
                ID_OtherChargeType: $(this).find('.jq_ID_OtherChargeType_td').text(),
                OctyTransType: $(this).find('.jq_TransType_td').find('select').val(),
                OctyAmount: parseFloat($(this).find('.jq_OtherChagAmnt_td').find('input').val())
                };
            othrchargelst.push(othrcharge);
            console.log('othrchargelst', othrchargelst)

        });

        $thisForm.find('[name=OtherCharge]').val(sum.toFixed(2));
        RoundOffCalc(ele);
    }




      function fn_selectUnit(ele) {
         let UnitID = $(ele).val();

         let $thisForm = $(ele).closest('[perfect-class="form"]');
         let Mode =$thisForm.find('[name=Mode]').val();


         $.ajax({
                 url: "@Url.Action("GetUnitList", "Purchase")",
                type: "POST",

             data: JSON.stringify({ UnitID: UnitID, Mode: Mode}),
                dataType: "json",
                contentType: "application/json",
             success: function (ajaxOutput) {
                 if (ajaxOutput.Process.IsProcess) {
                     //alert(ajaxOutput.Data[0].NoOfUnit);

                     $thisForm.find('[name=NoOfUnits]').val(ajaxOutput.Data[0].NoOfUnit);

                     }
                     else {
                     $.each(ajaxOutput.Process.Message, function (key, value) {
                             //toastr.warning(value, "Error");
                             NotificationMessage({ 'type': 'info', 'heading': 'info', 'message': value });
                         });
                     }
                     }

                 });


    }
    function RoundOffCalcTotal(ele) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        var RoundOff = $thisForm.find('[name=RoundOff]').val() == "" ? "0" : $thisForm.find('[name=RoundOff]').val();
        var BillTotal = $thisForm.find('[name=BillTotal]').val() == "" ? "0" : $thisForm.find('[name=BillTotal]').val();
        var OtherCharge = $thisForm.find('[name=OtherCharge]').val() == "" ? "0" : $thisForm.find('[name=OtherCharge]').val();
        var Discount = $thisForm.find('[name=Discount]').val() == "" ? "0" : $thisForm.find('[name=Discount]').val();
        var AdvanceAmount = $thisForm.find('[name=AdvanceAmount]').val() == "" ? "0" : $thisForm.find('[name=AdvanceAmount]').val();
        var totalAmount = $thisForm.find('[name=NetAmount]').val() == "" ? "0" : $thisForm.find('[name=NetAmount]').val();
        var Total = parseFloat(BillTotal) + parseFloat(OtherCharge) + parseFloat(RoundOff) - parseFloat(Discount) - parseFloat(AdvanceAmount);
        //var Total = parseFloat(totalAmount) + + parseFloat(RoundOff);
        $thisForm.find('[name=NetAmount]').val(Total.toFixed(2));
       // alert(Total);
        var amtWords = amtInWords(Total);
        if (parseFloat(RoundOff) == 0 || RoundOff=='')
        {
            RoundOffCalc(ele);
        }
       // alert(amtWords);
        //$("#lbAmountWords").text(amtWords);


    }

    function amtInWords(amount) {

        var decAmount = amount;
        var sUnits = new Array(20);
        var sTens = new Array(8);
        var sHundreds = new Array(6);
        var sAmount;
        var i, iLenAmount, iDecPart, iIntegerPart;

        sUnits[1] = '';
        sUnits[2] = 'One';
        sUnits[3] = 'Two';
        sUnits[4] = 'Three';
        sUnits[5] = 'Four';
        sUnits[6] = 'Five';
        sUnits[7] = 'Six';
        sUnits[8] = 'Seven';
        sUnits[9] = 'Eight';
        sUnits[10] = 'Nine';
        sUnits[11] = 'Ten';
        sUnits[12] = 'Eleven';
        sUnits[13] = 'Twelve';
        sUnits[14] = 'Thirteen';
        sUnits[15] = 'Fourteen';
        sUnits[16] = 'Fifteen';
        sUnits[17] = 'Sixteen';
        sUnits[18] = 'Seventeen';
        sUnits[19] = 'Eighteen';
        sUnits[20] = 'Ninteen';
        sTens[1] = 'Twenty';
        sTens[2] = 'Thirty';
        sTens[3] = 'Forty';
        sTens[4] = 'Fifty';
        sTens[5] = 'Sixty';
        sTens[6] = 'Seventy';
        sTens[7] = 'Eighty';
        sTens[8] = 'Ninety';
        sHundreds[1] = 'Hundred';
        sHundreds[2] = 'Thousand';
        sHundreds[3] = 'Lakh';
        sHundreds[4] = 'Crore';
        if (decAmount == 10000000000000) {
            decAmount = 9999999999999.99;
        }
        if (decAmount == 0) {
            return "";
        }

        iDecPart = (decAmount - Math.round(decAmount)) * 100;
        iDecPart = Math.round(iDecPart);

        //Because Math.round results .50,.52,.53.......98,.99 in negative values

        if (iDecPart < 0) {
            iDecPart = 100 + iDecPart;
        }

        if (iDecPart == 0) {
            decAmount = decAmount;
        }
        else {
            decAmount = Math.round(decAmount - (iDecPart / 100));
        }

        iLenAmount = ((String)(decAmount)).length;

        if (iLenAmount == 1) {
            var index = parseInt(decAmount) + 1;
            sAmount = sUnits[index];
        }
        else {
            for (i = iLenAmount; i > 0; i--) {
                if (i == 13 || i == 12) {
                    iIntegerPart = parseInt(decAmount / 100000000000);
                    decAmount = parseInt(decAmount % 100000000000);
                    if (iIntegerPart == 0) {
                        sAmount = sAmount;
                    }
                    else {
                        if (iIntegerPart < 20) {
                            sAmount = sUnits[iIntegerPart + 1] + " " + sHundreds[6] + " ";
                        }
                        else {
                            sAmount = sTens[parseInt(iIntegerPart / 10) - 1] + " " + sUnits[(iIntegerPart - parseInt(iIntegerPart / 10) * 10) + 1] + " " + sHundreds[6] + " "
                        }
                    }
                }
                else if (i == 11 || i == 10) {
                    iIntegerPart = parseInt(decAmount / 1000000000);
                    decAmount = parseInt(decAmount % 1000000000);
                    if (iIntegerPart == 0) {
                        sAmount = sAmount;
                    }
                    else {
                        if (iIntegerPart < 20) {
                            if (sAmount == null) {
                                sAmount = sUnits[iIntegerPart + 1] + " " + sHundreds[5] + " ";
                            }
                            else {
                                sAmount = sAmount + " " + sUnits[iIntegerPart + 1] + " " + sHundreds[5] + " ";
                            }
                        }
                        else {
                            if (sAmount == null) {
                                sAmount = sTens[parseInt(iIntegerPart / 10) - 1] + " " + sUnits[(iIntegerPart - parseInt(iIntegerPart / 10) * 10) + 1] + " " + sHundreds[5] + " ";
                            }
                            else {
                                sAmount = sAmount + " " + sTens[parseInt(iIntegerPart / 10) - 1] + " " + sUnits[(iIntegerPart - parseInt(iIntegerPart / 10) * 10) + 1] + " " + sHundreds[5] + " ";
                            }
                        }
                    }
                }
                else if (i == 9 || i == 8) {
                    iIntegerPart = parseInt(decAmount / 10000000);
                    decAmount = parseInt(decAmount % 10000000);
                    if (iIntegerPart == 0) {
                        sAmount = sAmount;
                    }
                    else {
                        if (iIntegerPart < 20) {
                            if (sAmount == null) {
                                sAmount = sUnits[iIntegerPart + 1] + " " + sHundreds[4] + " ";
                            }
                            else {
                                sAmount = sAmount + " " + sUnits[iIntegerPart + 1] + " " + sHundreds[4] + " ";
                            }
                        }
                        else {
                            if (sAmount == null) {
                                sAmount = sTens[parseInt(iIntegerPart / 10) - 1] + " " + sUnits[(iIntegerPart - parseInt(iIntegerPart / 10) * 10) + 1] + " " + sHundreds[4] + " ";
                            }
                            else {
                                sAmount = sAmount + " " + sTens[parseInt(iIntegerPart / 10) - 1] + " " + sUnits[(iIntegerPart - parseInt(iIntegerPart / 10) * 10) + 1] + " " + sHundreds[4] + " ";
                            }
                        }
                    }
                }
                else if (i == 7 || i == 6) {
                    iIntegerPart = parseInt(decAmount / 100000);
                    decAmount = (decAmount % 100000);
                    if (iIntegerPart == 0) {
                        sAmount = sAmount;
                    }
                    else {
                        if (iIntegerPart < 20) {
                            if (sAmount == null) {
                                sAmount = sUnits[iIntegerPart + 1] + " " + sHundreds[3] + " ";
                            }
                            else {
                                sAmount = sAmount + " " + sUnits[iIntegerPart + 1] + " " + sHundreds[3] + " ";
                            }
                        }
                        else {
                            if (sAmount == null) {
                                sAmount = sTens[parseInt(iIntegerPart / 10) - 1] + " " + sUnits[(iIntegerPart - parseInt(iIntegerPart / 10) * 10) + 1] + " " + sHundreds[3] + " ";
                            }
                            else {
                                sAmount = sAmount + " " + sTens[parseInt(iIntegerPart / 10) - 1] + " " + sUnits[(iIntegerPart - parseInt(iIntegerPart / 10) * 10) + 1] + " " + sHundreds[3] + " ";
                            }
                        }
                    }
                }
                else if (i == 5 || i == 4) {
                    iIntegerPart = parseInt(decAmount / 1000);
                    decAmount = (decAmount % 1000);
                    if (iIntegerPart == 0) {
                        sAmount = sAmount;
                    }
                    else {
                        if (iIntegerPart < 20) {
                            if (sAmount == null) {
                                sAmount = sUnits[iIntegerPart + 1] + " " + sHundreds[2] + " ";
                            }
                            else {
                                sAmount = sAmount + " " + sUnits[iIntegerPart + 1] + " " + sHundreds[2] + " ";
                            }
                        }
                        else {
                            if (sAmount == null) {
                                sAmount = sTens[parseInt(iIntegerPart / 10) - 1] + " " + sUnits[(iIntegerPart - parseInt(iIntegerPart / 10) * 10) + 1] + " " + sHundreds[2] + " ";
                            }
                            else {
                                sAmount = sAmount + " " + sTens[parseInt(iIntegerPart / 10) - 1] + " " + sUnits[(iIntegerPart - parseInt(iIntegerPart / 10) * 10) + 1] + " " + sHundreds[2] + " ";
                            }
                        }
                    }
                }
                else if (i == 3) {
                    iIntegerPart = parseInt(decAmount / 100);
                    decAmount = (decAmount % 100);
                    if (iIntegerPart == 0) {
                        sAmount = sAmount;
                    }
                    else {
                        var index;
                        index = parseInt(iIntegerPart) + 1;
                        if (sAmount == null) {
                            sAmount = sUnits[index] + " " + sHundreds[1] + " ";
                        }
                        else {
                            sAmount = sAmount + " " + sUnits[index] + " " + sHundreds[1] + " ";
                        }
                    }
                }
                else if (i == 2) {
                    decAmount = parseInt(eval(decAmount));
                    if (decAmount < 20) {
                        var index = parseInt(decAmount) + 1;
                        if (sAmount == null) {
                            sAmount = sUnits[index];
                        }
                        else {
                            sAmount = sAmount + " " + sUnits[index];
                        }
                    }
                    else {
                        var a = parseInt(((decAmount / 10) - 1));
                        var b = (decAmount % 10) + 1;
                        if (sAmount == null) {
                            sAmount = sTens[a] + " " + sUnits[b];
                        }
                        else {
                            sAmount = sAmount + " " + sTens[a] + " " + sUnits[b];
                        }
                    }
                }
            }
        }
        if (iDecPart == 0) {
            sAmount = "Rs. " + sAmount;
        }
        else if (sAmount == "") {
            sAmount = "Paise ";
        }
        else {
            sAmount = "Rs. " + sAmount + " And Paise";
        }

        if (iDecPart < 20) {
            sAmount = sAmount + " " + sUnits[iDecPart + 1] + " ";
        }
        else {
            var fi = parseInt(((iDecPart / 10) - 1));
            var fii = parseInt((iDecPart % 10)) + 1;
            sAmount = sAmount + " " + sTens[fi] + " " + sUnits[fii] + " ";
        }

        sAmount = sAmount + "Only";

        return sAmount;

    }


    function datecheck(ele) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        //invalid-feedback
        let upperlimit = $thisForm.find('[name="InvoiceDate"]').val();

        var enqDate = new Date(upperlimit);
        enqDate.setHours(0, 0, 0, 0)
        var today = new Date();
        today.setHours(0, 0, 0, 0)
        let errorclass = '.temptableErrors';
        if (enqDate > today) {

            console.log('inside limit check if')
            $thisForm.find('[name="InvoiceDate"]').closest('[perfect-class="formGroup"]').find(errorclass).attr("style", "display:block");
            $thisForm.find('[name="InvoiceDate"]').closest('[perfect-class="formGroup"]').find(errorclass).text('Invoice Date should be less than or equal to Todays date')
        }
        else {
            $thisForm.find('[name="InvoiceDate"]').closest('[perfect-class="formGroup"]').find(errorclass).attr("style", "display:none");
            $thisForm.find('[name="InvoiceDate"]').closest('[perfect-class="formGroup"]').find(errorclass).text('')
        }

    }

    function fn_showimportlists(ele) {
      debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');

        switch (parseInt($thisForm.find('[name="Supplier"]').val())) {
            case 1:
                GetCmnPopUpSearchValAssign(ele, 169, 'Supplier List', [], ['SupplierID', 'SupplierName', 'CustomeName','Statecode'], PurchaseTransMode);
                break;
            case 2:
                GetCmnPopUpSearchValAssign(ele, 173, 'Purchase Order List', [], ['FK_PurchaseOrder', 'SupplierID', 'SupplierName', 'AdvanceAmount','Statecode'], PurchaseTransMode);

                break;
            default:
                NotificationMessage({ 'type': 'info', 'heading': 'info', 'message': 'Please Select Import From' });
                break;



        }
    }
    function fun_imports(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        if ($thisForm.find('[name="Supplier"]').val() == 1) {
            document.getElementById("Newsupplieraddbutton").style.display = 'block';
            $('.DivAdvanceAmount').hide();
        }
        else if ($thisForm.find('[name="Supplier"]').val() == 2)
        {
            document.getElementById("Newsupplieraddbutton").style.display = 'none';
            $('.DivAdvanceAmount').show();
        }
        else {
            document.getElementById("Newsupplieraddbutton").style.display = 'none';
            $('.DivAdvanceAmount').hide();
        }

        let $tblcontainer = $thisForm.find('[perfect-tempTable="Purchase"]');
        tax = [];
        othrchargelst = [];
        OtherCharge = [];

        $thisForm.data({ pDatas: null });
        $thisForm.data({ pData: null });
        $thisForm.data({ pDataTax: null });
        $thisForm.data({ pOthrChgData: null });
        $thisForm.data({ pTranstype: null });
        $thisForm.data({ pPurchaseproduct: null });
        $thisForm.data({ prtTaxData: null });
        $thisForm.data({ prtothchgData: null });

        $tblcontainer.empty();
        $thisForm.data({ quantitydata: '' });
        $thisForm.data({ pdiscdata: '' });
        $thisForm.data({ saldisdata: '' });

        ResetButtontable(ele);
        Getdepartmentdefault();

        $thisForm.find('[name="BillTotal"]').val('');
        $thisForm.find('[name="Discount"]').val('');
        $thisForm.find('[name="OtherCharge"]').val('');
        $thisForm.find('[name="RoundOff"]').val('');
        $thisForm.find('[name="NetAmount"]').val('');
        $thisForm.find('[name="PayableAmount"]').val('');
        $thisForm.find('[name="FK_PurchaseOrder"]').val('');
        $thisForm.find('[name="AdvanceAmount"]').val('');

        $thisForm.find('[name="SupplierID"]').val('');
        $thisForm.find('[name="SupplierName"]').val('');
        $thisForm.find('[name="InvoiceNo"]').val('');
        $thisForm.find('[name="InvoiceDate"]').val(moment().format('YYYY-MM-DD'));

    }
     function Getdepartmentdefault() {
         let $thisForm = $('[perfect-class="form"]');
         $.ajax({
             url: '@Url.Action("GetEmployeeLeadDefault", "LeadGeneration")',
             type: "Get",
             dataType: "json",
             contentType: "application/json",
             success: function (ajaxOutput) {//<----- if ajax method executed succesfully,  we get the data passed from controller in this variable  => success: function (variable) {

                 if (ajaxOutput.Process.IsProcess) {
                     //var stateModel = createSelectList({ data: ajaxOutput.Data, hideColumn: ['EmpID'] });
                     $.each(ajaxOutput.Data, function (key, value) {

                         console.log('>_ Search button > list click', value);
                         $thisForm.find('[name=DepartmentID]').val(value.FK_Department);
                         $thisForm.find('[name=DepartmentName]').val(value.DeptName);


                     });

                 }
                 else {
                     $.each(ajaxOutput.Process.Message, function (key, value) {
                         NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                     });
                 }
             },
         });
     }
    function ResetButtontable(ele)
    {
        let $container = $(ele).closest('[perfect-class="form"]');
        $container.find('[name=ProductID]').val('0')
        $container.find('[name=ProName]').val('');
        $container.find('[name="UnitID"]').val('').selectpicker('refresh');
        $container.find('[name=PpdBarCode]').val('');
        $container.find('[name=PpdQRCode]').val('');
        $container.find('[name=PpdQuantity]').val('');
        $container.find('[name=PpdShortage]').val('');
        $container.find('[name=PpdFreeQuantity]').val('');
        $container.find('[name=PpdActualQuantity]').val('');
        $container.find('[name=Ppdless]').val('');
        $container.find('[name=PpdRate]').val('');
        $container.find('[name=PpdpurDiscper]').val('');
        $container.find('[name=PpdpurDis]').val('');
        $container.find('[name=NetPurchase]').val('');
        $container.find('[name=TaxAmount]').val('');
        $container.find('[name=IncludeTax]').prop('checked', false);
        $container.find('[name=TaxAmount]').val('');
        $container.find('[name=MRP]').val('');
        $container.find('[name=SalPrice]').val('');
        $container.find('[name=PpdDisper]').val('');
        $container.find('[name=PpdDiscount]').val('');
        $container.find('[name=PpdProPer]').val('');
        $container.find('[name=PpdProAmnt]').val('');
        $container.find('[name=Description]').val('');
    }
    function productclear(ele, tablekey) {

        let $thisform = $(ele).closest('[perfect-class="form"]');
        //debugger
        $thisform.data({ quantitydata: '' });
        $thisform.data({ pdiscdata: '' });
        $thisform.data({ saldisdata: '' });
        $thisform.find('.btnPerfectGridDelete').closest('.btnPerfectGrid ').prop('disabled', false);
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="select"]').val('').selectpicker('refresh');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="date"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="hidden"]').val('');
        $('input[type=checkbox]').prop('checked', false);

        $thisform.find('[name=PpdpurDis]').val('');
        $thisform.find('[name=PpdpurDiscper]').val('');
        $thisform.find('[name="PpdShortage"]').val('');
        $thisform.find('[name="PpdFreeQuantity"]').val('');
        $thisform.find('[name="Ppdless"]').val('');

          //let $tblcontainer = $thisform.find('[perfect-tempTable="' + tablekey + '"]');
        //let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;

        //$tblcontainer.attr('perfect-tempTable-action', 0);
        let lastIndex = 0;
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');
        if ($tblcontainer.find("tbody tr").length > 0) {
            lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;

        } $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex);



        if (tablekey = "Purchase") {
            $thisform.find('[name=prdbtn]').removeAttr("disabled", "disabled")

        }
        else if (tablekey = "Warranty") {

        }
        else if (tablekey = "Payment") {

        }
    }

    function fillTable(ele, tkey, data, tableOptionsTempOut)
    {

        let $thisForm = $(ele).closest('[perfect-class="form"]');

        let tableOptionsTemp = tableOptionsTempOut;
        let insertData = []
        let tableKey = tkey;

        let indexname = tkey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);

        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');


        $.each(data, function (keyOne, valOne) {

            let pData = {};

            pData[indexname] = keyOne + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', pData[indexname])
            //---

            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                console.log('name', valOne[nameAttr])
                if (typeof valOne[nameAttr] !== undefined) {

                    if ($this.is('select')) {


                        tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                        tableOptionsTemp.hideColumn.push(nameAttr);
                        //displat text of select
                        pData[nameAttr + '_d'] = $this.find('[value="' + valOne[nameAttr] + '"]').text();
                        pData[nameAttr] = valOne[nameAttr];
                        console.log('select', $this.find('options[value="' + valOne[nameAttr] + '"]').text());

                    }
                    else if ($this.is('input')) {

                        let inputType = $this.attr('type').toLocaleLowerCase();
                        console.log(inputType)
                        if (inputType == 'checkbox') {

                            pData[nameAttr] = valOne[nameAttr];

                            tableOptionsTemp.isCheckType.push(nameAttr);

                            console.log('checkbox', nameAttr)


                        }
                        else if (inputType == 'hidden') {

                            tableOptionsTemp.hideColumn.push(nameAttr);
                            pData[nameAttr] = valOne[nameAttr];


                        }
                        else if (inputType == 'date') {


                            pData[nameAttr] = moment(valOne[nameAttr]).format('YYYY-MM-DD');


                        }
                        else {
                            pData[nameAttr] = valOne[nameAttr];


                        }
                    }
                    else {
                        pData[nameAttr] = valOne[nameAttr];


                    }
                }



            });

            insertData.push(pData);


            //----

        });
        $tblcontainer.empty();
        $tblcontainer.append(pft_table_createtable(insertData, tableOptionsTemp));
        // $tblcontainer.find('table').dataTable({ paging: true });

    }

    function Getproductunit(ele) {
       // console.log('hai', ProductID);
        let $thisForm = $(ele).closest('[perfect-class="form"]');

        let productId = {
             __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
            'ProductID': $thisForm.find('[name="ProductID"]').val()
        };
          $.ajax({
          url: '@Url.Action("GetProductUnit", "Purchase")',
          type: "POST",
          data: productId ,
          dataType: "json",
          contentType: "application/x-www-form-urlencoded;charset=utf-8",
          success: function (ajaxOutput) {//<----- if ajax method executed succesfully,  we get the data passed from controller in this variable  => success: function (variable) {

                  if (ajaxOutput.Process.IsProcess) {

                      if (ajaxOutput.Data) {

                          $thisForm.find('[name="UnitID"]').val(ajaxOutput.Data[0].ID_Unit).selectpicker('refresh');
                          $thisForm.find('[name="UnitID"]').children(":selected").attr('UnitCounts');
                      }
                  }
              },
              complete: function () {
                  CalcActualQuantity(ele, $thisForm.find('[name="UnitID"]').children(":selected").attr('UnitCounts'));
              }
          });
    }



    function ClearsaleDiscount(ele)
    {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let SalePrice = $thisForm.find('[name=SalPrice]').val() == "" ? "0" : $thisForm.find('[name=SalPrice]').val();
        let profper = $thisForm.find('[name=PpdProPer]').val() == "" ? "0" : $thisForm.find('[name=PpdProPer]').val();
        let prof = $thisForm.find('[name=PpdProAmnt]').val() == "" ? "0" : $thisForm.find('[name=PpdProAmnt]').val();
        let salediscountper = $thisForm.find('[name=PpdDisper]').val() == "" ? "0" : $thisForm.find('[name=PpdDisper]').val();
        let saleDiscount = $thisForm.find('[name=PpdDiscount]').val() == "" ? "0" : $thisForm.find('[name=PpdDiscount]').val();
        let Qty = $thisForm.find('[name=PpdQuantity]').val();
        let PurRate = $thisForm.find('[name=PpdRate]').val()
        //let NetPurRate = $thisForm.find('[name=NetPurchase]').val();
        let NetPurRate = (parseFloat(Qty) * parseFloat(PurRate));
        let Tax = $thisForm.find('[name=TaxAmount]').val();


        $thisForm.find('[name=PpdDisper]').val('0');
        $thisForm.find('[name=PpdDiscount]').val('0');
        $thisForm.data({ saldisdata: '' });
        Discountcalculation(ele, 1);
    }
    function ClearsaleDiscountpopup(ele) {
        //debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let dispers= $thisForm.find('[name=PpdDisper]').val();
        let discount = $thisForm.find('[name=PpdDiscount]').val();
        let saldisdatas = $thisForm.data('saldisdata');
        if (saldisdatas != '') {
            $.each(saldisdatas, function (key, value1) {
                $thisForm.find('[name=PpdDisper]').val(value1.saledisper);
                $thisForm.find('[name=PpdDiscount]').val(value1.saledisc);
            });
        }
        else {
            $thisForm.find('[name=PpdDisper]').val(0);
            $thisForm.find('[name=PpdDiscount]').val(0);
        }

            Discountcalculation(ele, 1);

    }


    function BindSaleDiscount(ele)
    {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let SalePrice = $thisForm.find('[name=SalPrice]').val() == "" ? "0" : $thisForm.find('[name=SalPrice]').val();
        let saleDiscount = $thisForm.find('[name=PpdDiscount]').val() == "" ? "0" : $thisForm.find('[name=PpdDiscount]').val();
        let saleDiscountper = $thisForm.find('[name=PpdDisper]').val() == "" ? "0" : $thisForm.find('[name=PpdDisper]').val();
        let saleprofper = $thisForm.find('[name=PpdProPer]').val() == "" ? "0" : $thisForm.find('[name=PpdDisper]').val();
        let saleprof= $thisForm.find('[name=PpdProAmnt]').val() == "" ? "0" : $thisForm.find('[name=PpdDisper]').val();
        //let ActualSalePrice = parseFloat(SalePrice) - parseFloat(saleDiscount);
        //$thisForm.find('[name=SalPrice]').val(ActualSalePrice.toFixed(2));

        var q = [];
        let saldis = {
            saledisc: saleDiscount,
            saledisper: saleDiscountper,
        }
        q.push(saldis);
        console.log('saldis', saldis);
        $thisForm.data({ saldisdata: q });
        $('#formGroupModalDisc').modal({ backdrop: 'static', keyboard: false });
        $('#formGroupModalDisc').modal('hide');
    }

    function ShowDiscDetails(ele) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        //let $thisForm = $(ele).closest('[perfect-class="form"]');
        if ($thisForm.find('[name="SalPrice"]').val()> 0) {

            let $model = $(ele).closest('[perfect-class="formGroup"]').find('[perfect-class="formGroupModalDisc"]');
            $('#formGroupModalDiscs').modal({ backdrop: 'static', keyboard: false });
            $(ele).closest('[perfect-class="formGroup"]').find('[perfect-class="formGroupModalDisc"]').modal('show');

            let saldisdatas = $thisForm.data('saldisdata');
            if (saldisdatas != '') {
                $.each(saldisdatas, function (key, value1) {
                    $thisForm.find('[name=PpdDisper]').val(value1.saledisper);
                    $thisForm.find('[name=PpdDiscount]').val(value1.saledisc);
                });
            }
            //if ($thisForm.find('[name=PpdDisper]').val() == 0)
            //{
            //    Discountcalculation(ele, 1);
            //}
            else {
                $('#formGroupModalDisc').on('hidden.bs.modal', function (event) {
                    //$('#formGroupModalQuantity').empty();
                    $thisForm.find('[name=PpdDisper]').val('');
                    $thisForm.find('[name=PpdDiscount]').val('');

                });
            }

            $(ele).closest('[perfect-class="formGroup"]').find('.temptableError').text('');
        }
        else {

            $(ele).closest('[perfect-class="formGroup"]').find('.temptableError').text('Please Enter Sale Price');
        }
    }
    function PurchaseNetDiscount(ele, field) {
      //debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let BillTotal = $thisForm.find('[name=BillTotal]').val() == "" ? "0" : $thisForm.find('[name=BillTotal]').val();
        let discount = $thisForm.find('[name=Discount]').val() == "" ? 0 : $thisForm.find('[name=Discount]').val();
        let discountPer = $thisForm.find('[name=DiscountPerc]').val() == "" ? 0 : $thisForm.find('[name=DiscountPerc]').val();
        let discountamount = 0;
        let discountPerc = 0;
        if (parseFloat(discount) > parseFloat(BillTotal)) {
            //$('[name="Discount"]').addClass('perfectValidate_string');
        }
        else {
            $('[name="Discount"]').removeClass('perfectValidate_string');
        }
        if (field == 1) {
            discountamount = parseFloat(Number(BillTotal).toFixed(2)) * parseFloat(discountPer) / 100;
            $thisForm.find('[name=Discount]').val(Number(discountamount).toFixed(2) == "NaN" ? "0.00" : Number(discountamount).toFixed(2));
            $thisForm.find('[name=DiscountPerc]').val(Number(discountPer).toFixed(2) == "NaN" ? "0.00" : Number(discountPer).toFixed(2));
        }
        else if (field == 2) {
            if (parseFloat(discount) <= parseFloat(BillTotal)) {
                discountPerc = parseFloat(discount) * 100 / parseFloat(BillTotal);
                $thisForm.find('[name=DiscountPerc]').val(Number(discountPerc).toFixed(2) == "NaN" ? "0.00" : Number(discountPerc).toFixed(2));
                $thisForm.find('[name=Discount]').val(Number(discount).toFixed(2) == "NaN" ? "0.00" : Number(discount).toFixed(2));
                $(ele).closest('[perfect-class="formGroup"]').find('.temptableError').text('');
               // $thisForm.find('[perfect-tempTable-Purchase="PpdpurDis"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
            }
            else {
                //$thisForm.find('[name="Discount"]').addClass('perfectValidate_string');
                //$(ele).closest('[perfect-class="formGroup"]').find('.temptableError').text('Discount Amount Should not be greater than Purchase Rate');
               // $thisForm.find('[perfect-tempTable-Purchase="PpdpurDis"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('Discount Amount Should not be greater than Purchase Rate');
            }
        }
    }

    function decimalpnt(ele, id, range) {
        //debugger
        let input = $('#' + id);

        ele.value = ele.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');
        let t = ele.value;
        ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t;

        $(document).on('keydown', '#' + id, function (event) {

            if (ele.value.includes('.')) {

            }
            else if (ele.value === '.' && (event.key === '.' || event.keyCode === 190)) {
                ele.value = '0.00'; // Change the value to '0.00' if only a dot is entered
                // Prevent the dot from being entered in the input field
            }
            var key = event.keyCode || event.charCode;
            if (key == 8 || key == 46) { }
            else {
                if (ele.value.indexOf('.') < 0 && ele.value.indexOf('.') !== 9 && ele.value.length > 8) {
                    ele.value = ele.value + '.';
                }
            }

        });

    }

        function filterSpecialCharacters(event) {

            var input = event.target;
            var keyCode = event.which || event.keyCode;
            // Check if the pressed key is the pipe symbol (|)
            if (String.fromCharCode(keyCode) === '|') {
                // Prevent the default action of inserting the character
                event.preventDefault();
            }
        }

    $("#pssModalOtherCharges").on('hide.bs.modal', function () {
        $("#OtherChargePurchase").trigger("change");
    });
    </script>