@*/*----------------------------------------------------------------------
    Created By	: AmrithaAk
    Created On	: 23/07/2022
    Purpose		: PurchaseOrder
    -------------------------------------------------------------------------
    Modification
    On			By					OMID/Remarks
    -------------------------------------------------------------------------
    -------------------------------------------------------------------------*/*@

@model PerfectWebERP.Models.PurchaseOrderModel.PurchaseorderViewList
<style>
    .tableFixHead {
        overflow: auto;        
        height:auto;
        max-height:250px;
    }

        .tableFixHead thead tr {
            position: sticky;
            top: 0;
            z-index: 1;
        }

    table {
        border-collapse: collapse;
        width: 100%;
    }

    th, td {
        padding: 8px 16px;
    }

    th {
        background: var(--perfect-primary);
    }
</style>

<div class="card ">

    <div class="card-header">
        <h4 class="card-title col-12">@ViewBag.PageTitle</h4>
        <span title="To View List" onclick="fn_showListView();"><svg id="Layer_1" class="layer" stroke="currentColor" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" height="20" width="20" viewBox="0 0 122.88 122.54"><title>To View List</title><path class="viewlst" d="M4.69,0H46.22a4.71,4.71,0,0,1,4.69,4.69V46a4.69,4.69,0,0,1-4.69,4.69H4.69a4.65,4.65,0,0,1-3.31-1.38l-.09-.09A4.67,4.67,0,0,1,0,46V4.69A4.71,4.71,0,0,1,4.69,0ZM89.44,61.94a26.56,26.56,0,0,1,10.18,2l.07,0a26.61,26.61,0,0,1,15.25,32.16,26.18,26.18,0,0,1-2.7,6.11l10.3,11.24a1.27,1.27,0,0,1-.07,1.8l-7.57,6.9a1.27,1.27,0,0,1-1.79-.07l-9.86-10.85a26.36,26.36,0,0,1-6.1,2.74,26.87,26.87,0,0,1-7.71,1.13,26.51,26.51,0,0,1-10.17-2l-.07,0A26.64,26.64,0,0,1,64.85,78.37l0-.07A26.6,26.6,0,0,1,89.44,61.94Zm15,11.59a21.38,21.38,0,0,0-6.89-4.61l-.06,0a21.22,21.22,0,0,0-23.07,4.64l-.07.07a21.25,21.25,0,0,0-4.54,6.83l0,.06a21.32,21.32,0,0,0-1.58,8.06,21.26,21.26,0,0,0,29.35,19.62,21.54,21.54,0,0,0,6.89-4.61l.07-.07a21.09,21.09,0,0,0,4.54-6.83l0-.06a21.35,21.35,0,0,0,0-16.17,21.34,21.34,0,0,0-4.62-6.9ZM4.69,63.2H46.22a4.71,4.71,0,0,1,4.69,4.7v41.34a4.68,4.68,0,0,1-4.69,4.69H4.69A4.69,4.69,0,0,1,0,109.24V67.9a4.71,4.71,0,0,1,4.69-4.7ZM68.78,0h41.53A4.71,4.71,0,0,1,115,4.69V46a4.71,4.71,0,0,1-4.69,4.69H68.78A4.71,4.71,0,0,1,64.09,46V4.69a4.69,4.69,0,0,1,1.37-3.31l.1-.09A4.67,4.67,0,0,1,68.78,0Z"></path></svg></span>
    </div>
    <div class="card-body">
        <form id="" class="form-valide" perfect-class="form" action="#" method="post" perfect-onFormSuccess="">
            <div class="">

                <div class="row">

                    <div class="col-sm-3">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Order No</span>
                                @*<span class="text-danger">*</span>*@
                            </label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control perfectValidate_numeric" placeholder="" name="Number" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" value="@Model.PurordNo" disabled />
                                <input type="hidden" name="LastID" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="iPurchaseorderproductdetailnput" />
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-3">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Import From</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <div class="input-group">


                                    <select class="form-control perfectValidate_string" name="ImportID" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" onchange="clearfields(this)">
                                        <option value="">Please Select </option>
                                        <option value="1">Supplier</option>
                                        <option value="2">Quotation</option>


                                    </select>

                                    <div class="input-group-append" id="importpopup">
                                        <input type="hidden" name="FK_BranchCodePOrder" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" value="" />
                                        <button id="addcountry-jq-searchButton3" data-toggle="tooltip" data-placement="top" data-html="true" title="Import Data" class="btn btn-primary" type="button" perfect-css="button" onclick="fn_showimportlistsquotation(this)" Criterea1="BranchID" Criterea2="DepartmentID" Criterea3="FK_BranchCodePOrder" Function="1"><i class="las la-file-import la-lg"></i></button>
                                        <button id="customerbtn" class="btn btn-primary fa fa-building-o" type="button" perfect-css="button" onclick="fn_openNewSupplierWindow(this)" style="display:none" title="Add Supplier"></button>

                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-3">
                        <div class="form-group row" perfect-class="formGroup">

                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Reference No /Quotation No</span>
                                @*<span class="text-danger">*</span>*@
                            </label>
                            <div class="col-sm-8">
                                <input type="hidden" class="form-control " name="FK_Lead" />
                                <input type="text" class="form-control perfectValidate_specialCharName_nm" placeholder="" name="PurordQReferenceNo" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" maxlength="25"disabled />

                            </div>
                        </div>
                    </div>
                    <div class="col-sm-3">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Date</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="date" class="form-control perfectValidate_date" name="PurordDate" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" />
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-3">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Supplier</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <input type="text" class="form-control " name="Supplier" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled />
                                    <input type="hidden" name="SupplierID" class="perfectValidate_numeric" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                    <input type="hidden" name="QuotationID" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-3">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Department</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <select class="form-control perfectValidate_string" name="DepartmentID" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" data-live-search="true">

                                    <option value="">Please Select </option>

                                    @if (!(Model.DepartmentList is null))
                                    {
                                        foreach (var departmentList in Model.DepartmentList)
                                        {
                                            <option value="@departmentList.DepartmentID">@departmentList.DepartmentName</option>
                                        }

                                    }

                                </select>

                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <button type="button" class="btn btn-primary mr-3 " name="SmartFill" perfect-css="button" onclick="fn_PurchaseOrderForm_SmartFill(this)"><i class="fa fa-refresh fa-spin loaderClass"></i>Smart Fill</button>
                    </div>

                </div>

                
                <label type="hidden" class="col-sm-8 col-form-label" perfect-class="formGroupControl" name="BranchID" perfect-ctype="input" perfect-css="input"></label>
               
                <label type="hidden" class="col-sm-7 col-form-label" perfect-class="formGroupControl" name="DepartmentID" perfect-ctype="input" perfect-css="input"></label>

                @*<div class="card ">*@
                <div class="row">
                    <div class="col-sm-12">
                        <div class="daccordion__header">
                            <span class="accordion__header--text">PRODUCT DETAILS</span>
                        </div>
                        <br />

                        <div class="row">
                            <div class="col-sm-3">

                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-4 col-form-label">
                                        <span perfect-class="formGroupLabel">Product</span>
                                        <span class="text-danger">*</span>
                                    </label>

                                    <div class="col-sm-8">
                                        <div class="input-group">
                                            <input type="text" class="form-control" name="Product" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" perfect-tempTable-cstatus="Product" disabled" />
                                            <input type="hidden" name="ProductID" class="form-control" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" perfect-tempTable-cstatus="ProductID" />
                                            <div class="input-group-append">

                                                <button id="addproduct-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchValAssign(this, 40, 'Product Details', [], ['SodMRP','SodSalPrice','StockId'],PurchaseOrderTransMode)" BindName="Product" BindVal="ProductID" Function="2"></button>
                                            </div>

                                        </div>
                                        <span class="invalid-feedback animated fadeInUp d-block temptableError"></span>
                                    </div>
                                </div>
                            </div>

                            <div class="col-sm-3">
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-4 col-form-label">
                                        <span perfect-class="formGroupLabel">Unit</span>
                                        <span class="text-danger">*</span>
                                    </label>

                                    <div class="col-sm-8">
                                        <select class="form-control" name="PurordUnitID" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" onchange="CalculateActQty(this)" perfect-tempTable-cstatus="Unit">
                                            <option value="">Please select</option>
                                            @if (!(Model.UnitList is null))
                                            {
                                                foreach (var PoUnitList in Model.UnitList)
                                                {
                                                    <option value="@PoUnitList.PurordUnitID" UnitCounts="@PoUnitList.UnitCount">@PoUnitList.UnitName</option>
                                                }
                                            }
                                        </select>


                                        <span class="invalid-feedback animated fadeInUp d-block temptableError"></span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-4 col-form-label">
                                        <span perfect-class="formGroupLabel">Quantity</span>
                                        <span class="text-danger">*</span>
                                    </label>
                                    @*<div class="col-sm-6">
                                <div class="input-group">

                                    <input type="text" class="form-control text-right" placeholder="" name="PurordQuantity"id="idquantity" oninput="decimalpnt(this,'idquantity',4)" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" perfect-tempTable-cstatus="PurordQuantity" min="0" maxlength="13" />



                                    <span class="invalid-feedback animated fadeInUp d-block temptableError"></span>
                                </div>
                            </div>*@
                                    <div class="col-sm-8">
                                        <div class="input-group">
                                            <input type="text" class="form-control text-right" placeholder="" name="PurordQuantity" id="idquantity" oninput="decimalpnt(this,'idquantity',4),CalculateActQty(this)" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" perfect-tempTable-cstatus="PurordQuantity" min="0" maxlength="13" />
                                            <span class="invalid-feedback animated fadeInUp d-block temptableError" id="error-message"></span>
                                        </div>
                                    </div>


                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-4 col-form-label">
                                        <span perfect-class="formGroupLabel">Act.Quantity</span>
                                    </label>
                                    <div class="col-sm-8">
                                        <input type="text" class="form-control text-right" placeholder="" name="PurordActQuantity" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" perfect-tempTable-cstatus="PurordActQuantity" min="0" maxlength="13" readonly />
                                    </div>
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-4 col-form-label">
                                        <span perfect-class="formGroupLabel">Price</span>
                                        @*<span class="text-danger">*</span>*@
                                    </label>
                                    <div class="col-sm-8">
                                        @*<div class="input-group">*@
                                            <input type="text" class="form-control text-right" placeholder="" id="idprice" name="PurordPrice" oninput="decimalpnt(this,'idprice',4)" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" perfect-tempTable-cstatus="PurordPrice" min="0" maxlength="13" />
                                            @*<span class="invalid-feedback animated fadeInUp d-block temptableError"></span>*@
                                        @*</div>*@
                                    </div>
                                    @*<div class="input-group-append">
                                        <span class="invalid-feedback animated fadeInUp d-block temptableError"></span>
                                    </div>*@
                                </div>

                            </div>
                            <div class="col-sm-7"></div>
                            <div class="col-sm-2">
                                <button type="button" class="btn btn-primary1" perfect-css="button" onclick="PurchaseOrderDetailsTable_create(this,'cstatus',['ProductID'],purchaseordertableOptionsTempOut)" name="reset" align="center"><i class="fa fa fa-plus" aria-hidden="true"></i></button>
                                <button class="btn btn-light1" type="button" data-toggle="tooltip"  id="Poreset"  data-placement="top" data-html="true" onclick="clearproduct(this,'cstatus')"><i class="fa fa-refresh" aria-hidden="true"></i></button>
                            </div>



                            <div class="col-sm-12 mt-2">

                                <div class="table-responsive tableFixHead" perfect-tempTable="cstatus" id="Purchaseorderproductdetail" perfect-tempTable-lastindex="0" perfect-tempTable-action="0">

                                </div>
                            </div>
                        </div>

                        @*</div>*@
                    </div>
                </div>
                <hr />

                <div class="row">
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel"> Est. Delivery Date</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="date" class="form-control perfectValidate_date" name="PurordEstiDeliveryDate" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" max="2050-01-01" />
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel"> Delivery Type</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">

                                <select class="form-control perfectValidate_string" name="PurordDeliveryType" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" data-live-search="true">

                                    <option value="">Please Select </option>

                                    @if (!(Model.DeliveryModeList is null))
                                    {
                                        foreach (var deliveryList in Model.DeliveryModeList)
                                        {
                                            <option  value="@deliveryList.ID_Mode">@deliveryList.ModeName</option>
                                        }

                                    }

                                </select>


                            </div>
                        </div>
                    </div>

                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Total Amount</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control perfectValidate_decimal text-right" id="idtotalamount" placeholder="" name="PurordTotalAmount" oninput="decimalpnt(this,'idtotalamount',3)" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" onchange="CalculateNetAmount(this)" disabled />
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Remarks</span>

                            </label>
                            <div class="col-sm-8">

                                <textarea rows="1" class="form-control  perfectValidate_Remarks_nm" name="PurordRemark" perfect-ctype="input" maxlength="250"></textarea>

                            </div>
                        </div>
                    </div>

                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Advance Amount</span>
                                @*<span class="text-danger">*</span>*@
                            </label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control text-right" id="PurordAdvanceAmount" data-id="Adamount-error" placeholder="" name="PurordAdvanceAmount" oninput="decimalpnt(this,'PurordAdvanceAmount',3)" perfect-class="formGroupControl" perfect-ctype="input" onchange="CalculateNetAmount(this),checkadmount(this)" perfect-css="input" min="0" maxlength="13" />
                                <div class="invalid-feedback animated fadeInUp limit-check" style="display: block;"></div>
                                <div id="Adamount-error" class="Custominvalid animated fadeInUp Adamounterror" style="display: none;">Amount should be less or equal to Total Amount</div>
                            </div>
                        </div>
                    </div>


                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Net Amount</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="number" class="form-control perfectValidate_decimal text-right" placeholder="" name="PurordNetAmount" perfect-class="formGroupControl" oninput="decimalpnt(this,'idprice',3)" perfect-ctype="input" perfect-css="input" disabled />
                            </div>
                        </div>
                    </div>





                </div>



                <div class="card-footer text-right" perfect-class="formFooter">
                    <button id="" type="button" class="btn btn-primary mr-3 addcompany-jq-addnewuserUpdate d-none" name="update" perfect-css="button" onclick="fn_PurchaseOrderForm_update(this)"><i class="fa fa-refresh fa-spin loaderClass"></i>Update</button>
                    <button id="addcompany-jq-addnewuser" type="button" class="btn btn-primary mr-3 " name="add" perfect-css="button" onclick="fn_PurchaseOrderForm_add(this)"><i class="fa fa-refresh fa-spin loaderClass "></i>Save</button>
                    <button type="button" class="btn btn-light" perfect-css="button" onclick="ResetButton(this)" name="reset">Clear</button>
                </div>
            </div>
        </form>
        <div class="md-2 modal fade" perfect-class="formGroupModalsupplier" id="formGroupModalsupplier">
            <div class="modal-dialog modal-dialog-centered modal-xl" role="document">
                <div class="modal-content">
                    <div class="modal-header border-0">
                        <h5 class="modal-title">Add Supplier</h5>
                        <button type="button" class="close" data-dismiss="modal">
                            <span>&times;</span>
                        </button>
                    </div>
                    <div class="modal-body" perfect-class="formGroup" style="max-height: calc(100vh - 200px); overflow-y: auto;padding: 1rem;">
                        <div class="row">

                            <div class="col-sm-12" id="supplier-sav">

                            </div>


                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
   

    <div>
    </div>

</div>

<script src="~/Scripts/jqDOM/searchDOMCreation.js"></script>
<script>
   
        (function () {
            //jQuery('form').validate();//<-----  Validate/initialize our form on page load
            jQuery('select').selectpicker();
         
        })();
        //on load functions
        function ResetButton(ele) {


          
            fn_PurchaseOrder_initialload();


    }
    function clearfields(ele) {

        let $container = $(ele).closest('[perfect-class="form"]');
       let $thisForm = $(ele).closest('[perfect-class="form"]');
        if ($container.find('[name="ImportID"]').val() == 1) {
           
            $container.find('[id="customerbtn"]').css("display", "block");
            if ('@ViewBag.NumberGen' == 1) {

                getNumberGeneration(PurchaseOrderTransMode, 0, $thisForm, 'PurordQReferenceNo');
               
            }
            
        }
        else {
            $container.find('[id="customerbtn"]').css("display", "none");

        }
        //$container.find('[name=PurordQReferenceNo]').val('');
        $container.find('[name=Supplier]').val('');
        $container.find('[name=SupplierID]').val(0);

        if ('@ViewBag.NumberGen' == 0 && ($container.find('[name="ImportID"]').val() == 1)) {
            $container.find('[name="PurordQReferenceNo"]').removeAttr("disabled", "disabled");
        }
       
    }

    function Resetproducttable(ele) {

        let $container = $(ele).closest('[perfect-class="form"]');

        $container.find('[name="ProductID"]').val('').selectpicker('refresh');
        $container.find('[name=Product]').val('');

        $container.find('[name=PurordUnitID]').val('').selectpicker('refresh');
        $container.find('[name=UnitName]').val('');

      
        $container.find('[name=PurordPrice]').val('');
       
        $container.find('[name=PurordQuantity]').val('');

       
    }
    function decimalpnt(ele, id, range) {
        debugger
        let input = $('#' + id);

        ele.value = ele.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');
        let t = ele.value;
        ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t;

        $(document).on('keydown', '#' + id, function (event) {

            if (ele.value.includes('.')) {

            }
            else if (ele.value === '.' && (event.key === '.' || event.keyCode === 190)) {
                ele.value = '0.00'; // Change the value to '0.00' if only a dot is entered
                // Prevent the dot from being entered in the input field
            }
            var key = event.keyCode || event.charCode;
            if (key == 8 || key == 46) { }
            else {
                if (ele.value.indexOf('.') < 0 && ele.value.indexOf('.') !== 9 && ele.value.length > 8) {
                    ele.value = ele.value + '.';
                }
            }

        });

    }


        $(document).ready(function () {

         
            let $thisForm = $(this).find('[perfect-class="form"]');

            
            

            $thisForm.validate({ messages: validationMessage });

            var today = new Date();
            var day = today.getDate() > 9 ? today.getDate() : "0" + today.getDate(); // format should be "DD" not "D" e.g 09
            var month = (today.getMonth() + 1) > 9 ? (today.getMonth() + 1) : "0" + (today.getMonth() + 1);
            var year = today.getFullYear();

            $thisForm.find('[name="PurordDate"]').attr('max', year + "-" + month + "-" + day);

            var today1 = new Date();
            var day1 = today.getDate() > 9 ? today.getDate() : "0" + today.getDate(); // format should be "DD" not "D" e.g 09
            var month1 = (today.getMonth() + 1) > 9 ? (today.getMonth() + 1) : "0" + (today.getMonth() + 1);
            var year1 = today.getFullYear();

            $thisForm.find('[name="PurordEstiDeliveryDate"]').attr('min', year1 + "-" + month1 + "-" + day1);

            $thisForm.find('[name="FK_BranchCodePOrder"]').val(FK_BranchCodePOrder);
            

           
        });

        function ConvertJsonDate(Jsondate) {
            var date = "";
            if (Jsondate != "" && Jsondate != null && Jsondate != undefined) {
                var dateString = Jsondate.substr(6);
                var currentTime = new Date(parseInt(dateString));
                var month = currentTime.getMonth() + 1;
                var day = currentTime.getDate();
                var year = currentTime.getFullYear();
                date = day + "-" + month + "-" + year;
            }
            return date;
        }

   
   
  

        function getfunctionAssign(ele) {

               let $thisForm = $(ele).closest('[perfect-class="form"]');
            CheckProductExist(ele, 'cstatus', ['ProductID', 'Product']);
        let productId = {
             __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
            ProductID: $thisForm.find('[name="ProductID"]').val()
         };
                $.ajax({
                 url: '@Url.Action("GetProductreorderdetails", "PurchaseOrder")',
                type: "POST",
                    data: productId ,
                  dataType: "json",
                    contentType: "application/x-www-form-urlencoded;charset=utf-8",
                    success: function (ajaxOutput) {//<----- if ajax method executed succesfully,  we get the data passed from controller in this variable  => success: function (variable) {

                        if (ajaxOutput.Process.IsProcess) {

                            if (ajaxOutput.Data) {
                             // alert(25)
                                $thisForm.find('[name=PurordPrice]').val('');
                                $thisForm.find('[name="PurordQuantity"]').val(ajaxOutput.Data[0].PurordQuantity);
                                $thisForm.find('[name="UnitName"]').val(ajaxOutput.Data[0].UnitName);
                                $thisForm.find('[name="PurordUnitID"]').val(ajaxOutput.Data[0].PurordUnitID).selectpicker('refresh');
                                $thisForm.find('[name="PurordUnitID"]').children(":selected").attr('UnitCounts');

                            }

                        }

                    },
                    complete: function () {
                        CalculateActQty(ele, $thisForm.find('[name="PurordUnitID"]').children(":selected").attr('UnitCounts'));
                    }


            });

    }


    var purchaseordertableOptionsTempOut = {

        iconButton: {
            buttons: [

                {
                    icon: "fa fa-pencil btnPerfectGridEdit",
                    action: function () {
                        let savedData = $(this).closest('tr').data('pData')
                        getfunctionAssign(this);
                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let tableKey = $tablecontainer.attr('perfect-tempTable');
                        let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                        //index attribute name in table row
                        let indexname = tableKey + 'index';
                        //index number in table row
                        let rindex = $(this).closest('tr').attr(indexname);
                        $tablecontainer.attr('perfect-tempTable-action', rindex);

                        console.log('Editclick', savedData);
                        //filling data in available inputs
                        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                            let $thisNode = $(this);
                            let pf_name = $thisNode.attr('name');
                            if ($thisNode.is('select')) {

                                $thisNode.val(savedData[pf_name]).selectpicker('refresh');
                            }
                            else if ($thisNode.is('input')) {

                                if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                    $thisNode.prop('checked', savedData[pf_name]);
                                }
                                else {
                                    $thisNode.val(savedData[pf_name]);
                                }

                            }
                            else {
                                $thisNode.val(savedData[pf_name]);
                            }


                        });



                    }
                },

                {
                  

                    icon: "fa fa-trash btnPerfectGridDelete",
                            action: function () {
                                let savedData = $(this).closest('tr').data('pData')
                                let $tablecontainer = $(this).closest('[perfect-tempTable]');
                                let $thistbl = $(this).closest('table');
                                let table = $thistbl.DataTable();
                                table.destroy();
                                if ($(this).closest('tbody').find('tr').length > 1) {
                                    $(this).closest('tr').remove();
                                    pft_table_slreset($thistbl);
                                    //$thistbl.dataTable({ paging: false,  ordering: false });

                                }
                                else {
                                    $thistbl.remove();
                                }
								$("#Poreset").click();
                                CalculateTotal($tablecontainer, 1);
                                CalculateNetAmount(this, 1);
                              //  RemoveTaxArray(this, savedData.UID);

                    }
                },
             
            ]
        },
       
        onlyShowColumn: [],
        hideColumn: ['SLNo', 'FK_Quotation', 'PurordUnitID', 'ProductID', 'UnitID', 'Quantity', 'ActualQuantity', 'FreeQuantity', 'LessQuantity', 'Shortage', 'QRCode', 'BarCode', 'DiscountPercent', 'DiscountAmount', 'ActualRate', 'IncludeTaxOnPurRate', 'TaxAmount', 'MRP', 'SalPrice', 'PurordTotalAmount', 'SalActualPrice', 'SalTaxAmount', 'PpdProfitAmount', 'SalDiscount', 'Unit'],
        serialNo: true,
        renameHeader: {
            'PurordQuantity': 'Quantity1R', 'PurordUnitID_d': 'Unit', 'UnitName': 'Unit', 'PurordPrice': 'Price1R', 'PurordActQuantity': 'Act.Qty1R' },
        rowAttribute: [],
        isCheckType: []
    };

   

   
    function ComDetailsTable_Fill(ele, tkey, data, tableOptionsTempOut) {
      
        let $thisForm = $(ele)

        let tableOptionsTemp = tableOptionsTempOut;
        let insertData = []
        let tableKey = tkey;

        let indexname = tkey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);

        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');
        $thisForm.find('[perfect-tempTable="' + tableKey + '"]').empty();

       
        $.each(data, function (keyOne, valOne) {

            let pData = {};

            pData[indexname] = keyOne + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', pData[indexname])
            //---

            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                console.log('name', valOne[nameAttr])
                if (typeof valOne[nameAttr] !== undefined) {

                    if ($this.is('select')) {


                        tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                        tableOptionsTemp.hideColumn.push(nameAttr);
                        //displat text of select

                        let selectText = ($this.val().length == 1) ? '' : $this.find('[value="' + valOne[nameAttr] + '"]').text();

                        pData[nameAttr + '_d'] = selectText;
                        pData[nameAttr] = valOne[nameAttr];
                        console.log('select', $this.find('options[value="' + valOne[nameAttr] + '"]').text());
                        console.log('selectText', $this.find('[value="' + valOne[nameAttr] + '"]').text());

                    }
                    else if ($this.is('input')) {

                        let inputType = $this.attr('type').toLocaleLowerCase();
                        console.log('inputType', inputType)
                        if (inputType == 'checkbox') {

                            pData[nameAttr] = valOne[nameAttr];

                            tableOptionsTemp.isCheckType.push(nameAttr);

                            console.log('checkbox', nameAttr)


                        }
                        else if (inputType == 'hidden') {

                            tableOptionsTemp.hideColumn.push(nameAttr);
                            pData[nameAttr] = valOne[nameAttr];


                        }

                        else if (inputType == 'date') {


                            pData[nameAttr] = moment(valOne[nameAttr]).format('DD-MM-YYYY');


                        }
                        else {
                            pData[nameAttr] = valOne[nameAttr];


                        }
                    }
                    else {
                        pData[nameAttr] = valOne[nameAttr];


                    }
                }



            });

            insertData.push(pData);
            console.log('insertdata', insertData)

            //----

        });

        $tblcontainer.append(pft_table_createtable(insertData, tableOptionsTemp));


    }


    function CheckProductExist(ele, tkey, uniq = [], remov = [], ext = []) {

        //debugger

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let tableKey = tkey;
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');
        let Productmessage;

        let insertData = {};
        let tableOptionsTemp = purchaseordertableOptionsTempOut;

        let unique = (uniq) ? uniq : [];
        let notValidate = (remov) ? remov : [];

        let isValid = true;

        let exiten = 0;
        let cname;

        let errorClass = '.temptableError';
        let errorClass1 = '.temptableError1';
        let errorClass2 = '.temptableError2';


        let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
        let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
        let indexname = tkey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);
        let updateCond = '';
        let isNew = true;
        if (thisactionIndex > 0) {
            //means update
            insertData[indexname] = thisactionIndex;
            updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
            isNew = false;
        }
        else {
            //insert
            insertData[indexname] = lastIndex + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
            isNew = true;
        }




        if (unique.length > 0) {
            //getting previous data
            let prevData = [];
            $tblcontainer.find('table > tbody').find('tr').each(function () {
                if (isNew) {
                    prevData.push($(this).data('pData'));
                }
                else {
                    if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                        prevData.push($(this).data('pData'));
                    }

                }

            })
          

            unique.forEach(function (key, i) {

                console.log('unid -> key:' + key + "| index :" + i);
                let $thisEle = $thisForm.find('[perfect-tempTable-' + tableKey + '="' + key + '"]');
                let $thisElem = $thisForm.find('[perfect-tempTable-' + tableKey + '="Product"]');
                let headerEleName = $thisEle.attr('perfect-tempTable-' + tableKey);
                let atname = $thisEle.attr('name');
                let Productname = $thisElem.attr('name');
                let cvalue;


                exiten = 0;

                //console.log('len')
                if ($thisEle.length != 0) {
                    let $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
                    let errmessage = headerEleName + " Already exits"

                    //getting current value in cval
                    if ($thisEle.is('select')) {
                        cvalue = $thisEle.val();
                    }
                    else if ($thisEle.is('input')) {

                        let inputEleType = $thisEle.attr('type').toLocaleLowerCase();

                        if (inputEleType == 'checkbox') { cvalue = $thisEle.is(':checked'); }
                        else if (inputEleType == 'hidden') { cvalue = $thisEle.val(); }
                        else { cvalue = $thisEle.val(); }
                    }
                    else { cvalue = $thisEle.val(); }

                    if ($thisElem.is('select')) {
                        cname = $thisElem.val();
                    }
                    else if ($thisElem.is('input')) {

                        let inputEleType = $thisElem.attr('type').toLocaleLowerCase();

                        if (inputEleType == 'checkbox') { cname = $thisElem.is(':checked'); }
                        else if (inputEleType == 'hidden') { cname = $thisElem.val(); }
                        else { cname = $thisElem.val(); }
                    }
                    else { cname = $thisElem.val(); }

                    console.log('cvalue ->', cvalue);
                   
                    Productmessage = cname + " Already Exists";
                    //searching in previous data
                    if (prevData.find(a => a[atname] == cvalue)) {
                       
                        exiten = 1;
                    }
                }


            });

            if (exiten == 1) {
                let confirmationDialogBoxOption = { heading: "Warning", body: Productmessage + ". Do you want to continue? ", cancel: "No", confirm: "Yes" };
                var confirmBoxObj = ConfirmDialog(confirmationDialogBoxOption);

                confirmBoxObj.then(function (selectedOption) {
                    if (selectedOption) {

                    }
                    else {
                        $('[name=ProductID]').val('0')
                        $('[name=Product]').val('');
                        $('[name=UnitID]').val('0').selectpicker('refresh');;
                    }
                });
            }

        }
    }

    var payele;

    function PurchaseOrderDetailsTable_create(ele, tkey, uniq, tableOptionsTempOut) {
        payele = ele; 
        //debugger;
        console.log('ele', ele);
        console.log('tkey', tkey);
       
        console.log('Data', tkey);
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let tableKey = tkey;
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');

        let insertData = {};
        let tableOptionsTemp = tableOptionsTempOut;

        let unique = (uniq) ? uniq : [];

        let isValid = true;
        let ValueExist = false;
        let QuantityCheck = false;
        let errorClass = '.temptableError';

        //make index
        console.log('check 1');

        let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
        let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
        let indexname = tkey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);
        let updateCond = '';
        let isNew = true;
        if (thisactionIndex > 0) {
            //means update
            insertData[indexname] = thisactionIndex;
            updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
            isNew = false;
        }
        else {
            //insert
            insertData[indexname] = lastIndex + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
            isNew = true;
        }



      

        //if ($thisForm.find("[name='PurordQuantity']").val() > 0 && $thisForm.find("[name='PurordPrice']").val() > 0 && $thisForm.find("[name='PurordUnitID']").val() > 0) {
        if ($thisForm.find("[name='PurordQuantity']").val() > 0  && $thisForm.find("[name='PurordUnitID']").val() > 0) {
            ValueExist = true;
        }

        //ID_Product

       

        if ($thisForm.find("[name='ID_Product']").val() > 0) {

        }
        else if ($thisForm.find("[name='ProductID']").val() == "" || $thisForm.find("[name='ProductID']").val() <= 0 || $thisForm.find("[name='ProductID']").val() == undefined) {
            isValid = false;
            $thisForm.find("[name='ProductID']").closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Product');
        }



        if (ValueExist == false) {
            NotificationMessage({
                //'type': 'error', 'heading': 'info', 'message': ' Please Enter Quantity, Unit, Price '});
                'type': 'error', 'heading': 'info', 'message': ' Please Enter Quantity, Unit'
            });
        }
        else {

        }




        

        //---

        if (unique.length > 0) {
            //getting previous data
            let prevData = [];
            $tblcontainer.find('table > tbody').find('tr').each(function () {
                if (isNew) {
                    prevData.push($(this).data('pData'));
                }
                else {
                    if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                        prevData.push($(this).data('pData'));
                    }

                }

            })
            console.log('previous data', prevData);

         

            unique.forEach(function (key, i) {

                console.log('unid -> key:' + key + "| index :" + i);
                let $thisEle = $thisForm.find('[perfect-tempTable-' + tableKey + '="' + key + '"]');
                let headerEleName = $thisEle.attr('perfect-tempTable-' + tableKey);
                let atname = $thisEle.attr('name');
                let cvalue;

                //console.log('len')
                if ($thisEle.length != 0) {
                    let $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
                    let errmessage = headerEleName + " Already exits"

                    //getting current value in cval
                    if ($thisEle.is('select')) {
                        cvalue = $thisEle.val();
                    }
                    else if ($thisEle.is('input')) {

                        let inputEleType = $thisEle.attr('type').toLocaleLowerCase();

                        if (inputEleType == 'checkbox') { cvalue = $thisEle.is(':checked'); }
                        else if (inputEleType == 'hidden') { cvalue = $thisEle.val(); }
                        else { cvalue = $thisEle.val(); }
                    }
                    else { cvalue = $thisEle.val(); }

                    console.log('cvalue ->', cvalue);

                    
                    if (prevData.find(a => a[atname] == cvalue)) {
                       
                    }
                }
            });

        }




        console.log('check 4', ValueExist, isValid, QuantityCheck);





        if (isValid == true && ValueExist == true) {

            $thisForm.find("[name='ProductID']").closest('[perfect-class="formGroup"]').find(errorClass).text('');
          

            console.log('check 4.1');
            // this section make table column data
            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');

                if ($this.is('select')) {

                    tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                    tableOptionsTemp.hideColumn.push(nameAttr)
                    //displat text of select

                    //displat text of select
                    if ($this.val() != null) {
                        let selectText = ($this.val().length == 0) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    else {
                        let selectText = ($this.val() == null) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    //let selectText = ($this.val().length == 0) ? '' : $this.children(":selected").text();
                    //insertData[nameAttr + '_d'] = selectText;
                    insertData[nameAttr] = $this.val();


                    //clear field
                    $this.val('').selectpicker('refresh');
                }
                else if ($this.is('input')) {

                    let inputType = $this.attr('type').toLocaleLowerCase();

                    if (inputType == 'checkbox') {

                        insertData[nameAttr] = $this.is(':checked');

                        tableOptionsTemp.isCheckType.push(nameAttr)
                        //clear field
                        $this.prop('checked', false);

                    }
                    else if (inputType == 'hidden') {

                        tableOptionsTemp.hideColumn.push(nameAttr)
                        insertData[nameAttr] = $this.val();

                        //clear field
                        $this.val('');
                    }
                    else if (inputType == 'date') {


                        insertData[nameAttr] = $this.val();

                        //clear field
                        $this.val('');
                    }

                    else {
                        insertData[nameAttr] = $this.val();

                        //clear field
                        $this.val('');
                    }
                }

                else {
                    insertData[nameAttr] = $this.val();

                    //clear field
                    $this.val('');

                }




            });
            console.log('check 4.2');
            if (isNew) {
                console.log('check 4.2.1');
                //this section nake table.table row
                if ($tblcontainer.find('table').length == 0) {
                    console.log('check 4.2.3');
                    $tblcontainer.append(pft_table_createtable([insertData], tableOptionsTemp));

                }
                else {
                    console.log('check 4.2.1');
                    let table = $tblcontainer.find('table').DataTable()
                    table.destroy()
                    pft_table_addTableRow($tblcontainer.find('table'), insertData, tableOptionsTemp);


                }
                console.log('check 4.2.1');
            }
            else {
                console.log('check 4.3');
                let table = $tblcontainer.find('table').DataTable()
                table.destroy()
                console.log('check 4.4');
                console.log('table', $tblcontainer.find('table'))
                console.log('check 4.5');
                pft_table_replaceTableRow($tblcontainer.find('table'), updateCond, insertData, tableOptionsTemp);



            }

            console.log(insertData);
            // resetting the edit value
            $tblcontainer.attr('perfect-tempTable-action', 0);
        }

        Binddatadetails(ele);
        CalculateTotal(ele);
        CalculateNetAmount(ele);
        console.log('check 5');
    }



    function CalculateTotal(ele, md) {
        debugger
       // let $thisForm;
        //if (md == 1) {
        //    $thisForm = $(payele).closest('[perfect-class="form"]');
        //}
        //else {
        //    $thisForm = $(ele).closest('[perfect-class="form"]');
        //}
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let Net = 0;
        let Tax = 0;
        let price = 0;

        let TotalBill = $thisForm.find('[name=Price]').val() == "" ? "0" : $thisForm.find('[name=Price]').val();
       


        $('#Purchaseorderproductdetail').find('tbody tr').each(function (index, ele) {
            price = $(ele).find('.PurordPrice').text() == "" ? "0" : $(ele).find('.PurordPrice').text();
            Net = Net + (parseFloat(price)*parseFloat($(ele).find('.PurordQuantity').text())); 
           
           

        });
     
      
        let BillTotal = (Net);
       
        $thisForm.find('[name=PurordTotalAmount]').val(BillTotal.toFixed(2));

        CalculateNetAmount(ele);
      
    }


    function CalculateNetAmount(ele, md) {
        debugger
        let $thisForm;
        if (md == 1) {
            $thisForm = $(payele).closest('[perfect-class="form"]');
        }
        else {
            $thisForm = $(ele).closest('[perfect-class="form"]');
        }
        let Nettotal=0;
        let total=0;
        let Advanceamount=0;

        Advanceamount = $thisForm.find('[name=PurordAdvanceAmount]').val() == "" ? "0" : $thisForm.find('[name=PurordAdvanceAmount]').val();
        console.log('Advanceamount', Advanceamount);

        total = $thisForm.find('[name=PurordTotalAmount]').val() == "" ? "0" : $thisForm.find('[name=PurordTotalAmount]').val();
        console.log('total', total);
       let advanceamount = $thisForm.find('[name=PurordAdvanceAmount]').val();
       let  totalamount = $thisForm.find('[name="PurordTotalAmount"]').val();
        if (parseFloat(advanceamount) == parseFloat(totalamount)) {

            $thisForm.find('[name=PurordNetAmount]').val(0);
        }
        else
        {
            //Nettotal = parseFloat(total) - parseFloat(Advanceamount);
            Nettotal = total - Advanceamount;

            $thisForm.find('[name=PurordNetAmount]').val(parseFloat(Nettotal).toFixed(2));
        }
       
        console.log('Nettotal', Nettotal);
        
        
    }

    function checkadmount(ele) {
      
        let $thisForm = $(ele).closest('[perfect-class="form"]');  
        let Adamount = $thisForm.find('[name="PurordAdvanceAmount"]').val();
        let totalamount = $thisForm.find('[name="PurordTotalAmount"]').val();
        

     
        //debugger
        if (parseFloat(Adamount) > parseFloat(totalamount)) {
      

            console.log('inside limit check if')
            $thisForm.find('[name="PurordAdvanceAmount"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('Amount  should be less than or Equal to Total Amount');
            return false;
        }
        else {

            console.log('inside limit check else')
            $thisForm.find('[name="PurordAdvanceAmount"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('')
            return true;
        }
    }

    
    function clearproduct(ele, tablekey) {

       
        let $thisform = $(ele).closest('[perfect-class="form"]');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="select"]').val('').selectpicker('refresh');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="date"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="hidden"]').val('');

        let $tblcontainer = $thisform.find('[perfect-tempTable="' + tablekey + '"]');
        $tblcontainer.attr('perfect-tempTable-action', 0);

        if (tablekey = "cstatus") {
           
        }
      
    }

    function fn_showimportlistsquotation(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');  

        if ($thisForm.find('[name="ImportID"]').val() == 1) {

            GetCmnPopUpSearchValAssign(ele, 45, 'Supplier Details', [], ['SupplierID', 'Supplier'], PurchaseOrderTransMode)
            $thisForm.find('[name="PurordQReferenceNo"]').attr("enabled", "enabled");
              
        }
        else if ($thisForm.find('[name="ImportID"]').val() == 2) {
            GetCmnPopUpSearchValAssign(ele, 44, 'Quotation Based List', [], ['SupplierID', 'Supplier', 'PurordNetAmount', 'PurordQReferenceNo', 'QuotationID'], PurchaseOrderTransMode)
         
            $thisForm.find('[name="PurordQReferenceNo"]').attr("disabled", "disabled");
           
            
        }
        else {
            NotificationMessage({ 'type': 'error', 'heading': 'info', 'message': 'Please Select Import From' });
        }

    }



  function getfunction(ele) {
       let $thisForm = $(ele).closest('[perfect-class="form"]');

      $thisForm.find('[name=PurordNo]').attr("readonly", "readonly")

      console.log('SupplierID', $thisForm.find('[name=SupplierID]').val()),
 
        

          console.log('1', $thisForm.find('[name=QuotationID]').val());
      console.log('1', $thisForm.find('[name=ImportID]').val());

      
       if ($thisForm.find('[name=ImportID]').val() == 2) {
           let InputData =
           {
               FK_Master: $thisForm.find('[name=QuotationID]').val()


           }
           $.ajax({
               url: "@Url.Action("GetPurchaseDataFill", "PurchaseOrder")",
               type: "Get",
               data: InputData,
               dataType: "json",
               contentType: "application/json",
               success: function (ajaxOutput) {
                   if (ajaxOutput.Process.IsProcess) {
                    
                       let table = JSON.parse(ajaxOutput.Data);
                       console.log(ajaxOutput.Data,'ajaxOutput.Data');
                       fillgrid('cstatus', purchaseordertableOptionsTempOut, $thisForm, table.dtable);
                       Binddatadetails(ele);
                       CalculateTotal(ele);
                   }
                   else {
                       $.each(ajaxOutput.Process.Message, function (key, value) {
                           NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                       });

                   }
               },
               complete: function () {
                   $(ele).prop('disabled', false);
               }
           });

       }
     

    }

    function fillgrid(tablk, wartableOptionsTempOut, $thisForm, data) {
        let tableOptionsTemp = wartableOptionsTempOut;
        let insertData = [];
        let tableKey = tablk;
        let indexname = tableKey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');
        $.each(data, function (keyOne, valOne) {
            let pData = {};
            pData[indexname] = keyOne + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', pData[indexname])
            //---

            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
               
                if (typeof valOne[nameAttr] !== undefined) {

                    if ($this.is('select')) {
                       
                        tableOptionsTemp.hideColumn.push(nameAttr);
                        //displat text of select
                        pData[nameAttr + '_d'] = $this.find('[value="' + valOne[nameAttr] + '"]').text();
                        pData[nameAttr] = valOne[nameAttr];
                        console.log('select', $this.find('options[value="' + valOne[nameAttr] + '"]').text());

                    }
                    else if ($this.is('input')) {

                        pData[nameAttr] = valOne[nameAttr];

                    }

                }

            });

            insertData.push(pData);
            console.log('pData', pData)
            console.log('insertData', insertData)
            //----

        });
        $tblcontainer.empty();
        $tblcontainer.append(pft_table_createtable(insertData, tableOptionsTemp));

    }

    function Binddatadetails(ele) {
        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');  
        let net = 0;
        let price = 0;
        
        $('#Purchaseorderproductdetail').find('tbody tr').each(function (index, ele) {
            price = $(ele).find('.PurordPrice').text() == "" ? "0" : $(ele).find('.PurordPrice').text();
            net = net + parseFloat(price);



        });


        let BillTotal = (net);

        $thisForm.find('[name=PurordTotalAmount]').val(BillTotal.toFixed(4));

        CalculateNetAmount(ele);
    }

    //SmartFill
    function fn_PurchaseOrderForm_SmartFill(ele) {
        debugger;
   
        let $thisForm = $(ele).closest('[perfect-class="form"]');

        let isValid = false;
        let supplier = $thisForm.find('[name="SupplierID"]').val();

        if (supplier > 0) {
            isValid = true;
        }
        else {
            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Please Select Supplier' });
        }


                var inputData = {

                     FK_Supplier: $thisForm.find('[name="SupplierID"]').val(),
                     FK_Branch: 0
                 }

        if (isValid) {

              $.ajax({
                    url: "@Url.Action("SmartFill_PurchaseOrder", "PurchaseOrder")",
                    type: "POST",

                    data: inputData,
                    dataType: "json",
                    contentType: "application/x-www-form-urlencoded; charset=utf-8",
                    success: function (data) {

                        if (data.Process.IsProcess) {

                            let ItemData = data.Data;
                            console.log('ItemData', ItemData);

                            if (ItemData) {

                                ComDetailsTable_Fill($thisForm, 'cstatus', ItemData, tableOptionsTempOutFill);
                                Binddatadetails(ele);
                                CalculateTotal(ele);
                                CalculateNetAmount(ele);
                            }
                            else {
                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'No Data Found' });
                            }

                        }
                        else {
                            $.each(data.Process.Message, function (key, value) {
                                //toastr.warning(value, "Error");
                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                            });
                        }
                    },
                    complete: function () {
                        $(ele).prop('disabled', false);
                    }

                });
        }
              
              

    }
    
    
   
  
    // Function to Add PurchaseOrder

    function fn_PurchaseOrderForm_add(ele) {
        console.clear();

        let $thisForm = $(ele).closest('[perfect-class="form"]');
      
        
       
        let prevData = [];
        $thisForm.find('[perfect-tempTable="cstatus"]').find('table > tbody').find('tr').each(function () {

            prevData.push($(this).data('pData'));

        })
     

        var netamount;
        netamount = parseFloat($thisForm.find('[name=PurordNetAmount]').val());
      
        if ($thisForm.valid() && prevData.length != 0) {
           
            if (checkadmount(ele)) {

             
                $(ele).prop('disabled', true);

              
              
                var inputData = {

                    __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),

                  
                    Number: $thisForm.find('[name=Number]').val(),
                    PurordQReferenceNo: $thisForm.find('[name=PurordQReferenceNo]').val(),

                    PurordDate: $thisForm.find('[name=PurordDate]').val(),

                    TransMode: PurchaseOrderTransMode,
                    LastID: LastID_PurchaseOrder,
                    SupplierID: $thisForm.find('[name=SupplierID]').val(),
                    DepartmentID: $thisForm.find('[name=DepartmentID]').val(),
                    QuotationID: $thisForm.find('[name=QuotationID]').val(),
                    PurordEstiDeliveryDate: $thisForm.find('[name=PurordEstiDeliveryDate]').val(),
                    PurordDeliveryType: $thisForm.find('[name=PurordDeliveryType]').val(),
                    PurordTotalAmount: $thisForm.find('[name=PurordTotalAmount]').val(),
                    PurordOthercharges: $thisForm.find('[name=PurordOthercharges]').val(),
                    PurordAdvanceAmount: $thisForm.find('[name=PurordAdvanceAmount]').val(),
                    PurordNetAmount: $thisForm.find('[name=PurordNetAmount]').val(),
                    PurordRemark: $thisForm.find('[name=PurordRemark]').val(),
                    PurchaseOrderDetails: prevData
                    
                }

                clearSessionValue(LastIDSessionKey);
              
                $.ajax({
                    url: "@Url.Action("AddNewPurchaseOrder", "PurchaseOrder")",
                    type: "POST",

                    data: inputData,
                    dataType: "json",
                    contentType: "application/x-www-form-urlencoded; charset=utf-8",
                    success: function (data) {

                        if (data.Process.IsProcess) {

                            $.each(data.Process.Message, function (key, value) {

                                NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                                $(ele).prop('disabled', false);
                            });
                            $thisForm.find('[perfect-ctype="select"]').val('').selectpicker('refresh');
                            $thisForm.find('[perfect-ctype="input"]').val('');
                            $thisForm.find('[perfect-ctype="date"]').val('');


                            let onSuccess = $thisForm.attr('perfect-onFormSuccess')

                            if (onSuccess) {
                                window[onSuccess]();

                            }

                            //---------- Do stuff if success
                            // loadUnitList();
                            // console.log('> Add new post success data', data);
                        }
                        else {
                            $.each(data.Process.Message, function (key, value) {
                                //toastr.warning(value, "Error");
                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                            });
                        }
                    },
                    complete: function () {
                        $(ele).prop('disabled', false);
                    }

                });



            }

            else {


                NotificationMessage({ 'type': 'error', 'heading': 'info', 'message': 'Advance Amount  should be less than or Equal to Total Amount' });
                $(ele).prop('disabled', false);

            }


        }

            else {
            NotificationMessage({ 'type': 'error', 'heading': 'info', 'message': 'Please Fill all mandatory fields, Enter Atleast One Product Details!!!' });
            $(ele).prop('disabled', false);  

            }
       
     

    }
    

        // Function to Update PurchaseOrder
        function fn_PurchaseOrderForm_update(ele) {

            let $thisForm = $(ele).closest('[perfect-class="form"]');
      
        let prevData = [];
        $thisForm.find('[perfect-tempTable="cstatus"]').find('table > tbody').find('tr').each(function () {

            prevData.push($(this).data('pData'));

            })
            //debugger
            var netamount;
            netamount = parseFloat($thisForm.find('[name=PurordNetAmount]').val());



            if ($thisForm.valid() && prevData.length != 0) {
               
               
                if (checkadmount(ele)) {

                    $(ele).prop('disabled', true);

                  
                    let pdata = $thisForm.data('pData');
                   
                    var inputData = {

                        __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                        PurchaseOrderID: pdata.PurchaseOrderID,
                        Number: $thisForm.find('[name=Number]').val(),
                        PurordQReferenceNo: $thisForm.find('[name=PurordQReferenceNo]').val(),

                        PurordDate: $thisForm.find('[name=PurordDate]').val(),

                        TransMode: PurchaseOrderTransMode,
                        LastID: LastID_PurchaseOrder,
                        SupplierID: $thisForm.find('[name=SupplierID]').val(),
                        DepartmentID: $thisForm.find('[name=DepartmentID]').val(),
                        QuotationID: $thisForm.find('[name=QuotationID]').val(),
                        PurordEstiDeliveryDate: $thisForm.find('[name=PurordEstiDeliveryDate]').val(),
                        PurordDeliveryType: $thisForm.find('[name=PurordDeliveryType]').val(),
                        PurordTotalAmount: $thisForm.find('[name=PurordTotalAmount]').val(),
                        PurordOthercharges: $thisForm.find('[name=PurordOthercharges]').val(),
                        PurordAdvanceAmount: $thisForm.find('[name=PurordAdvanceAmount]').val(),
                        PurordNetAmount: $thisForm.find('[name=PurordNetAmount]').val(),
                        PurordRemark: $thisForm.find('[name=PurordRemark]').val(),
                        PurchaseOrderDetails: prevData


                    }
                    clearSessionValue(LastIDSessionKey);
                    $.ajax({
                        url: "@Url.Action("UpdatePurchaseOrder", "PurchaseOrder")",
                        type: "POST",

                        data: inputData,
                        dataType: "json",
                        contentType: "application/x-www-form-urlencoded; charset=utf-8",
                        success: function (data) {

                            if (data.Process.IsProcess) {

                                $.each(data.Process.Message, function (key, value) {

                                    NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                                    
                                });
                                $thisForm.find('[perfect-ctype="select"]').val('').selectpicker('refresh');
                                $thisForm.find('[perfect-ctype="input"]').val('');
                                $thisForm.find('[perfect-ctype="date"]').val('');

                          
                                let onSuccess = $thisForm.attr('perfect-onFormSuccess')

                                if (onSuccess) {
                                    window[onSuccess]();

                                }

                                //---------- Do stuff if success
                                // loadUnitList();
                                // console.log('> Add new post success data', data);
                            }
                            else {
                                $.each(data.Process.Message, function (key, value) {
                                    //toastr.warning(value, "Error");
                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                    $(ele).prop('disabled', false);
                                });
                            }
                        },
                        complete: function () {
                            $(ele).prop('disabled', false);
                        }

                    });

                }
                else {
                    $(ele).prop('disabled', false);
                    NotificationMessage({ 'type': 'error', 'heading': 'info', 'message': 'Advance Amount  should be less than or Equal to Total Amount' });
                  
                }

            }

            else {
                $(ele).prop('disabled', false);

                NotificationMessage({ 'type': 'error', 'heading': 'info', 'message': 'Please Fill all mandatory fields, Enter Atleast One Product Details!!!' });
               
            }

          

        }

         function Getdepartmentdefault() {
         let $thisForm = $('[perfect-class="form"]');
         $.ajax({
             url: '@Url.Action("GetEmployeedetailsDefault", "PurchaseOrder")',
             type: "Get",
             dataType: "json",
             contentType: "application/json",
             success: function (ajaxOutput) {//<----- if ajax method executed succesfully,  we get the data passed from controller in this variable  => success: function (variable) {

                 if (ajaxOutput.Process.IsProcess) {
                    
                     $.each(ajaxOutput.Data, function (key, value) {

                         console.log('>_ Search button > list click', value);
                         $thisForm.find('[name=DepartmentID]').val(value.FK_Department).selectpicker('refresh');
                         $thisForm.find('[name=DepartmentName]').val(value.DeptName);
                         $thisForm.find('[name=BranchID]').val(value.ID_Branch)

                     });




                 }
                 else {
                     $.each(ajaxOutput.Process.Message, function (key, value) {
                         NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                     });
                 }

             },


         });


    }

     function searchbtnQuotation(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');

           let Quotationno = {
             __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
               Quotationno: $thisForm.find('[name="PurordQReferenceNo"]').val()
         };
                $.ajax({
                 url: '@Url.Action("FillDetailsByQuotationNo", "PurchaseOrder")',
                type: "POST",
                    data: Quotationno ,
                  dataType: "json",
                    contentType: "application/x-www-form-urlencoded;charset=utf-8",
                    success: function (ajaxOutput) {//<----- if ajax method executed succesfully,  we get the data passed from controller in this variable  => success: function (variable) {

                        if (ajaxOutput.Process.IsProcess) {

                            if (ajaxOutput.Data) {

                                $thisForm.find('[name="PurordQReferenceNo"]').val(ajaxOutput.Data[0].PurordQReferenceNo);
                                $thisForm.find('[name=SupplierID]').val(ajaxOutput.Data[0].SupplierID),
                                $thisForm.find('[name=Supplier]').val(ajaxOutput.Data[0].Supplier),

                                $thisForm.find('[name="PurordDate"]').val(ajaxOutput.Data[0].PurordDate);
                                $thisForm.find('[name=DepartmentID]').val(ajaxOutput.Data[0].DepartmentID),
                                $thisForm.find('[name=Department]').val(ajaxOutput.Data[0].Department),

                                    ComDetailsTable_Fill($thisForm, 'cstatus', ajaxOutput.Data[0].PurchaseOrderDetails, tableOptionsTempOutFill)

                                $thisForm.find('[name="PurordEstiDeliveryDate"]').val(ajaxOutput.Data[0].PurordEstiDeliveryDate);
                                $thisForm.find('[name="PurordDeliveryType"]').val(ajaxOutput.Data[0].PurordDeliveryType);
                                $thisForm.find('[name="ID_Mode"]').val(ajaxOutput.Data[0].ID_Mode);
                                $thisForm.find('[name="ModeName"]').val(ajaxOutput.Data[0].ModeName);
                                $thisForm.find('[name="PurordTotalAmount"]').val(ajaxOutput.Data[0].PurordTotalAmount);

                                $thisForm.find('[name="PurordAdvanceAmount"]').val(ajaxOutput.Data[0].PurordAdvanceAmount);


                                $thisForm.find('[name="PurordNetAmount"]').prop('checked', ajaxOutput.Data[0].PurordNetAmount);

                                $thisForm.find('[name="PurordRemark"]').val(ajaxOutput.Data[0].PurordRemark);

                            }

                        }

                },


            });


    }

     function fn_qsupplierForm_loadState_success(ele) {

        $('#formGroupModalsupplier').modal('hide');

    }
    //to New Cutomer popup
    function fn_openNewSupplierWindow(element) {
        $('#formGroupModalsupplier').modal('show');
        let $savimgContainer = $('#supplier-sav');

        $savimgContainer.load('@Url.Action("LoadSupplierForm", "Supplier")', function () {
           let $thisForm = $(this).find('[perfect-class="form"]');
           // ... Custom validation message
            $thisForm.validate({ messages: sdvalidationMessage });
            $(".SupplierViewListHeader").hide();
           // ... Custom validation message
           $thisForm.attr('perfect-onFormSuccess', 'fn_qsupplierForm_loadState_success');
        
           initFunctions($thisForm);
        
        });
    }
    var sdvalidationMessage = {


        'Name': {
            'required': 'Please Enter Name',
            'maxlength': jQuery.validator.format('Name should be less than {0} characters'),
            // 'specialCharName': 'All Special Character Are not Allowed'


        },
        'Address': {
            'required': 'Please enter Address ',
            'maxlength': jQuery.validator.format('Address 1 should be less than {0} characters'),
            //   'specialCharName': 'All Special Character Are not Allowed'
        },


        'CountryID': {
            'required': 'Please select a Country',
            'digits': 'Invalid Country selected'
        },


        'StatesID': {
            'required': 'Please select a State',
            'digits': 'Invalid State selected'
        },

        'DistrictID': {
            'required': 'Please select a District',
            'digits': 'Invalid District selected'
        },

        'AreaID': {
            'required': 'Please select a Area',
            'digits': 'Invalid Area selected'
        },
        'PlaceID': {
            'required': 'Please select a Place',
            'digits': 'Invalid Place selected'
        },
        'PostID': {
            'required': 'Please select a Post',
            'digits': 'Invalid Post selected'
        },
        'Mobile': {
            'required': 'Please enter  mobile',
            'anyphonenumber': 'Invalid mobile number',
            'minlength': jQuery.validator.format(' Mobile should be more than {0} characters'),
            'maxlength': jQuery.validator.format(' Mobile should be less than {0} characters')
        },


        'ModeID': {
            'required': 'Please select a Mode',
            'digits': 'Invalid Mode selected'
        },
        

        'ContactPerson': {
            'required': 'Please enter Contact Person name',
            'maxlength': jQuery.validator.format('Contact Person name should be less than {0} characters'),
            //'specialCharName': 'All Special Character Are not Allowed'
        },

        'Email': {

            'emailRegex': 'Please Enter Valid Email'
        },

    }
    function validateInput(input) {
        const inputValue = input.value.trim();
        const errorMessageElement = document.getElementById("error-message");

        // Check if the input length exceeds 10 characters
        if (inputValue.length > 10) {
            errorMessageElement.textContent = "Please enter no more than 9 numbers.";
            input.classList.add("is-invalid"); // Optionally, add Bootstrap's is-invalid class for styling
        } else {
            errorMessageElement.textContent = ""; // Clear the error message
            input.classList.remove("is-invalid"); // Optionally, remove Bootstrap's is-invalid class
        }
    }

    function CalculateActQty(ele,UnitCount) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');

        let qty = $thisForm.find('[name=PurordQuantity]').val() == "" ? "0" : $thisForm.find('[name=PurordQuantity]').val();
        let unitcount = $thisForm.find('[name="PurordUnitID"]').children(":selected").attr('unitcounts');
     
        let ActQty = 0;        
        if (qty != 0 || qty != "") {
            if (unitcount == undefined) {
                ActQty = qty * UnitCount;
            }
            else {
                ActQty = qty * unitcount;
            }
            //$thisForm.find('[name=PurordQuantity]').val(Number(qty).toFixed(3));
            $thisForm.find('[name=PurordActQuantity]').val((isNaN(parseFloat(ActQty)) ? 0 : parseFloat(ActQty)).toFixed(3));
        }        
    }
</script>



