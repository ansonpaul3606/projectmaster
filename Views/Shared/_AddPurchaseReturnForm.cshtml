
@*----------------------------------------------------------------------
Created By	: Anson Paul
Created On	: 01/09/2022
Purpose		: PurchaseReturn
-------------------------------------------------------------------------
Modification
On			By					OMID/Remarks
-------------------------------------------------------------------------
-------------------------------------------------------------------------*@

@model PerfectWebERP.Models.PurchaseReturnModel.PurchaseReturnView
<style>
</style>

<div class="card ">

    <div class="card-header">
        <h4 class="card-title col-12">@ViewBag.PageTitle</h4>
        <span title="To View List" onclick="fn_showListView();"><svg id="Layer_1" class="layer" stroke="currentColor" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" height="20" width="20" viewBox="0 0 122.88 122.54"><title>To View List</title><path class="viewlst" d="M4.69,0H46.22a4.71,4.71,0,0,1,4.69,4.69V46a4.69,4.69,0,0,1-4.69,4.69H4.69a4.65,4.65,0,0,1-3.31-1.38l-.09-.09A4.67,4.67,0,0,1,0,46V4.69A4.71,4.71,0,0,1,4.69,0ZM89.44,61.94a26.56,26.56,0,0,1,10.18,2l.07,0a26.61,26.61,0,0,1,15.25,32.16,26.18,26.18,0,0,1-2.7,6.11l10.3,11.24a1.27,1.27,0,0,1-.07,1.8l-7.57,6.9a1.27,1.27,0,0,1-1.79-.07l-9.86-10.85a26.36,26.36,0,0,1-6.1,2.74,26.87,26.87,0,0,1-7.71,1.13,26.51,26.51,0,0,1-10.17-2l-.07,0A26.64,26.64,0,0,1,64.85,78.37l0-.07A26.6,26.6,0,0,1,89.44,61.94Zm15,11.59a21.38,21.38,0,0,0-6.89-4.61l-.06,0a21.22,21.22,0,0,0-23.07,4.64l-.07.07a21.25,21.25,0,0,0-4.54,6.83l0,.06a21.32,21.32,0,0,0-1.58,8.06,21.26,21.26,0,0,0,29.35,19.62,21.54,21.54,0,0,0,6.89-4.61l.07-.07a21.09,21.09,0,0,0,4.54-6.83l0-.06a21.35,21.35,0,0,0,0-16.17,21.34,21.34,0,0,0-4.62-6.9ZM4.69,63.2H46.22a4.71,4.71,0,0,1,4.69,4.7v41.34a4.68,4.68,0,0,1-4.69,4.69H4.69A4.69,4.69,0,0,1,0,109.24V67.9a4.71,4.71,0,0,1,4.69-4.7ZM68.78,0h41.53A4.71,4.71,0,0,1,115,4.69V46a4.71,4.71,0,0,1-4.69,4.69H68.78A4.71,4.71,0,0,1,64.09,46V4.69a4.69,4.69,0,0,1,1.37-3.31l.1-.09A4.67,4.67,0,0,1,68.78,0Z"></path></svg></span>
    </div>
    <div class="card-body">
        <form id="" class="form-valide" perfect-class="form" action="#" method="post" perfect-onFormSuccess="">
            <div class="">
                @Html.AntiForgeryToken()
                <div class="row">
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Return Date</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="hidden" class="form-control" perfect-class="formGroupControl" name="ID_PurchaseReturn" id="ID_PurchaseReturn" />
                                <input type="hidden" name="FK_Branch" id="FK_Branch" value="@ViewBag.FK_Branch" />
                                <input type="date" class="form-control perfectValidate_date" name="ReturnDate" perfect-class="formGroupControl" max="2050-01-01" perfect-ctype="date" perfect-css="date"  onchange="datecheck(this)"/>
                                <div class="invalid-feedback temptableErrors"></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Supplier</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <input type="hidden" name="FK_BranchCodePRrn" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" value="" />
                                    <input type="hidden" name="FK_Supplier" class="form-control" perfect-ctype="hidden" />
                                    <input type="hidden" name="Statecode" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" value="" />
                                    <input type="text" class="form-control perfectValidate_string" name="SupplierName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly />
                                    <div class="input-group-append">
                                        <button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-search" data-placement="top" data-html="true" type="button" perfect-css="button" onclick="GetCmnPopUpSearchValAssign(this,20,'Supplier List',[],['SupplierID','SupplierName','Statecode'],PurchaseReturnTransMode)" Function="2" Criterea1="FK_BranchCodePRrn" Criterea2="0" BindName="SupplierName" BindVal="FK_Supplier"></button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Department</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <input type="text" class="form-control perfectValidate_string" name="DepartmentName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled />
                                    <input type="hidden" name="DepartmentID" class="perfectValidate_numeric" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                    <div class="input-group-append">
                                        <button id="depeartment" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchVal(this,35,'Department Details',[],PurchaseReturnTransMode)" Criterea1="0" Criterea2="0" BindName="DepartmentName" BindVal="DepartmentID"></button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Return Type</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <div class="input-group">

                                    <input type="hidden" name="ImportID" />
                                    <select class="form-control perfectValidate_string" name="Returntype" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" onchange="fun_imports(this)">
                                        @*<option value="1" >Bill Wise</option>*@
                                        <option value="2" selected>Purchase Wise</option>
                                        <option value="1" >Item Wise</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Invoice No</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <input type="text" class="form-control perfectValidate_string" placeholder="" name="PrInvoiceNo" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" onchange="Getinvoicedate(this)" maxlength="18" readonly />
                                    <input type="hidden" name="PurchaseID" class="form-control" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                    <input type="hidden" name="FK_Stock" class="form-control" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                    <div class="input-group-append">
                                        <button id="invoicebutton" class="btn btn-primary fa fa-search" data-placement="top" data-html="true" type="button" perfect-css="button" onclick="GetCmnPopUpSearchValAssign(this,54,'Purchase List',[],['PrInvoiceDate','FK_Supplier','SupplierName','Statecode','Discount'],PurchaseReturnTransMode)" Function="1" Criterea1="FK_Branch" Criterea2="FK_Supplier" Criterea3="DepartmentID" BindName="PrInvoiceNo" BindVal="PurchaseID"></button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Invoice Date</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="date" class="form-control perfectValidate_date" name="PrInvoiceDate" perfect-class="formGroupControl" max="2050-01-01" perfect-ctype="date" perfect-css="date" readonly/>

                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Reference No</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <input type="text" name="PrReferenceNo" class="form-control perfectValidate_string_PR" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" onkeypress="filterSpecialCharacters(event)" />
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4" hidden>
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Bill Type</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <input type="hidden" name="ImportID" />
                                    <select class="form-control" name="Returntype" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" onchange="fun_imports(this)">
                                        @*<option value="1" selected>Bill Wise</option>
                                    <option value="2">Purchase Wise</option>*@
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row" style="display:none" id="divItemWise" >
                <div class="col-sm-12">
                    <div class="daccordion__header">
                        <span class="accordion__header--text">Product Details</span>
                    </div>

                    <br />
                    <div class="row">
                        <div class="col-sm-3">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    <span perfect-class="formGroupLabel">Product</span>
                                    <span class="text-danger">*</span>
                                </label>
                                <div class="col-sm-8">
                                    <div class="input-group">
                                        <input type="text" class="form-control " perfect-tempTable-Purchase="ProName" name="ProName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled />
                                        <input type="hidden" name="ProductID" perfect-tempTable-Purchase="ProductID" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                        <input type="hidden" name="ProductID" perfect-tempTable-Purchase="ProductID" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                        <input type="hidden" name="ID_Stock" perfect-tempTable-Purchase="ID_Stock" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                        <input type="hidden" name="PurRate" perfect-tempTable-Purchase="PurRate" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                        <input type="hidden" name="CurrentStock" perfect-tempTable-Purchase="CurrentStock" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                        <div class="input-group-append">
                                            <button id="depeartment" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchValAssign(this,38,'Product Details',[],['Slno', 'ID_Stock','PurRate','CurrentStock','StandbyStock','StandbyQuantity'],PurchaseReturnTransMode) ,cleardata(this)" Criterea1="FK_Branch" Criterea2="DepartmentID" BindName="ProName" BindVal="ProductID" Function="2"></button>

                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-3">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    <span perfect-class="formGroupLabel">Unit</span>
                                    <span class="text-danger">*</span>
                                </label>
                                <div class="col-sm-8">
                                    <select class="form-control" perfect-tempTable-Purchase="Unit" name="UnitID" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" onchange="BindQuantityDetails(this, 0),BindTaxDetails(this,0)">
                                        @*onchange="checkfields(this)"*@
                                        <option value="0">Please Select </option>

                                        @*<option value="1">Test</option>*@
                                        @if (!(Model.UnitList is null))
                                        {
                                            foreach (var unit in Model.UnitList)
                                            {
                                                <option value="@unit.ID_Unit" UnitCountS="@unit.UnitCount">@unit.UnitName</option>
                                            }
                                        }

                                    </select>

                                    <span class="temptableError"></span>
                                </div>
                            </div>
                            <span class="temptableError"></span>
                        </div>
                        <div class="col-sm-3">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    <span perfect-class="formGroupLabel">Quantity </span>
                                    <span class="text-danger">*</span>
                                </label>
                                <div class="col-sm-8">
                                    <div class="input-group">
                                        <input type="text" class="form-control text-right" perfect-tempTable-Purchase="Quantity" placeholder="" id="PpdQuantity" name="PpdQuantity" oninput="decimalpnt(this,'PpdQuantity',3)" onchange=" CalcActualQuantity(this),BindTaxDetails(this,0) " perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" min="0" maxlength="13" />

                                        <div class="input-group-append">
                                            <button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-plus" type="button" perfect-css="button" onclick="ShowQuantityDets(this)"></button>
                                            <div class="modal fade" perfect-class="formGroupModalQuantity" id="formGroupModalQuantity">
                                                <div class="modal-dialog modal-dialog-centered " role="document">
                                                    <div class="modal-content  rounded-lg">
                                                        <div class="modal-header border-0">
                                                            <h5 class="modal-title">Quantity Details</h5>
                                                            <button type="button" class="close" data-dismiss="modal">
                                                                <span>&times;</span>
                                                            </button>
                                                        </div>
                                                        <div class="modal-body" perfect-class="formGroup" style="max-height: calc(100vh - 200px); overflow-y: auto;padding: 1rem;">
                                                            <div class="form-row">
                                                                @*<div class="col-sm-12">
                                                    <div class="form-group row" perfect-class="formGroup">
                                                        <label class="col-sm-5 col-form-label">
                                                            <span perfect-class="formGroupLabel"> Shortage</span>
                                                        </label>
                                                        <div class="col-sm-6">
                                                            <input type="text" class="form-control text-right" perfect-tempTable-Purchase="PpdShortage" name="PpdShortage" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" id="PpdShortage" oninput="decimalpnt(this,'PpdShortage',4)" min="0" maxlength="13" />
                                                            <div class="text-danger temptableError"></div>
                                                        </div>

                                                    </div>
                                                </div>*@
                                                                <div class="col-sm-12">
                                                                    <div class="form-group row" perfect-class="formGroup">
                                                                        <label class="col-sm-5 col-form-label">
                                                                            <span perfect-class="formGroupLabel"> Free</span>
                                                                        </label>
                                                                        <div class="col-sm-6">
                                                                            <input type="text" class="form-control text-right" perfect-tempTable-Purchase="PpdFreeQuantity" name="PpdFreeQuantity" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" id="PpdFreeQuantity" oninput="decimalpnt(this,'PpdFreeQuantity',4)" min="0" maxlength="13" />
                                                                        </div>
                                                                        <div class="text-danger temptableError"></div>
                                                                    </div>
                                                                </div>
                                                                @*<div class="col-sm-12">
                                                    <div class="form-group row" perfect-class="formGroup">
                                                        <label class="col-sm-5 col-form-label">
                                                            <span perfect-class="formGroupLabel"> Less Quantity</span>
                                                        </label>
                                                        <div class="col-sm-6">
                                                            <input type="text" class="form-control text-right" perfect-tempTable-Purchase="Ppdless" name="Ppdless" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" id="Ppdless" oninput="decimalpnt(this,'Ppdless',4)" min="0" maxlength="13" />
                                                            <div class="text-danger temptableError"></div>
                                                        </div>

                                                    </div>
                                                </div>*@

                                                            </div>
                                                            <div class="modal-footer">
                                                                <button type="button" class="btn btn-primary1" perfect-css="button" onclick="BindQuantityDetails(this)" name="reset">Apply</button>
                                                                <button type="button" id="clearquantity" class="btn btn-light1" perfect-css="button" name="reset" onclick="ClearQuantity(this)">Clear</button>
                                                            </div>
                                                            <div class="col-md-12 mt-3" perfect-class="formGroupModalQuantitybody">


                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="modal-footer border-0"></div>
                                            </div>
                                        </div>
                                    </div>
                                    <span class="temptableError"></span>
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-3">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    <span perfect-class="formGroupLabel">Current Stock</span>

                                </label>
                                <div class="col-sm-8">
                                    <input type="number" class="form-control text-right" perfect-tempTable-Purchase="PpdCurrentStock" name="PpdCurrentStock" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled />
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-3">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    <span perfect-class="formGroupLabel">Act.Qty</span>
                                    <span class="text-danger">*</span>
                                </label>
                                <div class="col-sm-8">
                                    <input type="number" class="form-control text-right" perfect-tempTable-Purchase="PpdActualQuantity" name="PpdActualQuantity" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled />
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-3">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    <span perfect-class="formGroupLabel">Pur.Rate</span>
                                    <span class="text-danger">*</span>
                                </label>
                                <div class="col-sm-8">
                                    <div class="input-group">
                                        <input type="text" class="form-control text-right" perfect-tempTable-Purchase="Pur.Rate" name="PpdRate" id="PpdRate" oninput="decimalpnt(this,'PpdRate',3)" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" min="0" maxlength="12" onchange=" BindTaxDetails(this, 0)" />
                                        <div class="input-group-append">
                                            <button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-plus" type="button" perfect-css="button" onclick="ShowPurchaserateDetails(this)" title="Purchase Discount Details"></button>
                                            <div class="modal fade" perfect-class="formGroupModalPurchaserate" id="formGroupModalPurchaserate">
                                                <div class="modal-dialog modal-dialog-centered " role="document">
                                                    <div class="modal-content  rounded-lg">
                                                        <div class="modal-header border-0">
                                                            <h5 class="modal-title">Purchase Discount Details</h5>
                                                            @*<button type="button" class="close" data-dismiss="modal" onclick="cleardiscountpopup(this)">
                                                <span>&times;</span>
                                            </button>*@
                                                            <button type="button" class="close" data-dismiss="modal">
                                                                <span>&times;</span>
                                                            </button>
                                                        </div>
                                                        <div class="modal-body" perfect-class="formGroup" style="max-height: calc(100vh - 200px); overflow-y: auto;padding: 1rem;">
                                                            <div class="form-row">

                                                                @*<div class="col-sm-12">
                                                    <div class="form-group row" perfect-class="formGroup">
                                                        <label class="col-sm-5 col-form-label">
                                                            <span perfect-class="formGroupLabel"> Discount %</span>
                                                        </label>
                                                        <div class="col-sm-6">
                                                            <input type="text" class="form-control text-right" perfect-tempTable-Purchase="PpdpurDiscper" name="PpdpurDiscper" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" onchange="PurchaseDiscount(this,1)" oninput="minmax(0,100,this,3)" onkeypress="return isNumberKey(event)" />
                                                        </div>
                                                    </div>
                                                </div>*@
                                                                <div class="col-sm-12">
                                                                    <div class="form-group row" perfect-class="formGroup">
                                                                        <label class="col-sm-5 col-form-label">
                                                                            <span perfect-class="formGroupLabel"> Discount</span>
                                                                        </label>
                                                                        <div class="col-sm-6">
                                                                            <input type="text" class="form-control text-right" perfect-tempTable-Purchase="PpdpurDis" name="PpdpurDis" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" onchange="PurchaseDiscount(this,2)" oninput="decimalpnt(this,'PpdpurDis',3)" min="0" maxlength="12" />
                                                                            <div class="text-danger temptableError"></div>
                                                                        </div>

                                                                    </div>
                                                                </div>
                                                                <div class="col-sm-12">
                                                                    <div class="form-group row" perfect-class="formGroup">
                                                                        <label class="col-sm-5 col-form-label">
                                                                            <span perfect-class="formGroupLabel"></span>

                                                                        </label>
                                                                        <div class="col-sm-6 ">
                                                                            <button type="button" class="btn btn-primary1" perfect-css="button" data-dismiss="modal" onclick="BindpurchaseDetails(this,0)" name="reset">Apply</button>
                                                                            <button type="button" class="btn btn-light1" perfect-css="button" onclick="cleardiscount(this)" name="reset">Clear</button>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>

                                                            <div class="col-md-12 mt-1" perfect-class="formGroupModalPurchaseratebody">



                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <span class="temptableError"></span>
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-3">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    <span perfect-class="formGroupLabel">Tax </span>
                                    <span class="text-danger">*</span>
                                </label>
                                <div class="col-sm-8">
                                    <div class="input-group">
                                        <input type="number" class="form-control text-right" perfect-tempTable-Purchase="TaxAmount" placeholder="" name="TaxAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled />
                                        <div class="input-group-append">
                                            <button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="BindTaxDetails(this,1)"></button>
                                            <div class="modal fade" perfect-class="formGroupModalTax" id="formGroupModalTax">
                                                <div class="modal-dialog modal-dialog-centered" role="document">
                                                    <div class="modal-content  rounded-0">
                                                        <div class="modal-header border-0">
                                                            <h5 class="modal-title">Tax Details</h5>
                                                            <button type="button" class="close" data-dismiss="modal">
                                                                <span>&times;</span>
                                                            </button>
                                                        </div>
                                                        <table id="zero_config" class="table mb-0  table-striped  text-black">
                                                            <thead class="bg-primary text-white">
                                                                <tr>
                                                                    <th class="t-head">Sl No</th>
                                                                    <th class="t-head" style="Display:none">ProductID</th>
                                                                    <th class="t-head" style="Display:none">FK_TaxType</th>
                                                                    <th class="t-head">TaxType</th>
                                                                    <th class="t-head">Percentage</th>
                                                                    <th class="t-head">Amount</th>
                                                                </tr>
                                                            </thead>
                                                            <tbody class="modal-body" id="formGroupModalTaxbody"></tbody>
                                                            <tfoot>
                                                            </tfoot>
                                                        </table>
                                                        <div class="modal-footer">
                                                            <button type="button" class="btn btn-primary1" data-dismiss="modal" onclick="BindTaxAmount(this)">Ok</button>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <span class="temptableError"></span>
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-3">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    <span perfect-class="formGroupLabel">Total Rate</span>
                                    <span class="text-danger">*</span>
                                </label>
                                <div class="col-sm-8">
                                    <input type="text" class="form-control text-right" id="NETPurchase" perfect-tempTable-Purchase="PpdRate" oninput="decimalpnt(this,'NETPurchase',3)" onchange="CalculateRate(this),TaxchangeonNetpurchase(this)" name="NetPurchase" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled min="0" maxlength="12">

                                </div>
                            </div>
                            <span class="temptableError"></span>
                        </div>
                        <div class="col-sm-3">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                </label>
                                <div class="col-sm-8">
                                </div>
                            </div>
                            <span class="temptableError"></span>
                        </div>
                        <div class="col-sm-3">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                </label>
                                <div class="col-sm-8">
                                </div>
                            </div>
                            <span class="temptableError"></span>
                        </div>
                        <div class="col-sm-3">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                </label>
                                <div class="col-sm-8">
                                </div>
                            </div>
                            <span class="temptableError"></span>
                        </div>
                        <div class="col-sm-3">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">&nbsp;</label>
                                <div class="col-sm-8">
                                    <button type="button" id="purtupsave" class="btn btn-primary1" onclick="AddPurchaseDetails(this,'Purchase',['ProductID'],['Unit','TaxAmount','UnitID','UnitCountS','Quantity','PpdFreeQuantity','PpdActualQuantity','Pur.Rate','PpdpurDis','PpdRate','TaxAmount','MRP','SalPrice','PpdDisper','PpdDiscount','PpdProAmnt','PpdCurrentStock'])" data-placement="top" data-html="true" title="Add Product Details"><i class="fa fa-plus" aria-hidden="true"></i></button>
                                    @*<button type="button" id="purtupdate" class="btn btn-primary1" onclick="AddPurchaseDetails(this,'Purchase',['ProductID'],['Unit','TaxAmount','UnitID','UnitCountS','PpdBarCode','PpdQRCode','PpdShortage','Quantity','PpdShortage','Ppdless','PpdFreeQuantity','PpdActualQuantity','Pur.Rate','PpdpurDiscper','PpdpurDis','PpdRate','TaxAmount','MRP','SalPrice','PpdDisper','PpdDiscount','PpdProPer','PpdProAmnt'])" data-placement="top" data-html="true" title="Add Product Details">Add</button>*@
                                    <button type="button" id="purreset" class="btn btn-light1" perfect-css="button" onclick="productclear(this,'Purchase')" name="reset" title="Reset"><i class="fa fa-refresh" aria-hidden="true"></i></button>
                                    <input type="hidden" min="0" class="form-control text-right" perfect-tempTable-Purchase="UID" name="UID" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                                    @*<button type="button" id="purtupsave" class="btn btn-primary1" data-placement="top" data-html="true" title="Add Product Details">Add</button>
                    <button type="button" id="reset" class="btn btn-light1" perfect-css="button" onclick="ResetButtontable(this)" name="reset">Clear</button>
                    <input type="hidden" min="0" class="form-control text-right" perfect-tempTable-Purchase="UID" name="UID" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />*@
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-3">
                            <input type="hidden" min="0" class="form-control text-right" perfect-tempTable-Purchase="UID" name="UID" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                        </div>
                        <div class="col-sm-12">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    <span perfect-class="formGroupLabel"></span>

                                </label>
                                <div class="col-sm-12">
                                    <input type="hidden" name="customerIndex" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="hidden" perfect-tempTable-Purchase="Sl No" value="" />

                                    <div class="table-responsive tableFixHead" perfect-tempTable="Purchase" id="Purchasedetailshead" perfect-tempTable-lastindex="0" perfect-tempTable-action="0"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row" id="divPurreturn">
                <div class="col-sm-12">
                    <div class="daccordion__header">
                        <span class="accordion__header--text">Product Details</span>
                    </div>
                    <br />
                    <div class="table-responsive" perfect-tempTable="PurchaseReturn" id="Purreturn" style="display:none;">
                        <table class="table table-responsive-lg" id="EMPL">
                            <thead class="btn-primary" id="ReturnHead">
                                <tr>
                                    <th scope="col" style="text-align:center">SL.NO</th>
                                    <th style="display:none; text-align:center"><strong>ProductID</strong></th>
                                    <th scope="col" style="text-align:center">Product</th>
                                    <th scope="col" style="text-align:center">Unit</th>
                                    <th scope="col" style="text-align:right">Quantity</th>
                                    <th scope="col" style="text-align:right">Free</th>
                                    <th scope="col" style="text-align:right">Act.Qty</th>
                                    <th scope="col" style="text-align:right">Purchase Rate</th>
                                    <th scope="col" style="text-align:right">Discount</th>
                                    <th scope="col" style="display:none;">FK_Purchase</th>
                                    <th scope="col" style="text-align:right">Tax</th>
                                    <th scope="col" style="display:none;">UnitID</th>
                                    <th scope="col" style="display:none;">FK_Stock</th>
                                    <th scope="col" style="display:none;">UID</th>
                                    <th scope="col" style="display:none;">HidQuantity</th>
                                    <th scope="col" style="display:none;">HidTax</th>
                                    <th scope="col" style="display:none;">hidTotal Rate</th>
                                    <th scope="col" style="display:none;">hidunitcount</th>
                                    <th scope="col" style="display:none;">hidincludetax</th>
                                    <th scope="col" style="text-align:right">Total Rate</th>
                                    <th scope="col" style="text-align:center"></th>

                                </tr>
                            </thead>
                            <tbody id="PurchaseReturntbody">
                                <tr id="0">
                                    <td style="text-align:center;" colspan="4">No Records..</td>
                                </tr>

                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="col-sm-3">
                <div class="form-group row" perfect-class="formGroup">
                   
                    <div class="col-sm-8">
                        <div class="input-group">
                            
                            <div class="input-group-append">
                               
                                <div class="modal fade" perfect-class="formGroupModalTaxnew" id="formGroupModalTaxnew">
                                    <div class="modal-dialog modal-dialog-centered" role="document">
                                        <div class="modal-content  rounded-0">
                                            <div class="modal-header border-0">
                                                <h5 class="modal-title">Tax Details</h5>
                                                <button type="button" class="close" data-dismiss="modal">
                                                    <span>&times;</span>
                                                </button>
                                            </div>
                                            <table id="zero_confignew" class="table mb-0  table-striped  text-black">
                                                <thead class="bg-primary text-white">
                                                    <tr>
                                                        <th class="t-head">Sl No</th>
                                                        <th class="t-head" style="Display:none">ProductID</th>
                                                        <th class="t-head" style="Display:none">FK_TaxType</th>
                                                        <th class="t-head">TaxType</th>
                                                        <th class="t-head">Percentage</th>
                                                        <th class="t-head">Amount</th>
                                                    </tr>
                                                </thead>
                                                <tbody class="modal-body" id="formGroupModalTaxnewbody"></tbody>
                                                <tfoot>
                                                </tfoot>
                                            </table>
                                            <div class="modal-footer">
                                                @*<button type="button" class="btn btn-primary1" data-dismiss="modal" onclick="BindTaxAmount(this)">Ok</button>*@
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <span class="temptableError"></span>
                    </div>
                </div>
            </div>
            <hr />
            <div class="row">
                <div class="col-sm-12">
                    <div class="row">
                        <div class="col-sm-4">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    <span perfect-class="formGroupLabel">Total Tax</span>

                                </label>
                                <div class="col-sm-8">
                                    <input type="text" class="form-control text-right" name="PrTotaltax" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled />
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-4">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    <span perfect-class="formGroupLabel">Total Amount</span>

                                </label>
                                <div class="col-sm-8">
                                    <input type="text" class="form-control text-right" name="PrBillTotal" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled />
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-4">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    <span perfect-class="formGroupLabel">Other Charge</span>

                                </label>
                                <div class="col-sm-8">
                                    <div class="input-group">
                                        <input type="text" class="form-control text-right" name="OtherCharge" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly />
                                        <div class="input-group-append">
                                            <button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-credit-card" type="button" perfect-css="button" onclick="ShowOtherCharges(this)"></button>
                                            <div class="modal fade" perfect-class="formGroupModalOtherCharge" id="formGroupModalOtherCharge">
                                                <div class="modal-dialog modal-dialog-centered" role="document">
                                                    <div class="modal-content  rounded-0">
                                                        <div class="modal-header border-0">
                                                            <h5 class="modal-title">Other Charge Details</h5>
                                                            <button type="button" class="close" data-dismiss="modal">
                                                                <span>&times;</span>
                                                            </button>
                                                        </div>
                                                        <div class="modal-body" perfect-class="formGroup" style="max-height: calc(100vh - 200px); overflow-y: auto;padding: 1rem;">
                                                            @*<div class="table-responsive" style="max-height: 100%; height: 80%; overflow: auto;">*@
                                                            <table id="zero_configOthercharge" class="table mb-0  table-striped  text-black">
                                                                <thead class="bg-primary text-white">
                                                                    <tr>
                                                                        <th class="t-head">Sl No</th>
                                                                        <th class="t-head" style="display:none">ID_OtherChargeType</th>
                                                                        <th class="t-head">Type</th>
                                                                        <th class="t-head">Trans Type</th>
                                                                        <th class="t-head">Amount</th>

                                                                    </tr>
                                                                </thead>
                                                                <tbody id="formGroupModalOtherChargebody"></tbody>
                                                                <tfoot>
                                                                </tfoot>
                                                            </table>
                                                            @*</div>*@
                                                            @*<div class="modal-body" id="formGroupModalTaxbody">
                                                        </div>*@
                                                            <div class="modal-footer">
                                                                @*<button type="button" onclick="CreateProductCheckDescription(this);" class="btn btn-primary">Add</button>*@
                                                                <button type="button" class="btn btn-primary1" data-dismiss="modal" onclick="BindOtherChargeAmount(this)">Apply</button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        @*<div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Discount%</span>

                            </label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control text-right" name="PrDiscountperc" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled />
                            </div>
                        </div>
                    </div>*@
                        <div class="col-sm-4">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    <span perfect-class="formGroupLabel">Discount</span>

                                </label>
                                <div class="col-sm-8">
                                    <input type="text" class="form-control text-right" name="PrDiscount" id="PrDiscount" onchange="RoundOffCalcs(this)" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="decimalpnt(this,'PrDiscount',3)" maxlength="12"/>
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-4">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    <span perfect-class="formGroupLabel">Round off</span>

                                </label>
                                <div class="col-sm-8">
                                    <input type="text" class="form-control text-right" name="PrRoundOff" id="PrRoundOff" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" onchange="RoundOffCalcTotal(this)" oninput="decimalpntminus(this,'PrRoundOff',3)" />
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-4">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    <span perfect-class="formGroupLabel">Net Amount</span>

                                </label>
                                <div class="col-sm-8">
                                    <input type="text" class="form-control text-right" name="PrNetAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly />
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-4">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    <span perfect-class="formGroupLabel">Remarks</span>

                                </label>
                                <div class="col-sm-8">
                                    <input type="text" class="form-control perfectValidate_Remarks_nm " name="Remarks" perfect-class="formGroupControl" perfect-ctype="input" onkeypress="filterSpecialCharacters(event)" perfect-css="input" />
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
            </div>

            <div class="card-footer text-right" perfect-class="formFooter">
                <button id="" type="button" class="btn btn-primary mr-3 addcompany-jq-addnewuserUpdate d-none" name="update" perfect-css="button" onclick="fn_PurchaseReturnForm_update(this)"><i class="fa fa-refresh fa-spin loaderClass"></i>Update</button>
                <button id="addcompany-jq-addnewuser" type="button" class="btn btn-primary mr-3 " name="add" perfect-css="button" onclick="fn_PurchaseReturnForm_add(this)"><i class="fa fa-refresh fa-spin loaderClass "></i>Save</button>
                <button type="button" id="prreset"class="btn btn-light" perfect-css="button" onclick="ResetButton(this)" name="reset">Clear</button>
            </div>
        </form>
    </div>  
</div>

<script src="~/Scripts/jqDOM/searchDOMCreation.js"></script>
<script>
 $(document).ready(function ()
 {
     initFunctions('form');
     //alert($('#FK_Branch').val());
     let $thisForm = $(this).find('[perfect-class="form"]');
     $thisForm.find('[name="FK_BranchCodePRrn"]').val(FK_BranchCodePRrn);
    });
    function ResetButton(ele) {

        fn_PurchaseReturnIndex_initialLoad();

    }
    //    debugger;
    //    let $thisForm = $(ele).closest('[perfect-class="form"]');

    //    $thisForm.find('[perfect-ctype="select"]').val('').selectpicker('refresh');
    //    $thisForm.find('[perfect-ctype="input"]').val('');

    //    $thisForm.find('[perfect-ctype="date"]').val('');
    //    $thisForm.find('[perfect-ctype="hidden"]').val('');
    //    $thisForm.find('[name="Returntype"]').val(2).selectpicker('refresh');
    //    $thisForm.find('[name="ReturnDate"]').val(moment().format('YYYY-MM-DD'));
    //    tax=[];
    //    othrchargelst = [];
    //    OtherCharge = [];
    //    Getdepartmentdefault();
    //    $("#PurchaseReturntbody").html('');
    //    $('#Purreturn').css('display', 'none');
    //    let saveddat = $thisForm.data('prtData');
    //    let purrproduct = $thisForm.data('prtproductsData');
    //    var CheckListHTML = '';
    //    if (saveddat) {
    //        $thisForm.find('[name="ReturnDate"]').val(moment(saveddat.PrBillDate).format('YYYY-MM-DD'));
    //        $thisForm.find('[name="SupplierName"]').val(saveddat.BranchID);
    //        $thisForm.find('[name="Returntype"]').val(2).selectpicker('refresh');
    //        $thisForm.find('[name="ID_PurchaseReturn"]').val(saveddat.ID_PurchaseReturn);
    //        $thisForm.find('[name="DepartmentID"]').val(saveddat.FK_Department);
    //        $thisForm.find('[name="DepartmentName"]').val(saveddat.Department),
    //        $thisForm.find('[name="FK_Supplier"]').val(saveddat.FK_Supplier);
    //        $thisForm.find('[name="SupplierName"]').val(saveddat.Supplier);
    //        $thisForm.find('[name="PrInvoiceNo"]').val(saveddat.PrInvoiceNo);
    //        $thisForm.find('[name="PrInvoiceDate"]').val(moment(saveddat.PrInvoiceDate).format('YYYY-MM-DD'));
    //        $thisForm.find('[name="PrReferenceNo"]').val(saveddat.PrReferenceNo);
    //        $thisForm.find('[name="PurchaseID"]').val(saveddat.FK_Purchase);
    //        //$thisForm.find('[name="FK_Stock"]').val(ajaxOutput.PurRetInfo.Data[0]['PurDiscount']);
    //        //$thisForm.find('[name="PrTotaltax"]').val((ajaxOutput.PurRetInfo.Data[0]['PrOthercharges']).toFixed(2));
    //        $thisForm.find('[name="PrBillTotal"]').val((saveddat.PrBillTotal).toFixed(2));
    //        $thisForm.find('[name="OtherCharge"]').val((saveddat.PrOthercharges).toFixed(2));
    //        $thisForm.find('[name="PrDiscount"]').val(saveddat.PrDiscount.toFixed(2));
    //        $thisForm.find('[name="PrRoundOff"]').val(saveddat.PrRoundoff);
    //        $thisForm.find('[name="Remarks"]').val(saveddat.PrRemarks);
    //        $thisForm.find('[name="PrNetAmount"]').val((saveddat.PrNetAmount).toFixed(2));

    //        othrchargelst = $thisForm.data('prtothchgData');
    //        tax = $thisForm.data('prtTaxData');
    //        $('#Purreturn').css('display', 'block');
    //        if (purrproduct.dtable.length > 0) {
    //            $.each(purrproduct.dtable, function (i, value) {
    //                //alert(value.ProductID);
    //                //fillgrid('Purchase', PotableOptionsTempOut, $thisForm, table.dtable);
    //                //BindBilldetails(ele);
    //                CheckListHTML += "<tr>";
    //                CheckListHTML += "<td style='text-align:center'>" + value.SLNo + "</td>";
    //                CheckListHTML += "<td Class='jq_productId' Style='Display:none'>" + value.ProductID + "</td>";
    //                CheckListHTML += "<td Class='jq_Type_td' style='text-align:left'>" + value.ProName + "</td>";
    //                CheckListHTML += "<td Class='jq_unit_td' style='text-align:center'>" + value.Unit + "</td>";
    //                CheckListHTML += "<td class='jq_quantity_td' style='text-align:right'><input type='text' class='form-control text-right' name='qty' id='quantity' oninput='decimalpnt(this,quantity,4,1)' onkeypress='return isNumberKey(event)'  value='" + (value.PpdQuantity).toFixed(3) + "' min='0'  maxlength='13'' /></td></td>";
    //                CheckListHTML += "<td class='free_td' style='text-align:right'><input type='text' class='form-control text-right' perfect-class='formGroupControl' name='free' id='free' oninput='decimalpnt(this,free,4,1)' onkeypress='return isNumberKey(event)' value='" + (value.FreeQuantity).toFixed(3) + "' maxlength='13' ' /></td></td>";
    //                CheckListHTML += "<td class='ActQty_td' style='text-align:right'><input type='text'  class='form-control text-right' perfect-class='formGroupControl' name='actqty' id='actqty' oninput='decimalpnt(this,actqty,4,1)' onkeypress='return isNumberKey(event)'  value='" + (value.PpdActualQuantity).toFixed(3) + "' maxlength='13' readonly /></td></td>";
    //                CheckListHTML += "<td class='jq_purrate_td' style='text-align:right'>" + (value.PpdRate).toFixed(2) + "</td>";
    //                CheckListHTML += "<td Class='jq_FK_Purchase_td' Style='Display:none'>" + value.FK_Purchase + "</td>";
    //                CheckListHTML += "<td class='jq_Tax_td' style='text-align:right'><div class='input-group'><input type='text'  class='form-control text-right' perfect-class='formGroupControl'   value='" + (value.TaxAmount).toFixed(2) + "' maxlength='13' readonly><div class='input-group-append'><button type='button' class='btn btn-primary fa fa-search' onclick='ShowTaxDetails(this,1)'></button> </div></div></td></td>";
    //                CheckListHTML += "<td Class='jq_unitID_td' Style='Display:none'>" + value.UnitID + "</td>";
    //                CheckListHTML += "<td Class='jq_FK_STOCK_td'  Style='Display:none'>" + value.FK_Stock + "</td>";
    //                CheckListHTML += "<td Class='jq_UID_td'  Style='Display:none'>" + value.UID + "</td>";
    //                CheckListHTML += "<td Class='jq_quantity_td_hid' Style='Display:none'>" + (value.PpdQuantity).toFixed(2) + "</td>";
    //                CheckListHTML += "<td Class='jq_Tax_td_hid' Style='Display:none'>" + (value.TaxAmount).toFixed(2) + "</td>";
    //                CheckListHTML += "<td Class='jq_TotalAmount_td_hid'  Style='Display:none'>" + (value.NetPurchase).toFixed(2) + "</td>";
    //                CheckListHTML += "<td Class='jq_unit_count' Style='Display:none'>" + value.UnitCount + "</td>";
    //                CheckListHTML += "<td Class='jq_includetax' Style='Display:none'>" + value.PrdIncludeTaxOnPurRate + "</td>";
    //                CheckListHTML += "<td Class='jq_TotalAmount_td'  style='text-align:right'>" + (value.NetPurchase).toFixed(2) + "</td>";
    //                CheckListHTML += "<td Class='free_td_hid' Style='Display:none'>" + (value.FreeQuantity).toFixed(3) + "</td>";
    //                CheckListHTML += "<td style='text-align:center;'><div class='d-flex'><a href='#' class='btn btnPerfectGrid shadow btn-xs sharp mr-1'onclick='RemoveProductdetails(this)' title='Delete'><i class='fa fa-trash btnPerfectGridDelete'></i></a>";
    //                //CheckListHTML += "<a href='#' class='btn btn-danger shadow btn-xs sharp mr-1' title='Delete'><i class='fa fa-trash'></i></a></div></td>";
    //                CheckListHTML += "</tr>";

    //            });

    //        }
    //        else {
    //            CheckListHTML += "<div class='form-group col-md-6'>";
    //            CheckListHTML += "<div class='form-check mb-2'>";
    //            CheckListHTML += "<label class='form-check-label' for='check1'>No Records...</label>";
    //            CheckListHTML += "</div></div>"
    //        }
    //        $("#PurchaseReturntbody").html(CheckListHTML)
    //        calculateTotals(ele);
    //        RoundOffCalcs(ele);
    //    }
    //    $thisForm.validate().resetForm();
    //}
    function datecheck(ele) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        //invalid-feedback
        let upperlimit = $thisForm.find('[name="ReturnDate"]').val();
        let lowerlimit = $thisForm.find('[name="PrInvoiceDate"]').val();

        var enqDate = new Date(upperlimit);
        enqDate.setHours(0, 0, 0, 0)
        var invDate = new Date(lowerlimit);
        invDate.setHours(0, 0, 0, 0)
        var today = new Date();
        today.setHours(0, 0, 0, 0)
        let errorclass = '.temptableErrors';
        if (enqDate > today) {

            console.log('inside limit check if')
            $thisForm.find('[name="ReturnDate"]').closest('[perfect-class="formGroup"]').find(errorclass).attr("style", "display:block");
            $thisForm.find('[name="ReturnDate"]').closest('[perfect-class="formGroup"]').find(errorclass).text('Return Date should be less than or equal to Todays date');
        }
        else if (invDate > enqDate) {
            $thisForm.find('[name="ReturnDate"]').closest('[perfect-class="formGroup"]').find(errorclass).attr("style", "display:block");
            $thisForm.find('[name="ReturnDate"]').closest('[perfect-class="formGroup"]').find(errorclass).text('Return Date should not less than Invoice date');
        }
        else {
            $thisForm.find('[name="ReturnDate"]').closest('[perfect-class="formGroup"]').find(errorclass).attr("style", "display:none");
            $thisForm.find('[name="ReturnDate"]').closest('[perfect-class="formGroup"]').find(errorclass).text('');
        }

    }
    function fn_PurchaseReturn_loadTax(element,VALUE) {
        let $thisRow = $(this).closest('tr');
        let saveddata = $thisRow.data('pData');
        tax = [];
        let $thisForm = $(element).closest('[perfect-class="form"]');
            let inputData = {
                __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                'FK_Master': VALUE,
            };

            $.ajax({
                url: "@Url.Action("GetPurchaseReturnTaxFill", "PurchaseReturn")",
                type: "POST",
                data: inputData,
                dataType: "json",
                contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                success: function (ajaxOutput) {
                    console.log('sss', ajaxOutput)
                    //let $thisForm = $(ele).find('[perfect-class="form"]');
                    if (ajaxOutput.TaxDetails.Process.IsProcess) {
                        console.log('TAX DATA>', ajaxOutput.TaxDetails.Data)
                            debugger;

                             $thisForm.data({ Returntaxdata: ajaxOutput.TaxDetails.Data});



                        }


                },
                complete: function () {

                    Taxdet(element);

                }

            });

    }
    //tax array declared outside
    var tax = [];

    function Taxdet(ele, Arr) {
        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        //let $modal = $thisForm.find('#zero_config');

        let savedReturndata = $thisForm.data('Returntaxdata');
        //let tax = [];

        $.each(savedReturndata, function (key, value) {
            let taxinfo = {};
            taxinfo['UID'] = value.UID;
            taxinfo['ProductID'] = value.ProductID;
            taxinfo['FK_TaxType'] = value.FK_TaxType;
            taxinfo['TaxTyName'] = value.TaxtyName;
            taxinfo['TaxPercentage'] = value.TaxPercentage;
            taxinfo['TaxAmount'] = value.TaxAmount;


            tax.push(taxinfo);
        });
        console.log('TAX>', tax);
    }

    function RemoveTaxArray(ele, id) {
        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');

        let UID = id; /*$('[name=UID]').val();*/

        console.log('TAX>', tax);

        var foundItems = [];

        $.each(tax, function (key, value) {
            debugger
            foundItems = tax.filter(x => x.UID.toString() == UID.toString());
            console.log('tax.filter(x => x.UID>', tax.filter(x => x.UID.toString()));

            const indexOfObject = tax.findIndex(object => {
                return object.UID.toString() === UID.toString();
            });

            console.log('TAXFINDSSSS>', tax);
            console.log('foundItems length>', foundItems.length);

            tax.splice(indexOfObject, foundItems.length);
        });

        console.log('TAXDELETE>', tax);

    }
 var tableVal = false;
//check table validation
    function tablevalidation() {

        $thisForm.find('[perfect-tempTable="PurchaseReturn"]').find('tbody').find('tr').each(function () {
            let tr = $(this);
            let Purchasereturndata = {
                FK_Product: tr.find("td:eq(1)").text().trim(),
                Product: tr.find("td:eq(2)").text().trim(),
                Unit: tr.find("td:eq(3)").text().trim(),
                Quantity: (tr.find("td:eq(4)").find('input').val().trim()),
                free: tr.find("td:eq(5)").find('input').val().trim(),
                ActualQty: tr.find("td:eq(6)").find('input').val().trim(),
                PurchaseRate: tr.find("td:eq(7)").text().trim(),
                FK_Purchase: tr.find("td:eq(8)").text().trim(),
                Tax: tr.find('.jq_Tax_td').find('input').val().trim(),
                UnitID: tr.find("td:eq(10)").text().trim(),
                FK_Stock: tr.find('.jq_FK_STOCK_td').text().trim(),
                UID: tr.find('.jq_UID_td').text().trim(),
                TotalRate: tr.find('.jq_TotalAmount_td').text().trim(),
                IncludeTax: tr.find('.jq_includetax').text().trim(),
            }
            if (tr.find("td:eq(4)").find('input').val() != 0) {
                tableVal = true;
            }
            else {
                tableVal = false;
            }

        })
    }
  //Function to Add PurchaseReturn
    function fn_PurchaseReturnForm_add(ele) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let ReturnType = $thisForm.find('[name="Returntype"]').val();
        debugger;
        var tbVal = false;
        var isvalids = false;
        $('#EMPL').find('tbody tr').each(function (index, ele) {
            var i = 1;
            debugger
            let tr = $(this);

            debugger

            if (tr.find(".jq_quantity_td").find('input').val() == "" || tr.find(".jq_quantity_td").find('input').val() == 0) {
                debugger

                isvalids = false;
            }
            else {
                debugger
                isvalids = true;
            }



            return isvalids;
        });
        if (ReturnType == '1') {
            isvalids = true;
        }
        console.log('0 VALIDITY>', isvalids);


        let upperlimit = $thisForm.find('[name="ReturnDate"]').val();
        let lowerlimit = $thisForm.find('[name="PrInvoiceDate"]').val();

        let datevalid = 0;
        isValid = false;
        var enqDate = new Date(upperlimit);
        enqDate.setHours(0, 0, 0, 0)
        var invDate = new Date(lowerlimit);
        invDate.setHours(0, 0, 0, 0)
        var today = new Date();
        today.setHours(0, 0, 0, 0)

        let errorclass = '.temptableErrors';
       
        if (enqDate > today) {

            console.log('inside limit check if')
            $thisForm.find('[name="ReturnDate"]').closest('[perfect-class="formGroup"]').find(errorclass).attr("style", "display:block");
            $thisForm.find('[name="ReturnDate"]').closest('[perfect-class="formGroup"]').find(errorclass).text('Return Date should be less than or equal to Todays date');
            isValid = false;
        }
        else if (invDate > enqDate) {
            $thisForm.find('[name="ReturnDate"]').closest('[perfect-class="formGroup"]').find(errorclass).attr("style", "display:block");
            $thisForm.find('[name="ReturnDate"]').closest('[perfect-class="formGroup"]').find(errorclass).text('Return Date should not less than Invoice date');
        }
        else {
            $thisForm.find('[name="ReturnDate"]').closest('[perfect-class="formGroup"]').find(errorclass).attr("style", "display:none");
            $thisForm.find('[name="ReturnDate"]').closest('[perfect-class="formGroup"]').find(errorclass).text('');
            isValid = true;
        }

        if ($thisForm.valid() && isValid == true && isvalids == true) {
            $(ele).prop('disabled', true);
            let PurchaseRet = [];
            if (ReturnType == 2) {
            $thisForm.find('[perfect-tempTable="PurchaseReturn"]').find('tbody').find('tr').each(function () {
                let tr = $(this);
                let Purchasereturndata = {
                    FK_Product: tr.find("td:eq(1)").text().trim(),
                    Product: tr.find("td:eq(2)").text().trim(),
                    Unit: tr.find("td:eq(3)").text().trim(),
                    Quantity: (tr.find("td:eq(4)").find('input').val().trim()),
                    free: tr.find("td:eq(5)").find('input').val().trim(),
                    ActualQty: tr.find("td:eq(6)").find('input').val().trim(),
                    PurchaseRate: tr.find("td:eq(7)").text().trim(),
                    FK_Purchase: tr.find("td:eq(9)").text().trim(),
                    Tax: tr.find('.jq_Tax_td').find('input').val().trim(),
                   // UnitID: tr.find("td:eq(11)").text().trim(),
                   
                    UnitID: tr.find(".jq_unitID_td").text().trim(),
                    FK_Stock: tr.find('.jq_FK_STOCK_td').text().trim(),
                    UID: tr.find('.jq_UID_td').text().trim(),
                    TotalRate: tr.find('.jq_TotalAmount_td').text().trim(),
                    IncludeTax: tr.find('.jq_includetax').text().trim(),
                    Discount: (tr.find("td:eq(8)").find('input').val().trim()),
                }

                PurchaseRet.push(Purchasereturndata);
            })

            }
           // console.log('data return:', Purchasereturndata);
            else if (ReturnType == 1) {
                debugger;
                let savedData = [];
                console.log('wew', $thisForm.find('[perfect-tempTable="Purchase"]').length);
                $thisForm.find('[perfect-tempTable="Purchase"]').find('tbody').find('tr').each(function () {

                    savedData.push($(this).data('pData'));

                })
                console.log('savedData-', savedData);
                //let PurchaseRet = [];
                $.each(savedData, function (index, element) {
                    debugger;
                    let Purchasereturndata = {

                        FK_Product: element.ProductID,
                        Product: element.ProName,
                        Unit: element.UnitID_d,
                        Quantity: element.PpdQuantity,
                        free: element.PpdFreeQuantity,
                        ActualQty: element.PpdActualQuantity,
                        PurchaseRate: element.PpdRate,
                        FK_Purchase: $thisForm.find('[name="PurchaseID"]').val() == "" ? "0" : $thisForm.find('[name="PurchaseID"]').val(),
                        Tax: element.TaxAmount,
                        UnitID: element.UnitID,
                        FK_Stock: element.ID_Stock,
                        UID: index + 1,
                        TotalRate: element.NetPurchase,
                        IncludeTax: 0,
                        Discount: element.PpdpurDis,
                    }

                    PurchaseRet.push(Purchasereturndata);
                });
                console.log('PurchaseRet>.', PurchaseRet);

            }
           
         
            //let savedReturndata = $thisForm.data('Returntaxdata');
            ////let tax = [];

            //$.each(savedReturndata, function (key, value) {
            //let taxinfo = {};
            //    taxinfo['UID'] = value.UID;
            //    taxinfo['ProductID'] = value.ProductID;
            //    taxinfo['FK_TaxType'] = value.FK_TaxType;
            //    taxinfo['TaxTyName'] = value.TaxtyName;
            //    taxinfo['TaxPercentage'] = value.TaxPercentage;
            //    taxinfo['TaxAmount'] = value.TaxAmount;


            //    tax.push(taxinfo);
            //});


            var rowcount = document.getElementById('PurchaseReturntbody').rows.length;
            //alert(rowcount);




            let $modal2 = $thisForm.find('#zero_configOthercharge');
            let OtherCharge = [];
            $modal2.find('tbody').find('tr').each(function () {

                let OtChargeinfo = {};
                OtChargeinfo['ID_OtherChargeType'] = $(this).find('.jq_ID_OtherChargeType_td').text();

                OtChargeinfo['OctyTransType'] = $(this).find('.jq_TransType_td').find('select').val();
                OtChargeinfo['OctyName'] = $(this).find('.jq_Type_td').text();
                OtChargeinfo['OctyAmount'] = $(this).find('.jq_OtherChagAmnt_td').find('input').val();
                console.log('OtChargeinfo', OtChargeinfo);

                OtherCharge.push(OtChargeinfo);

            });
            console.log('OTHER UPD-', OtherCharge);



            let inputData = {

                __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                'TransMode': PurchaseReturnTransMode,
                'PrBillDate': $thisForm.find('[name="ReturnDate"]').val(),
                'FK_Supplier': $thisForm.find('[name="FK_Supplier"]').val(),
                'FK_Department': $thisForm.find('[name="DepartmentID"]').val(),
                //'ReturnType': $thisForm.find('[name="Returntype"]').val(),
                'BillType': 0,
                'PrReferenceNo': $thisForm.find('[name="PrReferenceNo"]').val(),
                'PrBillNo': '',
                'FK_Purchase': $thisForm.find('[name="PurchaseID"]').val() == "" ? "0" : $thisForm.find('[name="PurchaseID"]').val(),
                'FK_Stock': $thisForm.find('[name="FK_Stock"]').val(),
                'PrInvoiceNo': $thisForm.find('[name="PrInvoiceNo"]').val(),
                'PrInvoiceDate': $thisForm.find('[name="PrInvoiceDate"]').val(),
                'TotalTax': $thisForm.find('[name="PrTotaltax"]').val(),
                'PrBillTotal': $thisForm.find('[name="PrBillTotal"]').val(),
                'PrOthercharges': $thisForm.find('[name="OtherCharge"]').val(),
                //'Discountper': $thisForm.find('[name="Discount"]').val(),
                'PrDiscount': $thisForm.find('[name="PrDiscount"]').val(),
                'PrRoundoff': $thisForm.find('[name="PrRoundOff"]').val(),
                'PrNetAmount': $thisForm.find('[name="PrNetAmount"]').val(),
                'PrRemarks': $thisForm.find('[name="Remarks"]').val(),
                'PurchaseReturnDetails': PurchaseRet,
                'OtherChgDetails': OtherCharge,
                'TaxDetails': tax,
                'LastID': LastID_PurchaseReturn,
                'PRReturnType': $thisForm.find('[name="Returntype"]').val(),
            };
            clearSessionValue(LastIDSessionKey);
            $.ajax({
                url: "@Url.Action("AddPurchaseReturn", "PurchaseReturn")",
                type: "POST",
                data: inputData,
                dataType: "json",
                contentType: "application/x-www-form-urlencoded; charset=utf-8",
                success: function (ajaxOutput) {

                    if (ajaxOutput.Process.IsProcess) {

                        $.each(ajaxOutput.Process.Message, function (key, value) {
                            NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                        });

                        // Get the value set in form's perfect-onFormSuccess attribute
                        let onSuccess = $thisForm.attr('perfect-onFormSuccess');

                        if (onSuccess) {
                            window[onSuccess]();
                        }
                    }
                    else {
                        $.each(ajaxOutput.Process.Message, function (key, value) {
                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                            $(ele).prop('disabled', false);
                        });
                    }
                },
                complete: function () {
                    $(ele).prop('disabled', false);

                }

            });

        }

        else if (isvalids == false) {

            $(ele).prop('disabled', false);
            let message = "Can't Return Product With 0 Quantity."
            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': message });
        }
        else {

        }
        
        
 }


 // Function to Update PurchaseReturn
 function fn_PurchaseReturnForm_update(ele)
 {

     let $thisForm = $(ele).closest('[perfect-class="form"]');
     let ReturnType = $thisForm.find('[name="Returntype"]').val();
     debugger

     var isvalids = false;
     $('#EMPL').find('tbody tr').each(function (index, ele) {
         var i = 1;
         debugger
         let tr = $(this);

         debugger

         if (tr.find(".jq_quantity_td").find('input').val() == "" || tr.find(".jq_quantity_td").find('input').val() == 0) {
             debugger

             isvalids = false;
         }
         else {
             debugger
             isvalids = true;
         }



         return isvalids;
     });

     console.log('0 VALIDITY>', isvalids);



     let upperlimit = $thisForm.find('[name="ReturnDate"]').val();
     let lowerlimit = $thisForm.find('[name="PrInvoiceDate"]').val();

     let datevalid = 0;
     isValid = false;
     var enqDate = new Date(upperlimit);
     enqDate.setHours(0, 0, 0, 0)
     var invDate = new Date(lowerlimit);
     invDate.setHours(0, 0, 0, 0)
     var today = new Date();
     today.setHours(0, 0, 0, 0)

     let errorclass = '.temptableErrors';
     if (enqDate > today) {

         console.log('inside limit check if')
         $thisForm.find('[name="ReturnDate"]').closest('[perfect-class="formGroup"]').find(errorclass).attr("style", "display:block");
         $thisForm.find('[name="ReturnDate"]').closest('[perfect-class="formGroup"]').find(errorclass).text('Return Date should be less than or equal to Todays date');
         isValid = false;
     }
     else if (invDate > enqDate) {
         $thisForm.find('[name="ReturnDate"]').closest('[perfect-class="formGroup"]').find(errorclass).attr("style", "display:block");
         $thisForm.find('[name="ReturnDate"]').closest('[perfect-class="formGroup"]').find(errorclass).text('Return Date should not less than Invoice date');
     }
     else {
         $thisForm.find('[name="ReturnDate"]').closest('[perfect-class="formGroup"]').find(errorclass).attr("style", "display:none");
         $thisForm.find('[name="ReturnDate"]').closest('[perfect-class="formGroup"]').find(errorclass).text('');
         isValid = true;
     }
     if ($thisForm.valid() && isValid == true && isvalids==true)
     {
         $(ele).prop('disabled', true);
         let PurchaseRet = [];
         if (ReturnType == 2) {
         $thisForm.find('[perfect-tempTable="PurchaseReturn"]').find('tbody').find('tr').each(function () {
             let tr = $(this);
             let Purchasereturndata = {
                 FK_Product: tr.find("td:eq(1)").text().trim(),
                 Product: tr.find("td:eq(2)").text().trim(),
                 Unit: tr.find("td:eq(3)").text().trim(),
                 Quantity: (tr.find("td:eq(4)").find('input').val().trim()),
                 free: tr.find("td:eq(5)").find('input').val().trim(),
                 ActualQty: tr.find("td:eq(6)").find('input').val().trim(),
                 PurchaseRate: tr.find("td:eq(7)").text().trim(),
                 FK_Purchase: tr.find("td:eq(9)").text().trim(),
                 Tax: tr.find('.jq_Tax_td').find('input').val().trim(),
                 UnitID: tr.find("td:eq(11)").text().trim(),
                 FK_Stock: tr.find('.jq_FK_STOCK_td').text().trim(),
                 UID: tr.find('.jq_UID_td').text().trim(),
                 TotalRate: tr.find('.jq_TotalAmount_td').text().trim(),
                 IncludeTax: tr.find('.jq_includetax').text().trim(),
                 Discount: (tr.find("td:eq(8)").find('input').val().trim()),

             }

             PurchaseRet.push(Purchasereturndata);
         })
     }
           else if (ReturnType == 1) {
             debugger;
             let savedData = [];
             console.log('wew', $thisForm.find('[perfect-tempTable="Purchase"]').length);
             $thisForm.find('[perfect-tempTable="Purchase"]').find('tbody').find('tr').each(function () {

                 savedData.push($(this).data('pData'));

             })
             console.log('savedData-', savedData);
             //let PurchaseRet = [];
             $.each(savedData, function (index, element) {
                 debugger;
                 let Purchasereturndata = {

                     FK_Product: element.ProductID,
                     Product: element.ProName,
                     Unit: element.UnitID_d,
                     Quantity: element.PpdQuantity,
                     free: element.PpdFreeQuantity,
                     ActualQty: element.PpdActualQuantity,
                     PurchaseRate: element.PpdRate,
                     FK_Purchase: $thisForm.find('[name="PurchaseID"]').val() == "" ? "0" : $thisForm.find('[name="PurchaseID"]').val(),
                     Tax: element.TaxAmount,
                     UnitID: element.UnitID,
                     FK_Stock: element.ID_Stock,
                     UID: index + 1,
                     TotalRate: element.NetPurchase,
                     IncludeTax: 0,
                     Discount: element.PpdpurDis,
                 }

                 PurchaseRet.push(Purchasereturndata);
             });
             console.log('PurchaseRet>.', PurchaseRet);

         }
         let $modal2 = $thisForm.find('#zero_configOthercharge');
         othrchargelst;
         let OtherCharge = [];
         if (otherchgcalled == 1) {
             $modal2.find('tbody').find('tr').each(function () {

                 let OtChargeinfo = {};
                 OtChargeinfo['ID_OtherChargeType'] = $(this).find('.jq_ID_OtherChargeType_td').text();

                 OtChargeinfo['OctyTransType'] = $(this).find('.jq_TransType_td').find('select').val();
                 OtChargeinfo['OctyName'] = $(this).find('.jq_Type_td').text();
                 OtChargeinfo['OctyAmount'] = $(this).find('.jq_OtherChagAmnt_td').find('input').val();
                 console.log('OtChargeinfo', OtChargeinfo);

                 OtherCharge.push(OtChargeinfo);

             });
         }
         else {
             OtherCharge = OtherCharge.concat(othrchargelst);
         }

         let inputData = {

             __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
             'TransMode': PurchaseReturnTransMode,
             'PrBillDate': $thisForm.find('[name="ReturnDate"]').val(),
             'FK_Supplier': $thisForm.find('[name="FK_Supplier"]').val(),
             'FK_Department': $thisForm.find('[name="DepartmentID"]').val(),
             'ID_PurchaseReturn': $thisForm.find('[name="ID_PurchaseReturn"]').val(),
             //'ReturnType': $thisForm.find('[name="Returntype"]').val(),
             'BillType': 0,
             'PrReferenceNo': $thisForm.find('[name="PrReferenceNo"]').val(),
             'PrBillNo': '',
             'FK_Purchase': $thisForm.find('[name="PurchaseID"]').val() == "" ? "0" : $thisForm.find('[name="PurchaseID"]').val(),
             'FK_Stock': $thisForm.find('[name="FK_Stock"]').val(),
             'PrInvoiceNo': $thisForm.find('[name="PrInvoiceNo"]').val(),
             'PrInvoiceDate': $thisForm.find('[name="PrInvoiceDate"]').val(),
             'TotalTax': $thisForm.find('[name="PrTotaltax"]').val(),
             'PrBillTotal': $thisForm.find('[name="PrBillTotal"]').val(),
             'PrOthercharges': $thisForm.find('[name="OtherCharge"]').val(),
             //'Discountper': $thisForm.find('[name="Discount"]').val(),
             'PrDiscount': $thisForm.find('[name="PrDiscount"]').val(),
             'PrRoundoff': $thisForm.find('[name="PrRoundOff"]').val(),
             'PrNetAmount': $thisForm.find('[name="PrNetAmount"]').val(),
             'PrRemarks': $thisForm.find('[name="Remarks"]').val(),
             'PurchaseReturnDetails': PurchaseRet,
             'OtherChgDetails': OtherCharge,
             'TaxDetails': tax,
         };

         $.ajax({
                 url: "@Url.Action("UpdatePurchaseReturn", "PurchaseReturn")",
                 type: "POST",
                 data: inputData,
                 dataType: "json",
                 contentType: "application/x-www-form-urlencoded; charset=utf-8",
                 success: function (ajaxOutput) {

                     if (ajaxOutput.Process.IsProcess) {

                         $.each(ajaxOutput.Process.Message, function (key, value) {
                             NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                         });

                         // Get the value set in form's perfect-onFormSuccess attribute
                         let onSuccess = $thisForm.attr('perfect-onFormSuccess');

                         if (onSuccess) {
                             window[onSuccess]();
                         }
                     }
                     else {
                         $.each(ajaxOutput.Process.Message, function (key, value) {
                             NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                             $(ele).prop('disabled', false);
                         });
                     }
                 },
                 complete: function () {
                     $(ele).prop('disabled', false);

                 }

             });
	 }
     else if (isvalids == false) {
         $(ele).prop('disabled', false);
         let message = "Can't Return Product With 0 Quantity."
         NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': message });

     }
     else {

     }
 }
    function calculateTotals(ele)
    {
        debugger;

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        console.log('$thisForm', $thisForm)
        let Tax = 0;
        let TotalRate = 0;
        let ActQt = 0;
        let Netamount = 0;
        let TotalBill = $thisForm.find('[name=PrBillTotal]').val() == "" ? "0" : $thisForm.find('[name=PrBillTotal]').val();
        let Othercharg = $thisForm.find('[name=OtherCharge]').val() == "" ? "0" : $thisForm.find('[name=OtherCharge]').val();
        let Discount = $thisForm.find('[name=PrDiscount]').val() == "" ? "0" : $thisForm.find('[name=PrDiscount]').val();
        let Roundoff = $thisForm.find('[name=PrRoundOff]').val() == "" ? "0" : $thisForm.find('[name=PrRoundOff]').val();
        let ReturnType = $thisForm.find('[name="Returntype"]').val();

        if (ReturnType == 2) {
        
        $('#Purreturn').find('tbody tr').each(function (index, ele) {
            debugger
            isNaN($('[name="SpdSalQuantity"]').val()) ? 0 : $('[name="SpdSalQuantity"]').val()
            let taxamt = isNaN($(ele).find('.jq_Tax_td').find('input').val()) ? 0 : $(ele).find('.jq_Tax_td').find('input').val();
            let qty = isNaN($(ele).find('.jq_quantity_td').find('input').val()) ? 0 : $(ele).find('.jq_quantity_td').find('input').val();
            let unitcount = isNaN(parseFloat($(ele).find('.jq_unit_count').text())) ? 0 : parseFloat($(ele).find('.jq_unit_count').text());
            let freeqt = isNaN(parseFloat($(ele).find('.free_td').find('input').val())) ? 0 : parseFloat($(ele).find('.free_td').find('input').val());
            
            let amount = parseFloat($(ele).find('.jq_Tax_td').find('input').val());

            console.log(amount)
            //alert(amount)
            TotalRate = TotalRate + parseFloat($(ele).find('.jq_TotalAmount_td').text());
            Tax = Tax + /*isNaN(parseFloat($(ele).find('.jq_Tax_td').find('input').val())) ? 0 : */parseFloat($(ele).find('.jq_Tax_td').find('input').val());
            ActQt = (qty * unitcount) + (freeqt);
            //alert(TotalRate.toFixed(2));
            //alert(Tax);
            console.log('NET>', TotalRate);
            console.log('Tax>', Tax);
            parseFloat($(ele).find('.ActQty_td').find('input').val(parseFloat(ActQt).toFixed(3)));
            //let nt = parseFloat($(ele).find('.NetPurchase').text());
            //stax = stax + parseFloat($(ele).find('.TaxAmount').text());
            //console.log('NET IN TABLE>', nt);

        });
        }
        else if (ReturnType == 1) {
            debugger;
            $('#Purchasedetailshead').find('tbody tr').each(function (index, ele) {
                debugger;
                let netamt = parseFloat($(ele).find('.NetPurchase').text() == "" ? 0 : $(ele).find('.NetPurchase').text());
                let tax = parseFloat($(ele).find('.TaxAmount').text() == "" ? 0 : $(ele).find('.TaxAmount').text());

                TotalRate = TotalRate + netamt;
                Tax = Tax + tax;
            });
        }
        Netamount = parseFloat(TotalRate) + parseFloat(Othercharg) - parseFloat(Discount);
        $thisForm.find('[name=PrTotaltax]').val(Number(Tax).toFixed(2));
        $thisForm.find('[name=PrBillTotal]').val(Number(TotalRate).toFixed(2));
        $thisForm.find('[name=PrNetamount]').val(Number(Netamount).toFixed(2));
        

    }

    function decimalpnt1(ele, name, range,md) {
        debugger
        if (md == 1)
        {
            ele = $(this).find('[perfect-class="form"]');
        }
        let input = $('#' + name);
        ele.value = ele.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');
        let t = ele.value;
        ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t;
        input.on('keydown', function () {
            if (ele.value.includes('.')) {

            }
            var key = event.keyCode || event.charCode;
            if (key == 8 || key == 46) { }
            else {
                if (ele.value.length == 9) {
                    ele.value = ele.value + '.';
                }
            }

        });

    }
    function decimalpnt(ele, id, range,md) {
        debugger;
        if (md == 1) {
            ele = $(this).find('[perfect-class="form"]');
        }
        if (ele.id == 'othamnt') {
            let input = $('#' + ele.id);
            id = ele.id;
        }
        else {
        let input = $('#' + id);
        }
        ele.value = ele.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');
        let t = ele.value;
        ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t;

        $(document).on('keydown', '#' + id, function (event) {

            if (ele.value.includes('.')) {

            }
            else if (ele.value === '.' && (event.key === '.' || event.keyCode === 190)) {
                ele.value = '0.00'; // Change the value to '0.00' if only a dot is entered
                // Prevent the dot from being entered in the input field
            }
            var key = event.keyCode || event.charCode;
            if (key == 8 || key == 46) { }
            else {
                if (ele.value.indexOf('.') < 0 && ele.value.indexOf('.') !== 9 && ele.value.length > 8) {
                    ele.value = ele.value + '.';
                }
            }

        });

    }

    function decimalpntminus(ele, id, range) {

        let input = $('#' + id);
        ele.value = ele.value.replace(/[^0-9.-]/g, '').replace(/(\..*)\./g, '$1');
        let t = ele.value;
        ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t;
        input.on('keydown', function () {
            if (ele.value.includes('.')) {

            }
            var key = event.keyCode || event.charCode;
            if (key == 8 || key == 46) { }
            else {
                if (ele.value.length == 9) {
                    ele.value = ele.value + '.';
                }
            }

        });

    }

    function blockSpecialChar(e) {
        var k;
        document.all ? k = e.keyCode : k = e.which;
        return ((k != 46 && k > 31) || (k < 48 && k > 57) );
    }

    function isNumberKey(evt) {
        var charCode = (evt.which) ? evt.which : event.keyCode
        if (charCode > 31 && (charCode < 46 || charCode > 57))
            return false;

        return true;
    }

    function getfunctionAssign(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
      
        let ReturnType = $thisForm.find('[name = "Returntype"]').val();
        if (ReturnType == 2) {
            SupplierReset(ele);
            
        }
        console.log('statecode', $thisForm.find('[name=Statecode]').val());
        console.log('FK_States', FK_States);
        if ($thisForm.find('[name=Statecode]').val() == FK_States) {

            IsStatecode = false;
        }

        else {
            IsStatecode = true;//hence it is IGSTCustomer
        }
        let Purchaserate = $thisForm.find('[name="PurRate"]').val() == "" ? "0" : $thisForm.find('[name="PurRate"]').val();
        let CurrentStock = $thisForm.find('[name="CurrentStock"]').val() == "" ? "0" : $thisForm.find('[name="CurrentStock"]').val();
        
        $thisForm.find('[name=PpdRate]').val(parseFloat(Purchaserate).toFixed(2));
        $thisForm.find('[name=PpdCurrentStock]').val(parseFloat(CurrentStock).toFixed(2));
        $thisForm.find('[name=Returntype]').val(ReturnType);
        GetUnit(ele, 0);
    }
    function SupplierReset(ele)
    {
        let $thisForm = $(ele).closest('[perfect-class="form"]');


        Getdepartmentdefault();
        tax = [];
        othrchargelst = [];
        OtherCharge = [];
        $("#PurchaseReturntbody").html('');
        $('#Purreturn').css('display', 'none');

        $thisForm.find('[name="ReturnDate"]').val(moment().format('YYYY-MM-DD'));
        ///$thisForm.find('[name="SupplierName"]').val('');

       
        //$thisForm.find('[name="Returntype"]').val('').selectpicker('refresh');
        $thisForm.find('[name="ID_PurchaseReturn"]').val('');
        $thisForm.find('[name="PrInvoiceNo"]').val('');
        $thisForm.find('[name="PrInvoiceDate"]').val('');
        $thisForm.find('[name="PrReferenceNo"]').val('');
        $thisForm.find('[name="PurchaseID"]').val('');
        $thisForm.find('[name="PrBillTotal"]').val('');
        $thisForm.find('[name="OtherCharge"]').val('');
        $thisForm.find('[name="PrDiscount"]').val('');
        $thisForm.find('[name="PrRoundOff"]').val('');
        $thisForm.find('[name="Remarks"]').val('');
        $thisForm.find('[name="PrNetAmount"]').val('');
        $thisForm.find('[name="PrTotaltax"]').val('');
        GetUnit(ele, 0);
    }
function getfunction(ele)
{
    let $thisForm = $(ele).closest('[perfect-class="form"]');
    //let $tempArr = $thisForm.data('popValueData');
    //$thisForm.find('[name="PrDiscount"]').val($tempArr.Discount);
    
    $thisForm.find('[name="OtherCharge"]').val('');
    othrchargelst = [];
    OtherCharge = [];   
    console.log('statecode', $thisForm.find('[name=Statecode]').val());
    console.log('FK_States', FK_States);
    if ($thisForm.find('[name=Statecode]').val() == FK_States) {

        IsStatecode = false;
    }

    else {
        IsStatecode = true;//hence it is IGSTCustomer
    }
    if ($thisForm.find('[name="Returntype"]').val() == 2) {
        InputData =
            {
                FK_Master: $thisForm.find('[name="PurchaseID"]').val(),
                Mode: 3
            }
                 $.ajax({
                      url: "@Url.Action("GetPurchaseReturnFill", "PurchaseReturn")",
                      type: "Get",
                      data: InputData,
                      dataType: "json",
                      contentType: "application/json",
                      success: function (ajaxOutput) {
                         debugger
                         var CheckListHTML = '';
                            if (ajaxOutput.Process.IsProcess)
                            {
                                let table = JSON.parse(ajaxOutput.Data);
                                $('#Purreturn').show();
                                if (table.dtable.length > 0) {

                                    $.each(table.dtable, function (i, value) {
                                        //alert(value.ProductID);
                                        //fillgrid('Purchase', PotableOptionsTempOut, $thisForm, table.dtable);
                                        //BindBilldetails(ele);
                                        CheckListHTML += "<tr>";
                                        CheckListHTML += "<td style='text-align:center'>" + value.SLNo + "</td>";
                                        CheckListHTML += "<td Class='jq_productId' Style='Display:none'>" + value.ProductID + "</td>";
                                        CheckListHTML += "<td Class='jq_Type_td' style='text-align:left'>" + value.ProName + "</td>";
                                        CheckListHTML += "<td Class='jq_unit_td' style='text-align:center'>" + value.Unit + "</td>";
                                        CheckListHTML += "<td class='jq_quantity_td' style='text-align:right'><input type='text' class='form-control text-right' name='qty' id='quantity' oninput='decimalpnt(this,quantity,4,1)' onkeypress='return isNumberKey(event)' value='" + (value.PpdQuantity).toFixed(3) + "' min='0'  maxlength='13'' /></td></td>";
                                        CheckListHTML += "<td class='free_td' style='text-align:right'><input type='text' class='form-control text-right' perfect-class='formGroupControl' name='free' id='free'  oninput='decimalpnt(this,free,4,1)' onkeypress='return isNumberKey(event)' value='" + (value.FreeQuantity).toFixed(3) + "' maxlength='13' ' /></td></td>";
                                        CheckListHTML += "<td class='ActQty_td' style='text-align:right'><input type='text'  class='form-control text-right' perfect-class='formGroupControl' name='actqty' id='actqty'  oninput='decimalpnt(this,actqty,4,1)' onkeypress='return isNumberKey(event)'  value='" + (value.PpdActualQuantity).toFixed(3) + "' maxlength='13' readonly /></td></td>";
                                        CheckListHTML += "<td class='jq_purrate_td' style='text-align:right'>" + (value.PpdRate).toFixed(2) + "</td>";
                                        CheckListHTML += "<td class='jq_Discount_td' style='text-align:right'><input type='text' class='form-control text-right' name='Discount' id='Discount' oninput='decimalpnt(this,quantity,4,1)' onkeypress='return isNumberKey(event)' value='" + (value.Discount).toFixed(3) + "' min='0'  maxlength='13'' /></td></td>";

                                        CheckListHTML += "<td class='jq_Discount_tdhide' style='Display:none'>" + (value.Discount).toFixed(2) + "</td>";
                                        //CheckListHTML += "<td class='jq_purDiscount_td' style='text-align:right'>" + (value.PpdRate).toFixed(2) + "</td>";
                                        CheckListHTML += "<td Class='jq_FK_Purchase_td' Style='Display:none'>" + value.FK_Purchase + "</td>";
                                        /*CheckListHTML += "<td Class='jq_Tax_td' style='text-align:right'>" + (value.TaxAmount).toFixed(2) + "</td>"*/
                                        CheckListHTML += "<td class='jq_Tax_td' style='text-align:right'><div class='input-group'><input type='text'  class='form-control text-right' perfect-class='formGroupControl'   value='" + (value.TaxAmount).toFixed(2) + "' maxlength='13' readonly><div class='input-group-append'><button type='button' id='showtaxbutton' class='btn btn-primary fa fa-search' onclick='ShowTaxDetails(this,1)'></button> </div></div></td></td>";
                                        CheckListHTML += "<td Class='jq_unitID_td' Style='Display:none'>" + value.UnitID + "</td>";
                                        CheckListHTML += "<td Class='jq_FK_STOCK_td'  Style='Display:none'>" + value.FK_Stock + "</td>";
                                        CheckListHTML += "<td Class='jq_UID_td'  Style='Display:none'>" + value.UID + "</td>";
                                        CheckListHTML += "<td Class='jq_quantity_td_hid' Style='Display:none'>" + (value.PpdQuantity).toFixed(2) + "</td>";
                                        CheckListHTML += "<td Class='jq_Tax_td_hid' Style='Display:none'>" + (value.TaxAmount).toFixed(2) + "</td>";
                                        CheckListHTML += "<td Class='jq_TotalAmount_td_hid'  Style='Display:none'>" + (value.NetPurchase).toFixed(2) + "</td>";
                                        CheckListHTML += "<td Class='jq_unit_count' Style='Display:none'>" + value.UnitCount + "</td>";
                                        CheckListHTML += "<td Class='jq_includetax' Style='Display:none'>" + value.IncludeTaxOnPurRate+ "</td>";
                                        CheckListHTML += "<td Class='jq_TotalAmount_td'  style='text-align:right'>" + (value.NetPurchase).toFixed(2) + "</td>";
                                        CheckListHTML += "<td Class='free_td_hid' Style='Display:none'>" + (value.FreeQuantity).toFixed(3) + "</td>";
                                       
                                        CheckListHTML += "<td style='text-align:center;'><div class='d-flex'><a href='#' class='btn btnPerfectGrid shadow btn-xs sharp mr-1'onclick='RemoveProductdetails(this)' title='Delete'><i class='fa fa-trash btnPerfectGridDelete'></i></a>";

                                        //CheckListHTML += "<a href='#' class='btn btn-danger shadow btn-xs sharp mr-1' title='Delete'><i class='fa fa-trash'></i></a></div></td>";
                                        CheckListHTML += "</tr>";

                                    });

                                }
                                else {
                                    CheckListHTML += "<div class='form-group col-md-6'>";
                                    CheckListHTML += "<div class='form-check mb-2'>";
                                    CheckListHTML += "<label class='form-check-label' for='check1'>No Records...</label>";
                                    CheckListHTML += "</div></div>"
                                }
                                $("#PurchaseReturntbody").html(CheckListHTML)
                                //maincalculation(this);
                                calculateTotals(ele);
                                RoundOffCalcs(ele);


                            }
                            else {
                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                });

                            }
                        },
                        complete: function () {
                            $(ele).prop('disabled', false);
                            fn_PurchaseReturn_loadTax(ele,$thisForm.find('[name="PurchaseID"]').val());
                        }
                    });
    }
    else if ($thisForm.find('[name="Returntype"]').val() == 1)
    {
        $("#divItemWise").css("display", "block");
        let PurchaseID = $thisForm.find('[name="PurchaseID"]').val() == "" ? "0" : $thisForm.find('[name="PurchaseID"]').val();
        if (PurchaseID > 0) {
            $('input[name="PrInvoiceDate"]').attr('readonly', 'readonly');
        }
        else {
            
            $('input[name="PrInvoiceDate"]').removeAttr('readonly');
        }

    }
    else {
        $(ele).prop('disabled', false);
        NotificationMessage({ 'type': 'info', 'heading': 'info', 'message': 'Please Select Return Type' });
    }
}


    function Getdepartmentdefault()
    {
         let $thisForm = $('[perfect-class="form"]');
         $.ajax({
             url: '@Url.Action("GetEmployeeLeadDefault", "LeadGeneration")',
             type: "Get",
             dataType: "json",
             contentType: "application/json",
             success: function (ajaxOutput) {//<----- if ajax method executed succesfully,  we get the data passed from controller in this variable  => success: function (variable) {

                 if (ajaxOutput.Process.IsProcess) {
                     //var stateModel = createSelectList({ data: ajaxOutput.Data, hideColumn: ['EmpID'] });
                     $.each(ajaxOutput.Data, function (key, value) {

                         console.log('>_ Search button > list click', value);
                         $thisForm.find('[name=DepartmentID]').val(value.FK_Department);
                         $thisForm.find('[name=DepartmentName]').val(value.DeptName);


                     });

                 }
                 else {
                     $.each(ajaxOutput.Process.Message, function (key, value) {
                         NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                     });
                 }
             },
         });
    }

    function ShowOtherCharges(ele, mode) {
        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let Othrinfo = [];
        if ($thisForm.data('pOthrChgData')) {


            if ($thisForm.data('pOthrChgData').length > 0) {
                if (otherchgcalled = 0) {
                    othrchargelst = $thisForm.data('pOthrChgData');
                }
            }
        }
        //else {
        BindChargeDetails("1", 'formGroupModalOtherCharge', ele)
        //}

    }
        function BindChargeDetails(Mode, ModalID, ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');

        var InputData =
        {
            TransMode: PurchaseReturnTransMode,
        }


        $.ajax({
            url: "@Url.Action("GetOtherCharges", "PurchaseReturn")",
            type: "Get",
            data: InputData,
            dataType: "json",
            contentType: "application/json",
            success: function (ajaxOutput) {
                if (ajaxOutput.OtherCharges.Process.IsProcess) {
                         var CheckListHTML = '';

                         if (ajaxOutput.OtherCharges.Data.length > 0) {
                             //---



                             $.each(ajaxOutput.OtherCharges.Data, function (i, value) {
                                 console.log('Transtypelist',ajaxOutput.Transtypelist.Data)

                                 let options = ''
                                 if (othrchargelst != '') {

                                     $.each(othrchargelst, function (key, value1) {

                                         if (value1.ID_OtherChargeType == value.ID_OtherChargeType) {

                                             value.OctyAmount = value1.OctyAmount;
                                             $.each(ajaxOutput.Transtypelist.Data, function (i, valuea) {
                                                 if (valuea.TransTypeID.toString() == value1.OctyTransType) {

                                                     options += '<option value=' + valuea.TransTypeID + ' selected="selected">' + valuea.TransType + '</option>'
                                                 }
                                                 else {
                                                     options += '<option value=' + valuea.TransTypeID + '>' + valuea.TransType + '</option>'
                                                 }
                                             });
                                         }


                                     });

                                 }
                                 else
                                 {

                                     $.each(ajaxOutput.Transtypelist.Data, function (i, valuea) {
                                         options += '<option value=' + valuea.TransTypeID + '>' + valuea.TransType + '</option>'
                                     });
                                     //---

                                 }
                                 console.log('optionsl', options)
                                 let $dropdown = '<select class="form-control"name="selector" id="selector" >' + options + '</select>';
                                 CheckListHTML += "<tr>";
                                 CheckListHTML += "<td>" + value.SlNo + "</td>";
                                 CheckListHTML += "<td Class='jq_ID_OtherChargeType_td' Style='Display:none'>" + value.ID_OtherChargeType + "</td>";
                                 CheckListHTML += "<td Class='jq_Type_td'>" + value.OctyName + "</td>";
                                 CheckListHTML += "<td class='jq_TransType_td'>" + $dropdown + "</td>";
                                 CheckListHTML += "<td class='jq_OtherChagAmnt_td' ><input min='0' id='othamnt' class='form-control text-right' type='text' oninput='decimalpnt(this,othamnt,3,2)' onkeypress='return isNumberKey(event)'  value='" + (value.OctyAmount).toFixed(2) + "' ' /></td> /></td>";

                                 CheckListHTML += "</tr>";
                             })
                         }
                         else {
                             CheckListHTML += "<div class='form-group col-md-6'>";
                             CheckListHTML += "<div class='form-check mb-2'>";
                             CheckListHTML += "<label class='form-check-label' for='check1'>No Records...</label>";
                             CheckListHTML += "</div></div>"
                         }
                         //let $model = createSearchModalDOM();
                         //$model.modal.find('.modal-body').append(CheckListHTML);
                         //$model.show
                    $('#formGroupModalOtherCharge').modal({ backdrop: 'static', keyboard: false })
                    $("#formGroupModalOtherChargebody").html(CheckListHTML)
                    $('#formGroupModalOtherCharge').modal('show');


                        // $thisForm.find('[name=TaxAmount]').val(sum);
                     }
                else {

                    $.each(ajaxOutput.OtherCharges.Process.Message, function (key, value) {
                             NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                         });
                     }
                },
                complete: function () {
                    $(ele).prop('disabled', false);
                    $('select').selectpicker('refresh');
                }
            });
    }
    var othrchargelst = "";
    var otherchgcalled = 0;
    function BindOtherChargeAmount(ele) {
        otherchgcalled == 1;
        console.log('inside binddatat fn')
        let $modal = $(ele).closest('.modal');
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let sum = 0;
        othrchargelst = [];
        $modal.find('table tbody').find('tr').each(function () {

            let value = parseFloat($(this).find('.jq_OtherChagAmnt_td').find('input').val() == "" ? "0" : $(this).find('.jq_OtherChagAmnt_td').find('input').val());
            if ($(this).find('.jq_OtherChagAmnt_td').find('input').val() == '' || $(this).find('.jq_OtherChagAmnt_td').find('input').val() == null) {
                value = 0;
            }

            if (parseInt($(this).find('.jq_TransType_td').find('select').val()) == 0) {
                value = value * 0;
            }
            else if (parseInt($(this).find('.jq_TransType_td').find('select').val()) == 1) {
                value = value * -1;
            }
            else {
                value = value * 1;
            }
            sum = parseFloat(sum) + value;

            let othrcharge = {
                ID_OtherChargeType: $(this).find('.jq_ID_OtherChargeType_td').text(),
                OctyTransType: $(this).find('.jq_TransType_td').find('select').val(),
                OctyAmount: parseFloat($(this).find('.jq_OtherChagAmnt_td').find('input').val())
            };
            othrchargelst.push(othrcharge);
            console.log('othrchargelst', othrchargelst)

        });

        $thisForm.find('[name=OtherCharge]').val(sum.toFixed(2));

        calculateTotals(ele);
        RoundOffCalcs(ele);
    }

    @*function ShowTaxDetails(ele, mod,ud) {
        debugger;
        let $thisForm;
        Taxcalled = 1;
        var row;
        var Quantity = 0;
        var CurrentQuantity = 0;
        var Totalrate=0;
        var PurRate=0;
        var includetax=0;
        let productID;
        var includetaxbit = 0;
       // var taxamount = 0;
        var currenttotal = 0;
        var Discount = 0;
        let ReturnType = $(ele).find('[name = "Returntype"]').val();
        if (mod == 1 || mod == 0) {
            row = $(ele).closest("tr");
            var Quantity = row.find('.jq_quantity_td_hid').text() == "" ? "0" : row.find('.jq_quantity_td_hid').text();
            Totalrate = $(ele).closest("tr").find('.jq_TotalAmount_td').text();
            Quantity = $(ele).closest("tr").find('.jq_quantity_td_hid').text() == "" ? "0" : $(ele).closest("tr").find('.jq_quantity_td_hid').text();
            CurrentQuantity = $(ele).closest("tr").find('.jq_quantity_td').find('input').val();
            PurRate = $(ele).closest("tr").find('.jq_purrate_td').text();
            includetax = $(ele).closest("tr").find('.jq_includetax').text();
            productID = $(ele).closest("tr").find('.jq_productId').text();
            Totalratse = $(ele).closest("tr").find('.jq_TotalAmount_td').text();
            Discount = $(ele).closest("tr").find('.jq_Discount_td').find('input').val();
               
               
            //alert($(ele).closest("tr").find('.jq_includetax').text());
        }
        else
        {
            Discount = 0;
            $thisForm = $(ele).closest('[perfect-class="form"]');
            CurrentQuantity = $thisForm.find('[name=PpdQuantity]').val();
            PurRate = $thisForm.find('[name=PpdRate]').val() == "" ? "0" : $thisForm.find('[name=PpdRate]').val();
            Discount = 0;
            productID = $thisForm.find('[name=ProductID]').val();
            //Discount = $thisForm.find('[name=Discount]').val();

        }


        let NetAmount = (parseFloat(CurrentQuantity) * (parseFloat(PurRate))) - (parseFloat(Discount));
        console.log('NETAM',NetAmount);
        var InputData =
        {
            FK_Product: productID,
            Includetax: includetax,
            Amount: NetAmount,
        }

        $.ajax({
            url: "@Url.Action("GetTaxAmountNew","Purchase")",
            type: "Get",
            data: InputData,
            dataType: "json",
            contentType: "application/json",
            success: function (ajaxOutput) {
                     if (ajaxOutput.Process.IsProcess) {
                         var CheckListHTML = '';
                         let sum = 0;

                         if (ajaxOutput.Data.length > 0) {
                            
                            
                             $.each(ajaxOutput.Data, function (i, value) {
                                 sum = sum + parseFloat(value.Amount.toFixed(2));

                                 CheckListHTML += "<tr>";
                                 CheckListHTML += "<td>" + value.SlNo + "</td>";
                                 CheckListHTML += "<td Class='jq_ProductID_td' Style='Display:none'>" + value.ProductID + "</td>";
                                 CheckListHTML += "<td class='jq_taxType_td' Style='Display:none'>" + value.FK_TaxType + "</td>";
                                 CheckListHTML += "<td class='jq_taxTypeName_td'>" + value.TaxTyName + "</td>";
                                 CheckListHTML += "<td class='jq_taxPer_td'>" + value.TaxPercentage + "</td>";
                                 CheckListHTML += "<td class='jq_taxamount_td style='text-align:right' >" + value.Amount.toFixed(2) + "</td>";
                                 CheckListHTML += "</tr>";
                             })
                             
                         }
                         else {
                             CheckListHTML += "<div class='form-group col-md-6'>";
                             CheckListHTML += "<div class='form-check mb-2'>";
                             CheckListHTML += "<input type='checkbox' class='form-check-input' >"
                             CheckListHTML += "<label class='form-check-label' for='check1'>No Records...</label>";
                             CheckListHTML += "</div></div>"
                         }

                         $(ele).closest("tr").find('.jq_Tax_td').find('input').val(sum.toFixed(2));
                         $("#formGroupModalTaxnewbody").html(CheckListHTML)

                         //if (mod == 1) {
                         if (mod == 1) {
                             $('#formGroupModalTaxnew').modal('show');
                         }
                         else {
                             $('#formGroupModalTaxnew').modal('hide');
                         }
                         BindTaxAmount(ele);
                         if (Quantity == 0.00) {

                             var taxamount = $(ele).closest("tr").find('.jq_Tax_td').find('input').val();

                             if (includetax == 1) {
                                 currenttotal = (parseFloat(PurRate) * parseFloat(CurrentQuantity));
                             }
                             else {
                                 //  $(ele).closest("tr").find('.jq_Tax_td').find('input').val(sum.toFixed(2));
                                 currenttotal = parseFloat(taxamount) + (parseFloat(PurRate) * parseFloat(CurrentQuantity));
                             }
                             console.log('CURRENT_TOTAL', currenttotal);
                             if (mod == 1 || mod == 0) {
                                 $(ele).closest("tr").find('.jq_TotalAmount_td').text(parseFloat(currenttotal).toFixed(2));
                             }
                             else {
                                 $thisForm.find('[name=NetPurchase]').val(currenttotal.toFixed(2));
                             }
                             calculateTotals(ele);
                             RoundOffCalcs(ele);

                         }
                         if (includetax == 1) {
                             currenttotal = (parseFloat(sum.toFixed(2)) + (parseFloat(PurRate) * parseFloat(CurrentQuantity))) - (parseFloat(Discount));
                         }
                         else {
                             currenttotal = (parseFloat(sum.toFixed(2)) + (parseFloat(PurRate) * parseFloat(CurrentQuantity))) - (parseFloat(Discount));
                         }
                         console.log('CURRENT_TOTAL', currenttotal);
                         if (mod == 1 || mod == 0) {
                             $(ele).closest("tr").find('.jq_TotalAmount_td').text(parseFloat(currenttotal).toFixed(2));
                         }
                         else {
                             $thisForm.find('[name=NetPurchase]').val(currenttotal.toFixed(2));
                         }
                         calculateTotals(ele);
                         RoundOffCalcs(ele);
                        

                     }

                     else {
                         $.each(ajaxOutput.Process.Message, function (key, value) {
                             NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                         });
                }

                },
                complete: function () {
                    //$(ele).prop('disabled', false);
                    if (ud != null) {
                        EditTax(ele, ud);
                    }
                }
            });
    }*@
     function ShowTaxDetails(ele, mod,ud) {
        debugger;
        let $thisForm;
        Taxcalled = 1;
        var row;
        var Quantity = 0;
        var CurrentQuantity = 0;
        var Totalrate=0;
        var PurRate=0;
        var includetax=0;
        let productID;
        var includetaxbit = 0;
       // var taxamount = 0;
        var currenttotal = 0;
        var Discount = 0;
        if (mod == 1 || mod == 0) {
            row = $(ele).closest("tr");
            var Quantity = row.find('.jq_quantity_td_hid').text() == "" ? "0" : row.find('.jq_quantity_td_hid').text();
            Totalrate = $(ele).closest("tr").find('.jq_TotalAmount_td').text();
            Quantity = $(ele).closest("tr").find('.jq_quantity_td_hid').text() == "" ? "0" : $(ele).closest("tr").find('.jq_quantity_td_hid').text();
            CurrentQuantity = $(ele).closest("tr").find('.jq_quantity_td').find('input').val();
            PurRate = $(ele).closest("tr").find('.jq_purrate_td').text();
            includetax = $(ele).closest("tr").find('.jq_includetax').text();
            productID = $(ele).closest("tr").find('.jq_productId').text();
            Totalratse = $(ele).closest("tr").find('.jq_TotalAmount_td').text();
            Discount = $(ele).closest("tr").find('.jq_Discount_td').find('input').val();
               
               
            //alert($(ele).closest("tr").find('.jq_includetax').text());
        }
        else
        {
            Discount = 0;
            $thisForm = $(ele).closest('[perfect-class="form"]');
            CurrentQuantity = $thisForm.find('[name=PpdQuantity]').val();
            PurRate = $thisForm.find('[name=PpdRate]').val() == "" ? "0" : $thisForm.find('[name=PpdRate]').val();
            Discount = 0;
            productID = $thisForm.find('[name=ProductID]').val();
            Discount = $thisForm.find('[name=Discount]').val();

        }


        let NetAmount = (parseFloat(CurrentQuantity) * (parseFloat(PurRate))) - (parseFloat(Discount));
        console.log('NETAM',NetAmount);
        var InputData =
        {
            FK_Product: productID,
            Includetax: includetax,
            Amount: NetAmount,
            TaxtyInterstate: IsStatecode,

        }

        $.ajax({
            url: "@Url.Action("GetTaxAmountNew","Purchase")",
            type: "Get",
            data: InputData,
            dataType: "json",
            contentType: "application/json",
            success: function (ajaxOutput) {
                     if (ajaxOutput.Process.IsProcess) {
                         var CheckListHTML = '';
                         let sum = 0;
                         if (ajaxOutput.Data.length > 0) {


                             $.each(ajaxOutput.Data, function (i, value) {
                                 sum = sum + parseFloat(value.Amount.toFixed(2));

                                 CheckListHTML += "<tr>";
                                 CheckListHTML += "<td>" + value.SlNo + "</td>";
                                 CheckListHTML += "<td Class='jq_ProductID_td' Style='Display:none'>" + value.ProductID + "</td>";
                                 CheckListHTML += "<td class='jq_taxType_td' Style='Display:none'>" + value.FK_TaxType + "</td>";
                                 CheckListHTML += "<td class='jq_taxTypeName_td'>" + value.TaxTyName + "</td>";
                                 CheckListHTML += "<td class='jq_taxPer_td'>" + value.TaxPercentage + "</td>";
                                 CheckListHTML += "<td class='jq_taxamount_td style='text-align:right' >" + value.Amount.toFixed(2) + "</td>";
                                 CheckListHTML += "</tr>";
                             })

                         }
                         else {
                             CheckListHTML += "<div class='form-group col-md-6'>";
                             CheckListHTML += "<div class='form-check mb-2'>";
                             CheckListHTML += "<input type='checkbox' class='form-check-input' >"
                             CheckListHTML += "<label class='form-check-label' for='check1'>No Records...</label>";
                             CheckListHTML += "</div></div>"
                         }

                         $(ele).closest("tr").find('.jq_Tax_td').find('input').val(sum.toFixed(2));


                         if (Quantity == 0.00) {

                             var taxamount = $(ele).closest("tr").find('.jq_Tax_td').find('input').val();

                             if (includetax == 1) {
                                 currenttotal = (parseFloat(PurRate) * parseFloat(CurrentQuantity));
                             }
                             else {
                                 //  $(ele).closest("tr").find('.jq_Tax_td').find('input').val(sum.toFixed(2));
                                 currenttotal = parseFloat(taxamount) + (parseFloat(PurRate) * parseFloat(CurrentQuantity));
                             }
                             console.log('CURRENT_TOTAL', currenttotal);
                             $(ele).closest("tr").find('.jq_TotalAmount_td').text(parseFloat(currenttotal).toFixed(2));
                             calculateTotals(ele);
                             RoundOffCalcs(ele);

                         }
                         if (includetax == 1) {
                             currenttotal =  (parseFloat(PurRate) * parseFloat(CurrentQuantity)) - (parseFloat(Discount));
                            // currenttotal = (parseFloat(sum.toFixed(2)) + (parseFloat(PurRate) * parseFloat(CurrentQuantity))) - (parseFloat(Discount));
                         }
                         else {
                             currenttotal = (parseFloat(sum.toFixed(2)) + (parseFloat(PurRate) * parseFloat(CurrentQuantity))) - (parseFloat(Discount));
                         }
                         console.log('CURRENT_TOTAL', currenttotal);
                         $(ele).closest("tr").find('.jq_TotalAmount_td').text(parseFloat(currenttotal).toFixed(2));
                         calculateTotals(ele);
                         RoundOffCalcs(ele);
                         $("#formGroupModalTaxnewbody").html(CheckListHTML)

                         if (mod == 1) {
                             $('#formGroupModalTaxnew').modal('show');
                         }
                         else {
                             $('#formGroupModalTaxnew').modal('hide');
                         }


                     }

                     else {
                         $.each(ajaxOutput.Process.Message, function (key, value) {
                             NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                         });
                }

                },
                complete: function () {
                    //$(ele).prop('disabled', false);
                    if (ud != null) {
                        EditTax(ele, ud);
                    }
                }
            });
    }

    function RoundOffCalcs1(ele) {
        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        console.log('$thisForm Roundoff', $thisForm)
        let Discount = $thisForm.find('[name=PrDiscount]').val() == "" ? "0" : $thisForm.find('[name=PrDiscount]').val();
        var RoundOff = $thisForm.find('[name=PrRoundOff]').val() == "" ? "0" : $thisForm.find('[name=PrRoundOff]').val();
        var totalAmount = $thisForm.find('[name=PrNetAmount]').val() == "" ? "0" : $thisForm.find('[name=PrNetAmount]').val();
        var BillTotal = $thisForm.find('[name=PrBillTotal]').val() == "" ? "0" : $thisForm.find('[name=PrBillTotal]').val();
        var OtherCharges = $thisForm.find('[name=OtherCharge]').val() == "" ? "0" : $thisForm.find('[name=OtherCharge]').val();

        var total = parseFloat(OtherCharges) + parseFloat(BillTotal) - parseFloat(Discount);
        //alert(total)
        var BilltotalAmount = $thisForm.find('[name=PrNetAmount]').val() == "" ? "0" : $thisForm.find('[name=PrNetAmount]').val();
        var fracpart = (((total < 1.0) ? total : (total % Math.floor(total))) * 100).toFixed(2);
        if (parseFloat(fracpart) >= 50) {
            var Balancefract = (parseFloat(100) - parseFloat(fracpart)) / parseFloat(100);

            var totalnetRoundamount = parseFloat(total) + parseFloat(Balancefract);
            var balfract = parseFloat(fracpart / 100).toFixed(2);

            $thisForm.find('[name=PrNetAmount]').val(totalnetRoundamount.toFixed(2));
            $thisForm.find('[name=PrRoundOff]').val((Balancefract).toFixed(2));


        }
        else if (fracpart < 50) {

            var Balancefract = (parseFloat(100) - parseFloat(fracpart)) / parseFloat(100);
            var totalnetRoundamount = parseFloat(total) - parseFloat(fracpart / 100);
            var balfract = parseFloat(fracpart / 100).toFixed(2);
            $thisForm.find('[name=PrNetAmount]').val(totalnetRoundamount.toFixed(2));
            $thisForm.find('[name=PrRoundOff]').val((-balfract).toFixed(2));


        }
    }

    function RoundOffCalcs(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');

        let Discount = $thisForm.find('[name=PrDiscount]').val() == "" ? "0" : $thisForm.find('[name=PrDiscount]').val();
        var RoundOff = $thisForm.find('[name=PrRoundOff]').val() == "" ? "0" : $thisForm.find('[name=PrRoundOff]').val();
        var totalAmount = $thisForm.find('[name=PrNetAmount]').val() == "" ? "0" : $thisForm.find('[name=PrNetAmount]').val();
        var BillTotal = $thisForm.find('[name=PrBillTotal]').val() == "" ? "0" : $thisForm.find('[name=PrBillTotal]').val();
        var OtherCharges = $thisForm.find('[name=OtherCharge]').val() == "" ? "0" : $thisForm.find('[name=OtherCharge]').val();



        var total = Math.round(parseFloat(OtherCharges) + parseFloat(BillTotal) - parseFloat(Discount)) - (parseFloat(OtherCharges) + parseFloat(BillTotal) - parseFloat(Discount));
        $thisForm.find('[name=PrRoundOff]').val(total.toFixed(2));

        netat = parseFloat(OtherCharges) + parseFloat(BillTotal) - parseFloat(Discount)  + parseFloat(total);
        $thisForm.find('[name=PrNetAmount]').val(netat.toFixed(2));
        $thisForm.find('[name=PrDiscount]').val(parseFloat(Discount).toFixed(2));
    }

    function RoundOffCalcTotal2(ele) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');

        var RoundOff = $thisForm.find('[name=PrRoundOff]').val() == "" ? "0" : $thisForm.find('[name=PrRoundOff]').val();
        var totalAmount = $thisForm.find('[name=PrBillTotal]').val() == "" ? "0" : $thisForm.find('[name=PrBillTotal]').val();
        var OtherCharge = $thisForm.find('[name=OtherCharge]').val() == "" ? "0" : $thisForm.find('[name=OtherCharge]').val();
        var Discount = $thisForm.find('[name=PrDiscount]').val() == "" ? "0" : $thisForm.find('[name=PrDiscount]').val();
        var NetAmount = $thisForm.find('[name=PrNetAmount]').val() == "" ? "0" : $thisForm.find('[name=PrNetAmount]').val();
        //var Total = parseFloat(BillTotal) + parseFloat(OtherCharge) + parseFloat(RoundOff) - parseFloat(Discount) - parseFloat(AdvanceAmount);

        var Total = parseFloat(NetAmount) + + parseFloat(RoundOff);
        $thisForm.find('[name=NetAmount]').val(Total.toFixed(2));

        var amtWords = amtInWords(Total);

    }

    function RoundOffCalcTotal(ele)
    {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let Discount = $thisForm.find('[name=PrDiscount]').val() == "" ? "0" : $thisForm.find('[name=PrDiscount]').val();
        var totalAmount = $thisForm.find('[name=PrNetAmount]').val() == "" ? "0" : $thisForm.find('[name=PrNetAmount]').val();
        var BillTotal = $thisForm.find('[name=PrBillTotal]').val() == "" ? "0" : $thisForm.find('[name=PrBillTotal]').val();
        var OtherCharges = $thisForm.find('[name=OtherCharge]').val() == "" ? "0" : $thisForm.find('[name=OtherCharge]').val();
        let prroundof = $thisForm.find('[name=PrRoundOff]').val() == "" ? "0" : $thisForm.find('[name=PrRoundOff]').val();
        if (prroundof != "" || prroundof != null) {
            $thisForm.find('[name=PrRoundOff]').val(parseFloat(prroundof).toFixed(2));
            //let netat = $thisForm.find('[name=PrNetAmount]').val() == "" ? "0" : $thisForm.find('[name="PrNetAmount"]').val();
            //let netamt = parseFloat(netat) + + parseFloat(prroundof);
            let netat = parseFloat(BillTotal) + parseFloat(OtherCharges) - parseFloat(Discount) + parseFloat(prroundof);
            $thisForm.find('[name=PrNetAmount]').val(netat.toFixed(2));

        }
    }


    function RateCalculation(ele)
    {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        var $tblrows = $("#EMPL tbody tr");
    //    alert($tblrows);

        var row = $(this).find('PurchaseReturntbody tbody').find('tr');
            let Quantity = row.find('.jq_quantity_td').find('input').val();
            let ActQty = $('#actqty').val();
            let Free = $thisForm.find('[name=free]').val();

            let Totalrate = row.find('.jq_TotalAmount_td').text();
            let Taxamount = row.find('.jq_Tax_td').find('input').val();

        $('#actqty').val();
        $('#free').val();
        $('#quantity').val();
      // alert(Quantity);
        console.log('TOTALRATE>', Totalrate);
        console.log('Taxamount>', Taxamount);

        let Singlerate = (parseFloat(Quantity) / parseFloat(Totalrate));
        let Singletax = parseFloat(Taxamount) / parseFloat(Quantity);
        //alert(Singlerate);
        //alert(Singletax);

    }

    function maincalculation(ele) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        debugger
        $('#EMPL').find('tbody tr').each(function (index, ele) {
            var Quantity = $(ele).find('.jq_quantity_td_hid').text();
            var CurrentQuantity = $(ele).find('.jq_quantity_td').find('input').val() == "" ? "0" : $(ele).find('.jq_quantity_td').find('input').val();
            var ActQty = $(ele).find('.ActQty_td').find('input').val();
            var Free = $(ele).find('.free_td').find('input').val() == "" ? "0" : $(ele).find('.free_td').find('input').val();
            var Totalrate = $(ele).find('.jq_TotalAmount_td_hid').text();
            var Taxamount = $(ele).find('.jq_Tax_td_hid').text() == "" ? "0" : $(ele).find('.jq_Tax_td_hid').text();
            var UnitCount = $(ele).find('.jq_unit_count').text();
            debugger
            var Singlerate = (parseFloat(Totalrate) / parseFloat(Quantity));
            //alert(Singlerate);
            var Totalamount = (parseFloat(Singlerate) * parseFloat(CurrentQuantity));
            //alert(Totalamount);
            var Singletax = (parseFloat(Taxamount) / parseFloat(Quantity));
            //alert(Singletax);
            var Totaltax = (parseFloat(Singletax) * parseFloat(CurrentQuantity));

            var NewActQty = ((parseFloat(CurrentQuantity) * parseFloat(UnitCount)) + parseFloat(Free));
            $(ele).find('.jq_TotalAmount_td').text(Totalamount.toFixed(2));
            $(ele).find('.jq_Tax_td').find('input').val(Totaltax.toFixed(2));
            $(ele).find('.jq_quantity_td').find('input').val(Number(CurrentQuantity).toFixed(3));
            $(ele).find('.ActQty_td').find('input').val(NewActQty.toFixed(3));

        });
    }

    $("#EMPL tbody").on("change", ".jq_quantity_td", function () {
        debugger
        var row = $(this).closest("tr");
        var Quantity = parseFloat(row.find('.jq_quantity_td_hid').text()) == "" ? 0 : parseFloat(row.find('.jq_quantity_td_hid').text());
        var CurrentQuantity = parseFloat(row.find('.jq_quantity_td').find('input').val()) == "" ? 0 : parseFloat(row.find('.jq_quantity_td').find('input').val());
        var ActQty = row.find('.ActQty_td').find('input').val();
        var Free = row.find('.free_td').find('input').val() == "" ? "0" : row.find('.free_td').find('input').val();
        var Totalrate = row.find('.jq_TotalAmount_td_hid').text() == "" ? "0" : row.find('.jq_TotalAmount_td_hid').text();
        var Taxamount = row.find('.jq_Tax_td_hid').text() == "" ? "0" : row.find('.jq_Tax_td_hid').text();
        var UnitCount = row.find('.jq_unit_count').text();
        var includetax = row.find('.jq_includetax').text() == "" ? "0" : row.find('.jq_includetax').text();
        var purrate = row.find('.jq_purrate_td').text() == "" ? "0" : row.find('.jq_purrate_td').text();
        var Changediscount = parseFloat(row.find('.jq_Discount_tdhide').text()) == "" ? "0" : parseFloat(row.find('.jq_Discount_tdhide').text());
        var Changediscal = 0;
        var Changediscalnew = 0;
        debugger
        var Singlerate = 0;
        var Totalamount = 0;
        var Totalamount = 0;
        var Totaltax = 0;
        var NewActQty = 0;
        var currenttotal = 0;
        var Changequantity = 0;
        var UID = row.find('.jq_UID_td').text();
        if (Quantity != 0) {
            //if (includetax == 1) {
            //    Singlerate = (parseFloat(Totalrate) ) / (parseFloat(Quantity));
            //    Totalamount = (parseFloat(Singlerate) * parseFloat(CurrentQuantity));

            //    Singletax = (parseFloat(Taxamount) / parseFloat(Quantity));
            //    Totaltax = (parseFloat(Singletax) * parseFloat(CurrentQuantity));
            //    console.log('Tax with_TOTAL', Totaltax);
            //    console.log('Totalamount_TOTAL', Totalamount);
               
            //}
            //else {
            //    Singlerate = (parseFloat(Totalrate) / parseFloat(Quantity));
            //    Totalamount = (parseFloat(Singlerate) * parseFloat(CurrentQuantity));

            //    Singletax = (parseFloat(Taxamount) / parseFloat(Quantity));
            //    Totaltax = (parseFloat(Singletax) * parseFloat(CurrentQuantity));
            //    console.log('Tax with_TOTAL', Totaltax);
            //    console.log('Totalamount_TOTAL', Totalamount);
            //}

          
        }
   
        if (Quantity >= CurrentQuantity) {

            Changediscal = ((parseFloat(Changediscount)) / (parseFloat(Quantity)));
            Changediscalnew = (parseFloat(CurrentQuantity) * parseFloat(Changediscal));

            row.find('.jq_Discount_td').find('input').val(Changediscalnew.toFixed(3));
        }
        else {
            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Quantity Greater than Purchase Quantity.' });
            row.find('.jq_quantity_td').find('input').val(Number(Quantity).toFixed(3));
            Changequantity = ((parseFloat(Quantity) * parseFloat(UnitCount)) + parseFloat(Free));
            row.find('.ActQty_td').find('input').val(Number(Changequantity).toFixed(3));
            row.find('.jq_Discount_td').find('input').val(Number(Changediscount).toFixed(3));
            
            CurrentQuantity = Quantity;
            ShowTaxDetails(this, 1, 0);
            calculateTotals(this);
            RoundOffCalcs(this);
            return false;
        }


        NewActQty = ((parseFloat(CurrentQuantity) * parseFloat(UnitCount)) + parseFloat(Free));
       
        row.find('.jq_quantity_td').find('input').val(Number(CurrentQuantity).toFixed(3));
        row.find('.ActQty_td').find('input').val(NewActQty.toFixed(3));

       
        ShowTaxDetails(this, 0, UID);
        calculateTotals(this);
        RoundOffCalcs(this);
       
        debugger
      
    });

    $("#EMPL tbody").on("change", ".free_td", function () {
        debugger
        var row = $(this).closest("tr");
        var Quantity = row.find('.jq_quantity_td').find('input').val() == "" ? "0" : row.find('.jq_quantity_td').find('input').val();
        var ActQty = row.find('.ActQty_td').find('input').val();
        var Free = parseFloat(row.find('.free_td').find('input').val()) == "" ? "0" : parseFloat(row.find('.free_td').find('input').val());
        var UnitCount = row.find('.jq_unit_count').text();
        var PrevFreeQty = parseFloat(row.find('.free_td_hid').text()) == "" ? "0" : parseFloat( row.find('.free_td_hid').text());

        console.log(Free, 'Free');
        console.log(PrevFreeQty, 'PrevFreeQty');

       
        if (PrevFreeQty >= Free) {
        }
        else {
            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Free Quantity Greater than Purchase Free Quantity.' });
            row.find('.jq_quantity_td').find('input').val(Number(Quantity).toFixed(3));
            Free = PrevFreeQty;
            row.find('.free_td').find('input').val(Number(Free).toFixed(3));
            return false;
        }

        var Actqty = ((parseFloat(Quantity) * parseFloat(UnitCount)) + parseFloat(Free));
        row.find('.ActQty_td').find('input').val(Actqty.toFixed(3));
      

    });


    function RemoveProductdetails(ele) {
        debugger
        let Productname = $(ele).closest("tr").find("td").eq(2).text().trim();
        let UID = $(ele).closest("tr").find("td").eq(12).text().trim();
        let $tablecontainer = $(ele).closest('[perfect-tempTable]');
        if (confirm("Are you sure you want to delete " + " " + Productname + "?"))
        {
            var row = $(ele).closest('tr');

            var siblings = row.siblings();

            siblings.each(function (index) {
                $(this).children('td').first().text(index + 1);
            });
            // Removing the current row.
            $(ele).closest('tr').remove();
            calculateTotals($tablecontainer);
            RoundOffCalcs($tablecontainer);
            RemoveTaxArray($tablecontainer, UID);
        }
        else
        {
            return false;
        }

        //If removed all rows
        var rowcount = document.getElementById('PurchaseReturntbody').rows.length;
        if (rowcount == 0) {
            //$('#EMPL').css('display', 'none');
            $('#Purreturn').hide();
            let CheckListHTML = '';
            CheckListHTML += "<tr id='0'> <td style='text-align:center;' colspan='6'>No Records..</td> </tr>";
            $('#PurchaseReturntbody').html(CheckListHTML);
            $("#PurchaseReturntbody tr").remove();
            fn_PurchaseReturnIndex_initialLoad();
        }


    }
    var Taxcalled = 0;
    var $modal = $('#zero_confignew');
    function EditTax(ele,uid) {
        debugger;
        let Quantity = $(ele).closest("tr").find('.jq_quantity_td').find('input').val() == "" ? "0" : $(ele).closest("tr").find('.jq_quantity_td').find('input').val();
        let ProductId = $(ele).closest("tr").find('.jq_productId').text();
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let UID;

        if (uid != 0)
        {
            UID = uid;
        }
        else
        {
            UID=$('[name=UID]').val();
        }


        console.log('TAX>', tax);

        var foundItems = [];
        if (Taxcalled == 1) {
            $.each(tax, function (key, value) {
                debugger

                foundItems = tax.filter(x => x.UID.toString() == UID.toString());
                console.log('tax.filter(x => x.UID>', tax.filter(x => x.UID));

                const indexOfObject = tax.findIndex(object => {
                    return object.UID.toString() === UID.toString();
                });

                console.log('TAXFINDINDEX>', tax);
                console.log('foundItems length>', foundItems.length);
                console.log('foundItemsDATA>', foundItems);

                tax.splice(indexOfObject, foundItems.length);
                console.log('TAXSPLICED>', tax);
            });

            console.log('TAXFIND>', tax);

            $modal.find('tbody').find('tr').each(function () {
                //alert($thisForm.find('[name=ProductID]').val());
                let taxinfo = {};
                taxinfo['UID'] = uid;
                taxinfo['ProductID'] = ProductId;
                taxinfo['FK_TaxType'] = $(this).find('.jq_taxType_td').text();
                taxinfo['TaxTyName'] = $(this).find('.jq_taxTypeName_td').text();
                taxinfo['TaxPercentage'] = $(this).find('.jq_taxPer_td').text();
                taxinfo['TaxAmount'] = $(this).find('.jq_taxamount_td').text();
                console.log('taxinfo', taxinfo);



                tax.push(taxinfo);
                // alert('TAX DET')
            });
            console.log('TAXUPDATEFIND>', tax);

        }

    }
  
    $("#EMPL tbody").on("change", ".jq_Discount_td", function () {
        debugger;
        var row = $(this).closest("tr");
        //var purrate = row.find('.jq_purrate_td').text() == "" ? "0" : row.find('.jq_purrate_td').text();
        //var Discount = parseFloat(row.find('.jq_Discount_td').find('input').val()) == "" ? 0 : parseFloat(row.find('.jq_Discount_td').find('input').val());
       

        var CurrentQuantity = parseFloat(row.find('.jq_quantity_td').find('input').val()) == "" ? 0 : parseFloat(row.find('.jq_quantity_td').find('input').val());
        var PurRate = parseFloat(row.find('.jq_purrate_td').text()) == "" ? 0 : parseFloat(row.find('.jq_purrate_td').text());
        var discount = parseFloat(row.find('.jq_Discount_td').find('input').val()) == "" ? 0 : parseFloat(row.find('.jq_Discount_td').find('input').val());
        var hidediscount = parseFloat(row.find('.jq_Discount_tdhide').text()) == "" ? 0 : parseFloat(row.find('.jq_Discount_tdhide').text());

        if (parseFloat(discount) > (parseFloat(PurRate) * parseFloat(CurrentQuantity))) {

            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Discount Amount Should not be greater than (Purchase Rate*Quantity)' });

            row.find('.jq_Discount_td').find('input').val(parseFloat(hidediscount).toFixed(3));


        }
        var UID = row.find('.jq_UID_td').text();
        ShowTaxDetails(this, 0, UID);
        calculateTotals(this);
    });
    function filterSpecialCharacters(event) {
        var input = event.target;
        var keyCode = event.which || event.keyCode;
        // Check if the pressed key is the pipe symbol (|)
        if (String.fromCharCode(keyCode) === '|') {
            // Prevent the default action of inserting the character
            event.preventDefault();
        }
    }
    function CalcActualQuantity(ele, upasscount) {
        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let Qttydata = $thisForm.data('quantitydata');
        if (Qttydata != '') {

            $.each(Qttydata, function (key, value1) {
                //$thisForm.find('[name=PpdShortage]').val(value1.PpdShortage);
                //$thisForm.find('[name=Ppdless]').val(value1.Ppdless);
                $thisForm.find('[name=PpdFreeQuantity]').val(value1.PpdFreeQuantity);
            });
        }

        let qty = $thisForm.find('[name=PpdQuantity]').val() == "" ? "0" : $thisForm.find('[name=PpdQuantity]').val();
        let nounit = $thisForm.find('[name=NoOfUnits]').val() == "" ? "0" : $thisForm.find('[name=NoOfUnits]').val();
        let SalePrice = $thisForm.find('[name=SalPrice]').val() == "" ? "0" : $thisForm.find('[name=SalPrice]').val();
        let unitcount = $thisForm.find('[name="UnitID"]').children(":selected").attr('UnitCounts');
        //let Shortage = $thisForm.find('[name=PpdShortage]').val() == "" ? "0" : $thisForm.find('[name=PpdShortage]').val();
        //let less = $thisForm.find('[name=Ppdless]').val() == "" ? "0" : $thisForm.find('[name=Ppdless]').val();
        //let freeqty = $thisForm.find('[name=PpdFreeQuantity]').val() == "" ? "0" : $thisForm.find('[name=PpdFreeQuantity]').val();
        let $modal2 = $thisForm.find('#formGroupModalQuantity');
        //let Shortage = $modal2.find('#PpdShortage').val() == "" ? "0" : $modal2.find('#PpdShortage').val();
        //let less = $modal2.find('#Ppdless').val() == "" ? "0" : $modal2.find('#Ppdless').val();
        let CurrentStock = $thisForm.find('[name=PpdCurrentStock]').val() == "" ? "0" : $thisForm.find('[name=PpdCurrentStock]').val();
        


        let freeqty = $modal2.find('#PpdFreeQuantity').val() == "" ? "0" : $modal2.find('#PpdFreeQuantity').val();
        //alert(Shortage);
        //alert(less);
        let ActQty = 0.000;

        if (unitcount == undefined) {
            ActQty = (parseFloat(unitcount) * parseFloat(qty) + parseFloat(freeqty) );
        }
        else {
            ActQty = (parseFloat(unitcount) * parseFloat(qty) + parseFloat(freeqty) );
        }
        if (parseFloat(ActQty) <= parseFloat(CurrentStock)) {


        }
        else {
            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Actual Quantity Should be less than or equal to CurrentStock .' });
            $thisForm.find('[name=PpdQuantity]').val(0);
            $thisForm.find('[name=PpdActualQuantity]').val(0);
            $thisForm.find('[name=PpdFreeQuantity]').val(0);
            $thisForm.data({ quantitydata: '' });
            return false;
        }
        console.log('UNIT NEW>', unitcount); //alert(qty);

        $thisForm.find('[name=PpdActualQuantity]').val(ActQty.toFixed(3));
        if (SalePrice > 0) {
           // Discountcalculation(ele, 1);
            //Discountcalculation(ele, 2);
        }

    }
    function ShowQuantityDets(ele) {

        debugger;

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        if ($thisForm.find('[name="PpdQuantity"]').val().length > 0) {
            let searchValue = {
                //Name: $thisForm.find('[name=PpdShortage]').val()
            };

            let $model = $(ele).closest('[perfect-class="formGroup"]').find('[perfect-class="formGroupModalQuantity"]');
            $('#formGroupModalQuantity').modal({ backdrop: 'static', keyboard: false });
            $(ele).closest('[perfect-class="formGroup"]').find('[perfect-class="formGroupModalQuantity"]').modal('show');

            $(ele).closest('[perfect-class="formGroup"]').find('.temptableError').text('');
        }
        else {

            $(ele).closest('[perfect-class="formGroup"]').find('.temptableError').text('Please Enter Quantity');
        }
        let Qttydata = $thisForm.data('quantitydata');
     
        if (Qttydata != undefined) {
            if (Qttydata != '') {

                $.each(Qttydata, function (key, value1) {
                   
                    $thisForm.find('[name=PpdFreeQuantity]').val(value1.PpdFreeQuantity);
                });
            }
            else {

                $('#formGroupModalQuantity').on('hidden.bs.modal', function (event) {
                  
                  //  $thisForm.find('[name=PpdFreeQuantity]').val('');
                });
            }
        }
    }
    function BindQuantityDetails(ele, mode) {
        debugger
        let $modal = $(ele).closest('.modal');
        let $thisForm;
        if (mode == 1) {
            $thisForm = $('[perfect-class="form"]');
        }
        else {
            $thisForm = $(ele).closest('[perfect-class="form"]');
        }

        let Free = $thisForm.find('[name=PpdFreeQuantity]').val() == "" ? "0" : $thisForm.find('[name=PpdFreeQuantity]').val();
       
        let Qty = $thisForm.find('[name=PpdQuantity]').val() == "" ? "0" : $thisForm.find('[name=PpdQuantity]').val();
        
        let Validqty = 0;
        let Validqty1 = 0;
        let Validqty2 = 0;
      
       
            let unit = $thisForm.find('[name="UnitID"]').children(":selected").attr('UnitCounts');
            let sumActQty = (parseFloat(Qty) * parseFloat(unit) + parseFloat(Free) );
            $thisForm.find('[name=PpdActualQuantity]').val(sumActQty.toFixed(3));
            var q = [];
            let qtty = {
                PpdFreeQuantity: Free,
                
            }
            q.push(qtty);
            console.log('qttty', qtty);

            $thisForm.data({ quantitydata: q });
            //$('#formGroupModalQuantity').modal({ backdrop: 'static', keyboard: false });
             CalcActualQuantity(ele);
            $('#formGroupModalQuantity').modal('hide');
        
    }
    function PurchaseDiscount(ele, field, rateid) {
        debugger;
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let PurRate = $thisForm.find('[name=PpdRate]').val() == "" ? 0 : $thisForm.find('[name=PpdRate]').val();
        let discount = $thisForm.find('[name=PpdpurDis]').val() == "" ? 0 : $thisForm.find('[name=PpdpurDis]').val();
        let discountPer = $thisForm.find('[name=PpdpurDiscper]').val() == "" ? 0 : $thisForm.find('[name=PpdpurDiscper]').val();
        let quantity = $thisForm.find('[name=PpdQuantity]').val() == "" ? 0 : $thisForm.find('[name=PpdQuantity]').val();
        let discountamount = 0;
        let discountPerc = 0;

        if (field == 1) {
            discountamount = parseFloat(PurRate) * parseFloat(discountPer) / 100;
            $thisForm.find('[name=PpdpurDis]').val(discountamount.toFixed(2));
            $thisForm.find('[name=PpdpurDiscper]').val(discountPer);
        }
        else if (field == 2) {
            if (parseFloat(discount) <= (parseFloat(PurRate) * parseFloat(quantity))) {
                discountPerc = parseFloat(discount) * 100 / parseFloat(PurRate);
                $thisForm.find('[name=PpdpurDiscper]').val(discountPerc);
                $thisForm.find('[name=PpdpurDis]').val(discount);
                $thisForm.find('[perfect-tempTable-Purchase="PpdpurDis"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
            }
            else {
                $thisForm.find('[perfect-tempTable-Purchase="PpdpurDis"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('Discount Amount Should not be greater than (Purchase Rate*Quantity)');
                $thisForm.find('[name=PpdpurDis]').val(0);
            }
            BindTaxDetails(ele, 0) 
        }
        if (rateid == 5) {
            BindpurchaseDetails(ele, 5);

            if (parseFloat(discount) != 0 || parseFloat(discountPer) != 0) {
                NotificationMessage({ 'type': 'info', 'heading': 'info', 'message': 'Check Purchase Discount' });
            }
        }

    }
    function ShowPurchaserateDetails(ele) {



        let $thisForm = $(ele).closest('[perfect-class="form"]');
        if ($thisForm.find('[name="PpdRate"]').val() > 0) {


            let $model = $(ele).closest('[perfect-class="formGroup"]').find('[perfect-class="formGroupModalPurchaserate"]');
            $('#formGroupModalPurchaserate').modal({ backdrop: 'static', keyboard: false });
            $(ele).closest('[perfect-class="formGroup"]').find('[perfect-class="formGroupModalPurchaserate"]').modal('show');


            $(ele).closest('[perfect-class="formGroup"]').find('.temptableError').text('');
        }
        else {

            $(ele).closest('[perfect-class="formGroup"]').find('.temptableError').text('Please Enter Purchase Rate');
        }
        let PurDisc = $thisForm.find('[name=PpdpurDis]').val() == "" ? "0" : $thisForm.find('[name=PpdpurDis]').val();
        //let PurDiscPer = $thisForm.find('[name=PpdpurDiscper]').val() == "" ? "0" : $thisForm.find('[name=PpdpurDiscper]').val();
        let Purddata = $thisForm.data('pdiscdata');
        console.log('Purddata:', Purddata);
        if (Purddata != '') {
            $.each(Purddata, function (key, value1) {
                $thisForm.find('[name=PpdpurDis]').val(value1.PpdpurDis);
               
            });
        }
        else {
            $('#formGroupModalPurchaserate').on('hidden.bs.modal', function (event) {
                
              //  $thisForm.find('[name=PpdpurDis]').val('');
               
            });
        }
        debugger;
        ShowTaxDetails(ele, 2, 0);

    }
    function fun_imports(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let ReturnType = $thisForm.find('[name = "Returntype"]').val();
        if (ReturnType == 1) {
            $("#divItemWise").css("display", "block");
            $("#divPurreturn").css("display", "none");
            $('input[name="PrInvoiceNo"]').removeAttr('readonly');
            //$thisForm.find('[name=PrInvoiceNo]').val('');
            //$thisForm.find('[name=PurchaseID]').val('');
            //$thisForm.find('[name=FK_Stock]').val('');
            //$thisForm.find('[name=SupplierName]').val('');
            //$thisForm.find('[name=FK_Supplier]').val('');

        }
        else {
            $("#divItemWise").css("display", "none");
            $("#divPurreturn").css("display", "block");
            $('input[name="PrInvoiceNo"]').attr('readonly', 'readonly');
            $thisForm.find('[name=PrInvoiceNo]').val('');
            $thisForm.find('[name=PurchaseID]').val('');
            $thisForm.find('[name=FK_Stock]').val('');
            $thisForm.find('[name=SupplierName]').val('');
            $thisForm.find('[name=FK_Supplier]').val('');
            //PrInvoiceDate
        }
    }

    function BindTaxDetails(ele, mod) {
        debugger;
        let $thisForm = $(ele).closest('[perfect-class="form"]');
         Taxcalled = 1;
         let Qty = $thisForm.find('[name=PpdQuantity]').val() == "" ? "0" : $thisForm.find('[name=PpdQuantity]').val();
        let PurRate = $thisForm.find('[name=PpdRate]').val() == "" ? "0" : $thisForm.find('[name=PpdRate]').val();
        let unit = $thisForm.find('[name="UnitID"]').children(":selected").attr('UnitCounts');
         let PurDis = 0;
         if ($thisForm.find('[name=PpdpurDis]').val() == "" || $thisForm.find('[name=PpdpurDis]').val() == undefined) {
             PurDis = 0;
         }
         else {
             PurDis = $thisForm.find('[name=PpdpurDis]').val();
         }
        let NetAmount = ((parseFloat(Qty) * parseFloat(unit)) * (parseFloat(PurRate)) - (parseFloat(PurDis)));
        var InputData =
        {
            FK_Product: $thisForm.find('[name=ProductID]').val(),
            Includetax: 0,
            Quantity: 0,
            Amount: NetAmount,
            TaxtyInterstate: IsStatecode,

        }

        $.ajax({
           url: "@Url.Action("GetTaxAmountNew","Purchase")",
            type: "Get",
            data: InputData,
            dataType: "json",
            contentType: "application/json",
            success: function (ajaxOutput) {
                if (ajaxOutput.Process.IsProcess) {
                    var CheckListHTML = '';
                    let sum = 0;
                    if (ajaxOutput.Data.length > 0) {


                        $.each(ajaxOutput.Data, function (i, value) {
                            sum = sum + parseFloat(value.TaxAmount);
                            CheckListHTML += "<tr>";
                            CheckListHTML += "<td>" + value.SlNo + "</td>";
                            CheckListHTML += "<td Class='jq_ProductID_td' Style='Display:none'>" + value.ProductID + "</td>";
                            CheckListHTML += "<td class='jq_taxType_td' Style='Display:none'>" + value.FK_TaxType + "</td>";
                            CheckListHTML += "<td class='jq_taxTypeName_td'>" + value.TaxTyName + "</td>";
                            CheckListHTML += "<td class='jq_taxPer_td text-center'>" + value.TaxPercentage + "</td>";
                            CheckListHTML += "<td class='jq_taxamount_td text-right' >  " + value.Amount.toFixed(4) + "</td>";
                            CheckListHTML += "</tr>";
                        })
                    }
                    else {
                        CheckListHTML += "<div class='form-group col-md-6'>";
                        CheckListHTML += "<div class='form-check mb-2'>";
                        CheckListHTML += "<input type='checkbox' class='form-check-input' >"
                        CheckListHTML += "<label class='form-check-label' for='check1'>No Records...</label>";
                        CheckListHTML += "</div></div>"
                    }
                    //let $model = createSearchModalDOM();
                    //$model.modal.find('.modal-body').append(CheckListHTML);
                    //$model.show

                    $("#formGroupModalTaxbody").html(CheckListHTML)
                    if (mod == 1) {
                        $('#formGroupModalTax').modal('show');
                    }
                    else {
                        $('#formGroupModalTax').modal('hide');
                    }

                   BindTaxAmount(ele)

                }
                else {
                    if (mod == 1) {
                        $.each(ajaxOutput.Process.Message, function (key, value) {
                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                        });
                    }
                }
            },
            complete: function () {
                $(ele).prop('disabled', false);
            }
        });
    }

    function BindTaxAmount(ele) {
        debugger;
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let sum = 0;
        let currenttotal = 0;
        $('#formGroupModalTaxbody tr').each(function (index, ele) {
            sum = sum + parseFloat($(ele).find('.jq_taxamount_td').text());

        });
        console.log(sum, 'sumtax');
        $thisForm.find('[name=TaxAmount]').val(sum.toFixed(2));
        let Qty = $thisForm.find('[name=PpdQuantity]').val() == "" ? "0" : $thisForm.find('[name=PpdQuantity]').val();
        let PurRate = $thisForm.find('[name=PpdRate]').val() == "" ? "0" : $thisForm.find('[name=PpdRate]').val();
        let taxamount = $thisForm.find('[name=TaxAmount]').val() == "" ? "0" : $thisForm.find('[name=TaxAmount]').val();
        let discountamount = $thisForm.find('[name=PpdpurDis]').val() == "" ? "0" : $thisForm.find('[name=PpdpurDis]').val();
        currenttotal = parseFloat(taxamount) + (parseFloat(PurRate) * parseFloat(Qty)) - parseFloat(discountamount);
      
        $thisForm.find('[name=NetPurchase]').val(currenttotal.toFixed(2));
    }
    function GetUnit(ele,UnitID) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let ProductID = $thisForm.find('[name=ProductID]').val() == "" ? "0" : $thisForm.find('[name=ProductID]').val();
        console.log('123', ProductID);
        let $placeDropdown = $thisForm.find('[name=UnitID]');//<--- Will give place select html element
        $placeDropdown.empty();
        $placeDropdown.append($('<option/>', { "value": '' }).text('Please select')).selectpicker('refresh');
       
        let inputData = {
            __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
            FK_Product: ProductID,
        };
        $.ajax({
            url: "@Url.Action("GetProductUnit", "PurchaseReturn")",
            type: "POST",

            data: inputData,
            dataType: "json",
            contentType: "application/x-www-form-urlencoded;charset=utf-8",
            success: function (ajaxOutput) {
                console.log(ajaxOutput.Data, 'ajaxOutput.Data')

                if (ajaxOutput.Process.IsProcess) {
                    console.log(ajaxOutput.Data,'ajaxOutput.Data')
                    $.each(ajaxOutput.Data, function (key, value) {
                        $placeDropdown.append($('<option/>', { "value": value.FK_Unit, "UnitCountS": value.UnitCount}).text(value.UnitName)).selectpicker('refresh')
                    });
                    if (UnitID > 0)
                        $thisForm.find('[name="UnitID"]').val(UnitID).selectpicker('refresh');
                    else
                    $thisForm.find('[name="UnitID"]').val(ajaxOutput.Data[0].FK_Unit).selectpicker('refresh');
                    $thisForm.find('[name="UnitID"]').attr('UnitCountS', ajaxOutput.Data[0].UnitCount);
                }
                else {
                    $.each(ajaxOutput.Process.Message, function (key, value) {
                        //toastr.warning(value, "Error");
                        //NotificationMessage({ 'type': 'info', 'heading': 'info', 'message': value });
                    });
                }
            },
            //complete: function () {
                
            //}

        });
    }
    var cnt = 0;
    var payele;
    var s = 0;
    function AddPurchaseDetails(ele, tkey, uniq = [], remov = [], ext = []) {
        payele = ele;
        let $thisForm = $(ele).closest('[perfect-class="form"]');
       
        let tableKey = tkey;
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');

        let insertData = {};
        let tableOptionsTemp = tableOptionsTempOut;

        let unique = (uniq) ? uniq : [];
        let notValidate = (remov) ? remov : [];

        let isValid = true;
        //let errorClass = '.temptableError';

        //let tableKey = val;
        let errorClass = '.temptableError';
        let errorClass1 = '.temptableError1';
        let errorClass2 = '.temptableError2';
        //let isValid = true;
        //let $thisForm = $(ele).closest('[perfect-class="form"]');
        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="ProName"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="ProName"]').val() == "") {
            isValid = false;
            $thisForm.find('[perfect-tempTable-' + tableKey + '="ProName"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Product Name');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="ProName"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }
        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Unit"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="Unit"]').val() == "") {
            isValid = false;
            $thisForm.find('[perfect-tempTable-' + tableKey + '="Unit"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Unit');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="Unit"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }
        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').val() == "") {
            isValid = false;
            $thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter Quantity');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }
        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="PpdActualQuantity"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="PpdActualQuantity"]').val() == "") {
            isValid = false;
            $thisForm.find('[perfect-tempTable-' + tableKey + '="PpdActualQuantity"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter Actual Quantity');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="PpdActualQuantity"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }
        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Pur.Rate"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="Pur.Rate"]').val() == "") {
            isValid = false;
            $thisForm.find('[perfect-tempTable-' + tableKey + '="Pur.Rate"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter Pur.Rate');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="Pur.Rate"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }
        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="PpdRate"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="PpdRate"]').val() == "") {
            isValid = false;
            $thisForm.find('[perfect-tempTable-' + tableKey + '="PpdRate"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter Net Pur.Rate');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="PpdRate"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }
        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="TaxAmount"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="PpdRate"]').val() == "") {
            isValid = false;
            $thisForm.find('[perfect-tempTable-' + tableKey + '="TaxAmount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter Tax Amount');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="TaxAmount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }
        

        //make index

        let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
        let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
        let indexname = tkey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);
        let updateCond = '';
        let isNew = true;
        if (thisactionIndex > 0) {
            //means update
            insertData[indexname] = thisactionIndex;
            updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
            isNew = false;
        }
        else {
            //insert
            insertData[indexname] = lastIndex + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
            isNew = true;
        }



        if (unique.length > 0) {
            //getting previous data
            let prevData = [];
            $tblcontainer.find('table > tbody').find('tr').each(function () {
                if (isNew) {
                    prevData.push($(this).data('pData'));
                }
                else {
                    if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                        prevData.push($(this).data('pData'));
                    }

                }

            })
            // console.log('previous data', prevData);

            unique.forEach(function (key, i) {

                console.log('unid -> key:' + key + "| index :" + i);
                let $thisEle = $thisForm.find('[perfect-tempTable-' + tableKey + '="' + key + '"]');
                let headerEleName = $thisEle.attr('perfect-tempTable-' + tableKey);
                let atname = $thisEle.attr('name');
                let cvalue;

                //console.log('len')
                if ($thisEle.length != 0) {
                    let $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
                    let errmessage = headerEleName + " Already exits"

                    //getting current value in cval
                    if ($thisEle.is('select')) {
                        cvalue = $thisEle.val();
                    }
                    else if ($thisEle.is('input')) {

                        let inputEleType = $thisEle.attr('type').toLocaleLowerCase();

                        if (inputEleType == 'checkbox') { cvalue = $thisEle.is(':checked'); }
                        else if (inputEleType == 'hidden') { cvalue = $thisEle.val(); }
                        else { cvalue = $thisEle.val(); }
                    }
                    else { cvalue = $thisEle.val(); }

                    console.log('cvalue ->', cvalue);

                    //searching in previous data
                    if (prevData.find(a => a[atname] == cvalue)) {
                        // console.log('Search =>' + cvalue + '| attr :' + atname)
                        //let confirmationDialogBoxOption = { heading: "Warning", body: dtable[0].Message + "<br>Do you want to continue? ", cancel: "No", confirm: "Yes" };
                        //var confirmBoxObj = ConfirmDialog(confirmationDialogBoxOption);

                        //OLD SECTION
                        //$errorElement.text(errmessage);
                        //isValid = false;
                        //
                    }
                }
            });

        }

        //debugger
        if (isValid) {
            
            $thisForm.data({ quantitydata: '' });
            $thisForm.data({ pdiscdata: '' });
            $thisForm.data({ saldisdata: '' });
            if (isNew) {
                if ($('#pupdate').is(":visible")) {
                    let savedPDatas = $thisForm.data('purData');
                    //alert(savedPDatas.length)
                    if (savedPDatas.length > 0 || savedPDatas.length == null || !undefined) {
                        if (s == 0) {
                            cnt = savedPDatas.length + 1;
                            s++;

                        }
                        else {
                            cnt++;
                        }

                    }
                }
                else {
                    cnt++;
                }

                Taxdet(this);
                //alert($thisForm.find('[perfect-tempTable-' + tableKey + ']').find('table').length );
            }
            else {
                //debugger
                console.log('RETTAX>', tax);
               // Taxret(this);
            }

            Taxcalled = 0;

            // this section make table column data
            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');


                if ($this.is('select')) {

                    tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                    tableOptionsTemp.hideColumn.push(nameAttr)
                    //displat text of select
                    insertData[nameAttr + '_d'] = $this.children(":selected").text();
                    insertData[nameAttr] = $this.val();


                    //clear field
                    $this.val('').selectpicker('refresh');
                }
                else if ($this.is('input')) {

                    let inputType = $this.attr('type').toLocaleLowerCase();

                    if (inputType == 'checkbox') {

                        insertData[nameAttr] = $this.is(':checked');

                        //clear field
                        $this.prop('checked', false);

                    }
                    else if (inputType == 'hidden') {

                        tableOptionsTemp.hideColumn.push(nameAttr)
                        insertData[nameAttr] = $this.val();

                        //clear field
                        $this.val('');
                    }
                    else {
                        insertData[nameAttr] = $this.val();

                        //clear field
                        $this.val('');
                    }
                }
                else {
                    insertData[nameAttr] = $this.val();

                    //clear field
                    $this.val('');
                }




            });

            if (isNew) {
                //this section nake table.table row
                if ($tblcontainer.find('table').length == 0) {
                    $tblcontainer.append(pft_table_createtable([insertData], tableOptionsTemp));
                    // $tblcontainer.find('table').dataTable({  });
                }
                else {
                    let table = $tblcontainer.find('table').DataTable()
                    table.destroy()
                    pft_table_addTableRow($tblcontainer.find('table'), insertData, tableOptionsTemp);


                    // $tblcontainer.find('table').dataTable({ });
                    //   $tblcontainer.DataTable().draw();
                    //  table.ajax.reload();
                }
            }
            else {
                let table = $tblcontainer.find('table').DataTable()
                table.destroy()
                pft_table_replaceTableRow($tblcontainer.find('table'), updateCond, insertData, tableOptionsTemp);


                // $tblcontainer.find('table').dataTable({ });
            }

            // resetting the edit value
            $tblcontainer.attr('perfect-tempTable-action', 0);
        }
        calculateTotals(ele);
        RoundOffCalcs(ele);

    }
    var tableOptionsTempOut = {
        iconButton: {
            buttons: [

                {
                    icon: "fa fa-pencil btnPerfectGridEdit",
                    action: function () {
                        //debugger
                        let savedData = $(this).closest('tr').data('pData')

                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let tableKey = $tablecontainer.attr('perfect-tempTable');
                        let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                        //index attribute name in table row
                        let indexname = tableKey + 'index';
                        //index number in table row
                        let rindex = $(this).closest('tr').attr(indexname);
                        $tablecontainer.attr('perfect-tempTable-action', rindex);

                        console.log('Editclick', savedData);
                        //filling data in available inputs
                        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                            let $thisNode = $(this);
                            let pf_name = $thisNode.attr('name');
                            if ($thisNode.is('select')) {

                                $thisNode.val(savedData[pf_name]).selectpicker('refresh');
                            }
                            else if ($thisNode.is('input')) {

                                if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                    $thisNode.prop('checked', savedData[pf_name]);
                                }
                                else {
                                    $thisNode.val(savedData[pf_name]);
                                }

                            }
                            else {
                                $thisNode.val(savedData[pf_name]);
                            }


                        });
                        BindQuantityDetails($tablecontainer, 1);
                        calculateTotals($tablecontainer);
                        RoundOffCalcs($tablecontainer);
                       

                    }
                },
                {
                    icon: "fa fa-trash btnPerfectGridDelete",
                    action: function () {
                        let savedData = $(this).closest('tr').data('pData')
                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let $thistbl = $(this).closest('table');
                        let table = $thistbl.DataTable();
                        table.destroy();
                        if ($(this).closest('tbody').find('tr').length > 1) {
                            $(this).closest('tr').remove();
                            pft_table_slreset($thistbl);
                            //$thistbl.dataTable({ paging: false,  ordering: false });

                        }
                        else {
                            $thistbl.remove();
                         
                        }
                        $("#purreset").click();
                        calculateTotals($tablecontainer);
                        RoundOffCalcs($tablecontainer);
                        
                    }
                },
            ]
        },
        onlyShowColumn: ['ProName', 'UnitID_d', 'UnitCount', 'PpdQuantity', 'PpdActualQuantity', 'PpdRate', 'PpdpurDis', 'NetPurchase', 'TaxAmount','PpdFreeQuantity'],
        hideColumn: ["UID", "UnitID",/* "PpdFreeQuantity",*/ "PpdpurDis", "PpdDisper", "PpdDiscount", "PpdProAmnt", "ProductID", "IncludeTax",'PpdCurrentStock'],
        serialNo: true,
        renameHeader: {
            "PpdQuantity": "Quantity1R", "PpdRate": "Pur Rate", "PpdActualQuantity": "Act Qty1R", "PpdBarCode": "BarCode", "ProName": "Product Name", "UnitID_d": "Unit", "TaxAmount": "Tax1R", "PpdpurDis": "Pur.Discount1R",
            "PpdActualQuantity": "Act Qty1R",  "PpdDiscount": "Discount",  "PpdProAmnt": "Pro Amnt1R", "PpdFreeQuantity": "Free", "PpdRate": "Pur.Rate1R", "NetPurchase": "Total Rate1R"
        },
        rowAttribute: [],
        isCheckType: [],
    

    };
    function fillgrid(tablk, wartableOptionsTempOut, $thisForm, data) {
       
        let tableOptionsTemp = wartableOptionsTempOut;
        let insertData = [];
        let tableKey = tablk;
        let indexname = tableKey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');
        $.each(data, function (keyOne, valOne) {
            let pData = {};
            pData[indexname] = keyOne + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', pData[indexname])
            //---

            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');

                if (typeof valOne[nameAttr] !== undefined) {

                    if ($this.is('select')) {
                        tableOptionsTemp.hideColumn.push(nameAttr);
                        pData[nameAttr + '_d'] = $this.find('[value="' + valOne[nameAttr] + '"]').text();
                        pData[nameAttr] = valOne[nameAttr];
                    }
                    else if ($this.is('input')) {
                        if (tableKey == 'Purchase') {
                            
                        }

                        pData[nameAttr] = valOne[nameAttr];
                    }
                    else if ($this.is('hidden')) {

                        pData[nameAttr] = valOne[nameAttr];
                    }
                    else {
                        pData[nameAttr] = valOne[nameAttr];
                    }
                }
            });

            insertData.push(pData);
            console.log('pData', pData)
            console.log('insertData', insertData)
        });
        $tblcontainer.empty();
        $tblcontainer.append(pft_table_createtable(insertData, tableOptionsTemp));
        
    }
    function BindpurchaseDetails(ele, sd) {
        //debugger
        let $modal = $(ele).closest('.modal');
        let $thisForm;
        if (sd == 1) {
            $thisForm = $('[perfect-class="form"]');
        }
        else {
            $thisForm = $(ele).closest('[perfect-class="form"]');
        }
        let valid = 0;

        let Qty = $thisForm.find('[name=PpdQuantity]').val() == "" ? "0" : $thisForm.find('[name=PpdQuantity]').val();
        let PurDisc = $thisForm.find('[name=PpdpurDis]').val() == "" ? "0" : $thisForm.find('[name=PpdpurDis]').val();
        let PurRate = $thisForm.find('[name=PpdRate]').val() == "" ? "0" : $thisForm.find('[name=PpdRate]').val();
        let NetPurRate = $thisForm.find('[name=NetPurchase]').val() == "" ? "0" : $thisForm.find('[name=NetPurchase]').val();
        let Dispur = 0;
        if (parseFloat(PurDisc) > (parseFloat(PurRate) * parseFloat(Qty))) {
            $thisForm.find('[perfect-tempTable-Purchase="PpdpurDis"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('Discount Amount Should not be greater than (Purchase Rate*Quantity)');
            $thisForm.find('[name=PpdpurDis]').val(0);
            $('#formGroupModalPurchaserate').modal({ backdrop: 'static', keyboard: false });
            $('#formGroupModalPurchaserate').modal('show');
            valid = 1;
        }
        else {
            valid = 0;
        }
        if ((parseFloat(PurDisc) <= (parseFloat(PurRate) * parseFloat(Qty))) && valid == 0) {


            let sumNetPurRate = (parseFloat(NetPurRate) * parseFloat(Qty)) - (parseFloat(PurDisc));
            //Dispur = (parseFloat(PurRate) - (parseFloat(PurDisc))) * (parseFloat(Qty));
            Dispur = (parseFloat(NetPurRate) * parseFloat(Qty)) - (parseFloat(PurDisc));;
            console.log('CALC AFT DIS>', sumNetPurRate);
            if (isNaN(sumNetPurRate)) {
                sumNetPurRate = 0.00;
            }

            var p = [];
            let pdisc = {
                PpdpurDis: PurDisc
               
            }
            p.push(pdisc);
            console.log('purdisc', pdisc);
            $thisForm.data({ pdiscdata: p });
            
            BindTaxDetails( ele, 0);
            //$thisForm.find('[name=NetPurchase]').val(sumNetPurRate.toFixed(2));
            $thisForm.find('[perfect-tempTable-Purchase="PpdpurDis"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
            //$('#formGroupModalPurchaserate').modal({ backdrop: 'static', keyboard: false });
            $('#formGroupModalPurchaserate').modal('hide');

        }

    }
    function productclear(ele, tablekey) {
      
        let $thisform = $(ele).closest('[perfect-class="form"]');

        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="select"]').val('').selectpicker('refresh');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="date"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="hidden"]').val('');
        let $tblcontainer = $thisform.find('[perfect-tempTable="' + tablekey + '"]');
        $tblcontainer.attr('perfect-tempTable-action', 0);
    }
    function Getinvoicedate(ele) {
     
        let $thisform = $(ele).closest('[perfect-class="form"]');
        let PurchaseID = $thisform.find('[name=PurchaseID]').val() == "" ? "0" : $thisForm.find('[name=PurchaseID]').val();
           
        if (PurchaseID > 0) {
            $('input[name="PrInvoiceDate"]').attr('readonly', 'readonly');
        }
        else {

            $('input[name="PrInvoiceDate"]').removeAttr('readonly');
        }
    }
    function cleardata(ele) {
        debugger;
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        $thisForm.find('[name=PpdQuantity]').val('');
        $thisForm.find('[name=PpdRate]').val('');
        ClearQuantity(ele);
     
        $thisForm.find('[name="PpdFreeQuantity"]').val('');  
        $thisForm.find('[name="PpdpurDis"]').val('');  
        cleardiscount(ele);
    }
    function ClearQuantity(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let Qty = $thisForm.find('[name=PpdQuantity]').val() == "" ? "0" : $thisForm.find('[name=PpdQuantity]').val();
        let unit = $thisForm.find('[name="UnitID"]').children(":selected").attr('UnitCounts');
        let Free = $thisForm.find('[name=PpdFreeQuantity]').val() == "" ? "0" : $thisForm.find('[name=PpdFreeQuantity]').val();
        
        let actqty = $thisForm.find('[name=PpdActualQuantity]').val();
        q = '';
       
        $thisForm.find('[name=PpdFreeQuantity]').val('');
        
        let sumActQty = (parseFloat(Qty) * parseFloat(unit) + parseFloat($thisForm.find('[name=PpdFreeQuantity]').val() == "" ? "0" : $thisForm.find('[name=PpdFreeQuantity]').val()) );
       
        $thisForm.find('[name=PpdActualQuantity]').val(sumActQty.toFixed(3));
        $thisForm.data({ quantitydata: '' });
    }
    function cleardiscount(ele) {
        debugger;
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        $thisForm.find('[name="PpdpurDis"]').val('');
      
        $thisForm.data({ pdiscdata: '' });
       
    }

    //$("#EMPL tbody").on("change", ".jq_Discount_td", function () {
    //    debugger
     
    //});
</script>

