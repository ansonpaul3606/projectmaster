


<div class="card">
    <div class="card-header">
        <h4 class="card-title col-12">@ViewBag.PageTitle</h4>
        <span title="To View List" onclick="fn_showListView();"><svg id="Layer_1" class="layer" stroke="currentColor" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" height="20" width="20" viewBox="0 0 122.88 122.54"><title>To View List</title><path class="viewlst" d="M4.69,0H46.22a4.71,4.71,0,0,1,4.69,4.69V46a4.69,4.69,0,0,1-4.69,4.69H4.69a4.65,4.65,0,0,1-3.31-1.38l-.09-.09A4.67,4.67,0,0,1,0,46V4.69A4.71,4.71,0,0,1,4.69,0ZM89.44,61.94a26.56,26.56,0,0,1,10.18,2l.07,0a26.61,26.61,0,0,1,15.25,32.16,26.18,26.18,0,0,1-2.7,6.11l10.3,11.24a1.27,1.27,0,0,1-.07,1.8l-7.57,6.9a1.27,1.27,0,0,1-1.79-.07l-9.86-10.85a26.36,26.36,0,0,1-6.1,2.74,26.87,26.87,0,0,1-7.71,1.13,26.51,26.51,0,0,1-10.17-2l-.07,0A26.64,26.64,0,0,1,64.85,78.37l0-.07A26.6,26.6,0,0,1,89.44,61.94Zm15,11.59a21.38,21.38,0,0,0-6.89-4.61l-.06,0a21.22,21.22,0,0,0-23.07,4.64l-.07.07a21.25,21.25,0,0,0-4.54,6.83l0,.06a21.32,21.32,0,0,0-1.58,8.06,21.26,21.26,0,0,0,29.35,19.62,21.54,21.54,0,0,0,6.89-4.61l.07-.07a21.09,21.09,0,0,0,4.54-6.83l0-.06a21.35,21.35,0,0,0,0-16.17,21.34,21.34,0,0,0-4.62-6.9ZM4.69,63.2H46.22a4.71,4.71,0,0,1,4.69,4.7v41.34a4.68,4.68,0,0,1-4.69,4.69H4.69A4.69,4.69,0,0,1,0,109.24V67.9a4.71,4.71,0,0,1,4.69-4.7ZM68.78,0h41.53A4.71,4.71,0,0,1,115,4.69V46a4.71,4.71,0,0,1-4.69,4.69H68.78A4.71,4.71,0,0,1,64.09,46V4.69a4.69,4.69,0,0,1,1.37-3.31l.1-.09A4.67,4.67,0,0,1,68.78,0Z"></path></svg></span>
    </div>
    <div class="card-body">
        <form id="" class="form-valide" perfect-class="form" action="#" method="post" perfect-onFormSuccess="">
            <div>
                @Html.AntiForgeryToken()
                <div class="row">
                    <div class="col-sm-5">
                        <div class="row">
                            <div class="col-sm-12">
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-5 col-form-label">
                                        <span perfect-class="formGroupLabel">Quotation No</span>
                                      
                                    </label>
                                    <div class="col-sm-7">
                                        <input type="hidden" name="ID_QuotationGen" value="0" />
                                        <input type="hidden" name="Quotation_No" />
                                        <input type="text" class="form-control" name="QuotationNo" perfect-class="formGroupControl" perfect-ctype="text" perfect-css="text" readonly />
                                        <input type="hidden" name="LastID" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                    </div>
                                </div>
                            </div>
                          
                            <div class="col-sm-12">
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-5 col-form-label">
                                        <span perfect-class="formGroupLabel">Quotation Date</span>
                                        <span class="text-danger">*</span>
                                    </label>
                                    <div class="col-sm-7">
                                        <input type="date" class="form-control perfectValidate_date" name="QuoDate" perfect-class="formGroupControl " perfect-ctype="date" perfect-css="date" min="1800-01-01"/>
                                    </div>
                                </div>
                            </div>
                            <div class="col-sm-12">
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-5 col-form-label">
                                        <span perfect-class="formGroupLabel">Expired Date</span>
                                        <span class="text-danger">*</span>
                                    </label>
                                    <div class="col-sm-7">
                                        <input type="date" class="form-control perfectValidate_date" name="QuoExpireDate" perfect-class="formGroupControl " perfect-ctype="date" perfect-css="date"  max="2050-01-01"/>
                                    </div>
                                </div>
                            </div>
                            <div class="col-sm-12">
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-5 col-form-label">
                                        <span perfect-class="formGroupLabel">Terms and Conditions</span>
                                    </label>
                                    <div class="col-sm-7">
                                        <textarea rows="4" class="form-control" maxlength="510" name="QuoTerms" perfect-class="formGroupControl" perfect-ctype="text" perfect-css="text"oninput="removeSpaces(this)"></textarea>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-7">
                        <div class="row">
                            <div class="col-sm-12">
                                <div class="daccordion__header">
                                    <span class="accordion__header--text">Product Details</span>
                                </div>
                                <div class="row">
                                    <div class="col-sm-12 " perfect-class="TempTableProduct">
                                        <br />
                                        <div class="row">
                                            <div class="col-sm-6">
                                                <div class="form-group row" perfect-class="formGroup">
                                                    <label class="col-sm-4 col-form-label">
                                                        <span perfect-class="formGroupLabel" name="lblProName">Product&nbsp;</span><span class="text-danger">*</span>
                                                    </label>
                                                    <div class="col-sm-8">
                                                        <div class="input-group">
                                                            <input type="text" class="form-control " perfect-tempTable-Quotation="ProdName" name="ProdName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly />
                                                            <input type="hidden" name="FK_Product" perfect-tempTable-Quotation="FK_Product" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                            <div class="input-group-append">
                                                                <button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" onclick="GetCmnPopUpSearchValAssign(this, 40, 'Product Details', [], ['QpdMRP','QpdRate'],QuotationGenrationTransMode)" BindName="ProdName" BindVal="FK_Product" perfect-css="button"></button>
                                                            </div>
                                                        </div>
                                                        <div class="text-danger temptableError"></div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-sm-4">
                                                <div class="form-group row" perfect-class="formGroup">
                                                    <label class="col-sm-5 col-form-label">Quantity&nbsp;<span class="text-danger">*</span></label>
                                                    <div class="col-sm-7">
                                                        <input type="text" class="form-control text-right" perfect-tempTable-Quotation="QpdQuantity" id="QpdQuantity" oninput="decimalpnt(this,'QpdQuantity',4)" name="QpdQuantity" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" maxlength="10" onchange="calcqty(this)" />
                                                        <div class="text-danger temptableError"></div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-sm-2">
                                               
                                                <button class="btn btn-primary1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" title="Add New Product" onclick="fn_createQuotationTable(this,'Quotation',['FK_Product'])"><i class="fa fa-plus" aria-hidden="true"></i></button>

                                            </div>

                                        </div>
                                      

                                        <div class="row">
                                            <div class="col-sm-12">
                                                <div class="form-group row" perfect-class="formGroup">
                                                    <div class="table-responsive" perfect-tempTable="Quotation" id="QuotationItemHead" perfect-tempTable-lastindex="0" perfect-tempTable-action="0" style="padding-left: 14px;padding-right: 14px;">
                                                       
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-footer text-right" perfect-class="formFooter">
                    @if (ViewBag.PagedAccessRights.UsrrlMsEdt)
                    {
                        <button id="" type="button" class="btn btn-primary mr-3 addcompany-jq-addnewuserUpdate d-none" name="update" perfect-css="button" onclick="fn_UpdateQuotationGen(this,'update')"><i class="fa fa-refresh fa-spin loaderClass"></i>Update</button>
                    }
                    @if (ViewBag.PagedAccessRights.UsrrlMsAdd)
                    {
                        <button id="addcompany-jq-addnewuser" type="button" class="btn btn-primary mr-3 " name="add" perfect-css="button" onclick="fn_UpdateQuotationGen(this,'new')"><i class="fa fa-refresh fa-spin loaderClass "></i>Save</button>
                    }

                    <button type="button" class="btn btn-light" perfect-css="button" onclick="fn_resetQuotation(this)" name="reset">Clear</button>
                </div>
            </div>
        </form>
    </div>
</div>
<script>
    var tableOptionsTempOut = {
        iconButton: {
            buttons: [
                {
                    icon: "fa fa-pencil btnPerfectGridEdit",
                    action: function () {
                        let savedData = $(this).closest('tr').data('pData');

                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let tableKey = $tablecontainer.attr('perfect-tempTable');
                        let $thisForm = $tablecontainer.closest('[perfect-class="form"]');

                        let indexname = tableKey + 'index';


                        let rindex = $(this).closest('tr').attr(indexname);

                        $tablecontainer.attr('perfect-tempTable-action', rindex);

                        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                            let $thisNode = $(this);
                            let pf_name = $thisNode.attr('name');
                            if ($thisNode.is('select')) {

                                $thisNode.val(savedData[pf_name]).selectpicker('refresh');

                            }
                            else if ($thisNode.is('input')) {
                                let inputType = $thisNode.attr('type').toLocaleLowerCase();
                                if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                    $thisNode.prop('checked', savedData[pf_name]);
                                }
                                else {
                                    $thisNode.val(savedData[pf_name]);
                                }
                            }
                            else {
                                $thisNode.val(savedData[pf_name]);
                            }
                        });
                    }
                },
                {
                    icon: "fa fa-trash btnPerfectGridDelete",
                    action: function () {
                        let $thistbl = $(this).closest('table');
                        let table = $thistbl.DataTable();
                        table.destroy();
                        if ($(this).closest('tbody').find('tr').length > 1) {
                            $(this).closest('tr').remove();
                            pft_table_slreset($thistbl);
                        }
                        else {
                            $thistbl.remove();
                        }
						 let $thisItem = $('[perfect-class="TempTableProduct"]');
                            $thisItem.find('[perfect-ctype="input"]').val('');
                            $thisItem.find('[perfect-ctype="hidden"]').val('');
                            $thisItem.find('[perfect-ctype="select"]').val('0').selectpicker('refresh');

                    }
                },
            ]
        },

        rowAttribute: [],
        renameHeader: { "ProdName": "Product", "QpdQuantity": "Qty" },
        hideColumn: ['FK_Product'],
        serialNo: true,

    };
    function fn_createQuotationTable(element, tkey, uniq = []) {
        let $thisForm = $(element).closest('[perfect-class="form"]');
        let tableKey = tkey;
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');

        let insertData = {};
        let tableOptionsTemp = tableOptionsTempOut;

        let unique = (uniq) ? uniq : [];

        let isValid = true;
        let errorClass = '.temptableError';


        let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
        let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
        let indexname = tkey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);
        let updateCond = '';
        let isNew = true;

        if (thisactionIndex > 0) {
            insertData[indexname] = thisactionIndex;
            updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
            isNew = false;
        }
        else {
            insertData[indexname] = lastIndex + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
            isNew = true;
        }


        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="ProdName"]').val().length == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="ProdName"]').val().length == null) {
            isValid = false;

            $thisForm.find('[perfect-tempTable-' + tableKey + '="ProdName"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please select the product');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="ProdName"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }

        let prodQty = (isNaN($thisForm.find('[perfect-tempTable-' + tableKey + '="QpdQuantity"]').val()) ? 0 : $thisForm.find('[perfect-tempTable-' + tableKey + '="QpdQuantity"]').val())

        if (prodQty <= 0) {
            isValid = false;
            $thisForm.find('[perfect-tempTable-' + tableKey + '="QpdQuantity"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please enter quantity greater than 0');
        }
        else if (prodQty.length > 10) {
            isValid = false;
            $thisForm.find('[perfect-tempTable-' + tableKey + '="QpdQuantity"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Quantity Should be Less than or equal to 10 ');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="QpdQuantity"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }


        if (unique.length > 0) {
            let prevData = [];
            $tblcontainer.find('table > tbody').find('tr').each(function () {
                if (isNew) {
                    prevData.push($(this).data('pData'));
                }
                else {
                    if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                        prevData.push($(this).data('pData'));
                    }

                }

            })

            unique.forEach(function (key, i) {
                let $thisEle = $thisForm.find('[perfect-tempTable-' + tableKey + '="' + key + '"]');
                let headerEleName = $thisForm.find('[name="lblProName"]').text();
                let atname = $thisEle.attr('name');
                let cvalue;


                if ($thisEle.length != 0) {
                    let $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
                    let errmessage = headerEleName + " Already exists"

                    if ($thisEle.is('select')) {
                        cvalue = $thisEle.val();

                    }
                    else if ($thisEle.is('input')) {

                        let inputEleType = $thisEle.attr('type').toLocaleLowerCase();

                        if (inputEleType == 'checkbox') { cvalue = $thisEle.is(':checked'); }
                        else if (inputEleType == 'hidden') { cvalue = $thisEle.val(); }
                        else { cvalue = $thisEle.val(); }
                    }
                    else {
                        cvalue = $thisEle.val();
                    }
                    
                    if (prevData.find(a => a[atname] == cvalue)) {
                        $errorElement.text(errmessage);
                        isValid = false;
                    }
                }
            });

        }
        if (isValid) {
            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                if ($this.is('select')) {
                    tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                    tableOptionsTemp.hideColumn.push(nameAttr)
                    if ($this.val() != null) {
                        let selectText = ($this.val().length == 0) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    else {
                        let selectText = ($this.val() == null) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    insertData[nameAttr] = $this.val();

                    $this.val('').selectpicker('refresh');
                }
                else if ($this.is('input')) {

                    let inputType = $this.attr('type').toLocaleLowerCase();

                    if (inputType == 'checkbox') {

                        insertData[nameAttr] = $this.is(':checked');

                        tableOptionsTemp.isCheckType.push(nameAttr)
                        //clear field
                        $this.prop('checked', false);

                    }
                    else if (inputType == 'hidden') {
                        insertData[nameAttr] = $this.val();
                        $this.val('');

                    }

                    else {
                        insertData[nameAttr] = $this.val();

                        $this.val('');
                    }
                }
                else {
                    insertData[nameAttr] = $this.val();

                    $this.val('');
                }
            });

            if (isNew) {
                if ($tblcontainer.find('table').length == 0) {
                    $tblcontainer.append(pft_table_createtable([insertData], tableOptionsTemp));
                }
                else {
                    let table = $tblcontainer.find('table').DataTable()
                    table.destroy()
                    pft_table_addTableRow($tblcontainer.find('table'), insertData, tableOptionsTemp);
                }
            }
            else {
                let table = $tblcontainer.find('table').DataTable()
                table.destroy()
                pft_table_replaceTableRow($tblcontainer.find('table'), updateCond, insertData, tableOptionsTemp);
            }

            $tblcontainer.attr('perfect-tempTable-action', 0);
        }
    }
    function fn_UpdateQuotationGen(element,actionType)
    {
        debugger
        let $thisForm = $(element).closest('[perfect-class="form"]');
        let today = new Date().toISOString().split('T')[0];
        document.getElementsByName("QuoExpireDate")[0].setAttribute('min', today);
        document.getElementsByName("QuoDate")[0].setAttribute('max', today);
        let termlenght = $thisForm.find('[name="QuoTerms"]').val().length;

        if (termlenght <= 500) {


            if ($thisForm.valid()) {
                let $errorMsg = '';
                let $blnSuccess = false;


                $(element).prop('disabled', true);
                let $thisForm = $(element).closest('[perfect-class="form"]');


                let quotationItems = [];

                $thisForm.find('[perfect-tempTable="Quotation"]').find('tbody').find('tr').each(function () {
                    quotationItems.push($(this).data('pData'));
                });


                const $QuotationDate = new Date(moment($thisForm.find('[name="QuoDate"]').val()).format('YYYY-MM-DD'));
                const $ExpiredDate = new Date(moment($thisForm.find('[name="QuoExpireDate"]').val()).format('YYYY-MM-DD'));
                if (quotationItems.length <= 0) {
                    $blnSuccess = false;
                    $errorMsg = 'Enter Atleast One Product';
                }
                else if ($ExpiredDate < $QuotationDate) {
                    $blnSuccess = false;
                    $errorMsg = 'Invalid Expired Date';
                }
                else {
                    $blnSuccess = true;
                }

                let _ID_QuotationGen = 0;
                let _ActionUrl = "";


                if (actionType === "new") {
                    _ID_QuotationGen = 0;
                    _ActionUrl = "@Url.Action("AddNewQuotationGeneration", "QuotationGeneration")";
                }
                else if (actionType === "update") {
                    _ID_QuotationGen = $thisForm.find('[name="ID_QuotationGen"]').val();
                    _ActionUrl = "@Url.Action("UpdateQuotationGeneration", "QuotationGeneration")";
                }

                let inputData = {
                    __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                    'ID_QuotationGen': _ID_QuotationGen,
                    'TransMode': QuotationGenrationTransMode,
                    'LastID': LastID_QuotationGenration,
                    'QuoDate': $thisForm.find('[name="QuoDate"]').val(),
                    'QuoExpireDate': $thisForm.find('[name="QuoExpireDate"]').val(),
                    'QuoTerms': $thisForm.find('[name="QuoTerms"]').val(),
                    'QuotationDetails': quotationItems,
                };
                clearSessionValue(LastIDSessionKeyQG);


                if ($blnSuccess) {
                    $.ajax({
                        url: _ActionUrl,
                        type: "POST",
                        data: inputData,
                        dataType: "json",
                        contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                        success: function (ajaxOutput) {
                            if (ajaxOutput.Process.IsProcess) {
                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                    NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                                });
                            }

                            else {
                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                });
                            }

                            $thisForm.find('[perfect-ctype="select"]').val('').selectpicker('refresh');
                            $thisForm.find('[perfect-ctype="input"]').val('');
                            $thisForm.find('[perfect-ctype="date"]').val('');
                            let onSuccess = $thisForm.attr('perfect-onFormSuccess')
                            if (onSuccess) {
                                window[onSuccess]();
                                fn_QuotationGenIndex_InitialLoad();
                            }
                        },
                        complete: function () {
                            $(element).prop('disabled', false);
                        }
                    });
                }
                else {
                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': $errorMsg });
                    $(element).prop('disabled', false);
                }
            }
        }
        else {
            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Terms and Conditions should be Less than or equal to 500 Characters' });
            $(element).prop('disabled', false);
        }

    }
    //to reset sales order window
    function fn_resetQuotation(ele) {
        fn_QuotationGenIndex_InitialLoad();     
    }


    function decimalpnt(ele, name, range) {

        let input = $('#' + name);
        ele.value = ele.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');
        let t = ele.value;
        ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t;
        input.on('keydown', function () {
            if (ele.value.includes('.')) {

            }
            var key = event.keyCode || event.charCode;
            if (key == 8 || key == 46) { }
            else {
                if (ele.value.length == 6) {
                    ele.value = ele.value + '.';
                }

            }

        });

    }
    function calcqty(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let qty = $thisForm.find('[name="QpdQuantity"]').val() == "" ? "0" : $thisForm.find('[name="QpdQuantity"]').val();
        let qtydefault = 0;
        debugger;
        if (qty != "" && qty!=".") {
            $thisForm.find('[name="QpdQuantity"]').val(parseFloat(qty).toFixed(3));
        }
        else if (qty == ".") {
            $thisForm.find('[name="QpdQuantity"]').val(parseFloat(qtydefault).toFixed(3));
        }
    }

    function removeSpaces(input) {
        // Remove spaces at the beginning and end
        input.value = input.value.replace(/^\s+/, '');
        input.value = input.value.replace(/[|*;?<>:!#^~_`$="'{}&]/g, '');
    }
</script>




