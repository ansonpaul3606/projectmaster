
@model PerfectWebERP.Models.QuotationModel.QuotationViewInit

<div class="card">
    <div class="card-header">
        <h4 class="card-title col-12">@ViewBag.PageTitle</h4>
        <span title="To View List" onclick="fn_showListView();"><svg id="Layer_1" class="layer" stroke="currentColor" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" height="20" width="20" viewBox="0 0 122.88 122.54"><title>To View List</title><path class="viewlst" d="M4.69,0H46.22a4.71,4.71,0,0,1,4.69,4.69V46a4.69,4.69,0,0,1-4.69,4.69H4.69a4.65,4.65,0,0,1-3.31-1.38l-.09-.09A4.67,4.67,0,0,1,0,46V4.69A4.71,4.71,0,0,1,4.69,0ZM89.44,61.94a26.56,26.56,0,0,1,10.18,2l.07,0a26.61,26.61,0,0,1,15.25,32.16,26.18,26.18,0,0,1-2.7,6.11l10.3,11.24a1.27,1.27,0,0,1-.07,1.8l-7.57,6.9a1.27,1.27,0,0,1-1.79-.07l-9.86-10.85a26.36,26.36,0,0,1-6.1,2.74,26.87,26.87,0,0,1-7.71,1.13,26.51,26.51,0,0,1-10.17-2l-.07,0A26.64,26.64,0,0,1,64.85,78.37l0-.07A26.6,26.6,0,0,1,89.44,61.94Zm15,11.59a21.38,21.38,0,0,0-6.89-4.61l-.06,0a21.22,21.22,0,0,0-23.07,4.64l-.07.07a21.25,21.25,0,0,0-4.54,6.83l0,.06a21.32,21.32,0,0,0-1.58,8.06,21.26,21.26,0,0,0,29.35,19.62,21.54,21.54,0,0,0,6.89-4.61l.07-.07a21.09,21.09,0,0,0,4.54-6.83l0-.06a21.35,21.35,0,0,0,0-16.17,21.34,21.34,0,0,0-4.62-6.9ZM4.69,63.2H46.22a4.71,4.71,0,0,1,4.69,4.7v41.34a4.68,4.68,0,0,1-4.69,4.69H4.69A4.69,4.69,0,0,1,0,109.24V67.9a4.71,4.71,0,0,1,4.69-4.7ZM68.78,0h41.53A4.71,4.71,0,0,1,115,4.69V46a4.71,4.71,0,0,1-4.69,4.69H68.78A4.71,4.71,0,0,1,64.09,46V4.69a4.69,4.69,0,0,1,1.37-3.31l.1-.09A4.67,4.67,0,0,1,68.78,0Z"></path></svg></span>
    </div>
    <div class="card-body">
        <form id="" class="form-valide" perfect-class="form" action="#" method="post" perfect-onFormSuccess="">
            <div>
                @Html.AntiForgeryToken()
                <div class="row">

                    <div class="col-sm-4" style="display:none">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Quotation No#</span>
                            </label>
                            <div class="col-sm-7">
                                <div class="input-group">
                                    <input type="hidden" name="Quotation_No" />
                                    <input type="text" class="form-control" name="QuotationNo" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly />
                                    <input type="hidden" name="LastID" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4" style="display:none">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Sl No</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="hidden" name="ID_Quotation" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                <input type="hidden" name="QuoMode" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" value="@Model.QuoMode" />
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Quotation No</span>
                                <span class="text-danger">*</span>
                            </label>

                            <div class="col-sm-7">
                                <div class="input-group">
                                    <input type="text" class="form-control perfectValidate_string" name="QuotationGen" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly />
                                    <input type="hidden" name="FK_QuotationGen" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                    <div class="input-group-append">
                                        <button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" onclick="fn_searchQuotationGen(this)" BindName="QuotationGen" BindVal="FK_QuotationGen" perfect-css="button"></button>
                                    </div>
                                </div>
                                <div class="text-danger temptableError"></div>
                            </div>
                        </div>
                    </div>


                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Import From</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-7">
                                <div class="input-group">
                                    <input type="hidden" name="SupplierID" />
                                    <select class="form-control perfectValidate_string" id="ddlImportsList" name="ddlImportsList" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" onchange="fn_showandHideNewCustomerButton(this)">
                                        <option value="">Please Select</option>
                                        <option value="0">Supplier</option>
                                    </select>

                                    <div class="input-group-append">
                                        <button id="btnShowList" data-toggle="tooltip" data-placement="top" data-html="true" title="Import from Customer,Lead and Supplier" class="btn btn-primary" type="button" perfect-css="button" onclick="fn_showQuotationImportList(this)"><i class="las la-file-import la-lg"></i></button>
                                        <button id="customerbtn" class="btn btn-primary fa fa-building-o" type="button" perfect-css="button" onclick="fn_openNewCustomerWindow(this)" style="display:none" title="Add Supplier"></button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Submitted Date</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-7">
                                <input type="date" class="form-control perfectValidate_date" name="QuotationDate" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" />
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Contact Name</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-7">
                                <div class="input-group">
                                    <input type="text" class="form-control perfectValidate_string" name="SupplierName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly />

                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Mobile No</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-7">
                                <div class="input-group">
                                    <input type="text" class="form-control perfectValidate_mobile" name="Mobile" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                                </div>
                            </div>
                        </div>
                    </div>


                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Reference No</span>
                            </label>
                            <div class="col-sm-7">
                                <div class="input-group">
                                    <input type="text" class="form-control" name="QuoReferenceNo" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" maxlength="25" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>



                <div class="md-2 modal fade" perfect-class="formGroupModalwarrantyimg" id="formGroupModalwarrantyimg">
                    <div class="modal-dialog modal-dialog-centered modal-md" role="document">
                        <div class="modal-content">
                            <div class="modal-header border-0">
                                <h5 class="modal-title">Product Images</h5>
                            </div>
                            <div class="modal-body" perfect-class="formGroup" style="max-height: calc(100vh - 200px); overflow-y: auto;padding: 1rem;">
                                <div class="row">

                                    <div class="col-sm-12" id="Image-img">

                                    </div>


                                </div>

                            </div>
                        </div>
                    </div>
                </div>

                <div class="modal fade" perfect-class="formGroupModalproduct" id="formGroupModalProduct" data-backdrop="static" data-keyboard="false">
                    <div class="modal-dialog modal-dialog-centered modal-md" role="document">
                        <div class="modal-content">
                            <div class="modal-header border-0">
                                <h5 class="modal-title">Product Details</h5>
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>
                            <div class="modal-body" perfect-class="formGroup" style="max-height: calc(100vh - 200px); overflow-y: auto;padding: 1rem;">
                                <div class="row">
                                    <div class="col-sm-12">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-5 col-form-label">
                                                <span perfect-class="formGroupLabel" name="lblProName">Product</span>
                                            </label>
                                            <div class="col-sm-7">
                                                <div class="input-group">
                                                    <input type="text" class="form-control " perfect-tempTable-Quotation="ProdName" name="ProdName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly />
                                                    <input type="hidden" name="FK_Product" perfect-tempTable-Quotation="FK_Product" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />

                                                </div>
                                                <div class="text-danger temptableError"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-12">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-5 col-form-label">Quantity&nbsp;<span class="text-danger">*</span></label>
                                            <div class="col-sm-7">
                                                <input type="text" class="form-control text-right" perfect-tempTable-Quotation="QpdQuantity" name="QpdQuantity" id="QpdQuantity" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" maxlength="13" oninput="decimalpnt(this,'QpdQuantity',3)" onchange="fn_calculateActualPrice(this)" />
                                                <div class="text-danger temptableError"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-12">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-5 col-form-label">
                                                <span perfect-class="formGroupLabel" name="lblMRP">MRP</span>
                                                <span class="text-danger">*</span>
                                            </label>
                                            <div class="col-sm-7">
                                                <input type="text" class="form-control text-right" perfect-tempTable-Quotation="QpdMRP" name="QpdMRP" id="QpdMRP" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" maxlength="12" oninput="decimalpnt(this,'QpdMRP',3)" />
                                                <div class="text-danger temptableError"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-sm-12">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-5 col-form-label">
                                                <span perfect-class="formGroupLabel">Rate</span>
                                                <span class="text-danger">*</span>
                                            </label>
                                            <div class="col-sm-7">
                                                <input type="text" class="form-control text-right" perfect-tempTable-Quotation="QpdRate" name="QpdRate" id="QpdRate" onchange="fn_calculateActualPrice(this);fn_calculateDiscPer(this)" perfect-class="formGroupControl" maxlength="12" oninput="decimalpnt(this,'QpdRate',3)" perfect-ctype="input" perfect-css="input" />
                                                <input type="hidden" class="form-control" perfect-tempTable-QuotationData="Sprice" name="Sprice" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                                                <div class="text-danger temptableError1"></div>
                                                <div class="text-danger temptableError2"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-sm-12">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-5 col-form-label">
                                                Discount Amount
                                            </label>
                                            <div class="col-sm-7">
                                                <input type="text" class="form-control text-right" perfect-tempTable-Quotation="QpdDiscount" name="QpdDiscount" id="QpdDiscount" perfect-class="formGroupControl" onchange="fn_calculateDiscPer(this)" maxlength="12" oninput="decimalpnt(this,'QpdDiscount',3)" perfect-ctype="input" perfect-css="input" />
                                                <input type="hidden" perfect-tempTable-Quotation="QpdTotalAmount" name="QpdTotalAmount" />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-12">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-5 col-form-label">
                                                Discount  %
                                            </label>
                                            <div class="col-sm-7">
                                                <input type="text" class="form-control text-right" perfect-tempTable-Quotation="QpdDiscountPercent" name="QpdDiscountPercent" id="QpdDiscountPercent" perfect-class="formGroupControl" onchange="fn_calculateDiscAmount(this)" maxlength="5" oninput="decimalpnt(this,'QpdDiscountPercent',1)" perfect-ctype="input" perfect-css="input" />
                                            </div>
                                        </div>
                                    </div>

                                </div>

                                <div class="row">
                                    <div class="col-sm-12">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-5 col-form-label">Warranty/AMC&nbsp;</label>
                                            <div class="col-sm-7">
                                                <div class="input-group">
                                                    <div class="input-group-append">
                                                        &nbsp;&nbsp; <button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-plus" type="button" perfect-css="button" title="Add Warranty Details" onclick="fn_getWarrantyLists(this)"></button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="card-footer text-right" perfect-class="formFooter">
                                    <button class="btn btn-primary light" type="button" data-toggle="tooltip" data-placement="top" data-html="true" title="Add" onclick="fn_createQuotationTable(this,'Quotation',['FK_Product'])">Submit</button>
                                    <button class="btn btn-light1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" data-dismiss="modal">Cancel</button>
                                </div>

                            </div>
                        </div>

                    </div>
                </div>

                <div class="modal fade" perfect-class="formGroupModalwarranty" id="formGroupModalwarranty" tabindex="-1">
                    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
                        <div class="modal-content">
                            <div class="modal-header border-0">
                                <h5 class="modal-title">Warranty Details</h5>
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close" data-target="formGroupModalwarranty">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>
                            <div class="modal-body" perfect-class="formGroup" style="max-height: calc(100vh - 200px); overflow-y: auto;padding: 1rem;">
                                <div class="row">
                                    <div class="col-sm-6">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-5 col-form-label">
                                                <span perfect-class="formGroupLabel">Sub Product</span>
                                                @*<span class="text-danger">*</span>*@
                                            </label>
                                            <div class="col-sm-7">
                                                <div class="input-group">
                                                    <input type="hidden" class="form-control" perfect-tempTable-Warranty="prodtid" name="prodtid" readonly />
                                                    <input type="text" class="form-control" perfect-tempTable-Warranty="subProName" name="subProName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly />
                                                    <input type="hidden" name="subProductID" perfect-tempTable-Warranty="subProductID" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                    <div class="input-group-append">
                                                        <button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchVal(this, 23, 'Sub Product Details',['FK_Product','Product'], [])" BindName="subProName" BindVal="subProductID" Criterea1="FK_Product"></button>
                                                    </div>
                                                    <div class="text-danger temptableError"></div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-5 col-form-label">
                                                <span perfect-class="formGroupLabel">Type</span>
                                                <span class="text-danger">*</span>
                                            </label>

                                            <div class="col-sm-7">
                                                <div class="input-group">
                                                    <select class="form-control" name="WarrantyType" perfect-tempTable-Warranty="WarrantyType" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select">
                                                        <option value="0">Please Select </option>
                                                        @if (!(Model.Warrantytype is null))
                                                        {
                                                            foreach (var Module in Model.Warrantytype)
                                                            {
                                                                <option value="@Module.WarrantyTypeID">@Module.WarrantyName</option>
                                                            }
                                                        }
                                                    </select>
                                                    <div class="text-danger temptableError"></div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                </div>
                                <div class="row" style="display:none">
                                    <div class="col-sm-6">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-5 col-form-label">
                                                <span perfect-class="formGroupLabel">Replace Warranty Date</span>
                                                <span class="text-danger">*</span>
                                            </label>
                                            <div class="col-sm-7">
                                                <div class="input-group">
                                                    <input type="date" class="form-control" perfect-tempTable-Warranty="Replcwardt" name="Replcwardt" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" />
                                                    <div class="text-danger temptableError"></div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-sm-6">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-5 col-form-label">
                                                <span perfect-class="formGroupLabel">Service Warranty Date</span>
                                                <span class="text-danger">*</span>
                                            </label>
                                            <div class="col-sm-7">
                                                <div class="input-group">
                                                    <input type="date" class="form-control" name="Serwardt" perfect-tempTable-Warranty="Serwardt" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" />
                                                    <div class="text-danger temptableError"></div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-6">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-5 col-form-label">
                                                <span perfect-class="formGroupLabel">Duration Type</span>
                                                <span class="text-danger">*</span>
                                            </label>
                                            <div class="col-sm-7">
                                                <div class="input-group">
                                                    <select class="form-control" name="WDDurationType" perfect-tempTable-Warranty="WDDurationType" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select">
                                                        <option value="0">Please Select </option>
                                                        <option value="1">Day </option>
                                                        <option value="2">Week </option>
                                                        <option value="3">Month</option>
                                                        <option value="4">Year</option>
                                                    </select>
                                                    <div class="text-danger temptableError"></div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-sm-6">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-5 col-form-label">
                                                <span perfect-class="formGroupLabel">Duration</span>
                                                <span class="text-danger">*</span>
                                            </label>
                                            <div class="col-sm-7">
                                                <div class="input-group">
                                                    <input type="text" class="form-control" name="WDDuration" perfect-tempTable-Warranty="WDDuration" perfect-class="formGroupControl" perfect-ctype="text" perfect-css="text" onkeypress='return isNumberKey(event,5)'/>
                                                    <div class="text-danger temptableError"></div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-12">
                                        <div class="text-right" perfect-class="formFooter">
                                            <button  class="btn btn-primary1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" title="Add" onclick="fn_createWarrantyTable(this,'Warranty',['WarrantyType'],wartableOptionsTempOut)">Add</button>
                                            <button id="btnproductclear"  class="btn btn-light1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" onclick="productclear(this, 'Warranty')">Clear</button>
                                        </div>
                                    </div>
                                </div>
                                <br />
                                <div class="row">
                                    <div class="col-sm-12">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <div class="table-responsive" perfect-tempTable="Warranty" id="Warrantydetailhd" perfect-tempTable-lastindex="0" perfect-tempTable-action="0"></div>
                                        </div>
                                    </div>
                                </div>
                                <div class="card-footer text-right" perfect-class="formFooter">
                                    <button class="btn btn-primary light" type="button" data-toggle="tooltip" data-placement="top" data-html="true" title="Add" onclick="fn_warrantydet(this)">Submit</button>
                                    <button class="btn btn-light1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" data-dismiss="modal">Cancel</button>
                                </div>

                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-12">
                        <div class="daccordion__header">
                            <span class="accordion__header--text">Product Details</span>
                        </div>
                        <div class="row">
                            <div class="col-sm-12 " perfect-class="TempTableProduct">

                                <div class="row">
                                    <div class="col-sm-12" style="padding-right:25px;padding-left:25px;">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <div class="table-responsive" perfect-tempTable="Quotation" id="QuotationItemHead" perfect-tempTable-lastindex="0" perfect-tempTable-action="0"></div>
                                        </div>

                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <hr style="margin-top: -16px;">
                <div class="row">
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Expired Date</span>
                            </label>
                            <div class="col-sm-7">
                                <input type="date" class="form-control" name="QuoExpireDate" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" />
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4"style="display:none">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Other Charges</span>

                            </label>
                            <div class="col-sm-7">
                                <div class="input-group">
                                    <input type="text" class="form-control text-right" name="OtherCharge" onchange="fn_roundoff(this)" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly />
                                    <div class="input-group-append">
                                        <button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-credit-card" type="button" perfect-css="button" onclick="fn_showOtherCharges(this)"></button>
                                        <div class="modal fade" perfect-class="formGroupModalOtherCharge" id="formGroupModalOtherCharge">
                                            <div class="modal-dialog modal-dialog-centered" role="document">
                                                <div class="modal-content  rounded-0">
                                                    <div class="modal-header border-0">
                                                        <h5 class="modal-title">Other Charge Details</h5>
                                                        <button type="button" class="close" data-dismiss="modal">
                                                            <span>&times;</span>
                                                        </button>

                                                    </div>
                                                    <div class="modal-body" perfect-class="formGroup" style="max-height: calc(100vh - 200px); overflow-y: auto;padding: 1rem;">
                                                        <table id="zero_configOthercharge" class="table mb-0  table-striped  text-black">
                                                            <thead class="bg-primary text-white">
                                                                <tr>
                                                                    <th class="t-head">SlNo</th>
                                                                    <th class="t-head" style="display:none">ID_OtherChargeType</th>
                                                                    <th class="t-head">Type</th>
                                                                    <th class="t-head">Trans Type</th>
                                                                    <th class="t-head">Amount</th>

                                                                </tr>
                                                            </thead>
                                                            <tbody id="formGroupModalOtherChargebody"></tbody>
                                                            <tfoot>
                                                            </tfoot>
                                                        </table>


                                                        <div class="modal-footer">
                                                            <button type="button" class="btn btn-primary1" data-dismiss="modal" onclick="fn_bindOtherChargesAmount(this)">Apply</button>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel"> Sub Total</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-7">
                                <input type="text" class="form-control perfectValidate_decimal text-right" name="QuotationBillTotal" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" onchange="fn_roundoff(this)" readonly />

                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel"> Discount</span>

                            </label>
                            <div class="col-sm-7">
                                <input type="text" class="form-control text-right" placeholder="" name="QuotationDiscount" id="QuotationDiscount" onchange="fn_roundoff(this)" perfect-class="formGroupControl" perfect-ctype="input" maxlength="12" oninput="decimalpnt(this,'QuotationDiscount',3)" perfect-css="input"   />
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Roundoff</span>
                            </label>
                            <div class="col-sm-7">
                                <input type="text" class="form-control text-right" placeholder="" readonly name="QuotationRoundoff" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel"> Net Amount</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-7">
                                <input type="text" class="form-control text-right perfectValidate_decimal" placeholder="" readonly name="QuotationNetAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-12">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-2 col-form-label" style="max-width: 14%">
                                <span perfect-class="formGroupLabel">Remarks</span>
                            </label>
                            <div class="col-sm-10">
                                <textarea cols="2" class="form-control" name="QuoRemarks" id="QuoRemarks" maxlength="200" oninput="filterSpecialCharacters(this)"></textarea>
                            </div>
                        </div>
                    </div>

                </div>
                <div class="card-footer text-right" perfect-class="formFooter">
                    @if (ViewBag.PagedAccessRights.UsrrlMsEdt)
                    {
                        <button id="" type="button" class="btn btn-primary mr-3 addcompany-jq-addnewuserUpdate d-none" name="update" perfect-css="button" onclick="fn_UpdateQuotation(this,'update')"><i class="fa fa-refresh fa-spin loaderClass"></i>Update</button>
                    }
                    @if (ViewBag.PagedAccessRights.UsrrlMsAdd)
                    {
                        <button id="addcompany-jq-addnewuser" type="button" class="btn btn-primary mr-3 " name="add" perfect-css="button" onclick="fn_UpdateQuotation(this,'new')"><i class="fa fa-refresh fa-spin loaderClass "></i>Save</button>
                    }

                    <button type="button" class="btn btn-light" perfect-css="button" onclick="fn_resetQuotation(this)" name="reset">Clear</button>

                </div>
            </div>
        </form>
        <div class="md-2 modal fade" perfect-class="formGroupModalcustmrformGroupModalsupplier" id="formGroupModalsupplier">
            <div class="modal-dialog modal-dialog-centered modal-xl" role="document">
                <div class="modal-content">
                    <div class="modal-header border-0">
                        <h5 class="modal-title">Add Supplier</h5>
                        <button type="button" class="close" data-dismiss="modal">
                            <span>&times;</span>
                        </button>
                    </div>
                    <div class="modal-body" perfect-class="formGroup" style="max-height: calc(100vh - 200px); overflow-y: auto;padding: 1rem;">
                        <div class="row">

                            <div class="col-sm-12" id="supplier-sav">

                            </div>


                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<script>

 //on load functions
 $(document).ready(function ()
 {

	initFunctions('form');
    });

    function fn_getProductName(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        $thisForm.find('[name="ProdName"]').val('');
        $thisForm.find('[name="QpdMRP"]').val(0);
        let sel = $thisForm.find('[name=FK_Category] option:selected').text();
        let name = $thisForm.find('[name="FK_Category"]').children(":selected").attr('Project')
        if (name == 'False' && sel != 'Please select') {
            $thisForm.find('[name="ProdBtn"]').show();
        }
        else {
            $thisForm.find('[name="ProdBtn"]').hide();
            $thisForm.find('[name="ID_Product"]').val(0);

        }
        if (name == 'False' && sel != 'Please select') {
            $thisForm.find('[name="lblProName"]').text('Product');
            $thisForm.find('[name="lblMRP"]').text('MRP');
            $thisForm.find('[name="QpdMRP"]').attr('readonly', true);
        }
        else {
            $thisForm.find('[name="lblProName"]').text('Model');
            $thisForm.find('[name="lblMRP"]').text('Cost');
            $thisForm.find('[name="QpdMRP"]').attr('readonly', false);
        }
    }


    //to load Imports List
    function fn_showQuotationImportList(element) {

        let $thisForm = $(element).closest('[perfect-class="form"]');
        switch (parseInt($thisForm.find('[name="ddlImportsList"]').val())) {
            case 0:
                GetCmnPopUpSearchValAssign(element, 20, 'Supplier List', [], ['SupplierID', 'SupplierName', 'Mobile','CustomeName'], QuotationInwardTransMode);
                break;
            default:
                NotificationMessage({ 'type': 'info', 'heading': 'info', 'message': 'Please Select Import From' });
                break;
        }
    }

    //to show and hide new customer button
    function fn_showandHideNewCustomerButton(element) {
        debugger
        let $thisForm = $(element).closest('[perfect-class="form"]');
        $thisForm.find('[name="SupplierName"]').val("")
        $thisForm.find('[name="Mobile"]').val("")
        if ($thisForm.find('[name="ddlImportsList"]').val() == 0) {
            $thisForm.find('[id="customerbtn"]').css("display", "block");
        }
        else {
            $thisForm.find('[id="customerbtn"]').css("display", "none");
        }
        if ($thisForm.find('[name="ddlImportsList"]').val() == 3) {
            $thisForm.find('[id="btnShowList"]').css("display", "none");
            $thisForm.find('[id="QuoAddressSection"]').css("display", "block");
            $thisForm.find('[name="CustomeName"]').prop('readonly', false)
        }
        else {
            $thisForm.find('[id="btnShowList"]').css("display", "block");
            $thisForm.find('[id="QuoAddressSection"]').css("display", "none");
            $thisForm.find('[name="CustomeName"]').prop('readonly', true)
        }
    }

    function fn_qsupplierForm_loadState_success(ele) {

        $('#formGroupModalsupplier').modal('hide');

    }
    //to New Cutomer popup
    function fn_openNewCustomerWindow(element) {
        $('#formGroupModalsupplier').modal('show');
        let $savimgContainer = $('#supplier-sav');

        $savimgContainer.load('@Url.Action("LoadSupplierForm", "Supplier")', function () {
           let $thisForm = $(this).find('[perfect-class="form"]');
           // ... Custom validation message
           $thisForm.validate({ messages: sdvalidationMessage });
           // ... Custom validation message
           $thisForm.attr('perfect-onFormSuccess', 'fn_qsupplierForm_loadState_success');
        
           initFunctions($thisForm);
        
        });
    }
    var sdvalidationMessage = {


        'Name': {
            'required': 'Please Enter Name',
            'maxlength': jQuery.validator.format('Name should be less than {0} characters'),
            // 'specialCharName': 'All Special Character Are not Allowed'


        },
        'Address': {
            'required': 'Please enter Address ',
            'maxlength': jQuery.validator.format('Address 1 should be less than {0} characters'),
            //   'specialCharName': 'All Special Character Are not Allowed'
        },


        'CountryID': {
            'required': 'Please select a Country',
            'digits': 'Invalid Country selected'
        },


        'StatesID': {
            'required': 'Please select a State',
            'digits': 'Invalid State selected'
        },

        'DistrictID': {
            'required': 'Please select a District',
            'digits': 'Invalid District selected'
        },

        'AreaID': {
            'required': 'Please select a Area',
            'digits': 'Invalid Area selected'
        },
        'PlaceID': {
            'required': 'Please select a Place',
            'digits': 'Invalid Place selected'
        },
        'PostID': {
            'required': 'Please select a Post',
            'digits': 'Invalid Post selected'
        },
        'Mobile': {
            'required': 'Please enter  mobile',
            'anyphonenumber': 'Invalid mobile number',
            'minlength': jQuery.validator.format(' Mobile should be more than {0} characters'),
            'maxlength': jQuery.validator.format(' Mobile should be less than {0} characters')
        },
        'Phone': {
            'anyphonenumber': 'Invalid  number',
            'minlength': jQuery.validator.format(' Phone should be more than {0} characters'),
            'maxlength': jQuery.validator.format(' Phone should be less than {0} characters')
        },


        'ModeID': {
            'required': 'Please select a Mode',
            'digits': 'Invalid Mode selected'
        },
        

        'ContactPerson': {
            'required': 'Please enter Contact Person name',
            'maxlength': jQuery.validator.format('Contact Person name should be less than {0} characters'),
            //'specialCharName': 'All Special Character Are not Allowed'
        },

        'Email': {

            'emailRegex': 'Please Enter Valid Email'
        },

    }
    //to open warranty window
    function fn_openWarrantyWindow(ele) {
        $('#modalWarrantyWindow').modal('show');
    }


    //to show tax window
    function fn_showTaxWindow(element, mod) {
        let $thisForm = $(element).closest('[perfect-class="form"]');
        let taxinfo = [];
        if ($thisForm.data('pDataTax')) {
            if ($thisForm.data('pDataTax').length > 0) {
                taxinfo = $thisForm.data('pDataTax');
            }
            else {
                taxinfo.push($thisForm.data('pDataTax'));
            }

            let sum = 0;
            var CheckListHTML = '';
            $.each(taxinfo, function (i, value) {

                sum = sum + parseFloat(value.TaxAmount);
                CheckListHTML += "<tr>";
                CheckListHTML += "<td>" + value.SlNo + "</td>";
                CheckListHTML += "<td Class='jq_ProductID_td' Style='Display:none'>" + value.ProductID + "</td>";
                CheckListHTML += "<td class='jq_taxType_td' Style='Display:none'>" + value.FK_TaxType + "</td>";
                CheckListHTML += "<td class='jq_taxTypeName_td'>" + value.TaxtyName + "</td>";
                CheckListHTML += "<td class='jq_taxPer_td text-center'>" + value.TaxPercentage + "</td>";
                CheckListHTML += "<td class='jq_taxamount_td text-right' >  " + value.Amount + "</td>";
                CheckListHTML += "</tr>";
            })

            $("#formGroupModalTaxbody").html(CheckListHTML)

            if (mod == 1) {
                $('#formGroupModalTax').modal('show');
            }
            else {
                $('#formGroupModalTax').modal('hide');
            }

            fn_bindTaxAmount(element)
        }
        else {
            fn_bindTaxDetails("1", 'formGroupModalTax', element, mod)
        }
    }

    //to bind Tax amount
    function fn_bindTaxAmount(element) {
        let $thisForm = $(element).closest('[perfect-class="form"]');
        let sum = 0;

        $('#formGroupModalTaxbody tr').each(function (index, element) {
            sum = sum + parseFloat($(element).find('.jq_taxamount_td').text());
        });

        $thisForm.find('[name=SodSalTaxAmount]').val(sum.toFixed(2));
    }


   
    function decimalpnt(ele, id, range) {
        debugger
        let input = $('#' + id);

        ele.value = ele.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');
        let t = ele.value;
        ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t;

        $(document).on('keydown', '#' + id, function (event) {

            if (ele.value.includes('.')) {

            }
            else if (ele.value === '.' && (event.key === '.' || event.keyCode === 190)) {
                ele.value = '0.00'; // Change the value to '0.00' if only a dot is entered
                // Prevent the dot from being entered in the input field
            }
            var key = event.keyCode || event.charCode;
            if (key == 8 || key == 46) { }
            else {
                if (ele.value.indexOf('.') < 0 && ele.value.indexOf('.') !== 9 && ele.value.length > 8) {
                    ele.value = ele.value + '.';
                }
            }

        });

    }


    //to bind tax details
    function fn_bindTaxDetails(Mode, ModalID, element, mod)
    {
        let $thisForm = $(element).closest('[perfect-class="form"]');

        var InputData =
        {
            FK_Product: $thisForm.find('[name=FK_Product]').val(),
            Includetax: 0,

            Quantity: $thisForm.find('[name=SodSalQuantity]').val(),
            Amount: $thisForm.find('[name=SodSalPrice]').val(),
        }
        $.ajax({
            url: "@Url.Action("GetTaxAmountNew", "Quotation")",
            type: "Get",
            data: InputData,
            dataType: "json",
            contentType: "application/json",
            success: function (ajaxOutput) {
                     if (ajaxOutput.Process.IsProcess) {
                         var CheckListHTML = '';
                         let sum = 0;

                         if (ajaxOutput.Data.length > 0) {
                             $.each(ajaxOutput.Data, function (i, value) {
                                 sum = sum + parseFloat(value.TaxAmount);
                                 CheckListHTML += "<tr>";
                                 CheckListHTML += "<td>" + value.SlNo + "</td>";
                                 CheckListHTML += "<td Class='jq_ProductID_td' Style='Display:none'>" + value.ProductID + "</td>";
                                 CheckListHTML += "<td class='jq_taxType_td' Style='Display:none'>" + value.FK_TaxType + "</td>";
                                 CheckListHTML += "<td class='jq_taxTypeName_td'>" + value.TaxTyName + "</td>";
                                 CheckListHTML += "<td class='jq_taxPer_td text-center'>" + value.TaxPercentage + "</td>";
                                 CheckListHTML += "<td class='jq_taxamount_td text-right' >  "+ value.Amount + "</td>";
                                 CheckListHTML += "</tr>";
                             })
                         }
                         else {
                             CheckListHTML += "<div class='form-group col-md-6'>";
                             CheckListHTML += "<div class='form-check mb-2'>";
                             CheckListHTML += "<input type='checkbox' class='form-check-input' >"
                             CheckListHTML += "<label class='form-check-label' for='check1'>No Records...</label>";
                             CheckListHTML += "</div></div>"
                         }

                         $("#formGroupModalTaxbody").html(CheckListHTML)
                         if (mod == 1) {
                             $('#formGroupModalTax').modal('show');
                         }
                         else {
                             $('#formGroupModalTax').modal('hide');
                         }

                         fn_bindTaxAmount(element)
                     }
                     else {
                         $.each(ajaxOutput.Process.Message, function (key, value) {
                             NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                         });
                     }
                },
                complete: function () {
                    $(element).prop('disabled', false);
                }
            });
    }

    //to show other charges window

     function fn_showOtherCharges(element) {
        let $thisForm = $(element).closest('[perfect-class="form"]');
        let $dropDownList = [];
        var InputData =
        {
            Mode: $thisForm.find('[name="QuoMode"]').val(),
        }

        $.ajax({
            url: "@Url.Action("GetOtherCharges", "Quotation")",
            type: "Get",
            data: InputData,
            dataType: "json",
            contentType: "application/json",
            success: function (ajaxOutput)            {


                if (ajaxOutput.OtherCharges.Process.IsProcess) {

                    var CheckListHTML = '';
                    let sum = 0;
                    let $tempArr = $thisForm.data('pOthrChgData');
                    if (ajaxOutput.OtherCharges.Data.length > 0) {

                        $.each(ajaxOutput.OtherCharges.Data, function (i, value) {

                            let options = ''
                            if ($tempArr.length > 0) {
                                $.each($tempArr, function (key, valueTemp) {
                                    if (valueTemp.ID_OtherChargeType == value.ID_OtherChargeType) {
                                        value.OctyAmount = valueTemp.OctyAmount;
                                        $.each(ajaxOutput.Transtypelist.Data, function (i, valuea) {
                                            if (parseInt(valuea.TransTypeID) == parseInt(valueTemp.OctyTransType)) {
                                                // options += '<option value=' + valuea.TransTypeID + ' selected="selected">' + valuea.TransType + '</option>'
                                                let optionValue = '<option value=' + valuea.TransTypeID + ' selected="selected">' + valuea.TransType + '</option>';
                                                if (!$dropDownList.includes(optionValue)) {
                                                    $dropDownList.push(optionValue)
                                                }
                                            }
                                            else {
                                                // options += '<option value=' + valuea.TransTypeID + '>' + valuea.TransType + '</option>'
                                                let optionValue = '<option value=' + valuea.TransTypeID + '>' + valuea.TransType + '</option>';
                                                if (!$dropDownList.includes(optionValue)) {
                                                    $dropDownList.push(optionValue)
                                                }

                                            }
                                        });
                                    }
                                });
                            }
                            else {
                                $.each(ajaxOutput.Transtypelist.Data, function (i, valuea) {
                                    //options += '<option value=' + valuea.TransTypeID + '>' + valuea.TransType + '</option>'
                                    let optionValue = '<option value=' + valuea.TransTypeID + '>' + valuea.TransType + '</option>';
                                    if (!$dropDownList.includes(optionValue)) {
                                        $dropDownList.push(optionValue)
                                    }
                                });
                            }
                            $.each($dropDownList, function (i, value) {
                                options += value;
                            });

                            $dropDownList = [];
                            let $dropdown = '<select class="form-control" >' + options + '</select>';
                            sum = sum + parseFloat(value.OctyAmount);
                            CheckListHTML += "<tr>";
                            CheckListHTML += "<td>" + value.SlNo + "</td>";
                            CheckListHTML += "<td Class='jq_ID_OtherChargeType_td' Style='Display:none'>" + value.ID_OtherChargeType + "</td>";
                            CheckListHTML += "<td Class='jq_Type_td'>" + value.OctyName + "</td>";
                            CheckListHTML += "<td class='jq_TransType_td'>" + $dropdown + "</td>";
                            CheckListHTML += "<td class='jq_OtherChagAmnt_td' ><input  class='form-control text-right' type='number'  value='" + value.OctyAmount + "' ' /></td> /></td>";
                            CheckListHTML += "</tr>";


                        });
                    }
                    else {
                        CheckListHTML += "<div class='form-group col-md-6'>";
                        CheckListHTML += "<div class='form-check mb-2'>";
                        CheckListHTML += "<label class='form-check-label' for='check1'>No Records...</label>";
                        CheckListHTML += "</div></div>"
                    }
                    $("#formGroupModalOtherChargebody").html(CheckListHTML)
                    $('#formGroupModalOtherCharge').modal('show');
                }
                else {
                    $.each(ajaxOutput.OtherCharges.Process.Message, function (key, value) {
                        NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                    });
                }
            },
            complete: function ()
            {
                $(element).prop('disabled', false);
                $('select').selectpicker('refresh');
            }
        });
    }
     function fn_showOtherCharges1(element) {
        let $thisForm = $(element).closest('[perfect-class="form"]');
        let Othrinfo = [];
         if ($thisForm.data('pOthrChgData')) {

            if ($thisForm.data('pOthrChgData').length > 0) {

                Othrinfo = $thisForm.data('pOthrChgData');
            }
            else {
                Othrinfo.push($thisForm.data('pOthrChgData'));
            }

            let sum = 0;

            var CheckListHTML = '';
            $.each(Othrinfo, function (i, value) {
                sum = sum + parseFloat(value.OctyAmount);
                let options = ''
                options += '<option value=' + value.TransTypeID + '>' + value.TransType + '</option>'
                let $dropdown = '<select class="form-control" >' + options + '</select>';
                CheckListHTML += "<tr>";
                CheckListHTML += "<td>" + value.SlNo + "</td>";
                CheckListHTML += "<td Class='jq_ID_OtherChargeType_td' Style='Display:none'>" + value.ID_OtherChargeType + "</td>";
                CheckListHTML += "<td Class='jq_Type_td'>" + value.OctyName + "</td>";
                CheckListHTML += "<td class='jq_TransType_td'>" + $dropdown + "</td>";
                CheckListHTML += "<td class='jq_OtherChagAmnt_td' ><input class='form-control text-right' type='number'  value='" + value.OctyAmount + "'' /></td>";

                CheckListHTML += "</tr>";
            })

            $("#OtherChargebody").html(CheckListHTML)
            $('#formGroupModalOtherCharge').modal('show');
        }
        else {
            fn_bindOtherChargesDetails("1", 'formGroupModalOtherCharge', element)
        }
    }

    //to bind other charges details
    function fn_bindOtherChargesDetails(Mode, ModalID, element) {
        let $thisForm = $(element).closest('[perfect-class="form"]');
        var InputData =
        {
            TransMode: QuotationInwardTransMode,
        }

        $.ajax({
            url: "@Url.Action("GetOtherCharges", "Quotation")",
            type: "Get",
            data: InputData,
            dataType: "json",
            contentType: "application/json",
            success: function (ajaxOutput)            {
                if (ajaxOutput.OtherCharges.Process.IsProcess) {
                         var CheckListHTML = '';
                         let sum = 0;
                         if (ajaxOutput.OtherCharges.Data.length > 0) {
                             let options =''
                             $.each(ajaxOutput.Transtypelist.Data, function (i, value) {
                                 options += '<option value=' + value.TransTypeID + '>' + value.TransType+'</option>'
                             });
                             $.each(ajaxOutput.OtherCharges.Data, function (i, value) {
                                 let $dropdown = '<select class="form-control" >' + options + '</select>';
                                 sum = sum + parseFloat(value.OctyAmount);
                                 CheckListHTML += "<tr>";
                                 CheckListHTML += "<td>" + value.SlNo + "</td>";
                                 CheckListHTML += "<td Class='jq_ID_OtherChargeType_td' Style='Display:none'>" + value.ID_OtherChargeType + "</td>";
                                 CheckListHTML += "<td Class='jq_Type_td'>" + value.OctyName + "</td>";
                                 CheckListHTML += "<td class='jq_TransType_td'>" + $dropdown + "</td>";
                                 CheckListHTML += "<td class='jq_OtherChagAmnt_td' ><input  class='form-control text-right' type='number'  value='" + value.OctyAmount + "' ' /></td> /></td>";
                                 CheckListHTML += "</tr>";
                             })
                         }
                         else
                         {
                             CheckListHTML += "<div class='form-group col-md-6'>";
                             CheckListHTML += "<div class='form-check mb-2'>";
                             CheckListHTML += "<label class='form-check-label' for='check1'>No Records...</label>";
                             CheckListHTML += "</div></div>"
                         }
                         $("#formGroupModalOtherChargebody").html(CheckListHTML)
                         $('#formGroupModalOtherCharge').modal('show');
                     }
                else
                {
                    $.each(ajaxOutput.OtherCharges.Process.Message, function (key, value) {
                             NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                    });
                }
            },
            complete: function ()
            {
                $(element).prop('disabled', false);
                $('select').selectpicker('refresh');
            }
        });
    }


    //to bind other charges amount into textbox
    function fn_bindOtherChargesAmount(element) {
        let $modal = $(element).closest('.modal');
        let $thisForm = $(element).closest('[perfect-class="form"]');
        let sum = 0;
        othrchargelst = [];
        $modal.find('table tbody').find('tr').each(function () {
            let value = parseFloat($(this).find('.jq_OtherChagAmnt_td').find('input').val())
            if ($(this).find('.jq_OtherChagAmnt_td').find('input').val() == '' || $(this).find('.jq_OtherChagAmnt_td').find('input').val() == null) {
                value = 0;
            }
            if (parseInt($(this).find('.jq_TransType_td').find('select').val()) == 0) {
                value = value * 0;
            }
            else if (parseInt($(this).find('.jq_TransType_td').find('select').val()) == 1) {
                value = value * -1;
            }
            else {
                value = value * 1;
            }
            sum = parseFloat(sum) + value;
            let OtChargeinfo = {};
            OtChargeinfo['ID_OtherChargeType'] = $(this).find('.jq_ID_OtherChargeType_td').text();
            OtChargeinfo['OctyTransType'] = $(this).find('.jq_TransType_td').find('select').val();
            OtChargeinfo['OctyName'] = $(this).find('.jq_Type_td').text();
            OtChargeinfo['OctyAmount'] = parseFloat($(this).find('.jq_OtherChagAmnt_td').find('input').val());
            othrchargelst.push(OtChargeinfo);
        });
        debugger
        $thisForm.data({ pOthrChgData: othrchargelst });
        $thisForm.find('[name=OtherCharge]').val(sum);
        fn_roundoff(element);

        let tempArr = $thisForm.data('pOthrChgData')
        if (parseInt(tempArr.length) > 0) {
            tempArr.map(val => {
                let OtChargeinfo = {};
                OtChargeinfo['ID_OtherChargeType'] = val.ID_OtherChargeType;
                OtChargeinfo['OctyTransType'] = val.OctyTransType;
                OtChargeinfo['OctyName'] = val.OctyName;
                OtChargeinfo['OctyAmount'] = val.OctyAmount;
                othrchargelst.push(OtChargeinfo);
            });
            $thisForm.data({ pOthrChgData: othrchargelst });
        }
    }


    var tableOptionsTempOut = {
        iconButton: {
            buttons: [

                {
                    icon: "fa fa-pencil btnPerfectGridEdit",
                    action: function () {

                        let savedData = $(this).closest('tr').data('pData')

                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let tableKey = $tablecontainer.attr('perfect-tempTable');
                        let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                        let indexname = tableKey + 'index';
                        let rindex = $(this).closest('tr').attr(indexname);
                        $tablecontainer.attr('perfect-tempTable-action', rindex);

                        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                            let $thisNode = $(this);
                            let pf_name = $thisNode.attr('name');

                            if ($thisNode.is('select')) {
                                $thisNode.val(savedData[pf_name]).selectpicker('refresh');
                            }
                            else if ($thisNode.is('input')) {
                                let inputType = $thisNode.attr('type').toLocaleLowerCase();
                                if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                    $thisNode.prop('checked', savedData[pf_name]);
                                }
                                else {
                                    $thisNode.val(savedData[pf_name]);
                                }
                            }
                            else {
                                $thisNode.val(savedData[pf_name]);
                            }
                        });

                        $('#formGroupModalProduct').modal('show');
                    }
                },
                {
                    icon: "fa fa-trash btnPerfectGridDelete",
                    action: function () {
                        let $thistbl = $(this).closest('table');
                        let table = $thistbl.DataTable();
                        table.destroy();
                        if ($(this).closest('tbody').find('tr').length > 1) {
                            $(this).closest('tr').remove();
                            pft_table_slreset($thistbl);
                        }
                        else {
                            $thistbl.remove();
                          
                        }
                        ("#btnproductclear").click();
                    }
                },

            ]
        },

        rowAttribute: [],
        renameHeader: { "ProdName": "Product", "QpdQuantity": "Qty", "QpdRate": "Rate", "QpdMRP": "MRP", "Sprice": "Qty*Rate", "QpdDiscount": "Disc Amount", "QpdDiscountPercent": "Disc %", "FK_Category": "Category","QpdTotalAmount":"Total"},
        hideColumn: ['ID_QuotationProductDetails', 'FK_Quotation', 'FK_Product','QpdDiscountPercent'],
        serialNo: true,

    };

    //to create Quotation items details table
    function fn_createQuotationTable(element, tkey, uniq = [])
    {
        debugger
        let $thisForm = $(element).closest('[perfect-class="form"]');
        fn_calculateDiscAmount()
        fn_calculateDiscPer()
        let tableKey = tkey;
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');

        let insertData = {};
        let tableOptionsTemp = tableOptionsTempOut;

        let unique = (uniq) ? uniq : [];

        let isValid = true;
        let errorClass = '.temptableError';
        let errorClass1 = '.temptableError1';
        let errorClass2 = '.temptableError2';


        let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
        let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
        let indexname = tkey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);
        let updateCond = '';
        let isNew = true;

        if (thisactionIndex > 0) {
            insertData[indexname] = thisactionIndex;
            updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
            isNew = false;
        }
        else {
            insertData[indexname] = lastIndex + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
            isNew = true;
        }


        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="ProdName"]').val().length == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="ProdName"]').val().length == null) {
            isValid = false;

            $thisForm.find('[perfect-tempTable-' + tableKey + '="ProdName"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please select the product');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="ProdName"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }

        let prodQty = (isNaN($thisForm.find('[perfect-tempTable-' + tableKey + '="QpdQuantity"]').val()) ? 0 : $thisForm.find('[perfect-tempTable-' + tableKey + '="QpdQuantity"]').val())

        if (parseFloat(prodQty) <= 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="QpdQuantity"]').val().length == 0) {
            isValid = false;
            $thisForm.find('[perfect-tempTable-' + tableKey + '="QpdQuantity"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please enter at least one quantity');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="QpdQuantity"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }
        let prodMRPS = (isNaN($thisForm.find('[perfect-tempTable-' + tableKey + '="QpdMRP"]').val()) ? 0 : $thisForm.find('[perfect-tempTable-' + tableKey + '="QpdMRP"]').val())

        if (parseFloat(prodMRPS) <= 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="QpdMRP"]').val().length == 0) {
            isValid = false;
            $thisForm.find('[perfect-tempTable-' + tableKey + '="QpdMRP"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please enter MRP');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="QpdMRP"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }


        let prodPrice = (isNaN($thisForm.find('[perfect-tempTable-' + tableKey + '="QpdRate"]').val()) ? 0 : $thisForm.find('[perfect-tempTable-' + tableKey + '="QpdRate"]').val())
        let prodMRP = (isNaN($thisForm.find('[perfect-tempTable-' + tableKey + '="QpdMRP"]').val()) ? 0 : $thisForm.find('[perfect-tempTable-' + tableKey + '="QpdMRP"]').val())

        if (parseFloat(prodPrice) <= 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="QpdRate"]').val().length == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="QpdRate"]').val() == '') {
            isValid = false;
            $thisForm.find('[perfect-tempTable-' + tableKey + '="QpdRate"]').closest('[perfect-class="formGroup"]').find(errorClass2).text('Please enter rate');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="QpdRate"]').closest('[perfect-class="formGroup"]').find(errorClass2).text('');
        }
        if (parseFloat(prodMRP) < parseFloat(prodPrice)) {
            isValid = false;
            $thisForm.find('[perfect-tempTable-' + tableKey + '="QpdRate"]').closest('[perfect-class="formGroup"]').find(errorClass1).text('Rate Should be less than or equal to MRP');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="QpdRate"]').closest('[perfect-class="formGroup"]').find(errorClass1).text('');
        }

        if (unique.length > 0) {
            let prevData = [];
            $tblcontainer.find('table > tbody').find('tr').each(function () {
                if (isNew) {
                    prevData.push($(this).data('pData'));
                }
                else {
                    if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                        prevData.push($(this).data('pData'));
                    }

                }

            })

            unique.forEach(function (key, i) {
                let $thisEle = $thisForm.find('[perfect-tempTable-' + tableKey + '="' + key + '"]');
                let headerEleName = $thisForm.find('[name="lblProName"]').text();
                let atname = $thisEle.attr('name');
                let cvalue;


                if ($thisEle.length != 0) {
                    let $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
                    let errmessage = headerEleName + " Already exits"

                    if ($thisEle.is('select')) {
                        cvalue = $thisEle.val();

                    }
                    else if ($thisEle.is('input')) {

                        let inputEleType = $thisEle.attr('type').toLocaleLowerCase();

                        if (inputEleType == 'checkbox') { cvalue = $thisEle.is(':checked'); }
                        else if (inputEleType == 'hidden') { cvalue = $thisEle.val(); }
                        else { cvalue = $thisEle.val(); }
                    }
                    else {
                        cvalue = $thisEle.val();
                    }

                    if (prevData.find(a => a[atname] == cvalue)) {
                        $errorElement.text(errmessage);
                        isValid = false;
                    }
                }
            });

        }
        if (isValid) {
            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                if ($this.is('select')) {
                    tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                    tableOptionsTemp.hideColumn.push(nameAttr)
                    if ($this.val() != null) {
                        let selectText = ($this.val().length == 0) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    else {
                        let selectText = ($this.val() == null) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    insertData[nameAttr] = $this.val();

                    $this.val('').selectpicker('refresh');
                }
                else if ($this.is('input')) {

                    let inputType = $this.attr('type').toLocaleLowerCase();

                        if (inputType == 'checkbox') {

                            insertData[nameAttr] = $this.is(':checked');

                            tableOptionsTemp.isCheckType.push(nameAttr)
                            //clear field
                            $this.prop('checked', false);

                        }
                        else if (inputType == 'hidden') {
                            insertData[nameAttr] = $this.val();
                            $this.val('');

                        }

                    else {
                        insertData[nameAttr] = $this.val();

                        $this.val('');
                    }
                }
                else {
                    insertData[nameAttr] = $this.val();

                    $this.val('');
                }
            });

            if (isNew) {
                if ($tblcontainer.find('table').length == 0) {
                    $tblcontainer.append(pft_table_createtable([insertData], tableOptionsTemp));
                }
                else {
                    let table = $tblcontainer.find('table').DataTable()
                    table.destroy()
                    pft_table_addTableRow($tblcontainer.find('table'), insertData, tableOptionsTemp);
                }
            }
            else {
                let table = $tblcontainer.find('table').DataTable()
                table.destroy()
                pft_table_replaceTableRow($tblcontainer.find('table'), updateCond, insertData, tableOptionsTemp);
            }

            $tblcontainer.attr('perfect-tempTable-action', 0);
            $('#formGroupModalProduct').modal('toggle');

        }
        
        fn_bindBillDetails(element)
        fn_roundoff(element);
    }
    function fn_bindBillDetails(element) {
        let $thisForm = $(element).closest('[perfect-class="form"]');
        let sprice = 0;
        let sdisc = 0;
        let billttl = 0;

        $('#QuotationItemHead').find('tbody tr').each(function (index, element) {

            sprice = sprice + parseFloat(parseFloat($(element).find('.QpdQuantity').text()) * parseFloat($(element).find('.QpdRate').text()));
            //sdisc = sdisc + parseFloat($(element).find('.QpdDiscount').text());
        });
        //billttl = sprice - sdisc;
        billttl = sprice ;
        $thisForm.find('[name=QuotationBillTotal]').val(billttl.toFixed(2));
    }

   

    function fn_calculateActualPrice(element) {
        debugger
        let $thisForm = $(element).closest('[perfect-class="form"]');
        let Spric = parseFloat($thisForm.find('[name="QpdRate"]').val()) == "" ? "0" : parseFloat($thisForm.find('[name="QpdRate"]').val());
        let qtys = parseFloat($thisForm.find('[name="QpdQuantity"]').val()) == "" ? "0" : parseFloat($thisForm.find('[name="QpdQuantity"]').val());
        parseFloat($thisForm.find('[name=Sprice]').val(parseFloat(Spric) * parseFloat(qtys)));
        fn_calculateDiscAmount(element)
        fn_totalAmountItem(element);
        //fn_showTaxWindow(element, 0)
    }
 

    //function fn_calculateDiscAmount(element)
    //{
    //    debugger
    //    let $thisForm = $(element).closest('[perfect-class="form"]');
    //    let SMrp = $thisForm.find('[name="QpdMRP"]').val() == "" ? "0" : $thisForm.find('[name="QpdMRP"]').val();
    //    let disamt = $thisForm.find('[name="QpdDiscount"]').val() == "" ? "0" : $thisForm.find('[name="QpdDiscount"]').val();
    //    let Sprice = $thisForm.find('[name="QpdRate"]').val() == "" ? "0" : $thisForm.find('[name="QpdRate"]').val();
    //    let qty = $thisForm.find('[name="QpdQuantity"]').val() == "" ? "0" : $thisForm.find('[name="QpdQuantity"]').val();
    //    let disp = $thisForm.find('[name="QpdDiscountPercent"]').val() == "" ? "0" : $thisForm.find('[name="QpdDiscountPercent"]').val();
    //   // let discam = (parseFloat(disamt)) / (parseFloat(SMrp)) * 100;



      
    //    let discam = (parseFloat(disamt)) / (parseFloat(SMrp)) * 100;
    //    if (isNaN(discam)) {
    //        discam = 0;
    //    }


    //    //$thisForm.find('[name=QpdDiscountPercent]').val(discam);
    //    $thisForm.find('[name=QpdDiscountPercent]').val(Math.round(discam * 100) / 100);
    //    fn_totalAmountItem(element);
    //}



    function fn_calculateDiscAmount(element) {
        let $thisForm = $(element).closest('[perfect-class="form"]');
        let SMrp = parseFloat($thisForm.find('[name="QpdMRP"]').val()) || 0;
        let disamt = parseFloat($thisForm.find('[name="QpdDiscount"]').val()) || 0;

        // Check if the denominator (SMrp) is zero
        let discam;
        if (SMrp === 0) {
            discam = 0;
        } else {
            discam = (disamt / SMrp) * 100;
        }

        // Check if the result is NaN (e.g., when disamt is not a number)
        if (isNaN(discam)) {
            discam = 0;
        }

        // Round discam to 2 decimal places
        $thisForm.find('[name="QpdDiscountPercent"]').val(Math.round(discam * 100) / 100);

        fn_totalAmountItem(element);
    }







    function fn_calculateDiscPer(ele) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let SMrp = $thisForm.find('[name="QpdMRP"]').val() == "" ? "0" : $thisForm.find('[name="QpdMRP"]').val();
        let Sprice = $thisForm.find('[name="QpdRate"]').val() == "" ? "0" : $thisForm.find('[name="QpdRate"]').val();
        let qty = $thisForm.find('[name="QpdQuantity"]').val() == "" ? "0" : $thisForm.find('[name="QpdQuantity"]').val();
        let disamt = $thisForm.find('[name="QpdDiscount"]').val() == "" ? "0" : $thisForm.find('[name="QpdDiscount"]').val();
        let Disamount = parseFloat(SMrp) - parseFloat(Sprice);
        //let discper = (parseFloat(disamt) * 100) / (parseFloat(Sprice) * parseFloat(qty));

        //$thisForm.find('[name=QpdDiscountPercent]').val(Disamount);
        //$thisForm.find('[name=QpdDiscount]').val(Disamount);
        $thisForm.find('[name=QpdDiscount]').val(Math.round(Disamount * 100) / 100);

        fn_calculateDiscAmount(ele);
        fn_totalAmountItem(ele);
    }
    function fn_totalAmountItem(element) {
        let $thisForm = $(element).closest('[perfect-class="form"]');
        let Sprice = parseFloat($thisForm.find('[name="QpdRate"]').val() == "" ? "0" : $thisForm.find('[name="QpdRate"]').val());
        let qty = parseFloat($thisForm.find('[name="QpdQuantity"]').val() == "" ? "0" : $thisForm.find('[name="QpdQuantity"]').val());
        let disamt = parseFloat($thisForm.find('[name="QpdDiscount"]').val() == "" ? "0" : $thisForm.find('[name="QpdDiscount"]').val());

        let qtyPrice = Sprice * qty;
        let totamount = qtyPrice;
        $thisForm.find('[name="QpdTotalAmount"]').val(totamount.toFixed(2));
    }
    function fn_roundoff(element) {
        debugger
        let $thisForm = $(element).closest('[perfect-class="form"]');
        let biltl = 0;
        let otherchg = 0;
        let saldisc = 0;
        let salroundof = 0;
        let result = 0;
        biltl = parseFloat($thisForm.find('[name="QuotationBillTotal"]').val() == "" ? "0" : $thisForm.find('[name="QuotationBillTotal"]').val());
        otherchg = parseFloat($thisForm.find('[name="OtherCharge"]').val() == "" ? "0" : $thisForm.find('[name="OtherCharge"]').val());
        saldisc = parseFloat($thisForm.find('[name="QuotationDiscount"]').val() == "" ? "0" : $thisForm.find('[name="QuotationDiscount"]').val());
        result = biltl + otherchg - saldisc;        
        salroundof = Math.round(result) - (result);
        $thisForm.find('[name=QuotationRoundoff]').val(salroundof.toFixed(2));
        $thisForm.find('[name=QuotationNetAmount]').val(Math.round(result).toFixed(2));
    }




    //to save data
    function fn_UpdateQuotation(element,actionType)
    {
        let $blnItem = true;
        let $thisForm = $(element).closest('[perfect-class="form"]');
        let quotationItems = [];
        $thisForm.find('[perfect-tempTable="Quotation"]').find('tbody').find('tr').each(function () {
            if (parseFloat($(this).data('pData').QpdRate) <= 0)
            {
                $blnItem = false;
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Missing or Invalid Products Rate' });
                return false;
            }
            if ( parseFloat($(this).data('pData').QpdQuantity) <= 0) {
                $blnItem = false;
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Missing or Invalid Products Quantity' });
                return false;
            }
            quotationItems.push($(this).data('pData'));
        })

        if ($thisForm.valid() && $blnItem)
        {
            let $errorMsg = '';
            let $blnSuccess = false;

                    $(element).prop('disabled', true);
                    let $thisForm = $(element).closest('[perfect-class="form"]');

                    let $modal2 = $thisForm.find('#zero_configOthercharge');
                    let OtherCharge = [];

                    if ($modal2.find('tbody').find('tr').length > 0) {
                        $modal2.find('tbody').find('tr').each(function () {
                            let OtChargeinfo = {};
                            OtChargeinfo['ID_OtherChargeType'] = $(this).find('.jq_ID_OtherChargeType_td').text();
                            OtChargeinfo['OctyTransType'] = $(this).find('.jq_TransType_td').find('select').val();
                            OtChargeinfo['OctyName'] = $(this).find('.jq_Type_td').text();
                            OtChargeinfo['OctyAmount'] = $(this).find('.jq_OtherChagAmnt_td').find('input').val();
                            OtherCharge.push(OtChargeinfo);
                        });
                    }
                    else {
                        let tempArr = $thisForm.data('pOthrChgData')
                        if (tempArr.length > 0) {
                            tempArr.map(val => {
                                let OtChargeinfo = {};
                                OtChargeinfo['ID_OtherChargeType'] = val.ID_OtherChargeType;
                                OtChargeinfo['OctyTransType'] = val.OctyTransType;
                                OtChargeinfo['OctyName'] = val.OctyName;
                                OtChargeinfo['OctyAmount'] = val.OctyAmount;
                                OtherCharge.push(OtChargeinfo);
                            });

                        }
                    }

            warrantydetailsTemp = [];
            warrantydetailsTemp = warrantydetails;
            let $tempArray = warrantydetailsTemp;
            if ($tempArray.length > 0) {
                warrantydetails = [];
                $.each($tempArray, function (i, value) {
                    let winfo = {};

                    let rdate = "";
                    let sdate = "";
                    if (value.Replcwardt.includes('/Date(')) {
                        rdate = new Date(parseInt(value.Replcwardt.replace('/Date(', '')));
                        rdate = formatDate(rdate);
                    }
                    else {
                        rdate = value.Replcwardt;
                    }
                    if (value.Serwardt.includes('/Date(')) {
                        sdate = new Date(parseInt(value.Serwardt.replace('/Date(', '')));
                        sdate = formatDate(sdate);
                    }
                    else {
                        sdate = value.Serwardt;
                    }



                    winfo['Replcwardt'] = rdate;
                    winfo['Serwardt'] = sdate;
                    winfo['SlNo'] = value.SlNo;
                    winfo['WarrantyType'] = value.WarrantyType;
                    winfo['WarrantyType_d'] = value.WarrantyType_d;
                    winfo['Warrantyindex'] = value.Warrantyindex;
                    winfo['prodtid'] = value.prodtid;
                    winfo['subProName'] = value.subProName;
                    winfo['subProductID'] = value.subProductID;
                    winfo['WDDurationType'] = value.WDDurationType;
                    winfo['WDDuration'] = value.WDDuration;
                    warrantydetails.push(winfo);

                });
            }

            const $QuotationDate = new Date(moment($thisForm.find('[name="QuotationDate"]').val()).format('YYYY-MM-DD'));
            const $ExpiredDate = new Date(moment($thisForm.find('[name="QuoExpireDate"]').val()).format('YYYY-MM-DD'));
            if (quotationItems.length <= 0) {
                $blnSuccess = false;
                $errorMsg = 'Enter Atleast One Product';
            }
            else if ($ExpiredDate < $QuotationDate) {
                $blnSuccess = false;
                $errorMsg = 'Invalid Expired Date';
            }
            else {
                $blnSuccess = true;
            }


                    let _ID_Quotation = 0;
                    let _ActionUrl = "";

                    if (actionType === "new") {
                        _ID_Quotation = 0;
                        _ActionUrl = "@Url.Action("AddNewQuotation", "Quotation")";
                    }
                    else if (actionType === "update") {
                        _ID_Quotation = $thisForm.find('[name="ID_Quotation"]').val();
                        _ActionUrl = "@Url.Action("UpdateQuotation", "Quotation")";
                    }

                    let inputData = {
                        __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                        'ID_Quotation': _ID_Quotation,
                        'QuoMode': $thisForm.find('[name="QuoMode"]').val(),
                        'TransMode': QuotationInwardTransMode,
                        'LastID': LastID_QuotationInward,
                        'QuoFrom': $thisForm.find('[name="ddlImportsList"]').val(),
                        'FK_Master': ($thisForm.find('[name="ddlImportsList"]').val() == 0 ? $thisForm.find('[name="SupplierID"]').val() : 0),
                        'QuoDate': $thisForm.find('[name="QuotationDate"]').val(),
                        'FK_QuotationGen': $thisForm.find('[name="FK_QuotationGen"]').val(),
                        'QuoReferenceNo': $thisForm.find('[name="QuoReferenceNo"]').val(),
                        'QuoExpireDate': $thisForm.find('[name="QuoExpireDate"]').val(),
                        'QuoBillTotal': $thisForm.find('[name="QuotationBillTotal"]').val(),
                        'QuoDiscount': $thisForm.find('[name="QuotationDiscount"]').val(),
                        'QuoOthercharges': $thisForm.find('[name="OtherCharge"]').val(),
                        'QuoRoundoff': $thisForm.find('[name="QuotationRoundoff"]').val(),
                        'QuoNetAmount': $thisForm.find('[name="QuotationNetAmount"]').val(),
                        'QuotationDetail': quotationItems,
                        'OtherChgDetails': OtherCharge,
                        'CustomerName': $thisForm.find('[name="SupplierName"]').val(),
                        'CustomerPhone': $thisForm.find('[name="Mobile"]').val(),
                        'WarrantyDetails': warrantydetails,
                        'QuoRemarks': $thisForm.find('[name="QuoRemarks"]').val()
            };
            clearSessionValue(LastIDSessionKeyQI);

            if ($blnSuccess)
                            {
                               $.ajax({
                                         url: _ActionUrl,
                                         type: "POST",
                                         data: inputData,
                                         dataType: "json",
                                         contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                                         success: function (ajaxOutput) {
                                             if (ajaxOutput.Process.IsProcess) {
                                                 $.each(ajaxOutput.Process.Message, function (key, value) {
                                                     NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                                                 });
                                             }
                                             else {
                                                 $.each(ajaxOutput.Process.Message, function (key, value) {
                                                     NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                                 });
                                             }

                                             $thisForm.find('[perfect-ctype="select"]').val('').selectpicker('refresh');
                                             $thisForm.find('[perfect-ctype="input"]').val('');
                                             $thisForm.find('[perfect-ctype="date"]').val('');
                                             let onSuccess = $thisForm.attr('perfect-onFormSuccess')
                                             if (onSuccess) {
                                                 window[onSuccess]();
                                                 fn_QuotationIndex_InitialLoad();
                                             }
                                         },
                                         complete: function ()
                                         {
                                                $(element).prop('disabled', false);
                                         }
                                    });
                            }
                            else
                            {

                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': $errorMsg });
                $(element).prop('disabled', false);
                            }
                     }
    }
    //to reset Quotation order window
    function fn_resetQuotation(ele) {
        fn_loadQuotationForm();
    }
    // to reset Item details
    function fn_resetQuotationItem(ele) {
        let $thisItem = $(ele).closest('[perfect-class="TempTableProduct"]');
        $thisItem.find('[perfect-ctype="input"]').val('');
    }


    function fn_getWarrantyLists(ele) {
        warrantydetails = [];
         warrantydetails = warrantydetailsTemp;
                let $thisForm = $(ele).closest('[perfect-class="form"]');
                if ($thisForm.find('[name="FK_Product"]').val() == '' || $thisForm.find('[name="FK_Product"]').val() == null) {
                    NotificationMessage({ 'message': 'Please Select Product' });
                }
                else {
                    let prdid = $thisForm.find('[name="FK_Product"]').val();
                    $thisForm.find('[name="prodtid"]').val(prdid);
                    var warobject = [];

                    warobject = warrantydetails.filter(obj => obj.prodtid === prdid);
                    $('#formGroupModalwarranty').modal({ backdrop: 'static', keyboard: false })

                    $('#formGroupModalwarranty').modal('show');


                    if (warobject.length > 0) {

                        let tableOptionsTemp = wartableOptionsTempOut;
                        let insertData = [];
                        let tableKey = 'Warranty';
                        let indexname = 'Warranty' + 'index';
                        tableOptionsTemp.rowAttribute.push(indexname);
                        tableOptionsTemp.hideColumn.push(indexname);
                        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');
                        $.each(warobject, function (keyOne, valOne) {
                            let pData = {};
                            pData[indexname] = keyOne + 1;
                            $tblcontainer.attr('perfect-tempTable-lastindex', pData[indexname])
                            //---

                            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                                let $this = $(this);
                                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                                let nameAttr = $this.attr('name');

                                if (typeof valOne[nameAttr] !== undefined) {

                                    if ($this.is('select')) {
                                        switch (headerName) {
                                            case "WarrantyType":
                                                headerName = "Warranty Type";
                                                break;
                                            case "WDDurationType":
                                                headerName = "Duration Type";
                                                break;
                                            default:
                                                headerName = headerName;
                                                break;
                                        }
                                        tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                                        tableOptionsTemp.hideColumn.push(nameAttr);
                                        //displat text of select
                                        pData[nameAttr + '_d'] = $this.find('[value="' + valOne[nameAttr] + '"]').text();
                                        pData[nameAttr] = valOne[nameAttr];
                                    }
                                    else if ($this.is('input')) {
                                        pData[nameAttr] = valOne[nameAttr];
                                    }
                                }
                            });

                            insertData.push(pData);


                        });
                        $tblcontainer.empty();
                        $tblcontainer.append(pft_table_createtable(insertData, tableOptionsTemp));

                    } else {
                        $thisForm.find('[perfect-tempTable= "Warranty"]').empty();
                    }
                }

            }
     function fn_warrantydet(ele)
            {
                let $thisForm = $(ele).closest('[perfect-class="form"]');
         let prdid = $thisForm.find('[name="FK_Product"]').val();
                var uwarobject = [];
                uwarobject = warrantydetails.filter(obj => obj.prodtid === prdid);
                const indexOfObject = warrantydetails.findIndex(object => {
                    return object.prodtid === prdid;
                });

                warrantydetails.splice(indexOfObject, uwarobject.length);

         $thisForm.find('[perfect-tempTable="Warranty"]').find('tbody').find('tr').each(function () {

                    warrantydetails.push($(this).data('pData'));

                })

                $('#formGroupModalwarranty').modal('hide');
            }

     var wartableOptionsTempOut = {
                iconButton: {
                    buttons: [
                        {
                            icon: "fa fa-pencil btnPerfectGridEdit",
                            action: function () {
                                let savedData = $(this).closest('tr').data('pData')

                                let $tablecontainer = $(this).closest('[perfect-tempTable]');
                                let tableKey = $tablecontainer.attr('perfect-tempTable');
                                let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                                //index attribute name in table row
                                let indexname = tableKey + 'index';

                                //index number in table row
                                let rindex = $(this).closest('tr').attr(indexname);

                                $tablecontainer.attr('perfect-tempTable-action', rindex);


                                //filling data in available inputs
                                $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                                    let $thisNode = $(this);
                                    let pf_name = $thisNode.attr('name');
                                    if ($thisNode.is('select')) {

                                        $thisNode.val(savedData[pf_name]).selectpicker('refresh');

                                    }
                                    else if ($thisNode.is('input')) {
                                            let inputType = $thisNode.attr('type').toLocaleLowerCase();
                                            if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {


                                                $thisNode.prop('checked', savedData[pf_name]);
                                            }
                                            else if ($thisNode.attr('type').toLocaleLowerCase() == 'date') {

                                                $thisNode.val(moment(savedData[pf_name]).format('YYYY-MM-DD'));
                                            }
                                            else {

                                                $thisNode.val(savedData[pf_name]);
                                            }

                                    }
                                    else {

                                        $thisNode.val(savedData[pf_name]);
                                    }


                                });



                            }
                        },
                        {
                            icon: "fa fa-trash btnPerfectGridDelete",
                            action: function () {
                                let $thistbl = $(this).closest('table');
                                let table = $thistbl.DataTable();
                                table.destroy();
                                if ($(this).closest('tbody').find('tr').length > 1) {
                                    $(this).closest('tr').remove();
                                    pft_table_slreset($thistbl);

                                }
                                else {
                                    $thistbl.remove();
                                }
                               // ("#btnproductclear").click();
                                $thisForm = $('[perfect-class="form"]');
                                $thisForm.find('[perfect-tempTable-Warranty]').closest('[perfect-ctype="input"]').val('');
                                $thisForm.find('[perfect-tempTable-Warranty]').closest('[perfect-ctype="select"]').val('').selectpicker('refresh');
                                $thisForm.find('[perfect-tempTable-Warranty]').closest('[perfect-ctype="text"]').val('');
                                $thisForm.find('[perfect-tempTable-Warranty]').closest('[perfect-ctype="date"]').val('');
                                $thisForm.find('[perfect-tempTable-Warranty]').closest('[perfect-ctype="hidden"]').val('');
                            }
                        },
                    ]
                },
                rowAttribute: [],
         renameHeader: { "subProName": "Sub Product", "WarrantyType": "Type", "WDDurationType": "Duration Type", "WDDuration": "Duration"},
         hideColumn: ['subProductID', 'prodtid', 'Replcwardt','Serwardt'],
                serialNo: true,
         isDateType: ["Replcwardt", "Serwardt"]

    };
    function parseJsonDate(jsonDateString) {
        return new Date(parseInt(jsonDateString.replace('/Date(', '')));
    }
    function validwartdetail(ele, tableKey, errorClass, isValid) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        //if ($thisForm.find('[perfect-tempTable-' + tableKey + '="subProName"]').val().length == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="subProName"]').val().length == null) {

        //    isValid = false;
        //    $thisForm.find('[perfect-tempTable-' + tableKey + '="subProName"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Sub Product');
        //}
        //else {
        //    $thisForm.find('[perfect-tempTable-' + tableKey + '="subProName"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        //}
        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="WarrantyType"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="WarrantyType"]').val() == null) {

            isValid = false;
            $thisForm.find('[perfect-tempTable-' + tableKey + '="WarrantyType"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Warranty Type');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="WarrantyType"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }
        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="WDDurationType"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="WDDurationType"]').val() == null) {

            isValid = false;
            $thisForm.find('[perfect-tempTable-' + tableKey + '="WDDurationType"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Duration Type');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="WDDurationType"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }
        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="WDDuration"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="WDDuration"]').val() == null) {

            isValid = false;
            $thisForm.find('[perfect-tempTable-' + tableKey + '="WDDuration"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter Duration');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="WDDuration"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }


        return isValid;

    }

    function fn_createWarrantyTable(ele, tkey, uniq = [], tableOptionsTempOut) {


        let $thisForm = $(ele).closest('[perfect-class="form"]');

        let tableKey = tkey;
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');

        let insertData = {};
        let tableOptionsTemp = tableOptionsTempOut;
        let unique = (uniq) ? uniq : [];

        let isValid = true;
        let errorClass = '.temptableError';

        //make index
        let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
        let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
        let indexname = tkey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);
        let updateCond = '';
        let isNew = true;

        if (thisactionIndex > 0) {
            //means update
            insertData[indexname] = thisactionIndex;
            updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
            isNew = false;
        }
        else {
            //insert
            insertData[indexname] = lastIndex + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
            isNew = true;
        }
        //
        if (tableKey == 'Warranty') {

            isValid = validwartdetail(ele, tableKey, errorClass, isValid);
        }


        if (unique.length > 0) {
            //getting previous data
            let prevData = [];
            $tblcontainer.find('table > tbody').find('tr').each(function () {
                if (isNew) {
                    prevData.push($(this).data('pData'));
                }
                else {
                    if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                        prevData.push($(this).data('pData'));
                    }

                }

            })

            unique.forEach(function (key, i) {

                let $thisEle = $thisForm.find('[perfect-tempTable-' + tableKey + '="' + key + '"]');

                let atname = $thisEle.attr('name');
                let cvalue;

                if ($thisEle.length != 0) {
                    let $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
                    let errmessage = key + " Already exits"

                    //getting current value in cval
                    if ($thisEle.is('select')) {
                        cvalue = $thisEle.val();

                    }
                    else if ($thisEle.is('input')) {

                        let inputEleType = $thisEle.attr('type').toLocaleLowerCase();

                        if (inputEleType == 'checkbox') { cvalue = $thisEle.is(':checked'); }
                        else if (inputEleType == 'hidden') { cvalue = $thisEle.val(); }
                        else { cvalue = $thisEle.val(); }
                    }
                    else { cvalue = $thisEle.val(); }

                    //searching in previous data
                    if (prevData.find(a => a[atname] == cvalue)) {

                        $errorElement.text(errmessage);
                        isValid = false;
                    }
                }
            });

        }



        if (isValid) {
            // this section make table column data
            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');

                if ($this.is('select')) {
                    switch (headerName) {
                        case "WarrantyType":
                            headerName = "Warranty Type";
                            break;
                        case "WDDurationType":
                            headerName = "Duration Type";
                            break;
                        default:
                            headerName = headerName;
                            break;
                    }

                   tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                    tableOptionsTemp.hideColumn.push(nameAttr)
                    //displat text of select
                    if ($this.val() != null) {
                        let selectText = ($this.val().length == 0) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    else {
                        let selectText = ($this.val() == null) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }

                    insertData[nameAttr] = $this.val();

                    $this.val('').selectpicker('refresh');


                }
                else if ($this.is('input')) {

                    insertData[nameAttr] = $this.val();

                    if (nameAttr == "prodtid") { }
                    else {
                        $this.val('');
                    }
                }

            });
            if (isNew) {
                //this section nake table.table row
                if ($tblcontainer.find('table').length == 0) {
                    $tblcontainer.append(pft_table_createtable([insertData], tableOptionsTemp));

                }
                else {

                    let table = $tblcontainer.find('table').DataTable()
                    table.destroy()
                    pft_table_addTableRow($tblcontainer.find('table'), insertData, tableOptionsTemp);


                }

            }
            else {

                let table = $tblcontainer.find('table').DataTable()
                table.destroy()

                pft_table_replaceTableRow($tblcontainer.find('table'), updateCond, insertData, tableOptionsTemp);

            }


            // resetting the edit value
            $tblcontainer.attr('perfect-tempTable-action', 0);
        }

        if (tableKey == 'Warranty') {


        }
        else if (tableKey == 'Payment') {
            BillAmountbind(ele);
        }
        else if (tableKey == 'Purchase') {
            BindBilldetails(ele);

        }

    }
    function productclear(ele, tableKey) {

        $thisForm = $(ele).closest('[perfect-class="form"]');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="input"]').val('');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="select"]').val('').selectpicker('refresh');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="text"]').val('');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="date"]').val('');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="hidden"]').val('');

        let lastIndex = 0;
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');
        if ($tblcontainer.find("tbody tr").length > 0) {
            lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;

        } $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex);

    }



    function fn_searchQuotationGen(ele) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
           $.ajax({
                    url: '@Url.Action("GetQuotationGenSearch", "Quotation")?TransMode='+ QuotationInwardTransMode,
                    type: "Get",
                    dataType: "json",
                    contentType: "application/json",
                    success: function (successData) {
                        if (successData.Process.IsProcess) {
                            if (successData.Data.length> 0) {
                                var sss = createSelectList({
                                    data: successData.Data,
                                    hideColumn: ['ID_QuotationGen','QuoTerms'],
                                    headingText: 'Quotation Details',
                                    renameHeader: { "SlNo": "Sl No", "QuoNO": "Quotation No", "QuoDate": "Quotation Date", "QuoExpireDate": "Expired Date", "QuoTerms":"Terms and Conditions" },
                                });

                                sss.then(function (ret) {
                                    if (ret) {
                                        $thisForm.find('[name=FK_QuotationGen]').val(ret.ID_QuotationGen);
                                        $thisForm.find('[name=QuotationGen]').focus().val(ret.QuoNO);

                                        $thisForm.find('[name=OtherCharge]').val(0);
                                        $thisForm.find('[name=QuotationBillTotal]').val(0);
                                        $thisForm.find('[name=QuotationDiscount]').val(0);
                                        $thisForm.find('[name=QuotationRoundoff]').val(0);
                                        $thisForm.find('[name=QuotationNetAmount]').val(0);
                                        $thisForm.data({ pOthrChgData: [] })

                                        fn_setQuotatationGenDtls(ret.ID_QuotationGen, ele);
                                    }
                                });
                            }
                        }
                        else {
                            $.each(successData.Process.Message, function (key, value) {
                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': "Quotation Generation not found" });
                            });
                        }

                    },
                    complete: function () {
                    }
            });
    }

    function fn_setQuotatationGenDtls(id, ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let inputData =
        {
            __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
            ID_Quotation: id
        };
          $.ajax({
                url: '@Url.Action("GetQuotationGenInfo", "Quotation")',
                        type: "POST",
                        data: inputData,
                        dataType: "json",
                        contentType: 'application/x-www-form-urlencoded;charset=utf-8',
                        success: function (ajaxOutput)
                        {
                            if (ajaxOutput.quoItem.Process.IsProcess)
                            {
                                $thisForm.find('[perfect-tempTable="Quotation"]').empty();
                                $thisForm.data({ pData: ajaxOutput.quoItem.Data[0] });
                                fn_fillQuotationItem($thisForm, 'Quotation', ajaxOutput.quoItem.Data, tableOptionsQuotationItem)
                                $thisForm.find('[perfect-tempTable="Quotation"]').find('table').dataTable({ searching: false, paging: false, ordering: false, info: false });
                               }
                            else {
                                $.each(ajaxOutput.Process.Message, function (key, value)
                                {
                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                });
                            }
                        },

          });
    }

    function isNumberKey(evt, maxLength) {
        const charCode = evt.which || event.keyCode;
        const inputValue = evt.target.value;

        return inputValue.length < maxLength && (charCode >= 48 && charCode <= 57) && charCode !== 46;
    }
    function filterSpecialCharacters(textarea) {
        // Get the current value of the textarea
        var currentValue = textarea.value;

        // Define the special character to block (e.g., '|')
        var blockedCharacter = '|';

        // Check if the blocked character is present in the current value
        if (currentValue.indexOf(blockedCharacter) !== -1) {
            // If found, remove the blocked character
            textarea.value = currentValue.replace(blockedCharacter, '');
        }
    }
</script>



