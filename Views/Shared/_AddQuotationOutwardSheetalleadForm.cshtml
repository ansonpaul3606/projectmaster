



@model PerfectWebERP.Models.QuotationModel.QuotationViewInit


<div class="card">
    <div class="card-header">
        <h4 class="card-title col-12">@ViewBag.PageTitle</h4>
    
        <span title="To View List" onclick="fn_showListView();"><svg id="Layer_1" class="layer" stroke="currentColor" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" height="20" width="20" viewBox="0 0 122.88 122.54"><title>To View List</title><path class="viewlst" d="M4.69,0H46.22a4.71,4.71,0,0,1,4.69,4.69V46a4.69,4.69,0,0,1-4.69,4.69H4.69a4.65,4.65,0,0,1-3.31-1.38l-.09-.09A4.67,4.67,0,0,1,0,46V4.69A4.71,4.71,0,0,1,4.69,0ZM89.44,61.94a26.56,26.56,0,0,1,10.18,2l.07,0a26.61,26.61,0,0,1,15.25,32.16,26.18,26.18,0,0,1-2.7,6.11l10.3,11.24a1.27,1.27,0,0,1-.07,1.8l-7.57,6.9a1.27,1.27,0,0,1-1.79-.07l-9.86-10.85a26.36,26.36,0,0,1-6.1,2.74,26.87,26.87,0,0,1-7.71,1.13,26.51,26.51,0,0,1-10.17-2l-.07,0A26.64,26.64,0,0,1,64.85,78.37l0-.07A26.6,26.6,0,0,1,89.44,61.94Zm15,11.59a21.38,21.38,0,0,0-6.89-4.61l-.06,0a21.22,21.22,0,0,0-23.07,4.64l-.07.07a21.25,21.25,0,0,0-4.54,6.83l0,.06a21.32,21.32,0,0,0-1.58,8.06,21.26,21.26,0,0,0,29.35,19.62,21.54,21.54,0,0,0,6.89-4.61l.07-.07a21.09,21.09,0,0,0,4.54-6.83l0-.06a21.35,21.35,0,0,0,0-16.17,21.34,21.34,0,0,0-4.62-6.9ZM4.69,63.2H46.22a4.71,4.71,0,0,1,4.69,4.7v41.34a4.68,4.68,0,0,1-4.69,4.69H4.69A4.69,4.69,0,0,1,0,109.24V67.9a4.71,4.71,0,0,1,4.69-4.7ZM68.78,0h41.53A4.71,4.71,0,0,1,115,4.69V46a4.71,4.71,0,0,1-4.69,4.69H68.78A4.71,4.71,0,0,1,64.09,46V4.69a4.69,4.69,0,0,1,1.37-3.31l.1-.09A4.67,4.67,0,0,1,68.78,0Z"></path></svg></span>
    </div>
    <div class="card-body">
        <form id="" class="form-valide" perfect-class="form" action="#" method="post" perfect-onFormSuccess="">
            <div>
                @Html.AntiForgeryToken()
                <div class="row">

                    <div class="col-sm-4" style="display:none">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Quotation No#</span>
                            </label>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <input type="hidden" name="Quotation_No" />
                                    <input type="text" class="form-control" name="QuotationNo" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly />
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4" style="display:none">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Sl No</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="hidden" name="ID_Quotation" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                <input type="hidden" name="QuoMode" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" value="@Model.QuoMode" />
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Quotation Date</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="date" class="form-control perfectValidate_date" name="QuotationDate" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" />
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Expired Date</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="date" class="form-control" name="QuoExpireDate" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" />
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Import From</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8" id="divimplortdatalist">
                                <div class="input-group">
                                    <input type="hidden" name="ID_Customer" />
                                    <input type="hidden" name="ID_LeadGenerate" />
                                    <input type="hidden" name="FK_Lead" perfect-ctype="hidden" />
                                    <input type="hidden" name="FK_Customer" perfect-ctype="hidden" />
                                    <input type="hidden" name="FK_CustomerOthers" perfect-ctype="hidden" />
                                    <select class="form-control perfectValidate_string" id="ddlImportsList" name="ddlImportsList" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" onchange="fn_showandHideNewCustomerButton(this)">
                                        <option value="">Please Select</option>
                                        <option value="1">Customer</option>
                                        <option value="2">Lead</option>
                                        <option value="3">Other</option>
                                    </select>

                                    <div class="input-group-append">
                                        <button id="btnShowList" data-toggle="tooltip" data-placement="top" data-html="true" title="Import from Customer,Lead and Supplier" class="btn btn-primary" type="button" perfect-css="button" onclick="fn_showQuotationImportList(this)" Function="1"><i class="las la-file-import la-lg"></i></button>
                                        <button id="customerbtn" class="btn btn-primary fa fa-user-plus" type="button" perfect-css="button" onclick="fn_openNewCustomerWindow(this)" style="display:none" title="Add Customer"></button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Contact Name</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <input type="text" class="form-control perfectValidate_string" name="CustomeName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly />

                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Mobile No</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <input type="text" class="form-control perfectValidate_mobile" name="MobileNo" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                                </div>
                            </div>
                        </div>
                    </div>


                    <div class="col-sm-4" id="QuoAddressSection" style="display:none">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                Address
                            </label>
                            <div class="col-sm-8">
                                <textarea class="form-control " perfect-class="formGroupControl" name="QuoAddress" rows="1" placeholder="" perfect-ctype="input" perfect-css="input"></textarea>
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Entered Date</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="date" class="form-control perfectValidate_date" id="QuoEntrDate" name="QuoEntrDate" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" onchange="datencheck(this)" max="2050-01-01" />
                                <div class="invalid-feedback animated fadeInUp limit-check" style="display: block;"></div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal fade" perfect-class="formGroupModalwarranty" id="formGroupModalwarranty">
                    <div class="modal-dialog modal-dialog-centered modal-md" role="document">
                        <div class="modal-content">
                            <div class="modal-header border-0">
                                <h5 class="modal-title">Warranty Details</h5>
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>
                            <div class="modal-body" perfect-class="formGroup" style="max-height: calc(100vh - 200px); overflow-y: auto;padding: 1rem;">
                                <div class="row">
                                    <div class="col-sm-12">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">Sub Product</label>
                                            <div class="col-sm-8">
                                                <div class="input-group">
                                                    <input type="hidden" class="form-control" perfect-tempTable-Warranty="prodtid" name="prodtid" readonly />
                                                    <input type="text" class="form-control" perfect-tempTable-Warranty="subProName" name="subProName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly />
                                                    <input type="hidden" name="subProductID" perfect-tempTable-Warranty="subProductID" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                    <div class="input-group-append">
                                                        <button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchVal(this, 23, 'Sub Product Details',['FK_Product','Product'], [])" BindName="subProName" BindVal="subProductID" Criterea1="FK_Product"></button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-12">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">Type</span>
                                                <span class="text-danger">*</span>
                                            </label>
                                            <div class="col-sm-8">

                                                <div class="input-group">
                                                    <select class="form-control" name="WarrantyType" perfect-tempTable-Warranty="WarrantyType" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select">
                                                        <option value="0">Please Select </option>
                                                        @if (!(Model.Warrantytype is null))
                                                        {
                                                            foreach (var Module in Model.Warrantytype)
                                                            {
                                                                <option value="@Module.WarrantyTypeID">@Module.WarrantyName</option>
                                                            }
                                                        }
                                                    </select>
                                                    <div class="text-danger temptableError"></div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-12">
                                        <div class="text-right" perfect-class="formFooter">
                                            <button class="btn btn-primary1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" title="Add" onclick="fn_createWarrantyTable(this,'Warranty',['WarrantyType'],wartableOptionsTempOut)"><i class="fa fa fa-plus" aria-hidden="true"></i></button>
                                            <button class="btn btn-light1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" onclick="productclear(this, 'Warranty')"><i class="fa fa-refresh" aria-hidden="true"></i></button>
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-sm-12">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <div class="table-responsive" perfect-tempTable="Warranty" id="Warrantydetailhd" perfect-tempTable-lastindex="0" perfect-tempTable-action="0" style="margin-top:6px;"></div>
                                        </div>
                                    </div>
                                </div>
                                <div class="card-footer text-right" perfect-class="formFooter">
                                    <button class="btn btn-primary light" type="button" data-toggle="tooltip" data-placement="top" data-html="true" title="Add" onclick="fn_warrantydet(this)">Submit</button>
                                    <button class="btn btn-light1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" data-dismiss="modal">Cancel</button>
                                </div>




                            </div>
                        </div>
                    </div>
                </div>

                <div class="md-2 modal fade" perfect-class="formGroupModalwarrantyimg" id="formGroupModalwarrantyimg">
                    <div class="modal-dialog modal-dialog-centered modal-md" role="document">
                        <div class="modal-content">
                            <div class="modal-header border-0">
                                <h5 class="modal-title">Product Images</h5>

                            </div>
                            <div class="modal-body" perfect-class="formGroup" style="max-height: calc(100vh - 200px); overflow-y: auto;padding: 1rem;">
                                <div class="row">

                                    <div class="col-sm-12" id="Image-img">

                                    </div>


                                </div>

                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-12">
                        <div class="daccordion__header">
                            <span class="accordion__header--text">Project/Product Details</span>
                        </div>
                        <div class="row">
                            <div class="col-sm-12 " perfect-class="TempTableProduct">
                                <br />
                                <div class="row">
                                    <div class="col-sm-3">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">Category&nbsp;<span class="text-danger">*</span></label>
                                            <div class="col-sm-8">
                                                <select class="form-control" name="FK_Category" id="IdFK_Category" perfect-class="formGroupControl" onchange="fn_getProductName(this)" perfect-ctype="select" perfect-css="select" perfect-tempTable-Quotation="Category">
                                                    <option value="">Please select</option>
                                                    @if (!(Model.CategoryList is null))
                                                    {
                                                        foreach (var category in Model.CategoryList)
                                                        {
                                                            if (category.Project)
                                                            {
                                                                string cat = category.CatgName.ToString() + " -Project";
                                                                <option value="@category.ID_Catg" Project="@category.Project.ToString()" style="color:#b73c50">@cat</option>
                                                            }
                                                            else
                                                            {
                                                                <option value="@category.ID_Catg" Project="@category.Project.ToString()">@category.CatgName</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <div class="text-danger temptableError"></div>
                                            </div>

                                        </div>
                                    </div>

                                    <div class="col-sm-3">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel" name="lblProName">Product</span>
                                            </label>
                                            <div class="col-sm-8">
                                                <div class="input-group">
                                                    <input type="text" class="form-control" name="ProdName" id="IdProdName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" perfect-tempTable-Quotation="ProdName" autocomplete="off" />
                                                    <input type="hidden" name="FK_Product" id="IdFK_Product" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-tempTable-Quotation="FK_Product" perfect-css="input" autocomplete="off" />

                                                    <div class="input-group-append">
                                                        <button id="addProduct-jq-searchButton3" class="btn btn-primary fa fa-search" name="ProdBtn" type="button" perfect-css="button" onclick="fn_searchProduct(this)"></button>
                                                    </div>
                                                </div>
                                                <div class="text-danger temptableError"></div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-3">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">Quantity&nbsp;<span class="text-danger">*</span></label>
                                            <div class="col-sm-8">
                                                <input type="number" class="form-control text-right" id="IdQuantity" perfect-tempTable-Quotation="QpdQuantity" name="QpdQuantity" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" onchange="fn_calculateActualPrice(this)" maxlength="12" />
                                                <div class="text-danger temptableError"></div>
                                            </div>

                                        </div>
                                    </div>
                                    <div class="col-sm-3">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel" name="lblMRP">MRP</span>

                                            </label>
                                            <div class="col-sm-8">
                                                <input type="text" class="form-control text-right" perfect-tempTable-Quotation="QpdMRP" name="QpdMRP" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');" readonly />
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-sm-3">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">Rate</span>
                                                <span class="text-danger">*</span>
                                            </label>
                                            <div class="col-sm-8">
                                                <input type="text" class="form-control text-right" perfect-tempTable-Quotation="QpdRate" name="QpdRate" onchange="fn_calculateActualPrice(this)" perfect-class="formGroupControl" oninput="this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');" perfect-ctype="input" perfect-css="input" maxlength="12" />
                                                <input type="hidden" class="form-control" perfect-tempTable-QuotationData="Sprice" name="Sprice" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                                                <div class="text-danger temptableError"></div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-3">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                Disc %
                                            </label>
                                            <div class="col-sm-8">
                                                <input type="text" class="form-control text-right" perfect-tempTable-Quotation="QpdDiscountPercent" name="QpdDiscountPercent" perfect-class="formGroupControl" onchange="fn_calculateDiscAmount(this)" oninput="this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');" perfect-ctype="input" perfect-css="input" maxlength="6" />
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-sm-3">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                Disc Amt
                                            </label>
                                            <div class="col-sm-8">
                                                <input type="text" class="form-control text-right" perfect-tempTable-Quotation="QpdDiscount" name="QpdDiscount" perfect-class="formGroupControl" onchange="fn_calculateDiscPer(this)" oninput="this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');" perfect-ctype="input" perfect-css="input" maxlength="12" />
                                                <input type="hidden" perfect-tempTable-Quotation="QpdTotalAmount" name="QpdTotalAmount" />
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-sm-3">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">Warranty/AMC&nbsp;</label>
                                            <div class="col-sm-3">
                                                <div class="input-group">
                                                    <div class="input-group-append">
                                                        &nbsp;&nbsp; <button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-outdent" type="button" perfect-css="button" title="Add Warranty Details" onclick="fn_getWarrantyLists(this)"></button>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-sm-5">
                                                <div class="input-group">
                                                    <div>
                                                        <button class="btn btn-primary1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" title="Add New Product" onclick="fn_createQuotationTable(this,'Quotation',['FK_Product'])"><i class="fa fa fa-plus" aria-hidden="true"></i></button>
                                                        <button class="btn btn-light1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" onclick="productclear(this,'Quotation')" title="To clear data"><i class="fa fa-refresh" aria-hidden="true"></i></button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>



                                </div>
                                @*<div class="card-footer text-right" perfect-class="formFooter">
                                        <button class="btn btn-primary1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" title="Add New Product" onclick="fn_createQuotationTable(this,'Quotation',['FK_Product'])">Add</button>
                                        <button class="btn btn-light1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" onclick="fn_resetQuotationItem(this)">Clear</button>
                                    </div>*@
                                <div class="row">
                                    <div class="col-sm-12" style="padding-right:25px;padding-left:25px;">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <div class="table-responsive" perfect-tempTable="Quotation" id="QuotationItemHead" perfect-tempTable-lastindex="0" perfect-tempTable-action="0"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <hr style="margin-top: -16px;">
                <div class="row">
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel"> Discount</span>

                            </label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control text-right" placeholder="" name="QuotationDiscount" onchange="fn_roundoff(this)" perfect-class="formGroupControl" perfect-ctype="input" oninput="this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');" perfect-css="input" />
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Other Charges</span>

                            </label>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <input type="text" class="form-control text-right" name="OtherCharge" onchange="fn_roundoff(this)" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly />
                                    <div class="input-group-append">
                                        <button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-credit-card" type="button" perfect-css="button" onclick="fn_showOtherCharges(this)" title="To Fill Other Charges"></button>
                                        <div class="modal fade" perfect-class="formGroupModalOtherCharge" id="formGroupModalOtherCharge">
                                            <div class="modal-dialog modal-dialog-centered" role="document">
                                                <div class="modal-content  rounded-0">
                                                    <div class="modal-header border-0">
                                                        <h5 class="modal-title">Other Charge Details</h5>
                                                        <button type="button" class="close" onclick="otherchargepopupclose(this)">
                                                            <span>&times;</span>
                                                        </button>
                                                    </div>
                                                    <div class="modal-body" perfect-class="formGroup" style="max-height: calc(100vh - 200px); overflow-y: auto;padding: 1rem;">
                                                        <table id="zero_configOthercharge" class="table mb-0  table-striped  text-black">
                                                            <thead class="bg-primary text-white">
                                                                <tr>
                                                                    <th class="t-head">SlNo</th>
                                                                    <th class="t-head" style="display:none">ID_OtherChargeType</th>
                                                                    <th class="t-head">Type</th>
                                                                    <th class="t-head">Trans Type</th>
                                                                    <th class="t-head">Amount</th>

                                                                </tr>
                                                            </thead>
                                                            <tbody id="formGroupModalOtherChargebody"></tbody>
                                                            <tfoot>
                                                            </tfoot>
                                                        </table>


                                                        <div class="modal-footer">
                                                            <button type="button" class="btn btn-primary1" onclick="fn_bindOtherChargesAmount(this)">Apply</button>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel"> Sub Total</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control perfectValidate_decimal text-right" name="QuotationBillTotal" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" onchange="fn_roundoff(this)" readonly />

                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-4">

                    </div>
                    <div class="col-sm-4">

                    </div>
                    <div class="col-sm-4" style="display:none">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Roundoff</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control text-right" placeholder="" readonly name="QuotationRoundoff" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel"> Net Amount</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control text-right perfectValidate_decimal" placeholder="" readonly name="QuotationNetAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-footer text-right" perfect-class="formFooter">

                    @if (ViewBag.PagedAccessRights.UsrrlMsEdt)
                    {
                        <button id="" type="button" class="btn btn-primary mr-3 addcompany-jq-addnewuserUpdate d-none" name="update" perfect-css="button" onclick="fn_UpdateQuotation(this,'update')"><i class="fa fa-refresh fa-spin loaderClass"></i>Update</button>
                    }
                    @if (ViewBag.PagedAccessRights.UsrrlMsAdd)
                    {
                        <button id="addcompany-jq-addnewuser" type="button" class="btn btn-primary mr-3 " name="add" perfect-css="button" onclick="fn_UpdateQuotation(this,'new')"><i class="fa fa-refresh fa-spin loaderClass "></i>Save</button>
                    }
                    <button type="button" class="btn btn-light" perfect-css="button" onclick="fn_resetQuotation(this)" name="reset">Clear</button>
                </div>
            </div>
        </form>
        <div class="md-2 modal fade" perfect-class="formGroupModalcustmrformGroupModalcustmr" id="formGroupModalcustmr">
            <div class="modal-dialog modal-dialog-centered modal-xl" role="document">
                <div class="modal-content">
                    <div class="modal-header border-0">
                        <h5 class="modal-title">Add Customer</h5>
                        <button type="button" class="close" data-dismiss="modal">
                            <span>&times;</span>
                        </button>
                    </div>
                    <div class="modal-body" perfect-class="formGroup" style="max-height: calc(100vh - 200px); overflow-y: auto;padding: 1rem;">
                        <div class="row">

                            <div class="col-sm-12" id="custmr-sav">

                            </div>


                        </div>

                    </div>
                </div>
            </div>
        </div>

    </div>
</div>


<script>

 //on load functions
 $(document).ready(function ()
 {


	initFunctions('form');
    });

    function fn_getProductName(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        $thisForm.find('[name="ProdName"]').attr('readonly', false);
        $thisForm.find('[name="ProdName"]').val('');
        $thisForm.find('[name="QpdMRP"]').val(0);
        let sel = $thisForm.find('[name=FK_Category] option:selected').text();
        let name = $thisForm.find('[name="FK_Category"]').children(":selected").attr('Project')
        if (name == 'False' && sel != 'Please select') {
            $thisForm.find('[name="ProdBtn"]').show();
            $thisForm.find('[name="ProdName"]').attr('readonly', true);
        }
        else {
            $thisForm.find('[name="ProdBtn"]').hide();
            $thisForm.find('[name="ID_Product"]').val(0);
            $thisForm.find('[name="ProdName"]').attr('readonly', false);
        }
        if (name == 'False' && sel != 'Please select') {
            $thisForm.find('[name="lblProName"]').text('Product');
            $thisForm.find('[name="lblMRP"]').text('MRP');
            $thisForm.find('[name="QpdMRP"]').attr('readonly', true);
        }
        else {
            $thisForm.find('[name="lblProName"]').text('Model');
            $thisForm.find('[name="lblMRP"]').text('Cost');
            $thisForm.find('[name="QpdMRP"]').attr('readonly', false);
        }
    }
    function fn_searchProduct(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let $this = $(ele).closest('[perfect-class="formGroup"]');
        let FK_Category = { FK_Category: $thisForm.find('[name=FK_Category]').val() }
            var obj = {
                ProdName: $thisForm.find('[name=ProdName]').val(),
                FK_Category: $thisForm.find('[name=FK_Category]').val()

            }

           if ($thisForm.find('[name=FK_Category]').val() != '')
            {
                  $.ajax({
                    url: '@Url.Action("GetProductSearch", "Quotation")',
                    type: "Get",
                    headers: { "token_key": "123456" },
                    data: obj,
                    dataType: "json",
                    contentType: "application/json",
                    success: function (successData) {
                        if (successData.Process.IsProcess) {
                            if (successData.Data.length> 1) {
                                var sss = createSelectList({
                                    data: successData.Data,
                                    hideColumn: ['ID_Product', 'MRP'],
                                    headingText: 'Product Details',
                                    renameHeader: { "ProdName": "Name", "ProdShortName": "Short Name", "Rate": "Rate" },
                                });

                                sss.then(function (ret) {
                                    if (ret) {
                                        $thisForm.find('[name=FK_Product]').val(ret.ID_Product);
                                        $thisForm.find('[name=ProdName]').focus().val(ret.ProdName);
                                        $thisForm.find('[name=QpdRate]').val(ret.Rate);
                                        $thisForm.find('[name=QpdMRP]').val(ret.MRP);
                                       $this.find('table').append($('<tr>').append($('<td/>').text(ret.ProdName)).append($('<td/>').html('&times;').click(function () { $(this).closest('tr').remove() })))
                                    }
                                });
                            }
                            else
                            {
                                $thisForm.find('[name=FK_Product]').val(successData.Data[0].ID_Product);
                                $thisForm.find('[name=ProdName]').val(successData.Data[0].ProdName);
                                $thisForm.find('[name=QpdRate]').val(successData.Data[0].Rate);
                                $thisForm.find('[name=QpdMRP]').val(successData.Data[0].MRP);
                            }
                        }
                        else {
                            $.each(successData.Process.Message, function (key, value) {
                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                            });
                        }

                    },
                    complete: function () {
                    }
                });
            }
        else
        {
            NotificationMessage({  'message': 'Please Select Category' });
        }

    }

    //to load Imports List
    function fn_showQuotationImportList(element) {

        let $thisForm = $(element).closest('[perfect-class="form"]');
        switch (parseInt($thisForm.find('[name="ddlImportsList"]').val())) {
            case 1:
                GetCmnPopUpSearchValAssign(element, 7, 'Customer List', [], ['ID_Customer', 'CustomeName', 'MobileNo', 'State','GSTINNo']);
                break;
            case 2:
                GetCmnPopUpSearchValAssign(element, 33, 'Lead List', [], ['FK_Lead', 'FK_CustomerOthers', 'FK_Customer', 'ID_LeadGenerate', 'CustomeName', 'MobileNo']);
                break;
            default:
                NotificationMessage({ 'type': 'info', 'heading': 'info', 'message': 'Please Select Import From' });
                break;
        }
    }

    //to show and hide new customer button
    function fn_showandHideNewCustomerButton(element) {

        let $thisForm = $(element).closest('[perfect-class="form"]');
        $thisForm.find('[name="CustomeName"]').val("")
        $thisForm.find('[name="MobileNo"]').val("")
        $thisForm.find('[name="QuoAddress"]').val("")

        if ($thisForm.find('[name="ddlImportsList"]').val() == 1) {
            $thisForm.find('[id="customerbtn"]').css("display", "block");
        }
        else {
            $thisForm.find('[id="customerbtn"]').css("display", "none");
        }
        if ($thisForm.find('[name="ddlImportsList"]').val() == 3) {
            $thisForm.find('[id="btnShowList"]').css("display", "none");
            $thisForm.find('[id="QuoAddressSection"]').css("display", "block");
            $thisForm.find('[name="CustomeName"]').prop('readonly', false)
        }
        else {
            $thisForm.find('[id="btnShowList"]').css("display", "block");
            $thisForm.find('[id="QuoAddressSection"]').css("display", "none");
            $thisForm.find('[name="CustomeName"]').prop('readonly', true)
        }
    }


    //to New Cutomer popup



    function fn_openNewCustomerWindow(ele)
            {



               $('#formGroupModalcustmr').modal('show');


               let $savimgContainer = $('#custmr-sav');



                $savimgContainer.load('@Url.Action("LoadCustomerForm", "Customer")?mtd=@ViewBag.SharePagetransmode', function () {

                   let $thisForm = $(this).find('[perfect-class="form"]');
                   // ... Custom validation message
                   $thisForm.validate({ messages: qodvalidationMessage });
                   // ... Custom validation message
                   $thisForm.attr('perfect-onFormSuccess', 'fn_qocustomerIndex_initialLoad');

                   initFunctions($thisForm);

                    //let $thisForm = $(this).find('[perfect-class="form"]');
                    //$thisForm.attr('perfect-onFormSuccess', 'fn_customerForm_loadState_success');
                    //   // initFunctions($thisForm);

                      });
          }
    function fn_qocustomerIndex_initialLoad() {

            $('#formGroupModalcustmr').modal('hide');

        }
    var qodvalidationMessage = {
        'BranchID': {
            'required': 'Please select a branch',
            'digits': 'Invalid Branch selected'
        },
        'CustomerTypeID': {
            'required': 'Please select a Customer Type',
            'digits': 'Invalid Customer Type selected'
        },
        'Number': {
            'required': 'Enter customer number',
            'digits': 'Customer number should be digits'
        },

        'Name': {
            'required': 'Please enter customer name',
            'maxlength': jQuery.validator.format('Customer name should be less than {0} characters'),
            'stringonly': 'Special characters are not allowed in customer name'
        },
        'Address1': {
            'required': 'Please enter address ',
            'maxlength': jQuery.validator.format('Address  should be less than {0} characters'),
            'stringonly': 'Special characters are not allowed in Address'
        },


        'CountryID': {
            'required': 'Please select country',
            'digits': 'Invalid Country selected'
        },
        'StatesID': {
            'required': 'Please select state',
            'digits': 'Invalid State selected'
        },
        'DistrictID': {
            'required': 'Please select district',
            'digits': 'Invalid District selected'
        },

        'Mobile': {
            'required': 'Please enter mobile',
            'anyphonenumber': 'Invalid Mobile No',
            'minlength': jQuery.validator.format('Mobile No should be more than {0} characters'),
            'maxlength': jQuery.validator.format('Mobile No should be less than {0} characters')
        },
        'Phone': {

            'anyphonenumber': 'Invalid Phone No',
            'minlength': jQuery.validator.format('Phone No should be more than {0} characters'),
            'maxlength': jQuery.validator.format('Phone No should be less than {0} characters')
        },
        'CategoryID': {
            'required': 'Please select a Category',
            'digits': 'Invalid Category Mode selected'
        },
        'ContactPerson': {
            'required': 'Please enter Contact Person',
            'maxlength': jQuery.validator.format('Contact Person should be less than {0} characters'),
            'stringonly': 'Special characters are not allowed in Contact Person name'
        },

        'ContactMobile': {
            'required': 'Please enter  Mobile',
            'anyphonenumber': 'Invalid Mobile No',
            'minlength': jQuery.validator.format('Mobile No should be more than {0} characters'),
            'maxlength': jQuery.validator.format('Mobile No Phone should be less than {0} characters')
        },

        'BranchTypeID': {
            'required': 'Please select a Branch Type',
            'digits': 'Invalid Branch Type selected'
        },



    };


    //to open warranty window
    function fn_openWarrantyWindow(ele) {
        $('#modalWarrantyWindow').modal('show');
    }


    //to show tax window
    function fn_showTaxWindow(element, mod) {
        let $thisForm = $(element).closest('[perfect-class="form"]');
        let taxinfo = [];
        if ($thisForm.data('pDataTax')) {
            if ($thisForm.data('pDataTax').length > 0) {
                taxinfo = $thisForm.data('pDataTax');
            }
            else {
                taxinfo.push($thisForm.data('pDataTax'));
            }

            let sum = 0;
            var CheckListHTML = '';
            $.each(taxinfo, function (i, value) {

                sum = sum + parseFloat(value.TaxAmount);
                CheckListHTML += "<tr>";
                CheckListHTML += "<td>" + value.SlNo + "</td>";
                CheckListHTML += "<td Class='jq_ProductID_td' Style='Display:none'>" + value.ProductID + "</td>";
                CheckListHTML += "<td class='jq_taxType_td' Style='Display:none'>" + value.FK_TaxType + "</td>";
                CheckListHTML += "<td class='jq_taxTypeName_td'>" + value.TaxtyName + "</td>";
                CheckListHTML += "<td class='jq_taxPer_td text-center'>" + value.TaxPercentage + "</td>";
                CheckListHTML += "<td class='jq_taxamount_td text-right' >  " + value.Amount + "</td>";
                CheckListHTML += "</tr>";
            })

            $("#formGroupModalTaxbody").html(CheckListHTML)

            if (mod == 1) {
                $('#formGroupModalTax').modal('show');
            }
            else {
                $('#formGroupModalTax').modal('hide');
            }

            fn_bindTaxAmount(element)
        }
        else {
            fn_bindTaxDetails("1", 'formGroupModalTax', element, mod)
        }
    }

    //to bind Tax amount
    function fn_bindTaxAmount(element) {
        let $thisForm = $(element).closest('[perfect-class="form"]');
        let sum = 0;

        $('#formGroupModalTaxbody tr').each(function (index, element) {
            sum = sum + parseFloat($(element).find('.jq_taxamount_td').text());
        });

        $thisForm.find('[name=SodSalTaxAmount]').val(sum.toFixed(2));
    }

    //to bind tax details
    function fn_bindTaxDetails(Mode, ModalID, element, mod)
    {
        let $thisForm = $(element).closest('[perfect-class="form"]');

        var InputData =
        {
            FK_Product: $thisForm.find('[name=FK_Product]').val(),
            Includetax: 0,

            Quantity: $thisForm.find('[name=SodSalQuantity]').val(),
            Amount: $thisForm.find('[name=SodSalPrice]').val(),
        }
        $.ajax({
            url: "@Url.Action("GetTaxAmountNew", "Quotation")",
            type: "Get",
            data: InputData,
            dataType: "json",
            contentType: "application/json",
            success: function (ajaxOutput) {
                     if (ajaxOutput.Process.IsProcess) {
                         var CheckListHTML = '';
                         let sum = 0;

                         if (ajaxOutput.Data.length > 0) {
                             $.each(ajaxOutput.Data, function (i, value) {
                                 sum = sum + parseFloat(value.TaxAmount);
                                 CheckListHTML += "<tr>";
                                 CheckListHTML += "<td>" + value.SlNo + "</td>";
                                 CheckListHTML += "<td Class='jq_ProductID_td' Style='Display:none'>" + value.ProductID + "</td>";
                                 CheckListHTML += "<td class='jq_taxType_td' Style='Display:none'>" + value.FK_TaxType + "</td>";
                                 CheckListHTML += "<td class='jq_taxTypeName_td'>" + value.TaxTyName + "</td>";
                                 CheckListHTML += "<td class='jq_taxPer_td text-center'>" + value.TaxPercentage + "</td>";
                                 CheckListHTML += "<td class='jq_taxamount_td text-right' >  "+ value.Amount + "</td>";
                                 CheckListHTML += "</tr>";
                             })
                         }
                         else {
                             CheckListHTML += "<div class='form-group col-md-6'>";
                             CheckListHTML += "<div class='form-check mb-2'>";
                             CheckListHTML += "<input type='checkbox' class='form-check-input' >"
                             CheckListHTML += "<label class='form-check-label' for='check1'>No Records...</label>";
                             CheckListHTML += "</div></div>"
                         }

                         $("#formGroupModalTaxbody").html(CheckListHTML)
                         if (mod == 1) {
                             $('#formGroupModalTax').modal('show');
                         }
                         else {
                             $('#formGroupModalTax').modal('hide');
                         }

                         fn_bindTaxAmount(element)
                     }
                     else {
                         $.each(ajaxOutput.Process.Message, function (key, value) {
                             NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                         });
                     }
                },
                complete: function () {
                    $(element).prop('disabled', false);
                }
            });
    }

    //to show other charges window
    function fn_showOtherCharges(element) {
        let $thisForm = $(element).closest('[perfect-class="form"]');
        let $dropDownList = [];
        var InputData =
        {
            Mode: $thisForm.find('[name="QuoMode"]').val(),
        }

        $.ajax({
            url: "@Url.Action("GetOtherCharges", "Quotation")",
            type: "Get",
            data: InputData,
            dataType: "json",
            contentType: "application/json",
            success: function (ajaxOutput)            {


                if (ajaxOutput.OtherCharges.Process.IsProcess) {

                    var CheckListHTML = '';
                    let sum = 0;
                    let $tempArr = $thisForm.data('pOthrChgData');
                    if (ajaxOutput.OtherCharges.Data.length > 0) {

                        $.each(ajaxOutput.OtherCharges.Data, function (i, value) {

                            let options = ''
                            if ($tempArr.length > 0) {
                                $.each($tempArr, function (key, valueTemp) {
                                    if (valueTemp.ID_OtherChargeType == value.ID_OtherChargeType) {
                                        value.OctyAmount = valueTemp.OctyAmount;
                                        $.each(ajaxOutput.Transtypelist.Data, function (i, valuea) {
                                            if (parseInt(valuea.TransTypeID) == parseInt(valueTemp.OctyTransType)) {
                                                // options += '<option value=' + valuea.TransTypeID + ' selected="selected">' + valuea.TransType + '</option>'
                                                let optionValue = '<option value=' + valuea.TransTypeID + ' selected="selected">' + valuea.TransType + '</option>';
                                                if (!$dropDownList.includes(optionValue)) {
                                                    $dropDownList.push(optionValue)
                                                }
                                            }
                                            else {
                                                // options += '<option value=' + valuea.TransTypeID + '>' + valuea.TransType + '</option>'
                                                let optionValue = '<option value=' + valuea.TransTypeID + '>' + valuea.TransType + '</option>';
                                                if (!$dropDownList.includes(optionValue)) {
                                                    $dropDownList.push(optionValue)
                                                }

                                            }
                                        });
                                    }
                                });
                            }
                            else {
                                $.each(ajaxOutput.Transtypelist.Data, function (i, valuea) {
                                    //options += '<option value=' + valuea.TransTypeID + '>' + valuea.TransType + '</option>'
                                    let optionValue = '<option value=' + valuea.TransTypeID + '>' + valuea.TransType + '</option>';
                                    if (!$dropDownList.includes(optionValue)) {
                                        $dropDownList.push(optionValue)
                                    }
                                });
                            }
                            $.each($dropDownList, function (i, value) {
                                options += value;
                            });

                            $dropDownList = [];
                            let $dropdown = '<select class="form-control" >' + options + '</select>';
                            sum = sum + parseFloat(value.OctyAmount);
                            CheckListHTML += "<tr>";
                            CheckListHTML += "<td>" + value.SlNo + "</td>";
                            CheckListHTML += "<td Class='jq_ID_OtherChargeType_td' Style='Display:none'>" + value.ID_OtherChargeType + "</td>";
                            CheckListHTML += "<td Class='jq_Type_td'>" + value.OctyName + "</td>";
                            CheckListHTML += "<td class='jq_TransType_td'>" + $dropdown + "</td>";
                            CheckListHTML += "<td class='jq_OtherChagAmnt_td' ><input  class='form-control text-right' type='number'  value='" + value.OctyAmount + "' ' /></td> /></td>";
                            CheckListHTML += "</tr>";


                        });
                    }
                    else {
                        CheckListHTML += "<div class='form-group col-md-6'>";
                        CheckListHTML += "<div class='form-check mb-2'>";
                        CheckListHTML += "<label class='form-check-label' for='check1'>No Records...</label>";
                        CheckListHTML += "</div></div>"
                    }
                    $("#formGroupModalOtherChargebody").html(CheckListHTML)
                    $('#formGroupModalOtherCharge').modal('show');
                }
                else {
                    $.each(ajaxOutput.OtherCharges.Process.Message, function (key, value) {
                        NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                    });
                }
            },
            complete: function ()
            {
                $(element).prop('disabled', false);
                $('select').selectpicker('refresh');
            }
        });
    }
     function fn_showOtherCharges1(element) {
        let $thisForm = $(element).closest('[perfect-class="form"]');
        let Othrinfo = [];
         if ($thisForm.data('pOthrChgData')) {

            if ($thisForm.data('pOthrChgData').length > 0) {
                Othrinfo = $thisForm.data('pOthrChgData');
            }
            else {
                Othrinfo.push($thisForm.data('pOthrChgData'));
            }

            let sum = 0;

            var CheckListHTML = '';
            $.each(Othrinfo, function (i, value) {
                sum = sum + parseFloat(value.OctyAmount);
                let options = ''
                options += '<option value=' + value.TransTypeID + '>' + value.TransType + '</option>'
                let $dropdown = '<select class="form-control" >' + options + '</select>';
                CheckListHTML += "<tr>";
                CheckListHTML += "<td>" + value.SlNo + "</td>";
                CheckListHTML += "<td Class='jq_ID_OtherChargeType_td' Style='Display:none'>" + value.ID_OtherChargeType + "</td>";
                CheckListHTML += "<td Class='jq_Type_td'>" + value.OctyName + "</td>";
                CheckListHTML += "<td class='jq_TransType_td'>" + $dropdown + "</td>";
                CheckListHTML += "<td class='jq_OtherChagAmnt_td' ><input class='form-control text-right' type='number'  value='" + value.OctyAmount + "'' /></td>";

                CheckListHTML += "</tr>";
            })

            $("#OtherChargebody").html(CheckListHTML)
            $('#formGroupModalOtherCharge').modal('show');
        }
        else {
            fn_bindOtherChargesDetails("1", 'formGroupModalOtherCharge', element)
        }
    }

    //to bind other charges details
    function fn_bindOtherChargesDetails(Mode, ModalID, element) {
        let $thisForm = $(element).closest('[perfect-class="form"]');
        var InputData =
        {
            TransMode: QuotationOutwardTransMode,
        }

        $.ajax({
            url: "@Url.Action("GetOtherCharges", "Quotation")",
            type: "Get",
            data: InputData,
            dataType: "json",
            contentType: "application/json",
            success: function (ajaxOutput)            {
                if (ajaxOutput.OtherCharges.Process.IsProcess) {
                         var CheckListHTML = '';
                         let sum = 0;
                         if (ajaxOutput.OtherCharges.Data.length > 0) {
                             let options =''
                             $.each(ajaxOutput.Transtypelist.Data, function (i, value) {
                                 options += '<option value=' + value.TransTypeID + '>' + value.TransType+'</option>'
                             });
                             $.each(ajaxOutput.OtherCharges.Data, function (i, value) {
                                 let $dropdown = '<select class="form-control" >' + options + '</select>';
                                 sum = sum + parseFloat(value.OctyAmount);
                                 CheckListHTML += "<tr>";
                                 CheckListHTML += "<td>" + value.SlNo + "</td>";
                                 CheckListHTML += "<td Class='jq_ID_OtherChargeType_td' Style='Display:none'>" + value.ID_OtherChargeType + "</td>";
                                 CheckListHTML += "<td Class='jq_Type_td'>" + value.OctyName + "</td>";
                                 CheckListHTML += "<td class='jq_TransType_td'>" + $dropdown + "</td>";
                                 CheckListHTML += "<td class='jq_OtherChagAmnt_td' ><input  class='form-control text-right' type='number'  value='" + value.OctyAmount + "' ' /></td> /></td>";
                                 CheckListHTML += "</tr>";
                             })
                         }
                         else
                         {
                             CheckListHTML += "<div class='form-group col-md-6'>";
                             CheckListHTML += "<div class='form-check mb-2'>";
                             CheckListHTML += "<label class='form-check-label' for='check1'>No Records...</label>";
                             CheckListHTML += "</div></div>"
                         }
                         $("#formGroupModalOtherChargebody").html(CheckListHTML)
                         $('#formGroupModalOtherCharge').modal('show');
                     }
                else
                {
                    $.each(ajaxOutput.OtherCharges.Process.Message, function (key, value) {
                             NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                    });
                }
            },
            complete: function ()
            {
                $(element).prop('disabled', false);
                $('select').selectpicker('refresh');
            }
        });
    }

    function otherchargepopupclose(element) {

        //let $modal = $(element).closest('.modal');
        $('#formGroupModalOtherCharge').modal('hide');
    }
    //to bind other charges amount into textbox
    function fn_bindOtherChargesAmount(element) {
        let $modal = $(element).closest('.modal');
        let $thisForm = $(element).closest('[perfect-class="form"]');
        let sum = 0;
        othrchargelst = [];
        $modal.find('table tbody').find('tr').each(function () {
            let value = parseFloat($(this).find('.jq_OtherChagAmnt_td').find('input').val())
            if ($(this).find('.jq_OtherChagAmnt_td').find('input').val() == '' || $(this).find('.jq_OtherChagAmnt_td').find('input').val() == null) {
                value = 0;
            }
            if (parseInt($(this).find('.jq_TransType_td').find('select').val()) == 0) {
                value = value * 0;
            }
            else if (parseInt($(this).find('.jq_TransType_td').find('select').val()) == 1) {
                value = value * -1;
            }
            else {
                value = value * 1;
            }
            sum = sum + value;
            let OtChargeinfo = {};
            OtChargeinfo['ID_OtherChargeType'] = $(this).find('.jq_ID_OtherChargeType_td').text();
            OtChargeinfo['OctyTransType'] = $(this).find('.jq_TransType_td').find('select').val();
            OtChargeinfo['OctyName'] = $(this).find('.jq_Type_td').text();
            OtChargeinfo['OctyAmount'] = parseFloat($(this).find('.jq_OtherChagAmnt_td').find('input').val());
            othrchargelst.push(OtChargeinfo);
        });

        $thisForm.data({ pOthrChgData: othrchargelst });
        $thisForm.find('[name=OtherCharge]').val(sum);
        fn_roundoff(element);

        let tempArr = $thisForm.data('pOthrChgData')
        if (parseInt(tempArr.length) > 0) {
            tempArr.map(val => {
                let OtChargeinfo = {};
                OtChargeinfo['ID_OtherChargeType'] = val.ID_OtherChargeType;
                OtChargeinfo['OctyTransType'] = val.OctyTransType;
                OtChargeinfo['OctyName'] = val.OctyName;
                OtChargeinfo['OctyAmount'] = val.OctyAmount;
                othrchargelst.push(OtChargeinfo);
            });
            $thisForm.data({ pOthrChgData: othrchargelst });
            $('#formGroupModalOtherCharge').modal('hide');
        }

    }


    var tableOptionsTempOut = {
        iconButton: {
            buttons: [
                {
                    icon: "fa fa-pencil btnPerfectGridEdit",
                    action: function () {
                        let savedData = $(this).closest('tr').data('pData')

                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let tableKey = $tablecontainer.attr('perfect-tempTable');
                        let $thisForm = $tablecontainer.closest('[perfect-class="form"]');

                        let indexname = tableKey + 'index';


                        let rindex = $(this).closest('tr').attr(indexname);

                        $tablecontainer.attr('perfect-tempTable-action', rindex);

                        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                            let $thisNode = $(this);
                            let pf_name = $thisNode.attr('name');
                            if ($thisNode.is('select')) {

                                $thisNode.val(savedData[pf_name]).selectpicker('refresh');

                            }
                            else if ($thisNode.is('input')) {
                                let inputType = $thisNode.attr('type').toLocaleLowerCase();
                                if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                    $thisNode.prop('checked', savedData[pf_name]);
                                }
                                else {
                                    $thisNode.val(savedData[pf_name]);
                                }
                            }
                            else {
                                $thisNode.val(savedData[pf_name]);
                            }
                        });
                        let sel = $thisForm.find('[name=FK_Category] option:selected').text();
                        let name = $thisForm.find('[name="FK_Category"]').children(":selected").attr('Project')
                        if (name == 'False' && sel != 'Please select') {
                            $thisForm.find('[name="ProdBtn"]').show();
                        }
                        else {
                            $thisForm.find('[name="ProdBtn"]').hide();
                        }
                        if (name == 'False' && sel != 'Please select') {
                            $thisForm.find('[name="lblProName"]').text('Product');
                            $thisForm.find('[name="lblMRP"]').text('MRP');
                            $thisForm.find('[name="QpdMRP"]').attr('readonly', true);
                        }
                        else {
                            $thisForm.find('[name="lblProName"]').text('Model');
                            $thisForm.find('[name="lblMRP"]').text('Cost');
                            $thisForm.find('[name="QpdMRP"]').attr('readonly', false);
                        }
                    }
                },
                {
                    icon: "fa fa-trash btnPerfectGridDelete",
                    action: function () {
                        let $thistbl = $(this).closest('table');
                        let table = $thistbl.DataTable();
                        table.destroy();
                        if ($(this).closest('tbody').find('tr').length > 1) {
                            $(this).closest('tr').remove();
                            pft_table_slreset($thistbl);
                        }
                        else {
                            $thistbl.remove();
                        }

                    }
                }

            ]
        },

        rowAttribute: [],
        renameHeader: { "ProdName": "Product/Model", "QpdQuantity": "Qty", "QpdRate": "Rate", "QpdMRP": "MRP", "Sprice": "Qty*Rate", "QpdDiscount": "Disc Amount", "QpdDiscountPercent": "Disc %", "FK_Category": "Category","QpdTotalAmount":"Total"},
        hideColumn: ['ID_QuotationProductDetails', 'FK_Quotation', 'FK_Product','QpdDiscountPercent'],
        serialNo: true,

    };

    //to create Quotation items details table
    function fn_createQuotationTable(element, tkey, uniq = [])
    {
        let $thisForm = $(element).closest('[perfect-class="form"]');
        let tableKey = tkey;
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');

        let insertData = {};
        let tableOptionsTemp = tableOptionsTempOut;

        let unique = (uniq) ? uniq : [];

        let isValid = true;
        let errorClass = '.temptableError';


        let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
        let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
        let indexname = tkey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);
        let updateCond = '';
        let isNew = true;

        if (thisactionIndex > 0) {
            insertData[indexname] = thisactionIndex;
            updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
            isNew = false;
        }
        else {
            insertData[indexname] = lastIndex + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
            isNew = true;
        }

        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Category"]').val().length == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="Category"]').val().length == null) {
            isValid = false;

            $thisForm.find('[perfect-tempTable-' + tableKey + '="Category"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please select the category');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="Category"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }
        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="ProdName"]').val().length == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="ProdName"]').val().length == null) {
            isValid = false;
            let errorText = '';
            switch ($thisForm.find('[name = "lblProName"]').text()) {
                case "Product":
                    errorText = 'Please select the product';
                    break;
                case "Model":
                    errorText = 'Please enter model';
                    break;
                default:
                    errorText = '';
                    break;
            }

            $thisForm.find('[perfect-tempTable-' + tableKey + '="ProdName"]').closest('[perfect-class="formGroup"]').find(errorClass).text(errorText);
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="ProdName"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }

        let prodQty = (isNaN($thisForm.find('[perfect-tempTable-' + tableKey + '="QpdQuantity"]').val()) ? 0 : $thisForm.find('[perfect-tempTable-' + tableKey + '="QpdQuantity"]').val())

        if (parseFloat(prodQty) <= 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="QpdQuantity"]').val().length==0) {
            isValid = false;
            $thisForm.find('[perfect-tempTable-' + tableKey + '="QpdQuantity"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please enter at least one quantity');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="QpdQuantity"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }

        let prodPrice = (isNaN($thisForm.find('[perfect-tempTable-' + tableKey + '="QpdRate"]').val()) ? 0 : $thisForm.find('[perfect-tempTable-' + tableKey + '="QpdRate"]').val())

        if (parseFloat(prodPrice) <= 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="QpdRate"]').val().length == 0) {
            isValid = false;
            $thisForm.find('[perfect-tempTable-' + tableKey + '="QpdRate"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please enter rate');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="QpdRate"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }

        if (unique.length > 0) {
            let prevData = [];
            $tblcontainer.find('table > tbody').find('tr').each(function () {
                if (isNew) {
                    prevData.push($(this).data('pData'));
                }
                else {
                    if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                        prevData.push($(this).data('pData'));
                    }

                }

            })

            unique.forEach(function (key, i) {
                let $thisEle = $thisForm.find('[perfect-tempTable-' + tableKey + '="' + key + '"]');
                let headerEleName = $thisForm.find('[name="lblProName"]').text();
                let atname = $thisEle.attr('name');
                let cvalue;


                if ($thisEle.length != 0) {
                    let $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
                    let errmessage = headerEleName + " Already exits"

                    if ($thisEle.is('select')) {
                        cvalue = $thisEle.val();

                    }
                    else if ($thisEle.is('input')) {

                        let inputEleType = $thisEle.attr('type').toLocaleLowerCase();

                        if (inputEleType == 'checkbox') { cvalue = $thisEle.is(':checked'); }
                        else if (inputEleType == 'hidden') { cvalue = $thisEle.val(); }
                        else { cvalue = $thisEle.val(); }
                    }
                    else {
                        cvalue = $thisEle.val();
                    }

                    if (prevData.find(a => a[atname] == cvalue)) {
                        $errorElement.text(errmessage);
                        isValid = false;
                    }
                }
            });

        }
        if (isValid) {
            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                if ($this.is('select')) {
                    tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                    tableOptionsTemp.hideColumn.push(nameAttr)
                    if ($this.val() != null) {
                        let selectText = ($this.val().length == 0) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    else {
                        let selectText = ($this.val() == null) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    insertData[nameAttr] = $this.val();

                    $this.val('').selectpicker('refresh');
                }
                else if ($this.is('input')) {

                    let inputType = $this.attr('type').toLocaleLowerCase();

                        if (inputType == 'checkbox') {

                            insertData[nameAttr] = $this.is(':checked');

                            tableOptionsTemp.isCheckType.push(nameAttr)
                            //clear field
                            $this.prop('checked', false);

                        }
                        else if (inputType == 'hidden') {
                            insertData[nameAttr] = $this.val();
                            $this.val('');

                        }

                    else {
                        insertData[nameAttr] = $this.val();

                        $this.val('');
                    }
                }
                else {
                    insertData[nameAttr] = $this.val();

                    $this.val('');
                }
            });

            if (isNew) {
                if ($tblcontainer.find('table').length == 0) {
                    $tblcontainer.append(pft_table_createtable([insertData], tableOptionsTemp));
                }
                else {
                    let table = $tblcontainer.find('table').DataTable()
                    table.destroy()
                    pft_table_addTableRow($tblcontainer.find('table'), insertData, tableOptionsTemp);
                }
            }
            else {
                let table = $tblcontainer.find('table').DataTable()
                table.destroy()
                pft_table_replaceTableRow($tblcontainer.find('table'), updateCond, insertData, tableOptionsTemp);
            }

            $tblcontainer.attr('perfect-tempTable-action', 0);
        }
        fn_bindBillDetails(element)
        fn_roundoff(element);
    }
    function fn_bindBillDetails(element) {
        let $thisForm = $(element).closest('[perfect-class="form"]');
        let sprice = 0;
        let sdisc = 0;
        let billttl = 0;

        $('#QuotationItemHead').find('tbody tr').each(function (index, element) {

            //sprice = sprice + parseFloat(parseFloat($(element).find('.QpdQuantity').text()) * parseFloat($(element).find('.QpdRate').text()));
            sprice = sprice + parseFloat(parseFloat($(element).find('.QpdQuantity').text()) * parseFloat($(element).find('.QpdRate').text()));
            sdisc = sdisc + parseFloat($(element).find('.QpdDiscount').text());
        });
        billttl = sprice - sdisc;
        $thisForm.find('[name=QuotationBillTotal]').val(billttl.toFixed(2));
    }

    function fn_calculateActualPrice(element) {
        let $thisForm = $(element).closest('[perfect-class="form"]');
        let Spric = $thisForm.find('[name="QpdRate"]').val() == "" ? "0" : $thisForm.find('[name="QpdRate"]').val();
        let qtys = $thisForm.find('[name="QpdQuantity"]').val() == "" ? "0" : $thisForm.find('[name="QpdQuantity"]').val();
        $thisForm.find('[name=Sprice]').val(parseFloat(Spric) * parseFloat(qtys));
        fn_calculateDiscAmount(element)
        fn_totalAmountItem(element);
        //fn_showTaxWindow(element, 0)
    }

    function fn_calculateDiscAmount(element) {
        let $thisForm = $(element).closest('[perfect-class="form"]');
        let Sprice = $thisForm.find('[name="QpdRate"]').val() == "" ? "0" : $thisForm.find('[name="QpdRate"]').val();
        let qty = $thisForm.find('[name="QpdQuantity"]').val() == "" ? "0" : $thisForm.find('[name="QpdQuantity"]').val();
        let disp = $thisForm.find('[name="QpdDiscountPercent"]').val() == "" ? "0" : $thisForm.find('[name="QpdDiscountPercent"]').val();
        let discam = (parseFloat(Sprice) * parseFloat(disp)) / 100;

        $thisForm.find('[name=QpdDiscount]').val(discam);
        fn_totalAmountItem(element);
    }
    function fn_calculateDiscPer(ele) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let Sprice = $thisForm.find('[name="QpdRate"]').val() == "" ? "0" : $thisForm.find('[name="QpdRate"]').val();
        let qty = $thisForm.find('[name="QpdQuantity"]').val() == "" ? "0" : $thisForm.find('[name="QpdQuantity"]').val();
        let disamt = $thisForm.find('[name="QpdDiscount"]').val() == "" ? "0" : $thisForm.find('[name="QpdDiscount"]').val();
        let discper = (parseFloat(disamt) * 100) / (parseFloat(Sprice));

        $thisForm.find('[name=QpdDiscountPercent]').val(discper);
        fn_totalAmountItem(ele);
    }
    function fn_totalAmountItem(element) {
        let $thisForm = $(element).closest('[perfect-class="form"]');
        let Sprice = parseFloat($thisForm.find('[name="QpdRate"]').val() == "" ? "0" : $thisForm.find('[name="QpdRate"]').val());
        let qty = parseFloat($thisForm.find('[name="QpdQuantity"]').val() == "" ? "0" : $thisForm.find('[name="QpdQuantity"]').val());
        let disamt = parseFloat($thisForm.find('[name="QpdDiscount"]').val() == "" ? "0" : $thisForm.find('[name="QpdDiscount"]').val());

        let qtyPrice = Sprice * qty;
        let totamount = (qtyPrice - disamt);
        $thisForm.find('[name="QpdTotalAmount"]').val(totamount.toFixed(2));
    }

    function fn_roundoff(element) {
        let $thisForm = $(element).closest('[perfect-class="form"]');
        let biltl = 0;
        let otherchg = 0;
        let saldisc = 0;
        let salroundof = 0;
        let result = 0;
        biltl = parseFloat($thisForm.find('[name="QuotationBillTotal"]').val() == "" ? "0" : $thisForm.find('[name="QuotationBillTotal"]').val());
        otherchg = parseFloat($thisForm.find('[name="OtherCharge"]').val() == "" ? "0" : $thisForm.find('[name="OtherCharge"]').val());
        saldisc = parseFloat($thisForm.find('[name="QuotationDiscount"]').val() == "" ? "0" : $thisForm.find('[name="QuotationDiscount"]').val());
        result = biltl + otherchg - saldisc;
        //salroundof = Math.round(result) - (result);
        //$thisForm.find('[name=QuotationRoundoff]').val(salroundof.toFixed(2));
        $thisForm.find('[name=QuotationNetAmount]').val((result).toFixed(2));
    }



    //to save data
    function fn_UpdateQuotation(element,actionType)
    {
        let $thisForm = $(element).closest('[perfect-class="form"]');
        var today = new Date().toISOString().split('T')[0];
        document.getElementsByName("QuoExpireDate")[0].setAttribute('min', today);
        document.getElementsByName("QuotationDate")[0].setAttribute('max', today);
        if (datencheck(element)) {
            if ($thisForm.valid()) {
                let $errorMsg = '';
                let $blnSuccess = false;
                $(element).prop('disabled', true);
                let $thisForm = $(element).closest('[perfect-class="form"]');

                let $modal2 = $thisForm.find('#zero_configOthercharge');
                let OtherCharge = [];

                if ($modal2.find('tbody').find('tr').length > 0) {
                    $modal2.find('tbody').find('tr').each(function () {
                        let OtChargeinfo = {};
                        OtChargeinfo['ID_OtherChargeType'] = $(this).find('.jq_ID_OtherChargeType_td').text();
                        OtChargeinfo['OctyTransType'] = $(this).find('.jq_TransType_td').find('select').val();
                        OtChargeinfo['OctyName'] = $(this).find('.jq_Type_td').text();
                        OtChargeinfo['OctyAmount'] = $(this).find('.jq_OtherChagAmnt_td').find('input').val();
                        OtherCharge.push(OtChargeinfo);
                    });
                }
                else {
                    let tempArr = $thisForm.data('pOthrChgData')
                    if (tempArr.length > 0) {
                        tempArr.map(val => {
                            let OtChargeinfo = {};
                            OtChargeinfo['ID_OtherChargeType'] = val.ID_OtherChargeType;
                            OtChargeinfo['OctyTransType'] = val.OctyTransType;
                            OtChargeinfo['OctyName'] = val.OctyName;
                            OtChargeinfo['OctyAmount'] = val.OctyAmount;
                            OtherCharge.push(OtChargeinfo);
                        });

                    }
                }

                let quotationItems = [];
                $thisForm.find('[perfect-tempTable="Quotation"]').find('tbody').find('tr').each(function () {
                    quotationItems.push($(this).data('pData'));
                })

                const $QuotationDate = new Date(moment($thisForm.find('[name="QuotationDate"]').val()).format('YYYY-MM-DD'));
                const $ExpiredDate = new Date(moment($thisForm.find('[name="QuoExpireDate"]').val()).format('YYYY-MM-DD'));
                if (quotationItems.length <= 0) {
                    $blnSuccess = false;
                    $errorMsg = 'Enter Atleast One Product/Project';
                }
                else if ($ExpiredDate < $QuotationDate) {
                    $blnSuccess = false;
                    $errorMsg = 'Invalid Expired Date';
                }
                else {
                    $blnSuccess = true;
                }

                let _ID_Quotation = 0;
                let _ActionUrl = "";


                if (actionType === "new") {
                    _ID_Quotation = 0;
                    _ActionUrl = "@Url.Action("AddNewQuotation", "Quotation")";
                }
                else if (actionType === "update") {
                    _ID_Quotation = $thisForm.find('[name="ID_Quotation"]').val();
                    _ActionUrl = "@Url.Action("UpdateQuotation", "Quotation")";
                }


                let _dateToday = new Date();
                let enterdate = _dateToday.getFullYear() + "/" + _dateToday.getMonth() + "/" + _dateToday.getDate();
                let inputData = {
                    __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                    'ID_Quotation': _ID_Quotation,
                    'QuoMode': $thisForm.find('[name="QuoMode"]').val(),
                    'TransMode': @ViewBag.SharePagetransmode,
                    'QuoFrom': $thisForm.find('[name="ddlImportsList"]').val(),
                    'FK_Master': ($thisForm.find('[name="ddlImportsList"]').val() == 1 ? $thisForm.find('[name="ID_Customer"]').val() : ($thisForm.find('[name="ddlImportsList"]').val() == 2 ? $thisForm.find('[name="FK_Lead"]').val() : 0)),
                    'QuoDate': $thisForm.find('[name="QuotationDate"]').val(),
                    'QuoExpireDate': $thisForm.find('[name="QuoExpireDate"]').val(),
                    'QuoBillTotal': $thisForm.find('[name="QuotationBillTotal"]').val(),
                    'QuoDiscount': $thisForm.find('[name="QuotationDiscount"]').val(),
                    'QuoOthercharges': $thisForm.find('[name="OtherCharge"]').val(),
                    'QuoRoundoff': $thisForm.find('[name="QuotationRoundoff"]').val(),
                    'QuoNetAmount': $thisForm.find('[name="QuotationNetAmount"]').val(),
                    'QuotationDetail': quotationItems,
                    'OtherChgDetails': OtherCharge,
                    'CustomerName': $thisForm.find('[name="CustomeName"]').val(),
                    'CustomerPhone': $thisForm.find('[name="MobileNo"]').val(),
                    'CustomerAddress': $thisForm.find('[name="QuoAddress"]').val(),
                    'WarrantyDetails': warrantydetails,
                    'LastID': LastID_QuotationOutward,
                    'QuoEntrDate': $thisForm.find('[name="QuoEntrDate"]').val(),
                };

                clearSessionValue(LastIDSessionKeyQO);

                if ($blnSuccess) {
                    $.ajax({
                        url: _ActionUrl,
                        type: "POST",
                        data: inputData,
                        dataType: "json",
                        contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                        success: function (ajaxOutput) {
                            if (ajaxOutput.Process.IsProcess) {
                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                    NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                                });
                            }
                            else {
                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                    $(element).prop('disabled', false);
                                });
                            }

                            $thisForm.find('[perfect-ctype="select"]').val('').selectpicker('refresh');
                            $thisForm.find('[perfect-ctype="input"]').val('');
                            $thisForm.find('[perfect-ctype="date"]').val('');
                            let onSuccess = $thisForm.attr('perfect-onFormSuccess')
                            if (onSuccess) {
                                window[onSuccess]();
                                fn_QuotationIndex_InitialLoad();
                            }
                        },
                        complete: function () {
                            $(element).prop('disabled', false);
                        }
                    });
                }
                else {
                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': $errorMsg });
                    $(element).prop('disabled', false);
                }
            }
            else {
                $(ele).prop('disabled', false);
            }
        }
        else {
            $(ele).prop('disabled', false);
        }
    }
    //to reset sales order window
    function fn_resetQuotation(ele) {
        fn_loadQuotationForm();
    }

    // to reset Item details
    function fn_resetQuotationItem(ele) {
        //let $thisItem = $(ele).closest('[perfect-class="TempTableProduct"]');
        //$thisItem.find('[perfect-ctype="input"]').val('');
        fn_QuotationIndex_InitialLoad();
    }


     function fn_getWarrantyLists1(ele) {

                let $thisForm = $(ele).closest('[perfect-class="form"]');
                if ($thisForm.find('[name="FK_Product"]').val() == '' || $thisForm.find('[name="FK_Product"]').val() == null) {
                    NotificationMessage({ 'message': 'Please Select Product' });
                }
                else {
                    let prdid = $thisForm.find('[name="FK_Product"]').val();
                    $thisForm.find('[name="prodtid"]').val(prdid);
                    var warobject = [];
                    debugger
                    warobject = warrantydetails.filter(obj => obj.prodtid === prdid);
                    $('#formGroupModalwarranty').modal({ backdrop: 'static', keyboard: false })

                    $('#formGroupModalwarranty').modal('show');


                    if (warobject.length > 0) {

                        let tableOptionsTemp = wartableOptionsTempOut;
                        let insertData = [];
                        let tableKey = 'Warranty';
                        let indexname = 'Warranty' + 'index';
                        tableOptionsTemp.rowAttribute.push(indexname);
                        tableOptionsTemp.hideColumn.push(indexname);
                        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');
                        $.each(warobject, function (keyOne, valOne) {
                            let pData = {};
                            pData[indexname] = keyOne + 1;
                            $tblcontainer.attr('perfect-tempTable-lastindex', pData[indexname])

                            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                                let $this = $(this);
                                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                                let nameAttr = $this.attr('name');

                                if (typeof valOne[nameAttr] !== undefined) {

                                    if ($this.is('select')) {
                                        switch (headerName) {
                                            case "WarrantyType":
                                                headerName = "Warranty Type";
                                                break;
                                            default:
                                                headerName = headerName;
                                                break;
                                        }
                                        tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                                        tableOptionsTemp.hideColumn.push(nameAttr);
                                        //displat text of select
                                        pData[nameAttr + '_d'] = $this.find('[value="' + valOne[nameAttr] + '"]').text();
                                        pData[nameAttr] = valOne[nameAttr];
                                    }
                                    else if ($this.is('input')) {
                                        pData[nameAttr] = valOne[nameAttr];
                                    }
                                }
                            });

                            insertData.push(pData);


                        });
                        $tblcontainer.empty();
                        $tblcontainer.append(pft_table_createtable(insertData, tableOptionsTemp));

                    } else {
                        $thisForm.find('[perfect-tempTable= "Warranty"]').empty();
                    }

                    //if (warobject != null) {
                    //    if (warobject.length > 0) {
                    //        fillgrid('Warranty', wartableOptionsTempOut, $thisForm, warobject);

                    //    } else {
                    //        $thisForm.find('[perfect-tempTable= "Warranty"]').empty();;
                    //    }
                    //}
                }

    }

    function fn_getWarrantyLists(ele, mode) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        productclear(ele, 'Warranty');
        if ($thisForm.find('[name="FK_Product"]').val() == '' || $thisForm.find('[name="FK_Product"]').val() == null) {
            NotificationMessage({ 'message': 'Please Select Product' });
        }
        else {
            let prdid = $thisForm.find('[name="FK_Product"]').val();
            $thisForm.find('[name="prodtid"]').val(prdid);
            var warobject = [];
            if ($thisForm.data('pwarranty')) {

                if ($thisForm.data('pwarranty').length > 0) {

                    warrantydetails = $thisForm.data('pwarranty');

                    console.log("warrantydetailsed", warrantydetails)
                }
            }
            if (warrantydetails != null) {
                warobject = warrantydetails.filter(obj => obj.prodtid.toString() === prdid.toString());
            }
            $('#formGroupModalwarranty').modal({ backdrop: 'static', keyboard: false })
            console.log('warobject', warobject)
            if (mode == 0) {
                $('#formGroupModalwarranty').modal('show');
            }
            else {
                $('#formGroupModalwarranty').modal('hide');
            }

            if (warobject != null) {
                if (warobject.length > 0) {
                    fillgrid('Warranty', wartableOptionsTempOut, $thisForm, warobject);

                } else {
                    $thisForm.find('[perfect-tempTable= "Warranty"]').empty();;
                }
            }
        }

    }


     function fn_warrantydet(ele)
            {
                let $thisForm = $(ele).closest('[perfect-class="form"]');
         let prdid = $thisForm.find('[name="FK_Product"]').val();
                var uwarobject = [];
                uwarobject = warrantydetails.filter(obj => obj.prodtid === prdid);
                const indexOfObject = warrantydetails.findIndex(object => {
                    return object.prodtid === prdid;
                });

                warrantydetails.splice(indexOfObject, uwarobject.length);

         $thisForm.find('[perfect-tempTable="Warranty"]').find('tbody').find('tr').each(function () {

                    warrantydetails.push($(this).data('pData'));

                })

                $('#formGroupModalwarranty').modal('hide');
            }

     var wartableOptionsTempOut = {
                iconButton: {
                    buttons: [
                        {
                            icon: "fa fa-pencil btnPerfectGridEdit",
                            action: function () {
                                let savedData = $(this).closest('tr').data('pData')

                                let $tablecontainer = $(this).closest('[perfect-tempTable]');
                                let tableKey = $tablecontainer.attr('perfect-tempTable');
                                let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                                //index attribute name in table row
                                let indexname = tableKey + 'index';

                                //index number in table row
                                let rindex = $(this).closest('tr').attr(indexname);

                                $tablecontainer.attr('perfect-tempTable-action', rindex);


                                //filling data in available inputs
                                $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                                    let $thisNode = $(this);
                                    let pf_name = $thisNode.attr('name');
                                    if ($thisNode.is('select')) {

                                        $thisNode.val(savedData[pf_name]).selectpicker('refresh');

                                    }
                                    else if ($thisNode.is('input')) {
                                        let inputType = $thisNode.attr('type').toLocaleLowerCase();
                                        if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                            $thisNode.prop('checked', savedData[pf_name]);
                                        }

                                        else {

                                            $thisNode.val(savedData[pf_name]);
                                        }

                                    }
                                    else {
                                        $thisNode.val(savedData[pf_name]);
                                    }


                                });



                            }
                        },
                        {
                            icon: "fa fa-trash btnPerfectGridDelete",
                            action: function () {
                                let $thistbl = $(this).closest('table');
                                let table = $thistbl.DataTable();
                                table.destroy();
                                if ($(this).closest('tbody').find('tr').length > 1) {
                                    $(this).closest('tr').remove();
                                    pft_table_slreset($thistbl);

                                }
                                else {
                                    $thistbl.remove();
                                }

                            }
                        },
                    ]
                },

                rowAttribute: [],
                renameHeader: { "subProName": "Sub Product" ,"WarrantyType_d":"Type"},
                hideColumn: ['subProductID','prodtid'],
                serialNo: true,
                isDateType: ["Replcwardt","Serwardt"],

    };
    function validwartdetail(ele, tableKey, errorClass, isValid) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="WarrantyType"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="WarrantyType"]').val() == null) {

            isValid = false;
            $thisForm.find('[perfect-tempTable-' + tableKey + '="WarrantyType"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Warranty Type');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="WarrantyType"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }


        return isValid;

    }

    function fn_createWarrantyTable(ele, tkey, uniq = [], tableOptionsTempOut) {


        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let tableKey = tkey;
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');

        let insertData = {};
        let tableOptionsTemp = tableOptionsTempOut;
        let unique = (uniq) ? uniq : [];

        let isValid = true;
        let errorClass = '.temptableError';

        //make index
        let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
        let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
        let indexname = tkey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);
        let updateCond = '';
        let isNew = true;

        if (thisactionIndex > 0) {
            //means update
            insertData[indexname] = thisactionIndex;
            updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
            isNew = false;
        }
        else {
            //insert
            insertData[indexname] = lastIndex + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
            isNew = true;
        }
        //
        if (tableKey == 'Warranty') {

            isValid = validwartdetail(ele, tableKey, errorClass, isValid);
        }


        if (unique.length > 0) {
            //getting previous data
            let prevData = [];
            $tblcontainer.find('table > tbody').find('tr').each(function () {
                if (isNew) {
                    prevData.push($(this).data('pData'));
                }
                else {
                    if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                        prevData.push($(this).data('pData'));
                    }

                }

            })

            unique.forEach(function (key, i) {

                let $thisEle = $thisForm.find('[perfect-tempTable-' + tableKey + '="' + key + '"]');

                let atname = $thisEle.attr('name');
                let cvalue;

                if ($thisEle.length != 0) {
                    let $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
                    let errmessage = key + " Already exits"

                    //getting current value in cval
                    if ($thisEle.is('select')) {
                        cvalue = $thisEle.val();

                    }
                    else if ($thisEle.is('input')) {

                        let inputEleType = $thisEle.attr('type').toLocaleLowerCase();

                        if (inputEleType == 'checkbox') { cvalue = $thisEle.is(':checked'); }
                        else if (inputEleType == 'hidden') { cvalue = $thisEle.val(); }
                        else { cvalue = $thisEle.val(); }
                    }
                    else { cvalue = $thisEle.val(); }

                    //searching in previous data
                    if (prevData.find(a => a[atname] == cvalue)) {

                        $errorElement.text(errmessage);
                        isValid = false;
                    }
                }
            });

        }



        if (isValid) {
            // this section make table column data
            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');

                if ($this.is('select')) {
                    switch (headerName) {
                        case "WarrantyType":
                            headerName = "Warranty Type";
                            break;

                        default:
                            headerName = headerName;
                            break;
                    }
                    tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                    tableOptionsTemp.hideColumn.push(nameAttr)
                    //displat text of select
                    if ($this.val() != null) {
                        let selectText = ($this.val().length == 0) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    else {
                        let selectText = ($this.val() == null) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }

                    insertData[nameAttr] = $this.val();

                    $this.val('').selectpicker('refresh');


                }
                else if ($this.is('input')) {

                    insertData[nameAttr] = $this.val();

                    if (nameAttr == "prodtid") { }
                    else {
                        $this.val('');
                    }
                }

            });
            if (isNew) {
                //this section nake table.table row
                if ($tblcontainer.find('table').length == 0) {
                    $tblcontainer.append(pft_table_createtable([insertData], tableOptionsTemp));
                }
                else {

                    let table = $tblcontainer.find('table').DataTable()
                    table.destroy()
                    pft_table_addTableRow($tblcontainer.find('table'), insertData, tableOptionsTemp);


                }

            }
            else {

                let table = $tblcontainer.find('table').DataTable()
                table.destroy()

                pft_table_replaceTableRow($tblcontainer.find('table'), updateCond, insertData, tableOptionsTemp);

            }


            // resetting the edit value
            $tblcontainer.attr('perfect-tempTable-action', 0);
        }

        if (tableKey == 'Warranty') {


        }
        else if (tableKey == 'Payment') {
            BillAmountbind(ele);
        }
        else if (tableKey == 'Purchase') {
            BindBilldetails(ele);

        }

    }

    function productclear(ele, tableKey) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="input"]').val('');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="select"]').val('').selectpicker('refresh');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="text"]').val('');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="date"]').val('');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="hidden"]').val('');

        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');
        $tblcontainer.attr('perfect-tempTable-action', 0);
    }
    function fillgrid(tablk, wartableOptionsTempOut, $thisForm, data) {
        let tableOptionsTemp = wartableOptionsTempOut;
        let insertData = [];
        let tableKey = tablk;
        let indexname = tableKey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');
        $.each(data, function (keyOne, valOne) {
            let pData = {};
            pData[indexname] = keyOne + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', pData[indexname])
            //---

            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                //console.log('name', valOne[nameAttr])
                if (typeof valOne[nameAttr] !== undefined) {

                    if ($this.is('select')) {
                        //tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                        tableOptionsTemp.hideColumn.push(nameAttr);
                        //displat text of select
                        pData[nameAttr + '_d'] = $this.find('[value="' + valOne[nameAttr] + '"]').text();
                        pData[nameAttr] = valOne[nameAttr];
                        console.log('select', $this.find('options[value="' + valOne[nameAttr] + '"]').text());

                    }
                    else if ($this.is('input')) {

                        pData[nameAttr] = valOne[nameAttr];

                    }

                }

            });

            insertData.push(pData);
            console.log('pData', pData)
            console.log('insertData', insertData)
            //----

        });
        $tblcontainer.empty();
        $tblcontainer.append(pft_table_createtable(insertData, tableOptionsTemp));

    }

    function getfunction(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        console.clear();
        console.log('ID_LEAD', $thisForm.find('[name="FK_Lead"]').val());
        productclear(ele, 'Quotation');
        productclear(ele, 'Warranty');
        let $tblcontainer = $thisForm.find('[perfect-tempTable="Quotation"]');
        let $Ptblcontainer = $thisForm.find('[perfect-tempTable="Warranty"]');
        warrantydetails = [];
        othrchargelst = [];
        //$thisForm.data({ pwarranty: null });
        //$thisForm.data({ pOthrChgData: null });
        $tblcontainer.empty();
        $Ptblcontainer.empty();
        $thisForm.find('[perfect-tempTable-Quotation]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
        $thisForm.find('[perfect-tempTable-Warranty]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');



        $thisForm.find('[name="QuotationBillTotal"]').val('');
        $thisForm.find('[name="OtherCharge"]').val('');
        $thisForm.find('[name="QuotationDiscount"]').val('');
        $thisForm.find('[name="QuotationNetAmount"]').val('');
        $thisForm.find('[name="QuotationNetAmount"]').val('');
        $thisForm.find('[name=CustomeName]').attr("readonly", "readonly")

        //if ($thisForm.find('[name=MobileNo]').val() == '' || $thisForm.find('[name=MobileNo]').val() == null) {

        //    $thisForm.find('[name=MobileNo]').removeAttr("readonly")
        //    $thisForm.find('[name=CustomeName]').addClass("perfectValidate_string")
        //}
        //else {
        //    $thisForm.find('[name=CustomeName]').removeClass("perfectValidate_string")
        //    $thisForm.find('[name=MobileNo]').attr("readonly", "readonly")
        //    //$thisForm.find('[name=prdbtn]').attr("readonly", "readonly")

        //}
        let InputData;
        if ($thisForm.find('[name="ddlImportsList"]').val() == 2) {
            InputData =
            {
                FK_Master: $thisForm.find('[name="FK_Lead"]').val(),
                IsLead: 1
            }
        }
        console.log('InputData', InputData)
        debugger
        if ($thisForm.find('[name="ddlImportsList"]').val() != 1) {
            $.ajax({
                url: "@Url.Action("GetLeadFill", "Quotation")",
                type: "Get",
                data: InputData,
                dataType: "json",
                contentType: "application/json",
                success: function (ajaxOutput) {
                    if (ajaxOutput.Process.IsProcess) {

                        let table = JSON.parse(ajaxOutput.Data);
                        //console.clear();
                        console.log(ajaxOutput.Data)
                        fillgrid('Quotation', tableOptionsLeadItem, $thisForm, table.dtable);
                        fn_bindBillDetails(ele)
                        fn_roundoff(ele);
                    }
                    else {
                        $.each(ajaxOutput.Process.Message, function (key, value) {
                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': "No Products Found"});
                            //$thisForm.find('[name=AdvAmount]').val('');
                        });

                    }
                },
                complete: function () {
                    $(ele).prop('disabled', false);
                }
            });

        }
    }


    function decimalpnt(ele, name, range) {

        let input = $('#' + name);
        ele.value = ele.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');
        let t = ele.value;
        ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t;
        input.on('keydown', function () {
            if (ele.value.includes('.')) {

            }
            var key = event.keyCode || event.charCode;
            if (key == 8 || key == 46) { }
            else {
                if (ele.value.length == 9) {
                    ele.value = ele.value + '.';
                }
            }

        });

    }


    function datencheck(ele) {

        let $thisForm = "";

        $thisForm = $(ele).closest('[perfect-class="form"]');

        //invalid-feedback
        let RegDate = $thisForm.find('[name="QuoEntrDate"]').val();

        RegDate = new Date(RegDate);
        RegDate.setHours(0, 0, 0, 0)


        let today = new Date();
        today.setHours(0, 0, 0, 0);
        console.log('RegDate', RegDate)
        console.log('today', today)
        if (RegDate > today) {

            $thisForm.find('[name="QuoEntrDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('Enquiry date should be lessthan or equal to Todays date')
            return false;
        }
        else {

            $thisForm.find('[name="QuoEntrDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('')
            return true;
        }

    }
</script>



