@model PerfectWebERP.Models.PaperModel.PaperRenewalView


<div class="card ">
    <div class="card-header">
        <h4 class="card-title col-12">@ViewBag.PageTitle</h4>
        <span title="To View List" onclick="fn_showListView();"><svg id="Layer_1" class="layer" stroke="currentColor" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" height="20" width="20" viewBox="0 0 122.88 122.54"><title>To View List</title><path class="viewlst" d="M4.69,0H46.22a4.71,4.71,0,0,1,4.69,4.69V46a4.69,4.69,0,0,1-4.69,4.69H4.69a4.65,4.65,0,0,1-3.31-1.38l-.09-.09A4.67,4.67,0,0,1,0,46V4.69A4.71,4.71,0,0,1,4.69,0ZM89.44,61.94a26.56,26.56,0,0,1,10.18,2l.07,0a26.61,26.61,0,0,1,15.25,32.16,26.18,26.18,0,0,1-2.7,6.11l10.3,11.24a1.27,1.27,0,0,1-.07,1.8l-7.57,6.9a1.27,1.27,0,0,1-1.79-.07l-9.86-10.85a26.36,26.36,0,0,1-6.1,2.74,26.87,26.87,0,0,1-7.71,1.13,26.51,26.51,0,0,1-10.17-2l-.07,0A26.64,26.64,0,0,1,64.85,78.37l0-.07A26.6,26.6,0,0,1,89.44,61.94Zm15,11.59a21.38,21.38,0,0,0-6.89-4.61l-.06,0a21.22,21.22,0,0,0-23.07,4.64l-.07.07a21.25,21.25,0,0,0-4.54,6.83l0,.06a21.32,21.32,0,0,0-1.58,8.06,21.26,21.26,0,0,0,29.35,19.62,21.54,21.54,0,0,0,6.89-4.61l.07-.07a21.09,21.09,0,0,0,4.54-6.83l0-.06a21.35,21.35,0,0,0,0-16.17,21.34,21.34,0,0,0-4.62-6.9ZM4.69,63.2H46.22a4.71,4.71,0,0,1,4.69,4.7v41.34a4.68,4.68,0,0,1-4.69,4.69H4.69A4.69,4.69,0,0,1,0,109.24V67.9a4.71,4.71,0,0,1,4.69-4.7ZM68.78,0h41.53A4.71,4.71,0,0,1,115,4.69V46a4.71,4.71,0,0,1-4.69,4.69H68.78A4.71,4.71,0,0,1,64.09,46V4.69a4.69,4.69,0,0,1,1.37-3.31l.1-.09A4.67,4.67,0,0,1,68.78,0Z"></path></svg></span>
    </div>
    <div class="card-body">
        <form id="" class="form-valide" perfect-class="form" action="#" method="post" perfect-onFormSuccess="">
            <div class="">
                @Html.AntiForgeryToken()

                <div class="row">


                    <div class="col-sm-4" id="Vehipop">
                        <input type="hidden" name="ID_PaperMaintenance" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                        <input type="hidden" name="temprenuew" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label" id="Products">
                                @ViewBag.lblpro
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <input type="text" class="form-control perfectValidate_string"  name="ID_Name" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly  />
                                    <input type="hidden" name="ID_FIELD" id="ID_FIELD_DATA" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input"/>
                                    <input type="hidden" name="FK_Master" perfect-class="formGroupControl" perfect-ctype="hidden" value="" perfect-css="input" />
                                    <div class="input-group-append">
                                        <button id="addcountry-jq-searchButton3" name="prdbtn" class="btn btn-primary fa fa-search" type="button" onclick="searchbtn(this)" Criterea1="0" Criterea2="0" Function="1" BindName="ID_Name" BindVal="FK_Master" perfect-css="button"></button>

                                    </div>
                                    <div class="text-danger temptableError"></div>
                                </div>
                            </div>
                        </div>
                    </div>



                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Trans Date</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="date" id="TransDate" class="form-control perfectValidate_date" name="TransDate" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" max="2050-01-01" onchange="fndatedoublecheck(this)" />
                                <div class="invalid-feedback animated fadeInUp limit-check" style="display: block;"></div>

                            </div>
                        </div>
                    </div>

                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Effect Date</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="date" id="EffectDate" class="form-control perfectValidate_date" name="EffectDate" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" max="2050-01-01" onchange="fndatecheck(this)" />
                                <div class="invalid-feedback animated fadeInUp limit-check" style="display: block;"></div>

                            </div>
                        </div>
                    </div>
                    <div class="card " id="paperrenewaldetailsdiv">
                        <div class="daccordion__header">
                            <span class="accordion__header--text">Renewal Details</span>
                        </div>
                        <div class="card-body" style="min-height:250px">


                            <div class="row">



                                <div class="col-sm-4">

                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-4 col-form-label">
                                            <span perfect-class="formGroupLabel">Paper</span>
                                            <span class="text-danger">*</span>
                                        </label>
                                        <div class="col-sm-8">
                                            <select class="form-control Subproduct" id="FK_Paper" name="FK_Paper" placeholder="Please Select" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" data-live-search="true" perfect-tempTable-cstatus="Paper" onchange="ResetTax(this); fn_selectprovider(this);">
                                                <option value="">Please select</option>
                                                @if (!(Model.PaperList is null))
                                                {
                                                    foreach (var menuGroup in Model.PaperList)
                                                    {
                                                        <option value="@menuGroup.FK_Paper">@menuGroup.PaperName</option>
                                                    }
                                                }
                                            </select>
                                            <span class="invalid-feedback animated fadeInUp d-block temptableError"></span>
                                        </div>
                                    </div>

                                </div>

                                <div class="col-sm-4">

                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-4 col-form-label">
                                            <span perfect-class="formGroupLabel">Provider</span>
                                            <span class="text-danger">*</span>
                                        </label>
                                        <div class="col-sm-8">
                                            <select class="form-control Subproduct" id="FK_Provider" name="FK_Provider" placeholder="Please Select" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" data-live-search="true" perfect-tempTable-cstatus="Provider">
                                                <option value="">Please select</option>
                                                @if (!(Model.ProviderList is null))
                                                {
                                                    foreach (var menuGroup in Model.ProviderList)
                                                    {
                                                        <option value="@menuGroup.FK_Provider">@menuGroup.PaperProviderName</option>
                                                    }
                                                }
                                            </select>
                                            <span class="invalid-feedback animated fadeInUp d-block temptableError"></span>
                                        </div>
                                    </div>

                                </div>

                                <div class="col-sm-4">
                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-4 col-form-label">
                                            <span perfect-class="formGroupLabel">Paper Number</span>
                                            <span class="text-danger">*</span>
                                        </label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control Subproduct" placeholder="" name="PmdPaperNo" perfect-class="formGroupControl" perfect-ctype="input" oninput="this.value = this.value.replace(/[^A-Za-z0-9]/g, '')" maxlength="12" perfect-css="input" perfect-tempTable-cstatus="Number" />
                                            <span class="invalid-feedback animated fadeInUp d-block temptableError"></span>
                                        </div>

                                    </div>
                                </div>

                                <div class="col-sm-4">

                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-4 col-form-label">
                                            <span perfect-class="formGroupLabel">Issue Date</span>
                                            <span class="text-danger">*</span>
                                        </label>
                                        <div class="col-sm-8">
                                            <input type="date" class="form-control Subproduct" name="PmdIssueDate" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" perfect-tempTable-cstatus="IssueDate" max="2050-01-01" />
                                            @*<div class="invalid-feedback animated fadeInUp limit-check" style="display: block;"></div>*@
                                            <span class="invalid-feedback animated fadeInUp d-block temptableError"></span>
                                        </div>
                                    </div>
                                </div>

                                <div class="col-sm-4">
                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-4 col-form-label">
                                            <span perfect-class="formGroupLabel">Expiry date</span>
                                            <span class="text-danger">*</span>
                                        </label>
                                        <div class="col-sm-8">
                                            <input type="date" class="form-control Subproduct" name="PmdExpireDate" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" perfect-tempTable-cstatus="Expirydate" max="2050-01-01" />

                                            <span class="invalid-feedback animated fadeInUp d-block temptableError"></span>
                                            <span class="invalid-feedback animated fadeInUp d-block temptableError1"></span>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-4">
                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-4 col-form-label">
                                            <span perfect-class="formGroupLabel">Amount</span>
                                            @*<span class="text-danger">*</span>*@
                                        </label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control text-right Subproduct" maxlength="12" id="PmdPaperAmount" placeholder="" name="PmdPaperAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="decimalpnt(this,'PmdPaperAmount',3)" perfect-tempTable-cstatus="PaperAmount" onchange="totalamountcalc(this)" />
                                            @*<span class="invalid-feedback animated fadeInUp d-block temptableError"></span>*@
                                        </div>

                                    </div>
                                </div>
                                @*<div class="col-sm-4">
            <div class="form-group row" perfect-class="formGroup">
                <label class="col-sm-4 col-form-label">
                    <sTax Include	an perfect-class="formGroupLabel">Tax Amount</span>
                </label>
                <div class="col-sm-8">
                    <input type="text" class="form-control text-right" maxlength="13" autocomplete="off" placeholder="" name="PmdPaperTaxAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="decimalpnt(this,'PmdPaperTaxAmount',3)" perfect-tempTable-cstatus="PmdPaperTaxAmount" onchange="totalamountcalc(this)" />
                </div>

            </div>
        </div>*@
                                <div class="col-sm-4">
                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-4 col-form-label">

                                            <span perfect-class="formGroupLabel">Tax Amount</span>


                                        </label>
                                        <div class="col-sm-8">
                                            <div class="input-group">
                                                <input type="text" class="form-control text-right" placeholder="" name="PmdPaperTaxAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" onchange="totalamountcalc(this)" maxlength="12" perfect-tempTable-cstatus="PmdPaperTaxAmount" disabled />

                                                <div class="input-group-append">
                                                    <button id="TaxButton" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="ShowTax(this,1)"></button>
                                                    <div class="modal fade" perfect-class="formGroupModalTax" id="formGroupModalTax">
                                                        <div class="modal-dialog" role="document">
                                                            <div class="modal-content  rounded-0">
                                                                <div class="modal-header border-0">
                                                                    <h5 class="modal-title">Tax Details</h5>
                                                                    <button type="button" class="close" data-dismiss="modal">
                                                                        <span>&times;</span>
                                                                    </button>
                                                                </div>
                                                                @*<div class="table-responsive" style="max-height: 100%; height: 80%; overflow: auto;">*@
                                                                <table id="zero_config" class="table mb-0  table-striped  text-black">
                                                                    <thead class="bg-primary text-white">
                                                                        <tr>
                                                                            <th class="t-head">SlNo</th>
                                                                            <th class="t-head" style="display:none">ID_TaxType</th>
                                                                            <th class="t-head" style="display:none">FK_Paper</th>
                                                                            <th class="t-head">TaxType</th>
                                                                            <th class="t-head text-right">Amount</th>
                                                                        </tr>
                                                                    </thead>
                                                                    <tbody class="modal-body" id="formGroupModalTaxbody"></tbody>
                                                                    <tfoot>
                                                                    </tfoot>
                                                                </table>
                                                                @*</div>*@
                                                                @*<div class="modal-body" id="formGroupModalTaxbody">
                                        </div>*@
                                                                <div class="modal-footer">
                                                                    @*<button type="button" onclick="CreateProductCheckDescription(this);" class="btn btn-primary">Add</button>*@
                                                                    <button type="button" class="btn btn-primary1" data-dismiss="modal" onclick="BindTaxAmount(this)">Ok</button>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-sm-8 ml-2">
                                                <input type="checkbox" class="form-check-input" name="PmIncludeTax" id="taxinclude" perfect-class="formCheckInput" perfect-ctype="checkbox" perfect-css="checkbox" perfect-tempTable-cstatus="PmIncludeTax" onchange="totalamountcalc(this)"><span perfect-class="formCheckInputText">Include Tax</span>

                                            </div>
                                        </div>

                                    </div>

                                </div>

                                <div class="col-sm-4">
                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-4 col-form-label">
                                            <span perfect-class="formGroupLabel">Net Amount</span>
                                        </label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control text-right" placeholder="" name="PmdPaperNetAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" maxlength="12" id="PmdPaperNetAmount" oninput="decimalpnt(this,'PmdPaperNetAmount',3)" perfect-tempTable-cstatus="PmdPaperNetAmount" disabled />

                                        </div>

                                    </div>
                                </div>

                                <div class="col-sm-4">
                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-4 col-form-label">
                                            <span perfect-class="formGroupLabel">Warning Before(Days)</span>
                                            @*<span class="text-danger">*</span>*@
                                        </label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control text-right Subproduct" id="PmdWarningBefore" placeholder="" name="PmdWarningBefore" perfect-class="formGroupControl" perfect-ctype="input" onkeypress='return /[0-9]/i.test(event.key)' perfect-css="input" perfect-tempTable-cstatus="WarningBefore" maxlength="5" />
                                            @*<span class="invalid-feedback animated fadeInUp d-block temptableError"></span>*@
                                        </div>

                                    </div>
                                </div>
                                <div class="col-sm-12" style="text-align:right;">
                                    <button class="btn btn-primary1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" title="Add" onclick="SubProductDetailsTable_create(this,'cstatus',['FK_Provider','Number'])"><i class="fa fa-plus" aria-hidden="true"></i></button>

                                    &nbsp;
                                    <button class="btn btn-light1" type="button" id="btnresetMtrl" data-toggle="tooltip" data-placement="top" data-html="true" onclick="clearsubproduct(this,'cstatus')"><i class="fa fa-refresh" aria-hidden="true"></i></button>
                                </div>
                            </div>
                        </div>

                        <div class="row">


                            <div class="col-sm-12 mt-2">

                                <div class="table-responsive" perfect-tempTable="cstatus" perfect-tempTable-lastindex="0" perfect-tempTable-action="0">

                                </div>
                            </div>

                            <div class="row">
                                <div class="col-sm-8">
                                    <div class="table-responsive " perfect-tempTable="ComplaintDetails" id="Emptable" style="display:none">
                                        <table class="table table-responsive-md" id="EMPL">
                                            <thead class="btn-primary" id="EMPLS">
                                                <tr>
                                                    <th scope="col" style="text-align:center">SL.NO</th>

                                                    <th style="display:none; text-align:center"><strong>ID_PaperMaintenanceDetails</strong></th>
                                                    <th style="display:none; text-align:center"><strong>FK_PaperMaintenance</strong></th>
                                                    <th style="display:none; text-align:center"><strong>FK_Paper</strong></th>
                                                    <th style="display:none; text-align:center"><strong>FK_Provider</strong></th>
                                                    <th scope="col" style="text-align:center">Provider</th>
                                                    <th scope="col" style="text-align:center">Number</th>
                                                    <th style="display:none; text-align:center"><strong>ID_Mode</strong></th>
                                                    <th scope="col" style="text-align:center">Issue Date</th>
                                                    <th scope="col" style="text-align:center">Expiry Date</th>
                                                    <th scope="col" style="text-align:center">Amount</th>
                                                    <th scope="col" style="text-align:center">TaxAmount</th>
                                                    <th scope="col" style="text-align:center">NetAmount</th>
                                                    <th scope="col" style="text-align:center">Tax Include</th>




                                                    <th scope="col" style="text-align:center">Warning Before</th>


                                                    <th scope="col" style="text-align:center"></th>


                                                </tr>
                                            </thead>
                                            <tbody id="ComplaintDetailstbody">
                                                <tr id="0">
                                                    <td style="text-align:center;" colspan="4">No Records..</td>
                                                </tr>

                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>

                        </div>


                    </div>
                </div>
            </div>

            <div class="row">

                <div class="col-sm-3">

                    <div class="form-group row" perfect-class="formGroup">
                        <div class="col-sm-12">
                            <div id="prdimg" class="tab-pane active" style="padding-left:12px">
                                <div class="row">
                                    <div class="col-sm-2">
                                    </div>
                                    <div class="col-sm-10">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <div class="upload-btnup-wrapper">
                                                <button type="button" id="btndocsUpload" class="btnup btn"><span class="accordion__header--text">Upload Documents</span></button>

                                            </div>

                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                @* End File Upload*@

                <div class="col-sm-3">
                    <div class="form-group row" perfect-class="formGroup">
                        <label class="col-sm-4 col-form-label">
                            <span perfect-class="formGroupLabel">Other Charges</span>
                        </label>
                        <div class="col-sm-8">
                            <div class="input-group">
                                <input type="text" class="form-control text-right" name="OtherCharge" perfect-class="formGroupControl" id="OtherChargePaperRenew" onchange="totalamountcalculation(this)" perfect-ctype="input" perfect-css="input" readonly="">
                                <div class="input-group-append">
                                    <button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-credit-card" type="button" perfect-css="button" onclick="fn_showOtherCharges(PaperrenewTransMode, PaperRenewID, 'OtherChargePaperRenew')"></button>
                                </div>
                                <div class="modal fade" perfect-class="formGroupModalOtherCharge" id="formGroupModalOtherCharge">
                                    <div class="modal-dialog modal-dialog-centered" role="document">
                                        <div class="modal-content  rounded-0">
                                            <div class="modal-header border-0">
                                                <h5 class="modal-title">Other Charge Details</h5>
                                                <button type="button" class="close" data-dismiss="modal">
                                                    <span>×</span>
                                                </button>
                                            </div>
                                            <div class="modal-body" perfect-class="formGroup" style="max-height: calc(100vh - 200px); overflow-y: auto;padding: 1rem;">

                                                <table id="zero_configOthercharge" class="table mb-0  table-striped  text-black">
                                                    <thead class="bg-primary text-white">
                                                        <tr>
                                                            <th class="t-head">SlNo</th>
                                                            <th class="t-head" style="display:none">ID_OtherChargeType</th>
                                                            <th class="t-head">Type</th>
                                                            <th class="t-head">Trans Type</th>
                                                            <th class="t-head">Amount</th>

                                                        </tr>
                                                    </thead>
                                                    <tbody id="formGroupModalOtherChargebody"></tbody>
                                                    <tfoot>
                                                    </tfoot>
                                                </table>
                                                <div class="modal-footer">
                                                    <button type="button" class="btn btn-primary light" data-dismiss="modal" onclick="BindOtherChargeAmount(this)">Apply</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-sm-3">
                    <div class="form-group row" perfect-class="formGroup">
                        <label class="col-sm-4 col-form-label">
                            <span perfect-class="formGroupLabel">Total Amount</span>
                        </label>
                        <div class="col-sm-8">
                            <input type="text" class="form-control text-right" placeholder="" name="PmTotalAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input"  id="PmdPaperNetAmount" oninput="decimalpnt(this,'PmdPaperNetAmount',3)" disabled />

                        </div>

                    </div>
                </div>



                <div class="col-sm-3">
                    <div class="form-group row" perfect-class="formGroup">
                        <label class="col-sm-4 col-form-label">Payment Method</label>
                        <div class="col-sm-5">
                            <div class="input-group">

                                <div class="input-group-append">
                                    <button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-money" type="button" perfect-css="button" title="Add Payment Method" onclick="GetPaymentlists(this)"></button>

                                </div>
                            </div>

                        </div>
                    </div>
                </div>

                <div class="modal fade" perfect-class="formGroupModalpayment" id="formGroupModalpayment">
                    <div class="modal-dialog  modal-dialog-centered modal-md" role="document">
                        <div class="modal-content">
                            <div class="modal-header border-0">
                                <h5 class="modal-title">Payment Method</h5>
                                <button type="button" class="close" data-dismiss="modal">
                                    <span>&times;</span>
                                </button>
                            </div>
                            <div class="modal-body" perfect-class="formGroup" style="max-height: calc(100vh - 200px); overflow-y: auto;padding: 1rem;">
                                <div class="row">


                                    <div class="col-sm-12">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">Method <span class="text-danger">*</span></label>
                                            <div class="col-sm-8">
                                                <div class="input-group">
                                                    <select class="form-control" perfect-tempTable-Payment="PaymentMethod" name="PaymentMethod" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select">
                                                        <option value="">Please Select </option>

                                                        @if (!(Model.PaymentView is null))
                                                        {
                                                            foreach (var Module in Model.PaymentView)
                                                            {
                                                                if (Module.PMDefault == true)
                                                                {
                                                                    <option value="@Module.PaymentmethodID" selected>@Module.Name</option>
                                                                }
                                                                else
                                                                {
                                                                    <option value="@Module.PaymentmethodID">@Module.Name</option>
                                                                }

                                                            }
                                                        }
                                                    </select>


                                                </div>
                                                <div class="text-danger temptableError"></div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-12">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">Ref No.</span>

                                            </label>
                                            <div class="col-sm-8">

                                                <div class="input-group">
                                                    <input type="text" class="form-control perfectValidate_string_nm" perfect-tempTable-Payment="Refno" name="Refno" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" maxlength="250" />

                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-sm-12">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">Amount</span>
                                                <span class="text-danger">*</span>
                                            </label>
                                            <div class="col-sm-8">
                                                <div class="input-group">
                                                    <input type="text" class="form-control text-right" perfect-tempTable-Payment="PAmount" id="PAmount" name="PAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="decimalpnt(this,'PAmount',3)" onchange="Pamount(this)" maxlength="12" />

                                                </div>
                                                <div class="text-danger temptableError"></div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-9">


                                    </div>
                                    <div class="col-sm-3 text-right">
                                        <div class="input-group">

                                            <div class="input-group-append">
                                                <div>
                                                    <button type="button" class="btn btn-primary1 " onclick="createtable(this,'Payment',['PaymentMethod'],paytableOptionsTempOut)"><i class="fa fa-plus" aria-hidden="true"></i></button>
                                                    <button class="btn btn-light1" type="button" onclick="productclear(this, 'Payment')"><i class="fa fa-refresh" aria-hidden="true"></i></button>
                                                </div>
                                            </div>
                                        </div>

                                    </div>
                                    <div class="col-sm-12">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel" style="font-weight:500;">Bal. Amount :</span>

                                            </label>
                                            <div class="col-sm-8">
                                                <div class="input-group">

                                                    <label class="col-form-label">
                                                        <span perfect-class="formGroupLabel" style="font-weight:500;" name="BalAmt"></span>
                                                    </label>
                                                    @*<input type="text" class="form-control" perfect-temptable-payment="BalAmt" name="BalAmt" perfect-class="" perfect-ctype="input" perfect-css="input" readonly="" style="border:white;background:white;font-weight: 500;">*@
                                                </div>
                                            </div>
                                        </div>
                                    </div>


                                    <div class="col-sm-12">
                                        <div class="form-group row" perfect-class="formGroup">

                                            <div class="table-responsive" perfect-tempTable-Payment="" perfect-tempTable="Payment" id="Paymentdethead" perfect-tempTable-lastindex="0" perfect-tempTable-action="0"></div>
                                            <div class="text-danger temptableError"></div>

                                        </div>
                                    </div>


                                </div>
                                <div class="modal-footer">
                                    @*<button type="button" onclick="CreateProductCheckDescription(this);" class="btn btn-primary">Add</button>*@
                                    <button type="button" class="btn btn-primary light" onclick="Billttlnetchck(this)">Apply</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
       
            
        


            <div class="card-footer text-right" perfect-class="formFooter">
                @if (ViewBag.PagedAccessRights.UsrrlMsEdt)
                {
                    <button id="addcompany-jq-addnewuser" type="button" class="btn btn-primary mr-3 addcompany-jq-addnewuserUpdate d-none" name="update" perfect-css="button" onclick="fn_Paperrenewal_add(this,'Update')"><i class="fa fa-refresh fa-spin  loaderClass"></i>Update</button>
                }
                @if (ViewBag.PagedAccessRights.UsrrlMsAdd)
                {
                    <button id="addcompany-jq-addnewuser" type="button" class="btn btn-primary mr-3 " name="add" perfect-css="button" onclick="fn_Paperrenewal_add(this,'Add')"><i class="fa fa-refresh fa-spin loaderClass "></i>Save</button>
                }
                <button type="button" class="btn btn-light" perfect-css="button" onclick="ResetButton(this)" name="reset">Clear</button>
            </div>




        </form>


    </div>



</div>


<script src="~/Scripts/jqDOM/searchDOMCreation.js"></script>
<script src="~/Scripts/jqDOM/searchDOMCreation.js"></script>
<script>
    //load fn

    var PssfupDocsList = [];

    (function () {
      // jQuery('form').validate();//<-----  Validate/initialize our form on page load
        jQuery('select').selectpicker();
    })();


    $(document).ready(function () {
        var now = new Date();

        var day = ("0" + now.getDate()).slice(-2);
        var month = ("0" + (now.getMonth() + 1)).slice(-2);

        var today = now.getFullYear() + "-" + (month) + "-" + (day);

        //$('#EffectDate').val(today);
        //$('#TransDate').val(today);


    });

    $("#btndocsUpload").click(function () {
        let $thisForm = $(this).closest('[perfect-class="form"]');
        let MasterId = $thisForm.find('[name="ID_PaperMaintenance"]').val() == "" ? "0" : $thisForm.find('[name="ID_PaperMaintenance"]').val();
        let header = "Paper Documents";
        OpenModalForUpload(MasterId, PaperrenewTransMode, header);
    })
    //function decimalpnt(ele, id, range) {

    //    let input = $('#' + id);
    //    ele.value = ele.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');
    //    let t = ele.value;
    //    ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t;
    //    input.on('keydown', function () {
    //        if (ele.value.includes('.')) {

    //        }
    //        var key = event.keyCode || event.charCode;
    //        if (key == 8 || key == 46) { }
    //        else {
    //            if (ele.value.length == 9) {
    //                ele.value = ele.value + '.';
    //            }
    //        }

    //    });

    //}
    function decimalpnt(ele, id, range) {
        debugger
        let input = $('#' + id);

        ele.value = ele.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');
        let t = ele.value;
        ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t;

        $(document).on('keydown', '#' + id, function (event) {

            if (ele.value.includes('.')) {

            }
            else if (ele.value === '.' && (event.key === '.' || event.keyCode === 190)) {
                ele.value = '0.00'; // Change the value to '0.00' if only a dot is entered
                // Prevent the dot from being entered in the input field
            }
            var key = event.keyCode || event.charCode;
            if (key == 8 || key == 46) { }
            else {
                if (ele.value.indexOf('.') < 0 && ele.value.indexOf('.') !== 9 && ele.value.length > 8) {
                    ele.value = ele.value + '.';
                }
            }

        });

    }


    function ResetButton(ele)
    {

        initialloadRenewform();

    }
    //function fnaddition(ele) {
    //    debugger
    //    let $thisForm = $(ele).closest('[perfect-class="form"]');
    //    let Amount = 0;
    //    let tax = 0;

    //     Amount = $thisForm.find('[name="PmdPaperAmount"]').val() == "" ? "0" : $thisForm.find('[name="PmdPaperAmount"]').val() ;
    //    tax = $thisForm.find('[name="PmdPaperTaxAmount"]').val() == "" ? "0" : $thisForm.find('[name="PmdPaperTaxAmount"]').val();

    //    let netamount = 0;

    //    netamount = parseFloat(Amount) + parseFloat(tax);
    //    $thisForm.find('[name="PmdPaperNetAmount"]').val(parseFloat(netamount).toFixed(2));

    //}

    function fndatecheck(ele) {
        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');

        let upperlimit = $thisForm.find('[name="EffectDate"]').val();


        let lowerlimit = $thisForm.find('[name="TransDate"]').val();



       

        upperlimit = new Date(upperlimit);
        upperlimit.setHours(0, 0, 0, 0)



        lowerlimit = new Date(lowerlimit);
        lowerlimit.setHours(0, 0, 0, 0)
        

        if (upperlimit < lowerlimit ) {

            //console.log('inside limit check if')
            $thisForm.find('[name="EffectDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('Effect Date should be greater than or equal to Trans date');
            $thisForm.find('[name="EffectDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').show();
            $thisForm.find('[name="EffectDate"]').trigger('blur');
            return false;
        }


        else {

            $thisForm.find('[name="EffectDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('');
            return true;
        }



    }
    function GetPaymentlists(ele) {
        $('#formGroupModalpayment').modal({ backdrop: 'static', keyboard: false })

        $('#formGroupModalpayment').modal('show');

    }
    function Pamount(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let amtp = $thisForm.find('[name="PAmount"]').val() == "" ? "0" : $thisForm.find('[name="PAmount"]').val();
        $thisForm.find('[name="PAmount"]').val(parseFloat(amtp).toFixed(2))
    }

    function productclear(ele, tablekey) {

        let $thisform = $(ele).closest('[perfect-class="form"]');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="select"]').val('').selectpicker('refresh');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="date"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="hidden"]').val('');

        let $tblcontainer = $thisform.find('[perfect-tempTable="' + tablekey + '"]');
        $tblcontainer.attr('perfect-tempTable-action', 0);

        if (tablekey = "Purchase") {
            $thisform.find('[name=prdbtn]').removeAttr("disabled", "disabled")

        }
        else if (tablekey = "Warranty") {
            //warrantydetails = [];
        }
        else if (tablekey = "Payment") {

        }
    }





    var paytableOptionsTempOut = {
    
        iconButton: {
            buttons: [

                {
                    icon: "fa fa-pencil btnPerfectGridEdit",
                    action: function () {
                        let savedData = $(this).closest('tr').data('pData')

                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let tableKey = $tablecontainer.attr('perfect-tempTable');
                        let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                        //index attribute name in table row
                        let indexname = tableKey + 'index';

                        //index number in table row
                        let rindex = $(this).closest('tr').attr(indexname);

                        $tablecontainer.attr('perfect-tempTable-action', rindex);

                        console.log('Editclick', savedData);
                        //filling data in available inputs
                        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                            let $thisNode = $(this);
                            let pf_name = $thisNode.attr('name');
                            if ($thisNode.is('select')) {

                                $thisNode.val(savedData[pf_name]).selectpicker('refresh');

                            }
                            else if ($thisNode.is('input')) {
                                let inputType = $thisNode.attr('type').toLocaleLowerCase();
                                if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                    $thisNode.prop('checked', savedData[pf_name]);
                                }

                                else {

                                    $thisNode.val(savedData[pf_name]);
                                }

                            }
                            else {
                                $thisNode.val(savedData[pf_name]);
                            }


                        });



                    }
                },
                {
                    icon: "fa fa-trash btnPerfectGridDelete",
                    action: function () {
                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let $thistbl = $(this).closest('table');
                        let table = $thistbl.DataTable();
                        table.destroy();
                        if ($(this).closest('tbody').find('tr').length > 1) {
                            $(this).closest('tr').remove();
                            pft_table_slreset($thistbl);
                            //$thistbl.dataTable({ paging: true, searchbtn: false });
                        }
                        else {
                            $thistbl.remove();
                        }
                        BillAmountbind($tablecontainer);
                    }
                },
            ]
        },
        rowAttribute: [],
        onlyShowColumn: ['PAmount', 'Refno', 'PaymentMethod_d'],
        renameHeader: { "PAmount": "Amount1R", "Refno": "Ref No", "PaymentMethod_d": "Method" },
        hideColumn: ['BalAmt'],

        serialNo: true,

    };

    function validpaymntdetail(ele, tableKey, errorClass, isValid) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').val() == null) {

            isValid = false;
            console.log('false', $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').val());
            $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Payment Method');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }

        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="PAmount"]').val() < 1) {
            console.log('false', $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').val());
            isValid = false;

            $thisForm.find('[perfect-tempTable-' + tableKey + '="PAmount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please enter a value greater than or equal to 1');
        }
        else {

            $thisForm.find('[perfect-tempTable-' + tableKey + '="PAmount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }


        return isValid;
    }

    function Billttlnetchck(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');

        let balamt = $thisForm.find('[name=BalAmt]').text();


        if (parseFloat(balamt) == 0) {
            $('#formGroupModalpayment').modal('hide');
            $thisForm.find('[perfect-tempTable="Payment"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
        }
        else {

            $thisForm.find('[perfect-tempTable="Payment"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('Balance Amt. should be Zero');

        }
    }

    function createtable(ele, tkey, uniq = [], tableOptionsTempOut) {


        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let tableKey = tkey;
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');

        let insertData = {};
        let tableOptionsTemp = tableOptionsTempOut;
        //console.log('tableOptionsTemp', tableOptionsTemp)
        let unique = (uniq) ? uniq : [];

        let isValid = true;
        let errorClass = '.temptableError';

        //make index
        //console.log('check 1');

        let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
        let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
        let indexname = tkey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);
        //console.log('tableOptionsTemp.rowAttribute', tableOptionsTemp.rowAttribute)
        let updateCond = '';
        let isNew = true;

        if (thisactionIndex > 0) {
            //means update
            insertData[indexname] = thisactionIndex;
            updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
            isNew = false;
        }
        else {
            //insert
            insertData[indexname] = lastIndex + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
            isNew = true;
        }
        //
        if (tableKey == 'Warranty') {

            isValid = validwartdetail(ele, tableKey, errorClass, isValid);
        }
        else if (tableKey == 'Payment') {
            isValid = validpaymntdetail(ele, tableKey, errorClass, isValid);
        }
        else if (tableKey == 'Purchase') {
            isValid = validsaledetail(ele, tableKey, errorClass, isValid);
        }

        if (unique.length > 0) {
            //getting previous data
            let prevData = [];
            $tblcontainer.find('table > tbody').find('tr').each(function () {
                if (isNew) {
                    prevData.push($(this).data('pData'));
                }
                else {
                    if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                        prevData.push($(this).data('pData'));
                    }

                }

            })
            //console.log('previous data', prevData);

            unique.forEach(function (key, i) {
                console.log('unid -> key:' + key + "| index :" + i);
                let $thisEle = $thisForm.find('[perfect-tempTable-' + tableKey + '="' + key + '"]');
                // let headerEleName = $thisForm.find('[name="lblProName"]').text();
                let atname = $thisEle.attr('name');
                let cvalue;
                //console.log('atname', atname);
                //console.log('$thisEle.length', $thisEle.length);
                if ($thisEle.length != 0) {
                    //console.log('len', $thisEle)
                    let $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
                    let errmessage = key + " Already exits"

                    //getting current value in cval
                    if ($thisEle.is('select')) {
                        cvalue = $thisEle.val();
                    }
                    else if ($thisEle.is('input')) {

                        let inputEleType = $thisEle.attr('type').toLocaleLowerCase();
                        if (inputEleType == 'checkbox') { cvalue = $thisEle.is(':checked'); }
                        else if (inputEleType == 'hidden') { cvalue = $thisEle.val(); console.log('cvalue ->', cvalue); }
                        else { cvalue = $thisEle.val(); }
                    }
                    else { cvalue = $thisEle.val(); }



                    //searching in previous data
                    if (prevData.find(a => a[atname] == cvalue)) {
                        // console.log('Search =>' + cvalue + '| attr :' + atname)
                        $errorElement.text(errmessage);
                        isValid = false;
                    }
                }
            });

        }

        //console.log('isValid', isValid);

        if (isValid) {

            console.log('check 4.1');
            // this section make table column data
            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                //console.log('nameAttr', nameAttr);
                console.log('headerName', headerName);

                if ($this.is('select')) {

                    //tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                    tableOptionsTemp.hideColumn.push(nameAttr)
                    //displat text of select
                    if ($this.val() != null) {
                        let selectText = ($this.val().length == 0) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    else {
                        let selectText = ($this.val() == null) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    //tableOptionsTemp.onlyShowColumn.push(nameAttr + '_d')
                    insertData[nameAttr] = $this.val();
                    //insertData[nameAttr] = $this.val();

                    $this.val('').selectpicker('refresh');


                }
                else if ($this.is('input')) {

                    insertData[nameAttr] = $this.val();
                    console.log('insertData[nameAttr]', insertData[nameAttr])
                    if (nameAttr == "prodtid") { }
                    else if (nameAttr == "stkid") { }
                    else {
                        $this.val('');
                    }
                }
                else {
                    insertData[nameAttr] = $this.val();

                    $this.val('');
                }

            });
            console.log('check 4.2', insertData);
            console.log('check 4.2 tableoption', tableOptionsTemp);
            if (isNew) {
                console.log('check 4.2.1');
                //this section nake table.table row
                if ($tblcontainer.find('table').length == 0) {
                    console.log('check 4.2.3');
                    console.log(insertData);
                    console.log(',tableOptionsTemp', tableOptionsTemp)
                    $tblcontainer.append(pft_table_createtable([insertData], tableOptionsTemp));

                    //  $tblcontainer.find('table').dataTable({ paging: false, ordering: false });
                }
                else {
                    console.log('check 4.2.1');
                    let table = $tblcontainer.find('table').DataTable()
                    table.destroy()
                    pft_table_addTableRow($tblcontainer.find('table'), insertData, tableOptionsTemp);


                }

            }
            else {

                let table = $tblcontainer.find('table').DataTable()
                table.destroy()

                pft_table_replaceTableRow($tblcontainer.find('table'), updateCond, insertData, tableOptionsTemp);

            }

            console.log(insertData);
            
            // resetting the edit value
            $tblcontainer.attr('perfect-tempTable-action', 0);

            if (tableKey == 'Warranty') {

                BindWarrantyAmount(ele);
            }
            else if (tableKey == 'Payment') {
                BillAmountbind(ele);
            }
            else if (tableKey == 'Purchase') {
                $thisForm.find('[name=prdbtn]').removeAttr("disabled", "disabled")

                $thisForm.data({ pwarranty: warrantydetails });
                console.log('check 123', $thisForm.data('pwarranty'));
                $thisForm.data({ addpImageselect: $thisForm.data('pImageselect') });
                console.log('addpImageselect', $thisForm.data('addpImageselect'))
                BindBilldetails(ele);
                checkemi(this);
            }

        }


        console.log('check 5');
    }

    function fillTableSales(ele, tkey, data, tableOptionsTempOut) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let tableOptionsTempfill = tableOptionsTempOut;
        let insertData = []
        let tableKey = tkey;
        let indexname = tkey + 'index';
        tableOptionsTempfill.rowAttribute.push(indexname);
        tableOptionsTempfill.hideColumn.push(indexname);
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');
        $.each(data, function (keyOne, valOne) {

            let pData = {};

            pData[indexname] = keyOne + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', pData[indexname])
            //---

            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                //console.log('tfhyrtname', nameAttr)
                if (typeof valOne[nameAttr] !== undefined) {

                    if ($this.is('select')) {
                        // tableOptionsTempfill.renameHeader[nameAttr + '_d'] = headerName;
                        tableOptionsTempfill.hideColumn.push(nameAttr);
                        //displat text of select
                        pData[nameAttr + '_d'] = $this.find('[value="' + valOne[nameAttr] + '"]').text();
                        pData[nameAttr] = valOne[nameAttr];
                        console.log('select', $this.find('options[value="' + valOne[nameAttr] + '"]').text());

                    }
                    else if ($this.is('input')) {

                        let inputType = $this.attr('type').toLocaleLowerCase();
                        console.log(inputType)


                        if (inputType == 'date') {

                            if (valOne[nameAttr] == null) {
                                pData[nameAttr] = valOne[nameAttr];
                            }
                            else {
                                pData[nameAttr] = moment(valOne[nameAttr]).format('YYYY-MM-DD');
                            }


                        }
                        else {
                            pData[nameAttr] = valOne[nameAttr];


                        }
                    }
                    else {
                        pData[nameAttr] = valOne[nameAttr];


                    }
                }



            });

            insertData.push(pData);


            //----

        });
        $tblcontainer.empty();
        $tblcontainer.append(pft_table_createtable(insertData, tableOptionsTempfill));
        // $tblcontainer.find('table').dataTable({ paging: true });

    }


    
    function totalamountcalculation(ele, isreniew = false) {
        debugger;
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let netamount = 0;
        let otheramt = 0;
         otheramt = $thisForm.find('[name="OtherCharge"]').val() == "" ? 0 : $thisForm.find('[name="OtherCharge"]').val();

        $thisForm.find('[perfect-tempTable="cstatus"]').find('tbody').find('tr').each(function () {
            console.log('totalamountcalculation', $(this).data('pData'));
            let rowdat = $(this).data('pData');

            if (isreniew) {
                if (rowdat.UpdatedColumn) {
                    if (rowdat.PmdPaperNetAmount == '') {
                        rowdat.PmdPaperNetAmount = 0;
                    }
                    netamount = netamount + parseFloat(rowdat.PmdPaperNetAmount);
                }
            }
            else {
                if (rowdat.PmdPaperNetAmount == '') {
                    rowdat.PmdPaperNetAmount = 0;
                }
                netamount = netamount + parseFloat(rowdat.PmdPaperNetAmount);
            }
            
        })
        let totalamount = 0;
         totalamount = parseFloat(netamount) + parseFloat(otheramt);
        $thisForm.find('[name="PmTotalAmount"]').val(parseFloat(totalamount).toFixed(2));
        let billamt = 0;
        let bilamt = 0;

        bilamt = totalamount;
        $('#Paymentdethead').find('tbody tr').each(function (index, ele) {
            billamt += parseFloat($(ele).find('.PAmount').text());
        });
        bilamt = parseFloat(bilamt) - billamt;

        $thisForm.find('[name=BalAmt]').text(bilamt.toFixed(2));
        $thisForm.find('[name=PAmount]').val(bilamt.toFixed(2));
        //for payment method/////end

    }
    function BillAmountbind(ele) {

        debugger;
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let netamt = $thisForm.find('[name="PmTotalAmount"]').val() == "" ? 0 : $thisForm.find('[name="PmTotalAmount"]').val();
        let billamt = 0;
        let bilamt = 0;

        if ($thisForm.find('[name=BalAmt]').text() == '') {
            bilamt = 0;
        }
        else {

            bilamt = netamt;
        }

        $thisForm.find('[name="PmTotalAmount"]').val(Number(netamt).toFixed(2));

        $('#Paymentdethead').find('tbody tr').each(function (index, ele) {
            billamt += parseFloat($(ele).find('.PAmount').text());

        });
        bilamt = parseFloat(bilamt) - parseFloat(billamt);

        $thisForm.find('[name=BalAmt]').text(bilamt.toFixed(2));
        $thisForm.find('[name=PAmount]').val(bilamt.toFixed(2));
        if (bilamt == 0) {

            return true;

        }
        else {

            return false;

        }
    }
    function BindOtherChargeAmount(ele) {
        console.log('inside binddatat fn')
        let $modal = $(ele).closest('.modal');
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let sum = 0;
        othrchargelst = [];
        $modal.find('table tbody').find('tr').each(function () {

            let value = parseFloat($(this).find('.jq_OtherChagAmnt_td').find('input').val());;
            if ($(this).find('.jq_OtherChagAmnt_td').find('input').val() == '' || $(this).find('.jq_OtherChagAmnt_td').find('input').val() == null || $(this).find('.jq_OtherChagAmnt_td').find('input').val() == '.') {
                value = 0;
            }

            if (parseInt($(this).find('.jq_TransType_td').find('select').val()) == 0) {
                value = value * 0;
            }
            else if (parseInt($(this).find('.jq_TransType_td').find('select').val()) == 1) {
                value = value * 1;
            }
            else {
                value = value * 1;
            }
            sum = sum + value;

            let othrcharge = {
                ID_OtherChargeType: $(this).find('.jq_ID_OtherChargeType_td').text(),
                OctyTransType: $(this).find('.jq_TransType_td').find('select').val(),
                OctyAmount: parseFloat($(this).find('.jq_OtherChagAmnt_td').find('input').val()) || 0
            };
            othrchargelst.push(othrcharge);
            $thisForm.data({ pOthrChgData: othrchargelst });
            console.log('othrchargelst', othrchargelst)

        });

        $thisForm.find('[name=OtherCharge]').val(parseFloat(sum).toFixed(2));
        totalamountcalculation(ele);
    }
     var othrchargelst = [];
    function ShowOtherCharges(ele, mode) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        console.log("$thisForm.data('pOthrChgData')", $thisForm.data('pOthrChgData'))
        if ($thisForm.data('pOthrChgData')) {

           
            if ($thisForm.data('pOthrChgData').length > 0) {

                othrchargelst = $thisForm.data('pOthrChgData');
            }
            console.log('othrchargelst', othrchargelst);

        }

        BindChargeDetails(ele, mode)


    }
     function BindChargeDetails(ele, mode) {

        var InputData =
           {
            TransMode: '@ViewBag.TransMode',
           }


        $.ajax({
            url: "@Url.Action("GetOtherCharges", "Paper")",
            type: "Get",
            data: InputData,
            dataType: "json",
            contentType: "application/json",
            success: function (ajaxOutput) {
                if (ajaxOutput.OtherCharges.Process.IsProcess) {
                         var CheckListHTML = '';

                         if (ajaxOutput.OtherCharges.Data.length > 0) {

                             $.each(ajaxOutput.OtherCharges.Data, function (i, value) {

                                 let options = ''
                                     if (othrchargelst != '') {

                                         $.each(othrchargelst, function (key, value1) {

                                             if (value1.ID_OtherChargeType == value.ID_OtherChargeType) {

                                                 value.OctyAmount = value1.OctyAmount;
                                                 $.each(ajaxOutput.Transtypelist.Data, function (i, valuea) {
                                                     if (valuea.TransTypeID.toString() == value1.OctyTransType) {

                                                         options += '<option value=' + valuea.TransTypeID + ' selected="selected">' + valuea.TransType + '</option>'
                                                     }
                                                     else {
                                                         options += '<option value=' + valuea.TransTypeID + '>' + valuea.TransType + '</option>'
                                                     }
                                                 });
                                             }


                                         });

                                     }
                                     else
                                     {

                                         $.each(ajaxOutput.Transtypelist.Data, function (i, valuea) {
                                             options += '<option value=' + valuea.TransTypeID + '>' + valuea.TransType + '</option>'
                                         });
                                         //---

                                     }
                                 console.log('optionsl', options)
                                 let $dropdown = '<select class="form-control"name="selector" id="selector" >' + options + '</select>';
                                 CheckListHTML += "<tr>";
                                 CheckListHTML += "<td>" + value.SlNo + "</td>";
                                 CheckListHTML += "<td Class='jq_ID_OtherChargeType_td' Style='Display:none'>" + value.ID_OtherChargeType + "</td>";
                                 CheckListHTML += "<td Class='jq_Type_td'>" + value.OctyName + "</td>";
                                 CheckListHTML += "<td class='jq_TransType_td'>" + $dropdown + "</td>";                                 
                                 CheckListHTML += "<td class='jq_OtherChagAmnt_td' ><input min='0'  class='form-control text-right'  type='text'  value='" + value.OctyAmount + "' ' maxlength='12' " + ` id="othercharge" name="othercharge"  oninput="decimalpnt(this,'othercharge',3)"` + "'/></td> /></td>";

                                 CheckListHTML += "</tr>";
                             })
                         }
                         else {
                             CheckListHTML += "<div class='form-group col-md-6'>";
                             CheckListHTML += "<div class='form-check mb-2'>";
                             CheckListHTML += "<label class='form-check-label' for='check1'>No Records...</label>";
                             CheckListHTML += "</div></div>"
                         }
                         //let $model = createSearchModalDOM();
                         //$model.modal.find('.modal-body').append(CheckListHTML);
                         //$model.show

                    $("#formGroupModalOtherChargebody").html(CheckListHTML)

                    if (mode == 0) {
                        $('#formGroupModalOtherCharge').modal({ backdrop: 'static', keyboard: false })
                     $('#formGroupModalOtherCharge').modal('show');
                    }
                    else {

                       $('#formGroupModalOtherCharge').modal('hide');
                    }


                     }
                else {

                    $.each(ajaxOutput.OtherCharges.Process.Message, function (key, value) {
                             NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                    });
                }
            },
                complete: function () {
                    $(ele).prop('disabled', false);
                  //  $('select').selectpicker('refresh');
                }
        });
    }
    function isNumberKey(evt) {
        var charCode = (evt.which) ? evt.which : event.keyCode
        if (charCode > 31 && (charCode < 46 || charCode === 47 || charCode > 57)) {
            return false;
        }
        return true;
    }
    function GetPaymentlists(ele) {

        $('#formGroupModalpayment').modal({ backdrop: 'static', keyboard: false })

        $('#formGroupModalpayment').modal('show');

    }


    function fndatedoublecheck(ele) {
        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');

        let lowerlimit = $thisForm.find('[name="TransDate"]').val();

        let today = new Date();
        today.setHours(0, 0, 0, 0);


        lowerlimit = new Date(lowerlimit);
        lowerlimit.setHours(0, 0, 0, 0)
        if (lowerlimit > today) {

            console.log('inside limit check if')
            $thisForm.find('[name="TransDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('Trans Date should be less than or equal to Todays date');
            $thisForm.find('[name="TransDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').show();
            $thisForm.find('[name="TransDate"]').trigger('blur');
            return false;
        }


        else {

            $thisForm.find('[name="TransDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('');
            return true;
        }


    }


 // Function to Add Productwise
    function fn_Paperrenewal_add(ele, actiontype) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');

        let upperlimit = $thisForm.find('[name="EffectDate"]').val();
        let lowerlimit = $thisForm.find('[name="TransDate"]').val();

        let today = new Date();
        today.setHours(0, 0, 0, 0);

        upperlimit = new Date(upperlimit);
        upperlimit.setHours(0, 0, 0, 0)

        lowerlimit = new Date(lowerlimit);
        lowerlimit.setHours(0, 0, 0, 0)
        //let Validdate = true;

        if (fndatecheck(ele)) {

            if (fndatedoublecheck(ele)) {
                debugger

                if ($thisForm.valid()) {

                    if (BillAmountbind(ele)) {
                        debugger
                        if (fndatecheck(ele) && fndatedoublecheck(ele) == true) {
                            //<---------Validation :  To Check whether the form is vaild(ie; values in the form contrls are valid)


                            let prevData = [];

                            let $tblcontainer = $thisForm.find('[perfect-tempTable="cstatus"]');
                            $thisForm.find('[perfect-tempTable="cstatus"]').find('table > tbody').find('tr').each(function () {

                                if ($thisForm.find('[name=temprenuew]').val() == "true") {
                                    //if its reniew
                                    if ($(this).data('pData')['UpdatedColumn']) {
                                        //console.log('new data', $(this).data('pData'));
                                        prevData.push($(this).data('pData'));
                                    }
                                }
                                else {
                                    prevData.push($(this).data('pData'));
                                }


                            })

                            if (($tblcontainer.attr('perfect-tempTable-action')) != 0 && prevData.length == 1) { prevData = []; }


                            if (prevData.length <= 0) {

                                createItems(ele, function (result) {
                                    if (result == 1) {
                                        $thisForm.find('[perfect-tempTable="cstatus"]').find('tbody').find('tr').each(function () {

                                            if ($thisForm.find('[name=temprenuew]').val() == "true") {
                                                //if its reniew
                                                if ($(this).data('pData')['UpdatedColumn']) {
                                                    //console.log('new data', $(this).data('pData'));
                                                    prevData.push($(this).data('pData'));
                                                }
                                            }
                                            else {
                                                prevData.push($(this).data('pData'));
                                            }




                                        })
                                    }


                                })

                            }


                            let $modal1 = $thisForm.find('#zero_config');
                            let $modal2 = $thisForm.find('#zero_configOthercharge');
                            let OtherCharge = [];
                            $modal2.find('tbody').find('tr').each(function () {

                                let OtChargeinfo = {};
                                OtChargeinfo['ID_OtherChargeType'] = $(this).find('.jq_ID_OtherChargeType_td').text();

                                OtChargeinfo['OctyTransType'] = $(this).find('.jq_TransType_td').find('select').val();
                                OtChargeinfo['OctyName'] = $(this).find('.jq_Type_td').text();
                                OtChargeinfo['OctyAmount'] = $(this).find('.jq_OtherChagAmnt_td').find('input').val() == "" ? 0 : $(this).find('.jq_OtherChagAmnt_td').find('input').val() ;
                               
                                OtherCharge.push(OtChargeinfo);

                            });

                            let paymentdetails = [];
                            $thisForm.find('[perfect-tempTable="Payment"]').find('tbody').find('tr').each(function () {
                                paymentdetails.push($(this).data('pData'));
                            })
                            var tax = [];
                            $modal1.find('tbody').find('tr').each(function () {
                                let taxinfo = {};
                                taxinfo['FK_TaxType'] = $(this).find('.jq_taxType_td').text();
                                taxinfo['TaxTyName'] = $(this).find('.jq_taxTypeName_td').text();
                                taxinfo['TaxAmount'] = $(this).find('.jq_taxamount_td').find('input').val();
                                taxinfo['FK_Paper'] = $(this).find('.jq_FK_Paper_td').text();
                                console.log("taxinfo 06-05-2023", taxinfo);
                                tax.push(taxinfo);
                              
                            });


                            if (prevData.length != 0) {
                                $(ele).prop('disabled', true); 
                                var inputData = {
                                    __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                                    'ID_PaperMaintenance': isNaN(parseInt($thisForm.find('[name=ID_PaperMaintenance]').val())) ? 0 : parseInt($thisForm.find('[name=ID_PaperMaintenance]').val()),
                                    'FK_Master': $thisForm.find('[name=FK_Master]').val().trim(),
                                    'TransMode': PaperrenewTransMode,
                                    'EffectDate': $thisForm.find('[name=EffectDate]').val().trim(),
                                    'TransDate': $thisForm.find('[name=TransDate]').val().trim(),
                                    'PmTotalAmount': $thisForm.find('[name=PmTotalAmount]').val().trim(),
                                    'PaperMaintenanceDetails': prevData,
                                    'ImageList': PssfupDocsList,
                                    'OtherChgDetails': OtherCharge,
                                    'PaymentDetail': paymentdetails,
                                    'TaxAmountDetails': TaxMainArray,
                                    'LastID': LastID_Paperrenew,


                                };
                                clearSessionValue(LastIDSessionKeyPR);
                               
                                localStorage.removeItem("FRM_TRANSMODE");
                               
                                let _ActionUrl = "";
                                if (actiontype == "Add") { _ActionUrl = "@Url.Action("AddNewPaperRenewal", "Paper")"; } else { _ActionUrl = "@Url.Action("UpdateNewPaperRenewal", "Paper")"; }

                                $.ajax({
                                    url: (actiontype == "Add") ? "@Url.Action("AddNewPaperRenewal", "Paper")" : "@Url.Action("UpdateNewPaperRenewal", "Paper")",
                                    type: "POST",
                                    data: inputData,
                                    dataType: "json",

                                    contentType: "application/x-www-form-urlencoded; charset=utf-8",
                                    success: function (ajaxOutput) {

                                        if (ajaxOutput.Process.IsProcess) {

                                            $.each(ajaxOutput.Process.Message, function (key, value) {
                                                NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                                            });
                                            $thisForm.find('[perfect-ctype="select"]').val('').selectpicker('refresh');
                                            $thisForm.find('[perfect-ctype="input"]').val('');
                                            $thisForm.find('[perfect-ctype="date"]').val('');
                                          
                                            let onSuccess = $thisForm.attr('perfect-onFormSuccess');

                                            if (onSuccess) {
                                                window[onSuccess]();
                                                setTimeout(function () {// wait for 5 secs(2)
                                                    location.reload(); // then reload the page.(3)
                                                }, 1000);
                                            }
                                        }
                        else {
                        $.each(ajaxOutput.Process.Message, function (key, value) {
                        NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value })
                             });
                            }
                         },
                                    complete: function () {
                                        $(ele).prop('disabled', false);
                                    }

                                });

                            }
                            else {

                                let $modal = createSearchModalDOM();

                                let $message = '<span>Enter Atleast One Entry In PaperRenewalDetails</span>';
                                $modal.modal.find('.modal-body')
                                    .addClass('text-black')
                                    .html($message);
                                $modal.modal.find('.modal-title')
                                    .addClass('text-primary')
                                    .text('Message');

                                $modal.modal.show();
                            }
                        }
                    }
                
                    else {
                        $(ele).prop('disabled', false);
                        NotificationMessage({ 'type': 'error', 'heading': 'Warning', 'message': 'In Payment Method Balance Amt. Should be  Zero ' });
                    }

                   



                }
            }

        }

    }




    function createItems(ele, callback) {
        if (SubProductDetailsTable_create(ele, 'cstatus', [])) {
            callback(1);
        }
        else {
            callback(0);
        }
    }



    function Setservice(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');

        if ($thisForm.find('[name="FK_Paper"]').val() < 1) {

            $('.paperrenewaldetailsdiv').hide();

        }
        else {

            $('.paperrenewaldetailsdiv').show();
        }

    }







    ///Table///

    var tableOptionsTempOut = {
        iconButton: {
            buttons: [
                {
                    icon: "fa fa-address-card",
                    title: "Renew",
                    action: function () {
                        let savedData = $(this).closest('tr').data('pData')

                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let tableKey = $tablecontainer.attr('perfect-tempTable');
                        let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                        //index attribute name in table row
                        let indexname = tableKey + 'index';
                        //index number in table row
                        let rindex = $(this).closest('tr').attr(indexname);
                        $tablecontainer.attr('perfect-tempTable-action', rindex);

                        console.log('Editclick', savedData);
                        //filling data in available inputs
                        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                            let $thisNode = $(this);
                            let pf_name = $thisNode.attr('name');
                            if ($thisNode.is('select')) {


                                $thisNode.val(savedData[pf_name]).selectpicker('refresh');
                                if ($thisForm.find('[name="FK_Paper"]').val() < 1) {
                                    $('.paperrenewaldetailsdiv').hide();
                                }
                                else {
                                    $('.paperrenewaldetailsdiv').show();

                                }
                            }
                            else if ($thisNode.is('input')) {

                                if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                    $thisNode.prop('checked', savedData[pf_name]);
                                }
                                else {
                                    $thisNode.val(savedData[pf_name]);
                                }

                            }
                            else {
                                $thisNode.val(savedData[pf_name]);
                            }



                        });



                    }
                },


                //{
                //    icon: "fa fa-trash btnPerfectGridDelete",
                //    action: function () {
                //        let $thistbl = $(this).closest('table');
                //        let table = $thistbl.DataTable();
                //        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                //        table.destroy();
                //        if ($(this).closest('tbody').find('tr').length > 1) {
                //            $(this).closest('tr').remove();
                //            pft_table_slreset($thistbl);
                //            //  $thistbl.dataTable({ paging: true });
                //        }
                //        else {
                //            $thistbl.remove();
                //        }
                //        totalamountcalculation($tablecontainer);
                //        $("#btnresetMtrl").click();

                //    }
                //},


            ]
        },



        onlyShowColumn: [],
        hideColumn: [],
        serialNo: true,
        renameHeader: { "PmdPaperNo": "Number", "PmdIssueDate": "Issue Date", "PmdExpireDate": "Expiry Date", "PmdPaperAmount": "Amount1R", "PmdPaperTaxAmount": "Tax Amount1R", "PmIncludeTax": "Tax Include", "PmdPaperNetAmount": "Net Amount1R","PmdWarningBefore":"Warning Before1R"},
        rowAttribute: [],
        isCheckType: [],
        isDateType: ["PmdExpireDate","PmdIssueDate"]
    };

    var tableOptionsTempOutAdd = {
        iconButton: {
            buttons: [

                {
                    icon: "fa fa-pencil btnPerfectGridEdit",
                    action: function () {
                      
                        let savedData = $(this).closest('tr').data('pData')

                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let tableKey = $tablecontainer.attr('perfect-tempTable');
                        let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                        //index attribute name in table row
                        let indexname = tableKey + 'index';
                        //index number in table row
                        let rindex = $(this).closest('tr').attr(indexname);
                        $tablecontainer.attr('perfect-tempTable-action', rindex);

                        console.log('Editclick', savedData);
                        //filling data in available inputs
                        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                            let $thisNode = $(this);
                            let pf_name = $thisNode.attr('name');
                            if ($thisNode.is('select')) {


                                $thisNode.val(savedData[pf_name]).selectpicker('refresh');
                                if ($thisForm.find('[name="FK_Paper"]').val() < 1) {
                                    $('.paperrenewaldetailsdiv').hide();
                                }
                                else {
                                    $('.paperrenewaldetailsdiv').show();

                                }
                            }
                            else if ($thisNode.is('input')) {

                                if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                    $thisNode.prop('checked', savedData[pf_name]);
                                }
                                else {
                                    $thisNode.val(savedData[pf_name]);
                                 }

                            }
                            else {
                                $thisNode.val(savedData[pf_name]);
                                 }



                        });                      

                    }
                },
                {
                    icon: "fa fa-trash btnPerfectGridDelete",
                    action: function () {
                        let $thistbl = $(this).closest('table');
                        let $tablecontainer = $(this).closest('[perfect-tempTable]');


                        let table = $thistbl.DataTable();
                        table.destroy();
                        if ($(this).closest('tbody').find('tr').length > 1) {
                            $(this).closest('tr').remove();
                            pft_table_slreset($thistbl);
                            //  $thistbl.dataTable({ paging: true });

                        }
                        else {
                            $thistbl.remove();
                        }
                        totalamountcalculation($tablecontainer);
                        $("#btnresetMtrl").click();
                    }
                },
            ]
        },



        onlyShowColumn: [],
        hideColumn: [],
        serialNo: true,
        renameHeader: {
            "PmdPaperNo": "Number", "PmdIssueDate": "Issue Date", "PmdExpireDate": "Expiry Date", "PmdPaperAmount": "Amount1R", "PmdPaperTaxAmount": "Tax Amount1R", "PmIncludeTax":"Tax Include","PmdPaperNetAmount": "Net Amount1R","PmdWarningBefore": "Warning Before1R" },
        rowAttribute: [],
        isCheckType: [],
        isDateType: ["PmdExpireDate", "PmdIssueDate"]
    };
    function ComDetailsTable_Fill(ele, tkey, data, tableOptionsTempOut) {

        let $thisForm = $(ele)

        let tableOptionsTemp = tableOptionsTempOut;
        let insertData = []
        let tableKey = tkey;

        let indexname = tkey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);

        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');


        $.each(data, function (keyOne, valOne) {

            let pData = {};

            pData[indexname] = keyOne + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', pData[indexname])
            //---

            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                console.log('name', valOne[nameAttr])
                if (typeof valOne[nameAttr] !== undefined) {

                    if ($this.is('select')) {


                        tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                        tableOptionsTemp.hideColumn.push(nameAttr);
                        //displat text of select

                        let selectText = ($this.val().length == 1) ? '' : $this.find('[value="' + valOne[nameAttr] + '"]').text();

                        pData[nameAttr + '_d'] = selectText;
                        pData[nameAttr] = valOne[nameAttr];
                        console.log('select', $this.find('options[value="' + valOne[nameAttr] + '"]').text());
                        console.log('selectText', $this.find('[value="' + valOne[nameAttr] + '"]').text());

                    }
                    else if ($this.is('input')) {

                        let inputType = $this.attr('type').toLocaleLowerCase();
                        console.log('inputType', inputType)
                        if (inputType == 'checkbox') {

                            pData[nameAttr] = valOne[nameAttr];

                            tableOptionsTemp.isCheckType.push(nameAttr);

                            console.log('checkbox', nameAttr)


                        }
                        else if (inputType == 'hidden') {

                            tableOptionsTemp.hideColumn.push(nameAttr);
                            pData[nameAttr] = valOne[nameAttr];


                        }

                        else if (inputType == 'date') {


                            pData[nameAttr] = moment(valOne[nameAttr]).format('YYYY-MM-DD');


                        }
                        else {
                            pData[nameAttr] = valOne[nameAttr];


                        }
                    }
                    else {
                        pData[nameAttr] = valOne[nameAttr];


                    }
                }



            });

            insertData.push(pData);
            console.log('insertdata', insertData)

            //----

        });

        $tblcontainer.append(pft_table_createtable(insertData, tableOptionsTemp));
        // $tblcontainer.find('table').dataTable({ paging: true });

    }
    var TaxMainArray = [];

    function SubProductDetailsTable_create(ele, tkey, uniq = [], tableOptionsTempOut) {

       // console.log('validate data', ValidateAddOtherProductservicedetails());

        //if (ValidateAddOtherProductservicedetails() <= 0) {

        debugger
        let isRnewal = false;

            let $thisForm = $(ele).closest('[perfect-class="form"]');
            var tableKey = tkey;
            let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');

            let insertData = {};
        let tableOptionsTemp = tableOptionsTempOutAdd;

        //---------------test change
        if ($thisForm.find('[name=temprenuew]').val() == "true") {

            isRnewal = true;
            //reniew
            tableOptionsTemp.iconButton.buttons = [
                {
                    icon: "fa fa-address-card",
                    title: "Renew",
                    action: function () {
                        let savedData = $(this).closest('tr').data('pData')

                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let tableKey = $tablecontainer.attr('perfect-tempTable');
                        let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                        //index attribute name in table row
                        let indexname = tableKey + 'index';
                        //index number in table row
                        let rindex = $(this).closest('tr').attr(indexname);
                        $tablecontainer.attr('perfect-tempTable-action', rindex);

                        
                        //filling data in available inputs
                        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                            let $thisNode = $(this);
                            let pf_name = $thisNode.attr('name');
                            if ($thisNode.is('select')) {


                                $thisNode.val(savedData[pf_name]).selectpicker('refresh');
                                if ($thisForm.find('[name="FK_Paper"]').val() < 1) {
                                    $('.paperrenewaldetailsdiv').hide();
                                }
                                else {
                                    $('.paperrenewaldetailsdiv').show();

                                }
                            }
                            else if ($thisNode.is('input')) {

                                if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                    $thisNode.prop('checked', savedData[pf_name]);
                                }
                                else {
                                    $thisNode.val(savedData[pf_name]);
                                }

                            }
                            else {
                                $thisNode.val(savedData[pf_name]);
                            }



                        });



                    }
                }
            ]
        }
        else {
            isRnewal = false;
            tableOptionsTemp.iconButton.buttons = [
                {
                    icon: "fa fa-pencil btnPerfectGridEdit",
                    action: function () {
                        let savedData = $(this).closest('tr').data('pData')

                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let tableKey = $tablecontainer.attr('perfect-tempTable');
                        let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                        //index attribute name in table row
                        let indexname = tableKey + 'index';
                        //index number in table row
                        let rindex = $(this).closest('tr').attr(indexname);
                        $tablecontainer.attr('perfect-tempTable-action', rindex);

                        
                        //filling data in available inputs
                        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                            let $thisNode = $(this);
                            let pf_name = $thisNode.attr('name');
                            if ($thisNode.is('select')) {


                                $thisNode.val(savedData[pf_name]).selectpicker('refresh');
                                if ($thisForm.find('[name="FK_Paper"]').val() < 1) {
                                    $('.paperrenewaldetailsdiv').hide();
                                }
                                else {
                                    $('.paperrenewaldetailsdiv').show();

                                }
                            }
                            else if ($thisNode.is('input')) {

                                if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                    $thisNode.prop('checked', savedData[pf_name]);
                                }
                                else {
                                    $thisNode.val(savedData[pf_name]);
                                }

                            }
                            else {
                                $thisNode.val(savedData[pf_name]);
                            }



                        });

                        if (TaxMainArray != '') {
                            Taxlist = TaxMainArray.filter(obj => obj.FK_Paper.toString() === (savedData.FK_Paper).toString());
                        }
                        
                    }
                },
                {
                    icon: "fa fa-trash btnPerfectGridDelete",
                    action: function () {
                        let $thistbl = $(this).closest('table');
                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let savedData = $(this).closest('tr').data('pData')

                        let table = $thistbl.DataTable();
                        table.destroy();
                        if ($(this).closest('tbody').find('tr').length > 1) {
                            $(this).closest('tr').remove();
                            pft_table_slreset($thistbl);
                            //  $thistbl.dataTable({ paging: true });

                        }
                        else {
                            $thistbl.remove();
                        }
                        totalamountcalculation($tablecontainer);
                        $("#btnresetMtrl").click();
                        
                        if (TaxMainArray != '') {
                            TaxMainArray = TaxMainArray.filter(obj => obj.FK_Paper.toString() != (savedData.FK_Paper).toString());
                        }
                    }
                }
            ]
        };


        //---------------test change
            let unique = (uniq) ? uniq : [];

            
        let isValid = true;
            let isValids = true;
            //let isValidPrice = true;
            let errorClass = '.temptableError';
             let errorClass1 = '.temptableError1';
            //make index
            

            let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
            let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
            let indexname = tkey + 'index';
            tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);

        let newLyaddedColumn = "UpdatedColumn";
        tableOptionsTemp.rowAttribute.push(newLyaddedColumn);
        tableOptionsTemp.hideColumn.push(newLyaddedColumn);
        insertData[newLyaddedColumn] = true;

            let updateCond = '';
            let isNew = true;

            if (thisactionIndex > 0) {
                //means update
                insertData[indexname] = thisactionIndex;
                updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
                isNew = false;
            }
            else {
                //insert
                insertData[indexname] = lastIndex + 1;
                $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
                isNew = true;
        }
        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Provider"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="Provider"]').val() == "") {

            isValids = false;
            $thisForm.find('[perfect-tempTable-' + tableKey + '="Provider"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Provider');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="Provider"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }
        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Paper"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="Paper"]').val() == "") {

            isValids = false;
            $thisForm.find('[perfect-tempTable-' + tableKey + '="Paper"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Paper');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="Paper"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }


        //if ($thisForm.find('[perfect-tempTable-' + tableKey + '="PaperAmount"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="PaperAmount"]').val() == "") {
        //        isValids = false;
        //    $thisForm.find('[perfect-tempTable-' + tableKey + '="PaperAmount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please  Enter Amount');
        //    }
        //    else {
        //    $thisForm.find('[perfect-tempTable-' + tableKey + '="PaperAmount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        //    }

        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Number"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="Number"]').val() == "") {

                isValids = false;
            $thisForm.find('[perfect-tempTable-' + tableKey + '="Number"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Number');
        }
        else
        {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="Number"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }
        //if ($thisForm.find('[perfect-tempTable-' + tableKey + '="WarningBefore"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="WarningBefore"]').val() == "") {

        //    isValids = false;
        //    $thisForm.find('[perfect-tempTable-' + tableKey + '="WarningBefore"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select WarningBefore');
        //}
        //else {
        //    $thisForm.find('[perfect-tempTable-' + tableKey + '="WarningBefore"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');


        //}
        debugger

        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="IssueDate"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="IssueDate"]').val() == "") {

            isValids = false;
            $thisForm.find('[perfect-tempTable-' + tableKey + '="IssueDate"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Issue Date');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="IssueDate"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }

        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Expirydate"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="Expirydate"]').val() == "") {

            isValids = false;
            $thisForm.find('[perfect-tempTable-' + tableKey + '="Expirydate"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Expiry date');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="Expirydate"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }

        let upperlimit = $thisForm.find('[perfect-tempTable-' + tableKey + '="IssueDate"]').val();
        let lowerlimit = $thisForm.find('[perfect-tempTable-' + tableKey + '="Expirydate"]').val();
       
        //upperlimit = new Date(upperlimit)  
        //upperlimit.setHours(0, 0, 0, 0)


        //lowerlimit = new Date(lowerlimit);
        //lowerlimit.setHours(0, 0, 0, 0)

        let upperDate = upperlimit.split('T')[0];
        let lowerDate = lowerlimit.split('T')[0];
    

        if (upperDate > lowerDate) {

            $thisForm.find('[perfect-tempTable-' + tableKey + '="Expirydate"]').closest('[perfect-class="formGroup"]').find(errorClass1).text('Expiry Date Should Be Greater Than Issue Date ');

            isValids = false;

        }
        else if (upperDate == lowerDate) {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="Expirydate"]').closest('[perfect-class="formGroup"]').find(errorClass1).text('Expiry Date Should Be Greater Than Issue Date ');

            isValids = false;

        }

            else {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="Expirydate"]').closest('[perfect-class="formGroup"]').find(errorClass1).text('');

            }




        if (unique.length > 0) {
            //getting previous data
            let prevData = [];
            $tblcontainer.find('table > tbody').find('tr').each(function () {
                if (isNew) {
                    prevData.push($(this).data('pData'));
                }
                else {
                    if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                        prevData.push($(this).data('pData'));
                    }

                }

            });




            unique.forEach(function (key, i) {
                
                let $thisEle = $thisForm.find('[perfect-tempTable-' + tableKey + '="' + key + '"]');
                let headerEleName = $thisEle.attr('perfect-tempTable-' + tableKey);
                let atname = $thisEle.attr('name');
                let cvalue;



                if ($thisEle.length != 0) {
                    let $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
                    let errmessage = headerEleName + " Already exits"

                    //getting current value in cval
                    if ($thisEle.is('select')) {
                        cvalue = $thisEle.val();
                    }
                    else if ($thisEle.is('input')) {

                        let inputEleType = $thisEle.attr('type').toLocaleLowerCase();

                        if (inputEleType == 'checkbox') { cvalue = $thisEle.is(':checked'); }
                        else if (inputEleType == 'hidden') { cvalue = $thisEle.val(); }
                        else { cvalue = $thisEle.val(); }
                    }
                    else { cvalue = $thisEle.val(); }

                    // console.log('cvalue ->' + cvalue);

                    //searching in previous data
                    if (prevData.find(a => a[atname] == cvalue)) {
                        // console.log('Search =>' + cvalue + '| attr :' + atname)
                        $errorElement.text(errmessage);
                        isValid = false;
                    }
                }

            });


        }

        //validation
        //testing bomb

        //------------
        let prevDataT = [];
        $tblcontainer.find('table > tbody').find('tr').each(function () {
            if (isNew) {
                prevDataT.push($(this).data('pData'));
            }
            else {
                if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                    prevDataT.push($(this).data('pData'));
                }

            }

        });
    debugger
        let keyT1 = "Paper";
        //let keyT2 = "Provider";
        let $thisEleT1 = $thisForm.find('[perfect-tempTable-' + tableKey + '="' + keyT1 + '"]');
        //let $thisEleT2 = $thisForm.find('[perfect-tempTable-' + tableKey + '="' + keyT2 + '"]');
        let headerEleNameT1 = $thisEleT1.attr('perfect-tempTable-' + tableKey);
        //let headerEleNameT2 = $thisEleT2.attr('perfect-tempTable-' + tableKey);
        let atnameT1 = $thisEleT1.attr('name');
        //let atnameT2 = $thisEleT2.attr('name');
        let cvalueT1;
        //let cvalueT2;



        if ($thisEleT1.length != 0 ) {
            let $errorElementT1 = $thisEleT1.closest('[perfect-class="formGroup"]').find(errorClass);
            let errmessageT1 = headerEleNameT1 + " Already exists"
            //$thisForm.find('[name=PmdPaperTaxAmount]').val('');
            //Taxlist = [];
            //totalamountcalc(this);
            //let $errorElementT2 = $thisEleT2.closest('[perfect-class="formGroup"]').find(errorClass);
            //let errmessageT2 = headerEleNameT2 + " Already exits"

            //getting current value in cval

            //get value from the first field
            if ($thisEleT1.is('select')) {
                cvalueT1 = $thisEleT1.val();
            }
            else if ($thisEleT1.is('input')) {

                let inputEleTypeT1 = $thisEleT1.attr('type').toLocaleLowerCase();

                if (inputEleTypeT1 == 'checkbox') { cvalueT1 = $thisEleT1.is(':checked'); }
                else if (inputEleTypeT1 == 'hidden') { cvalueT1 = $thisEleT1.val(); }
                else { cvalueT1 = $thisEleT1.val(); }
            }
            else { cvalueT1 = $thisEleT1.val(); }

            //getting current value from the second elemet
            //if ($thisEleT2.is('select')) {
            //    cvalueT2 = $thisEleT2.val();
            //}
            //else if ($thisEleT2.is('input')) {

            //    let inputEleTypeT2 = $thisEleT2.attr('type').toLocaleLowerCase();

            //    if (inputEleTypeT2 == 'checkbox') { cvalueT2 = $thisEleT2.is(':checked'); }
            //    else if (inputEleTypeT2 == 'hidden') { cvalueT2 = $thisEleT2.val(); }
            //    else { cvalueT2 = $thisEleT2.val(); }
            //}
            //else { cvalueT2 = $thisEleT2.val(); }


            // console.log('cvalue ->' + cvalue);

            //searching in previous data
            //console.log('prevDataT' , prevDataT);
            //console.log('ss', prevDataT.find(a => { a[atnameT1] == cvalueT1 && a[atnameT2] == cvalueT1 }))
            //console.log('ss', prevDataT.find(a => a[atnameT1] == cvalueT1))
            //console.log('ss', prevDataT.find(a => a[atnameT2] == cvalueT2))
            prevDataT.forEach(function (a, b) {

                if (a[atnameT1] == cvalueT1 ) {
                    
                    //console.log('cvalueT2', cvalueT2)
                    $errorElementT1.text(errmessageT1);
                    //$errorElementT2.text(errmessageT2);
                    isValid = false;
                }

            })

            //if (prevDataT.find(a => a[atnameT1] == cvalueT1)) {
            //    // console.log('Search =>' + cvalue + '| attr :' + atname)
            //    console.log('cvalueT1',cvalueT1)
            //    console.log('cvalueT2',cvalueT2)
            //    $errorElementT1.text(errmessageT1);
            //    $errorElementT2.text(errmessageT2);
            //    isValid = false;
            //}


        }




        //------------

        //if (prevData.find(a => a['FK_Provider'] == $('[name=Provider]').val() && a['FK_Paper'] == $('[name=Paper]').val())) {

        //    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Already Exists' });
        //    isValid = false;
        //}


            
        // this section make table column data
        debugger
        if (isValid && isValids) {
            if (TaxMainArray != null) {
                TaxMainArray = TaxMainArray.filter(obj => obj.FK_Paper.toString() != $thisForm.find('[name=FK_Paper]').val().toString());
            }
            TaxMainArray = TaxMainArray.concat(Taxlist);            
            Taxlist = [];
            $thisForm.data({ pDataTax: '' }); 


            console.log('TaxMainArray>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', TaxMainArray);
            console.log('TaxlistArray>>>>>>>>>>>>>>>>>>>>>>>>>', Taxlist);
                $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {                 
                    let $this = $(this);
                    let headerName = $this.attr('perfect-tempTable-' + tableKey);
                    let nameAttr = $this.attr('name');


                    if ($this.is('select')) {

                        tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                        tableOptionsTemp.hideColumn.push(nameAttr)

                        if ($this.val() != null) {
                            let selectText = ($this.val().length == 0) ? '' : $this.children(":selected").text();
                            insertData[nameAttr + '_d'] = selectText;
                        }
                        else {
                            let selectText = ($this.val() == null) ? '' : $this.children(":selected").text();
                            insertData[nameAttr + '_d'] = selectText;
                        }

                        insertData[nameAttr] = $this.val();


                        //clear field
                        $this.val('').selectpicker('refresh');
                    }
                    else if ($this.is('input')) {

                        let inputType = $this.attr('type').toLocaleLowerCase();

                        if (inputType == 'checkbox') {

                            insertData[nameAttr] = $this.is(':checked');

                            tableOptionsTemp.isCheckType.push(nameAttr)
                            //clear field
                            $this.prop('checked', false);

                        }
                        else if (inputType == 'hidden') {

                            tableOptionsTemp.hideColumn.push(nameAttr)
                            insertData[nameAttr] = $this.val();

                            //clear field
                            $this.val('');
                        }
                        else if (inputType == 'date') {


                            insertData[nameAttr] = $this.val();

                            //clear field
                            $this.val('');
                        }
                        else if (inputType == 'number') {


                            insertData[nameAttr] = $this.val();

                            //clear field
                            $this.val('');
                        }
                        else {
                            insertData[nameAttr] = $this.val();

                            //clear field
                            $this.val('');
                        }
                    }
                    else {
                        insertData[nameAttr] = $this.val();

                        //clear field
                        $this.val('');
                    }




                });
                
                if (isNew) {
                    
                    //this section nake table.table row
                    if ($tblcontainer.find('table').length == 0) {
                        
                        $tblcontainer.append(pft_table_createtable([insertData], tableOptionsTemp));
                        // $tblcontainer.find('table').dataTable({ paging: true });
                    }
                    else {
                        
                        let table = $tblcontainer.find('table').DataTable()
                        table.destroy()
                        pft_table_addTableRow($tblcontainer.find('table'), insertData, tableOptionsTemp);


                        //   $tblcontainer.find('table').dataTable({ paging: true });
                        //   $tblcontainer.DataTable().draw();
                        //  table.ajax.reload();
                    }
                    
                }
                else {
                    
                    let table = $tblcontainer.find('table').DataTable()
                    table.destroy()
                    
                    pft_table_replaceTableRow($tblcontainer.find('table'), updateCond, insertData, tableOptionsTemp);


                    //$tblcontainer.find('table').dataTable({ paging: true });
                }
                
                // resetting the edit value
                $tblcontainer.attr('perfect-tempTable-action', 0);
                //$('#taxinclude').not(":checked")




            }
        totalamountcalculation(ele, isRnewal)
            return isValid;
        console.clear();       

    }
    function ValidateAddOtherProductservicedetails() {

        var Error = 0;
        const $inp = $(".Subproduct");
        let is_empty = true;
        $inp.each((i, el) => {

            //const is_empty = !el.value.trim();

            console.log($(el).attr('name'), $('[name=' + $(el).attr('name') + ']').val());

            if (!$('[name=' + $(el).attr('name') + ']').val() == undefined || $('[name=' + $(el).attr('name') + ']').val() != "") {
                is_empty = false;


            }
            else {
                is_empty = true//!$('[name=' + $(el).attr('name') + ']').val();
            }

            let ErrorID = $(el).attr('data-id');

            console.log(ErrorID, is_empty)

            if (is_empty) {
                debugger


                $('#' + ErrorID).css('display', 'block');
                Error++;

            }
            else if (!is_empty) {
                $('#' + ErrorID).css('display', 'none');

                if (Error > 0) {
                    Error--;
                }
            }
            el.classList.toggle("is-empty", is_empty);
        });
        return Error
    }


    function clearsubproduct(ele, tablekey) {


        let $thisform = $(ele).closest('[perfect-class="form"]');

        $thisform.find('.jq_taxTypeName_td').text('');
   




        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="select"]').val('').selectpicker('refresh');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="date"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="hidden"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="checkbox"]').prop('checked', false);




        let $tblcontainer = $thisform.find('[perfect-tempTable="' + tablekey + '"]');
        $tblcontainer.attr('perfect-tempTable-action', 0);

        if (tablekey = "cstatus") {

        }
        debugger

        $thisform.data({ pDataTax: '' });
        Taxlist = [];
    }




    function searchbtn(ele) {        //GetCmnPopUpSearchValAssign(ele, 95, 'Vehicle Number List', [], [], PaperrenewTransMode)
        debugger;

        let $thisForm = $(ele).closest('[perfect-class="form"]');


        if (PaperrenewTransMode == 'VLPM') {

            GetCmnPopUpSearchValAssign(ele, 95, 'Vehicle List', [], ['Vehicle', 'ID_FIELD', 'ID_Name', 'ID_Field', 'ID_EquipmentRentalDetails', 'Amount', 'FK_Master'],PaperrenewTransMode)
           
           // clearfiels();

            }
        else if (PaperrenewTransMode == 'TOPM') {

            GetCmnPopUpSearchValAssign(ele, 95, 'Tool List', [], ['ID_FIELD', 'ID_Name', 'VehicleNo', 'ID_Field', 'ID_EquipmentRentalDetails', 'Amount', 'FK_Master'],PaperrenewTransMode)
            }
            else {
                NotificationMessage({ 'type': 'info', 'heading': 'info', 'message': 'Please Select' });
            }


    }

    function getfunction(ele) {
        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        $thisForm.find('[name="PmTotalAmount"]').val(0);
        PssfupDocsList = [];
        $thisForm.find('[perfect-class="formGroupModalpayment"]').find('[perfect-tempTable="Payment"]').empty();
        let $Ptblcontainer = $thisForm.find('[perfect-tempTable="cstatus"]'); 
        $thisForm.find('[name="OtherCharge"]').val('');
        let currentArray = $thisForm.data('pOthrChgData');
     
        $.map(currentArray, function (key, value) {
            //console.log('$.map(currentArray', key)
            key.OctyAmount = '0';
            //console.log('$.map(currentArray currentArray', currentArray)
        });
        $thisForm.data('pOthrChgData', currentArray);

        $Ptblcontainer.empty();
         let searchPin = {
             FK_Master: $thisForm.find('[name="ID_FIELD"]').val(),
             TransMode: PaperrenewTransMode
         };
        if ($thisForm.find('[name="ID_FIELD"]').val() != "") {

             $.ajax({

                 url: '@Url.Action("GetPaaperenewfill", "Paper")',
                 type: "POST",
                 data: searchPin,//<---- Input json : data passed to controller
                 dataType: "json",
                 contentType: 'application/x-www-form-urlencoded;charset=utf-8',
                 success: function (ajaxOutput) {
                     console.log('> Search button click success', ajaxOutput);
                     if (ajaxOutput.Process.IsProcess) {
                         console.log('ajaxOutput123', ajaxOutput);
                         debugger
                         ComDetailsTable_Fill($thisForm, 'cstatus', ajaxOutput.Data, tableOptionsTempOut);

                         Taxlist = [];
                         $thisForm.data({ pDataTax: '' });
                         TaxMainArray = [];
                       

                         console.log('ajaxOutput.Data', ajaxOutput.Data);
                         if (ajaxOutput.Data) {

                             console.log('ajaxOutput.Data != null');
                             if (ajaxOutput.Data.length == 0) {
                                 //not renew
                                 console.log('ajaxOutput.Data.length == 0');
                                 $thisForm.find('[name="temprenuew"]').val("false");
                             }
                             else {
                                 //renew
                                 console.log(' ajaxOutput.Data.length == 0 else');
                                 $thisForm.find('[name="temprenuew"]').val("true");
                             }

                         }
                         else {
                             console.log('ajaxOutput.Data != null else');
                             $thisForm.find('[name="temprenuew"]').val("false");
                         }




                     }
                     else {

                         if (ajaxOutput.Data) {
                             if (ajaxOutput.Data.length == 0) {                             
                                 $thisForm.find('[name="temprenuew"]').val("false");
                             }
                             else {
                                 //renew
                                 console.log(' ajaxOutput.Data.length == 0 else');
                                 $thisForm.find('[name="temprenuew"]').val("true");
                             }

                         }
                         else {
                             console.log('ajaxOutput.Data != null else');
                             $thisForm.find('[name="temprenuew"]').val("false");
                         }


                         $.each(ajaxOutput.Process.Message, function (key, value) {
                             //toastr.warning(value, "Error");
                             NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'No  records found' });
                             let $Ptblcontainer = $thisForm.find('[perfect-tempTable="cstatus"]');
                             $Ptblcontainer.empty();
                         });
                     }
                 },
                 complete: function () {

                 }
             });
         }

    }

    function ShowTax(ele, mod) {
        debugger
        Taxcalled = 1;
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let taxinfo = {};
        if ($thisForm.data('pDataTax')) {

            if ($thisForm.data('pDataTax').length > 0) {

                Taxlist = $thisForm.data('pDataTax');
            }
            BindTaxDetails("1", 'formGroupModalTax', ele, mod)

            if (mod == 1) {
                $('#formGroupModalTax').modal('show');
            }
            else {
                $('#formGroupModalTax').modal('hide');
            }
        }
        else {
            BindTaxDetails("1", 'formGroupModalTax', ele, mod)
        }


    }
    var Taxlist = [];
     function BindTaxDetails(Mode, ModalID, ele) {
         let $thisForm = $(ele).closest('[perfect-class="form"]');

        var InputData =
        {
            FK_Company: $thisForm.find('[name=FK_Company]').val(),
        }

        $.ajax({
            url: "@Url.Action("GetTaxAmount", "Paper")",
            type: "Get",
            data: InputData,
            dataType: "json",
            contentType: "application/json",
            success: function (ajaxOutput) {
                     if (ajaxOutput.Process.IsProcess) {
                         var CheckListHTML = '';
                         let sum = 0;
                         if (ajaxOutput.Data.length > 0) {


                             $.each(ajaxOutput.Data, function (i, value) {
                                 sum = sum + parseFloat(value.TaxAmount);
                                 if (Taxlist != '') {    
                                     //var SingleTaxobject = [];
                                     debugger
                                     //SingleTaxobject = Taxlist.filter(obj => obj.FK_Paper.toString() === $thisForm.find('[name=FK_Paper]').val().toString());  
                                     
                                     $.each(Taxlist, function (key, value1) {
                                         debugger
                                         if (value1.FK_TaxType == value.ID_TaxType && value1.FK_Paper == $thisForm.find('[name=FK_Paper]').val()) {
                                             value.TaxAmount = value1.TaxAmount;
                                         }
                                     });

                                 }
                                 CheckListHTML += "<tr>";
                                 CheckListHTML += "<td>" + value.SlNo + "</td>";
                                 CheckListHTML += "<td class='jq_taxType_td' Style='Display:none'>" + value.ID_TaxType + "</td>";
                                 CheckListHTML += "<td class='jq_FK_Paper_td' Style='Display:none'>" + $thisForm.find('[name=FK_Paper]').val() + "</td>";
                                 CheckListHTML += "<td class='jq_taxTypeName_td'>" + value.TaxTyName + "</td>";
                                // CheckListHTML += "<td class='jq_taxamount_td'><input min='0'  class='form-control text-right' onkeypress='return isNumberKey(event)' type='text'  value='" + value.TaxAmount + "' ' maxlength='12'/></td> /></td>";
                                 CheckListHTML += "<td class='jq_taxamount_td' ><input  class='form-control text-right'   type='text'  value='" + (value.TaxAmount).toFixed(2) + "' " + `perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input"  maxlength="12" id="Taxinput" name="Taxinput" oninput="decimalpnt(this,'Taxinput',3)"` + " onchange='changetaxamount(this)'/></td> /></td>";


                                 CheckListHTML += "</tr>";
                             })
                         }
                         else {
                             CheckListHTML += "<div class='form-group col-md-6'>";
                             CheckListHTML += "<div class='form-check mb-2'>";
                             CheckListHTML += "<input type='checkbox' class='form-check-input' >"
                             CheckListHTML += "<label class='form-check-label' for='check1'>No Records...</label>";
                             CheckListHTML += "</div></div>"
                         }


                         $("#formGroupModalTaxbody").html(CheckListHTML)
                         $('#formGroupModalTax').modal('show');
                     }
                     else {
                         $.each(ajaxOutput.Process.Message, function (key, value) {
                             NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                         });
                     }
                },
                complete: function () {
                    $(ele).prop('disabled', false);
                }
            });
        }
    function BindTaxAmount1(element) {
        debugger
        let $modal = $(element).closest('.modal');
        let $thisForm = $(element).closest('[perfect-class="form"]');
        let sum = 0;
        Taxlist = [];
        $modal.find('table tbody').find('tr').each(function () {
            sum = sum + parseFloat($(this).find('.jq_taxamount_td').find('input').val());

            let TaxAmount = {
                ID_TaxType: $(this).find('.jq_taxType_td').text(),
                FK_Paper: $(this).find('.jq_FK_Paper_td').text(),
                TaxtyName: $(this).find('.jq_taxTypeName_td').text(),
                TaxAmount: parseFloat($(this).find('.jq_taxamount_td').find('input').val())
            };
            Taxlist.push(TaxAmount);
            $thisForm.data({ pDataTax: Taxlist });

        });
        $thisForm.find('[name=PmdPaperTaxAmount]').val(sum);
        totalamountcalc(element);
    }

    function BindTaxAmount(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let sum = 0;
        
        //if (Taxlist != null) {
        //    Taxlist = Taxlist.filter(obj => obj.FK_Paper.toString() != ($thisForm.find('[name=FK_Paper]').val()).toString());
        //}
        Taxlist = [];
        //Taxlist = TaxMainArray.filter(obj => obj.FK_Paper.toString() === (savedData.FK_Paper).toString());
        $('#formGroupModalTaxbody tr').each(function (index, ele) {
            if ($(this).find('.jq_taxamount_td').find('input').val() == '' || $(this).find('.jq_taxamount_td').find('input').val() == null) {
                parseFloat($(this).find('.jq_taxamount_td').find('input').val(0));
            }
            sum = sum + parseFloat($(this).find('.jq_taxamount_td').find('input').val());

            let TaxAmount = {
                FK_TaxType: $(this).find('.jq_taxType_td').text(),
                FK_Paper: $(this).find('.jq_FK_Paper_td').text(),
                TaxtyName: $(this).find('.jq_taxTypeName_td').text(),
                TaxAmount: parseFloat($(this).find('.jq_taxamount_td').find('input').val())
            };
            Taxlist.push(TaxAmount);
            $thisForm.data({ pDataTax: Taxlist });

        });
        $thisForm.find('[name=PmdPaperTaxAmount]').val(sum.toFixed(2));

        Amount = $thisForm.find('[name="PmdPaperAmount"]').val() == "" ? "0" : $thisForm.find('[name="PmdPaperAmount"]').val();
        tax = $thisForm.find('[name="PmdPaperTaxAmount"]').val() == "" ? "0" : $thisForm.find('[name="PmdPaperTaxAmount"]').val();
        let netamount = 0;

        if ($('#taxinclude').is(":checked")) {
            netamount = parseFloat(Amount);
            $thisForm.find('[name="PmdPaperNetAmount"]').val(parseFloat(netamount).toFixed(2));
        }
        else {
            netamount = parseFloat(Amount) + parseFloat(tax);
            $thisForm.find('[name="PmdPaperNetAmount"]').val(parseFloat(netamount).toFixed(2));

        }
        //for payment method
        $thisForm.find('[name=PmdPaperNetAmount]').val(netamount.toFixed(2));
    }


    function checkpurrateTax(ele) {
     
        ShowTax(ele, 1);


    }           
   




    function totalamountcalc(ele) {
     debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
         //let otheramt = 0;
        let Amount = 0;
        let tax = 0;
        //otheramt = $thisForm.find('[name="OtherCharge"]').val() == "" ? "0" : $thisForm.find('[name="OtherCharge"]').val();
        Amount = $thisForm.find('[name="PmdPaperAmount"]').val() == "" ? "0" : $thisForm.find('[name="PmdPaperAmount"]').val();
        tax = $thisForm.find('[name="PmdPaperTaxAmount"]').val() == "" ? "0" : $thisForm.find('[name="PmdPaperTaxAmount"]').val();

        let netamount = 0;

        if ($('#taxinclude').is(":checked")) {
            netamount = parseFloat(Amount);
            $thisForm.find('[name="PmdPaperNetAmount"]').val(parseFloat(netamount).toFixed(2));
        }
        else {
            netamount = parseFloat(Amount) + parseFloat(tax);
            $thisForm.find('[name="PmdPaperNetAmount"]').val(parseFloat(netamount).toFixed(2));
        }
        //for payment method
        $thisForm.find('[name=PmdPaperNetAmount]').val(netamount.toFixed(2));
        let billamt = 0;
        let bilamt = 0;

        bilamt = netamount;
        $('#Paymentdethead').find('tbody tr').each(function (index, ele) {
            billamt += parseFloat($(ele).find('.PAmount').text());
        });
        bilamt = parseFloat(bilamt) - billamt;

        $thisForm.find('[name=BalAmt]').text(bilamt.toFixed(2));
        $thisForm.find('[name=PAmount]').val(bilamt.toFixed(2));
        //for payment method/////end
     

       
    }

    function CheckAmount(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        debugger
        if (parseFloat($thisForm.find('[name="PmdPaperAmount"]').val()) > 0) {
            $('#TaxButton').attr("disabled", false);
            $('#taxinclude').attr("disabled", false);
        }
        else {
            $('#TaxButton').attr("disabled", "disabled");
            $('#taxinclude').attr("disabled", "disabled");
            $thisForm.data({ pDataTax: null });
            Taxlist = [];
            $thisForm.find('[name=TaxAmount]').val('');
        }

    }
    function ResetTax(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let upperlimit = $thisForm.find('[name="PmdPaperTaxAmount"]').val('');
    }
    function fn_selectprovider(ele) {



        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let $placeDropdown = $thisForm.find('[name=FK_Provider]');//<--- Will give place select html element
        $placeDropdown.empty();
        $placeDropdown.append($('<option/>', { value: '' }).text('Please select')).selectpicker('refresh');

        
       let FK_Paper = $thisForm.find('[name=FK_Paper]').val()
        // let ModeDropdown = $thisForm.find('[name=Mode]')
        //if ($thisForm.find('[name=Mode]').val() == "") {
        //    $thisForm.find('[name=Mode]').val(0);
        //}
        //alert($thisForm.find('[name=Mode]').val())
        $.ajax({
            url: "@Url.Action("BindProvider", "Paper")",
            type: "POST",

            data: JSON.stringify({ FK_Paper: FK_Paper,}),
            dataType: "json",
            contentType: "application/json",
            success: function (ajaxOutput) {



                if (ajaxOutput.Process.IsProcess) {

                    $.each(ajaxOutput.Data, function (key, value) {
                        $placeDropdown.append($('<option/>', { "value": value.ID_Provider }).text(value.ProvName)).selectpicker('refresh')
                    });


                }
                else {
                    $.each(ajaxOutput.Process.Message, function (key, value) {
                        //toastr.warning(value, "Error");
                        //NotificationMessage({ 'type': 'info', 'heading': 'info', 'message': value });
                    });
                }
            }

        });


    }
    $("#pssModalOtherCharges").on('hide.bs.modal', function () {
        $("#OtherChargePaperRenew").trigger("change");
    });
    //function clearfiels() {
    //    let $thisForm = $('[perfect-class="form"]');
    //    debugger
    //    $thisForm.find('[name="PmTotalAmount"]').val(0);
    //    othrchargelst = [];

    //}

</script>

