@*----------------------------------------------------------------------
    Created By	: Alshifa
    Created On	: 08/07/2022
    Purpose		: Sales
    -------------------------------------------------------------------------
    Modification
    On			By					OMID/Remarks
    -------------------------------------------------------------------------
    -------------------------------------------------------------------------*@



@model PerfectWebERP.Models.SaleModel.DropDownListModel
<style>
    input[type=file]::file-selector-button {
        border: 2px solid #e94560;
        padding: .2em .4em;
        border-radius: .2em;
        color: white;
        background-color: #e94560;
        transition: 1s;
    }

    .btn-info2 {
        color: #fff;
        background-color: #9eddf0;
        border-color: #9eddf0;
    }

    .btn-danger {
        color: #f09ec2;
        background-color: #f09ec2;
        border-color: #f09ec2;
    }

        .btn-danger:hover {
            color: #fff;
            background-color: #e94560;
            border-color: #e94560;
        }

    .modal-wxl {
        max-width: 1361px;
    }
    /*new section*/

</style>

<div class="card ">
    <div class="card-header">
        <h4 class="card-title col-12">@ViewBag.PageTitle</h4>
        <span title="To View List" onclick="fn_showListView();"><svg id="Layer_1" class="layer" stroke="currentColor" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" height="20" width="20" viewBox="0 0 122.88 122.54"><title>To View List</title><path class="viewlst" d="M4.69,0H46.22a4.71,4.71,0,0,1,4.69,4.69V46a4.69,4.69,0,0,1-4.69,4.69H4.69a4.65,4.65,0,0,1-3.31-1.38l-.09-.09A4.67,4.67,0,0,1,0,46V4.69A4.71,4.71,0,0,1,4.69,0ZM89.44,61.94a26.56,26.56,0,0,1,10.18,2l.07,0a26.61,26.61,0,0,1,15.25,32.16,26.18,26.18,0,0,1-2.7,6.11l10.3,11.24a1.27,1.27,0,0,1-.07,1.8l-7.57,6.9a1.27,1.27,0,0,1-1.79-.07l-9.86-10.85a26.36,26.36,0,0,1-6.1,2.74,26.87,26.87,0,0,1-7.71,1.13,26.51,26.51,0,0,1-10.17-2l-.07,0A26.64,26.64,0,0,1,64.85,78.37l0-.07A26.6,26.6,0,0,1,89.44,61.94Zm15,11.59a21.38,21.38,0,0,0-6.89-4.61l-.06,0a21.22,21.22,0,0,0-23.07,4.64l-.07.07a21.25,21.25,0,0,0-4.54,6.83l0,.06a21.32,21.32,0,0,0-1.58,8.06,21.26,21.26,0,0,0,29.35,19.62,21.54,21.54,0,0,0,6.89-4.61l.07-.07a21.09,21.09,0,0,0,4.54-6.83l0-.06a21.35,21.35,0,0,0,0-16.17,21.34,21.34,0,0,0-4.62-6.9ZM4.69,63.2H46.22a4.71,4.71,0,0,1,4.69,4.7v41.34a4.68,4.68,0,0,1-4.69,4.69H4.69A4.69,4.69,0,0,1,0,109.24V67.9a4.71,4.71,0,0,1,4.69-4.7ZM68.78,0h41.53A4.71,4.71,0,0,1,115,4.69V46a4.71,4.71,0,0,1-4.69,4.69H68.78A4.71,4.71,0,0,1,64.09,46V4.69a4.69,4.69,0,0,1,1.37-3.31l.1-.09A4.67,4.67,0,0,1,68.78,0Z"></path></svg></span>
    </div>
    <div class="card-body ">
        <form id="form" class="form-valide" perfect-class="form" action="#" method="post" perfect-onFormSuccess="">
            <div class="">
                @Html.AntiForgeryToken()
                <!---Product Serial Numbers Modal---->
                <!---End---->
                <div class="row">
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel"> Entered Date</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="date" class="form-control perfectValidate_date" name="SalEnterDate" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" max="2050-01-01" onchange="datencheck(this)" />
                                <div class="invalid-feedback animated fadeInUp limit-check" style="display: block;"></div>


                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Bill Type</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="hidden" name="LastID" perfect-ctype="hidden" perfect-css="input" />

                                <input type="hidden" name="FK_Branch" value="@ViewBag.FK_Branch" />
                                @*<input type="hidden" name="FK_Department" value="@ViewBag.FK_Department" />*@
                                <input type="hidden" name="TransMode" perfect-ctype="hidden" />
                                <input type="hidden" name="SalesID" perfect-ctype="hidden" />
                                <input type="hidden" name="ID_Hold" perfect-ctype="hidden" />
                                <input type="hidden" name="SalBillNo" perfect-ctype="hidden" />
                                <input type="hidden" name="MopHidden" perfect-ctype="hidden" />
                                <input type="hidden" name="discountHidden" perfect-ctype="hidden" />
                                <input type="hidden" name="SettelementPending" perfect-ctype="hidden" />
                                <input type="hidden" name="NewBillAmount" perfect-ctype="hidden" />
                                <input type="hidden" name="SalesRec" value="0" perfect-ctype="hidden" />
                                <select class="form-control perfectValidate_string" name="BillType" id="BillType" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select">
                                    <option value="">Please Select </option>


                                    @if (!(Model.BillTypeListView is null))
                                    {
                                        foreach (var BillType in Model.BillTypeListView)
                                        {
                                            <option value="@BillType.BillTypeID">@BillType.BillType</option>
                                        }
                                    }
                                </select>

                            </div>
                        </div>
                    </div>

                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel"> Bill Date</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="date" class="form-control perfectValidate_date" name="SalBillDate" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" max="2050-01-01" onchange="billdatencheck(this)" />
                                <div class="invalid-feedback animated fadeInUp limit-check" style="display: block;"></div>
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Import From</span>
                            </label>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <input type="hidden" name="ImportID" />
                                    <select class="form-control" id="Supplier" name="Supplier" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" onchange="fun_import(this);displayBuyBack(this)">
                                        <option value="0">Please Select </option>
                                        <option value="4">Customer</option>
                                        <option value="2">Sales Order</option>
                                        <option value="3">Lead</option>
                                        <option value="5">Branch</option>
                                        <option value="6">Quotation</option>

                                    </select>

                                    <div class="input-group-append">
                                        <button id="importbtn" data-toggle="tooltip" data-placement="top" data-html="true" title="Import from Customer,SalesOrder,Lead,Branch" class="btn btn-primary" type="button" perfect-css="button" onclick="fn_showimportlist(this)" Function="1"><i class="las la-file-import la-lg"></i></button>
                                        <button id="customerbtn" class="btn btn-primary fa fa-user-plus" type="button" perfect-css="button" onclick="fn_customerForm_loadState(this)" style="display:none" title="Add Customer"></button>
                                        <button id="btnbranchSearch" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchValAssign(this, 147, 'Branch List', [], ['FK_BranchType', 'FK_BranchMode', 'CustomeName','ID_Branch','MobileNo','GSTINNo','State'], SalesTransMode);" Criterea2="FK_Branch" style="display:none" Function="1"></button>
                                        <button id="btnQuotationSearch" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchValAssign(this, 172, 'Quotation List', [], ['FK_BranchType', 'FK_BranchMode', 'CustomeName','ID_Branch','MobileNo','FK_Salesorder','FK_CustomerOthers','FK_Customer','SoAddnAmount','SoDownPayment','TransMode','FK_Quotation','Othercharge'], SalesTransMode);" Criterea2="FK_Branch" style="display:none" Function="1"></button>
                                        <input type="hidden" id="hdnChangeImport" value="0" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Name<span class="text-danger">*</span></span>

                            </label>
                            <div class="col-sm-8">
                                <input type="hidden" name="ID_Customer" perfect-ctype="hidden" />
                                <input type="hidden" name="FK_Lead" perfect-ctype="hidden" />
                                <input type="hidden" name="FK_Salesorder" perfect-ctype="hidden" />
                                <input type="hidden" name="FK_Quotation" perfect-ctype="hidden" />
                                <input type="hidden" name="FK_Customer" perfect-ctype="hidden" />
                                <input type="hidden" name="FK_CustomerOthers" perfect-ctype="hidden" />
                                <input type="hidden" name="ID_Branch" perfect-ctype="hidden" />

                                <input type="hidden" name="State" perfect-ctype="hidden" />
                                <input type="hidden" name="GSTINNo" perfect-ctype="hidden" />
                                <div class="input-group">

                                    <input type="text" class="form-control perfectValidate_string" name="CustomeName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" maxlength="150" />
                                    <div class="input-group-append">
                                        <button id="customerbalancebtn" class="btn btn-primary fa fa-info" type="button" perfect-css="button" title="Customer Balance" onclick="ShowCustomerBalance(this)"></button>
                                    </div>

                                    <div class="modal fade" perfect-class="formGroupModalCustomerBalance" id="formGroupModalCustomerBalance">
                                        <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
                                            <div class="modal-content  rounded-lg">
                                                <div class="modal-header border-0">
                                                    <h5 class="modal-title">Customer Balance</h5>
                                                    <button type="button" class="close" data-dismiss="modal">
                                                        <span>&times;</span>
                                                    </button>
                                                </div>
                                                <div class="modal-body" perfect-class="formGroup" style="max-height: calc(100vh - 200px); overflow-y: auto;padding: 1rem;">
                                                    <div class="default-tab">

                                                        <ul class="nav nav-tabs" role="tablist">
                                                            <li class="nav-item">
                                                                <a class="nav-link active" data-toggle="tab" id="Customerdueid" href="#CustomerDue"><i class="fa fa-exclamation mr-2"></i>Customer Due</a>
                                                            </li>
                                                        </ul>

                                                        <div class="tab-content">
                                                            <div id="CustomDue" class="tab-pane active">
                                                                <div class="row" style="margin-top:1.5rem;">
                                                                    <div class="col-sm-12">
                                                                        <div id="Accountbalancedetails" style="display:none"></div>
                                                                        <div class="row col-md-12" id="Accountbalancedetailss"></div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>

                                                    <div class="col-md-12 mt-3" perfect-class="formGroupModalCustomerBalancebody">


                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="modal-footer border-0"></div>
                                    </div>

                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Mobile No</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    <input type="text" class="form-control perfectValidate_mobile" name="MobileNo" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input"maxlength="15" />


                                </div>
                            </div>
                            <div class="input-group-append">
                                <button id="shippingbtnid" class="btn btn-primary fa fa-truck" aria-hidden="true" type="button" perfect-css="button" title="Add Shipping Details" onclick="GetShippingdetailslists(this)"></button>
                            </div>
                            <div class="modal fade" perfect-class="formGroupModalShippingDetails" id="formGroupModalShippingDetails">
                                <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
                                    <div class="modal-content  rounded-0">
                                        <div class="modal-header border-0">
                                            <h5 class="modal-title">Shipping Details</h5>
                                            <button type="button" class="close" data-dismiss="modal">
                                                <span>&times;</span>
                                            </button>
                                        </div>
                                        <div class="modal-body" perfect-class="formGroup" style="max-height: calc(100vh - 200px); overflow-y: auto;padding: 1rem;">
                                            <div class="row" style="margin-top:1.5rem;">

                                                <div class="col-sm-6">
                                                    <div class="form-group row" perfect-class="formGroup">

                                                        <div class="col-sm-5">
                                                            <div class="form-check form-check-inline" perfect-class="formCheck">
                                                                <label class="form-check-label" perfect-class="formCheckLabel" id="divCheckboxsame">
                                                                    <input type="checkbox" class="form-check-input" id="Checkboxsame" name="Checkboxsame" perfect-class="formCheckInput" perfect-ctype="checkbox" onchange="loadcustomeraddress(this)" perfect-css="checkbox">Same Address
                                                                </label>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="col-sm-6"></div>
                                                <div class="col-sm-6">
                                                    <div class="form-group row" perfect-class="formGroup">
                                                        <label class="col-sm-5 col-form-label">
                                                            <span perfect-class="formGroupLabel">Name</span>

                                                        </label>
                                                        <div class="col-sm-7">
                                                            <div class="input-group">

                                                                <input type="text" class="form-control perfectValidate_string_nm psscapitalize" placeholder="" name="ShpContactName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" maxlength="150" />
                                                            </div>

                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="col-sm-6">
                                                </div>
                                                <div class="col-sm-6">
                                                    <div class="form-group row" perfect-class="formGroup">
                                                        <label class="col-sm-5 col-form-label">
                                                            <span perfect-class="formGroupLabel">House Name</span>

                                                        </label>
                                                        <div class="col-sm-7">

                                                            <div class="input-group">

                                                                <input type="text" class="form-control perfectValidate_string_nm psscapitalize" autocomplete="off" placeholder="Enter House Name" name="Address1" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" maxlength="150" />
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="col-sm-6">
                                                    <div class="form-group row" perfect-class="formGroup">
                                                        <label class="col-sm-5 col-form-label">
                                                            <span perfect-class="formGroupLabel">Place</span>

                                                        </label>
                                                        <div class="col-sm-7">

                                                            <div class="input-group">

                                                                <input type="text" class="form-control perfectValidate_string_nm psscapitalize" autocomplete="off" placeholder="Enter Place" name="Address2" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" maxlength="150" />
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>

                                                <div class="col-sm-6">
                                                    <div class="form-group row" perfect-class="formGroup">
                                                        <label class="col-sm-5 col-form-label">
                                                            <span perfect-class="formGroupLabel">PinCode</span>
                                                        </label>
                                                        <div class="col-sm-7">
                                                            <div class="input-group">
                                                                <input type="text" class="form-control perfectValidate_numeric_nm" name="PinCode" placeholder="Type here and search" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" onchange="ResetCommunication(this)" maxlength="10" />
                                                                <div class="input-group-append">
                                                                    <button id="addpincode-jq-searchButton3" name="pincd" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="searchbtn(this)"></button>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>

                                                <div class="col-sm-6">
                                                    <div class="form-group row" perfect-class="formGroup">
                                                        <label class="col-sm-5 col-form-label">
                                                            <span perfect-class="formGroupLabel">Country</span>

                                                        </label>
                                                        <div class="col-sm-7">
                                                            <div class="input-group">
                                                                <input type="text" class="form-control " name="Country" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled />
                                                                <input type="hidden" name="CountryID" class="perfectValidate_numeric_nm" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                                <div class="input-group-append">
                                                                    <button id="addcountry-jq-searchButton3" name="cntry" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchVal(this,9,'Country List',['','','States','StatesID','DistrictID','District','AreaID','Area','Post','PostID','PinCode'])" Criterea1="0" Criterea2="0" BindName="Country" BindVal="CountryID"></button>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="col-sm-6">
                                                    <div class="form-group row" perfect-class="formGroup">
                                                        <label class="col-sm-5 col-form-label">
                                                            <span perfect-class="formGroupLabel">State</span>

                                                        </label>
                                                        <div class="col-sm-7">
                                                            <div class="input-group">
                                                                <input type="text" class="form-control " name="States" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled />
                                                                <input type="hidden" name="StatesID" class="perfectValidate_numeric_nm" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                                <div class="input-group-append">
                                                                    <button id="addstates-jq-searchButton3" name="state" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchVal(this,10,'State List',['CountryID','Country','DistrictID','District','AreaID','Area','Post','PostID','PinCode'])" Criterea1="CountryID" Criterea2="0" BindName="States" BindVal="StatesID"></button>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>

                                                <div class="col-sm-6">
                                                    <div class="form-group row" perfect-class="formGroup">
                                                        <label class="col-sm-5 col-form-label">
                                                            <span perfect-class="formGroupLabel">District</span>

                                                        </label>
                                                        <div class="col-sm-7">
                                                            <div class="input-group">
                                                                <input type="text" class="form-control " name="District" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled />
                                                                <input type="hidden" name="DistrictID" class="perfectValidate_numeric_nm" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                                <div class="input-group-append">
                                                                    <button id="adddistrict-jq-searchButton3" name="distct" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchVal(this,11,'District List',['StatesID','State','AreaID','Area','Post','PostID','PinCode'])" Criterea1="StatesID" Criterea2="0" BindName="District" BindVal="DistrictID"></button>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>

                                                <div class="col-sm-6">
                                                    <div class="form-group row" perfect-class="formGroup">
                                                        <label class="col-sm-5 col-form-label">
                                                            <span perfect-class="formGroupLabel">Area</span>
                                                        </label>
                                                        <div class="col-sm-7">
                                                            <div class="input-group">
                                                                <input type="text" class="form-control " autocomplete="off" name="Area" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" maxlength="150" readonly />
                                                                <input type="hidden" name="AreaID" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                                <div class="input-group-append">
                                                                    <button id="addarea-jq-searchButton3" name="areas" class="btn btn-primary fa fa-search" type="button" perfect-css="button" form="form" onclick="GetCmnPopUpSearchVal(this,14,'Area List',['DistrictID','District','Post','PostID','PinCode'])" criterea1="DistrictID" criterea2="0" bindname="Area" bindval="AreaID"></button>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>

                                                <div class="col-sm-6">
                                                    <div class="form-group row" perfect-class="formGroup">
                                                        <label class="col-sm-5 col-form-label">
                                                            <span perfect-class="formGroupLabel">Post</span>

                                                        </label>
                                                        <div class="col-sm-7">
                                                            <div class="input-group">
                                                                <input type="text" class="form-control " name="Post" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled />
                                                                <input type="hidden" name="PostID" class="perfectValidate_numeric_nm" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                                <div class="input-group-append">
                                                                    <button id="addpincode-jq-searchButton3" name="pst" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchVal(this,13,'Post List',['AreaID','Area','PinCode'])" Criterea1="AreaID" Criterea2="0" BindName="Post" BindVal="PostID"></button>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="col-sm-6">
                                                    <div class="form-group row" perfect-class="formGroup">
                                                        <label class="col-sm-5 col-form-label">
                                                            <span perfect-class="formGroupLabel">Mobile</span>

                                                        </label>
                                                        <div class="col-sm-7">

                                                            <div class="input-group">

                                                                <input type="text" class="form-control perfectValidate_mobile_nm" autocomplete="off" placeholder="" name="ShpMobile" id="ShpMobile" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" maxlength="15" oninput="decimalpntnew(this,'ShpMobile',0)" />
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="col-sm-12">

                                                </div>
                                                <div class="col-sm-12">
                                                    <div class="form-group row" perfect-class="formGroup">
                                                        <label class="col-sm-5 col-form-label">


                                                        </label>
                                                        <div class="col-sm-7">


                                                        </div>
                                                    </div>
                                                </div>

                                                <div class="col-sm-6">
                                                    <div class="form-group row" perfect-class="formGroup">
                                                        <label class="col-sm-5 col-form-label">Transportation Type</label>
                                                        <div class="col-sm-7">
                                                            <div class="input-group">
                                                                <select class="form-control" name="Transporttype" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select">

                                                                    <option value="0">Please Select</option>

                                                                    @if (!(Model.TransporttypeModeList is null))
                                                                    {
                                                                        foreach (var transportList in Model.TransporttypeModeList)
                                                                        {
                                                                            <option value="@transportList.ID_Mode">@transportList.ModeName</option>
                                                                        }

                                                                    }
                                                                </select>


                                                            </div>
                                                            <div class="text-danger temptableError"></div>
                                                        </div>
                                                    </div>
                                                </div>

                                                <div class="col-sm-6">
                                                    <div class="form-group row" perfect-class="formGroup">
                                                        <label class="col-sm-5 col-form-label">
                                                            <span perfect-class="formGroupLabel">Vehicle No.</span>

                                                        </label>
                                                        <div class="col-sm-7">

                                                            <div class="input-group">
                                                                <input type="text" class="form-control perfectValidate_Vehiclenumber_nm" name="Vehicleno" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" maxlength="20" />
                                                                <input type="hidden" name="FK_Vehicle" class="form-control" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                                <div class="input-group-append">
                                                                    <button id="addvehicle-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchVal(this,175,'Vehicle List',[])" Criterea1="BranchID" Criterea2="0" BindName="Vehicleno" BindVal="FK_Vehicle"></button>

                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>

                                                <div class="col-sm-6">
                                                    <div class="form-group row" perfect-class="formGroup">
                                                        <label class="col-sm-5 col-form-label">
                                                            <span perfect-class="formGroupLabel">Driver Name</span>

                                                        </label>
                                                        <div class="col-sm-7">
                                                            <div class="input-group">

                                                                <input type="text" class="form-control perfectValidate_string_nm psscapitalize" placeholder="" name="DrvName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" maxlength="150" />
                                                            </div>

                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="col-sm-6">
                                                    <div class="form-group row" perfect-class="formGroup">
                                                        <label class="col-sm-5 col-form-label">
                                                            <span perfect-class="formGroupLabel">Driver Phone No</span>

                                                        </label>
                                                        <div class="col-sm-7">
                                                            <div class="input-group">

                                                                <input type="text" class="form-control perfectValidate_mobile_nm" autocomplete="off" placeholder="" name="DrvPhoneno" id="DrvPhoneno" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" maxlength="15" oninput="decimalpntnew(this,'DrvPhoneno',0)" />
                                                            </div>

                                                        </div>
                                                    </div>
                                                </div>

                                                <div class="col-sm-9">


                                                </div>



                                                <div class="modal-footer">

                                                    <button type="button" class="btn btn-primary light" data-dismiss="modal">Apply</button>

                                                </div>
                                            </div>


                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>





                </div>
            </div>
            <div class="row">
                <div class="col-sm-12">
                    <div class="daccordion__header">
                        <span class="accordion__header--text">Product Details</span>
                    </div>
                    <div class="row">
                        <div class="col-sm-12 " perfect-class="TempTableProduct">
                            <br />
                            <div class="row">

                                <div class="col-sm-4" id="DepartmentDiv">
                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-4 col-form-label">
                                            <span perfect-class="formGroupLabel">Department</span>
                                            <span class="text-danger">*</span>
                                        </label>
                                        <div class="col-sm-8">
                                            <select class="form-control " name="FK_Department" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" onchange="productcleardep(this,'Purchase')">
                                                <option value="0">All</option>
                                                @if (!(Model.DepartmentList is null))
                                                {
                                                    foreach (var Department in Model.DepartmentList)
                                                    {
                                                        <option value="@Department.DepartmentID">@Department.Department</option>
                                                    }
                                                }
                                            </select>
                                        </div>
                                    </div>
                                </div>


                                <div class="col-sm-4" id="ProductDiv">
                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-4 col-form-label">Product&nbsp;<span class="text-danger">*</span></label>
                                        <div class="col-sm-8">
                                            <div class="input-group">
                                                <input type="text" class="form-control " perfect-tempTable-Purchase="ProName" name="ProName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly />
                                                <input type="hidden" name="ProductID" perfect-tempTable-Purchase="Item" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" onchange="getdepartmentbystockid(this)" />
                                                <input type="hidden" name="StockId" perfect-tempTable-Purchase="StockId" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                <input type="hidden" name="EMIProduct" perfect-tempTable-Purchase="EMIProduct" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                <input type="hidden" name="FK_Master" perfect-tempTable-Purchase="FK_Master" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                <input type="hidden" name="downpay" perfect-tempTable-Purchase="downpay" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                <input type="hidden" name="AdditionalPay" perfect-tempTable-Purchase="AdditionalPay" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                <input type="hidden" name="FK_FinancePlanType" perfect-tempTable-Purchase="FK_FinancePlanType" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                <input type="hidden" name="CrntQnty" perfect-tempTable-Purchase="CrntQnty" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                @*<input type="hidden" name="Unit" perfect-tempTable-Purchase="Unit" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />*@

                                                <div class="input-group-append">
                                                    <button id="addcountry-jq-searchButton3" name="prdbtn" class="btn btn-primary fa fa-search" type="button" onclick="GetCmnPopUpSearchValAssign(this, 131, 'Product Details', [], ['MRPs','SalePrice','StockId','Department','CrntQnty'],SalesTransMode)" Function="2" BindName="ProName" BindVal="ProductID" Criterea1="FK_Branch" Criterea2="FK_Department" perfect-css="button"></button>
                                                </div>
                                                <div class="text-danger temptableError"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                @if (ViewBag.MultiUnit == true)
                                {
                                    <div class="col-sm-4">

                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">Unit</span>
                                                <span class="text-danger">*</span>
                                            </label>
                                            <div class="col-sm-8">
                                                <select class="form-control " name="UnitID" id="UnitID" perfect-tempTable-Purchase="Unit" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select">

                                                    @*<option value="1">Please Select </option>*@
                                                    @if (!(Model.ProductUnitList is null))
                                                    {
                                                        foreach (var Unit in Model.ProductUnitList)
                                                        {
                                                            <option value="@Unit.FK_Unit" UnitCountS="@Unit.UnitCount">@Unit.UnitName</option>
                                                        }
                                                    }
                                                </select>
                                                <span class="temptableError"></span>
                                            </div>
                                        </div>

                                    </div>
                                }

                            </div>
                            <div class="row">
                                <div class="col-sm-4">
                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-4 col-form-label">Quantity&nbsp;<span class="text-danger">*</span></label>
                                        <div class="col-sm-8">
                                            <div class="input-group">
                                                <input type="text" class="form-control text-right " perfect-tempTable-Purchase="Quantity" name="SpdSalQuantity" id="SpdSalQuantity" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="decimalpnt(this,'SpdSalQuantity',4)" onfocus="this.oldvalue = this.value;" @*onchange="fn_getSerialNumbers(this)"*@ onchange="ResetAMCandWarranty(this);" min="0" maxlength="13" />
                                                <div class="input-group-append">
                                                    <button id="" name="qtybutton" class="btn btn-primary fa fa-list-ol" type="button" perfect-css="button" onclick="fn_getSubProductPopUp(this);"></button>
                                                    @*COMPONETS*@
                                                    <div class="modal fade" perfect-class="formGroupModalQuantitySales" id="formGroupModalQuantitySales">
                                                        <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
                                                            <div class="modal-content ">
                                                                <div class="modal-header border-0">
                                                                    <h5 class="modal-title">Quantity Details</h5>
                                                                    @*<button type="button" class="close" data-dismiss="modal" >
                                                <span>&times;</span>
                                            </button>*@
                                                                </div>
                                                                <div class="modal-body" perfect-class="formGroup" style="max-height: calc(100vh - 200px); overflow-y: auto;padding: 1rem;">
                                                                    <br />
                                                                    <div class="row">
                                                                        <div class="col-sm-5">
                                                                            <div class="form-group row" perfect-class="formGroup">
                                                                                <label class="col-sm-4 col-form-label">
                                                                                    <span perfect-class="formGroupLabel ">Product</span>
                                                                                </label>
                                                                                <div class="col-sm-8">
                                                                                    <div class="input-group">
                                                                                        <input type="hidden" class="form-control" name="ProdId" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                                                        <input type="text" class="form-control" name="ProdsName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly />
                                                                                    </div>
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                        <div class="col-sm-5">
                                                                            <div class="form-group row" perfect-class="formGroup">
                                                                                <label class="col-sm-4 col-form-label">
                                                                                    <span perfect-class="formGroupLabel">Quantity</span>
                                                                                </label>
                                                                                <div class="col-sm-8">
                                                                                    <div class="input-group">
                                                                                        <input type="text" class="form-control text-right" name="Qty" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly />
                                                                                    </div>
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                        <div class="col-sm-2">
                                                                            <button type="button" class="btn btn-primary1 fa fa-list-ol float-right" perfect-css="button" onclick="fn_getSerialNumbers(this,0,0)" name="SlNumber"></button>
                                                                        </div>
                                                                    </div>
                                                                    <div class="daccordion__header Subproductheader">
                                                                        <span class="accordion__header--text">Sub Product Details</span>
                                                                    </div>
                                                                    <br />
                                                                    @*<div class="row" id="divSubproductDtls">

                                            </div>*@

                                                                    @*new changes start*@
                                                                    <div class="row">
                                                                        <div class="col-sm-5">
                                                                            <div class="form-group row" perfect-class="formGroup">
                                                                                <label class="col-sm-4 col-form-label">Sub Product&nbsp;<span class="text-danger">*</span></label>
                                                                                <div class="col-sm-8">
                                                                                    <div class="input-group">
                                                                                        <input type="text" class="form-control " name="SubProdName" perfect-tempTable-SerialNumber="SubProdName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly />
                                                                                        <input type="hidden" class="form-control " name="SubProductID" perfect-tempTable-SerialNumber="SubProductID" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                                                        <input type="hidden" class="form-control " name="SubStockId" perfect-tempTable-SerialNumber="SubStockId" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                                                        <input type="hidden" class="form-control " name="Fixed" perfect-tempTable-SerialNumber="Fixed" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                                                        <input type="hidden" class="form-control " name="ProductNumbering" perfect-tempTable-SerialNumber="ProductNumbering" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                                                        <input type="hidden" class="form-control " name="CurrentStock" perfect-tempTable-SerialNumber="CurrentStock" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                                                        <input type="hidden" class="form-control " name="Master_ID" perfect-tempTable-SerialNumber="Master_ID" perfect-class="formGroupControl" @*perfect-ctype="hidden"*@ perfect-css="input" />
                                                                                        <div class="input-group-append">
                                                                                            <button id="addcountry-jq-searchButton3" name="Subprdbtn" class="btn btn-primary fa fa-search" type="button" onclick="GetCmnPopUpSearchValAssign(this, 119, 'Sub Product Details', [], ['SubStockId','Fixed','SubQty','ProductNumbering','CurrentStock'],SalesTransMode)" BindName="SubProdName" BindVal="SubProductID" Criterea1="ProductID" Criterea2="FK_Department" Criterea3="SpdSalQuantity" Criterea5="FK_Branch" Function="4" perfect-css="button" min="0" maxlength="13"></button>
                                                                                        </div>
                                                                                        <div class="text-danger temptableError1"></div>
                                                                                    </div>
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                        <div class="col-sm-5">
                                                                            <div class="form-group row" perfect-class="formGroup">
                                                                                <label class="col-sm-4 col-form-label">
                                                                                    <span perfect-class="formGroupLabel">Quantity</span>
                                                                                    <span class="text-danger">*</span>
                                                                                </label>
                                                                                <div class="col-sm-8">
                                                                                    <div class="input-group">
                                                                                        <input type="text" class="form-control text-right" name="SubQty" perfect-tempTable-SerialNumber="SubQty" oninput="decimalpnt(this,'SubQty',4)" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly />
                                                                                    </div>
                                                                                    <div class="text-danger temptableError1"></div>
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                        <div class="col-sm-2">
                                                                            <button type="button" class="btn btn-primary1 fa fa-list-ol float-right" perfect-css="button" onclick="fn_getSerialNumbers(this,1,0)" name="SlNumber"></button>
                                                                        </div>
                                                                    </div>
                                                                    <div class="row">
                                                                        <div class="col-sm-9">
                                                                        </div>
                                                                        <div class="col-sm-3" style="float:right">
                                                                            <div class="input-group">
                                                                                <div class="input-group-append">
                                                                                    <div>
                                                                                        <button type="button" class="btn btn-primary1 " onclick="createtable(this,'SerialNumber',['SubStockId'],SerialNumOptionsTempOut)"><i class="fa fa-plus" aria-hidden="true"></i></button>
                                                                                        <button class="btn btn-light1" type="button" onclick="productclear(this, 'SerialNumber')"><i class="fa fa-refresh" aria-hidden="true"></i></button>
                                                                                    </div>
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                    </div>

                                                                    <div class="row">
                                                                        <div class="col-sm-12">
                                                                            <div class="table-responsive" perfect-tempTable="SerialNumber" id="SerialNumberhead" perfect-tempTable-lastindex="0" perfect-tempTable-action="0"></div>
                                                                        </div>
                                                                    </div>
                                                                    @*new changes end*@

                                                                    <div class="modal-footer">
                                                                        <button type="button" class="btn btn-primary1" perfect-css="button" onclick="fn_SubProductDetailsPopupHide(this)" name="qtyapply">Apply</button>
                                                                        @*<button type="button" id="clearquantity" class="btn btn-light1" perfect-css="button" name="reset" >Clear</button>*@
                                                                    </div>
                                                                    <div class="col-md-12 mt-3" perfect-class="formGroupModalQuantitybody">


                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="modal-footer border-0"></div>
                                                    </div>
                                                    @*COMPONETS*@

                                                </div>
                                            </div>

                                            <div class="text-danger temptableError"></div>
                                        </div>

                                    </div>
                                </div>
                                <div class="col-sm-4" id="FreeQuantityDiv">
                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-4 col-form-label">Free Quantity</label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control text-right " perfect-tempTable-Purchase="FreeQuantity" name="SpdSalFreeQuantity" id="SpdSalFreeQuantity" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="decimalpnt(this,'SpdSalFreeQuantity',4)" onfocus="this.oldvalue = this.value;" min="0" maxlength="13" />
                                        </div>
                                    </div>
                                </div>

                                <div class="col-sm-4 " id="MRPDiv">
                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-4 col-form-label">
                                            <span perfect-class="formGroupLabel">MRP</span>

                                        </label>
                                        <div class="col-sm-8">
                                            <div class="input-group">
                                                <input type="text" class="form-control text-right" perfect-tempTable-Purchase="MRP" name="MRPs" id="MRPs" perfect-class="formGroupControl" @*onchange="calcsalpttl(this)"*@ onchange="checkMRP(this,'Purchase','temptableError')" perfect-ctype="input" perfect-css="input" oninput="decimalpnt(this,'MRPs',3)" maxlength="12" />

                                            </div>
                                            <div class="text-danger temptableError" style="display:block"></div>
                                        </div>
                                    </div>
                                </div>
                               



                                <div class="col-sm-4" style="display:none">
                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-4 col-form-label">
                                            Warranty Amount
                                        </label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control text-right" perfect-tempTable-Purchase="AMCFK_Master" name="AMCFK_Master" id="AMCFK_Master" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                                            <input type="text" class="form-control text-right" perfect-tempTable-Purchase="WarrantyTotalAmt" name="WarrantyTotalAmt" id="WarrantyTotalAmt" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                                            <input type="text" class="form-control text-right" perfect-tempTable-Purchase="AMCMType" name="AMCMType" id="AMCMType" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                                            <input type="text" class="form-control text-right" perfect-tempTable-Purchase="AMCNoOfServices" name="AMCNoOfServices" id="AMCNoOfServices" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                                            <input type="date" class="form-control" perfect-tempTable-Purchase="AMCMDuedate" name="AMCMDuedate" id="AMCMDuedate" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" />
                                            <input type="date" class="form-control" perfect-tempTable-Purchase="AMCMRenewduedate" name="AMCMRenewduedate" id="AMCMRenewduedate" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" />
                                            <input type="text" class="form-control text-right" perfect-tempTable-Purchase="AmcTotalAmount" name="AmcTotalAmount" id="AmcTotalAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                                            <input type="text" class="form-control text-right" perfect-tempTable-Purchase="AMCTaxTotalAmt" name="AMCTaxTotalAmt" id="AMCTaxTotalAmt" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                                            <input type="text" class="form-control text-right" perfect-tempTable-Purchase="AMCNetTotalAmt" name="AMCNetTotalAmt" id="AMCNetTotalAmt" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                                            <input type="text" class="form-control text-right" perfect-tempTable-Purchase="AMCRemarks" name="AMCRemarks" id="AMCRemarks" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-4 " id="SalePriceDiv">
                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-4 col-form-label">
                                            Sales Price<span class="text-danger">*</span>
                                        </label>
                                        <div class="col-sm-8">

                                            <input type="text" class="form-control text-right" perfect-tempTable-Purchase="SalPrice" name="SalePrice" maxlength="12" id="SalePrice" onchange="calcsalpttl(this)" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="decimalpnt(this,'SalePrice',3)" />
                                            <div class="text-danger temptableError"></div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-4 " id="TaxDiv">
                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-4 col-form-label">
                                            <span perfect-class="formGroupLabel">Tax </span>

                                        </label>
                                        <div class="col-sm-8">
                                            <div class="input-group">
                                                <input type="number" class="form-control text-right" perfect-tempTable-Purchase="TaxAmount" placeholder="" name="TaxAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly style="display:none"/>
                                                <input type="number" class="form-control text-right" perfect-tempTable-Purchase="TaxAmountVisible" placeholder="" name="TaxAmountVisible" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly />
                                                <input type="hidden" perfect-tempTable-Purchase="NetAmt" placeholder="" name="NetAmt" readonly perfect-ctype="hidden" />

                                                <div class="input-group-append">
                                                    <button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="ShowTax(this,1)"></button>
                                                </div>
                                                <div class="modal fade" perfect-class="formGroupModalTax" id="formGroupModalTax">
                                                    <div class="modal-dialog modal-dialog-centered" role="document">
                                                        <div class="modal-content  rounded-0">
                                                            <div class="modal-header border-0">
                                                                <h5 class="modal-title">Tax Details</h5>
                                                                <button type="button" class="close" data-dismiss="modal">
                                                                    <span>&times;</span>
                                                                </button>
                                                            </div>
                                                            <div class="modal-body" perfect-class="formGroup" style="max-height: calc(100vh - 200px); overflow-y: auto;padding: 1rem;">

                                                                @*<div class="table-responsive" style="max-height: 100%; height: 80%; overflow: auto;">*@
                                                                <table id="zero_config" class="table mb-0  table-striped  text-black">
                                                                    <thead class="bg-primary text-white">
                                                                        <tr>
                                                                            <th class="t-head">SlNo</th>
                                                                            <th class="t-head" style="Display:none">FK_TaxType</th>
                                                                            <th class="t-head">TaxType</th>
                                                                            <th class="t-head">Percentage</th>
                                                                            <th class="t-head">Amount</th>
                                                                        </tr>
                                                                    </thead>
                                                                    <tbody id="formGroupModalTaxbody"></tbody>
                                                                    <tfoot>
                                                                    </tfoot>
                                                                </table>
                                                                @*</div>*@
                                                                @*<div class="modal-body" id="formGroupModalTaxbody">
                        </div>*@

                                                                <div class="modal-footer">
                                                                    @*<button type="button" onclick="CreateProductCheckDescription(this);" class="btn btn-primary">Add</button>*@

                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>

                                            </div>
                                            <span class="temptableError"></span>

                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-4 " id="DiscountDiv">
                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-4 col-form-label">
                                            Discount Amt/%
                                        </label>
                                        <div class="col-sm-8">
                                            <div class="input-group">
                                                <input type="text" class="form-control text-right" perfect-tempTable-Purchase="Discamt" name="Discamt" id="Discamt" perfect-class="formGroupControl" onchange="CalculateDiscamt(this)" oninput="decimalpnt(this,'Discamt',3)" perfect-ctype="input" perfect-css="input" />
                                                <input type="text" class="form-control text-right" perfect-tempTable-Purchase="Discp" id="Discp" name="Discp" perfect-class="formGroupControl" oninput="minmax(0,100,this,3)" onchange="CalculateDiscper(this)" perfect-ctype="input" perfect-css="input" />
                                                <span id="Discperrr" class="temptableError"></span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-4 " id="DiscriptionDiv">
                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-4 col-form-label">Description</label>
                                        <div class="col-sm-8">
                                            <textarea class="form-control" perfect-class="formGroupControl" perfect-tempTable-Purchase="Description" name="Description" rows="1" placeholder="" perfect-ctype="input" perfect-css="input" oninput="this.value = this.value.replace(/[^A-Za-z0-9,. ()&]/g, '').replace(/\*(?=\.)*/g, '$1');" maxlength="250"></textarea>
                                        </div>
                                    </div>
                                </div>

                                <div class="col-sm-4 " id="StandbyPdtDiv">
                                    <div style="display:none" id="stockZero">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">Stand By Product&nbsp;@*<span class="text-danger">*</span>*@</label>
                                            <div class="col-sm-8">
                                                <div class="input-group">
                                                    <input type="text" class="form-control" perfect-tempTable-Purchase="StandByProdName" name="StandByProdName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly />
                                                    <input type="hidden" name="StandByProduct" perfect-tempTable-Purchase="StandByProduct" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                    <input type="hidden" name="CrntQntys" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                    <input type="hidden" name="StandByStockId" perfect-tempTable-Purchase="StandByStockId" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                    <div class="input-group-append">
                                                        <button id="addcountry-jq-searchButton3132" name="prdbtn1" class="btn btn-primary fa fa-search" type="button" onclick="GetCmnPopUpSearchValAssign(this, 142, 'Product Details', [], ['Department','CrntQntys','StandByStockId'],SalesTransMode)" BindName="StandByProdName" BindVal="StandByProduct" Criterea1="FK_Branch" Criterea2="FK_Department" perfect-css="button"></button>
                                                    </div>
                                                    <div class="text-danger temptableError"></div>
                                                </div>
                                            </div>
                                        </div>

                                    </div>


                                </div>

                                <div class="col-sm-4 " id="StandbyQtyDiv">
                                    <div style="display:none" id="stockZero1">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">Stand By Quantity &nbsp;@*<span class="text-danger">*</span>*@</label>
                                            <div class="col-sm-8">
                                                <div class="input-group">
                                                    <input type="text" class="form-control text-right " perfect-tempTable-Purchase="StandByQuantity" name="StandByQuantity" id="-id_StandByQuantity" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="decimalpnt(this,'id_StandByQuantity',4)" onfocus="this.oldvalue = this.value;" min="0" maxlength="13" disabled />
                                                </div>
                                                <div class="text-danger temptableError"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>


                                <div class="col-sm-8">
                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-4 col-form-label">&nbsp;</label>
                                        <div class="col-sm-8">

                                        </div>
                                    </div>

                                </div>

                                <div class="col-sm-4 ">
                                    <div class="form-group row" perfect-class="formGroup">
                                        <label class="col-sm-4 col-form-label">Warranty/AMC&nbsp;</label>
                                        <div class="col-sm-4">
                                            <div class="input-group">
                                                <div class="input-group-append">
                                                    <button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-outdent mr-1" type="button" perfect-css="button" title="Add Warranty Details" onclick="GetWarrantylists(this,0)"></button>
                                                    <button type="button" perfect-css="button" id="btndocsUpload" class="btn btn-primary fa fa-upload fa-3" title="Upload Documents"><span class="accordion__header--text"></span></button>
                                                </div>

                                            </div>
                                        </div>
                                        <div class="col-sm-4">
                                            <div class="input-group">

                                                <div class="text-right">
                                                    <button class="btn btn-primary1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" title="Add New Product" onclick="createtable(this,'Purchase',['StockId'],saltableOptionsTempOut)"><i class="fa fa-plus" aria-hidden="true"></i></button>
                                                    <button class="btn btn-light1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" onclick="productclear(this,'Purchase')"><i class="fa fa-refresh" aria-hidden="true"></i></button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>



                            </div>
                            <div class="row">
                                <div class="col-sm-12">
                                    <div class="table-responsive" perfect-tempTable="Purchase" id="Salesetailshead" perfect-tempTable-lastindex="0" perfect-tempTable-action="0"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
            <div class="row" name="buybacksection" style="display:none">
                <div class="col-sm-12" style="margin-top: 38px;">
                    <div class="daccordion__header" style="margin-bottom: 22px;">
                        <span class="accordion__header--text">BUY BACK</span>
                    </div>
                    <div class="row">

                        <br />
                        <div class="col-sm-3" id="ProductDiv">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-3 col-form-label">Item&nbsp;<span class="text-danger">*</span></label>
                                <div class="col-sm-8">
                                    <div class="input-group">
                                        <input type="text" class="form-control " perfect-tempTable-buyback="ProdName" name="ProdName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly />
                                        <input type="hidden" name="FK_Product" perfect-tempTable-buyback="FK_Product" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                        <div class="input-group-append">
                                            @*<button id="addcountry-jq-searchButton33" name="prdfbtn" class="btn btn-primary fa fa-search" type="button" onclick="GetCmnPopUpSearchValAssign(this, 131, 'Product Details', [], [],SalesTransMode)" BindName="ProdName" BindVal="FK_Product" Criterea1="FK_Branch" Criterea2="FK_Department" perfect-css="button"></button>*@

                                            <button id="addproduct-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchValAssign(this,85,'Product List',[],['MinRate','MaxRate'])" Criterea2="0" BindName="ProdName" BindVal="FK_Product"></button>
                                        </div>
                                        <div class="text-danger temptableError"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-3">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-3 col-form-label">Quantity<span class="text-danger">&nbsp;*</span></label>
                                <div class="col-sm-6">
                                    <input type="text" maxlength="13" class="form-control text-right" perfect-tempTable-buyback="Quantity" name="Quantity" id="Quantity" oninput="decimalpnt(this,'Quantity',3)" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                                    <div class="text-danger temptableError mtrlQtyerror">
                                    </div>
                                </div>

                            </div>
                        </div>


                        <div class="col-sm-2">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-3 col-form-label">Rate<span class="text-danger">&nbsp;*</span></label>
                                <div class="col-sm-7">
                                    <input type="text" maxlength="13" class="form-control text-right" perfect-tempTable-buyback="Rate" name="Rate" id="Rate" oninput="decimalpnt(this, 'Rate', 3)" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                                    <div class="text-danger temptableError mtrlQtyerror">
                                    </div>
                                </div>

                            </div>
                        </div>
                        <div class="col-sm-2">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-3 col-form-label">Serial No</label>
                                <div class="col-sm-7">
                                    
                                    <input type="text" maxlength="13" class="form-control text-right" perfect-tempTable-buyback="SerialNo" name="SerialNo" id="inQuantity" oninput="blockDecimal(this)" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                                    <div class="text-danger temptableError mtrlQtyerror">
                                    </div>
                                </div>

                            </div>
                        </div>



                        <div class="col-sm-2" text-right" style="padding-left: 108px;">
                            <button class="btn btn-primary1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" title="Add New Product" onclick="createbuybacktable(this,'buyback',['FK_Product'],restableOptionsTempOut)" style="margin-left:0px" ;><i class="fa fa fa-plus" aria-hidden="true"></i></button>
                            <button class="btn btn-light1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" onclick="ProductDetailsclear(this,'buyback')" style="margin-left:-2px" ;><i class="fa fa-refresh" aria-hidden="true"></i></button>
                        </div>

                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-12">
                    <div class="table-responsive" perfect-tempTable="buyback" name="BuyBackTable" id="BuyBackTable" perfect-tempTable-lastindex="0" perfect-tempTable-action="0"></div>
                </div>
            </div>
            <hr />
            <div class="row">
                <div class="col-sm-3">
                    <div class="form-group row" perfect-class="formGroup">
                        <label class="col-sm-4 col-form-label">
                            <span perfect-class="formGroupLabel"> Bill Total</span>

                        </label>
                        <div class="col-sm-8">
                            <input type="text" class="form-control text-right" placeholder="" readonly name="SalBillTotal" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                        </div>
                    </div>
                </div>
                <div class="col-sm-3" style="display:none" name="Buybackamt">
                    <div class="form-group row" perfect-class="formGroup">
                        <label class="col-sm-4 col-form-label">
                            <span perfect-class="formGroupLabel">Buy Back Amount</span>

                        </label>
                        <div class="col-sm-8">
                            <input type="text" class="form-control text-right" placeholder="" readonly id="Buybcksum" name="buybacksumamt" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                        </div>
                    </div>
                </div>

                <div class="col-sm-3">
                    <div class="form-group row" perfect-class="formGroup">
                        <label class="col-sm-4 col-form-label">
                            <span perfect-class="formGroupLabel">Other Charges</span>

                        </label>
                        <div class="col-sm-8">
                            <div class="input-group">
                                <input type="text" class="form-control text-right" name="OtherCharge" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" id="OtherChargeSales" onchange="roundof(this)" readonly />
                                <div class="input-group-append">
                                    @*<button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-credit-card" type="button" perfect-css="button" onclick="ShowOtherCharges(this,0)"></button>*@
                                    <button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-credit-card" type="button" perfect-css="button" onclick="fn_showOtherCharges(SalesTransModes, Saleid, 'OtherChargeSales')"></button>
                                </div>
                                <div class="modal fade" perfect-class="formGroupModalOtherCharge" id="formGroupModalOtherCharge">
                                    <div class="modal-dialog modal-dialog-centered" role="document">
                                        <div class="modal-content  rounded-0">
                                            <div class="modal-header border-0">
                                                <h5 class="modal-title">Other Charge Details</h5>
                                                <button type="button" class="close" data-dismiss="modal">
                                                    <span>&times;</span>
                                                </button>
                                            </div>
                                            <div class="modal-body" perfect-class="formGroup" style="max-height: calc(100vh - 200px); overflow-y: auto;padding: 1rem;">
                                                @*<div class="table-responsive" style="max-height: 100%; height: 80%; overflow: auto;">*@
                                                <table id="zero_configOthercharge" class="table mb-0  table-striped  text-black">
                                                    <thead class="bg-primary text-white">
                                                        <tr>
                                                            <th class="t-head">SlNo</th>
                                                            <th class="t-head" style="display:none">ID_OtherChargeType</th>
                                                            <th class="t-head">Type</th>
                                                            <th class="t-head">Trans Type</th>
                                                            <th class="t-head">Amount</th>

                                                        </tr>
                                                    </thead>
                                                    <tbody id="formGroupModalOtherChargebody"></tbody>
                                                    <tfoot>
                                                    </tfoot>
                                                </table>
                                                @*</div>*@
                                                @*<div class="modal-body" id="formGroupModalTaxbody">
                                        </div>*@

                                                <div class="modal-footer">
                                                    @*<button type="button" onclick="CreateProductCheckDescription(this);" class="btn btn-primary">Add</button>*@
                                                    <button type="button" class="btn btn-primary light" data-dismiss="modal" onclick="BindOtherChargeAmount(this)">Apply</button>

                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-sm-3 DivAdditionalAmount">
                    <div class="form-group row" perfect-class="formGroup">
                        <label class="col-sm-4 col-form-label">
                            <span perfect-class="formGroupLabel"> Additional Amount</span>
                        </label>
                        <div class="col-sm-8">
                            @*<input type="hidden" class="form-control" name="FK_FinancePlanType" id="FK_FinancePlanType" perfect-class="formGroupControl" perfect-ctype="hidden" readonly />*@
                            <input type="date" class="form-control" name="SoStartDate" id="SoStartDate" perfect-class="formGroupControl" perfect-ctype="date" hidden />
                            <input type="text" class="form-control text-right" name="SoAddnAmount" id="SoAddnAmount" perfect-class="formGroupControl" perfect-ctype="input" oninput="this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');" perfect-css="input" readonly />
                        </div>
                    </div>
                </div>
                <div class="col-sm-3 DivDownPayment">
                    <div class="form-group row" perfect-class="formGroup">
                        <label class="col-sm-4 col-form-label">
                            <span perfect-class="formGroupLabel"> Down Payment</span>
                        </label>
                        <div class="col-sm-8">
                            <input type="text" class="form-control text-right" name="SoDownPayment" perfect-class="formGroupControl" onchange="fn_roundoff(this)" perfect-ctype="input" oninput="this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');" perfect-css="input" readonly />
                        </div>
                    </div>
                </div>
                <div class="col-sm-3">
                    <div class="form-group row" perfect-class="formGroup">
                        <label class="col-sm-4 col-form-label">
                            <span perfect-class="formGroupLabel">Discount</span>

                        </label>
                        <div class="col-sm-8">
                            <input type="text" class="form-control text-right" placeholder="" name="SalDiscount" onchange="roundof(this)" id="SalDiscount" perfect-class="formGroupControl" perfect-ctype="input" oninput="decimalpnt(this,'SalDiscount',3)" perfect-css="input" />
                        </div>
                    </div>
                </div>

                <div class="col-sm-3">
                    <div class="form-group row" perfect-class="formGroup">
                        <label class="col-sm-4 col-form-label">
                            <span perfect-class="formGroupLabel">Roundoff</span>

                        </label>
                        <div class="col-sm-8">
                            <input type="text" class="form-control text-right" placeholder="" onchange="salroundoff(this)" name="SalRoundoff" id="SalRoundoff" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="decimalpntminus(this,'SalDiscount',3)" />
                        </div>
                    </div>
                </div>
                <div class="col-sm-3 Advamt">
                    <div class="form-group row  Advamt" perfect-class="formGroup">
                        <label class="col-sm-4 col-form-label">
                            <span perfect-class="formGroupLabel">Adv. Amount</span>

                        </label>
                        <div class="col-sm-8">
                            <input type="text" class="form-control text-right" placeholder="" readonly name="AdvAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                        </div>
                    </div>

                </div>
                <div class="col-sm-3">
                    <div class="form-group row" perfect-class="formGroup">
                        <label class="col-sm-4 col-form-label">
                            <span perfect-class="formGroupLabel">Net Amount</span>

                        </label>
                        <div class="col-sm-8">
                            <input type="text" class="form-control text-right" placeholder="" readonly name="SalNetAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                        </div>
                    </div>
                </div>


                <div class="col-sm-3">
                    <div class="form-group row" perfect-class="formGroup">
                        <label class="col-sm-4 col-form-label">Payment Method</label>
                        <div class="col-sm-5">
                            <div class="input-group">

                                <div class="input-group-append">
                                    &nbsp;<button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-money" type="button" perfect-css="button" title="Add Payment Method" onclick="GetPaymentlists(this)"></button>

                                </div>
                            </div>

                        </div>
                    </div>
                </div>
                <div class="col-sm-3">
                    <div class="form-group row" perfect-class="formGroup">
                        <label class="col-sm-4 col-form-label">
                            <span perfect-class="formGroupLabel">Bank</span>
                        </label>
                        <div class="col-sm-8">

                            <div class="input-group">
                                <select class="form-control" name="BankID" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select">
                                    <option value="">Please Select </option>


                                    @if (!(Model.BankList is null))
                                    {
                                        foreach (var Module in Model.BankList)
                                        {
                                            <option value="@Module.BankID">@Module.BankName</option>
                                        }
                                    }
                                </select>

                            </div>
                            <div class="text-danger temptableError"></div>
                        </div>
                    </div>
                </div>
                <div class="col-sm-3">
                    <div class="form-group row" perfect-class="formGroup">
                        <label class="col-sm-4 col-form-label">
                            <span perfect-class="formGroupLabel">Salesman</span>
                        </label>
                        <div class="col-sm-8">
                            <div class="input-group">
                                <input type="text" class="form-control" name="Salesman" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                                <input type="hidden" name="FK_Salesman" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" value="" />

                                <div class="input-group-append">
                                    <button id="addEmployee-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchValAssign(this,69,'Employee Details',[],['Branchs','BranchTypeID','FK_Departement','BranchType','SLNo','FK_Branch'])" criterea2="0" bindname="Salesman" bindval="FK_Salesman"></button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>


                <div class="modal fade" perfect-class="formGroupModalwarranty" id="formGroupModalwarranty">
                    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
                        <div class="modal-content">
                            <div class="modal-header border-0">
                                <h5 class="modal-title">Warranty/AMC</h5>
                                <button type="button" class="close" data-dismiss="modal">
                                    <span>&times;</span>
                                </button>
                            </div>
                            <div class="modal-body" perfect-class="formGroup" style="max-height: calc(100vh - 200px); overflow-y: auto;padding: 1rem;">
                                <div class="row">
                                    <div class="col-sm-12">
                                        <div class="default-tab">

                                            <ul class="nav nav-tabs" role="tablist">
                                                <li class="nav-item">

                                                    <a class="nav-link active" data-toggle="tab" id="warrantyid" href="#warranty"><i class="las la-file-invoice mr-2"></i>Warranty Details</a>
                                                </li>
                                                @*<li class="nav-item">
                                            <a class="nav-link" data-toggle="tab" href="#prdimg"><i class="lab la-product-hunt mr-2"></i> Product Images</a>
                                        </li>*@
                                                <li class="nav-item">
                                                    <a class="nav-link" data-toggle="tab" href="#amcdetails"><i class="fa fa-wrench mr-2"></i>AMC Details</a>
                                                </li>

                                            </ul>


                                            <div class="tab-content">
                                                <div id="warranty" class="tab-pane active">

                                                    <div class="row" style="margin-top:1.5rem;">

                                                        <div class="col-sm-6">
                                                            <div class="form-group row" perfect-class="formGroup">
                                                                <label class="col-sm-5 col-form-label">Sub Product</label>
                                                                <div class="col-sm-7">

                                                                    <div class="input-group">

                                                                        <input type="text" class="form-control" perfect-tempTable-Warranty="subProName" name="subProName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly />
                                                                        <input type="hidden" perfect-tempTable-Warranty="stkid" name="stkid" readonly perfect-ctype="hidden" />
                                                                        <input type="hidden" perfect-tempTable-Warranty="prodtid" name="prodtid" readonly perfect-ctype="hidden" />

                                                                        <input type="hidden" name="subProductID" perfect-tempTable-Warranty="subProductID" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                                        <div class="input-group-append">
                                                                            <button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchVal(this, 23, 'Sub Product Details', ['ProductID','Product'], [],SalesTransMode)" BindName="subProName" BindVal="subProductID" Criterea1="ProductID"></button>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="col-sm-6">
                                                            <div class="form-group row" perfect-class="formGroup">
                                                                <label class="col-sm-5 col-form-label">
                                                                    <span perfect-class="formGroupLabel">Type</span>
                                                                    <span class="text-danger">*</span>
                                                                </label>
                                                                <div class="col-sm-7">

                                                                    <div class="input-group">
                                                                        <select class="form-control" name="WarrantyType" perfect-tempTable-Warranty="WarrantyType" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" onchange="AMCWarranty(this,1)">
                                                                            <option value="">Please Select </option>


                                                                            @if (!(Model.Warrantytype is null))
                                                                            {
                                                                                foreach (var Module in Model.Warrantytype)
                                                                                {
                                                                                    <option value="@Module.WarrantyTypeID">@Module.WarrantyName</option>
                                                                                }
                                                                            }
                                                                        </select>

                                                                    </div>
                                                                    <div class="text-danger temptableError"></div>
                                                                </div>
                                                            </div>
                                                        </div>

                                                        <div class="col-sm-6">
                                                            <div class="form-group row" perfect-class="formGroup">
                                                                <label class="col-sm-5 col-form-label">
                                                                    <span perfect-class="formGroupLabel">Replace WTY Dt</span>
                                                                    <span class="text-danger">*</span>
                                                                </label>
                                                                <div class="col-sm-7">
                                                                    <div class="input-group">
                                                                        <input type="date" class="form-control" perfect-tempTable-Warranty="Replcwardt" name="Replcwardt" perfect-class="formGroupControl" max="2050-01-01" perfect-ctype="date" perfect-css="date" onchange="validwartdetail(this, 'Warranty', '.temptableError', true)" />


                                                                    </div>
                                                                    <div class="text-danger temptableError"></div>
                                                                </div>
                                                            </div>
                                                        </div>

                                                        <div class="col-sm-6">
                                                            <div class="form-group row" perfect-class="formGroup">
                                                                <label class="col-sm-5 col-form-label">
                                                                    <span perfect-class="formGroupLabel">Service WTY Dt</span>
                                                                    <span class="text-danger">*</span>
                                                                </label>
                                                                <div class="col-sm-7">
                                                                    <div class="input-group">
                                                                        <input type="date" class="form-control" name="Serwardt" perfect-tempTable-Warranty="Serwardt" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" max="2050-01-01" onchange="validwartdetail(this, 'Warranty', '.temptableError', true)" />

                                                                    </div>
                                                                    <div class="text-danger temptableError"></div>
                                                                </div>
                                                            </div>
                                                        </div>

                                                        <div class="col-sm-6">
                                                            <div class="form-group row" perfect-class="formGroup">
                                                                <label class="col-sm-5 col-form-label">
                                                                    <span perfect-class="formGroupLabel">Amount</span>
                                                                </label>
                                                                <div class="col-sm-7">
                                                                    <div class="input-group">
                                                                        <input type="text" class="form-control text-right" id="WarrantyAmount" name="WarrantyAmount" perfect-tempTable-Warranty="WarrantyAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');" maxlength="12" readonly />
                                                                    </div>
                                                                    @*<div class="text-danger temptableError"></div>*@
                                                                </div>
                                                            </div>
                                                        </div>

                                                        <div class="col-sm-6">
                                                            <div class="form-group row" perfect-class="formGroup">
                                                                <label class="col-sm-5 col-form-label">
                                                                    <span perfect-class="formGroupLabel">Tax</span>
                                                                </label>
                                                                <div class="col-sm-7">
                                                                    <div class="input-group">
                                                                        <input type="text" class="form-control text-right" id="WarrantyTaxAmount" name="WarrantyTaxAmount" perfect-tempTable-Warranty="WarrantyTaxAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');" maxlength="12" readonly />
                                                                    </div>
                                                                    @*<div class="text-danger temptableError"></div>*@
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="col-sm-6">
                                                            <div class="form-group row" perfect-class="formGroup">
                                                                <label class="col-sm-5 col-form-label">
                                                                    <span perfect-class="formGroupLabel">Net Amount</span>
                                                                </label>
                                                                <div class="col-sm-7">
                                                                    <div class="input-group">
                                                                        <input type="text" class="form-control text-right" id="WarrantyNetAmount" name="WarrantyNetAmount" perfect-tempTable-Warranty="WarrantyTaxAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');" maxlength="12" readonly />
                                                                    </div>
                                                                    @*<div class="text-danger temptableError"></div>*@
                                                                </div>
                                                            </div>
                                                        </div>

                                                        <div class="col-sm-6">
                                                            <div class="form-group row" perfect-class="formGroup">
                                                                <div class="col-sm-8">
                                                                    <div class="input-group">


                                                                    </div>

                                                                </div>
                                                                <div class="col-sm-4">
                                                                    <div class="input-group">

                                                                        <div class="input-group-append">
                                                                            <div>
                                                                                <button type="button" class="btn btn-primary1" onclick="createtable(this,'Warranty',['WarrantyType'],wartableOptionsTempOut)"><i class="fa fa-plus" aria-hidden="true"></i></button>
                                                                                <button class="btn btn-light1" type="button" onclick="productclear(this, 'Warranty')"><i class="fa fa-refresh" aria-hidden="true"></i></button>
                                                                            </div>
                                                                        </div>
                                                                    </div>

                                                                </div>
                                                            </div>
                                                        </div>

                                                        <div class="col-sm-12">
                                                            <div class="form-group row" perfect-class="formGroup">

                                                                <div class="table-responsive" perfect-tempTable="Warranty" id="Warrantydetailhd" perfect-tempTable-lastindex="0" perfect-tempTable-action="0"></div>

                                                                @*<div class="table-responsive" perfect-ProductType="ProductType"></div>*@
                                                            </div>
                                                        </div>



                                                    </div>

                                                </div>
                                                @*<div id="prdimg" class="tab-pane">

                                            <div class="row" style="margin-top:1.5rem;">
                                                <div class="col-sm-1">

                                                </div>

                                                <div class="col-sm-4">
                                                    <div class="form-group row" perfect-class="formGroup">
                                                        <label class="col-sm-4 col-form-label">Add Files&nbsp;</label>
                                                        <div class="col-sm-8">
                                                            <div class="input-group">

                                                                <div class="input-group-append">
                                                                    &nbsp;<button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-plus" type="button" perfect-css="button" onclick="ImageLoad(this)"></button>

                                                                </div>
                                                            </div>

                                                        </div>
                                                    </div>
                                                </div>

                                            </div>
                                        </div>*@
                                                <div id="amcdetails" class="tab-pane">

                                                    <div class="row" style="margin-top:1.5rem;">

                                                        <div class="col-sm-6">
                                                            <div class="form-group row" perfect-class="formGroup">
                                                                <label class="col-sm-5 col-form-label">
                                                                    <span perfect-class="formGroupLabel">AMC Type</span>
                                                                    <span class="text-danger">*</span>
                                                                </label>
                                                                <div class="col-sm-7">

                                                                    <div class="input-group">
                                                                        <select class="form-control" name="AMCType" perfect-tempTable-AMC="AMCType" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" onchange="AMCWarrantyAMC(this,2)">
                                                                            <option value="">Please Select </option>


                                                                            @if (!(Model.AMCtype is null))
                                                                            {
                                                                                foreach (var Amc in Model.AMCtype)
                                                                                {
                                                                                    <option value="@Amc.AMCTypeID">@Amc.AMCName</option>
                                                                                }
                                                                            }
                                                                        </select>

                                                                    </div>
                                                                    @*<div class="text-danger temptableError"></div>*@
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="col-sm-6">
                                                            <div class="form-group row" perfect-class="formGroup">
                                                                <label class="col-sm-5 col-form-label">
                                                                    <span perfect-class="formGroupLabel">No.Of Service</span>
                                                                </label>
                                                                <div class="col-sm-7">
                                                                    <div class="input-group">
                                                                        <input type="text" class="form-control text-right" id="NoOfServices" name="NoOfServices" perfect-tempTable-AMC="NoOfServices" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');" maxlength="12" readonly />
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="col-sm-6">
                                                            <div class="form-group row" perfect-class="formGroup">
                                                                <label class="col-sm-5 col-form-label">
                                                                    <span perfect-class="formGroupLabel">Due Date</span>
                                                                    <span class="text-danger">*</span>
                                                                </label>
                                                                <div class="col-sm-7">
                                                                    <div class="input-group">
                                                                        <input type="date" class="form-control" perfect-tempTable-AMC="AMCDuedate" name="AMCDuedate" perfect-class="formGroupControl" max="2050-01-01" perfect-ctype="date" perfect-css="date" />


                                                                    </div>
                                                                    <div class="text-danger temptableError"></div>
                                                                </div>
                                                            </div>
                                                        </div>

                                                        <div class="col-sm-6">
                                                            <div class="form-group row" perfect-class="formGroup">
                                                                <label class="col-sm-5 col-form-label">
                                                                    <span perfect-class="formGroupLabel">Renew Due Date</span>
                                                                    <span class="text-danger">*</span>
                                                                </label>
                                                                <div class="col-sm-7">
                                                                    <div class="input-group">
                                                                        <input type="date" class="form-control" name="AMCRenewduedate" perfect-tempTable-AMC="AMCRenewduedate" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" max="2050-01-01" />

                                                                    </div>
                                                                    <div class="text-danger temptableError"></div>

                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="col-sm-6">
                                                            <div class="form-group row" perfect-class="formGroup">
                                                                <label class="col-sm-5 col-form-label">
                                                                    <span perfect-class="formGroupLabel">Amount</span>
                                                                </label>
                                                                <div class="col-sm-7">
                                                                    <div class="input-group">
                                                                        <input type="text" class="form-control text-right" id="AmcAmount" name="AmcAmount" perfect-tempTable-AMC="AmcAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');" maxlength="12" readonly />
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="col-sm-6">
                                                            <div class="form-group row" perfect-class="formGroup">
                                                                <label class="col-sm-5 col-form-label">
                                                                    <span perfect-class="formGroupLabel">Tax</span>
                                                                </label>
                                                                <div class="col-sm-7">
                                                                    <div class="input-group">
                                                                        <input type="text" class="form-control text-right" id="AMCTaxAmount" name="AMCTaxAmount" perfect-tempTable-AMC="AMCTaxAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');" maxlength="12" readonly />
                                                                    </div>
                                                                    @*<div class="text-danger temptableError"></div>*@
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="col-sm-6">
                                                            <div class="form-group row" perfect-class="formGroup">
                                                                <label class="col-sm-5 col-form-label">
                                                                    <span perfect-class="formGroupLabel">Net Amount</span>
                                                                </label>
                                                                <div class="col-sm-7">
                                                                    <div class="input-group">
                                                                        <input type="text" class="form-control text-right" id="AMCNetAmount" name="AMCNetAmount" perfect-tempTable-AMC="AMCNetAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');" maxlength="12" readonly />
                                                                    </div>
                                                                    @*<div class="text-danger temptableError"></div>*@
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="col-sm-6">
                                                            <div class="form-group row" perfect-class="formGroup">
                                                                <label class="col-sm-5 col-form-label">
                                                                    <span perfect-class="formGroupLabel">Remarks</span>
                                                                </label>
                                                                <div class="col-sm-7">
                                                                    <div class="input-group">
                                                                        <textarea rows="2" class="form-control" id="AmRemarks" name="AmRemarks" perfect-tempTable-AMC="AmRemarks" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="this.value = this.value.replace(/[^a-zA-Z0-9&,.\-\s\+]/g,'');" maxlength="150"></textarea>
                                                                        @*<input type="text" class="form-control" id="AmRemarks" name="AmRemarks" perfect-tempTable-AMC="AmRemarks" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="this.value = this.value.replace(/[^a-zA-Z0-9&,.\-\s\+]/g,'');" maxlength="150" />*@
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        @*<div class="col-sm-6">
                                                    <div class="form-group row" perfect-class="formGroup">
                                                        <label class="col-sm-5 col-form-label">Add Files&nbsp;</label>
                                                        <div class="col-sm-7">
                                                            <div class="input-group">

                                                                <div class="input-group-append">
                                                                    &nbsp;<button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-plus" type="button" perfect-css="button" onclick="ImageLoadAMC(this)"></button>

                                                                </div>
                                                            </div>

                                                        </div>
                                                    </div>
                                                </div>*@


                                                    </div>

                                                </div>

                                            </div>
                                        </div>


                                    </div>






                                </div>
                                <div class="modal-footer">
                                    @*<button type="button" onclick="CreateProductCheckDescription(this);" class="btn btn-primary">Add</button>*@
                                    <button type="button" class="btn btn-primary light" onclick="warrantydet(this)">Apply</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="md-2 modal fade" perfect-class="formGroupModalwarrantyimg" id="formGroupModalwarrantyimg">
                    <div class="modal-dialog modal-dialog-centered modal-xl" role="document">
                        <div class="modal-content">
                            <div class="modal-header border-0">
                                <h5 class="modal-title">Documents</h5>
                                <button type="button" class="close" data-dismiss="modal">
                                    <span>&times;</span>
                                </button>
                            </div>
                            <div class="modal-body" perfect-class="formGroup" style="max-height: calc(100vh - 200px); overflow-y: auto;padding: 1rem;">
                                <div class="row">

                                    <div class="col-sm-12" id="Image-img">

                                    </div>


                                </div>

                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal fade" perfect-class="formGroupModalhold" id="formGroupModalhold">
                    <div class="modal-dialog modal-dialog-centered" role="document">
                        <div class="modal-content ">
                            <div class="modal-header border-0">
                                <h5 class="modal-title text-primary"><i class="fa fa-warning"></i><span class="ml-2">Are you Sure?</span></h5>
                                <button type="button" class="close" data-dismiss="modal">
                                    <span>&times;</span>
                                </button>
                            </div>
                            <div class="modal-body ">
                                <div class="px-3 holdt" style="font-size:medium">
                                    Do you want to hold this ?
                                </div>
                                <div class="px-3 holdt" style="font-size:12px">
                                    When the Sale is Hold, The AMC details will be Reset.
                                </div>
                                <div class="px-3 holdc rounded-0 " style="font-size:medium">


                                    <div class="custom-control custom-switch toggle-switch text-right">

                                        <input type="checkbox" class="custom-control-input" id="customSwitch3">
                                        <label class="custom-control-label" for="customSwitch3">Reduce from stock ?</label>
                                    </div>
                                </div>
                            </div>
                            <div class="modal-footer border-0">
                                <div>
                                    <div class="holdc">

                                        <button id="addcompany-jq-addnewuser" type="button" class="btn btn-primary light mr-3" name="addok" perfect-css="button" onclick="fn_SalesForm_hold(this)"><i class="fa fa-refresh fa-spin loaderClass "></i>OK</button>

                                    </div>
                                    <div class="holdt">

                                        <button type="button" class="btn btn-primary" onclick="fn_SalesForm_red(this)">Yes</button>

                                        <button type="button" class="btn btn-light" data-dismiss="modal">No</button>
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
                <div class="md-2 modal fade" perfect-class="formGroupModalewaybillno" id="formGroupModalewaybillno" style="z-index: 1044;">
                    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
                        <div class="modal-content">
                            <div class="modal-header border-0">
                                <h5 class="modal-title">More Info</h5>
                                <button type="button" class="close" data-dismiss="modal">
                                    <span>&times;</span>
                                </button>
                            </div>
                            <div class="modal-body" perfect-class="formGroup" style="max-height: calc(100vh - 200px); overflow-y: auto;padding: 1rem;">
                                <div class="row">

                                    <div class="col-sm-12" id="custmr-sav">
                                        <div class="col-sm-12">
                                            <div class="form-group row" perfect-class="formGroup">
                                                <label class="col-sm-4 col-form-label">
                                                    <span perfect-class="formGroupLabel">E-Way Bill No</span>

                                                </label>
                                                <div class="col-sm-8">
                                                    <input type="text" class="form-control perfectValidate_specialCharName_nm" placeholder="" name="EWaybillNo" perfect-class="formGroupControl" perfect-ctype="input" maxlength="12" perfect-css="input" />
                                                    <div class="text-danger temptableError"></div>
                                                </div>

                                            </div>
                                        </div>

                                        <div class="col-sm-12" id="divPaymentDiscount" style="display:none">
                                            <div class="form-group row" perfect-class="formGroup">
                                                <label class="col-sm-4 col-form-label">Discount</label>
                                                <div class="col-sm-8">
                                                    <input type="text" class="form-control text-right " name="PaymentDiscount" id="PaymentDiscount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="decimalpnt(this,'PaymentDiscount',4)" min="0" maxlength="13" />
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-12" id="btnOtherChargePopup" style="display:none">
                                            <div class="form-group row" perfect-class="formGroup">
                                                <label class="col-sm-4 col-form-label">
                                                    <span perfect-class="formGroupLabel">Other Charges</span>

                                                </label>
                                                <div class="col-sm-8">
                                                    <div class="input-group">
                                                        <input type="text" class="form-control text-right" name="OtherChargepopup" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" id="OtherChargepopup" onchange="roundof(this)" readonly />
                                                        <div class="input-group-append">
                                                            @*<button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-credit-card" type="button" perfect-css="button" onclick="ShowOtherCharges(this,0)"></button>*@
                                                            <button id="btnOtherchargepopup" class="btn btn-primary fa fa-credit-card" type="button" perfect-css="button" onclick="fn_showOtherCharges(SalesTransModes, Saleid, 'OtherChargeSales')"></button>
                                                        </div>
                                                    </div>

                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-12" id="divItemWise" style="display:none">
                                            <div class="form-group row" perfect-class="formGroup">
                                                <label class="col-sm-4 col-form-label"> </label>

                                                <div class="col-sm-4">
                                                    <input type="checkbox" class="form-control-check-input" name="PMItemwise" id="PMItemwise" value="PMItemwise" perfect-class="formCheckInput" perfect-ctype="checkbox" perfect-css="checkbox"><span>Item Wise</span>
                                                </div>

                                            </div>
                                        </div>
                                        <div class="col-sm-12" id="btnRecalculate" style="display:none">
                                            <div class="form-group row" perfect-class="formGroup">
                                                <label class="col-sm-4 col-form-label"> </label>

                                                <div class="col-sm-4">
                                                    <button type="button" id="btnRecalculate" onclick="Recalculate(this);" class="btn btn-primary">Recalculate</button>
                                                </div>

                                            </div>
                                        </div>
                                        <div class="RecalcDet" id="divRecalculate" style="display:none">
                                            <table class="table table-responsive-md table-bordered" id="SalesDetailsIds">
                                                <thead class="thead btn-primary " id="SlDetails">
                                                    <tr></tr>
                                                <tbody id="SalesBillDetails">
                                                    <tr id="0">
                                                        <td style="text-align:center;" colspan="9">No Records..</td>
                                                    </tr>
                                                </tbody>
                                            </table>

                                        </div>

                                        <div class="col-sm-12" id="divPayment" style="display:none">
                                            <div class="form-group row" perfect-class="formGroup">
                                                <label class="col-sm-4 col-form-label">Payment Method</label>
                                                <div class="col-sm-5">
                                                    <div class="input-group">

                                                        <div class="input-group-append">
                                                            &nbsp;<button id="ModeOfpayment" class="btn btn-primary fa fa-money" perfect-ctype="hidden" type="button" perfect-css="button" title="Add Payment Method" onclick="GetPaymentlistsRecalculate(this)"></button>

                                                        </div>
                                                    </div>

                                                </div>
                                            </div>
                                        </div>






                                        <div class="modal-footer">
                                            <button type="button" id="btnSave" onclick="fn_bindEwaybilldetils(this);" class="btn btn-primary">Update</button>

                                            <button type="button" class="btn btn-light1" onclick="fn_cleardetails(this);">Clear</button>
                                        </div>



                                    </div>


                                            </div>

                                        </div>

                            <div>
                            </div>
                        </div>
                    </div>

                </div>
                <div class="modal fade" perfect-class="formGroupModalpayment" id="formGroupModalpayment">
                    <div class="modal-dialog  modal-dialog-centered modal-md" role="document">
                        <div class="modal-content">
                            <div class="modal-header border-0">
                                <h5 class="modal-title">Payment Method</h5>
                                <button type="button" class="close" data-dismiss="modal">
                                    <span>&times;</span>
                                </button>
                            </div>
                            <div class="modal-body" perfect-class="formGroup" style="max-height: calc(100vh - 200px); overflow-y: auto;padding: 1rem;">
                                <div class="row">


                                    <div class="col-sm-12">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">Method <span class="text-danger">*</span></label>
                                            <div class="col-sm-8">
                                                <div class="input-group">
                                                    <select class="form-control" perfect-tempTable-Payment="PaymentMethod" name="PaymentMethod" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select">
                                                        <option value="">Please Select </option>


                                                        @if (!(Model.PaymentView is null))
                                                        {
                                                            foreach (var Module in Model.PaymentView)
                                                            {
                                                                @*<option value="@Module.PaymentmethodID">@Module.Name</option>*@
                                                                if (Module.PMDefault == true)
                                                                {
                                                                    <option value="@Module.PaymentmethodID" PMMode="@Module.PMMode" selected>@Module.Name</option>
                                                                }
                                                                else
                                                                {
                                                                    <option value="@Module.PaymentmethodID" PMMode="@Module.PMMode">@Module.Name</option>
                                                                }
                                                            }

                                                        }
                                                    </select>


                                                </div>
                                                <div class="text-danger temptableError"></div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-12">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">Ref No.</span>

                                            </label>
                                            <div class="col-sm-8">

                                                <div class="input-group">
                                                    <input type="text" class="form-control perfectValidate_string_nm" perfect-tempTable-Payment="Refno" name="Refno" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" maxlength="250" />

                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-sm-12">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">Amount</span>
                                                <span class="text-danger">*</span>
                                            </label>
                                            <div class="col-sm-8">
                                                <div class="input-group">
                                                    <input type="text" class="form-control text-right" perfect-tempTable-Payment="PAmount" id="PAmount" name="PAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="decimalpnt(this,'PAmount',3)" onchange="Pamount(this)" maxlength="12" />

                                                </div>
                                                <div class="text-danger temptableError"></div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-9">


                                    </div>
                                    <div class="col-sm-3 text-right">
                                        <div class="input-group">

                                            <div class="input-group-append">
                                                <div>
                                                    <button type="button" class="btn btn-primary1 " onclick="createtable(this,'Payment',['PaymentMethod'],paytableOptionsTempOut)"><i class="fa fa-plus" aria-hidden="true"></i></button>
                                                    <button class="btn btn-light1" type="button" onclick="productclear(this, 'Payment')"><i class="fa fa-refresh" aria-hidden="true"></i></button>
                                                </div>
                                            </div>
                                        </div>

                                    </div>
                                    <div class="col-sm-12">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel" style="font-weight:500;">Bal. Amount :</span>

                                            </label>
                                            <div class="col-sm-8">
                                                <div class="input-group">

                                                    <label class="col-form-label">
                                                        <span perfect-class="formGroupLabel" style="font-weight:500;" name="BalAmt"></span>
                                                    </label>
                                                    @*<input type="text" class="form-control" perfect-temptable-payment="BalAmt" name="BalAmt" perfect-class="" perfect-ctype="input" perfect-css="input" readonly="" style="border:white;background:white;font-weight: 500;">*@
                                                </div>
                                            </div>
                                        </div>
                                    </div>


                                    <div class="col-sm-12">
                                        <div class="form-group row" perfect-class="formGroup">

                                            <div class="table-responsive" perfect-tempTable-Payment="" perfect-tempTable="Payment" id="Paymentdethead" perfect-tempTable-lastindex="0" perfect-tempTable-action="0"></div>
                                            <div class="text-danger temptableError"></div>

                                        </div>
                                    </div>


                                </div>
                                <div class="modal-footer">
                                    @*<button type="button" onclick="CreateProductCheckDescription(this);" class="btn btn-primary">Add</button>*@
                                    <button type="button" class="btn btn-primary light" onclick="Billttlnetchck(this)">Apply</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal fade" perfect-class="formGroupModalInstallmentDetails" id="InstallmentDetails">
                    <div class="modal-dialog modal-dialog-centered" role="document">
                        <div class="modal-content  rounded-0">
                            <div class="modal-header border-0">
                                <h5 class="modal-title">EMI Plan Details</h5>
                                <button type="button" class="close" data-dismiss="modal">
                                    <span>&times;</span>
                                </button>
                            </div>
                            <div class="modal-body" perfect-class="formGroup" style="max-height: calc(200vh - 400px); overflow-y:auto; padding: 1rem;">
                                <div class="form-row">

                                    <div class="col-sm-12">
                                        <div class="card" style="margin-bottom: 0rem;">
                                            <div class="card-body" style="padding: 0.1rem;">

                                                <table id="EMIdata" class="table table2-hover table-responsive-sm table2-striped  text-black">
                                                    <thead class="bg-primary text-white">
                                                        <tr>
                                                            <th class="t-head">SLNo</th>
                                                            <th class="t-head">EMI Date</th>
                                                            <th class="t-head">Amount</th>
                                                            <th class="t-head">Remarks</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody id="InstallmentDetailsbody">
                                                        <tr id="0">
                                                            <td colspan="4" style="text-align:center;">No Records...</td>
                                                        </tr>
                                                    </tbody>
                                                    <tfoot>
                                                    </tfoot>
                                                </table>
                                                <div class="modal-footer">
                                                    <button type="button" class="btn btn-primary1" data-dismiss="modal">Close</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="card-footer text-right" perfect-class="formFooter">
                @*@if (ViewBag.PagedAccessRights.UsrrlPtRpt)
                {
                    <button id="" type="button" class="btn btn-primary fa fa-print mr-3  d-none" name="Print" perfect-css="button" onclick="getPageSize(this,0)"><i class="fa fa-print fa-spin loaderClass"></i></button>
                }*@
                <button id="" type="button" class="btn btn-primary mr-3 addcompany-jq-addnewuserUpdate d-none" name="update" perfect-css="button" onclick="fn_SalesForm_update(this)"><i class="fa fa-refresh fa-spin loaderClass"></i>Update</button>
                <button id="addcompany-jq-addnewuser" type="button" class="btn btn-success mr-3 holddisable " name="onhold" perfect-css="button" onclick="fn_SalesForm_box(this)">Hold</button>

                <button id="addcompany-jq-addnewuser" type="button" class="btn btn-primary mr-3 " name="add" perfect-css="button" onclick="fn_SalesForm_add(this)"><i class="fa fa-refresh fa-spin loaderClass "></i>Save</button>
                <button id="" type="button" class="btn btn-warning mr-3 addcompany-jq-addnewuserUpdate d-none" name="delete" perfect-css="button" onclick="deletesale(this)"><i class="fa fa-refresh fa-spin loaderClass"></i>Delete</button>
                <button type="button" id="" class="btn btn-light" perfect-css="button" onclick="ResetButton(this)" name="reset">Clear</button>
                <button id="Einvoice" type="button" class="btn btn-primary d-none" name="Einvoice" perfect-css="button" onclick="GenerateEinvoice(this)">E-invoice</button>
                <button type="button" id="viewinv" class="btn btn-info d-none" perfect-css="button" onclick="ViewInvoice(this)" name="viewinv">View Invoice</button>
                <button type="button" id="viewewaybill" class="btn btn-light d-none" data-mdb-ripple-color="dark" perfect-css="button" onclick="Ewaybillbind(this)" name="viewewaybill">More Info</button>

            </div>
            @*<div style="position: relative;" id="Id_mock_div"></div>*@

            @*<div id="Id_mock_div"></div>*@
            <div id="Id_mock_div" style="visibility: hidden;"></div>

        </form>
        <div class="md-2 modal fade" perfect-class="formGroupModalcustmrformGroupModalcustmr" id="formGroupModalcustmr">
            <div class="modal-dialog modal-dialog-centered modal-xl" role="document">
                <div class="modal-content">
                    <div class="modal-header border-0">
                        <h5 class="modal-title">Add Customer</h5>
                        <button type="button" class="close" data-dismiss="modal">
                            <span>&times;</span>
                        </button>
                    </div>
                    <div class="modal-body" perfect-class="formGroup" style="max-height: calc(100vh - 200px); overflow-y: auto;padding: 1rem;">
                        <div class="row">

                            <div class="col-sm-12" id="custmr-savs">

                            </div>


                        </div>

                    </div>
                </div>
            </div>
        </div>
        <div class="modal fade" id="modalProductSerialNumbers" data-backdrop="static" data-keyboard="false" tabindex="1000">
            <div class="modal-dialog modal-dialog-centered modal-md" role="dialog">
                <div class="modal-content">
                    <div class="modal-header border-0">
                        <h5 class="modal-title">Serial Numbers</h5>
                    </div>
                    <div class="modal-body" perfect-class="formGroup" style="max-height: calc(100vh - 200px); overflow-y: auto;padding: 1rem;">
                        <div class="row" id="divProductSerialNumbers" style="overflow-y: scroll;height:300px;">
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" onclick="fn_ProductSerialNumberPopupHide(this)">
                            OK
                        </button>
                    </div>
                </div>
            </div>
        </div>

        @*<button onclick="getPageSize(this)" class="btn btn-info mr-3 " style="display:none">Preview</button>*@
    </div>

   
  


</div>




<script>
    //function ValidQtyCheck(ele) {
    //    let $thisForm = $('[perfect-class="form"]');
    //    debugger
    //    let Qty = parseFloat($thisForm.find('[name="SubProductQty"]').val());
    //    let StockQty = parseFloat($thisForm.find('[name="SubCurrentStock"]').val());

    //    if (Qty > StockQty) {

    //        console.log('inside limit check if')
    //        $thisForm.find('[name="SubProductQty"]').closest('[perfect-class="formGroup"]').find('.ErrorMessage').attr("style", "display:block");
    //        $thisForm.find('[name="SubProductQty"]').closest('[perfect-class="formGroup"]').find('.ErrorMessage').text('Qty greater');
    //        isValid = false;
    //    }
    //    else {
    //        $thisForm.find('[name="SubProductQty"]').closest('[perfect-class="formGroup"]').find('.ErrorMessage').attr("style", "display:none");
    //        $thisForm.find('[name="SubProductQty"]').closest('[perfect-class="formGroup"]').find('.ErrorMessage').text('');
    //        isValid = true;
    //    }
    //}
    var SalesDocumentUpload = [];
    var PssfupDocsList = [];
    var PaymentMethodBit = 0;
    $("#btndocsUpload").click(function () {
        let $thisForm = $(this).closest('[perfect-class="form"]');
        if ($thisForm.find('[name="ProductID"]').val() == '' || $thisForm.find('[name="ProductID"]').val() == null) {
            NotificationMessage({ 'message': 'Please Select Product' });
        }
        else {
            let MasterId = $thisForm.find('[name="StockId"]').val() == "" ? 0 : $thisForm.find('[name="StockId"]').val();
            let header = "Sale Documents";
            OpenModalForUpload(MasterId, SalesTransMode, header);
        }

    });
    function calculateAndDisplaySum(ele) {
        debugger
        var sum = 0;
        $('#BuyBackTable tbody tr').each(function () {
            var value = parseFloat($(this).find('td:eq(3)').text()) || 0;
            sum += value;
        });
        $('#Buybcksum').val(sum);
        roundof(ele);

    }

    function blockDecimal(inputElement) {
        // Remove any decimal points from the input value
        inputElement.value = inputElement.value.replace(/\./g, '');
    }



        function FillimageDetails(ele, StockId) {
            let $thisForm = $(ele).closest('[perfect-class="form"]');
            let Documents = [];
            PssfupDocsList = [];
            Documents = SalesDocumentUpload.filter(obj => obj.stockid.toString() == StockId.toString());
            Documents = Documents.map(({ stockid, ...rest }) => rest);
            PssfupDocsList = PssfupDocsList.concat(Documents);
            console.log('ADDED IMAGE Returned', PssfupDocsList);
        }
        //////////////////////////////////////
        var SubProductDetails = [];
        function fn_getSubProductPopUp(ele) {

            let $thisForm = $(ele).closest('[perfect-class="form"]');



            let ProductId = $('[name="ProductID"]').val();
            let ProductName = $('[name="ProName"]').val();
            $('[name="ProdId"]').val(ProductId);
            $('[name="ProdsName"]').val(ProductName);

            let oldvalue = ele.oldvalue;
            let current = ele.value;
            let Mode = 0;
            if ($thisForm.find('[name="ProductID"]').val() != "") {
                if (parseFloat($thisForm.find('[name="SpdSalQuantity"]').val()) > 0) {

                    $('#formGroupModalQuantitySales').modal({ backdrop: 'static', keyboard: false });
                    $(ele).closest('[perfect-class="formGroup"]').find('[perfect-class="formGroupModalQuantitySales"]').modal('show');
                    $thisForm.find('[name="Qty"]').val(Number($thisForm.find('[name="SpdSalQuantity"]').val()).toFixed(3));
                    $thisForm.find('[name="Master_ID"]').val($('[name="StockId"]').val());
                    let tempdata=[];
                    if (SubproductDetailsTemp != null) {
                        if (SubproductDetailsTemp.length > 0) {
                            tempdata = SubproductDetailsTemp.filter(obj => obj.Master_ID.toString() === ($('[name="StockId"]').val()).toString());
                        }
                    }
                    if (tempdata != null) {
                        if (tempdata.length > 0) {
                            if (tempdata[0]['Master_ID'] == $('[name="StockId"]').val()) {
                                fillgrid('SerialNumber', SerialNumOptionsTempOut, $thisForm, tempdata);
                            }
                        }
                        else {
                            $thisForm.find('[perfect-tempTable= "SerialNumber"]').empty();
                        }
                    }
                    fn_getSerialNumbers(this, 2, 0);
                }
                else {
                    NotificationMessage({ 'type': 'info', 'heading': 'info', 'message': "Please Enter Quantity" });
                }
            }
            else {
                NotificationMessage({ 'type': 'info', 'heading': 'info', 'message': "Please Select Product" });
            }
        }

        var SerialNumberExist = false;

        function fn_getSerialNumbers(ele, Mod, Prodid,CurrentStock) {

            let $thisForm = $(ele).closest('[perfect-class="form"]');
            let oldvalue = ele.oldvalue;
            let current = ele.value;
            let productid ='';
            let stockid = 0;
            let Master_stockid = $thisForm.find('[name=StockId]').val();
            let Qty;
            debugger
            serialNumberPopup = false;
            if (Mod == 0 || Mod == 2) {
                productid = $('[name="ProductID"]').val();
                stockid = $('[name="StockId"]').val();
                Qty = parseFloat(isNaN($('[name="SpdSalQuantity"]').val()) ? 0 : $('[name="SpdSalQuantity"]').val());
            }
            else if (Mod == 1) {
                productid = $('[name="SubProductID"]').val();
                stockid = $('[name="SubStockId"]').val();
                Qty = isNaN($('[name="SubQty"]').val()) ? 0 : $('[name="SubQty"]').val();
            }
            $("#divProductSerialNumbers").empty();
            debugger

            if (productid != "" && productid != null /*&& stockid != ""*/ && stockid != null && Qty != "" && Qty != null && Qty != 0) {
                $.ajax({
                     url: "@Url.Action("GetSubProductsDetailInfo", "Sales")",
                     type: "POST",
                    data: {
                        __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                        'ID_Sales': Saleid,
                        'TransMode': Transmd,
                        'FK_Product': productid,
                        'StockID': stockid,
                        'Mode': 1
                    },
                    dataType: "json",
                    contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                    success: function (ajaxOutput) {
                        debugger
                        let Slnumbers = [];
                        if (ajaxOutput.subproduct.Process.IsProcess) {

                            if (ajaxOutput.subproduct.Data.length > 0) {

                                $("#divProductSerialNumbers").empty();
                                console.log('ajaxOutput.subproduct.Data>>>>>', ajaxOutput.subproduct.Data[0].FK_Stock);

                                var OutData;
                                let StockID =$('[name="StockId"]').val();

                                $.each(ajaxOutput.subproduct.Data, function (key, value) {
                                    let blnChecked = false;
                                    debugger
                                    let tempavailable;
                                    let temData;
                                    if (Mod == 1) {
                                        tempavailable = productSerialNum.filter(obj => obj.ID_ProductNumberingDetails.toString() == value.ID_ProductNumberingDetails && obj.FK_MasterID != $('[name="StockId"]').val()  );

                                        temData = productSerialNumTempListPop.filter(obj => obj.FK_MasterID == $('[name="StockId"]').val());
                                        let unavailable = productSerialNumTempListPop.filter(obj => obj.FK_MasterID == $('[name="StockId"]').val() && obj.FK_Stock == value.FK_Stock);

                                        if (temData.filter((obj => obj.ID_ProductNumberingDetails == value.ID_ProductNumberingDetails)).length > 0) {
                                            if (temData.filter(obj => obj.FK_MasterID == $('[name="StockId"]').val() && obj.FK_Stock == value.FK_Stock).length > 0) {
                                                blnChecked = true;

                                            }
                                        }
                                    }
                                    else {
                                        tempavailable = productSerialNum.filter(obj => obj.ID_ProductNumberingDetails.toString() == value.ID_ProductNumberingDetails && obj.FK_MasterID != $('[name="StockId"]').val());

                                        temData = productSerialNumTemp.filter(obj => obj.FK_MasterID == $('[name="StockId"]').val());
                                        let unavailable = productSerialNumTemp.filter(obj => obj.FK_MasterID == $('[name="StockId"]').val() && obj.FK_Stock == value.FK_Stock);

                                        if (temData.filter((obj => obj.ID_ProductNumberingDetails == value.ID_ProductNumberingDetails)).length > 0) {
                                            if (temData.filter(obj => obj.FK_MasterID == $('[name="StockId"]').val() && obj.FK_Stock == value.FK_Stock).length > 0) {
                                                blnChecked = true;

                                            }
                                        }
                                    }

                                    if (tempavailable == 0) {
                                        $("#divProductSerialNumbers").append(`<div class="col-sm-6 DivSlNo"><div class="form-check form-check-inline" perfect-class="formCheck"><label class="form-check-label" perfect-class="formCheckLabel"><input onchange="fn_checkedAllowed(this,${Mod} ,${Qty})" type="checkbox" class="form-check-input pssProductSerialSelect" SerialProduct="${productid}" Serialtext="${value.ProdSerielNo}" Qty="${Qty}" SubOrProd="${Mod}" value="${value.FK_Stock}" name="${value.ID_ProductNumberingDetails}" perfect-class="formCheckInput" perfect-ctype="checkbox" perfect-css="checkbox" ${(blnChecked ? "checked" : "")}><span perfect-class="formCheckInputText">${value.ProdSerielNo}</span></label></div></div>`);
                                    }

                                });
                                if (Mod == 2) {
                                    $('#modalProductSerialNumbers').modal('hide');
                                    SerialNumberExist = true;
                                }
                                else {
                                    $('#modalProductSerialNumbers').modal('show');
                                }
                                serialNumberPopup = true;

                            }
                        }
                        else {
                            if (Mod != 2) {
                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Serial Number Settings Not Found' });
                            }
                        }
                    },
                    complete: function () {
                        //ResetAMCandWarranty(ele, oldvalue);
                    }
                });
            }
            else {
                $thisForm.find('[perfect-tempTable-SerialNumber="SubProductID"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
                $thisForm.find('[perfect-tempTable-SerialNumber="SubQty"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
                if (Mod == 1) {
                    if (productid == "" || productid == null) {
                        $thisForm.find('[perfect-tempTable-SerialNumber="SubProductID"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('Please Select Sub Product');
                    }
                    else {
                        $thisForm.find('[perfect-tempTable-SerialNumber="SubProductID"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
                    }
                    if (Qty == "" || Qty == null) {
                        $thisForm.find('[perfect-tempTable-SerialNumber="SubQty"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('Please Enter Quantity');
                    }
                    else if (Qty == 0) {
                        $thisForm.find('[perfect-tempTable-SerialNumber="SubQty"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('Quantity Should be Greater than 0');
                    }
                    else {
                        $thisForm.find('[perfect-tempTable-SerialNumber="SubQty"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
                    }
                }
            }
        }

        function fn_checkedAllowed(ele, Mod, Qty) {
            let $thisForm = $('[perfect-class="form"]');
            let numberOfChecked = parseInt($('input.pssProductSerialSelect:checkbox:checked').length);
            let qty;
            if (Mod == 0) {
                qty = parseFloat(isNaN($thisForm.find('[name="SpdSalQuantity"]').val()) ? 0 : $thisForm.find('[name="SpdSalQuantity"]').val());
            }
            else {
                qty = Qty;
            }
            debugger
            if (numberOfChecked > qty) {
                $(ele).prop('checked', false)
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Your limit is ${qty}` });
            }
        }
        var productSerialNum = [];
        var productSerialNumTemp = [];
        var productSerialNumTempListPop = [];
        function fn_setProductSerialNumber(ele, Qty, ProductOrSub) {
            debugger
            let $thisForm = $('[perfect-class="form"]');

            let Master_stockid = $thisForm.find('[name=StockId]').val();
            let stockid = $('input.pssProductSerialSelect:checkbox:checked').val();
            let SerialProduct = $("#divProductSerialNumbers .pssProductSerialSelect").attr("SerialProduct");
            let SerialNum = $("#divProductSerialNumbers .pssProductSerialSelect").attr("Serialtext");

            let numberOfChecked = parseInt($('input.pssProductSerialSelect:checkbox:checked').length);
            let qty = parseInt(isNaN($thisForm.find('[name="SpdSalQuantity"]').val()) ? 0 : $thisForm.find('[name="SpdSalQuantity"]').val());
            if (numberOfChecked == Qty) {
                //remove old slno
                //$("#divProductSerialNumbers").empty();
                debugger
                //console.log('SERIAL NUMBER OLD>>>>', productSerialNumTemp)
                if (ProductOrSub == 1) {
                    productSerialNumTempListPop = productSerialNumTempListPop.filter(obj => obj.UID.toString() !== (Master_stockid.toString() + stockid.toString()));
                    //remove old slno
                    let UID = Master_stockid.toString() + stockid.toString()
                    $('input.pssProductSerialSelect:checkbox:checked').each(function () {
                        let sThisVal = $(this).attr('name');
                        let serialNumInfo = {};
                        serialNumInfo['UID'] = UID;
                        serialNumInfo['ProductId'] = SerialProduct;
                        serialNumInfo['FK_Stock'] = stockid;
                        serialNumInfo['FK_MasterID'] = Master_stockid;
                        serialNumInfo['ID_ProductNumberingDetails'] = sThisVal;
                        serialNumInfo['ProdSerielNo'] = SerialNum;
                        productSerialNumTempListPop.push(serialNumInfo);
                    });
                    console.log('SERIAL NUMBER Sub Product CURRENT>>>>', productSerialNumTempListPop)
                    console.log('MAIN SERIAL NUMBER Sub Product CURRENT>>>>', productSerialNumTempListPop)
                }
                else {
                    productSerialNumTemp = productSerialNumTemp.filter(obj => obj.UID.toString() !== (Master_stockid.toString() + stockid.toString()));
                    //remove old slno
                    let UID = Master_stockid.toString() + stockid.toString()
                    $('input.pssProductSerialSelect:checkbox:checked').each(function () {
                        let sThisVal = $(this).attr('name');
                        let serialNumInfo = {};
                        serialNumInfo['UID'] = UID;
                        serialNumInfo['ProductId'] = SerialProduct;
                        serialNumInfo['FK_Stock'] = stockid;
                        serialNumInfo['FK_MasterID'] = Master_stockid;
                        serialNumInfo['ID_ProductNumberingDetails'] = sThisVal;
                        serialNumInfo['ProdSerielNo'] = SerialNum;
                        productSerialNumTemp.push(serialNumInfo);
                    });
                    console.log('SERIAL NUMBER CURRENT>>>>', productSerialNumTemp)
                    console.log('MAIN SERIAL NUMBER CURRENT>>>>', productSerialNum)
                }

                return true;
            }
            else {
                return false;
            }
            //console.log(productSerialNum)
        }
        function fillSerialNumberTemp(ele) {
            productSerialNumTemp = [];
            debugger
            if (productSerialNum != null) {
                if (productSerialNum.length > 0) {
                    productSerialNumTemp = productSerialNumTemp.concat(productSerialNum);
                }
            }
        }
        function DeleteSerialNumbersRow(ele, StockId) {
            if (productSerialNum != null) {
                if (productSerialNum.length > 0) {
                    productSerialNum = productSerialNum.filter(obj => obj.FK_MasterID.toString() !== StockId);
                }
            }
        }
        function DeleteSerialNumbersTempRow(ele, SubStockId) {
            console.log("productSerialNumTemp>>>>>>>>>>>>",productSerialNumTemp)
            if (productSerialNumTemp != null) {
                if (productSerialNumTemp.length > 0) {
                    productSerialNumTemp = productSerialNumTemp.filter(obj => obj.FK_Stock.toString() !== SubStockId);
                }
            }
        }
        function fillSerialNumberTempListPop(ele,SubStockId) {
            productSerialNumTempListPop = [];
            console.log("productSerialNumTempListPop Fill ", productSerialNumTempListPop)
            debugger
            if (productSerialNumTemp != null) {
                if (productSerialNumTemp.length > 0) {
                    //let slnumber = productSerialNumTemp.filter(obj => obj.FK_Stock.toString() == SubStockId.toString());
                    productSerialNumTempListPop = productSerialNumTempListPop.concat(productSerialNumTemp);
                }
            }
        }
        function fn_ProductSerialNumberPopupHide(ele) {
            let Qty = parseFloat(isNaN($("#divProductSerialNumbers .pssProductSerialSelect").attr("qty")) ? 0 : $("#divProductSerialNumbers .pssProductSerialSelect").attr("qty"));
            let ProductOrSub = $("#divProductSerialNumbers .pssProductSerialSelect").attr("SubOrProd");

            debugger
            if (fn_setProductSerialNumber(this, Qty, ProductOrSub)) {
                $('#modalProductSerialNumbers').modal('hide');
            }
            else {
                let qty = parseInt(isNaN($('[name="SpdSalQuantity"]').val()) ? 0 : $('[name="SpdSalQuantity"]').val());
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Please Select Minimum ${Qty} Sl No` });
            }
        }

        var SubproductDetailsSave = [];
        var SubproductDetailsTemp = [];

        function fn_setSubProductDetails(ele) {
            let $thisForm = $('[perfect-class="form"]');
            let Master_stockid = $thisForm.find('[name=StockId]').val();
            let Qty = $thisForm.find('[name=SpdSalQuantity]').val();
            var ProductName;
            var SubProductName;
            var Status = true;
            var SubProdStatus = true;
            var SubQtyStatus = true;
            var SerialNumberCount = 0;
            var ProductserialSize = true;
            debugger


            //$('[perfect-tempTable="SerialNumber"]').find('tbody').find('tr').each(function () {
            //    SubProductDetails.push($(this).data('pData'));
            //})
            //if (SubProductDetails != null) {
            //    if (SubProductDetails.length > 0) {
            //        SubproductDetailsTemp = SubProductDetails.filter((obj => obj.Master_ID.toString() != Master_stockid.toString()));

            //        let SubproductInfo = {};
            //        let prodid = $currentDiv.find('[name="SubProductID"]').val();
            //        // subproduct array set strat
            //        SubproductInfo['Master_ID'] = $.find('[name=StockId]').val();
            //        SubproductInfo['SubStockID'] = $('[name=SubStockId]').val();
            //        SubproductInfo['Product_ID'] = $('[name="SubProductID"]').val();
            //        SubproductInfo['Qty'] = $('[name="SubQty"]').val();
            //        SubproductDetailsTemp.push(SubproductInfo);

            //        let SerialNumber = $('[name="ProductNumbering"]').val();
            //        let Product = $('[name="SubProduct"]').val();
            //        let SubCurrentQty = $('[name="SubCurrentStock"]').val();
            //        let SubQty = parseFloat(isNaN($('[name="SubQty"]').val()) ? 0 : $('[name="SubQty"]').val());
            //        if ((parseFloat(SerialNumber)) < 1) {
            //            //return true;
            //            SubProdStatus = true;
            //        }
            //        else if ($('[name="SubProductID"]').val() != 0 && $('[name="ProductNumbering"]').val() > 0) {
            //            SubProdStatus = false;
            //            SubProductName = $('[name="SubProdName"]').val();
            //            if (productSerialNumTemp != null) {
            //                console.clear();
            //                console.log('productSerialNumTemp', productSerialNumTemp);
            //                if (productSerialNumTemp.length > 0) {
            //                    let SelectedSlNo = productSerialNumTemp.filter(obj => obj.FK_MasterID == $('[name="StockId"]').val() && obj.ProductId == $currentDiv.find('[name="SubProductID"]').val()).length > 0
            //                    if (SelectedSlNo) {
            //                        //return true;
            //                        SubProdStatus = true;
            //                    }
            //                    else {
            //                        //return false;
            //                        SubProdStatus = false;
            //                        ProductName = Product;

            //                    }
            //                }
            //            }
            //        }

            //        if (parseFloat(SubQty) > parseFloat(SubCurrentQty)) {
            //            SubQtyStatus = false;
            //            SubProductName = Product
            //        }
            //        if (SubProdStatus == false || SubQtyStatus == false) {
            //            return false;
            //        }

            //    }
            //}
            var SubProduct = [];
            console.log('SubproductDetailsTemp>>>>>>>>>>>>>>>>>>>>>', SubproductDetailsTemp)
            if (SubproductDetailsTemp != null) {
                SubProduct = SubproductDetailsTemp.filter(obj => obj.Master_ID.toString() === ($('[name="StockId"]').val()).toString());
                const indexOfObject = SubproductDetailsTemp.findIndex(object => {
                    return object.Master_ID.toString() === ($('[name="StockId"]').val()).toString();
                });
                SubproductDetailsTemp.splice(indexOfObject, SubProduct.length);
            }
            console.log(SubproductDetailsTemp);
            $thisForm.find('[perfect-tempTable="SerialNumber"]').find('tbody').find('tr').each(function () {
                SubproductDetailsTemp.push($(this).data('pData'));
            });
            //till here

            if ($('[name="ProductNumbering"]').val() < 1) {
                SubProdStatus = true;
            }
            else if ($('[name="SubProductID"]').val() != 0 && $('[name="ProductNumbering"]').val() > 0) {
                SubProdStatus = false;
                SubProductName = $('[name="SubProdName"]').val();
                if (productSerialNumTempListPop != null) {
                    if (productSerialNumTempListPop.length > 0) {
                        let SelectedSlNo = productSerialNumTempListPop.filter(obj => obj.FK_MasterID == $('[name="StockId"]').val() && obj.FK_Stock == $('[name=SubStockId]').val()).length > 0
                        if (SelectedSlNo) {
                            //return true;
                            SubProdStatus = true;
                        }
                        //else {
                        //    //return false;
                        //    SubProdStatus = false;
                        //    //ProductName = Product;

                        //}
                    }
                }
            }
            debugger
            if (SerialNumberExist) {
                if (productSerialNumTemp != null) {
                    if (productSerialNumTemp.length > 0) {
                        let SelectedSlNo = productSerialNumTemp.filter(obj => obj.FK_MasterID == $('[name="StockId"]').val() && obj.FK_Stock == $('[name="StockId"]').val()).length;/*> 0*/
                        SerialNumberCount = SelectedSlNo;
                        if (SelectedSlNo != 0) {
                            //return true;
                            Status = true;
                        }
                        else if (SelectedSlNo) {
                            Status = false;
                        }
                        else {
                            //return false;
                            Status = false;
                            ProductName = $('[name="ProdsName"]').val();
                        }
                        if ((parseFloat(SelectedSlNo) < parseFloat(Qty) || parseFloat(SelectedSlNo) > parseFloat(Qty)) && parseFloat(SelectedSlNo) != 0) {
                            ProductserialSize = false;
                        }

                    }
                    else {
                        //return false;
                        Status = false;
                        ProductName = $('[name="ProdsName"]').val();
                    }
                }
            }
            return [Status, SubProdStatus, ProductName, SubQtyStatus, SubProductName, SerialNumberCount, ProductserialSize];
        }
        function fn_SubProductDetailsPopupHide() {
            let returndetails = fn_setSubProductDetails(this);
            console.log('returndetails>>>>>>>>', returndetails)
            let product = $('[name=ProName]').val();
            if (returndetails[0] == true && returndetails[1] == true && returndetails[6] == true) {
                $('#formGroupModalQuantitySales').modal('hide');
                productclear(this, 'SerialNumber');
            }
            else if (returndetails[6] == false) {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Please Select Serial Number Based on Quantity For Product - ${product}` });
            }
            else {
                if (returndetails[1] == false) {
                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Please Select Serial Number For Product - ${returndetails[4]}` });
                }
                else {
                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Please Select Serial Number For Product - ${returndetails[2]}` });
                }
            }
        }
        function fillSubproductDetailsTemp(ele) {
            SubproductDetailsTemp = [];

            debugger
            if (SubproductDetailsSave != null) {
                if (SubproductDetailsSave.length > 0) {
                    SubproductDetailsTemp = SubproductDetailsTemp.concat(SubproductDetailsSave);
                }
            }
        }
        function DeleteSubproductDetailsRow(ele, StockId) {
            if (SubproductDetailsSave != null) {
                if (SubproductDetailsSave.length > 0) {
                    SubproductDetailsSave = SubproductDetailsSave.filter(obj => obj.Master_ID.toString() !== StockId);
                }
            }
        }

        /////////////////////////////////////






        function ShowQuantitySlNumber(ele) {
            let $thisForm = $(ele).closest('[perfect-class="form"]');

            $('#formGroupModalQuantitySales').modal({ backdrop: 'static', keyboard: false });
            $(ele).closest('[perfect-class="formGroup"]').find('[perfect-class="formGroupModalQuantitySales"]').modal('show');
            $thisForm.find('[name="Qty"]').val(Number($thisForm.find('[name="SpdSalQuantity"]').val()).toFixed(3));

            let ProductId = $('[name="ProductID"]').val();
            let ProductName = $('[name="ProName"]').val();
            $('[name="ProdId"]').val(ProductId);
            $('[name="ProdsName"]').val(ProductName);

            var SubProducts = [];
            //if (SubProductDetails != null) {
            //    SubProducts = SubProductDetails.filter(obj => obj.FK_Employee.toString() === (savedData.FK_Employee).toString());
            //}

            $("#divSubproductDtls").empty();
            $.each(SubProductDetails, function (key, value) {
                let readonly;

                if (value.SprodQtyFixed) {
                    readonly = "readonly";
                }
                else {
                    readonly = "";
                }
                if (SubproductDetailsTemp != null) {

                    console.log('SubproductDetailsTemp', SubproductDetailsTemp);
                    $.each(SubproductDetailsTemp, function (i, valuea) {
                        debugger
                        if (valuea.Product_ID.toString() == value.ID_Product) {
                            value.SprodQuanity = valuea.Qty;
                        }
                    });
                }

                let tempDiv = `<div class="col-sm-5 divSubProduct">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel" name="lblProName">Sub Product</span>
                                            </label>
                                            <div class="col-sm-8">
                                                <div class="input-group">
                                                    <input type="text" class="form-control  " id="SubprodName" name="SubProduct" value="${value.ProdName}" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly/>
                                                    <input type="hidden" class="form-control  EmployeeSalaryDetails" serialnumber="${value.Number}" name="SubProductID" value="${value.ID_Product}" perfect-class="formGroupControl">

                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-5">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel" name="lblProName">Quantity</span>
                                            </label>
                                            <div class="col-sm-8">
                                                <div class="input-group">
                                                    <input type="hidden" class="form-control" id="SubCurrentStock" name="" onfocus="this.oldvalue = this.value;" value="${value.CurrentStock}" perfect-class="formGroupControl">
                                                    <input type="text" class="form-control text-right EmployeeSalaryDetails" name="SubProductQty" oninput="decimalpnt(this,'Subproduct${value.ID_Product}',4)" onfocus="this.oldvalue = this.value;"  perfect-class="formGroupControl" id="Subproduct${value.ID_Product}" value="${Number(value.SprodQuanity).toFixed(3)}" maxlength="13"
                                                     perfect-ctype="input" perfect-css="input" ${readonly}/>
                                                    <div class="invalid-feedback ErrorMessage"></div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-2">
                                        <button type="button" class="btn btn-primary1 fa fa-list-ol float-right" perfect-css="button" onclick="fn_getSerialNumbers(this,1,${value.ID_Product},${value.CurrentStock})" name="SlNumber"></button>
                                    </div>`;
                $("#divSubproductDtls").append(tempDiv)
            });



            //}
            //else {
            //    NotificationMessage({ 'type': 'info', 'heading': 'info', 'message': "Please Enter Quantity" });
            //}
        }

        function fn_getSubProductDetails(ele) {

            let $thisForm = $(ele).closest('[perfect-class="form"]');
            let oldvalue = ele.oldvalue;
            let current = ele.value;
            let Mode = 0;
            if ($thisForm.find('[name="ProductID"]').val() != "") {
                if (parseFloat($thisForm.find('[name="SpdSalQuantity"]').val()) > 0) {
                    let productid = $('[name="ProductID"]').val();
                    if (productid != "" && productid != null) {
                        let input = {
                            __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                            'ID_Sales': 0,
                            'TransMode': "",
                            'FK_Product': $('[name="ProductID"]').val(),
                            'StockID': $('[name="StockId"]').val(),
                            'Mode': Mode,
                            'Quantity': $('[name="SpdSalQuantity"]').val(),
                        }
                        $.ajax({
                            url: "@Url.Action("GetSubProductsDetailInfo", "Sales")",
                            type: "POST",
                            data: input,
                            dataType: "json",
                            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                            success: function (ajaxOutput) {
                                if (ajaxOutput.subproduct.Process.IsProcess) {
                                    $("#divSubproductDtls").empty();
                                    if (ajaxOutput.subproduct.Data.length > 0) {
                                        debugger
                                        //SubProductDetails = ajaxOutput.subproduct.Data;
                                        $(".Subproductheader").show();
                                    }
                                    else {
                                        $(".Subproductheader").hide();
                                    }
                                }
                            },
                            complete: function () {
                                ShowQuantitySlNumber(ele);
                                fn_getSerialNumbers(this, 2, 0);
                            }
                        });
                    }
                }
                else {
                    NotificationMessage({ 'type': 'info', 'heading': 'info', 'message': "Please Enter Quantity" });
                }
            }
            else {
                NotificationMessage({ 'type': 'info', 'heading': 'info', 'message': "Please Select Product" });
            }
        }

        //$("#SpdSalQuantity").focusout(function () {
        //    if (serialNumberPopup) {
        //        $('#modalProductSerialNumbers').modal('show');
        //    }
        //});



        //Serial Number Section vALIDATION, DELETE SELECT , old
        function fn_setSubProductDetails1(ele) {
            let $thisForm = $('[perfect-class="form"]');
            let Master_stockid = $thisForm.find('[name=StockId]').val();
            var ProductName;
            var SubProductName;
            var Status = true;
            var SubProdStatus = true;
            var SubQtyStatus = true;
            debugger
            if (SubProductDetails != null) {
                if (SubProductDetails.length > 0) {
                    SubproductDetailsTemp = SubproductDetailsTemp.filter((obj => obj.Master_ID.toString() != Master_stockid.toString()));
                    $('.divSubProduct').each(function () {
                        debugger
                        let $currentDiv = $(this);
                        let SubproductInfo = {};
                        let prodid = $currentDiv.find('[name="SubProductID"]').val();
                        // subproduct array set strat
                        SubproductInfo['Master_ID'] = $thisForm.find('[name=StockId]').val();
                        SubproductInfo['Product_ID'] = $currentDiv.find('[name="SubProductID"]').val();
                        SubproductInfo['Qty'] = parseFloat(isNaN($("#Subproduct" + prodid).val()) ? 0 : $("#Subproduct" + prodid).val());
                        SubproductDetailsTemp.push(SubproductInfo);
                        // subproduct array set start

                        let SerialNumber = $currentDiv.find('[name="SubProductID"]').attr("serialnumber");
                        let Product = $currentDiv.find('[name="SubProduct"]').val();
                        let SubCurrentQty = $("#SubCurrentStock").val();
                        let SubQty = parseFloat(isNaN($("#Subproduct" + prodid).val()) ? 0 : $("#Subproduct" + prodid).val());
                        debugger
                        if ((parseFloat(SerialNumber)) < 1) {
                            //return true;
                            SubProdStatus = true;
                        }
                        else {
                            SubProdStatus = false;
                            if (productSerialNumTemp != null) {
                                console.clear();
                                console.log('productSerialNumTemp', productSerialNumTemp);
                                if (productSerialNumTemp.length > 0) {
                                    let SelectedSlNo = productSerialNumTemp.filter(obj => obj.FK_MasterID == $('[name="StockId"]').val() && obj.ProductId == $currentDiv.find('[name="SubProductID"]').val()).length > 0
                                    if (SelectedSlNo) {
                                        //return true;
                                        SubProdStatus = true;
                                    }
                                    else {
                                        //return false;
                                        SubProdStatus = false;
                                        ProductName = Product;

                                    }
                                }
                            }
                        }

                        if (parseFloat(SubQty) > parseFloat(SubCurrentQty)) {
                            SubQtyStatus = false;
                            SubProductName = Product
                        }
                        if (SubProdStatus == false || SubQtyStatus == false) {
                            return false;
                        }
                    });
                }
            }
            debugger
            if (SerialNumberExist) {
                if (productSerialNumTemp != null) {
                    if (productSerialNumTemp.length > 0) {
                        let SelectedSlNo = productSerialNumTemp.filter(obj => obj.FK_MasterID == $('[name="StockId"]').val() && obj.FK_Stock == $('[name="StockId"]').val()).length > 0
                        if (SelectedSlNo != 0) {
                            //return true;
                            Status = true;
                        }
                        else {
                            //return false;
                            Status = false;
                            ProductName = $('[name="ProdsName"]').val();
                        }
                    }
                    else {
                        //return false;
                        Status = false;
                        ProductName = $('[name="ProdsName"]').val();
                    }
                }
            }
            return [Status, SubProdStatus, ProductName, SubQtyStatus, SubProductName];
        }
        function fillSubproductDetailsTemp1(ele) {
            SubproductDetailsTemp = [];

            debugger
            if (SubproductDetailsSave != null) {
                if (SubproductDetailsSave.length > 0) {
                    SubproductDetailsTemp = SubproductDetailsTemp.concat(SubproductDetailsSave);
                }
            }
        }
        function DeleteSubproductDetailsRow1(ele, StockId) {
            if (SubproductDetailsSave != null) {
                if (SubproductDetailsSave.length > 0) {
                    SubproductDetailsSave = SubproductDetailsSave.filter(obj => obj.Master_ID.toString() !== StockId);
                }
            }
        }
    function fn_SubProductDetailsPopupHide1() {
        debugger
            let returndetails = fn_setSubProductDetails(this);
            console.log('returndetails>>>>>>>>', returndetails)

            if (returndetails[0] == true && returndetails[1] == true && returndetails[3] == true) {
                $('#formGroupModalQuantitySales').modal('hide');
            }
            else {
                $("#divSubproductDtls .divSubProduct").attr("qty")
                if (returndetails[3] == false) {
                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `${returndetails[4]} - Insufficient Stock ` });
                }
                else {
                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Please Select Serial Number For Product - ${returndetails[2]}` });
                }

            }
        }
        //Serial Number Section vALIDATION, DELETE SELECT , old  END


        function datencheck(ele) {


            let $thisForm = $(ele).closest('[perfect-class="form"]');
            //invalid-feedback
            let RegDate = $thisForm.find('[name="SalEnterDate"]').val();
            let lowerlimit = $thisForm.find('[name="NextActionDate"]').val();
            //SalEnterDate = new Date(SalEnterDate);

            //var today = new Date();
            RegDate = new Date(RegDate);
            RegDate.setHours(0, 0, 0, 0)


            let today = new Date();
            today.setHours(0, 0, 0, 0);


            if (RegDate > today) {
                $thisForm.find('[name="SalEnterDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('Entered date should be less than or equal to Todays date')
                return false;

            }
            else {

                $thisForm.find('[name="SalEnterDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('');
                return true;
            }


        }


        function billdatencheck(ele) {


            let $thisForm = $(ele).closest('[perfect-class="form"]');
            //invalid-feedback
            let billDate = $thisForm.find('[name="SalBillDate"]').val();

            //SalEnterDate = new Date(SalEnterDate);

            //var today = new Date();
            billDate = new Date(billDate);
            billDate.setHours(0, 0, 0, 0)


            let today = new Date();
            today.setHours(0, 0, 0, 0);


            if (billDate > today) {
                $thisForm.find('[name="SalBillDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('Bill date should be less than or equal to Todays date')
                return false;

            }
            else {

                $thisForm.find('[name="SalBillDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('');
                return true;
            }


        }
            $(function () {
                $("form").submit(function () { return false; });
            });
            function decimalpntnew(ele,id ,range) {

                let input = $('#'+id);
                ele.value = ele.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');
                let t = ele.value;
                ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t;
                input.on('keydown', function () {
                    if (ele.value.includes('.')) {

                    }
                    var key = event.keyCode || event.charCode;
                    if (key == 8 || key == 46) {   }
                    else {
                        if (ele.value.length == 15) {
                            ele.value = ele.value + '';
                        }
                    }

                });

        }
        function decimalpnt(ele, id, range) {
            //debugger
            let input = $('#' + id);

            ele.value = ele.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');
            let t = ele.value;
            ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t;

            $(document).on('keydown', '#' + id, function (event) {

                if (ele.value.includes('.')) {

                }
                else if (ele.value === '.' && (event.key === '.' || event.keyCode === 190)) {
                    ele.value = '0.00'; // Change the value to '0.00' if only a dot is entered
                    // Prevent the dot from being entered in the input field
                }
                var key = event.keyCode || event.charCode;
                if (key == 8 || key == 46) { }
                else {
                    if (ele.value.indexOf('.') < 0 && ele.value.indexOf('.') !== 9 && ele.value.length > 8) {
                        ele.value = ele.value + '.';
                    }
                }

            });

        }

            function decimalpntminus(ele, id, range) {

                let input = $('#' + id);
                ele.value = ele.value.replace(/[^0-9.-]/g, '').replace(/(\..*)\./g, '$1');
                let t = ele.value;
                ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t;
                input.on('keydown', function () {
                    if (ele.value.includes('.')) {

                    }
                    var key = event.keyCode || event.charCode;
                    if (key == 8 || key == 46) { }
                    else {
                        if (ele.value.length == 9) {
                            ele.value = ele.value + '.';
                        }
                    }

                });

            }
            function minmax(min, max, ele,range) {
                if (min != '' || max != '') {
                    let t = ele.value;
                    if (parseInt(ele.value) < min || isNaN(parseInt(ele.value))) { ele.value = min; }
                    else if (parseInt(ele.value) > max) { ele.value = max; }
                    else { ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t; }
                }
            }


            $(document).ready(function () {


                let $thisForm = $(this).find('[perfect-class="form"]');
                var today = new Date();
                var day1 = today.getDate() > 9 ? today.getDate() : "0" + today.getDate(); // format should be "DD" not "D" e.g 09
                var month1 = (today.getMonth() + 1) > 9 ? (today.getMonth() + 1) : "0" + (today.getMonth() + 1);
                var year1 = today.getFullYear();
               
                //$thisForm.find('[name="Serwardt"]').attr('min', year1 + "-" + month1 + "-" + day1);
                //$thisForm.find('[name="Replcwardt"]').attr('min', year1 + "-" + month1 + "-" + day1);

                
                if ('@ViewBag.UserMrpEdit'.toLowerCase() === "true") {
                    
                    document.getElementById("MRPs").disabled = false;
                }
                else {
                    document.getElementById("MRPs").disabled = true;
                }

                if ('@ViewBag.UserPriceEdit'.toLowerCase() === "true") {
                    document.getElementById("SalePrice").disabled = false;
                }
                else {
                    document.getElementById("SalePrice").disabled = true;
                }

                if (ChekStandBy1 == "True") {

                    document.getElementById('stockZero').style.display = "block";
                    document.getElementById('stockZero1').style.display = "block";

                }
                else {
                    document.getElementById('stockZero').style.display = "none";
                    document.getElementById('stockZero1').style.display = "none";
                }

                console.log('ChekStandBy1dfd', ChekStandBy1);
            });




            function ImageLoad(ele) {
                let $thisForm = $(ele).closest('[perfect-class="form"]');

                if ($thisForm.find('[name="ProductID"]').val() == '' || $thisForm.find('[name="ProductID"]').val() == null) {
                    NotificationMessage({ 'message': 'Please Select Product' });
                }
                else {
                    $('#formGroupModalwarrantyimg').modal({ backdrop: 'static', keyboard: false })
                    $('#formGroupModalwarrantyimg').modal('show');
                    let prdid = $thisForm.find('[name="ProductID"]').val();

                    let stkid = $thisForm.find('[name="StockId"]').val();
                    let $pimgContainer = $('#Image-img');


                    $pimgContainer.load('@Url.Action("LoadMultipleImageForm", "CommonPopupSearch", new { mode = 26 })', function () {
                        wartype = 0;
                        if ($thisForm.data('pImageselect')) {

                            WarProductImagelst = [];
                            if ($thisForm.data('pImageselect').length > 0) {

                                WarProductImagelst = $thisForm.data('pImageselect');
                                console.log("WarProductImagelst", WarProductImagelst)
                                for (var i = 0; i < WarProductImagelst.length; i++) {
                                    if (!WarProductImagelst[i].ProdImage.includes("data:image/;base64,")) {
                                        WarProductImagelst[i].ProdImage = "data:image/;base64," + WarProductImagelst[i].ProdImage;
                                    }

                                }


                            }
                        }
                        uStockId = stkid;
                        uproductid = prdid;
                        imagemode = 2;
                    });
                }
            }

        var warrantydetails = [];
        var TempWarrantyDetails=[];

            function GetWarrantylists1(ele,mode) {

                let $thisForm = $(ele).closest('[perfect-class="form"]');
                let Amctype = $thisForm.find('[name="AMCMType"]').val();
                let NoOfServices = $thisForm.find('[name="AMCNoOfServices"]').val();
                let AMCDuedate = $thisForm.find('[name="AMCMDuedate"]').val();
                let AMCRenewduedate = $thisForm.find('[name="AMCMRenewduedate"]').val();
                let AmcAmount = $thisForm.find('[name="AmcTotalAmount"]').val();
                let AMCTaxAmount = $thisForm.find('[name="AMCTaxTotalAmt"]').val();
                let AMCNetAmount = $thisForm.find('[name="AMCNetTotalAmt"]').val();
                let AmRemarks = $thisForm.find('[name="AMCRemarks"]').val();

                productclear(ele, 'Warranty');
                if ($thisForm.find('[name="ProductID"]').val() == '' || $thisForm.find('[name="ProductID"]').val() == null) {
                    NotificationMessage({ 'message': 'Please Select Product' });
                }
                else {
                    let prdid = $thisForm.find('[name="ProductID"]').val();
                    let stkid = $thisForm.find('[name="StockId"]').val();
                    $thisForm.find('[name="stkid"]').val(stkid);
                    $thisForm.find('[name="prodtid"]').val(prdid);
                    var warobject = [];

                    if ($thisForm.data('pwarranty')) {

                        if ($thisForm.data('pwarranty').length > 0) {

                            warrantydetails = $thisForm.data('pwarranty');

                            console.log("warrantydetailsed", warrantydetails)
                        }
                    }
                    if (warrantydetails != null) {
                        warobject = warrantydetails.filter(obj => obj.stkid.toString() === stkid.toString());
                    }
                         $('#formGroupModalwarranty').modal({ backdrop: 'static', keyboard: false })
                    console.log('warobject', warobject)
                    if (mode == 0) {
                        $('#formGroupModalwarranty').modal('show');
                    }
                    else {
                        $('#formGroupModalwarranty').modal('hide');
                    }

                    if (warobject != null) {
                        if (warobject.length > 0) {
                            if (warobject[0]['stkid'] == stkid) {
                                fillgrid('Warranty', wartableOptionsTempOut, $thisForm, warobject);
                            }

                        } else {
                            $thisForm.find('[perfect-tempTable= "Warranty"]').empty();
                        }
                    }

                    debugger

                    let AMCdet = $thisForm.data('amcdatadata');
                    if (AMCdet) {
                        if (AMCdet[0]['AMCFK_Master'] == stkid) {
                            if ($thisForm.data('amcdatadata')) {
                                $.each(AMCdet, function (key, value1) {
                                    $thisForm.find('[name="AMCFK_Master"]').val(value1.AMCFK_Master);
                                    $thisForm.find('[name="AMCType"]').val(value1.AMCType).selectpicker('refresh');
                                    $thisForm.find('[name="NoOfServices"]').val(value1.NoOfServices);
                                    $thisForm.find('[name="AMCDuedate"]').val(value1.AMCDuedate);
                                    $thisForm.find('[name="AMCRenewduedate"]').val(value1.AMCRenewduedate);
                                    $thisForm.find('[name="AmcAmount"]').val(value1.AmcAmount);
                                    $thisForm.find('[name="AMCTaxAmount"]').val(value1.AMCTaxAmount);
                                    $thisForm.find('[name="AMCNetAmount"]').val(value1.AMCNetAmount);
                                    $thisForm.find('[name="AmRemarks"]').val(value1.AmRemarks);
                                });

                            }
                        }
                    }
                    else {
                        $thisForm.find('[name="AMCFK_Master"]').val('');
                        $thisForm.find('[name="AMCType"]').val('').selectpicker('refresh');
                        $thisForm.find('[name="NoOfServices"]').val('');
                        $thisForm.find('[name="AMCDuedate"]').val('');
                        $thisForm.find('[name="AMCRenewduedate"]').val('');
                        $thisForm.find('[name="AmcAmount"]').val('');
                        $thisForm.find('[name="AMCTaxAmount"]').val('');
                        $thisForm.find('[name="AMCNetAmount"]').val('');
                        $thisForm.find('[name="AmRemarks"]').val('');
                    }
                }

            }
        function fillamcdetails(ele) {
            debugger
            let $thisForm = $(ele).closest('[perfect-class="form"]');
            let AmcFK_Master = $thisForm.find('[name="AMCFK_Master"]').val();
            let Amctype = $thisForm.find('[name="AMCMType"]').val();
            let NoOfServices = $thisForm.find('[name="AMCNoOfServices"]').val();
            let AMCDuedate = $thisForm.find('[name="AMCMDuedate"]').val();
            let AMCRenewduedate = $thisForm.find('[name="AMCMRenewduedate"]').val();
            let AmcAmount = $thisForm.find('[name="AmcTotalAmount"]').val();
            let AMCTaxAmount = $thisForm.find('[name="AMCTaxTotalAmt"]').val();
            let AMCNetAmount = $thisForm.find('[name="AMCNetTotalAmt"]').val();
            let AmRemarks = $thisForm.find('[name="AMCRemarks"]').val();

            if (Amctype != 0) {
                var AMC = [];
                let Amcdetails = {
                    AMCFK_Master: AmcFK_Master,
                    AMCType: Amctype,
                    NoOfServices: NoOfServices,
                    AMCDuedate: AMCDuedate,
                    AMCRenewduedate: AMCRenewduedate,
                    AmcAmount: AmcAmount,
                    AMCTaxAmount: AMCTaxAmount,
                    AMCNetAmount: AMCNetAmount,
                    AmRemarks: AmRemarks
                }
                AMC.push(Amcdetails);
                $thisForm.data({ amcdatadata: AMC });
            }
        }

            function fillgrid(tablk, wartableOptionsTempOut, $thisForm,data) {
                let tableOptionsTemp = wartableOptionsTempOut;
                let insertData = [];
                let tableKey = tablk;
                let indexname = tableKey + 'index';
                tableOptionsTemp.rowAttribute.push(indexname);
                tableOptionsTemp.hideColumn.push(indexname);
                let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');
                $.each(data, function (keyOne, valOne) {
                    let pData = {};
                    pData[indexname] = keyOne + 1;
                    $tblcontainer.attr('perfect-tempTable-lastindex', pData[indexname])
                    //---

                    $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                        let $this = $(this);
                        let headerName = $this.attr('perfect-tempTable-' + tableKey);
                        let nameAttr = $this.attr('name');

                        if (typeof valOne[nameAttr] !== undefined) {

                            if ($this.is('select')) {
                                tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                                tableOptionsTemp.hideColumn.push(nameAttr);
                                pData[nameAttr + '_d'] = $this.find('[value="' + valOne[nameAttr] + '"]').text();
                                pData[nameAttr] = valOne[nameAttr];
                            }
                            else if ($this.is('input')) {
                                if (tableKey == 'Purchase') {
                                    if (ChekStandBy1 == "False") {


                                        if (nameAttr == "StandByQuantity") {
                                            tableOptionsTemp.hideColumn.push(nameAttr);
                                        }
                                        else if (nameAttr == "StandByProdName") {
                                            tableOptionsTemp.hideColumn.push(nameAttr);
                                        }
                                        else if (nameAttr == "StandByProduct") {
                                            tableOptionsTemp.hideColumn.push(nameAttr);
                                        }

                                    }
                                }

                                pData[nameAttr] = valOne[nameAttr];
                            }
                            else if ($this.is('hidden')) {

                                pData[nameAttr] = valOne[nameAttr];
                            }
                            else {
                                pData[nameAttr] = valOne[nameAttr];
                            }
                        }
                    });

                    insertData.push(pData);
                    console.log('pData', pData)
                    console.log('insertData', insertData)
                });
                $tblcontainer.empty();
                $tblcontainer.append(pft_table_createtable(insertData, tableOptionsTemp));
                checkemi(this)
            }
            function warrantydet1(ele)
            {
                debugger
                let $thisForm = $(ele).closest('[perfect-class="form"]');
                let prdid = $thisForm.find('[name="ProductID"]').val();
                let stkid = $thisForm.find('[name="StockId"]').val();

                let AMCType = $thisForm.find('[name="AMCType"]').val();
                let NoOfServices = $thisForm.find('[name="NoOfServices"]').val();
                let AMCDuedate = $thisForm.find('[name="AMCDuedate"]').val();
                let AMCRenewduedate = $thisForm.find('[name="AMCRenewduedate"]').val();
                let AmcAmount = $thisForm.find('[name="AmcAmount"]').val();
                let AMCTaxAmount = $thisForm.find('[name="AMCTaxAmount"]').val();
                let AMCNetAmount = $thisForm.find('[name="AMCNetAmount"]').val();
                let AmRemarks = $thisForm.find('[name="AmRemarks"]').val();


                var uwarobject = [];
                if (warrantydetails != null) {
                    uwarobject = warrantydetails.filter(obj => obj.stkid.toString() === stkid.toString());
                    const indexOfObject = warrantydetails.findIndex(object => {
                        return object.stkid.toString() === stkid.toString();
                    });

                    console.log(indexOfObject); // 👉️ 1

                    warrantydetails.splice(indexOfObject, uwarobject.length);
                }
                console.log(warrantydetails);
                $thisForm.find('[perfect-tempTable="Warranty"]').find('tbody').find('tr').each(function () {
                    console.log('sadd', $(this).data('pData'))
                    warrantydetails.push($(this).data('pData'));


                })
                console.log('warrantydetails', warrantydetails)

                var AMC = [];
                let Amcdetails = {
                    AMCFK_Master: stkid,
                    AMCType: AMCType,
                    NoOfServices: NoOfServices,
                    AMCDuedate: AMCDuedate,
                    AMCRenewduedate: AMCRenewduedate,
                    AmcAmount: AmcAmount,
                    AMCTaxAmount: AMCTaxAmount,
                    AMCNetAmount: AMCNetAmount,
                    AmRemarks: AmRemarks
                }
                AMC.push(Amcdetails);
                console.log('Amcdetails', Amcdetails);

                $thisForm.data({ amcdatadata: AMC });

                let AMCdet = $thisForm.data('amcdatadata');
                if ($thisForm.data('amcdatadata')) {
                    $.each(AMCdet, function (key, value1) {
                        $thisForm.find('[name="AMCFK_Master"]').val(value1.AMCFK_Master);
                        $thisForm.find('[name="AMCMType"]').val(value1.AMCType).selectpicker();
                        $thisForm.find('[name="AMCNoOfServices"]').val(value1.NoOfServices);
                        $thisForm.find('[name="AMCMDuedate"]').val(moment(value1.AMCDuedate).format('YYYY-MM-DD'));
                        $thisForm.find('[name="AMCMRenewduedate"]').val(moment(value1.AMCRenewduedate).format('YYYY-MM-DD'));
                        $thisForm.find('[name="AmcTotalAmount"]').val(value1.AmcAmount);
                        $thisForm.find('[name="AMCTaxTotalAmt"]').val(value1.AMCTaxAmount);
                        $thisForm.find('[name="AMCNetTotalAmt"]').val(value1.AMCNetAmount);
                        $thisForm.find('[name="AMCRemarks"]').val(value1.AmRemarks);
                    });
                }

                $('#formGroupModalwarranty').modal('hide');
                calcsalpttl(ele)
            }


            var wartableOptionsTempOut = {
                iconButton: {
                    buttons: [
                        @*{
                            icon: "fa fa-image btnPerfectGridImage",
                            title: "Add images",

                            action: function () {
                                debugger
                                let savedData = $(this).closest('tr').data('pData')
                                $('#formGroupModalwarrantyimg').modal({ backdrop: 'static', keyboard: false })
                                $('#formGroupModalwarrantyimg').modal('show');
                                let $imgContainer = $('#Image-img');
                                let $tablecontainer = $(this).closest('[perfect-tempTable]');
                                let tableKey = $tablecontainer.attr('perfect-tempTable');
                                let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                                var wartyp;
                                $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                                    let $thisNode = $(this);
                                    let pf_name = $thisNode.attr('name');
                                    if (pf_name == "WarrantyType") {
                                        wartyp = savedData[pf_name];
                                        console.log('WarrantyTypename', pf_name)
                                    }
                                });
                                $imgContainer.load('@Url.Action("LoadMultipleImageForm", "CommonPopupSearch", new { mode = 26 })', function () {
                                    debugger
                                    wartype = wartyp;
                                    if ($thisForm.data('pImageselect')) {
                                        console.log("pImageselect", $thisForm.data('pImageselect'))
                                        WarProductImagelst = [];
                                        if ($thisForm.data('pImageselect').length > 0) {

                                            WarProductImagelst = $thisForm.data('pImageselect');

                                            for (var i = 0; i < WarProductImagelst.length; i++) {
                                                if (!WarProductImagelst[i].ProdImage.includes("data:image/;base64,")) {
                                                    WarProductImagelst[i].ProdImage = "data:image/;base64," + WarProductImagelst[i].ProdImage;
                                                }

                                            }


                                        }
                                    }

                                    uStockId = $thisForm.find('[name="StockId"]').val();
                                    uproductid = $thisForm.find('[name="ProductID"]').val();
                                    imagemode = 1;
                                });
                            }
                        },*@

                        {
                            icon: "fa fa-pencil btnPerfectGridEdit",
                            action: function () {
                                let savedData = $(this).closest('tr').data('pData')
                                let $tablecontainer = $(this).closest('[perfect-tempTable]');
                                let tableKey = $tablecontainer.attr('perfect-tempTable');
                                let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                                //index attribute name in table row
                                let indexname = tableKey + 'index';

                                //index number in table row
                                let rindex = $(this).closest('tr').attr(indexname);

                                $tablecontainer.attr('perfect-tempTable-action', rindex);

                                console.log('Editclick', savedData);
                                //filling data in available inputs
                                $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                                    let $thisNode = $(this);
                                    let pf_name = $thisNode.attr('name');
                                    if ($thisNode.is('select')) {

                                        $thisNode.val(savedData[pf_name]).selectpicker('refresh');

                                    }
                                    else if ($thisNode.is('input')) {
                                        let inputType = $thisNode.attr('type').toLocaleLowerCase();
                                        if (inputType == 'checkbox') {

                                            $thisNode.prop('checked', savedData[pf_name]);
                                        }

                                        else {

                                            $thisNode.val(savedData[pf_name]);
                                        }
                                        

                                    }
                                    else {
                                        $thisNode.val(savedData[pf_name]);
                                    }


                                });



                            }
                        },
                        {
                            icon: "fa fa-trash btnPerfectGridDelete",
                            action: function () {

                                let savedData = $(this).closest('tr').data('pData')
                                let $tablecontainer = $(this).closest('[perfect-tempTable]');
                                let tableKey = $tablecontainer.attr('perfect-tempTable');
                                let $thistbl = $(this).closest('table');
                                let table = $thistbl.DataTable();
                                table.destroy();
                                if ($(this).closest('tbody').find('tr').length > 1) {
                                    $(this).closest('tr').remove();
                                    pft_table_slreset($thistbl);
                                    //$thistbl.dataTable({ paging: true, searchbtn: false });
                                }
                                else {
                                    $thistbl.remove();
                                }


                                let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                                let dprdid;
                                let stkcid;
                                let dwartyp;
                                $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                                    let $thisNode = $(this);
                                    let pf_name = $thisNode.attr('name');
                                    console.log('pf_name', pf_name)
                                    if (pf_name == "WarrantyType") {
                                        dwartyp = savedData[pf_name];
                                        console.log('WarrantyTypename', pf_name)
                                    }
                                });


                                stkcid = $thisForm.find('[name="StockId"]').val();
                                console.log('dwartyp', dwartyp)
                                let dWarProductImagelst = [];
                                let subwarproduct = [];
                                let dwarproduct = [];
                                dWarProductImagelst = JSON.parse(localStorage.getItem('WarProductImage'));
                                console.log('dWarProductImagelst', dWarProductImagelst)
                                if (dWarProductImagelst != null) {
                                    dwarproduct = dWarProductImagelst.filter(obj => obj.StockId.toString() === stkcid.toString());
                                    subwarproduct = dwarproduct.filter(obj => obj.WarrantyType.toString() === dwartyp.toString());
                                    const dwindexOfObject = dwarproduct.findIndex(object => {
                                        return object.WarrantyType.toString() === dwartyp.toString();
                                    });

                                    dWarProductImagelst.splice(dwindexOfObject, subwarproduct.length);

                                    localStorage.setItem('WarProductImage', JSON.stringify(dWarProductImagelst));
                                    console.log('dWarProductImagelst1', dWarProductImagelst)
                                    $thisForm.data({ pImageselect: dWarProductImagelst });



                                }
                            }
                        },
                    ]
                },

                rowAttribute: [ 'WarrantyTaxAmount','WarrantyAmount'],
                renameHeader: { "subProName": "Sub Product", "Replcwardt": "Replace WTY Dt", "Serwardt": "Service WTY Dt", "WarrantyType_d": " Type", "WarrantyNetAmount":"NetAmount"},
                hideColumn: ['subProductID', 'prodtid', 'stkid', 'WarrantyTaxAmount', 'WarrantyAmount'],
                serialNo: true,
                isDateType: ["Replcwardt","Serwardt"],

            };

@*</script>*@
            var paytableOptionsTempOut = {
                iconButton: {
                    buttons: [

                        {
                            icon: "fa fa-pencil btnPerfectGridEdit",
                            action: function () {
                                let savedData = $(this).closest('tr').data('pData')

                                let $tablecontainer = $(this).closest('[perfect-tempTable]');
                                let tableKey = $tablecontainer.attr('perfect-tempTable');
                                let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                                //index attribute name in table row
                                let indexname = tableKey + 'index';

                                //index number in table row
                                let rindex = $(this).closest('tr').attr(indexname);

                                $tablecontainer.attr('perfect-tempTable-action', rindex);

                                console.log('Editclick', savedData);
                                //filling data in available inputs
                                $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                                    let $thisNode = $(this);
                                    let pf_name = $thisNode.attr('name');
                                    if ($thisNode.is('select')) {
                                        
                                        $thisNode.val(savedData[pf_name]).selectpicker('refresh');

                                    }
                                    else if ($thisNode.is('input')) {
                                        let inputType = $thisNode.attr('type').toLocaleLowerCase();
                                        if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                            $thisNode.prop('checked', savedData[pf_name]);
                                        }

                                        else {

                                            $thisNode.val(savedData[pf_name]);
                                        }

                                    }
                                    else {
                                        $thisNode.val(savedData[pf_name]);
                                    }


                                });



                            }
                        },
                        {
                            icon: "fa fa-trash btnPerfectGridDelete",
                            action: function () {
                                let $tablecontainer = $(this).closest('[perfect-tempTable]');
                                let $thistbl = $(this).closest('table');
                                let table = $thistbl.DataTable();
                                table.destroy();
                                if ($(this).closest('tbody').find('tr').length > 1) {
                                    $(this).closest('tr').remove();
                                    pft_table_slreset($thistbl);
                                    //$thistbl.dataTable({ paging: true, searchbtn: false });
                                }
                                else {
                                    $thistbl.remove();
                                }
                                BillAmountbind($tablecontainer);
                            }
                        },
                    ]
                },

                rowAttribute: [],
                onlyShowColumn: ['PAmount', 'Refno', 'PaymentMethod_d'],
                renameHeader: { "PAmount": "Amount1R", "Refno": "Ref No", "PaymentMethod_d": "Method", "Warranty": "Warranty Amnt"	},
                hideColumn: ['BalAmt'],

                serialNo: true,

    };
    debugger


            var saltableOptionsTempOut = {
                iconButton: {
                    buttons: [

                        {
                            icon: "fa fa-pencil btnPerfectGridEdit",
                            action: function () {
                                let savedData = $(this).closest('tr').data('pData')
                                console.log('FK_FinancePlanType>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', savedData.FK_FinancePlanType)
                                DisableProductdetails(this, savedData.EMIProduct, savedData.FK_FinancePlanType);
                               
                                if ('@ViewBag.UserMrpEdit'.toLowerCase() === "true") {
                    
                                        document.getElementById("MRPs").disabled = false;
                                    }
                                    else {
                                        document.getElementById("MRPs").disabled = true;
                                    }
                                if ('@ViewBag.UserPriceEdit'.toLowerCase() === "true") {
                                    document.getElementById("SalePrice").disabled = false;
                                }
                                else {
                                    document.getElementById("SalePrice").disabled = true;
                                }
                                //if (savedData.EMIProduct == true || savedData.EMIProduct == "true" || savedData.FK_FinancePlanType>0) {
                                //    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': "EMI Product. Not Editable" });

                                //}
                                //else {

                                    let $tablecontainer = $(this).closest('[perfect-tempTable]');
                                    let tableKey = $tablecontainer.attr('perfect-tempTable');
                                    let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                                    //index attribute name in table row
                                    let indexname = tableKey + 'index';
                                    console.log('indexname', indexname);
                                    $thisForm.find('[name=prdbtn]').attr("disabled", "disabled")
                                    //index number in table row
                                    let rindex = $(this).closest('tr').attr(indexname);
                                    console.log('rindex', rindex);
                                    $tablecontainer.attr('perfect-tempTable-action', rindex);

                                    console.log('Editclick', savedData);
                                    //filling data in available inputs
                                    $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                                        let $thisNode = $(this);
                                        let pf_name = $thisNode.attr('name');
                                        if ($thisNode.is('select')) {

                                            $thisNode.val(savedData[pf_name]).selectpicker('refresh');

                                        }
                                        else if ($thisNode.is('input')) {
                                            let inputType = $thisNode.attr('type').toLocaleLowerCase();
                                            if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                                $thisNode.prop('checked', savedData[pf_name]);
                                            }

                                            else {

                                                $thisNode.val(savedData[pf_name]);
                                            }

                                        }
                                        else {
                                            $thisNode.val(savedData[pf_name]);
                                        }
                                    });
                                    $thisForm.data({ amcdatadata: '' });
                                    fillamcdetails(this);
                                    ShowTax(this, 0);
                                    fillWarrantyDetails(this, savedData.StockId);
                                    fillSerialNumberTemp(this);
                                    fillSubproductDetailsTemp(this);
                                    //CalculateDiscamt(this);
                                    FillimageDetails(this, savedData.StockId);

                                /*}*/ disabHoldStandby();
                                getdepartmentbystockid(this);
                                GetUnit(this, savedData.UnitID)
                            }
                        },
                        {
                            icon: "fa fa-trash btnPerfectGridDelete",
                            action: function () {
                                let savedData = $(this).closest('tr').data('pData')
                                let $tablecontainer = $(this).closest('[perfect-tempTable]');
                                let $thistbl = $(this).closest('table');
                                let table = $thistbl.DataTable();
                                table.destroy();
                                if ($(this).closest('tbody').find('tr').length > 1) {
                                    $(this).closest('tr').remove();
                                    pft_table_slreset($thistbl);
                                    //$thistbl.dataTable({ paging: true, searchbtn: false });
                                }
                                else {
                                    $thistbl.remove();
                                }
                                let tableKey = $tablecontainer.attr('perfect-tempTable');
                                let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                                let stckid;
                                $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                                    let $thisNode = $(this);
                                    let pf_name = $thisNode.attr('name');
                                    if (pf_name == "StockId") {
                                        stckid = savedData[pf_name];
                                    }
                                });
                                let dwarobject = [];

                                if (warrantydetails != null) {
                                    dwarobject = warrantydetails.filter(obj => obj.stkid.toString() === stckid.toString());
                                    const dindexOfObject = warrantydetails.findIndex(object => {
                                        return object.stkid.toString() === stckid.toString();
                                    });

                                    warrantydetails.splice(dindexOfObject, dwarobject.length);
                                    $thisForm.data({ pwarranty: warrantydetails });
                                }
                                let dWarProductImagelst = [];
                                let dwarproduct = [];
                                dWarProductImagelst = JSON.parse(localStorage.getItem('WarProductImage'));

                                if (dWarProductImagelst != null) {
                                    dwarproduct = dWarProductImagelst.filter(obj => obj.StockId.toString() === stkid.toString());
                                    const dpindexOfObject = dWarProductImagelst.findIndex(object => {
                                        return object.StockId.toString() === stkid.toString();
                                    });
                                    console.log('dwarproduct', dwarproduct)
                                    dWarProductImagelst.splice(dpindexOfObject, dwarproduct.length);

                                    localStorage.setItem('WarProductImage', JSON.stringify(dWarProductImagelst));

                                    $thisForm.data({ pImageselect: dWarProductImagelst });
                                } disabHoldStandby();
                                BindBilldetails($tablecontainer)
                                DeleteSerialNumbersRow(this, savedData.StockId);
                                DeleteSubproductDetailsRow(this, savedData.StockId);
                                DisableMoreinfo(this);
                                $thisForm.find('[perfect-tempTable="Payment"]').html('');
                            }

                        },

                    ]
                },
                textButton: {
                    class:"asd",
                    buttons: [
                        {
                            displayName: "EMI Sales Order",
                            class: "fa fa-calculator",
                            action: function () {
                                let savedData = $(this).closest('tr').data('pData')
                                EMICalculate(this, savedData.FK_Master);
                                let $tablecontainer = $(this).closest('[perfect-tempTable]');
                                let tableKey = $tablecontainer.attr('perfect-tempTable');
                                let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                                //index attribute name in table row
                                let indexname = tableKey + 'index';
                                console.log('indexname', indexname);
                                //index number in table row

                                console.log('Editclick', savedData);
                                //filling data in available inputs

                            }
                        }
                    ]
                },

                rowAttribute: ['FK_Master', 'EMIProduct', 'downpay', 'AdditionalPay', 'FK_FinancePlanType'],
                renameHeader: { "MRPs": "MRP1R", "ProName": "Product", "SpdSalQuantity": "Qty1R", "Discamt": "Discount1R", "Sprice": "Amount1R", "SalePrice": "Sales Price1R", "NetAmt": "Total1R", "WarrantyTotalAmt": "Warranty1R", "AMCNetTotalAmt": "AMCNetAmount1R", "UnitID": "Unit"},
                hideColumn: ['Discp', 'ProductID', 'TaxAmount', 'StockId', 'FK_Master', 'EMIProduct', 'downpay', 'AdditionalPay', 'FK_FinancePlanType', 'Description', 'AMCMType', 'AMCMDuedate', 'AMCMRenewduedate', 'AMCTaxTotalAmt', 'AmcTotalAmount', 'AMCNoOfServices', 'AMCFK_Master', 'AMCRemarks', 'SpdSalFreeQuantity', 'CrntQnty', 'StandByStockId', 'TaxAmountVisible'],
                serialNo: true,

            };
        var SerialNumOptionsTempOut = {
            iconButton: {
                buttons: [
                    {
                        icon: "fa fa-pencil btnPerfectGridEdit",
                        action: function () {
                            let savedData = $(this).closest('tr').data('pData')

                            let $tablecontainer = $(this).closest('[perfect-tempTable]');
                            let tableKey = $tablecontainer.attr('perfect-tempTable');
                            let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                            //index attribute name in table row
                            let indexname = tableKey + 'index';

                            //index number in table row
                            let rindex = $(this).closest('tr').attr(indexname);

                            $tablecontainer.attr('perfect-tempTable-action', rindex);

                            console.log('Editclick', savedData);
                            //filling data in available inputs
                            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                                let $thisNode = $(this);
                                let pf_name = $thisNode.attr('name');
                                if ($thisNode.is('select')) {
                                    $thisNode.val(savedData[pf_name]).selectpicker('refresh');
                                }
                                else if ($thisNode.is('input')) {
                                    let inputType = $thisNode.attr('type').toLocaleLowerCase();
                                    if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                        $thisNode.prop('checked', savedData[pf_name]);
                                    }
                                    else {

                                        $thisNode.val(savedData[pf_name]);
                                    }
                                }
                                else {
                                    $thisNode.val(savedData[pf_name]);
                                }
                            });
                            EditSubProductNumbers(this);
                            fillSerialNumberTempListPop(this, savedData.SubStockId);
                          
                        }
                    },
                    {
                        icon: "fa fa-trash btnPerfectGridDelete",
                        action: function () {
                            let savedData = $(this).closest('tr').data('pData')
                            let $tablecontainer = $(this).closest('[perfect-tempTable]');
                            let $thistbl = $(this).closest('table');
                            let table = $thistbl.DataTable();
                            table.destroy();
                            if ($(this).closest('tbody').find('tr').length > 1) {
                                $(this).closest('tr').remove();
                                pft_table_slreset($thistbl);
                            }
                            else {
                                $thistbl.remove();
                            }
                            DeleteSerialNumbersTempRow(this, savedData.SubStockId)
                          
                        }
                    },
                ]
            },
            rowAttribute: [],
            onlyShowColumn: ['SubProdName', 'SubQty'],
            renameHeader: { 'SubProdName': 'Product', 'SubQty': 'Quantity' },
            hideColumn: ['Fixed', 'SubProductID', 'SubStockId', 'Master_ID', 'ProductNumbering'],
            serialNo: true,
        };
    function DisableProductdetails(ele, EMIProduct, FK_FinancePlanType) {
        if (EMIProduct == true || EMIProduct == "true" || FK_FinancePlanType > 0) {
            $('#DepartmentDiv *').prop('disabled', true);
            $('#ProductDiv *').prop('disabled', true);
            $('#SpdSalQuantity').prop('disabled', true);
            $('#FreeQuantityDiv *').prop('disabled', true);
            $('#MRPDiv *').prop('disabled', true);
            $('#SalePriceDiv *').prop('disabled', true);
            $('#TaxDiv *').prop('disabled', true);
            $('#DiscountDiv *').prop('disabled', true);
            $('#DiscriptionDiv *').prop('disabled', true);
            $('#StandbyPdtDiv *').prop('disabled', true);
            $('#StandbyQtyDiv *').prop('disabled', true);
            $('#WarrantyAMCDiv *').prop('disabled', true);
        }
        else {
            $('#DepartmentDiv *').prop('disabled', false);
            $('#ProductDiv *').prop('disabled', false);
            $('#SpdSalQuantity').prop('disabled', false);
            $('#FreeQuantityDiv *').prop('disabled', false);
            $('#MRPDiv *').prop('disabled', false);
            $('#SalePriceDiv *').prop('disabled', false);
            $('#TaxDiv *').prop('disabled', false);
            $('#DiscountDiv *').prop('disabled', false);
            $('#DiscriptionDiv *').prop('disabled', false);
            $('#StandbyPdtDiv *').prop('disabled', false);
            $('#StandbyQtyDiv *').prop('disabled', false);
            $('#WarrantyAMCDiv *').prop('disabled', false);
        }
    }
        function checkMRP(ele, tableKey, errorClass) {
            let $thisForm = $(ele).closest('[perfect-class="form"]');

            let MRP = parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="MRP"]').val() == "" ? "0" : $thisForm.find('[perfect-tempTable-' + tableKey + '="MRP"]').val());
            let SalePrice = parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="SalPrice"]').val() == "" ? "0" : $thisForm.find('[perfect-tempTable-' + tableKey + '="SalPrice"]').val());
            if (MRP < SalePrice && MRP == 0) {
                $thisForm.find('[perfect-tempTable-Purchase="MRP"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('MRP Should be greater than or equal to Sales Price');
                $('[name=MRPs]').val(parseFloat(MRP).toFixed(2));
                $('[name="Discamt"]').val(0);
                $('[name="Discp"]').val(0);
            }
            else {
                $thisForm.find('[perfect-tempTable-Purchase="MRP"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
                calcsalpttl(ele);
            }
        }
  
    function validsaledetail(ele, tableKey, errorClass, isValid) {
        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let prevData = [];

        let SelectedSlNo = (productSerialNumTemp.filter(obj => obj.FK_MasterID == $('[name="StockId"]').val() && obj.FK_Stock == $('[name="StockId"]').val())).length;
        let Qty = parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').val());

        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="ProName"]').val().length == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="ProName"]').val().length == null) {
            isValid = false;
            console.log('false');
            $thisForm.find('[perfect-tempTable-' + tableKey + '="ProName"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Product');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="ProName"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }


        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Unit"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="Unit"]').val() == "") {

            isValid = false;

            $thisForm.find('[perfect-tempTable-' + tableKey + '="Unit"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Unit');

        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="Unit"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }

        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').val() < 1) {

            isValid = false;

            $thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please enter a value greater than or equal to 1');
        }

        else if ((parseFloat(SelectedSlNo) < parseFloat(Qty) || parseFloat(SelectedSlNo) > parseFloat(Qty)) && parseFloat(SelectedSlNo) != 0) {
            isValid = false;
            $thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Serial Number Based on Quantity');
        }
        else {

            $thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }
        let MRP = parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="MRP"]').val() == "" ? "0" : $thisForm.find('[perfect-tempTable-' + tableKey + '="MRP"]').val());
        let SalePrice = parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="SalPrice"]').val() == "" ? "0" : $thisForm.find('[perfect-tempTable-' + tableKey + '="SalPrice"]').val());
        if (MRP < SalePrice) {
            $thisForm.find('[perfect-tempTable-Purchase="MRP"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('MRP Should be greater than or equal to Sales Price');
            $('[name=MRPs]').val(parseFloat(MRP).toFixed(2));
        }
        else {
            $thisForm.find('[perfect-tempTable-Purchase="MRP"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
        }

        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="SalPrice"]').val() <= 0) {

            isValid = false;

            $thisForm.find('[perfect-tempTable-' + tableKey + '="SalPrice"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Sales Price should be greater than 0');
        }
        //else {

        //    $thisForm.find('[perfect-tempTable-' + tableKey + '="SalPrice"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        //}

        else if (parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="SalPrice"]').val()) > parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="MRP"]').val())) {

            isValid = false;

            $thisForm.find('[perfect-tempTable-' + tableKey + '="SalPrice"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please enter a value less than or equal to MRP');
        }
        else {

            $thisForm.find('[perfect-tempTable-' + tableKey + '="SalPrice"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }

        let CntStk = parseFloat($('[name="CrntQnty"]').val()) || 0;

        let StandByQuantity1 = $thisForm.find('[perfect-tempTable-' + tableKey + '="StandByQuantity"]').val();
        

        if (ChekStandBy1 == 'True') {
            if (StandByQuantity1 > 0) {


                if ($thisForm.find('[perfect-tempTable-' + tableKey + '="StandByProduct"]').val() <= 0) {
                    isValid = false;
                    $thisForm.find('[perfect-tempTable-' + tableKey + '="StandByProduct"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Stand By Product');

                } else {
                    $thisForm.find('[perfect-tempTable-' + tableKey + '="StandByProduct"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
                }


            }

            debugger;
            let stQty = parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="StandByQuantity"]').val()) || 0;
            let stCrntQntys = parseFloat($thisForm.find('[name="CrntQntys"]').val());
            if (stCrntQntys < stQty) {

                isValid = false;
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'StandBy Stock Should be greater or equal to StandBy Quantity.' })
            }
        }








        return isValid;



    }

            function validwartdetail(ele, tableKey, errorClass, isValid) {
                let $thisForm = $(ele).closest('[perfect-class="form"]');
                if ($thisForm.find('[perfect-tempTable-' + tableKey + '="WarrantyType"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="WarrantyType"]').val() == null) {

                    isValid = false;
                    console.log('false');
                    $thisForm.find('[perfect-tempTable-' + tableKey + '="WarrantyType"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Type');
                }
                else {
                    $thisForm.find('[perfect-tempTable-' + tableKey + '="WarrantyType"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
                }

                if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Replcwardt"]').val() == null || $thisForm.find('[perfect-tempTable-' + tableKey + '="Replcwardt"]').val() == '') {

                    isValid = false;

                    $thisForm.find('[perfect-tempTable-' + tableKey + '="Replcwardt"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Replace WTY Date');
                }
                else {

                    let repldt = $thisForm.find('[name=Replcwardt]').val();
                    repldt = new Date(repldt);
                    repldt.setHours(0, 0, 0, 0)

                    let today = new Date();
                    today.setHours(0, 0, 0, 0)

                    console.log(today)
                    console.log(repldt)
                    if (today > repldt) {
                        isValid = false;
                        $thisForm.find('[perfect-tempTable-' + tableKey + '="Replcwardt"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Replace WTY date should be greater than or equal to todays date');

                    }
                    else {
                        $thisForm.find('[perfect-tempTable-' + tableKey + '="Replcwardt"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
                    }


                }
                if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Serwardt"]').val() == null || $thisForm.find('[perfect-tempTable-' + tableKey + '="Serwardt"]').val() == '') {

                    isValid = false;

                    $thisForm.find('[perfect-tempTable-' + tableKey + '="Serwardt"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Service WTY Date');
                }
                else {
                    let servcdt = $thisForm.find('[name=Serwardt]').val();
                    servcdt = new Date(servcdt);
                    servcdt.setHours(0, 0, 0, 0)

                    let today = new Date();
                    today.setHours(0, 0, 0, 0)

                    if (today> servcdt) {
                        isValid = false;
                        $thisForm.find('[perfect-tempTable-' + tableKey + '="Serwardt"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Service WTY date should be greater than or equal to todays date');

                    }
                    else {
                        $thisForm.find('[perfect-tempTable-' + tableKey + '="Serwardt"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
                    }


                }

                return isValid;

            }

            function validpaymntdetail(ele, tableKey, errorClass, isValid) {
                let $thisForm = $(ele).closest('[perfect-class="form"]');
                if ($thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').val() == null) {

                    isValid = false;
                    console.log('false', $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').val());
                    $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Payment Method');
                }
                else {
                    $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
                }

                if ($thisForm.find('[perfect-tempTable-' + tableKey + '="PAmount"]').val() < 1) {
                    console.log('false', $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').val());
                    isValid = false;

                    $thisForm.find('[perfect-tempTable-' + tableKey + '="PAmount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please enter a value greater than or equal to 1');
                }
                else {

                    $thisForm.find('[perfect-tempTable-' + tableKey + '="PAmount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
                }


                return isValid;

            }
        function validSerialNumberdetails(ele, tableKey, errorClass, isValid) {
            debugger
            let $thisForm = $(ele).closest('[perfect-class="form"]');

            let CurrentStock = parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="CurrentStock"]').val()) == "" ? 0 : parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="CurrentStock"]').val());
            let SubQty = parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="SubQty"]').val()) == "" ? 0 : parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="SubQty"]').val());
            let ProductNumbering = parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="ProductNumbering"]').val()) == "" ? 0 : parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="ProductNumbering"]').val());
            let SubProductSerial = [];

            let StockId = $('[name="StockId"]').val();
            let SubStockId = $thisForm.find('[perfect-tempTable-' + tableKey + '="SubStockId"]').val();
            SubProductSerial = (productSerialNumTempListPop.filter(obj => obj.FK_MasterID.toString() == StockId.toString() && obj.FK_Stock.toString() == SubStockId.toString())).length;

            if ($thisForm.find('[perfect-tempTable-' + tableKey + '="SubProductID"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="SubProductID"]').val() == null) {
                isValid = false;
                $thisForm.find('[perfect-tempTable-' + tableKey + '="SubProductID"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Sub Product');
            }
            else {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="SubProductID"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }
            if (parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="SubQty"]').val()) == null || $thisForm.find('[perfect-tempTable-' + tableKey + '="SubQty"]').val() == "") {
                isValid = false;
                $thisForm.find('[perfect-tempTable-' + tableKey + '="SubQty"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Quantity');
            }
            else if (parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="SubQty"]').val()) == 0) {
                isValid = false;
                $thisForm.find('[perfect-tempTable-' + tableKey + '="SubQty"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Quantity Should be Greater than 0');
            }
            else if ((parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="SubQty"]').val())) > (parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="CurrentStock"]').val()))) {
                isValid = false;
                $thisForm.find('[perfect-tempTable-' + tableKey + '="SubQty"]').closest('[perfect-class="formGroup"]').find(errorClass).text(`Quantity Should be Should be less than or equal to Current Quantity (${Number(CurrentStock).toFixed(3)})`);
            }
            else if (((parseFloat(SubProductSerial)) < (parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="SubQty"]').val()))) && ProductNumbering > 0 && SubQty > 0) {
                isValid = false;
                if (SubQty > 1) {
                    $thisForm.find('[perfect-tempTable-' + tableKey + '="SubQty"]').closest('[perfect-class="formGroup"]').find(errorClass).text(`Select ${SubQty} Serial Numbers based on the given Quantity.`);
                }
                else {
                    $thisForm.find('[perfect-tempTable-' + tableKey + '="SubQty"]').closest('[perfect-class="formGroup"]').find(errorClass).text(`Select ${SubQty} Serial Number based on the given Quantity.`);
                }

            }
            else if (((parseFloat(SubProductSerial)) > (parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="SubQty"]').val()))) && ProductNumbering > 0 && SubQty > 0) {
                isValid = false;
                $thisForm.find('[perfect-tempTable-' + tableKey + '="SubQty"]').closest('[perfect-class="formGroup"]').find(errorClass).text(`Limit Serial Number to ${SubQty} based on the given Quantity.`);
            }
            else {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="SubQty"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }

            return isValid;
        }
            function fillTableSales(ele, tkey, data, tableOptionsTempOut) {

                let $thisForm = $(ele).closest('[perfect-class="form"]');
                let tableOptionsTempfill = tableOptionsTempOut;
                let insertData = []
                let tableKey = tkey;
                let indexname = tkey + 'index';
                tableOptionsTempfill.rowAttribute.push(indexname);
                tableOptionsTempfill.hideColumn.push(indexname);
                let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');
                $.each(data, function (keyOne, valOne) {

                    let pData = {};

                    pData[indexname] = keyOne + 1;
                    $tblcontainer.attr('perfect-tempTable-lastindex', pData[indexname])
                    //---

                    $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                        let $this = $(this);
                        let headerName = $this.attr('perfect-tempTable-' + tableKey);
                        let nameAttr = $this.attr('name');
                        console.log('nameAttr', nameAttr)
                        console.log('tfhyrtname', headerName)
                        if (typeof valOne[nameAttr] !== undefined) {

                            if ($this.is('select')) {
                                tableOptionsTempfill.renameHeader[nameAttr + '_d'] = headerName;
                                tableOptionsTempfill.hideColumn.push(nameAttr);
                                //displat text of select
                              
                               // alert($this.find('[value="' + valOne[nameAttr] + '"]').text());
                                pData[nameAttr + '_d'] = $this.find('[value="' + valOne[nameAttr] + '"]').text();
                                pData[nameAttr] = valOne[nameAttr];
                                if (tableKey == 'Payment' && headerName == 'PaymentMethod') {

                                }
                               // alert(valOne[nameAttr]);
                              //  console.log('select', $this.find('options[value="' + valOne[nameAttr] + '"]').text());

                                //pData[nameAttr + '_d'] = $this.find('[value="' + valOne[nameAttr] + '"]').text();
                                //pData[nameAttr] = valOne[nameAttr].toString();
                                //if ($this.find('[value="' + valOne[nameAttr] + '"]').text() == "Please select") {
                                //    pData[nameAttr + '_d'] = "";
                                //}

                                
                            }
                            else if ($this.is('input')) {

                                if (tableKey == 'Purchase') {
                                    if (ChekStandBy1 == "False") {


                                        if (nameAttr == "StandByQuantity") {
                                            tableOptionsTempfill.hideColumn.push(nameAttr);
                                        }
                                        else if (nameAttr == "StandByProdName") {
                                            tableOptionsTempfill.hideColumn.push(nameAttr);
                                        }
                                        else if (nameAttr == "StandByProduct") {
                                            tableOptionsTempfill.hideColumn.push(nameAttr);
                                        }

                                    }
                                }

                                let inputType = $this.attr('type').toLocaleLowerCase();
                                console.log(inputType)



                                 if (inputType == 'date') {

                                    if (valOne[nameAttr] == null) {
                                        pData[nameAttr] = valOne[nameAttr];
                                    }
                                    else {
                                        pData[nameAttr] = moment(valOne[nameAttr]).format('YYYY-MM-DD');
                                    }


                                }
                                else {
                                    pData[nameAttr] = valOne[nameAttr];


                                }
                            }
                            else {
                                pData[nameAttr] = valOne[nameAttr];


                            }
                        }



                    });

                    insertData.push(pData);


                    //----

                });
                $tblcontainer.empty();
                $tblcontainer.append(pft_table_createtable(insertData, tableOptionsTempfill));
                // $tblcontainer.find('table').dataTable({ paging: true });
                checkemi(this);
                getdepartmentbystockid(this);
            }
            function productclear1(ele, tablekey) {

                let  $thisform = $(ele).closest('[perfect-class="form"]');
                $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
                $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="select"]').val('').selectpicker('refresh');
                $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
                $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="date"]').val('');
                $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="hidden"]').val('');

                let $tblcontainer = $thisform.find('[perfect-tempTable="' + tablekey + '"]');
                $tblcontainer.attr('perfect-tempTable-action', 0);

                if (tablekey = "Purchase") {
                    $thisform.find('[name=prdbtn]').removeAttr("disabled", "disabled")
                    getdepartmentbystockid(this);
                }
                else if (tablekey = "Warranty") {
                    //warrantydetails = [];
                }
                else if (tablekey = "Payment") {

                }
             
            }
    function createbuybacktable(ele, tkey, uniq = []) {
        debugger
        //var quantity = parseFloat($('[name="Quantity"]').val().trim() == "" ? "0" : $('[name="Quantity"]').val().trim());
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let tableKey = tkey;
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');
        let insertData = {};
        let tableOptionsTemp = restableOptionsTempOut;
        let unique = (uniq) ? uniq : [];
        let isValid = true;
        let errorClass = '.temptableError';
        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="ProdName"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="ProdName"]').val() == "") {
            isValid = false;

            $thisForm.find('[perfect-tempTable-' + tableKey + '="ProdName"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Product');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="ProdName"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }
        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').val() == "") {
            isValid = false;

            $thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter Quantity');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="Quantity"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }
        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Rate"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="Rate"]').val() == "") {
            isValid = false;

            $thisForm.find('[perfect-tempTable-' + tableKey + '="Rate"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter Rate');
        }
        var rate = parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="Rate"]').val()) || 0;
        var billtotal = parseFloat($thisForm.find('[name="SalNetAmount"]').val()) || 0;
        if (rate >= billtotal) {
            isValid = false;
            $thisForm.find('[perfect-tempTable-' + tableKey + '="Rate"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Buy Back Amount must be less than Net Amount');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="Rate"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }
        if (isValid) {
            let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
            let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
            let indexname = tkey + 'index';
            tableOptionsTemp.rowAttribute.push(indexname);
            tableOptionsTemp.hideColumn.push(indexname);
            let updateCond = '';
            let isNew = true;
            if (thisactionIndex > 0) {
                insertData[indexname] = thisactionIndex;
                updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
                isNew = false;
            }
            else {
                insertData[indexname] = lastIndex + 1;
                $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
                isNew = true;
            }
            if (unique.length > 0) {
                let prevData = [];
                $tblcontainer.find('table > tbody').find('tr').each(function () {
                    if (isNew) {
                        prevData.push($(this).data('pData'));
                    }
                    else {
                        if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                            prevData.push($(this).data('pData'));
                        }
                    }
                })



                //unique.forEach(function (key, i) {

                //    let $thisEle = $thisForm.find('[perfect-tempTable-' + tableKey + '="' + key + '"]');
                //    let headerEleName = $thisForm.find('[name="ProductName"]').text();
                //    let atname = $thisEle.attr('name');
                //    let cvalue;
                //    if ($thisEle.length != 0) {
                //        console.log('len', $thisEle)
                //        let $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
                //        let errmessage = headerEleName + " Already exits"

                //        //getting current value in cval
                //        if ($thisEle.is('select')) {
                //            cvalue = $thisEle.val();
                //        }
                //        else if ($thisEle.is('input')) {

                //            let inputEleType = $thisEle.attr('type').toLocaleLowerCase();

                //            if (inputEleType == 'checkbox') { cvalue = $thisEle.is(':checked'); }
                //            else if (inputEleType == 'hidden') { cvalue = $thisEle.val(); }
                //            else { cvalue = $thisEle.val(); }
                //        }
                //        else { cvalue = $thisEle.val(); }
                //        //searching in previous data
                //        if (prevData.find(a => a[atname] == cvalue)) {
                //            $errorElement.text(errmessage);
                //            isValid = false;
                //        }
                //    }
                //});
            }

            if (isValid) {
                $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                    let $this = $(this);
                    let headerName = $this.attr('perfect-tempTable-' + tableKey);
                    let nameAttr = $this.attr('name');

                    if ($this.is('select')) {
                        tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                        tableOptionsTemp.hideColumn.push(nameAttr)
                        if ($this.val() != null) {
                            let selectText = ($this.val().length == 0) ? '' : $this.children(":selected").text();
                            insertData[nameAttr + '_d'] = selectText;
                        }
                        else {
                            let selectText = ($this.val() == null) ? '' : $this.children(":selected").text();
                            insertData[nameAttr + '_d'] = selectText;
                        }
                        insertData[nameAttr] = $this.val();
                        $this.val('').selectpicker('refresh');
                    }
                    else if ($this.is('input')) {
                        let inputType = $this.attr('type').toLocaleLowerCase();
                        if (inputType == 'checkbox') {
                            insertData[nameAttr] = $this.is(':checked');
                            tableOptionsTemp.isCheckType.push(nameAttr)
                            $this.prop('checked', false);
                        }
                        else if (inputType == 'hidden') {
                            tableOptionsTemp.hideColumn.push(nameAttr)
                            insertData[nameAttr] = $this.val();
                            $this.val('');
                        }

                        else if (inputType == 'date') {
                            insertData[nameAttr] = $this.val();
                            $this.val('');
                        }
                        else {
                            if (nameAttr == "Quantity") {
                                insertData[nameAttr] = $this.val().trim() == "" ? "0" : $this.val();
                            } else {
                                insertData[nameAttr] = $this.val();
                            }
                            $this.val('');
                        }
                    }
                    else {
                        insertData[nameAttr] = $this.val();
                        $this.val('');
                    }
                });
                console.log('check 4.2');
                if (isNew) {
                    console.log('check 4.2.1');
                    if ($tblcontainer.find('table').length == 0) {
                        console.log('check 4.2.3');
                        $tblcontainer.append(pft_table_createtable([insertData], tableOptionsTemp));
                    }
                    else {
                        console.log('check 4.2.1');
                        let table = $tblcontainer.find('table').DataTable()
                        table.destroy()
                        pft_table_addTableRow($tblcontainer.find('table'), insertData, tableOptionsTemp);
                    }
                    console.log('check 4.2.1');
                }
                else {
                    console.log('check 4.3');
                    let table = $tblcontainer.find('table').DataTable()
                    table.destroy()
                    console.log('check 4.4');
                    console.log('table', $tblcontainer.find('table'))
                    console.log('check 4.5');
                    pft_table_replaceTableRow($tblcontainer.find('table'), updateCond, insertData, tableOptionsTemp);
                }
                console.log(insertData);
                $tblcontainer.attr('perfect-tempTable-action', 0);
            }
            console.log('check 5');
        }
        calculateAndDisplaySum(ele);
        
      
    }
    var restableOptionsTempOut = {
        iconButton: {
            buttons: [
                {
                    icon: "fa fa-pencil btnPerfectGridEdit",
                    action: function () {
                        if (SaleEdit == 0) {
                            let savedData = $(this).closest('tr').data('pData');
                            let $tablecontainer = $(this).closest('[perfect-tempTable]');
                            let tableKey = $tablecontainer.attr('perfect-tempTable');
                            let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                            let indexname = tableKey + 'index';
                            let rindex = $(this).closest('tr').attr(indexname);
                            $tablecontainer.attr('perfect-tempTable-action', rindex);
                            console.log('Editclick', savedData);
                            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                                let $thisNode = $(this);
                                let pf_name = $thisNode.attr('name');
                                if ($thisNode.is('select')) {
                                    $thisNode.val(savedData[pf_name]).selectpicker('refresh');
                                }
                                else if ($thisNode.is('input')) {

                                    if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                        $thisNode.prop('checked', savedData[pf_name]);
                                    }
                                    else {
                                        $thisNode.val(savedData[pf_name]);
                                    }
                                }
                                else {
                                    $thisNode.val(savedData[pf_name]);
                                }
                            });
                        }
                        else {
                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Buyback Edit not Possible.`});
                        }
                    }

                },
                {
                    icon: "fa fa-trash btnPerfectGridDelete",
                    action: function () {
                        debugger
                        if (SaleEdit == 0) {
                            let $tablecontainer = $(this).closest('[perfect-tempTable]');
                            let $thistbl = $(this).closest('table');
                            let $thisForm = $(this).closest('[perfect-class="form"]');
                            ///$thistbl.destroy();
                            let table = $thistbl.DataTable();
                            table.destroy();

                            if ($(this).closest('tbody').find('tr').length > 1) {
                                $(this).closest('tr').remove();
                                pft_table_slreset($thistbl);
                            }
                            else {
                                $thistbl.remove();
                                $thisForm.find('[name="buybacksumamt"]').val('');
                            }
                            calculateAndDisplaySum();
                            roundof($tablecontainer);

                            $("#btnresetRes").click();

                        }
                        else {
                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Buyback Delete not Possible.` });
                        }
                    }
                }

            ]
        },
        onlyShowColumn: ["ProdName", "Quantity", "Rate","SerialNo"],
        hideColumn: ['FK_Product'],
        serialNo: true,
        renameHeader: { "ProdName": "Item", "Quantity": "Quantity", "Rate": "Rate", "SerialNo": "Serial No" },
        rowAttribute: [],
        isCheckType: [],
        Scroll: true
    };


            function createtable(ele, tkey, uniq = [], tableOptionsTempOut) {
                debugger;
                let $thisForm = $(ele).closest('[perfect-class="form"]');
                console.log($thisForm, '$thisForm');
                let PAmount = $thisForm.find('[name=BalAmt]').text();
                let SalNetAmount = $thisForm.find('[name="SalNetAmount"]').val();
                var SumAmnt = 0;
                
                let tableKey = tkey;
                let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');

                let insertData = {};
                let tableOptionsTemp = tableOptionsTempOut;

                let unique = (uniq) ? uniq : [];

                let isValid = true;
                let errorClass = '.temptableError';
                let errorClass1 = '.temptableError1';

                //make index
                let StockId = $('[name="StockId"]').val();
               
                let SubStockId = $('[name="SubStockId"]').val();
                let UnitID = $('[name="UnitID"]').val();
                let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
                let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
                let indexname = tkey + 'index';
                tableOptionsTemp.rowAttribute.push(indexname);
                tableOptionsTemp.hideColumn.push(indexname);

                let updateCond = '';
                let isNew = true;

                if (thisactionIndex > 0) {
                    //means update
                    insertData[indexname] = thisactionIndex;
                    updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
                    isNew = false;
                }
                else {
                    //insert
                    insertData[indexname] = lastIndex + 1;
                    $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
                    isNew = true;
                }
                //
                if (tableKey == 'Warranty') {

                    isValid = validwartdetail(ele, tableKey, errorClass, isValid);
                }
                else if (tableKey == 'Payment') {
                    isValid = validpaymntdetail(ele, tableKey, errorClass, isValid);
                }
                else if (tableKey == 'Purchase') {
                    isValid = validsaledetail(ele, tableKey, errorClass, isValid);

                    //let returndetails = fn_setSubProductDetails(this);
                    //let product = $('[name="ProName"]').val();
                    //if (((parseFloat(returndetails[5]) < parseFloat($('[name="SpdSalQuantity"]').val())) || (parseFloat(returndetails[5]) > parseFloat($('[name="SpdSalQuantity"]').val()))) && parseFloat(returndetails[5]) != 0) {
                    //    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Please Select Serial Number Based on Quantity For Product - ${product}` });
                    //    isValid = false;
                    //}
                }
                else if (tableKey == 'SerialNumber') {
                    let returndetails = fn_setSubProductDetails(this);
                    isValid = returndetails[1];
                    if (returndetails[1] == false) {
                        NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': `Please Select Serial Number For Product - ${returndetails[4]}` });
                    }
                    //fn_SubProductDetailsPopupHide();
                    isValid = validSerialNumberdetails(ele, tableKey, errorClass1, isValid);
                }

                if (unique.length > 0) {
                    //getting previous data
                    let prevData = [];
                    $tblcontainer.find('table > tbody').find('tr').each(function () {
                        if (isNew) {
                            
                            prevData.push($(this).data('pData'));
                            console.log(prevData.find(a => a['StockId'], ''));
                        }
                        else {
                            
                            if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                               
                                prevData.push($(this).data('pData'));
                            }

                        }

                    })
                    console.log(prevData, 'prevData');
                    //if (prevData.find(a => a['StockId'] == $('[name=StockId]').val() && a['UnitID'] == $('[name=UnitID]').val())) {
                    //    //alert('dfgdg');
                    //   // alert(a['UnitID'])
                    //   // alert($('[name=UnitID]').val());
                    //    $thisForm.find('[perfect-tempTable-' + tableKey + '="ProName"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Product');
                    //    isValid = false;
                    //}
                    unique.forEach(function (key, i) {
                        debugger;
                        let $thisEle = $thisForm.find('[perfect-tempTable-' + tableKey + '="' + key + '"]');
                        // let headerEleName = $thisForm.find('[name="lblProName"]').text();
                        console.log($thisEle, '$thisEle');
                        let atname = $thisEle.attr('name');
                        let atname2 = $thisEle.children(":selected").attr('pmmode');
                       // console.log(atname, 'atname2');
                        //console.log('atname2', atname2);
                       // alert(atname2)
                        
                        let cvalue;
                        let Kvalue;
                        console.log(key, 'key');
                        if ($thisEle.length != 0) {

                            let $errorElement;
                            //*existency customized only for sales page
                            
                            
                            $errorElement=$thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
                            let errmessage = "";
                            if (key == "StockId" && prevData.find(a => a['StockId'] == $('[name=StockId]').val() && a['UnitID'] == $('[name=UnitID]').val()) ) {
                               // NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Already Exists' });
                              //  isValid = false;
                                errmessage = "Product Already exists"
                                $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
                                
                            }
                            //else if (key == "UnitID") {
                            //    errmessage = "Product Already exists"
                            //    $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
                            //} ,
                            else if (key == "WarrantyType") {
                                errmessage = "Warranty Type Already exists"
                                $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
                            }
                            else if (key == "SubStockId") {
                                errmessage = "Sub Product Already exists"
                                $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass1);
                            }
                             else {
                                
                                errmessage = key + " Already exists"
                            }
                            //*existency customized only for sales page

                            //getting current value in cval
                            if ($thisEle.is('select')) {
                                cvalue = $thisEle.val();
                               
                            }
                            else if ($thisEle.is('input')) {

                                let inputEleType = $thisEle.attr('type').toLocaleLowerCase();
                                
                                if (inputEleType == 'checkbox') { cvalue = $thisEle.is(':checked'); }
                                else if (inputEleType == 'hidden') {
                                    cvalue = $thisEle.val(); console.log('cvalue ->', cvalue);


                                }
                                else
                                {
                                    cvalue = $thisEle.val();
                                }
                              
                                
                            }
                            else { cvalue = $thisEle.val(); }



                            //searching in previous data
                            if (tableKey == "Payment") {
                                let PMMode = $thisForm.find('[name=PaymentMethod]').children(":selected").attr('PMMode');
                                //let atname2 = $thisEle.children(":selected").attr('pmmode');
                               // alert(PMMode);
                               // alert(PAmount);
                              //  alert(prevData.find(a => a['PAmount']));
                                let atname2 = $thisEle.children(":selected").attr('pmmode');
                                console.log('Search =>' + cvalue + '| attr :' + atname2)
                               
                                
                                let PMnt = $thisForm.find('[perfect-tempTable-' + tableKey + '="PAmount"]').val();
                                SumAmnt = (parseFloat(SumAmnt) + parseFloat(PMnt));
                               
                                if (SalNetAmount!=SumAmnt&& PMMode==8) {

                                    errmessage = "Add  another payment method"
                                    $errorElement.text(errmessage);
                                    isValid = false;
                                }
                            }

                            if (tableKey == "Purchase") {
                                if (prevData.find(a => a[atname] == cvalue && prevData.find(a => a['StockId'] == $('[name=StockId]').val() && a['UnitID'] == $('[name=UnitID]').val()))) {

                                    // console.log('Search =>' + cvalue + '| attr :' + atname)
                                    $errorElement.text(errmessage);
                                    isValid = false;
                                }
                            }
                            else {
                                if (prevData.find(a => a[atname] == cvalue)) {
                                    
                                    console.log('Search =>' + cvalue + '| attr :' + atname)
                                    $errorElement.text(errmessage);
                                    
                                    isValid = false;
                                }

                             }
                            
                        }
                    });

                }



                if (isValid) {

                    if (tableKey == 'Purchase') {
                        Warrantyadd(this);
                        BindWarrantyAmount(ele)
                        $thisForm.find('[perfect-tempTable="Payment"]').html('');
                    }


                    // this section make table column data
                    $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                        let $this = $(this);
                        let headerName = $this.attr('perfect-tempTable-' + tableKey);
                        //if (headerName.trim() == "UnitID") {
                        //    headerName = "Unit";
                        //}
                        let nameAttr = $this.attr('name');

                         var ChekStandBy;
                        ChekStandBy = '@ViewBag.ChekStandBy';
                        if ($this.is('select')) {

                            tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;


                            tableOptionsTemp.hideColumn.push(nameAttr)


                            //displat text of select
                            if ($this.val() != null) {
                                let selectText = ($this.val().length == 0) ? '' : $this.children(":selected").text();
                                insertData[nameAttr + '_d'] = selectText;
                            }
                            else {
                                let selectText = ($this.val() == null) ? '' : $this.children(":selected").text();
                                insertData[nameAttr + '_d'] = selectText;
                            }
                            //tableOptionsTemp.onlyShowColumn.push(nameAttr + '_d')
                            insertData[nameAttr] = $this.val();
                            //insertData[nameAttr] = $this.val();

                            $this.val('').selectpicker('refresh');


                        }
                        else if ($this.is('input')) {


                            insertData[nameAttr] = $this.val();

                            if (tableKey == 'Purchase') {
                                if (ChekStandBy1 == "False") {


                                    if (nameAttr == "StandByQuantity") {
                                        tableOptionsTemp.hideColumn.push(nameAttr);
                                    }
                                    else if (nameAttr == "StandByProdName") {
                                        tableOptionsTemp.hideColumn.push(nameAttr);
                                    }
                                    else if (nameAttr == "StandByProduct") {
                                        tableOptionsTemp.hideColumn.push(nameAttr);
                                    }

                                }
                            }


                            if (nameAttr == "prodtid") { }
                            else if (nameAttr == "stkid") { }
                            else {
                                $this.val('');
                            }
                        }
                        else {
                            insertData[nameAttr] = $this.val();

                            $this.val('');
                        }

                    });

                    if (isNew) {

                        //this section nake table.table row
                        if ($tblcontainer.find('table').length == 0) {
                            debugger

                            $tblcontainer.append(pft_table_createtable([insertData], tableOptionsTemp));

                            //  $tblcontainer.find('table').dataTable({ paging: false, ordering: false });
                            disabHoldStandby();
                        }
                        else {

                            let table = $tblcontainer.find('table').DataTable()
                            table.destroy()
                            pft_table_addTableRow($tblcontainer.find('table'), insertData, tableOptionsTemp);
                            disabHoldStandby();

                        }

                    }
                    else {debugger

                        let table = $tblcontainer.find('table').DataTable()
                        table.destroy()

                        pft_table_replaceTableRow($tblcontainer.find('table'), updateCond, insertData, tableOptionsTemp);
                        disabHoldStandby();

                    }



                    // resetting the edit value
                    $tblcontainer.attr('perfect-tempTable-action', 0);

                    if (tableKey == 'Warranty') {

                        BindWarrantyAmount(ele);
                    }
                    else if (tableKey == 'Payment') {
                        BillAmountbind(ele);
                    }
                    else if (tableKey == 'Purchase') {
                        $thisForm.find('[name=prdbtn]').removeAttr("disabled", "disabled")

                        $thisForm.data({ pwarranty: warrantydetails });

                        $thisForm.data({ addpImageselect: $thisForm.data('pImageselect') });

                        BindBilldetails(ele);
                        checkemi(this);
                        disabHoldStandby();
                        if (productSerialNumTemp != null) {
                            console.log('productSerialNum ADDED OLD>', productSerialNum);

                            productSerialNum = productSerialNum.filter(obj => obj.FK_MasterID.toString() !== StockId.toString());
                            productSerialNumTemp = productSerialNumTemp.filter(obj => obj.FK_MasterID.toString() == StockId.toString());

                            //console.log('productSerialNum ADDED NEW>', productSerialNum);

                            productSerialNum = productSerialNum.concat(productSerialNumTemp);

                            console.log('productSerialNum ADDED Now>', productSerialNum);

                            productSerialNumTemp = [];
                        }
                        if (SubproductDetailsTemp != null) {

                            debugger
                            console.log('ubproductDetails ADDED OLD>', SubproductDetailsSave);
                            SubproductDetailsSave = SubproductDetailsSave.filter(obj => obj.Master_ID.toString() !== StockId.toString());
                            SubproductDetailsTemp = SubproductDetailsTemp.filter(obj => obj.Master_ID.toString() == StockId.toString());

                            console.log('ubproductDetails ADDED NEW>', SubproductDetailsSave);
                            SubproductDetailsSave = SubproductDetailsSave.concat(SubproductDetailsTemp);
                            console.log('ubproductDetails ADDED Now>', SubproductDetailsSave);

                            SubproductDetailsTemp = [];
                        }

                        if (PssfupDocsList != null) {
                            console.log('UPLOADING DOCUMENTDETAILS......>', PssfupDocsList);
                            if (SalesDocumentUpload != null) {
                                if (SalesDocumentUpload.length > 0) {
                                    SalesDocumentUpload = SalesDocumentUpload.filter(obj => obj.stockid.toString() !== StockId.toString());
                                }
                            }

                            SalesDocumentUpload = SalesDocumentUpload.concat(PssfupDocsList);

                            console.log('UPLOADED DOCUMENT DETAILS concat......>', SalesDocumentUpload);

                            SalesDocumentUpload = SalesDocumentUpload.map(obj => ({ "stockid": StockId , ...obj,}));

                            console.log('UPLOADED DOCUMENT DETAILS......>', SalesDocumentUpload );
                            PssfupDocsList = [];

                        }
                        $thisForm.find('[name=TaxAmount]').val('');
                        $thisForm.find('[name=TaxAmountVisible]').val('');
                        $thisForm.find('[perfect-tempTable-' + tableKey + '="TaxAmount"]').val('')
                        $thisForm.find('[perfect-tempTable-' + tableKey + '="TaxAmountVisible"]').val('')
                        $thisForm.find('[name="FK_Department"]').val(0).selectpicker('refresh');
                        //DisableProductdetails(this, false, 0);
                    }
                    else if (tableKey == 'SerialNumber') {
                        debugger
                        $('[name="Master_ID"]').val($('[name="StockId"]').val());
                        if (productSerialNumTemp != null) {
                            console.log('productSerialNumTemp ADDED OLD>', productSerialNumTemp);
                            console.log('productSerialNumTempListPop ADDED OLD>', productSerialNumTempListPop);

                            productSerialNumTemp = productSerialNumTemp.filter(obj => obj.FK_Stock.toString() !== SubStockId.toString());
                            productSerialNumTempListPop = productSerialNumTempListPop.filter(obj => obj.FK_Stock.toString() == SubStockId.toString());

                            productSerialNumTemp = productSerialNumTemp.concat(productSerialNumTempListPop);

                            console.log('productSerialNum ADDED Now>', productSerialNumTemp);


                            productSerialNumTempListPop = [];
                            console.log('productSerialNumTempListPop ADDED Now>', productSerialNumTempListPop);
                        }
                    }
                    $thisForm.find('[name="TaxAmount"]').val('');
                    $thisForm.find('[name="TaxAmountVisible"]').val('');
                    $thisForm.find('[perfect-tempTable-' + tableKey + '="TaxAmount"]').val('')
                    $thisForm.find('[perfect-tempTable-' + tableKey + '="TaxAmountVisible"]').val('')
                }
                var FK_Stock = $thisForm.find('[name="StockId"]').val() == "" ? "0" : $thisForm.find('[name="StockId"]').val();
                if (FK_Stock == 0) {
                    //department comented for indora//$thisForm.find('[name="FK_Department"]').val(@ViewBag.FK_Department).selectpicker('refresh');
                }
                else {
                    getdepartmentbystockid(this);
                }
                

            }





   function ShowTax(ele,mod) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let taxinfo = [];
        if ($thisForm.data('pDataTax')) {
            if ($thisForm.data('pDataTax').length > 0) {
                taxinfo = $thisForm.data('pDataTax');
            }
            else {
                taxinfo.push($thisForm.data('pDataTax'));
            }

            let sum = 0;
            console.log('has tax info', taxinfo)
            var CheckListHTML = '';
            $.each(taxinfo, function (i, value) {
                sum = sum + parseFloat(value.TaxAmount);
                CheckListHTML += "<tr>";
                CheckListHTML += "<td>" + value.SlNo + "</td>";
                CheckListHTML += "<td Class='jq_ProductID_td' Style='Display:none'>" + value.ProductID + "</td>";
                CheckListHTML += "<td class='jq_taxType_td' Style='Display:none'>" + value.FK_TaxType + "</td>";
                CheckListHTML += "<td class='jq_taxTypeName_td'>" + value.TaxtyName + "</td>";
                CheckListHTML += "<td class='jq_taxPer_td text-center'>" + value.TaxPercentage + "</td>";
                CheckListHTML += "<td class='jq_taxamount_td text-right' >  " + value.Amount.toFixed(4) + "</td>";
                CheckListHTML += "</tr>";
            })

            $("#formGroupModalTaxbody").html(CheckListHTML)
            if (mod == 1) {
                $('#formGroupModalTax').modal('show');
            }
            else {
                $('#formGroupModalTax').modal('hide');
            }
            BindTaxAmount(ele)
        }
        else {
            BindTaxDetails("1", 'formGroupModalTax', ele,mod)
        }




            }

      function BindTaxDetails(Mode, ModalID, ele,mod) {
          let $thisForm = $(ele).closest('[perfect-class="form"]');
          debugger
          let amount = ($thisForm.find('[name=SalePrice]').val() * $thisForm.find('[name=SpdSalQuantity]').val());
          let gstn = $('[name="GSTINNo"]').val();
          let branchstate = '@ViewBag.FK_State';
          let state = $('[name="State"]').val();
          let btob='@ViewBag.BtoB';
          let ID_Branch = $('[name="ID_Branch"]').val();
          let FK_Customer = $('[name="FK_Customer"]').val();
          let ID_Customer = $('[name="ID_Customer"]').val();
          let Taxinterstate = false;
          if (/*gstn != "" && */(branchstate != state) && (ID_Branch != 0 || FK_Customer != 0 || ID_Customer != 0)/*&& btob == 'True'*/) {
              Taxinterstate = true;
          }
          else if (/*gstn != "" &&*/ (branchstate == state) && (ID_Branch != 0 || FK_Customer != 0 || ID_Customer != 0) /*&& btob == 'True'*/) {
              Taxinterstate = false;
          }
          else {
              Taxinterstate = false;
          }
        var InputData =
        {
            FK_Product: $thisForm.find('[name=ProductID]').val(),
            Includetax: 0,
            Quantity: 0,
            Amount: amount,
            TaxtyInterstate: Taxinterstate

        }

        $.ajax({
            url: "@Url.Action("GetTaxAmountNew","Sales")",
            type: "Get",
            data: InputData,
            dataType: "json",
            contentType: "application/json",
            success: function (ajaxOutput) {
                     if (ajaxOutput.Process.IsProcess)  {
                         var CheckListHTML = '';
                         let sum = 0;
                         if (ajaxOutput.Data.length > 0) {


                             $.each(ajaxOutput.Data, function (i, value) {
                                 sum = sum + parseFloat(value.TaxAmount);
                                 CheckListHTML += "<tr>";
                                 CheckListHTML += "<td>" + value.SlNo + "</td>";
                                 CheckListHTML += "<td Class='jq_ProductID_td' Style='Display:none'>" + value.ProductID + "</td>";
                                 CheckListHTML += "<td class='jq_taxType_td' Style='Display:none'>" + value.FK_TaxType + "</td>";
                                 CheckListHTML += "<td class='jq_taxTypeName_td'>" + value.TaxTyName + "</td>";
                                 CheckListHTML += "<td class='jq_taxPer_td text-center'>" + value.TaxPercentage + "</td>";
                                 CheckListHTML += "<td class='jq_taxamount_td text-right' >  " + value.Amount.toFixed(4) + "</td>";
                                 CheckListHTML += "</tr>";
                             })
                         }
                         else {
                             CheckListHTML += "<div class='form-group col-md-6'>";
                             CheckListHTML += "<div class='form-check mb-2'>";
                             CheckListHTML += "<input type='checkbox' class='form-check-input' >"
                             CheckListHTML += "<label class='form-check-label' for='check1'>No Records...</label>";
                             CheckListHTML += "</div></div>"
                         }
                         //let $model = createSearchModalDOM();
                         //$model.modal.find('.modal-body').append(CheckListHTML);
                         //$model.show

                         $("#formGroupModalTaxbody").html(CheckListHTML)
                         if (mod == 1) {
                             $('#formGroupModalTax').modal('show');
                         }
                         else {
                             $('#formGroupModalTax').modal('hide');
                         }

                         BindTaxAmount(ele)

                     }
                     else {
                         if (mod == 1) {
                             $.each(ajaxOutput.Process.Message, function (key, value) {
                                 NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                             });
                         }
                     }
                },
                complete: function () {
                    $(ele).prop('disabled', false);
                }
            });
    }

    function BindTaxAmount(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let sum = 0;

            $('#formGroupModalTaxbody tr').each(function (index, ele) {
                sum = sum + parseFloat($(ele).find('.jq_taxamount_td').text());

        });

        $thisForm.find('[name=TaxAmount]').val(sum);
        $thisForm.find('[name=TaxAmountVisible]').val(sum.toFixed(2));
        //$thisForm.find('[name=TaxAmount]').val(sum);
    }

        function BindBilldetails(ele) {

            let  $thisForm = $(ele).closest('[perfect-class="form"]');


            console.log('SalBTotalv', $thisForm)
            let netamt = 0;


            $('#Salesetailshead').find('tbody tr').each(function (index, ele) {
                netamt = netamt + parseFloat($(ele).find('.NetAmt').text());

            });

            //Round(Bill Total + Other Charges - Bill Discount) - (Bill Total + Other Charges - Bill Discount)

            $thisForm.find('[name=SalBillTotal]').val(netamt.toFixed(2));
            roundof(ele)

        }
            function Pamount(ele) {
                let $thisForm = $(ele).closest('[perfect-class="form"]');
                let amtp = $thisForm.find('[name="PAmount"]').val() == "" ? "0" : $thisForm.find('[name="PAmount"]').val();
                $thisForm.find('[name="PAmount"]').val(parseFloat(amtp).toFixed(2))
            }
    function BillAmountbind(ele) {
        debugger;
        
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let netamt = 0;
        let SalesRec = $thisForm.find('[name="SalesRec"]').val();
        
        if (SalesRec == 1)
            netamt = $thisForm.find('[name="NewBillAmount"]').val() == "" ? "0" : $thisForm.find('[name="NewBillAmount"]').val();
            else
             netamt = $thisForm.find('[name="SalNetAmount"]').val() == "" ? "0" : $thisForm.find('[name="SalNetAmount"]').val();
            let billamt = 0;
            let bilamt = 0;
              
            if ($thisForm.find('[name=BalAmt]').text() == '') {
                bilamt = 0;
            }
            else {
                bilamt = netamt;
            }
        
            $('#Paymentdethead').find('tbody tr').each(function (index, ele) {
                billamt += parseFloat($(ele).find('.PAmount').text());

            });
         
            bilamt = parseFloat(bilamt) - billamt;
       
        debugger;
        $thisForm.find('[name=BalAmt]').text(bilamt.toFixed(2));
        var discountHidden = $thisForm.find('[name="discountHidden"]').val();
        var SettelementPending = $thisForm.find('[name="SettelementPending"]').val();
        var MopHidden = $thisForm.find('[name="MopHidden"]').val();
        let UsereditSalePrice = '@ViewBag.PagedAccessRights.UserEditSalprice';
        
        if (bilamt == 0) {
                return true;
        }
        else if (bilamt > 0  && discountHidden === 'false' && MopHidden === 'true' && SettelementPending === 'true' && UsereditSalePrice == 'True')
        {
            return false;
        }
        else if (bilamt > 0  && discountHidden === 'true' && MopHidden === 'true' && SettelementPending === 'true' && UsereditSalePrice == 'True') {
            return false;
        }
        else if (bilamt > 0 && discountHidden === 'false' && MopHidden === 'false') {
            return true;
        }
        
        //else if (bilamt == 0 && MopHidden === 'true') {
        //    return false;
        //}
            else {
                return false;
            }
      
        }

        function Billttlnetchck(ele) {
            let $thisForm = $(ele).closest('[perfect-class="form"]');
            PaymentMethodBit = 1;
            let balamt = $thisForm.find('[name=BalAmt]').text();

            if (SaleEdit == 1) {
                ViewinfoEnable = 1;
                DisableMoreinfo(this);
            }
            else {
                ViewinfoEnable = 0;
                DisableMoreinfo(this);
            }
            if (parseFloat(balamt) == 0) {
                $('#formGroupModalpayment').modal('hide');
                $thisForm.find('[perfect-tempTable="Payment"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
            }
            else {

                $thisForm.find('[perfect-tempTable="Payment"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('Balance Amt. should be Zero');

            }
        }

    function roundof(ele) {
       
        debugger
            let   $thisForm = $(ele).closest('[perfect-class="form"]');
            let biltl = 0;
            let otherchg = 0;
            let saldisc = 0;
            let salroundof = 0;
            let netat = 0;
            let advamt = 0;
            let netamt = 0;
        let downpayment = 0;
        let buyback = 0;
            biltl = $thisForm.find('[name="SalBillTotal"]').val() == "" ? "0" : $thisForm.find('[name="SalBillTotal"]').val();
            otherchg = $thisForm.find('[name="OtherCharge"]').val() == "" ? "0" : $thisForm.find('[name="OtherCharge"]').val();
            saldisc = $thisForm.find('[name="SalDiscount"]').val() == "" ? "0" : $thisForm.find('[name="SalDiscount"]').val();
            buyback = $('#Buybcksum').val() == "" ? "0" : $('#Buybcksum').val(); 
           console.log('buyback:', $('#Buybcksum').val());
            advamt = $thisForm.find('[name="AdvAmount"]').val() == "" ? "0" : $thisForm.find('[name="AdvAmount"]').val();
            downpayment = $thisForm.find('[name="SoDownPayment"]').val() == "" ? "0" : $thisForm.find('[name="SoDownPayment"]').val();

            let Net = 0;
            let downpay = 0;
            let addnlamnt = 0;
            let Fk_finance;
            let additional = 0;
            let FK_FinancePlanType = 0;
        

            $('#Salesetailshead').find('tbody tr').each(function (index, ele) {
              
                Fk_finance = $(ele).attr('EMIProduct');
                FK_FinancePlanType = $(ele).attr('FK_FinancePlanType');

                if (Fk_finance == "true" || FK_FinancePlanType>0) {
                    downpay = downpay + parseFloat(($(ele).attr('downpay')));
                    addnlamnt = addnlamnt + parseFloat($(ele).attr('AdditionalPay'));
                }
                else {
                    downpay = downpay + parseFloat($(ele).find('.NetAmt').text());
                }
                Net = Net + parseFloat($(ele).find('.NetAmt').text());
            });

            $thisForm.find('[name="SoDownPayment"]').val(downpay.toFixed(2));
            $thisForm.find('[name="SoAddnAmount"]').val(addnlamnt.toFixed(2));

            if (($thisForm.find('[name="Supplier"]').val() == 2)) {
                salroundof = Math.round(parseFloat(downpay) + parseFloat(otherchg) - parseFloat(saldisc)) - (parseFloat(downpay) + parseFloat(otherchg) - parseFloat(saldisc));
                netat = parseFloat(downpay) + parseFloat(otherchg) - parseFloat(saldisc) + parseFloat(salroundof) - parseFloat(buyback);
                netamt = netat - parseFloat(advamt);
            }
            else {
                salroundof = Math.round(parseFloat(biltl) + parseFloat(otherchg) - parseFloat(saldisc)) - (parseFloat(biltl) + parseFloat(otherchg) - parseFloat(saldisc));
                netat = parseFloat(biltl) + parseFloat(otherchg) - parseFloat(saldisc) + parseFloat(salroundof) - parseFloat(buyback);
                netamt = netat - parseFloat(advamt);
            }
            $thisForm.find('[name=SalRoundoff]').val(salroundof.toFixed(2));
        $thisForm.find('[name="OtherCharge"]').val(parseFloat(otherchg).toFixed(2))
        $thisForm.find('[name="OtherChargepopup"]').val(parseFloat(otherchg).toFixed(2))
            $thisForm.find('[name=SalDiscount]').val(parseFloat(saldisc).toFixed(2));
            $thisForm.find('[name=SalNetAmount]').val(netamt.toFixed(2));
            let billamt = 0;
            let bilamt = 0;

            //if ($thisForm.find('[name=BalAmt]').text() == '') {
            //    bilamt = 0;
            //}
            //else {
            //    bilamt = netamt;
            //}
            bilamt = netamt;
            $('#Paymentdethead').find('tbody tr').each(function (index, ele) {
                billamt += parseFloat($(ele).find('.PAmount').text());

            });
            bilamt = parseFloat(bilamt) - billamt;

            $thisForm.find('[name=BalAmt]').text(bilamt.toFixed(2));
           // $thisForm.find('[name=BalAmt]').text(netamt.toFixed(2));


            }

    function salroundoff(ele) {
        
                let $thisForm = $(ele).closest('[perfect-class="form"]');
                let salroundof = $thisForm.find('[name="SalRoundoff"]').val() == "" ? "0" : $thisForm.find('[name="SalRoundoff"]').val();
                if (salroundof != "" || salroundof != null) {
                    $thisForm.find('[name=SalRoundoff]').val(parseFloat(salroundof).toFixed(2));
                    let biltl = 0;
                    let otherchg = 0;
                    let saldisc = 0;
                    let netat = 0;
                    let advamt = 0;
                    let netamt = 0;
                    let downpayment = 0;
                    let buyback = 0;
                    biltl = $thisForm.find('[name="SalBillTotal"]').val() == "" ? "0" : $thisForm.find('[name="SalBillTotal"]').val();
                    otherchg = $thisForm.find('[name="OtherCharge"]').val() == "" ? "0" : $thisForm.find('[name="OtherCharge"]').val();
                    saldisc = $thisForm.find('[name="SalDiscount"]').val() == "" ? "0" : $thisForm.find('[name="SalDiscount"]').val();
                    advamt = $thisForm.find('[name="AdvAmount"]').val() == "" ? "0" : $thisForm.find('[name="AdvAmount"]').val();
                    downpayment = $thisForm.find('[name="SoDownPayment"]').val() == "" ? "0" : $thisForm.find('[name="SoDownPayment"]').val();
                    buyback = $('#Buybcksum').val() == "" ? "0" : $('#Buybcksum').val(); 
                    if (($thisForm.find('[name="Supplier"]').val() == 2) && ($thisForm.find('[name="SoDownPayment"]').val() > 0)) {
                        netat = parseFloat(downpayment) + parseFloat(otherchg) - parseFloat(saldisc) + parseFloat(salroundof) - parseFloat(buyback);
                        netamt = netat - parseFloat(advamt);
                    }
                    else {
                        netat = parseFloat(biltl) + parseFloat(otherchg) - parseFloat(saldisc) + parseFloat(salroundof) - parseFloat(buyback);
                        netamt = netat - parseFloat(advamt);
                    }

                    $thisForm.find('[name=SalNetAmount]').val(netamt.toFixed(2));

                    let billamt = 0;
                    let bilamt = 0;

                    if ($thisForm.find('[name=BalAmt]').text() == '') {
                        bilamt = 0;
                    }
                    else {
                        bilamt = netamt;
                    }

                    $('#Paymentdethead').find('tbody tr').each(function (index, ele) {
                        billamt += parseFloat($(ele).find('.PAmount').text());

                    });
                    bilamt = parseFloat(bilamt) - billamt;

                    $thisForm.find('[name=BalAmt]').text(bilamt.toFixed(2));
                   // $thisForm.find('[name=BalAmt]').text(netamt.toFixed(2));
                }
            }




    function fn_showimportlist (ele)
    {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        if ($thisForm.find('[name="Supplier"]').val() == 4) {
            GetCmnPopUpSearchValAssign(ele, 7, 'Customer List', [], ['ID_Customer', 'CustomeName', 'MobileNo', 'State','GSTINNo'], SalesTransMode);
        }
        else if ($thisForm.find('[name="Supplier"]').val() == 2) {
            GetCmnPopUpSearchValAssign(ele, 170, 'Sales Order List', [], ['FK_Salesorder', 'FK_CustomerOthers', 'FK_Customer', 'CustomeName', 'MobileNo', 'AdvAmount', 'SoAddnAmount', 'SoDownPayment', 'SoStartDate', 'OtherCharge', 'SalDiscount','TransMode'], SalesTransMode);
        }
        else if ($thisForm.find('[name="Supplier"]').val() == 3) {
            GetCmnPopUpSearchValAssign(ele, 33, 'Lead List', [], ['FK_Lead', 'FK_CustomerOthers', 'FK_Customer', 'CustomeName', 'MobileNo', 'FK_Employee'], SalesTransMode);
        } else if ($thisForm.find('[name="Supplier"]').val() == 5) {

            $("#btnbranchSearch").click();


        }
        else if ($thisForm.find('[name="Supplier"]').val() == 6) {

            $("#btnQuotationSearch").click();

        }
        else {
            NotificationMessage({ 'type': 'info', 'heading': 'info', 'message': 'Please Select Import From' });
        }


    }
   //function displayBuyBack(ele) {
   //     debugger
   //     let $thisForm = $(ele).closest('[perfect-class="form"]');
   //     var imprt = $thisForm.find('[name="Supplier"]').val();
   //      if (imprt == 4) {
   //         $thisForm.find('[name="buybacksection"]').show();
   //         $thisForm.find('[name="Buybackamt"]').show();
           
             
   //     }
   //     else {
   //         $thisForm.find('[name="buybacksection"]').hide();
   //         $thisForm.find('[name="Buybackamt"]').hide();
   //     }

   // }
    function displayBuyBack() {
        debugger
           
         let $thisForm = $('[perfect-class="form"]');
                $.ajax({
                url: '@Url.Action("ShowBuyBack", "Sales")',
                type: "Get",
                dataType: "json",
                contentType: "application/json",
                success: function (ajaxOutput) {//<----- if ajax method executed succesfully,  we get the data passed from controller in this variable  => success: function (variable) {

                 if (ajaxOutput.Process.IsProcess) {
                     $.each(ajaxOutput.Data, function (key, value) {
                         var imprt = $thisForm.find('[name="Supplier"]').val();
                         //console.log('gavalue',value.GsValue);
                         if (value.GsValue == true && imprt == 4) {


                             $thisForm.find('[name="buybacksection"]').show();
                             $thisForm.find('[name="Buybackamt"]').show();

                         }
                         else {
                             $thisForm.find('[name="buybacksection"]').hide();
                             $thisForm.find('[name="Buybackamt"]').hide();
                             //$thisForm.find('[name="Buybackamt"]').hide();
                             //$thisForm.find('[name="BuyBackTable"]').hide();
                         }
                        
                     });
                 } 
                 else {
                     $.each(ajaxOutput.Process.Message, function (key, value) {
                         NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                     });
                 }

             },


        });
      


     }
    function DisplayPaymentMethod() {
        debugger
           
        let $thisForm = $('[perfect-class="form"]');
        let UsereditSalePrice = '@ViewBag.PagedAccessRights.UserEditSalprice';
       
                $.ajax({
                url: '@Url.Action("DisplayPaymentMethod", "Sales")',
                type: "Get",
                dataType: "json",
                contentType: "application/json",
                    success: function (ajaxOutput) {//<----- if ajax method executed succesfully,  we get the data passed from controller in this variable  => success: function (variable) {
                        
                    if (ajaxOutput.MOPSales.Process.IsProcess) {
                        $.each(ajaxOutput.MOPSales.Data, function (key, value) {
                            $thisForm.find('[name="MopHidden"]').val(value.GsValue)
                  
                            
                        
                     });
                   
                    }
                    if (ajaxOutput.Discount.Process.IsProcess) {

                        $.each(ajaxOutput.Discount.Data, function (key, value) {
                            $thisForm.find('[name="discountHidden"]').val(value.GsValue)
                            
                        });
                        }
                        debugger;
                        var discountHidden = $thisForm.find('[name="discountHidden"]').val();
                        var MopHidden = $thisForm.find('[name="MopHidden"]').val();
                        var divPayment = document.getElementById("divPayment");
                        var PaymentDiscount = document.getElementById("divPaymentDiscount");
                        var ItemWise = document.getElementById("divItemWise");
                        var btnOtherChargePopup = document.getElementById("btnOtherChargePopup");
                        var Recalculate = document.getElementById("btnRecalculate");
                        var divRecalculate = document.getElementById("divRecalculate");
                        var SettelementPending = $thisForm.find('[name="SettelementPending"]').val();
                        
                        if (SettelementPending === 'true')
                            GetPaymentMethod($thisForm);
                        //if (discountHidden === 'false' && MopHidden === 'false') {
                            
                        //    $("#btnSave").html("Update");
                        //}
                        //else {
                           
                        //    $("#btnSave").html("OK");
                        //}
                       
                        if (discountHidden === 'false' && MopHidden === 'true' && SettelementPending === 'true' && UsereditSalePrice == 'True') {
                           
                            var divPayment = document.getElementById("divPayment");
                            divPayment.style.display = "block";
                            calculateSaldata($thisForm);
                            
                            
                        }
                        if (discountHidden === 'true' && MopHidden === 'true' && SettelementPending === 'true' && UsereditSalePrice == 'True')  {

                          
                            divPayment.style.display = "block";
                            PaymentDiscount.style.display = "block";
                            ItemWise.style.display = "block";
                            btnOtherChargePopup.style.display = "block";
                            Recalculate.style.display = "block";
                            divRecalculate.style.display = "block";

                            calculateSaldata($thisForm);
                            
                        }
                       

             },


        });
      


     }

    var $custid = '';
    function fn_SalesForm_add(ele) {

        debugger;
                $(ele).prop('disabled', true);
                let printAccess ='@ViewBag.PagedAccessRights.UsrrlPtRpt';
                let $thisForm = $(ele).closest('[perfect-class="form"]');
                let salesdetails = [];
                $thisForm.find('[perfect-tempTable="Purchase"]').find('tbody').find('tr').each(function () {
                    
                    salesdetails.push($(this).data('pData'));
                    console.log($(this).data('pData'), 'pData');
                })

                localStorage.setItem("IDcustomer", $thisForm.find('[name="ID_Customer"]').val());
                localStorage.setItem("CustomerMobile", $thisForm.find('[name="MobileNo"]').val());

                $custid = $thisForm.find('[name="FK_Customer"]').val();

                if (salesdetails.length > 0) {
                    if (datencheck(ele))
                    {
                        if (billdatencheck(ele)) {
                        if ($thisForm.valid()) {

                            if (BillAmountbind(ele)) {
                                //disable button to avoid multiple clicks
                                //$(ele).prop('disabled', true);

                                let $thisForm = $(ele).closest('[perfect-class="form"]');
                                let $modal2 = $thisForm.find('#zero_configOthercharge');
                                let OtherCharge = [];
                                var ID_Customer = 0;
                                $modal2.find('tbody').find('tr').each(function () {

                                    let OtChargeinfo = {};
                                    OtChargeinfo['ID_OtherChargeType'] = $(this).find('.jq_ID_OtherChargeType_td').text();

                                    OtChargeinfo['OctyTransType'] = $(this).find('.jq_TransType_td').find('select').val();
                                    OtChargeinfo['OctyName'] = $(this).find('.jq_Type_td').text();
                                    OtChargeinfo['OctyAmount'] = $(this).find('.jq_OtherChagAmnt_td').find('input').val();
                                    console.log('OtChargeinfo', OtChargeinfo);
                                    OtherCharge.push(OtChargeinfo);

                                });
                                debugger

                                let warrantysave = [];
                                warrantysave = $thisForm.data('pwarranty');
                                console.log('warrantysave', warrantysave)
                                console.log('OtherCharge', OtherCharge)
                                let imagesave = [];
                                imagesave = $thisForm.data('addpImageselect')
                                if (imagesave != null) {
                                    warrantyimagecon(imagesave);
                                }
                                if (warrantysave == null) {
                                    warrantysave = [];
                                }
                                ///warrantydirect start
                                if (warrantydetails == null) {
                                    warrantydetails = [];
                                }
                                ///end

                                let paymentdetails = [];
                                $thisForm.find('[perfect-tempTable="Payment"]').find('tbody').find('tr').each(function () {
                                    paymentdetails.push($(this).data('pData'));
                                })
                                let buybackdetails = [];
                                $thisForm.find('[perfect-tempTable="buyback"]').find('tbody').find('tr').each(function () {
                                    buybackdetails.push($(this).data('pData'));
                                })

                                let ID_Hold = 0;
                                if ($thisForm.find('[name="ID_Hold"]').val() == '' || $thisForm.find('[name="ID_Hold"]').val() == null) {
                                    ID_Hold = 0;
                                }
                                else {
                                    ID_Hold = $thisForm.find('[name="ID_Hold"]').val();

                                }
                                if ($thisForm.find('[name="Supplier"]').val() == '5' ) {
                                    ID_Customer = $thisForm.find('[name="ID_Branch"]').val() == "" ? "0" : $thisForm.find('[name="ID_Branch"]').val();
                                }
                                else {
                                    ID_Customer = $thisForm.find('[name="ID_Customer"]').val() == "" ? "0" : $thisForm.find('[name="ID_Customer"]').val();

                                }

                                let Checkstk1;
                                 var ChekStandBy;
                                 ChekStandBy = '@ViewBag.ChekStandBy';

                                if (ChekStandBy == "True") {
                                    Checkstk1 = 1;
                                }
                                else {
                                    Checkstk1 = 0;
                                }
                                let Taxinterstate = 0;
                                if ($thisForm.find('[name="GSTINNo"]').val() != "" && ('@ViewBag.FK_State' != $thisForm.find('[name="State"]').val()) && '@ViewBag.BtoB' == 'True') {
                                    Taxinterstate = 1;
                                }
                                else if($thisForm.find('[name="GSTINNo"]').val() != "" && ('@ViewBag.FK_State' == $thisForm.find('[name="State"]').val()) && '@ViewBag.BtoB' == 'True'){
                                    Taxinterstate = 0;
                                }

                                let inputData = {

                                    __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                                    'SalesID': 0,
                                    'ID_Hold': ID_Hold,
                                    //'TransMode': 'INSL',
                                    'LastID': LastID_Sales,
                                    'TransMode': SalesTransMode,
                                    'BillType': $thisForm.find('[name="BillType"]').val(),
                                    'SalBillDate': $thisForm.find('[name="SalBillDate"]').val(),
                                    'SalEnterDate': $thisForm.find('[name="SalEnterDate"]').val(),
                                    'ID_Customer': ID_Customer,
                                    'FK_Lead': $thisForm.find('[name="FK_Lead"]').val(),
                                    'FK_Quotation': $thisForm.find('[name="FK_Quotation"]').val(),
                                    'FK_CustomerOthers': $thisForm.find('[name="FK_CustomerOthers"]').val(),
                                    'FK_Customer': $thisForm.find('[name="FK_Customer"]').val(),
                                    'CustomeName': $thisForm.find('[name="CustomeName"]').val(),
                                    'MobileNo': $thisForm.find('[name="MobileNo"]').val(),
                                    'SalBillTotal': $thisForm.find('[name="SalBillTotal"]').val(),
                                    'OtherCharge': $thisForm.find('[name="OtherCharge"]').val(),
                                    'SalDiscount': $thisForm.find('[name="SalDiscount"]').val(),
                                    'SalRoundoff': $thisForm.find('[name="SalRoundoff"]').val(),
                                    'SalNetAmount': $thisForm.find('[name="SalNetAmount"]').val(),
                                    'Hold': 0,
                                    'StockadjonHold': 0,
                                    'AdvAmount': $thisForm.find('[name="AdvAmount"]').val(),
                                    'FK_SalesOrder': $thisForm.find('[name="FK_Salesorder"]').val(),
                                    'ProductDetail': salesdetails,
                                    'PaymentDetail': paymentdetails,
                                    'buyback': buybackdetails,
                                    'OtherChgDetails': OtherCharge,
                                    'WarrantyDetails': warrantydetails/*warrantysave*/,
                                    'AdditionalAmount': $thisForm.find('[name="SoAddnAmount"]').val(),
                                    'DownPayment': $thisForm.find('[name="SoDownPayment"]').val(),
                                    'FK_FinancePlanType': $thisForm.find('[name="FK_FinancePlanType"]').val(),
                                    'StartDate': $thisForm.find('[name="SoStartDate"]').val(),
                                    'ShpContactName': $thisForm.find('[name="ShpContactName"]').val(),
                                    'Address1': $thisForm.find('[name="Address1"]').val(),
                                    'Address2': $thisForm.find('[name="Address2"]').val(),
                                    'CountryID': $thisForm.find('[name="CountryID"]').val(),
                                    'StatesID': $thisForm.find('[name="StatesID"]').val(),
                                    'DistrictID': $thisForm.find('[name="DistrictID"]').val(),
                                    'AreaID': $thisForm.find('[name="AreaID"]').val(),
                                    'PostID': $thisForm.find('[name="PostID"]').val(),
                                    'ShpMobile': $thisForm.find('[name="ShpMobile"]').val(),
                                    'Transporttype': $thisForm.find('[name="Transporttype"]').val(),
                                    'Vehicleno': $thisForm.find('[name="Vehicleno"]').val(),
                                    'DrvName': $thisForm.find('[name="DrvName"]').val(),
                                    'DrvPhoneno': $thisForm.find('[name="DrvPhoneno"]').val(),
                                    'FK_Employee': $thisForm.find('[name="FK_Salesman"]').val(),
                                    'ProductSerialNumbers': productSerialNum,
                                    'SubproductDetails': SubproductDetailsSave,
                                    'ImageList': SalesDocumentUpload,
                                    'BankID': $thisForm.find('[name="BankID"]').val(),
                                    'ChekStandBy': Checkstk1,
                                    'ImportID': $thisForm.find('[name="Supplier"]').val(),
                                    'FK_Vehicle': $thisForm.find('[name="FK_Vehicle"]').val(),
                                    'Taxinterstate': Taxinterstate

                                };
                                clearSessionValue(LastIDSessionKey);

                                console.log('save56', inputData)
                                $.ajax({ 
                                    url: "@Url.Action("AddNewSales", "Sales")",
                                    type: "POST",
                                    data: inputData,
                                    dataType: "json",
                                    contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                                    success: function (ajaxOutput) {

                                        if (ajaxOutput.Process.IsProcess) {

                                            $.each(ajaxOutput.Process.Message, function (key, value) {
                                                NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });

                                                let FK_SALES = ajaxOutput.Process.code;
                                                var Url = ('@Url.Action("GetBillNo", "Report")?FK_SALES=' + FK_SALES);

                                                popitup(Url);
                                                //if (printAccess == 'True') {
                                                //    let FK_ProjectBilling = ajaxOutput.Process.code;
                                                //    getPageSize(this, FK_ProjectBilling);
                                                //    let onSuccess = $thisForm.attr('perfect-onFormSuccess')

                                                //    if (onSuccess) {
                                                //        window[onSuccess]();
                                                //    }
                                                //}
                                               
                                                let storedCustomer = localStorage.getItem("IDcustomer");
                                                let storedMobile = localStorage.getItem("CustomerMobile");

                                                let PassData = {
                                                    storedCustomer: storedCustomer,
                                                    storedMobile: storedMobile,
                                                    ID_Module: FK_SALES
                                                }
                                                fn_SendFeedbackDetails(PassData);


                                            });
                                            //ajaxOutput.Process.code
                                            $thisForm.find('[perfect-ctype="select"]').val('').selectpicker('refresh');
                                            $thisForm.find('[perfect-ctype="input"]').val('');
                                            $thisForm.find('[perfect-ctype="date"]').val('');

                                            // Get the value set in form's perfect-onFormSuccess attribute
                                            //let onSuccess = $thisForm.attr('perfect-onFormSuccess')

                                            //if (onSuccess) {
                                            //    window[onSuccess]();
                                            //}
                                            fn_SaleIndex_initialLoad();
                                        }
                                        else {
                                            $.each(ajaxOutput.Process.Message, function (key, value) {
                                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                            });
                                        }
                                    },
                                    complete: function () {
                                        $(ele).prop('disabled', false);
                                    }

                                });

                            }
                            else {
                                $(ele).prop('disabled', false);
                                NotificationMessage({ 'type': 'error', 'heading': 'Warning', 'message': 'In Payment Method Balance Amt. Should be  Zero ' });
                            }
                        }
                        else {
                            $(ele).prop('disabled', false);
                        }
                        }
                        else {
                            $(ele).prop('disabled', false);
                        }

                }

                }
                    else {
                    $(ele).prop('disabled', false);
                    NotificationMessage({ 'type': 'error', 'heading': 'Warning', 'message': 'Enter Atleast One Product' });



                    }
                }


            function popitup(url) {
                debugger
                newwindow = window.open(url, 'name', 'height=1000,width=1000');
                if (window.focus) { newwindow.focus() }
                return false;
            }

            function fn_SalesForm_red()
            {

                $('.holdt').hide();
                $('.holdc').show();
            }

            function fn_SalesForm_box(ele) {

                let $thisForm = $(ele).closest('[perfect-class="form"]');
                let salesdetail = [];
                $thisForm.find('[perfect-tempTable="Purchase"]').find('tbody').find('tr').each(function () {
                    salesdetail.push($(this).data('pData'));
                })

                if (salesdetail.length > 0)
                {
                    if (datencheck(this)) {
                        if ($thisForm.valid()) {
                            $('#formGroupModalhold').modal('show');
                            $('.holdt').show();
                            $('.holdc').hide();
                        }
                    }


                }
                else {

                    NotificationMessage({ 'type': 'error', 'heading': 'Warning', 'message': 'Enter Atleast One Product' });



                }

            }
            function ViewInvoice(ele) {
                let $thisForm = $(ele).closest('[perfect-class="form"]');
                let FK_SALES = $thisForm.find('[name="SalesID"]').val();
                var Url = ('@Url.Action("GetBillNo", "Report")?FK_SALES=' + FK_SALES);
                popitup(Url);
            }


 // Function to hold Sales
            function fn_SalesForm_hold(ele) {

                let $thisForm = $(ele).closest('[perfect-class="form"]');
                $(ele).prop('disabled', true);
                    let $modal2 = $thisForm.find('#zero_configOthercharge');
                    let OtherCharge = [];
                    $modal2.find('tbody').find('tr').each(function () {

                        let OtChargeinfo = {};
                        OtChargeinfo['ID_OtherChargeType'] = $(this).find('.jq_ID_OtherChargeType_td').text();

                        OtChargeinfo['OctyTransType'] = $(this).find('.jq_TransType_td').find('select').val();
                        OtChargeinfo['OctyName'] = $(this).find('.jq_Type_td').text();
                        OtChargeinfo['OctyAmount'] = $(this).find('.jq_OtherChagAmnt_td').find('input').val();
                        console.log('OtChargeinfo', OtChargeinfo);
                        OtherCharge.push(OtChargeinfo);

                    });
                    let salesdetails = [];
                    $thisForm.find('[perfect-tempTable="Purchase"]').find('tbody').find('tr').each(function () {
                        salesdetails.push($(this).data('pData'));
                    })
                    let stkadj = 0;
                    if ($("#customSwitch3").is(':checked')) {
                        stkadj = 1;

                    }
                    else {
                        stkadj = 0;

                    }
                let warrantysave = [];
                warrantysave = $thisForm.data('pwarranty');
                console.log('warrantysave', warrantysave)

                ///warrantydirect start
                if (warrantydetails == null) {
                    warrantydetails = [];
                }
                ///end

                let imagesave = [];

                imagesave = $thisForm.data('addpImageselect')
                console.log('imagesave', imagesave)
                if (warrantysave == null) {
                    warrantysave = [];
                }

                if (imagesave != null) {
                    warrantyimagecon(imagesave);
                }
                let ID_Hold = 0; var ID_Customer = 0;
                if ($thisForm.find('[name="ID_Hold"]').val() == '' || $thisForm.find('[name="ID_Hold"]').val() == null) {
                    ID_Hold = 0;
                }
                else {
                    ID_Hold = $thisForm.find('[name="ID_Hold"]').val();
                }
                if ($thisForm.find('[name="Supplier"]').val() == '5') {
                    ID_Customer = $thisForm.find('[name="ID_Branch"]').val() == "" ? "0" : $thisForm.find('[name="ID_Branch"]').val();
                }
                else {
                    ID_Customer = $thisForm.find('[name="ID_Customer"]').val() == "" ? "0" : $thisForm.find('[name="ID_Customer"]').val();

                }

                 var ChekStandBy;
                ChekStandBy = '@ViewBag.ChekStandBy';

                let Checkstk1;

                if (ChekStandBy == "True") {
                    Checkstk1 = 1;
                }
                else {
                    Checkstk1 = 0;
                }

                let Taxinterstate = 0;
                if ($thisForm.find('[name="GSTINNo"]').val() != "" && ('@ViewBag.FK_State' == $thisForm.find('[name="State"]').val()) && '@ViewBag.BtoB' == 'True') {
                    Taxinterstate = 1;
                }
                else if ($thisForm.find('[name="GSTINNo"]').val() != "" && ('@ViewBag.FK_State' == $thisForm.find('[name="State"]').val()) && '@ViewBag.BtoB' == 'True') {
                    Taxinterstate = 0;
                }

                    let inputData = {

                        __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                        'ID_Hold': ID_Hold,
                        //'TransMode': 'INSL',
                        'LastID': LastID_Sales,
                        'TransMode': SalesTransMode,
                        'BillType': $thisForm.find('[name="BillType"]').val(),
                        'SalBillDate': $thisForm.find('[name="SalBillDate"]').val(),
                        'SalEnterDate': $thisForm.find('[name="SalEnterDate"]').val(),
                        'ID_Customer': ID_Customer,
                        'FK_Lead': $thisForm.find('[name="FK_Lead"]').val(),
                        'FK_Quotation': $thisForm.find('[name="FK_Quotation"]').val(),
                        'FK_CustomerOthers': $thisForm.find('[name="FK_CustomerOthers"]').val(),
                        'FK_Customer': $thisForm.find('[name="FK_Customer"]').val(),
                        'CustomeName': $thisForm.find('[name="CustomeName"]').val(),
                        'MobileNo': $thisForm.find('[name="MobileNo"]').val(),
                        'SalBillTotal': $thisForm.find('[name="SalBillTotal"]').val(),
                        'OtherCharge': $thisForm.find('[name="OtherCharge"]').val(),
                        'SalDiscount': $thisForm.find('[name="SalDiscount"]').val(),
                        'SalRoundoff': $thisForm.find('[name="SalRoundoff"]').val(),
                        'SalNetAmount': $thisForm.find('[name="SalNetAmount"]').val(),
                        'Hold': 1,
                        'StockadjonHold': stkadj,
                        'AdvAmount': $thisForm.find('[name="AdvAmount"]').val(),
                        'FK_SalesOrder': $thisForm.find('[name="FK_Salesorder"]').val(),
                        'ProductDetail': salesdetails,
                        'PaymentDetail': [],
                        'OtherChgDetails': OtherCharge,
                        'WarrantyDetails': warrantydetails/*warrantysave*/,
                        'AdditionalAmount': $thisForm.find('[name="SoAddnAmount"]').val(),
                        'DownPayment': $thisForm.find('[name="SoDownPayment"]').val(),
                        'StartDate': $thisForm.find('[name="SoStartDate"]').val(),
                        'ShpContactName': $thisForm.find('[name="ShpContactName"]').val(),
                        'Address1': $thisForm.find('[name="Address1"]').val(),
                        'Address2': $thisForm.find('[name="Address2"]').val(),
                        'CountryID': $thisForm.find('[name="CountryID"]').val(),
                        'StatesID': $thisForm.find('[name="StatesID"]').val(),
                        'DistrictID': $thisForm.find('[name="DistrictID"]').val(),
                        'AreaID': $thisForm.find('[name="AreaID"]').val(),
                        'PostID': $thisForm.find('[name="PostID"]').val(),
                        'ShpMobile': $thisForm.find('[name="ShpMobile"]').val(),
                        'Transporttype': $thisForm.find('[name="Transporttype"]').val(),
                        'Vehicleno': $thisForm.find('[name="Vehicleno"]').val(),
                        'DrvName': $thisForm.find('[name="DrvName"]').val(),
                        'DrvPhoneno': $thisForm.find('[name="DrvPhoneno"]').val(),
                        'FK_Employee': $thisForm.find('[name="FK_Salesman"]').val(),
                        'ProductSerialNumbers': productSerialNum,
                        'SubproductDetails': SubproductDetailsSave,
                        'ImageList': SalesDocumentUpload,
                        'BankID': $thisForm.find('[name="BankID"]').val(),
                        'ChekStandBy': Checkstk1,
                        'ImportID': $thisForm.find('[name="Supplier"]').val()
                };

                clearSessionValue(LastIDSessionKey);

                    console.log('save56', inputData)
                    $.ajax({
                        url: "@Url.Action("AddNewSales", "Sales")",
                        type: "POST",
                        data: inputData,
                        dataType: "json",
                        contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                        success: function (ajaxOutput) {

                            if (ajaxOutput.Process.IsProcess) {

                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                    $('#formGroupModalhold').modal('hide');
                                    NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': 'Bill Hold Successfully' });
                                });

                                $thisForm.find('[perfect-ctype="select"]').val('').selectpicker('refresh');
                                $thisForm.find('[perfect-ctype="input"]').val('');
                                $thisForm.find('[perfect-ctype="date"]').val('');

                                // Get the value set in form's perfect-onFormSuccess attribute
                                //let onSuccess = $thisForm.attr('perfect-onFormSuccess')

                                //if (onSuccess) {
                                //    window[onSuccess]();
                                //}
                                fn_SaleIndex_initialLoad();

                            }
                            else {
                                $(ele).prop('disabled', false);
                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                });

                            }
                        },
                        complete: function () {
                            $(ele).prop('disabled', false);
                        }

                    });

                }




     var othrchargelst = [];

    

    function ShowOtherCharges(ele,mode) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');

        if ($thisForm.data('pOthrChgData')) {

            if ($thisForm.data('pOthrChgData').length > 0) {

                othrchargelst = $thisForm.data('pOthrChgData');
            }

        }

        BindChargeDetails(ele, mode)


     }


       function BindChargeDetails(ele, mode) {

        var InputData =
        {
            TransMode: SalesTransMode,
        }


        $.ajax({
            url: "@Url.Action("GetOtherCharges","Sales")",
            type: "Get",
            data: InputData,
            dataType: "json",
            contentType: "application/json",
            success: function (ajaxOutput) {
                if (ajaxOutput.OtherCharges.Process.IsProcess) {
                         var CheckListHTML = '';

                         if (ajaxOutput.OtherCharges.Data.length > 0) {

                             $.each(ajaxOutput.OtherCharges.Data, function (i, value) {

                                 let options = ''
                                     if (othrchargelst != '') {

                                         $.each(othrchargelst, function (key, value1) {

                                             if (value1.ID_OtherChargeType == value.ID_OtherChargeType) {

                                                 value.OctyAmount = value1.OctyAmount;
                                                 $.each(ajaxOutput.Transtypelist.Data, function (i, valuea) {
                                                     if (valuea.TransTypeID.toString() == value1.OctyTransType) {

                                                         options += '<option value=' + valuea.TransTypeID + ' selected="selected">' + valuea.TransType + '</option>'
                                                     }
                                                     else {
                                                         options += '<option value=' + valuea.TransTypeID + '>' + valuea.TransType + '</option>'
                                                     }
                                                 });
                                             }


                                         });

                                     }
                                     else
                                     {

                                         $.each(ajaxOutput.Transtypelist.Data, function (i, valuea) {
                                             options += '<option value=' + valuea.TransTypeID + '>' + valuea.TransType + '</option>'
                                         });
                                         //---

                                     }
                                 console.log('optionsl', options)
                                 let $dropdown = '<select class="form-control"name="selector" id="selector" >' + options + '</select>';
                                 CheckListHTML += "<tr>";
                                 CheckListHTML += "<td>" + value.SlNo + "</td>";
                                 CheckListHTML += "<td Class='jq_ID_OtherChargeType_td' Style='Display:none'>" + value.ID_OtherChargeType + "</td>";
                                 CheckListHTML += "<td Class='jq_Type_td'>" + value.OctyName + "</td>";
                                 CheckListHTML += "<td class='jq_TransType_td'>" + $dropdown + "</td>";
                                 CheckListHTML += "<td class='jq_OtherChagAmnt_td' ><input min='0'  class='form-control text-right' onkeypress='return isNumberKey(event)' type='number'  value='" + value.OctyAmount + "' ' /></td> /></td>";

                                 CheckListHTML += "</tr>";
                             })
                         }
                         else {
                             CheckListHTML += "<div class='form-group col-md-6'>";
                             CheckListHTML += "<div class='form-check mb-2'>";
                             CheckListHTML += "<label class='form-check-label' for='check1'>No Records...</label>";
                             CheckListHTML += "</div></div>"
                         }
                         //let $model = createSearchModalDOM();
                         //$model.modal.find('.modal-body').append(CheckListHTML);
                         //$model.show

                    $("#formGroupModalOtherChargebody").html(CheckListHTML)

                    if (mode == 0) {
                        $('#formGroupModalOtherCharge').modal({ backdrop: 'static', keyboard: false })
                     $('#formGroupModalOtherCharge').modal('show');
                    }
                    else {

                       $('#formGroupModalOtherCharge').modal('hide');
                    }


                     }
                else {

                    $.each(ajaxOutput.OtherCharges.Process.Message, function (key, value) {
                             NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                         });
                     }
                },
                complete: function () {
                    $(ele).prop('disabled', false);
                  //  $('select').selectpicker('refresh');
                }
            });
            }
    $("#formGroupModalpayment").on('hide.bs.modal', function () {
       
        let $thisForm = $("#form");
        if (PaymentMethodBit == 0)
            $thisForm.find('[perfect-tempTable="Payment"]').html('');
    });

            function GetPaymentlists(ele)
            {
                
                let $thisForm = $("#form");
                var PrNetAmount = parseFloat($thisForm.find('[name="SalNetAmount"]').val() == "" ? "0" : $thisForm.find('[name="SalNetAmount"]').val());
                $('#formGroupModalpayment').modal({ backdrop: 'static', keyboard: false })
                $('#formGroupModalpayment').modal('show');
                $("#PAmount").val(PrNetAmount.toFixed(2));
                
             }

    
    function BindOtherChargeAmount(ele) {
        console.log('inside binddatat fn')
        let $modal = $(ele).closest('.modal');
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let sum = 0;
        othrchargelst = [];
        $modal.find('table tbody').find('tr').each(function () {

            let value = parseFloat($(this).find('.jq_OtherChagAmnt_td').find('input').val());;
            if ($(this).find('.jq_OtherChagAmnt_td').find('input').val() == '' || $(this).find('.jq_OtherChagAmnt_td').find('input').val() == null) {
                value = 0;
            }

            if (parseInt($(this).find('.jq_TransType_td').find('select').val()) == 0) {
                value = value * 0;
            }
            else if (parseInt($(this).find('.jq_TransType_td').find('select').val()) == 1) {
                value = value * -1;
            }
            else {
                value = value * 1;
            }
            sum = sum + value;

            let othrcharge = {
                ID_OtherChargeType: $(this).find('.jq_ID_OtherChargeType_td').text(),
                OctyTransType: $(this).find('.jq_TransType_td').find('select').val(),
                OctyAmount: parseFloat($(this).find('.jq_OtherChagAmnt_td').find('input').val())
                };
            othrchargelst.push(othrcharge);
            $thisForm.data({ pOthrChgData: othrchargelst});
            console.log('othrchargelst', othrchargelst)

        });

        $thisForm.find('[name=OtherCharge]').val(sum);
        roundof(ele);
    }

    function calcsalpttledit(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let MRP = $thisForm.find('[name="MRPs"]').val() == "" ? "0" : $thisForm.find('[name="MRPs"]').val();
        let saleprice = $thisForm.find('[name="SalePrice"]').val() == "" ? "0" : $thisForm.find('[name="SalePrice"]').val();
        let qty = $thisForm.find('[name="SpdSalQuantity"]').val() == "" ? "0" : $thisForm.find('[name="SpdSalQuantity"]').val();
        let WarrantyTotalAmt = $thisForm.find('[name="WarrantyTotalAmt"]').val() == "" ? "0" : $thisForm.find('[name="WarrantyTotalAmt"]').val();
        let AmcTotalAmt = $thisForm.find('[name="AMCNetTotalAmt"]').val() == "" ? "0" : $thisForm.find('[name="AMCNetTotalAmt"]').val();
        let Freeqty = $thisForm.find('[name="SpdSalFreeQuantity"]').val() == "" ? "0" : $thisForm.find('[name="SpdSalFreeQuantity"]').val();
        let Unit = $thisForm.find('[name="UnitID"]').val();      
        let UnitCount = $thisForm.find('[name="UnitID"]').children(":selected").attr('UnitCounts') == undefined ? "1" : $thisForm.find('[name="UnitID"]').children(":selected").attr('UnitCounts');

        if (qty)
            $thisForm.find('[name="SpdSalQuantity"]').val(parseFloat(qty).toFixed(3))
        $thisForm.find('[name=SpdSalFreeQuantity]').val(parseFloat(Freeqty).toFixed(3));
        let discam = parseFloat(MRP) - parseFloat(saleprice);
        $thisForm.find('[name=MRPs]').val(parseFloat(MRP).toFixed(2));
        $thisForm.find('[name=SalePrice]').val(parseFloat(saleprice).toFixed(2));
        $thisForm.find('[name=Discamt]').val(discam.toFixed(2));

        $thisForm.find('[name=WarrantyTotalAmt]').val(parseFloat(WarrantyTotalAmt).toFixed(2));
        $thisForm.find('[name=AMCNetTotalAmt]').val(parseFloat(AmcTotalAmt).toFixed(2));

        let discper = 0;
        if (parseFloat(MRP) != 0) {
            discper = (parseFloat(discam) / parseFloat(MRP)) * 100;
        }

        if (discper > 100) {
            $("#Discperrr").text("Discount % Should be less than or equal to 100");
        }
        else {

            $("#Discperrr").text("");
        }


        var discpt = discper.toString();
        if (discpt.includes('.')) {
            $thisForm.find('[name=Discp]').val(discper.toFixed(2));
        }
        else {
            if (isNaN(discper)) {
                $thisForm.find('[name=Discp]').val(0);
            }
            else {
                $thisForm.find('[name=Discp]').val(discper);
            }
        }

        let netamt = ((parseFloat(qty) * parseFloat(UnitCount)) * parseFloat(saleprice)) + parseFloat(WarrantyTotalAmt) + parseFloat(AmcTotalAmt);

        $thisForm.find('[name=NetAmt]').val(netamt.toFixed(2));

      //  ShowTax(ele, 0)

    }
   function calcsalpttl(ele)
   {
       let $thisForm = $(ele).closest('[perfect-class="form"]');
       let MRP = $thisForm.find('[name="MRPs"]').val() == "" ? "0" : $thisForm.find('[name="MRPs"]').val();
       let saleprice = $thisForm.find('[name="SalePrice"]').val() == "" ? "0" : $thisForm.find('[name="SalePrice"]').val();
       let qty = $thisForm.find('[name="SpdSalQuantity"]').val() == "" ? "0" : $thisForm.find('[name="SpdSalQuantity"]').val();
       let WarrantyTotalAmt = $thisForm.find('[name="WarrantyTotalAmt"]').val() == "" ? "0" : $thisForm.find('[name="WarrantyTotalAmt"]').val();
       let AmcTotalAmt = $thisForm.find('[name="AMCNetTotalAmt"]').val() == "" ? "0" : $thisForm.find('[name="AMCNetTotalAmt"]').val();
       let Freeqty = $thisForm.find('[name="SpdSalFreeQuantity"]').val() == "" ? "0" : $thisForm.find('[name="SpdSalFreeQuantity"]').val();
       let Unit = $thisForm.find('[name="UnitID"]').val();          
       let UnitCount = $thisForm.find('[name="UnitID"]').children(":selected").attr('UnitCounts') == undefined ? "1" : $thisForm.find('[name="UnitID"]').children(":selected").attr('UnitCounts');
       
       if (qty)
       $thisForm.find('[name="SpdSalQuantity"]').val(parseFloat(qty).toFixed(3))
       $thisForm.find('[name=SpdSalFreeQuantity]').val(parseFloat(Freeqty).toFixed(3));
       let discam = parseFloat(MRP) - parseFloat(saleprice);
       $thisForm.find('[name=MRPs]').val(parseFloat(MRP).toFixed(2));
       $thisForm.find('[name=SalePrice]').val(parseFloat(saleprice).toFixed(2));
       $thisForm.find('[name=Discamt]').val(discam.toFixed(2));

       $thisForm.find('[name=WarrantyTotalAmt]').val(parseFloat(WarrantyTotalAmt).toFixed(2));
       $thisForm.find('[name=AMCNetTotalAmt]').val(parseFloat(AmcTotalAmt).toFixed(2));

       let discper = 0;
       if (parseFloat(MRP) != 0) {
           discper = (parseFloat(discam) / parseFloat(MRP)) * 100;
       }

       if (discper > 100) {
           $("#Discperrr").text("Discount % Should be less than or equal to 100");
       }
       else {

           $("#Discperrr").text("");
       }


       var discpt = discper.toString();
       if (discpt.includes('.') ) {
           $thisForm.find('[name=Discp]').val(discper.toFixed(2));
       }
       else {
           if (isNaN(discper)) {
               $thisForm.find('[name=Discp]').val(0);
           }
           else {
               $thisForm.find('[name=Discp]').val(discper);
           }
       }

       let netamt = ((parseFloat(qty) * parseFloat(UnitCount)) * parseFloat(saleprice)) + parseFloat(WarrantyTotalAmt) + parseFloat(AmcTotalAmt);

       $thisForm.find('[name=NetAmt]').val(netamt.toFixed(2));

       ShowTax(ele, 0)

     }
    var serialNumberPopup = false;
    var ChekStandBy;
    function GetUnit(ele,UnitID) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let ProductID = $thisForm.find('[name=ProductID]').val() == "" ? $thisForm.find('[name=ProductID]').val() : $thisForm.find('[name=ProductID]').val();
        console.log('123', ProductID);
        let $placeDropdown = $thisForm.find('[name=UnitID]');//<--- Will give place select html element
        $placeDropdown.empty();
        $placeDropdown.append($('<option/>', { "value": '' }).text('Please select')).selectpicker('refresh');
       
        let inputData = {
            __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
            FK_Product: ProductID,
        };
        $.ajax({
            url: "@Url.Action("GetProductUnit", "Sales")",
            type: "POST",

            data: inputData,
            dataType: "json",
            contentType: "application/x-www-form-urlencoded;charset=utf-8",
            success: function (ajaxOutput) {

                console.log(ajaxOutput.Data, 'ajaxOutput.Data')

                if (ajaxOutput.Process.IsProcess) {
                    console.log(ajaxOutput.Data,'ajaxOutput.Data')
                    $.each(ajaxOutput.Data, function (key, value) {
                        $placeDropdown.append($('<option/>', { "value": value.FK_Unit, "UnitCountS": value.UnitCount}).text(value.UnitName)).selectpicker('refresh')
                    });
                    if (UnitID > 0)
                        $thisForm.find('[name="UnitID"]').val(UnitID).selectpicker('refresh');
                    else
                    $thisForm.find('[name="UnitID"]').val(ajaxOutput.Data[0].FK_Unit).selectpicker('refresh');
                    $thisForm.find('[name="UnitID"]').attr('UnitCountS', ajaxOutput.Data[0].UnitCount);
                }
                else {
                    $.each(ajaxOutput.Process.Message, function (key, value) {
                        //toastr.warning(value, "Error");
                        //NotificationMessage({ 'type': 'info', 'heading': 'info', 'message': value });
                    });
                }
            },
            complete: function () {
                
            }

        });
    }
    function getfunctionAssign(ele)
    {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let cntstk = parseFloat($('[name="CrntQnty"]').val()) || 0;

        GetUnit(ele)
        if ($thisForm.find('[name="Supplier"]').val() == 5) {
            var FK_Stock = $thisForm.find('[name="StockId"]').val() == "" ? "0" : $thisForm.find('[name="StockId"]').val();

            if (FK_Stock != "0") {
                var InputData = {
                    FK_Customer: $thisForm.find('[name="ID_Branch"]').val() == "" ? "0" : $thisForm.find('[name="ID_Branch"]').val(),
                    FK_Product: $thisForm.find('[name="ProductID"]').val() == "" ? "0" : $thisForm.find('[name="ProductID"]').val(),
                    FK_Stock: FK_Stock,
                    Branch: 1,

                }
                $.ajax({
                    url: "@Url.Action("GetProductwisePrice", "Sales")",
                    type: "Get",
                    data: InputData,
                    dataType: "json",
                    contentType: "application/json",
                    success: function (ajaxOutput) {
                        if (ajaxOutput.Process.IsProcess) {

                            var data = ajaxOutput.Data;
                            if (data.length > 0) {
                                //$thisForm.find('[name="MRPs"]').val(8);
                                $thisForm.find('[name="SalePrice"]').val(data[0].SalePrice);
                            } else {
                                $thisForm.find('[name="SalePrice"]').val(0);
                            }
                            calcsalpttl(ele);

                        }
                        else {
                            $.each(ajaxOutput.Process.Message, function (key, value) {
                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });

                            });
                            calcsalpttl(ele);
                        }
                    },
                    complete: function () {
                        $(ele).prop('disabled', false);
                    }
                });
            }
            else {
                calcsalpttl(ele);
            }
        }
        else
        {
            calcsalpttl(ele);

            getdepartmentbystockid(ele);
        }









        productclear(ele, 'AMC');
        //productclear(ele, 'Purchase');
        $thisForm.data({ amcdatadata: null });
        TempWarrantyDetails = [];
        productSerialNumTemp = [];
        SubproductDetailsTemp = [];
        productSerialNumTempListPop = [];
        SerialNumberExist = false;
        SubProductDetails = [];
        PssfupDocsList = [];
        $thisForm.find('[name="SpdSalQuantity"]').val(0.00)
        //productclear(ele, 'Purchase');
           var ChekStandBy;
          ChekStandBy = '@ViewBag.ChekStandBy';

        //if (ChekStandBy == "True") {
        //    document.getElementById('stockZero').style.display = "block";
        //    document.getElementById('stockZero1').style.display = "block";

        //}
        //else {
        //    document.getElementById('stockZero').style.display = "none";
        //    document.getElementById('stockZero1').style.display = "none";
        //}

        let ProductId = $('[name="ProductID"]').val();
        let ProductName = $('[name="ProName"]').val();
        $('[name="ProdId"]').val(ProductId);
        $('[name="ProdsName"]').val(ProductName);






        GetProductWarranty(ele);
    }

    var SalesTransModes = '';
    var MultiUnit = false;
    //SalesTransModes= '@ViewBag.TransMode';
    SalesTransModes = SalesTransMode;
     MultiUnit='@ViewBag.MultiUnit';
    function getfunction(ele) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');

        $('#Checkboxsame').prop('checked', false);



        $("#hdnChangeImport").val(1);
        productclear(ele, 'Purchase');
      //  productclear(ele, 'Payment');
        productclear(ele, 'Warranty');
        productclear(ele, 'AMC');
        productclear(ele, 'SerialNumber');
        let $tblcontainer = $thisForm.find('[perfect-tempTable="Purchase"]');
        let $Ptblcontainer = $thisForm.find('[perfect-tempTable="Payment"]');
        localStorage.removeItem("WarProductImage");
        warrantydetails = [];
        TempWarrantyDetails = [];
        productSerialNumTempListPop = [];

        SubproductDetailsTemp = [];
        SerialNumberExist = false;
        SubProductDetails = [];
        SubproductDetailsSave = [];
        PssfupDocsList = [];
        SalesDocumentUpload = [];
        productSerialNum = [];
        productSerialNumTemp = [];

        othrchargelst = [];
        $thisForm.data({ pwarranty: null });
        $thisForm.data({ pImageselect: null });
        $thisForm.data({ pOthrChgData: null });
        $thisForm.data({ amcdatadata: null });
        $tblcontainer.empty();
        $Ptblcontainer.empty();
        $thisForm.find('[perfect-tempTable-Purchase]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
        $thisForm.find('[perfect-tempTable-Payment]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
        $thisForm.find('[perfect-tempTable-Warranty]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');

        $('#Accountbalancedetailss').html('')
        $('#Accountbalancedetailss').empty()
        $('#Accountbalancedetails').html("<p style='text-align:center;' >No Records..</p>");



        let ttlamt = 0;
        $thisForm.find('[name="SalBillTotal"]').val('')
        $thisForm.find('[name="OtherCharge"]').val('')
        $thisForm.find('[name="SalDiscount"]').val('')
        // $thisForm.find('[name="AdvAmount"]').val('')
        $thisForm.find('[name="SalNetAmount"]').val('')
        $thisForm.find('[name="SalRoundoff"]').val('')
        //$thisForm.find('[name="SoDownPayment"]').val('')
        //$thisForm.find('[name="SoAddnAmount"]').val('')

        $thisForm.find('[name=BalAmt]').text(ttlamt.toFixed(2));
        $thisForm.find('[name=CustomeName]').attr("readonly", "readonly")

        if ($thisForm.find('[name=MobileNo]').val() == '' || $thisForm.find('[name=MobileNo]').val() == null) {

            $thisForm.find('[name=MobileNo]').removeAttr("readonly")
            $thisForm.find('[name=CustomeName]').addClass("perfectValidate_string")
        }
        else {
            $thisForm.find('[name=CustomeName]').removeClass("perfectValidate_string")
            $thisForm.find('[name=MobileNo]').attr("readonly", "readonly")
            //$thisForm.find('[name=prdbtn]').attr("readonly", "readonly")

        }
        let InputData;
        if ($thisForm.find('[name="Supplier"]').val() == 3) {
            $('.Advamt').hide();
            $('.DivDownPayment').hide();
            $('.DivAdditionalAmount').hide();
            $thisForm.find('[name="SoDownPayment"]').val('');
            $thisForm.find('[name="SoAddnAmount"]').val('');
            InputData =
                {
                    FK_Master: $thisForm.find('[name="FK_Lead"]').val(),
                    IsLead: 1
                }
        }
        else if ($thisForm.find('[name="Supplier"]').val() == 2) {
            let advat = $thisForm.find('[name="AdvAmount"]').val() == "" ? "0" : $thisForm.find('[name="AdvAmount"]').val();
            $thisForm.find('[name=AdvAmount]').val(parseFloat(advat).toFixed(2));
            $('.Advamt').show();
            $('.DivDownPayment').show();
            $('.DivAdditionalAmount').show();



            InputData =
                {
                    FK_Master: $thisForm.find('[name="FK_Salesorder"]').val(),
                    IsLead: 0,
                    Transmode: $thisForm.data('popValueData').TransMode,
                }
        }
        else if ($thisForm.find('[name="Supplier"]').val() == 4) {
            $('.Advamt').hide();
            $('.DivDownPayment').hide();
            $('.DivAdditionalAmount').hide();
        }
        //else if ($thisForm.find('[name="Supplier"]').val() == 5) {

        //}
          if ($thisForm.find('[name="Supplier"]').val() != 4) {
            $.ajax({
                url: "@Url.Action("GetLeadFill", "Sales")",
                type: "Get",
                data: InputData,
                dataType: "json",
                contentType: "application/json",
                success: function (ajaxOutput) {
                    if (ajaxOutput.datresponse != null) {
                        if (ajaxOutput.datresponse.Process.IsProcess) {


                            let table = JSON.parse(ajaxOutput.datresponse.Data);

                            fillgrid('Purchase', saltableOptionsTempOut, $thisForm, table.dtable);

                            $thisForm.find('[name="OtherCharge"]').val($thisForm.data('popValueData').OtherCharge);
                            $thisForm.find('[name="SalDiscount"]').val($thisForm.data('popValueData').SalDiscount);
                            BindBilldetails(ele);

                            if ($thisForm.find('[name="Supplier"]').val() == 2) {
                                let transmode = $thisForm.data('popValueData').TransMode;
                                let idvalue = $thisForm.data('popValueData').ID_FIELD;
                                if (transmode = 'INSO') {
                                    Saleid = idvalue;
                                    SalesTransModes = transmode;
                                }
                            }
                            else if ($thisForm.find('[name="Supplier"]').val() == 6) {
                                let transmodes = $thisForm.data('popValueData').TransMode;
                                let idvalues = $thisForm.data('popValueData').ID_FIELD;
                                if (transmodes = '') {
                                    Saleid = idvalues;
                                    SalesTransModes = transmodes;
                                }
                            }



                            else {

                                SalesTransModes = SalesTransMode;
                                Saleid = 0;
                            }
                         
                        }
                       
                    }
                },
                complete: function () {
                    $(ele).prop('disabled', false);
                }
            });


        }

        if ($thisForm.find('[name="Supplier"]').val() == 6) {

            let FK_Masterval = $thisForm.find('[name="FK_Quotation"]').val();
            let Transmode = "INQU"
            console.log('FK_Master:', FK_Masterval);

            $.ajax({
                url: "@Url.Action("GetLeadQuotationFill", "Sales")",
                type: "Get",
                data: { FK_Masterval, Transmode },
                dataType: "json",
                contentType: "application/json",
                success: function (ajaxOutput) {
                    if (ajaxOutput.datresponse != null) {
                        if (ajaxOutput.datresponse.Process.IsProcess) {


                            let table = JSON.parse(ajaxOutput.datresponse.Data);

                            fillgrid('Purchase', saltableOptionsTempOut, $thisForm, table.dtable);

                            $thisForm.find('[name="OtherCharge"]').val($thisForm.data('popValueData').OtherCharge);
                            $thisForm.find('[name="SalDiscount"]').val($thisForm.data('popValueData').SalDiscount);
                            BindBilldetails(ele);

                            if ($thisForm.find('[name="Supplier"]').val() == 6) {
                                let transmode = $thisForm.data('popValueData').TransMode;
                                let idvalue = $thisForm.data('popValueData').ID_FIELD;
                                if (transmode = 'INQU') {
                                    Saleid = idvalue;
                                    SalesTransModes = transmode;
                                }
                            }
                           



                            else {

                                SalesTransModes = SalesTransMode;
                                Saleid = 0;
                            }
                         
                        }
                       
                    }
                },
                complete: function () {
                    $(ele).prop('disabled', false);
                }
            });


        }

        if ($thisForm.find('[name="Supplier"]').val() == 4) {

            SalesTransModes = SalesTransMode;

        }
        if ($thisForm.find('[name="Supplier"]').val() == 5) {

            SalesTransModes = SalesTransMode;

        }

    }




    function CalculateDiscper(ele) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let MRP = $thisForm.find('[name="MRPs"]').val() == "" ? "0" : $thisForm.find('[name="MRPs"]').val();
        let discper = $thisForm.find('[name="Discp"]').val() == "" ? "0" : $thisForm.find('[name="Discp"]').val();
        if (parseFloat(MRP) != 0) {
            let discam = (parseFloat(MRP) * parseFloat(discper)) / 100;
            $thisForm.find('[name=Discamt]').val(discam.toFixed(2));
            let salprice = parseFloat(MRP) - parseFloat(discam);
            $thisForm.find('[name=SalePrice]').val(salprice.toFixed(2));

         

            calcsalpttl(ele)
        }
        else {
            $thisForm.find('[name=Discamt]').val(0);
        }
       
      }


    function CalculateDiscamt(ele) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let MRP = $thisForm.find('[name="MRPs"]').val() == "" ? "0" : $thisForm.find('[name="MRPs"]').val();
        let discam = $thisForm.find('[name="Discamt"]').val() == "" ? "0" : $thisForm.find('[name="Discamt"]').val();
        let discper = 0;
        if (parseFloat(MRP) != 0) {
            discper=  (parseFloat(discam) / parseFloat(MRP)) * 100;
        }
        if (discper > 100) {
            $("#Discperrr").text("Discount % Should be less than or equal to 100");
        }
        else {
            $("#Discperrr").text("");
        }

        $thisForm.find('[name=Discp]').val(discper);
        let salprice = parseFloat(MRP) - parseFloat(discam);
        $thisForm.find('[name=SalePrice]').val(salprice.toFixed(2));

            calcsalpttl(ele)


    }

        function fun_import(ele) {

            let $thisForm = $(ele).closest('[perfect-class="form"]');


            $('input[type=checkbox]').prop('checked', false);
            //$('#Checkboxsame').removeAttr('checked');


            //$('#MRPDiv *').prop('disabled', true);



            if ($thisForm.find('[name="Supplier"]').val() == 2) {
                $('.Advamt').show();
                $('.DivDownPayment').show();
                $('.DivAdditionalAmount').show();
            }
            else {
                $('.Advamt').hide();
                $('.DivDownPayment').hide();
                $('.DivAdditionalAmount').hide();
            }
            if ($thisForm.find('[name="Supplier"]').val() == 4) {
                document.getElementById("customerbtn").style.display = 'block';
            }
            else {
                document.getElementById("customerbtn").style.display = 'none';
            }
            if ($thisForm.find('[name="Supplier"]').val() == 0) {
                $thisForm.find('[name=CustomeName]').removeAttr("readonly");
                $thisForm.find('[name=MobileNo]').removeAttr("readonly")
                $thisForm.find('[name=CustomeName]').addClass("perfectValidate_string")
            }
            else {

                $thisForm.find('[name=CustomeName]').attr("readonly", "readonly");
                $thisForm.find('[name=MobileNo]').attr("readonly", "readonly");
                $thisForm.find('[name=CustomeName]').removeClass("perfectValidate_string");

                productclear(ele, 'Purchase');
               // productclear(ele, 'Payment');
                productclear(ele, 'Warranty');
                productclear(ele, 'AMC');
                productclear(ele, 'SerialNumber');
                productSerialNumTempListPop = [];
                productSerialNum = [];
                productSerialNumTemp = [];
                let $tblcontainer = $thisForm.find('[perfect-tempTable="Purchase"]');
                let $Ptblcontainer = $thisForm.find('[perfect-tempTable="Payment"]');
                localStorage.removeItem("WarProductImage");
                warrantydetails = [];
                othrchargelst = [];
                $thisForm.data({ pwarranty: null });
                $thisForm.data({ pImageselect: null });
                $thisForm.data({ pOthrChgData: null });
                $thisForm.data({ amcdatadata: null });
                $tblcontainer.empty();
                $Ptblcontainer.empty();
                $thisForm.find('[perfect-tempTable-Purchase]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
                $thisForm.find('[perfect-tempTable-Payment]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
                $thisForm.find('[perfect-tempTable-Warranty]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');


                let ttlamt = 0;
                $thisForm.find('[name="SalBillTotal"]').val('')
                $thisForm.find('[name="OtherCharge"]').val('')
                $thisForm.find('[name="SalDiscount"]').val('')
                $thisForm.find('[name="AdvAmount"]').val('')
                $thisForm.find('[name="SalNetAmount"]').val('')
                $thisForm.find('[name="SalRoundoff"]').val('')

                $thisForm.find('[name=BalAmt]').text(ttlamt.toFixed(2));

                $thisForm.find('[name=CustomeName]').val("");
                $thisForm.find('[name=MobileNo]').val("");
                $thisForm.find('[name=SoDownPayment]').val("");
                $thisForm.find('[name=SoAddnAmount]').val("");

            }
            if ($thisForm.find('[name="Supplier"]').val() =="5") {
                $("#customerbalancebtn").hide();


            }
            else {
                $("#customerbalancebtn").show();
            }

            //$(ele).attr("disabled", "disabled");
            //$(ele).parent().find('.btn-light').attr("disabled", "disabled");

            $thisForm.find('[name="ID_Customer"]').val('')
            $thisForm.find('[name="FK_Lead"]').val('')
            $thisForm.find('[name="FK_Salesorder"]').val('')
            $thisForm.find('[name="FK_Customer"]').val('')
            $thisForm.find('[name="FK_CustomerOthers"]').val('')
            $thisForm.find('[name="ID_Branch"]').val('')
            $thisForm.find('[name="GSTINNo"]').val('')
            $thisForm.find('[name="State"]').val('')
        }



            function fn_customerForm_loadState(ele)
            {

                debugger

               $('#formGroupModalcustmr').modal('show');


               let $savimgContainer = $('#custmr-savs');



                $savimgContainer.load('@Url.Action("LoadCustomerForm", "Customer")?mtd=@ViewBag.CusTransmode', function () {

                   let $thisForm = $(this).find('[perfect-class="form"]');
                   // ... Custom validation message
                   $thisForm.validate({ messages: sdvalidationMessage });
                   // ... Custom validation message
                   $thisForm.attr('perfect-onFormSuccess', 'fn_scustomerIndex_initialLoad');
                    $('#cardheaderid').hide();
                   initFunctions($thisForm);
                        $('#formGroupModalcustmr').modal('show');


                      });



          }
        function fn_scustomerIndex_initialLoad() {

            $('#formGroupModalcustmr').modal('hide');

        }





            var sdvalidationMessage = {
                'BranchID': {
                    'required': 'Please select a branch',
                    'digits': 'Invalid Branch selected'
                },
                'CustomerTypeID': {
                    'required': 'Please select a Customer Type',
                    'digits': 'Invalid Customer Type selected'
                },
                'Number': {
                    'required': 'Enter customer number',
                    'digits': 'Customer number should be digits'
                },

                'Name': {
                    'required': 'Please enter customer name',
                    'maxlength': jQuery.validator.format('Customer name should be less than {0} characters'),
                    'stringonly': 'Special characters are not allowed in customer name'
                },
                'Address1': {
                    'required': 'Please enter address ',
                    'maxlength': jQuery.validator.format('Address  should be less than {0} characters'),
                    'stringonly': 'Special characters are not allowed in Address'
                },


                'CountryID': {
                    'required': 'Please select country',
                    'digits': 'Invalid Country selected'
                },
                'StatesID': {
                    'required': 'Please select state',
                    'digits': 'Invalid State selected'
                },
                'DistrictID': {
                    'required': 'Please select district',
                    'digits': 'Invalid District selected'
                },

                'Mobile': {
                    'required': 'Please enter mobile',
                    'anyphonenumber': 'Invalid Mobile No',
                    'minlength': jQuery.validator.format('Mobile No should be more than {0} characters'),
                    'maxlength': jQuery.validator.format('Mobile No should be less than {0} characters')
                },
                'Phone': {

                    'anyphonenumber': 'Invalid Phone No',
                    'minlength': jQuery.validator.format('Phone No should be more than {0} characters'),
                    'maxlength': jQuery.validator.format('Phone No should be less than {0} characters')
                },



                'CategoryID': {
                    'required': 'Please select a Category',
                    'digits': 'Invalid Category Mode selected'
                },
                'ContactPerson': {
                    'required': 'Please enter Contact Person',
                    'maxlength': jQuery.validator.format('Contact Person should be less than {0} characters'),
                    'stringonly': 'Special characters are not allowed in Contact Person name'
                },

                'ContactMobile': {
                    'required': 'Please enter  Mobile',
                    'anyphonenumber': 'Invalid Mobile No',
                    'minlength': jQuery.validator.format('Mobile No should be more than {0} characters'),
                    'maxlength': jQuery.validator.format('Mobile No Phone should be less than {0} characters')
                },

                'BranchTypeID': {
                    'required': 'Please select a Branch Type',
                    'digits': 'Invalid Branch Type selected'
                },



            };

            function ResetButton(ele) {
                $('.dataTable tr').removeClass("SelectForDelete");
                fn_SaleIndex_initialLoad();
            }

      function ResetButton1(ele) {
          let $thisForm = $(ele).closest('[perfect-class="form"]');

          $thisForm.find('[perfect-ctype="select"]').val('').selectpicker('refresh');
          $thisForm.find('[perfect-ctype="input"]').val('');

          $thisForm.find('[perfect-ctype="date"]').val('');
          $thisForm.find('[perfect-ctype="hidden"]').val('');
          $thisForm.find('[name=prdbtn]').removeAttr("disabled", "disabled")
          $thisForm.find('[name=CustomeName]').removeAttr("readonly")
          $thisForm.find('[name=MobileNo]').removeAttr("readonly")
          $thisForm.find('[perfect-tempTable-Purchase]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
          $thisForm.find('[perfect-tempTable-Payment]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
          $thisForm.find('[perfect-tempTable-Warranty]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');


          $('.Advamt').hide();
          $('.DivDownPayment').show();
          $('.DivAdditionalAmount').show();
          localStorage.removeItem("WarProductImage");
          warrantydetails = [];
          othrchargelst = [];
          $thisForm.data({ pOthrChgData: null });
          $thisForm.data({ pwarranty: null });
          $thisForm.data({ pImageselect: null });
          $thisForm.data({ pPayment: null });
          $thisForm.data({ addpImageselect: null });
          $thisForm.find('[perfect-tempTable="Purchase"]').html('');
          $thisForm.find('[perfect-tempTable="Payment"]').html('');
          $thisForm.find('[perfect-tempTable="Warranty"]').html('');
          $thisForm.find('[name=BalAmt]').text(0);
          $thisForm.find('[name="SalBillDate"]').val(moment().format('YYYY-MM-DD'));
          $thisForm.find('[name="SalEnterDate"]').val(moment().format('YYYY-MM-DD'));
          let saveddata = $thisForm.data('pData');
          console.log("saveddata",saveddata)
           if (saveddata) {

            $thisForm.find('[name="SalesID"]').val(saveddata.SalesID);
            $thisForm.find('[name="ID_Hold"]').val(saveddata.ID_Hold);
            $thisForm.find('[name="TransMode"]').val(saveddata.TransMode);
            $thisForm.find('[name="BillType"]').val(saveddata.BillType).selectpicker('refresh');
            $thisForm.find('[name="SalBillNo"]').val(saveddata.SalBillNo);
               $thisForm.find('[name="SalBillDate"]').val(moment(saveddata.SalBillDate).format('YYYY-MM-DD'));
               $thisForm.find('[name="SalEnterDate"]').val(moment().format('YYYY-MM-DD'));

            $thisForm.find('[name="Supplier"]').val(saveddata.SalesFrom).selectpicker('refresh');

            if ($thisForm.find('[name="Supplier"]').val() == 2) {
                $('.Advamt').show();
                $('.DivDownPayment').show();
                $('.DivAdditionalAmount').show();
            }
            else {
                $('.Advamt').hide();
                $('.DivDownPayment').hide();
                $('.DivAdditionalAmount').hide();
            }

            $thisForm.find('[name="CustomeName"]').val(saveddata.CustomeName);
            $thisForm.find('[name="MobileNo"]').val(saveddata.MobileNo);
            $thisForm.find('[name="CustomeName"]').attr("readonly", true);
            $thisForm.find('[name="MobileNo"]').attr("readonly", true);
            $thisForm.find('[name="Supplier"]').attr("disabled", "disabled");
            $thisForm.find('[name="BillType"]').attr("disabled", "disabled");
            $thisForm.find('[name="SalBillTotal"]').val(saveddata.SalBillTotal);
            $thisForm.find('[name="SalDiscount"]').val(saveddata.SalDiscount);
            $thisForm.find('[name="OtherCharge"]').val(saveddata.OtherCharge);
            $thisForm.find('[name="SalRoundoff"]').val(saveddata.SalRoundoff);
            $thisForm.find('[name="SalNetAmount"]').val(saveddata.SalNetAmount);
            $thisForm.find('[name=CustomeName]').removeClass("perfectValidate_string")
            let netatb = 0;


                if(saveddata.SalesID == 0) {
                    id = saveddata.ID_Hold;
                    netatb = $thisForm.find('[name="SalNetAmount"]').val();
                }
                else {
                    id = saveddata.SalesID;
                }
                $thisForm.find('[name=BalAmt]').text(parseFloat(netatb).toFixed(2));
                $thisForm.find('[name="AdvAmount"]').val(saveddata.AdvAmount);

               let pEDataProduct = $thisForm.data('pEDataProduct');
               let pEwarranty = $thisForm.data('pEwarranty');
               let pEImageselect = $thisForm.data('pEImageselect');
               let EaddpImageselect = $thisForm.data('EaddpImageselect');
               let pEPayment = $thisForm.data('pEPayment');
               //let pbuyback = $thisForm.data('pbuyback');
               //alert(1);
               //console.log(pbuyback, "pbuybackkkkkkkkkkkkkkkkkkkkfrm");
               let pEOthrChgData = $thisForm.data('pEOthrChgData');
               //fillTableSales($thisForm, 'buyback', pbuyback, restableOptionsTempOut);

                $thisForm.data({ pDataProduct: pEDataProduct });
                $thisForm.data({ pOthrChgData: pEOthrChgData });


                $thisForm.data({ pwarranty: pEwarranty });
                $thisForm.data({ pImageselect: pEImageselect });
                $thisForm.data({ pPayment: pEPayment });
                $thisForm.data({ addpImageselect: EaddpImageselect});
               fillTableSales($thisForm, 'Purchase', pEDataProduct, saltableOptionsTempOut);
              
               if (saveddata.SalesID != 0) {

                    fillTableSales($thisForm, 'Payment', pEPayment, paytableOptionsTempOut)
                }
                ShowOtherCharges(this, 1)


                }



                $thisForm.validate().resetForm();
                //   $(ele).text('Close').click(function () { window.location.href ='/Home/Contact' })// this will add close option
            }


        function deletesale(ele) {
            let $thisForm = $(ele).closest('[perfect-class="form"]');
            let Saveddata = $thisForm.data('pData');
             console.log('Delete function', Saveddata)
             //get reason list-
               $.ajax({
                   url: "@Url.Action("GetSalesReasonList", "Sales")",
                   type: "GET",
                  // data: inputReason,
                   contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                   success: function (ajaxReasonOutput) {
                       if (ajaxReasonOutput.Process.IsProcess) {
                           console.log('Inside res ajax', ajaxReasonOutput.Data)
                           let confirmationDialogBoxOption = { heading: "Are you Sure?", body: "Do you want to remove this hold ?", cancel: "No", confirm: "Yes", reason: ajaxReasonOutput.Data };
                           var confirmBoxObj = ConfirmDialog(confirmationDialogBoxOption);


                           confirmBoxObj.then(function (selectedOption) {
                                if (selectedOption) {

                                    let inputData = {
                                        __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                                        ID_Hold: Saveddata['ID_Hold'],
                                        ReasonID: selectedOption
                                    };
                                    $.ajax({
                                        url: "@Url.Action("DeleteSales", "Sales")",
                                        type: "POST",
                                        data: inputData,
                                        contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                                        success: function (ajaxOutput) {
                                            if (ajaxOutput.Process.IsProcess) {
                                                //let table = $row.closest('table').DataTable()
                                                //table.row($row).remove().draw();
                                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                                    NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': 'Deleted Successfully' });
                                                });
                                                let onSuccess = $thisForm.attr('perfect-onFormSuccess')

                                                if (onSuccess) {
                                                    window[onSuccess]();
                                                }
                                            }
                                            else {
                                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                                });
                                            }
                                        }
                                    });
                                }
                                else {
                                    NotificationMessage({ 'message': 'No option selected' });
                                }

                            });
                        }
                        else {
                        }
                   }
               });
        };


        function EMICalculate(ele,FK_Master) {

            let $thisForm = $(ele).closest('[perfect-class="form"]');
            debugger
            console.log('FK_Salesorder"]', $thisForm.find('[name="FK_Salesorder"]').val())
            if ($thisForm.find('[name="FK_Salesorder"]').val() != 0 ) {

                var InputData =
                {
                    FK_Master: FK_Master,
                }

                $.ajax({
                    url: "@Url.Action("GetSalesOrderInfo", "Sales")",
                    type: "POST",
                    data: InputData,
                    dataType: "json",
                    contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                    success: function (ajaxOutput) {
                        if (ajaxOutput.Process.IsProcess) {

                            if (ajaxOutput.Data.length > 0) {
                                var CheckListHTML = '';
                                const date = new Date();
                                console.log('ajaxOutput.Data', ajaxOutput.Data)
                                $.each(ajaxOutput.Data, function (i, value) {

                                    if (value.SLNo <= 0) {
                                        $('#rowid').hide();
                                        CheckListHTML += "<tr id='rowid'>";
                                        CheckListHTML += "<td class='SLNO' style='display:none'>" + value.SLNo + "</td>";
                                        CheckListHTML += "<td class='EMIDate' style='display:none'>" + ConvertJsonDate(value.EMIDate) + "</td>";
                                        CheckListHTML += "<td class='Amount' style='display:none'>" + value.Amount + "</td>";
                                        CheckListHTML += "<td class='Remarks' style='display:none'>" + value.Remarks + "</td>";
                                        CheckListHTML += "</tr>";
                                        console.log('yes get in')
                                    }
                                    else {

                                        $('#rowid').show();
                                        CheckListHTML += "<tr id='rowid'>";
                                        CheckListHTML += "<td class='SLNO'>" + value.SLNo + "</td>";
                                        CheckListHTML += "<td class='EMIDate'>" + ConvertJsonDate(value.EMIDate) + "</td>";
                                        CheckListHTML += "<td class='Amount'>" + value.Amount + "</td>";
                                        CheckListHTML += "<td class='Remarks'>" + value.Remarks + "</td>";
                                        CheckListHTML += "</tr>";
                                    }

                                })
                            }
                            else {
                                CheckListHTML += "<div class='form-group col-md-6'>";
                                CheckListHTML += "<div class='form-check mb-2'>";
                                CheckListHTML += "<input type='checkbox' class='form-check-input' >"
                                CheckListHTML += "<label class='form-check-label' style='text-align:center;' for='check1'><b>No Plans Available for these products.</b></label>";
                                CheckListHTML += "</div></div>"
                            }
                            $("#InstallmentDetailsbody").html(CheckListHTML)
                            $('#InstallmentDetails').modal({ backdrop: 'static', keyboard: false })
                            $('#InstallmentDetails').modal('show');


                            $('#InstallmentDetails').modal('show');

                        }
                        else {
                            $.each(ajaxOutput.Process.Message, function (key, value) {
                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                            });
                        }
                    },
                    complete: function () {
                        $(ele).prop('disabled', false);

                    }
                });


            }
            else {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Import Sales Order' });
            }


        }
        function ConvertJsonDate(Jsondate) {
            var date = "";
            if (Jsondate != "" && Jsondate != null && Jsondate != undefined) {
                var dateString = Jsondate.substr(6);
                var currentTime = new Date(parseInt(dateString));
                var month = currentTime.getMonth() + 1;
                if (month <= 9) {
                    month = "0" + month;
                }
                var day = currentTime.getDate();
                if (day <= 9) {
                    day = "0" + day;
                }
                var year = currentTime.getFullYear();
                date = day + "/" + month + "/" + year;


            }
            return date;
        }

        function GetShippingdetailslists(ele) {
            debugger

            let $thisForm = $(ele).closest('[perfect-class="form"]');
            let fk_master; var mode = 0;
            if ($thisForm.find('[name="SalesID"]').val() == 0 && $thisForm.find('[name="ID_Hold"]').val() == 0 /*&& $thisForm.find('[name="ID_Branch"]').val()==0*/) {
                if ($thisForm.find('[name="Checkboxsame"]').is(':Checked') == false && $("#hdnChangeImport").val()=="1") {
                    $thisForm.find('[name="ShpContactName"]').val("");
                    $thisForm.find('[name="ShpMobile"]').val("");
                    $thisForm.find('[name="Address1"]').val("");
                    $thisForm.find('[name="Address2"]').val("");
                    $thisForm.find('[name="CountryID"]').val("");
                    $thisForm.find('[name="Country"]').val("");
                    $thisForm.find('[name="StatesID"]').val("");
                    $thisForm.find('[name="States"]').val("");
                    $thisForm.find('[name="DistrictID"]').val("");
                    $thisForm.find('[name="District"]').val("");
                    $thisForm.find('[name="PinCode"]').val("");

                    $thisForm.find('[name="AreaID"]').val("");
                    $thisForm.find('[name="Area"]').val("");
                    $thisForm.find('[name="PostID"]').val("");
                    $thisForm.find('[name="Post"]').val("");
                    $thisForm.find('[name="DrvName"]').val("");
                    $thisForm.find('[name="DrvPhoneno"]').val("");
                    $thisForm.find('[name="Vehicleno"]').val("");
                    $thisForm.find('[name="Transporttype"]').val("0").selectpicker('refresh');
                    $thisForm.find('[name="FK_Vehicle"]').val("");
                    $("#hdnChangeImport").val(0);
                }
            }
            else {

                if ($thisForm.find('[name="SalesID"]').val() != 0) {
                    fk_master = $thisForm.find('[name="SalesID"]').val()
                }
                if ($thisForm.find('[name="ID_Hold"]').val() != 0) {
                    fk_master = $thisForm.find('[name="ID_Hold"]').val()
                }
                //if ($thisForm.find('[name="Supplier"]').val()== "Branch") {
                //    fk_master = $thisForm.find('[name="ID_Branch"]').val(); mode = 1;
                //}

                var InputData =
                {
                    FK_Master: fk_master,
                    TransMode: SalesTransMode,
                    //Mode: mode,
                }

               $.ajax({
                    url: "@Url.Action("BindCustomerdetails", "Sales")",
                    type: "POST",
                    data: InputData,
                    dataType: "json",
                    contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                   success: function (ajaxOutput) {



                           if (ajaxOutput.Process.IsProcess) {


                               $thisForm.find('[name="ShpContactName"]').val(ajaxOutput.Data[0].DelName);
                               $thisForm.find('[name="ShpMobile"]').val(ajaxOutput.Data[0].DelMobileNo);
                               $thisForm.find('[name="Address1"]').val(ajaxOutput.Data[0].DelAddress1);
                               $thisForm.find('[name="Address2"]').val(ajaxOutput.Data[0].DelAddress2);
                               $thisForm.find('[name="CountryID"]').val(ajaxOutput.Data[0].FK_Country);
                               $thisForm.find('[name="Country"]').val(ajaxOutput.Data[0].Country);
                               $thisForm.find('[name="StatesID"]').val(ajaxOutput.Data[0].FK_States);
                               $thisForm.find('[name="States"]').val(ajaxOutput.Data[0].States);
                               $thisForm.find('[name="DistrictID"]').val(ajaxOutput.Data[0].FK_District);
                               $thisForm.find('[name="District"]').val(ajaxOutput.Data[0].District);

                               $thisForm.find('[name="AreaID"]').val(ajaxOutput.Data[0].FK_Area);
                               $thisForm.find('[name="Area"]').val(ajaxOutput.Data[0].Area);
                               $thisForm.find('[name="PostID"]').val(ajaxOutput.Data[0].FK_Post);
                               $thisForm.find('[name="Post"]').val(ajaxOutput.Data[0].Post);
                               $thisForm.find('[name="DrvName"]').val(ajaxOutput.Data[0].DelDriverName);
                               $thisForm.find('[name="DrvPhoneno"]').val(ajaxOutput.Data[0].DelDriverMobileNo);
                               $thisForm.find('[name="Vehicleno"]').val(ajaxOutput.Data[0].DelVehicleNo);
                               $thisForm.find('[name="Transporttype"]').val(ajaxOutput.Data[0].DelTransportType).selectpicker('refresh');
                               $thisForm.find('[name="FK_Vehicle"]').val(ajaxOutput.Data[0].FK_Vehicle);

                           }

                       //else {
                       //    $thisForm.find('[name="ShpContactName"]').val("");
                       //    $thisForm.find('[name="ShpMobile"]').val("");
                       //    $thisForm.find('[name="Address1"]').val("");
                       //    $thisForm.find('[name="Address2"]').val("");
                       //    $thisForm.find('[name="CountryID"]').val("");
                       //    $thisForm.find('[name="Country"]').val("");
                       //    $thisForm.find('[name="StatesID"]').val("");
                       //    $thisForm.find('[name="States"]').val("");
                       //    $thisForm.find('[name="DistrictID"]').val("");
                       //    $thisForm.find('[name="District"]').val("");

                       //    $thisForm.find('[name="AreaID"]').val("");
                       //    $thisForm.find('[name="Area"]').val("");
                       //    $thisForm.find('[name="PostID"]').val("");
                       //    $thisForm.find('[name="Post"]').val("");
                       //    $thisForm.find('[name="DrvName"]').val("");
                       //    $thisForm.find('[name="DrvPhoneno"]').val("");
                       //    $thisForm.find('[name="Vehicleno"]').val("");
                       //    $thisForm.find('[name="Transporttype"]').val("0").selectpicker('refresh');
                       //}
                    },
                    complete: function () {
                        $(ele).prop('disabled', false);

                    }
                });



            }

            $('#formGroupModalShippingDetails').modal({ backdrop: 'static', keyboard: false })

            $('#formGroupModalShippingDetails').modal('show');

        }

          function searchbtn(ele) {
       debugger
         let $thisForm = $(ele).closest('[perfect-class="form"]');
         let searchPin = {
             Pincode: $thisForm.find('[name="PinCode"]').val()
         };
         if ($thisForm.find('[name="PinCode"]').val() != "") {

             $.ajax({

                 url: '@Url.Action("GetPinCodedetails", "Organization")',
                 type: "POST",
                 data: searchPin,//<---- Input json : data passed to controller
                 dataType: "json",
                 contentType: 'application/x-www-form-urlencoded;charset=utf-8',
                 success: function (ajaxOutput) {
                     console.log('> Search button click success', ajaxOutput);
                     if (ajaxOutput.Process.IsProcess) {

                         var sss = createSelectList({ data: ajaxOutput.Data, hideColumn: ["StatesID", "DistrictID", "CountryID", "PostID", "AreaID"], settings: { size: "modal-sm" }, headingText: 'Pincode List' });
                         sss.then(function (ret) {
                             if (ret) {
                                 $thisForm.find('[name="CountryID"]').val(ret['CountryID']);
                                 $thisForm.find('[name="Country"]').val(ret['Country']);
                                 $thisForm.find('[name="StatesID"]').val(ret['StatesID']);
                                 $thisForm.find('[name="States"]').val(ret['States']);
                                 $thisForm.find('[name="DistrictID"]').val(ret['DistrictID']);
                                 $thisForm.find('[name="District"]').val(ret['District']);
                                 $thisForm.find('[name="AreaID"]').val(ret['AreaID']);
                                 $thisForm.find('[name="Area"]').val(ret['Area']);
                                 $thisForm.find('[name="PostID"]').val(ret['PostID']);
                                 $thisForm.find('[name="Post"]').val(ret['Post'])
                             }
                             else {
                                 console.log(ret);
                             }
                         });
                     }
                     else {
                         $.each(ajaxOutput.Process.Message, function (key, value) {

                             NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                         });
                     }
                 },
                 complete: function () {

                 }
             });
         }
         else {
             GetCmnPopUpSearchValAssign(ele, 76, 'Post List', [], ['PinCode','StatesID','States','CountryID','Country','DistrictID','District','AreaID','Area','PostID','Post',]);
         }
        }


        function loadcustomeraddress(ele) {
            debugger
            let $thisForm = $(ele).closest('[perfect-class="form"]');
            var Id;


            if ($thisForm.find('[name="Checkboxsame"]').is(':Checked') == true) {
                if ($thisForm.find('[name="Supplier"]').val() == 4) {
                    Id = $thisForm.find('[name="ID_Customer"]').val();
                }
                if ($thisForm.find('[name="Supplier"]').val() == 2) {
                    Id = $thisForm.find('[name="FK_Salesorder"]').val();
                }
                if ($thisForm.find('[name="Supplier"]').val() == 3) {
                    Id = $thisForm.find('[name="FK_Lead"]').val();
                } if ($thisForm.find('[name="Supplier"]').val() == 5) {
                    Id = $thisForm.find('[name="ID_Branch"]').val();
                }
                  var InputData =
                {
                    FK_Master: Id,
                    ImportId: $thisForm.find('[name="Supplier"]').val()
                }

               $.ajax({
                    url: "@Url.Action("GetCustomerdetails", "Sales")",
                    type: "POST",
                    data: InputData,
                    dataType: "json",
                    contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                    success: function (ajaxOutput) {
                        if (ajaxOutput.Process.IsProcess) {

                            $thisForm.find('[name="ShpContactName"]').val(ajaxOutput.Data[0].CusName);
                            $thisForm.find('[name="ShpMobile"]').val(ajaxOutput.Data[0].Mobile);
                            $thisForm.find('[name="Address1"]').val(ajaxOutput.Data[0].Address);
                            $thisForm.find('[name="Address2"]').val(ajaxOutput.Data[0].Address2);
                            $thisForm.find('[name="CountryID"]').val(ajaxOutput.Data[0].CountryID);
                            $thisForm.find('[name="Country"]').val(ajaxOutput.Data[0].Country);
                            $thisForm.find('[name="StatesID"]').val(ajaxOutput.Data[0].StatesID);
                            $thisForm.find('[name="States"]').val(ajaxOutput.Data[0].States);
                            $thisForm.find('[name="DistrictID"]').val(ajaxOutput.Data[0].DistrictID);
                            $thisForm.find('[name="District"]').val(ajaxOutput.Data[0].District);

                            $thisForm.find('[name="AreaID"]').val(ajaxOutput.Data[0].AreaID);
                            $thisForm.find('[name="Area"]').val(ajaxOutput.Data[0].Area);
                            $thisForm.find('[name="PostID"]').val(ajaxOutput.Data[0].PostID);
                            $thisForm.find('[name="Post"]').val(ajaxOutput.Data[0].Post);
                        }
                        else {
                            $.each(ajaxOutput.Process.Message, function (key, value) {
                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Please Select Import From' });
                            });
                        }
                    },
                    complete: function () {
                        $(ele).prop('disabled', false);

                    }
                });

            }
            else {
                $thisForm.find('[name="ShpContactName"]').val('');
                $thisForm.find('[name="ShpMobile"]').val('');
                $thisForm.find('[name="Address1"]').val('');
                $thisForm.find('[name="Address2"]').val('');
                $thisForm.find('[name="CountryID"]').val(0);
                $thisForm.find('[name="Country"]').val('');
                $thisForm.find('[name="StatesID"]').val(0);
                $thisForm.find('[name="States"]').val('');
                $thisForm.find('[name="DistrictID"]').val(0);
                $thisForm.find('[name="District"]').val('');
                $('input[type=checkbox]').prop('checked', false);
                $thisForm.find('[name="AreaID"]').val(0);
                $thisForm.find('[name="Area"]').val('');
                $thisForm.find('[name="PostID"]').val(0);
                $thisForm.find('[name="Post"]').val('');

            }



        }


        function checkemi(ele) {
            let $thisForm = $(ele).closest('[perfect-class="form"]');
            let FK_Financeplan;
            let Fk_finance;
            let purchaseindex;
            debugger

            $('#Salesetailshead').find('tbody tr').each(function (index, ele) {
                debugger
                Fk_finance = $(ele).attr('EMIProduct');
                FK_Financeplan = $(ele).attr('FK_FinancePlanType');
                purchaseindex = $(ele).attr('purchaseindex');

                if (Fk_finance == "true" || FK_Financeplan > 0) {
                    $('.asd').eq(index).show();

                }
                else {
                    $('.asd').eq(index).hide();
                }

            });
        }
        function isNumberKey(evt) {
            var charCode = (evt.which) ? evt.which : event.keyCode
            if (charCode > 31 && (charCode < 46 || charCode > 57))
                return false;

            return true;
        }


        function AMCWarranty(ele,type) {
            let $thisForm = $(ele).closest('[perfect-class="form"]');
            var InputData =
            {
                Mode: 1,
                FK_Type: $thisForm.find('[name="WarrantyType"]').val(),
                Date: $thisForm.find('[name="SalBillDate"]').val(),
                Quantity: $thisForm.find('[name="SpdSalQuantity"]').val(),
            }



                    $.ajax({
                    url: "@Url.Action("GetAMCWarrantydetails", "Sales")",
                    type: "POST",
                    data: InputData,
                    dataType: "json",
                    contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                        success: function (ajaxOutput) {
                            if (ajaxOutput.Process.IsProcess) {
                                if (ajaxOutput.Data[0].ErrCode != -100) {
                                    $thisForm.find('[name="Replcwardt"]').val(moment(ajaxOutput.Data[0].ReplaceWarrantyDate).format('YYYY-MM-DD'));
                                    $thisForm.find('[name="Serwardt"]').val(moment(ajaxOutput.Data[0].ServiceWarrantyDate).format('YYYY-MM-DD'));
                                    $thisForm.find('[name="WarrantyAmount"]').val(Number(ajaxOutput.Data[0].Amount).toFixed(2));
                                    $thisForm.find('[name="WarrantyTaxAmount"]').val(Number(ajaxOutput.Data[0].TaxAmount).toFixed(2));
                                    $thisForm.find('[name="WarrantyNetAmount"]').val(Number(ajaxOutput.Data[0].NetAmount).toFixed(2));
                                }
                                else {
                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': ajaxOutput.Data[0].ErrMsg });
                                    $thisForm.find('[name="Replcwardt"]').val(moment('').format('YYYY-MM-DD'));
                                    $thisForm.find('[name="Serwardt"]').val(moment('').format('YYYY-MM-DD'));
                                    $thisForm.find('[name="WarrantyAmount"]').val('');
                                    $thisForm.find('[name="WarrantyTaxAmount"]').val('');
                                    $thisForm.find('[name="WarrantyNetAmount"]').val('');
                                }
                            }

                        },
                        complete: function () {
                            $(ele).prop('disabled', false);

                        }
                    });

        }

         function AMCWarrantyAMC(ele,type) {
            let $thisForm = $(ele).closest('[perfect-class="form"]');
             var InputData =
             {
                 Mode: 2,
                 FK_Type: $thisForm.find('[name="AMCType"]').val(),
                 Date: $thisForm.find('[name="SalBillDate"]').val(),
                 Quantity: $thisForm.find('[name="SpdSalQuantity"]').val(),
             }


                    $.ajax({
                    url: "@Url.Action("GetAMCWarrantydetails", "Sales")",
                    type: "POST",
                    data: InputData,
                    dataType: "json",
                    contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                        success: function (ajaxOutput) {
                            if (ajaxOutput.Process.IsProcess) {
                                if (ajaxOutput.Data[0].ErrCode != -100) {
                                    $thisForm.find('[name="NoOfServices"]').val(ajaxOutput.Data[0].NoOfServices);
                                    $thisForm.find('[name="AMCDuedate"]').val(moment(ajaxOutput.Data[0].AMCDuedate).format('YYYY-MM-DD'));
                                    $thisForm.find('[name="AMCRenewduedate"]').val(moment(ajaxOutput.Data[0].AMCRenewduedate).format('YYYY-MM-DD'));
                                    $thisForm.find('[name="AmcAmount"]').val(Number(ajaxOutput.Data[0].AmcAmount).toFixed(2));
                                    $thisForm.find('[name="AMCTaxAmount"]').val(Number(ajaxOutput.Data[0].AMCTaxAmount).toFixed(2));
                                    $thisForm.find('[name="AMCNetAmount"]').val(Number(ajaxOutput.Data[0].AMCNetAmount).toFixed(2));
                                }
                                else {
                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': ajaxOutput.Data[0].ErrMsg });
                                    $thisForm.find('[name="NoOfServices"]').val('');
                                    $thisForm.find('[name="AMCDuedate"]').val(moment('').format('YYYY-MM-DD'));
                                    $thisForm.find('[name="AMCRenewduedate"]').val(moment('').format('YYYY-MM-DD'));
                                    $thisForm.find('[name="AmcAmount"]').val('');
                                    $thisForm.find('[name="AMCTaxAmount"]').val('');
                                    $thisForm.find('[name="AMCNetAmount"]').val('');
                                }
                            }

                        },
                        complete: function () {
                            $(ele).prop('disabled', false);

                        }
                    });

        }
        function BindWarrantyAmount(ele) {
            let $thisForm = $(ele).closest('[perfect-class="form"]');
            let sum = 0;
            let amcnet = 0;
            let AMCNetTotalAmt;
            let AMCTaxTotalAmt;
            let AmcTotalAmount;
            let AMCMRenewduedate;
            let AMCMDuedate;
            $thisForm.find('[name=WarrantyTotalAmt]').val('');
            $thisForm.find('[name=PpdRate]').val() == "" ? "0" : $thisForm.find('[name=PpdRate]').val();
            $('#Warrantydetailhd').find('tbody tr').each(function (index, ele) {
                sum = sum + parseFloat($(ele).find('.WarrantyNetAmount').text());
            });

            $thisForm.find('[name=WarrantyTotalAmt]').val('');
            $thisForm.find('[perfect-tempTable-Purchase="WarrantyTotalAmt"]').val('');
            $thisForm.find('[perfect-tempTable-Purchase="WarrantyTotalAmt"]').val(sum.toFixed(2));
            $thisForm.find('[name=WarrantyTotalAmt]').val(sum.toFixed(2));

            calcsalpttledit(ele);
        }

        function ImageLoadAMC(ele) {
                let $thisForm = $(ele).closest('[perfect-class="form"]');

                if ($thisForm.find('[name="ProductID"]').val() == '' || $thisForm.find('[name="ProductID"]').val() == null) {
                    NotificationMessage({ 'message': 'Please Select Product' });
                }
                else {
                    $('#formGroupModalwarrantyimg').modal({ backdrop: 'static', keyboard: false })
                    $('#formGroupModalwarrantyimg').modal('show');
                    let prdid = $thisForm.find('[name="ProductID"]').val();

                    let stkid = $thisForm.find('[name="StockId"]').val();
                    let $amcimgContainer = $('#Image-img');


                    $amcimgContainer.load('@Url.Action("LoadMultipleImageForm", "CommonPopupSearch", new { mode = 26 })', function () {
                        wartype = -1;
                        if ($thisForm.data('pImageselect')) {

                            WarProductImagelst = [];
                            if ($thisForm.data('pImageselect').length > 0) {

                                WarProductImagelst = $thisForm.data('pImageselect');
                                console.log("WarProductImagelst", WarProductImagelst)
                                for (var i = 0; i < WarProductImagelst.length; i++) {
                                    if (!WarProductImagelst[i].ProdImage.includes("data:image/;base64,")) {
                                        WarProductImagelst[i].ProdImage = "data:image/;base64," + WarProductImagelst[i].ProdImage;
                                    }

                                }


                            }
                        }
                        uStockId = stkid;
                        uproductid = prdid;
                        imagemode = 5;
                    });
                }
        }
        function ResetAMCandWarranty1(ele) {
            let $thisForm = $(ele).closest('[perfect-class="form"]');
            let oldvalue = ele.oldvalue;
            let current = ele.value;
            let currentqty = $thisForm.find('[name=SpdSalQuantity]').val();
            let nettotalamc = 0;

            if ($thisForm.data('amcdatadata') || $thisForm.data('amcdatadata')) {
                let confirmationDialogBoxOption = { heading: "Warning", body: "<b>Change Quantity will Reset Sub Product Serial Number, Warranty and AMC Details.  </b>" + "Do you want to continue? ", cancel: "No", confirm: "Yes" };
                var confirmBoxObj = ConfirmDialog(confirmationDialogBoxOption);
                debugger
                confirmBoxObj.then(function (selectedOption) {
                    if (selectedOption) {
                        productclear(ele, 'Warranty');
                        productclear(ele, 'AMC');
                        localStorage.removeItem("WarProductImage");
                        warrantydetails = [];
                        $thisForm.data({ pwarranty: null });
                        $thisForm.data({ pImageselect: null });
                        $thisForm.data({ amcdatadata: '' });

                        calcsalpttl(ele);
                        $thisForm.find('[name="AMCMType"]').val('');
                        $thisForm.find('[name="AMCNoOfServices"]').val('');
                        $thisForm.find('[name="AMCMDuedate"]').val('');
                        $thisForm.find('[name="AMCMRenewduedate"]').val('');
                        $thisForm.find('[name="AmcTotalAmount"]').val('');
                        $thisForm.find('[name="AMCTaxTotalAmt"]').val('');
                        $thisForm.find('[name="AMCNetTotalAmt"]').val(parseFloat(nettotalamc).toFixed(2));
                        $thisForm.find('[name="AMCRemarks"]').val('');
                    }
                    else {
                        $thisForm.find('[name=SpdSalQuantity]').val(ele.oldvalue)
                    }
                });
            }
            else {
                calcsalpttl(ele);
            }
        }
        function ResetAMCandWarranty2(ele) {
            let $thisForm = $(ele).closest('[perfect-class="form"]');
            let oldvalue = ele.oldvalue;
            let current = ele.value;
            let currentqty = $thisForm.find('[name=SpdSalQuantity]').val();
            let nettotalamc = 0;
            debugger
            let stkid = $('[name="StockId"]').val();
            var wardetails = [];
            var amcdetails = [];
            var warobject = [];
            var amcobject = [];
            debugger
            if ($thisForm.data('amcdatadata') || $thisForm.data('pwarranty')) {
                if ($thisForm.data('pwarranty')) {
                    if ($thisForm.data('pwarranty').length > 0) {
                        warrantydetails = $thisForm.data('pwarranty');
                    }
                    if (warrantydetails != null) {
                        warobject = warrantydetails.filter(obj => obj.stkid.toString() === stkid.toString());
                    }
                }

                if ($thisForm.data('amcdatadata')) {
                    if ($thisForm.data('amcdatadata').length > 0) {
                        amcdetails = $thisForm.data('amcdatadata');
                    }
                    if (amcdetails != null) {
                        amcobject = amcdetails.filter(obj => obj.AMCFK_Master.toString() === stkid.toString());
                    }
                }
                if (warobject.length > 0 || amcobject.length > 0) {
                    let confirmationDialogBoxOption = { heading: "Warning", body: "<b>Change Quantity will Reset Warranty and AMC Details.  </b>" + "Do you want to continue? ", cancel: "No", confirm: "Yes" };
                    var confirmBoxObj = ConfirmDialog(confirmationDialogBoxOption);
                    debugger
                    confirmBoxObj.then(function (selectedOption) {
                        if (selectedOption) {
                            productclear(ele, 'Warranty');
                            productclear(ele, 'AMC');

                            debugger
                            let stkids = $thisForm.find('[name="StockId"]').val();
                            if (warobject.length > 0) {
                                let dwardata = [];
                                dwardata = warrantydetails.filter(obj => obj.stkid.toString() === stkids.toString());
                                const dwindexOfObj = dwardata.findIndex(object => {
                                    return object.stkid.toString() === stkids.toString();
                                });
                                warrantydetails.splice(dwindexOfObj, dwardata.length);
                                let $tblcontainer = $thisForm.find('[perfect-tempTable="Warranty"]');
                                $tblcontainer.empty();
                            }
                            if (amcobject.length > 0) {
                                $thisForm.find('[name="AMCFK_Master"]').val('');
                                $thisForm.find('[name="AMCMType"]').val('');
                                $thisForm.find('[name="AMCNoOfServices"]').val('');
                                $thisForm.find('[name="AMCMDuedate"]').val('');
                                $thisForm.find('[name="AMCMRenewduedate"]').val('');
                                $thisForm.find('[name="AMCRemarks"]').val('');
                                $thisForm.find('[name="AmcTotalAmount"]').val('');
                                $thisForm.find('[name="AMCTaxTotalAmt"]').val('');
                                $thisForm.find('[name="AMCNetTotalAmt"]').val(parseFloat(nettotalamc).toFixed(2));
                                $thisForm.find('[name="AMCRemarks"]').val('');
                                $thisForm.data({ amcdatadata: '' });
                            }

                            let Saveddata = $(this).closest('tr').data('pData')
                            let $tablecontainer = $(this).closest('[perfect-tempTable]');
                            let tableKey = $tablecontainer.attr('perfect-tempTable');
                            let $thistbl = $(this).closest('table');
                            let table = $thistbl.DataTable();
                            table.destroy();
                            if ($(this).closest('tbody').find('tr').length > 1) {
                                $(this).closest('tr').remove();
                                pft_table_slreset($thistbl);
                            }
                            else {
                                $thistbl.remove();
                            }

                            /////////warranty clear//////// product wise
                            $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                            let dprdid;
                            let prdid;
                            let dwartyp;
                            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                                let $thisNode = $(this);
                                let pf_name = $thisNode.attr('name');
                                console.log('pf_name', pf_name)
                                if (pf_name == "WarrantyType") {
                                    dwartyp = Saveddata[pf_name];
                                    console.log('WarrantyTypename', pf_name)
                                }
                            });
                            debugger
                            stkids = $thisForm.find('[name="StockId"]').val();
                            console.log('dwartyp', dwartyp)
                            let dWarProductImagelst = [];
                            let subwarproduct = [];
                            let dwarproduct = [];

                            dWarProductImagelst = JSON.parse(localStorage.getItem('WarProductImage'));
                            console.log('dWarrantyProductImagelst', dWarProductImagelst)
                            if (dWarProductImagelst != null) {
                                dwarproduct = dWarProductImagelst.filter(obj => obj.stkid.toString() === stkids.toString());
                                subwarproduct = dwarproduct.filter(obj => obj.WarrantyType.toString() === dwartyp.toString());
                                const dwindexOfObject = dwarproduct.findIndex(object => {
                                    return object.WarrantyType.toString() === dwartyp.toString();
                                });
                                dWarProductImagelst.splice(dwindexOfObject, subwarproduct.length);

                                localStorage.setItem('WarProductImage', JSON.stringify(dWarProductImagelst));
                                console.log('dWarrantyProductImagelst1', dWarProductImagelst)
                                $thisForm.data({ pImageselect: dWarProductImagelst });

                            }
                        }
                        else {
                            debugger
                            $thisForm.find('[name=SpdSalQuantity]').val(ele.oldvalue)
                        }
                    });
                }
                else {
                    calcsalpttl(ele);
                }

            }
            else {
                calcsalpttl(ele);
            }


        }


        function ShowCustomerBalance(ele) {

            let $thisForm = $(ele).closest('[perfect-class="form"]');
            //if ($thisForm.find('[name="PpdQuantity"]').val().length > 0) {
            //let searchValue = {
            //    Name: $thisForm.find('[name=PpdShortage]').val()
            //};
            if ($thisForm.find('[name=CustomeName]').val() != '') {
            let $model = $(ele).closest('[perfect-class="formGroup"]').find('[perfect-class="formGroupModalCustomerBalance"]');
            $('#ShowCustomerBalance').modal({ backdrop: 'static', keyboard: false });
            $(ele).closest('[perfect-class="formGroup"]').find('[perfect-class="formGroupModalCustomerBalance"]').modal('show');
            fn_GetCustomerAccountBalanceSales(ele)
            }
            else {
                NotificationMessage({
                    'type': 'info', 'heading': 'info', 'message': "Please select Import From"
                });
            }
            //}
            //else {

            //    $(ele).closest('[perfect-class="formGroup"]').find('.temptableError').text('Please Enter Quantity');
            //}
        }
    function fn_GetCustomerAccountBalanceSales(ele) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let FK_Customer = 0;

        console.log('FK_CustomerOthers',$thisForm.find('[name=FK_CustomerOthers]').val())
        console.log('ID_Customer',$thisForm.find('[name=ID_Customer]').val())
        console.log('FK_Lead',$thisForm.find('[name=FK_Lead]').val())
        console.log('FK_Customer', $thisForm.find('[name=FK_Customer]').val())
        console.log('FK_Salesorder',$thisForm.find('[name=FK_Salesorder]').val())


            if ($thisForm.find('[name=ID_Customer]').val() != "") {
                FK_Customer = $thisForm.find('[name=ID_Customer]').val();
            }
            else if ($thisForm.find('[name=FK_Customer]').val() != "") {
                FK_Customer = $thisForm.find('[name=FK_Customer]').val();
            }
            else if ($thisForm.find('[name=FK_CustomerOthers]').val() != "") {
                FK_Customer = $thisForm.find('[name=FK_CustomerOthers]').val();
            }
            else {
                FK_Customer = $thisForm.find('[name=FK_Customer]').val();
            }


            var obj = {
                FK_Customer: FK_Customer,
                TransDate: $thisForm.find('[name=SalBillDate]').val(),
            }

            $.ajax({
                url: "@Url.Action("getGetCustomerAccountBalance", "Sales")",
                type: "POST",
                data: obj,
                dataType: "json",
                contentType: "application/x-www-form-urlencoded;charset=utf-8",
                success: function (ajaxOutput) {
                    $('#Accountbalancedetailss').html('')
                    if (ajaxOutput.Process.IsProcess) {

                        let table = JSON.parse(ajaxOutput.Data);
                        $('#Accountbalancedetailss').html(pft_table_createtable(table.dtable, { serialNo: true }))
                        document.getElementById("Accountbalancedetails").style.display = 'none';
                        var dataTable = table.dtable;
                        //$('#accountbadge').html(dataTable.length);
                    }
                    else {


                        //$('#accountbadge').html(0);
                        document.getElementById("Accountbalancedetails").style.display = 'block';
                        $('#Accountbalancedetails').html("<p style='text-align:center;' >No Records..</p>");
                        $('#Accountbalancedetailss').html('')
                    }
                }

            });

    }
   
        function fn_bindEwaybilldetils(ele) {
            debugger

            let $thisForm = $(ele).closest('[perfect-class="form"]');
         let errorClass = '.temptableError';
            let isValid = true;

            //if ($thisForm.find("[name='EWaybillNo']").val() == "" || $thisForm.find("[name='EWaybillNo']").val() <= 0 || $thisForm.find("[name='EWaybillNo']").val() == undefined) {
            //        isValid = false;
            //    $thisForm.find("[name='EWaybillNo']").closest('[perfect-class="formGroup"]').find(errorClass).text('Please Enter E-Way Bill No');
            //}
            let paymentdetails = [];
            $thisForm.find('[perfect-tempTable="Payment"]').find('tbody').find('tr').each(function () {
                paymentdetails.push($(this).data('pData'));
               
            })

            var tablerecalculaterows = $("#SalesBillDetails tr");
            let SalebillDetails = [];
            if (tablerecalculaterows.length > 0) {
                $('#SalesBillDetails tr').each(function (index, ele) {
                    let BillInfo = {};
                    BillInfo['Header'] = $(this).find('.jq_Header_td').text();
                    BillInfo['Existing'] = $(this).find('.jq_Existing_td').text();
                    BillInfo['New'] = $(this).find('.jq_New_td').text();
                    SalebillDetails.push(BillInfo);
                }
                );
                console.log(SalebillDetails, 'SalebillDetails');

            }
            
            if ($thisForm.valid() && isValid == true) {
                debugger
            if (BillAmountbind(ele)) {
                var inputData =
                {
                    __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                    SalesID: $thisForm.find('[name=SalesID]').val(),
                    EWaybillNo: $thisForm.find('[name=EWaybillNo]').val(),
                    Discount: $thisForm.find('[name="PaymentDiscount"]').val() == "" ? "0" : $thisForm.find('[name="PaymentDiscount"]').val(),
                    ItemWise: $thisForm.find('[name=PMItemwise]').is(":checked"),
                    'PaymentDetail': paymentdetails,
                    'SalebillDetails': SalebillDetails
                }


                $.ajax({
                    url: "@Url.Action("UpdateSalEwaybill", "Sales")",
                    type: "POST",
                    data: inputData,
                    dataType: "json",
                    contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                    success: function (ajaxOutput) {
                        
                        if (ajaxOutput.Process.IsProcess) {

                            $.each(ajaxOutput.Process.Message, function (key, value) {
                                //toastr.success(value, "Success");
                                NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': 'Updated Successfully' });
                            });
                            $('#formGroupModalewaybillno').modal('hide');
                            fn_SaleIndex_initialLoad();


                        }
                        else {

                            $.each(ajaxOutput.Process.Message, function (key, value) {
                               
                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message':'Settlement already done' });
                            });


                        }
                    },
                    complete: function () {

                    }
                });
            }
            else {
                $(ele).prop('disabled', false);
                NotificationMessage({ 'type': 'error', 'heading': 'Warning', 'message': 'In Payment Method Balance Amt. Should be  Zero ' });

            }
            }
        }

        function Ewaybillbind(ele) {
            DisplayPaymentMethod(this);
          
            $('#formGroupModalewaybillno').modal('show');
        }


        function fn_cleardetails(ele) {
            let $thisForm = $(ele).closest('[perfect-class="form"]');
            $thisForm.find('[name=EWaybillNo]').val('');
            $thisForm.find('[name=PaymentDiscount]').val('');
           // $thisForm.find('[name=PMItemwise]').val('');
            $thisForm.find('[name=PMItemwise]').prop('checked', false);
            $thisForm.find('[name=OtherChargepopup]').val('');
          //  $("#SalesBillDetails").html('');
            $("#PaymentDiscount").attr('readonly', false);
            $("#PMItemwise").prop('disabled', false);
            $("#btnOtherchargepopup").prop('disabled', false);
            clearOthercharge();
        }
 
    function clearOthercharge() {
        debugger
           
        let $thisForm = $('[perfect-class="form"]');
        
        let inputData = {
            __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
           
            TransMode: SalesTransMode
        };
                $.ajax({
                url: '@Url.Action("ClearOtherCharges", "Sales")',
                    type: "Get",
                    data: inputData,
                dataType: "json",
                contentType: "application/json",
                    success: function (ajaxOutput) {//<----- if ajax method executed succesfully,  we get the data passed from controller in this variable  => success: function (variable) {
                        
                       

             },


        });
      


     }


        function GetWarrantylists(ele, mode) {

            let $thisForm = $(ele).closest('[perfect-class="form"]');
            let Amctype = $thisForm.find('[name="AMCMType"]').val();
            let NoOfServices = $thisForm.find('[name="AMCNoOfServices"]').val();
            let AMCDuedate = $thisForm.find('[name="AMCMDuedate"]').val();
            let AMCRenewduedate = $thisForm.find('[name="AMCMRenewduedate"]').val();
            let AmcAmount = $thisForm.find('[name="AmcTotalAmount"]').val();
            let AMCTaxAmount = $thisForm.find('[name="AMCTaxTotalAmt"]').val();
            let AMCNetAmount = $thisForm.find('[name="AMCNetTotalAmt"]').val();
            let AmRemarks = $thisForm.find('[name="AMCRemarks"]').val();

            productclear(ele, "Warranty");
            if ($thisForm.find('[name="ProductID"]').val() == '' || $thisForm.find('[name="ProductID"]').val() == null) {
                NotificationMessage({ 'message': 'Please Select Product' });
            }
            else {
                let prdid = $thisForm.find('[name="ProductID"]').val();
                let stkid = $thisForm.find('[name="StockId"]').val();
                $thisForm.find('[name="stkid"]').val(stkid);
                $thisForm.find('[name="prodtid"]').val(prdid);
                var warobject = [];
                debugger
                console.log("$thisForm.data('pwarranty')>>>>>>>", $thisForm.data('pwarranty'))
                //if ($thisForm.data('pwarranty')) {

                //    if ($thisForm.data('pwarranty').length > 0) {

                //        warrantydetails = $thisForm.data('pwarranty');

                //        console.log("warrantydetailsed", warrantydetails)
                //    }
                //}
                //if (warrantydetails != null ) {
                //    debugger
                //    if (warrantydetails.length > 0) {
                //        TempWarrantyDetails = TempWarrantyDetails.concat(warrantydetails);//CONCATENATION

                //        //warobject = TempWarrantyDetails.filter(obj => obj.stkid.toString() === stkid.toString());
                //        //const indexOfObject = TempWarrantyDetails.findIndex(object => {
                //        //    return object.stkid.toString() === stkid.toString();
                //        //});
                //        //TempWarrantyDetails.splice(indexOfObject, warobject.length);
                //    }
                //}
                //else
                if (TempWarrantyDetails != null) {
                    if (TempWarrantyDetails.length > 0) {
                        warobject = TempWarrantyDetails.filter(obj => obj.stkid.toString() === stkid.toString());
                    }
                }

                $('#formGroupModalwarranty').modal({ backdrop: 'static', keyboard: false })
                console.log('warobject', warobject)
                if (mode == 0) {
                    $('#formGroupModalwarranty').modal('show');
                }
                else {
                    $('#formGroupModalwarranty').modal('hide');
                }

                if (warobject != null) {
                    if (warobject.length > 0) {
                        if (warobject[0]['stkid'] == stkid) {
                            fillgrid('Warranty', wartableOptionsTempOut, $thisForm, warobject);
                        }

                    } else {
                        $thisForm.find('[perfect-tempTable= "Warranty"]').empty();
                    }
                }
                console.log('WARRAYNTY NET AMOUNT', warobject)
                debugger

                let AMCdet = $thisForm.data('amcdatadata');
                if (AMCdet) {
                    if (AMCdet[0]['AMCFK_Master'] == stkid) {
                        if ($thisForm.data('amcdatadata')) {
                            $.each(AMCdet, function (key, value1) {
                                $thisForm.find('[name="AMCFK_Master"]').val(value1.AMCFK_Master);
                                $thisForm.find('[name="AMCType"]').val(value1.AMCType).selectpicker('refresh');
                                $thisForm.find('[name="NoOfServices"]').val(value1.NoOfServices);
                                $thisForm.find('[name="AMCDuedate"]').val(value1.AMCDuedate);
                                $thisForm.find('[name="AMCRenewduedate"]').val(value1.AMCRenewduedate);
                                $thisForm.find('[name="AmcAmount"]').val(value1.AmcAmount);
                                $thisForm.find('[name="AMCTaxAmount"]').val(value1.AMCTaxAmount);
                                $thisForm.find('[name="AMCNetAmount"]').val(value1.AMCNetAmount);
                                $thisForm.find('[name="AmRemarks"]').val(value1.AmRemarks);
                            });

                        }
                    }
                }
                else {
                    $thisForm.find('[name="AMCFK_Master"]').val('');
                    $thisForm.find('[name="AMCType"]').val('').selectpicker('refresh');
                    $thisForm.find('[name="NoOfServices"]').val('');
                    $thisForm.find('[name="AMCDuedate"]').val('');
                    $thisForm.find('[name="AMCRenewduedate"]').val('');
                    $thisForm.find('[name="AmcAmount"]').val('');
                    $thisForm.find('[name="AMCTaxAmount"]').val('');
                    $thisForm.find('[name="AMCNetAmount"]').val('');
                    $thisForm.find('[name="AmRemarks"]').val('');
                }
            }

        }

        function warrantydet(ele) {
            debugger
            let $thisForm = $(ele).closest('[perfect-class="form"]');
            let prdid = $thisForm.find('[name="ProductID"]').val();
            let stkid = $thisForm.find('[name="StockId"]').val();

            let AMCType = $thisForm.find('[name="AMCType"]').val();
            let NoOfServices = $thisForm.find('[name="NoOfServices"]').val();
            let AMCDuedate = $thisForm.find('[name="AMCDuedate"]').val();
            let AMCRenewduedate = $thisForm.find('[name="AMCRenewduedate"]').val();
            let AmcAmount = $thisForm.find('[name="AmcAmount"]').val();
            let AMCTaxAmount = $thisForm.find('[name="AMCTaxAmount"]').val();
            let AMCNetAmount = $thisForm.find('[name="AMCNetAmount"]').val();
            let AmRemarks = $thisForm.find('[name="AmRemarks"]').val();

            debugger
            var uwarobject = [];
            if (TempWarrantyDetails != null) {
                uwarobject = TempWarrantyDetails.filter(obj => obj.stkid.toString() === stkid.toString());
                const indexOfObject = TempWarrantyDetails.findIndex(object => {
                    return object.stkid.toString() === stkid.toString();
                });

                TempWarrantyDetails.splice(indexOfObject, uwarobject.length);
            }
            console.log(warrantydetails);
            $thisForm.find('[perfect-tempTable="Warranty"]').find('tbody').find('tr').each(function () {
                console.log('sadd', $(this).data('pData'))
                TempWarrantyDetails.push($(this).data('pData'));
            })
            console.log('warrantydetails', warrantydetails)

            var AMC = [];
            let Amcdetails = {
                AMCFK_Master: stkid,
                AMCType: AMCType,
                NoOfServices: NoOfServices,
                AMCDuedate: AMCDuedate,
                AMCRenewduedate: AMCRenewduedate,
                AmcAmount: AmcAmount,
                AMCTaxAmount: AMCTaxAmount,
                AMCNetAmount: AMCNetAmount,
                AmRemarks: AmRemarks
            }
            AMC.push(Amcdetails);
            console.log('Amcdetails', Amcdetails);

            $thisForm.data({ amcdatadata: AMC });

            let AMCdet = $thisForm.data('amcdatadata');
            if ($thisForm.data('amcdatadata')) {
                $.each(AMCdet, function (key, value1) {
                    $thisForm.find('[name="AMCFK_Master"]').val(value1.AMCFK_Master);
                    $thisForm.find('[name="AMCMType"]').val(value1.AMCType).selectpicker();
                    $thisForm.find('[name="AMCNoOfServices"]').val(value1.NoOfServices);
                    $thisForm.find('[name="AMCMDuedate"]').val(moment(value1.AMCDuedate).format('YYYY-MM-DD'));
                    $thisForm.find('[name="AMCMRenewduedate"]').val(moment(value1.AMCRenewduedate).format('YYYY-MM-DD'));
                    $thisForm.find('[name="AmcTotalAmount"]').val(value1.AmcAmount);
                    $thisForm.find('[name="AMCTaxTotalAmt"]').val(value1.AMCTaxAmount);
                    $thisForm.find('[name="AMCNetTotalAmt"]').val(value1.AMCNetAmount);
                    $thisForm.find('[name="AMCRemarks"]').val(value1.AmRemarks);
                });
            };

            $('#formGroupModalwarranty').modal('hide');
            calcsalpttl(ele)
        }

        function Warrantyadd(ele) {
            let $thisForm = $('[perfect-class="form"]');
            let stkid = $thisForm.find('[name="StockId"]').val();

            var uwarobject = [];
            if (warrantydetails != null) {
                if (warrantydetails.length > 0) {
                    debugger
                    uwarobject = warrantydetails.filter(obj => obj.stkid.toString() === stkid.toString());
                    const indexOfObject = warrantydetails.findIndex(object => {
                        return object.stkid.toString() === stkid.toString();
                    });
                    warrantydetails.splice(indexOfObject, uwarobject.length);
                }
            }
            if (TempWarrantyDetails != null) {
                if (TempWarrantyDetails.length > 0) {
                    warrantydetails = warrantydetails.concat(TempWarrantyDetails);
                }
            }

            TempWarrantyDetails = [];
        }
        function fillWarrantyDetails(ele, StockId) {

            debugger
            TempWarrantyDetails = [];
            uwarobject = [];
            if (warrantydetails != null) {
                if (warrantydetails.length > 0) {
                    debugger
                    uwarobject = warrantydetails.filter(obj => obj.stkid.toString() === StockId.toString());
                    const indexOfObject = warrantydetails.findIndex(object => {
                        return object.stkid.toString() === StockId.toString();
                    });
                }
            }

            TempWarrantyDetails = TempWarrantyDetails.concat(uwarobject);
    }
    function productcleardep(ele, tablekey) {
        debugger
        let $thisform = $(ele).closest('[perfect-class="form"]');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
       // $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="select"]').val('').selectpicker('refresh');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="date"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="hidden"]').val('');

        let $tblcontainer = $thisform.find('[perfect-tempTable="' + tablekey + '"]');
        $tblcontainer.attr('perfect-tempTable-action', 0);
        debugger
        if (tablekey == "Purchase") {

            $thisform.find('[name=prdbtn]').removeAttr("disabled", "disabled");

            //document.getElementById('stockZero').style.display = "none";
            //document.getElementById('stockZero1').style.display = "none";
            //DisableProductdetails(this, false, 0);

        }
        else if (tablekey == "Warranty") {

            //warrantydetails = [];
        }
        else if (tablekey == "Payment") {

        }
        else if (tablekey == "SerialNumber") {
            productSerialNumTempListPop = [];
        }
    }

    function productclear(ele, tablekey) {
        debugger
            let $thisform = $(ele).closest('[perfect-class="form"]');
            $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
            $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="select"]').val('').selectpicker('refresh');
            $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
            $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="date"]').val('');
            $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="hidden"]').val('');
           
            let $tblcontainer = $thisform.find('[perfect-tempTable="' + tablekey + '"]');
            $tblcontainer.attr('perfect-tempTable-action', 0);
            debugger
        if (tablekey == "Purchase") {

                $thisform.find('[name=prdbtn]').removeAttr("disabled", "disabled");
                 //commented for indora client//$thisform.find('[name="FK_Department"]').val(@ViewBag.FK_Department).selectpicker('refresh');
                //document.getElementById('stockZero').style.display = "none";
                //document.getElementById('stockZero1').style.display = "none";
                //DisableProductdetails(this, false, 0);

            }
            else if (tablekey == "Warranty") {

                //warrantydetails = [];
            }
            else if (tablekey == "Payment") {

            }
            else if (tablekey == "SerialNumber") {
                productSerialNumTempListPop = [];
            }
        }
    function ProductDetailsclear(ele, tablekey) {
        debugger
        let $thisform = $(ele).closest('[perfect-class="form"]');
    
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="select"]').val('').selectpicker('refresh');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="date"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="hidden"]').val('');
        }
       
    function ResetAMCandWarranty(ele/*, oldvalue*/) {
        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let ctstk = parseFloat($thisForm.find('[name="CrntQnty"]').val()) || 0;
            let oldvalue = ele.oldvalue;
        //let current = ele.value;
       
        let currentqty = parseFloat($thisForm.find('[name=SpdSalQuantity]').val()) || 0;

        if (currentqty > ctstk && ChekStandBy1 == "True") {
            let balStck = parseFloat(ctstk) - parseFloat(currentqty);
            $thisForm.find('[name="StandByQuantity"]').val(Math.abs(balStck).toFixed(3));
        } else {
            $thisForm.find('[name="StandByQuantity"]').val(0.000.toFixed(3));
        }



            let nettotalamc = 0;
            let nettotalwar = 0;
            debugger
            let stkid = $('[name="StockId"]').val();
            var wardetails = [];
            var amcdetails = [];
            var warobject = [];
            var amcobject = [];
            let ProductSerial = productSerialNumTemp.filter(obj => obj.FK_MasterID.toString() == $('[name="StockId"]').val().toString() && obj.FK_Stock.toString() != $('[name="StockId"]').val().toString());
            let Subproduct = SubproductDetailsTemp.filter((obj => obj.Master_ID.toString() == $('[name="StockId"]').val().toString()));
            debugger
            if ((($thisForm.data('amcdatadata') || TempWarrantyDetails.length > 0) && MappedWty == 0) || Subproduct.length > 0 || ProductSerial.length>0) {


                if ($thisForm.data('amcdatadata')) {
                    if ($thisForm.data('amcdatadata').length > 0) {
                        amcdetails = $thisForm.data('amcdatadata');
                    }
                    if (amcdetails != null) {
                        amcobject = amcdetails.filter(obj => obj.AMCFK_Master.toString() === stkid.toString());
                    }
                }
                if (TempWarrantyDetails.length > 0 || amcobject.length > 0 || Subproduct.length > 0 || ProductSerial.length > 0) {
                    let confirmationDialogBoxOption = { heading: "Warning", body: "<b>Change Quantity will Reset Warranty, AMC Details and Sub Product Serial Numbers. </b>" + "Do you want to continue? ", cancel: "No", confirm: "Yes" };
                    var confirmBoxObj = ConfirmDialog(confirmationDialogBoxOption);
                    debugger
                    confirmBoxObj.then(function (selectedOption) {
                        if (selectedOption) {
                            calcsalpttl(ele);
                            productclear(ele, 'Warranty');
                            productclear(ele, 'AMC');
                            productclear(ele, 'SerialNumber');
                            $("#Warrantydetailhd").empty();
                            debugger
                            let stkids = $thisForm.find('[name="StockId"]').val();
                            if (TempWarrantyDetails.length > 0) {
                                TempWarrantyDetails = [];
                                let $tblcontainer = $thisForm.find('[perfect-tempTable="Warranty"]');
                                $tblcontainer.empty();
                            }
                            if (amcobject.length > 0) {
                                $thisForm.find('[name="AMCFK_Master"]').val('');
                                $thisForm.find('[name="AMCMType"]').val('');
                                $thisForm.find('[name="AMCNoOfServices"]').val('');
                                $thisForm.find('[name="AMCMDuedate"]').val('');
                                $thisForm.find('[name="AMCMRenewduedate"]').val('');
                                $thisForm.find('[name="AMCRemarks"]').val('');
                                $thisForm.find('[name="AmcTotalAmount"]').val('');
                                $thisForm.find('[name="AMCTaxTotalAmt"]').val('');
                                $thisForm.find('[name="AMCNetTotalAmt"]').val(parseFloat(nettotalamc).toFixed(2));
                                $thisForm.find('[name="WarrantyTotalAmt"]').val(parseFloat(nettotalwar).toFixed(2));
                                $thisForm.find('[name="AMCRemarks"]').val('');
                                $thisForm.data({ amcdatadata: '' });
                            }

                            let Saveddata = $(this).closest('tr').data('pData')
                            let $tablecontainer = $(this).closest('[perfect-tempTable]');
                            let tableKey = $tablecontainer.attr('perfect-tempTable');
                            let $thistbl = $(this).closest('table');
                            let table = $thistbl.DataTable();
                            table.destroy();
                            if ($(this).closest('tbody').find('tr').length > 1) {
                                $(this).closest('tr').remove();
                                pft_table_slreset($thistbl);
                            }
                            else {
                                $thistbl.remove();
                            }

                            /////////warranty clear//////// product wise
                            $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                            let dprdid;
                            let prdid;
                            let dwartyp;
                            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                                let $thisNode = $(this);
                                let pf_name = $thisNode.attr('name');
                                console.log('pf_name', pf_name)
                                if (pf_name == "WarrantyType") {
                                    dwartyp = Saveddata[pf_name];
                                    console.log('WarrantyTypename', pf_name)
                                }
                            });
                            debugger
                            stkids = $thisForm.find('[name="StockId"]').val();
                            console.log('dwartyp', dwartyp)
                            let dWarProductImagelst = [];
                            let subwarproduct = [];
                            let dwarproduct = [];

                            dWarProductImagelst = JSON.parse(localStorage.getItem('WarProductImage'));
                            console.log('dWarrantyProductImagelst', dWarProductImagelst)
                            if (dWarProductImagelst != null) {
                                dwarproduct = dWarProductImagelst.filter(obj => obj.stkid.toString() === stkids.toString());
                                subwarproduct = dwarproduct.filter(obj => obj.WarrantyType.toString() === dwartyp.toString());
                                const dwindexOfObject = dwarproduct.findIndex(object => {
                                    return object.WarrantyType.toString() === dwartyp.toString();
                                });
                                dWarProductImagelst.splice(dwindexOfObject, subwarproduct.length);

                                localStorage.setItem('WarProductImage', JSON.stringify(dWarProductImagelst));
                                console.log('dWarrantyProductImagelst1', dWarProductImagelst)
                                $thisForm.data({ pImageselect: dWarProductImagelst });

                            }
                            if (Subproduct.length > 0 || ProductSerial.length > 0) {

                                debugger
                                console.log("SubproductDetailsTemp Before>>>>>>>>>>>>>>>>", SubproductDetailsTemp)
                                productSerialNumTemp = productSerialNumTemp.filter(obj => obj.FK_MasterID.toString() == $('[name="StockId"]').val().toString() && obj.FK_Stock.toString() == $('[name="StockId"]').val().toString());
                                SubproductDetailsTemp = SubproductDetailsTemp.filter((obj => obj.Master_ID.toString() != $('[name="StockId"]').val().toString()));
                                console.log("SubproductDetailsTemp Now>>>>>>>>>>>>>>>>", SubproductDetailsTemp)
                                //let $tblcontainer = $thisForm.find('[perfect-tempTable="SerialNumber"]');
                                //$tblcontainer.empty();
                            }
                            //$("#SerialNumberhead").empty();
                            debugger
                        }
                        else {
                            debugger
                            $thisForm.find('[name=SpdSalQuantity]').val(oldvalue);
                        }
                        //show sl no popup --start
                        debugger
                        //if (serialNumberPopup) {
                        //    $('#modalProductSerialNumbers').modal('show');
                        //}
                        //show sl no popup --end
                    });
                }

            }
            else {
                calcsalpttl(ele);
                //show sl no popup --start
                debugger
                //if (serialNumberPopup) {
                //    $('#modalProductSerialNumbers').modal('show');
                //}
                //show sl no popup --end
                MappedWty = 0;
            }


        }

        var MappedWty = 0;
      function GetProductWarranty(ele) {

           let $thisForm = $(ele).closest('[perfect-class="form"]');

           var InputData =
           {
               FK_Product: $thisForm.find('[name="ProductID"]').val(),
               TransDate: $thisForm.find('[name="SalBillDate"]').val(),
               stockId: $thisForm.find('[name="StockId"]').val(),
           }

           $.ajax({
               url: "@Url.Action("GetWarrantyInfo", "Sales")",
               type: "POST",
               data: InputData,
               dataType: "json",
               contentType: 'application/x-www-form-urlencoded; charset=utf-8',
               success: function (ajaxOutput) {
                   if (ajaxOutput.warrantyselect.Process.IsProcess) {
                       if (ajaxOutput.warrantyselect.Data.length > 0) {
                           let tempArr = [];

                           tempArr = ajaxOutput.warrantyselect.Data;
                           if (parseInt(tempArr.length) > 0) {
                               tempArr.map(val => {
                                   let warrantyInfo = {};

                                   warrantyInfo['Replcwardt'] = val.Replcwardt.substring(0, 10);
                                   warrantyInfo['Serwardt'] = val.Serwardt.substring(0, 10);
                                   warrantyInfo['WarrantyType'] = val.WarrantyType;
                                   warrantyInfo['WarrantyType_d'] = val.WarrantyType_d;
                                   warrantyInfo['prodtid'] = val.prodtid;
                                   warrantyInfo['subProName'] = val.subProName;
                                   warrantyInfo['stkid'] = val.stkid;
                                   warrantyInfo['subProductID'] = val.subProductID;
                                   warrantyInfo['WarrantyTaxAmount'] = val.WarrantyTaxAmount;
                                   warrantyInfo['WarrantyAmount'] = val.WarrantyAmount;
                                   warrantyInfo['WarrantyNetAmount'] = val.WarrantyNetAmount;
                                   TempWarrantyDetails.push(warrantyInfo);
                               });
                           }
                           calcsalpttl(ele);
                           MappedWty = 1;
                       }
                   }
               },
               complete: function () {
               }
           });
        console.log("gridWarrantyDetails", TempWarrantyDetails)

        }

        $("#pssModalOtherCharges").on('hide.bs.modal', function () {
            $("#OtherChargeSales").trigger("change");
            $("#OtherChargepopup").trigger("change");
        });
        function getfunctionAssignchnage(ele) {
            let $thisForm = $('[perfect-class="form"]');
            let $tempArr = $thisForm.data('popValueData');

            if ($tempArr.Fixed) {
                $('[name="SubQty"]').attr('readonly', 'readonly');
            }
            else {
                $('[name="SubQty"]').attr('readonly', false);
            }
            $('[name="SubQty"]').val(Number($tempArr.SubQty).toFixed(3));
        }
        function EditSubProductNumbers(ele) {
            debugger
            let $thisForm = $('[perfect-class="form"]');

            if ($('[name="Fixed"]').val()==1) {
                $('[name="SubQty"]').attr('readonly', 'readonly');
            }
            else {
                $('[name="SubQty"]').attr('readonly', false);
            }
    }

    function disabHoldStandby() {
        let $thisForm = $('[perfect-class="form"]');
        debugger
        $thisForm.find('[perfect-tempTable="Purchase"]').find('tbody').find('tr').each(function () {
            //salesdetails.push($(this).data('pData'));
            //$(this).find('.StandByQuantity').find('input').attr('disabled', true);
            let stdis = $(this).data('pData').StandByQuantity;
            if (stdis > 0) {
                $('.holddisable').attr('disabled', true);
            }
            else {
                $('.holddisable').attr('disabled', false);
            }
        })
    };
    function GenerateEinvoice() {
        let $thisForm = $('[perfect-class="form"]');



        let inputData = {
            __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
            SalesID: $thisForm.find('[name="SalesID"]').val(),
            ID_Branch: $thisForm.find('[name="ID_Branch"]').val(),
        };

        $.ajax({
            url: "@Url.Action("GenerateEinvoice", "Sales")",
            type: "POST",
            data: inputData,
            dataType: "json",
            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            success: function (ajaxOutput) {
                console.log('ajaxOutput INVOICE', ajaxOutput)
                if (ajaxOutput.Einvoice) {

                    
                    NotificationMessage({ 'type': 'info', 'heading': 'info', 'message': "Uploaded Successfully" });
                    
                }
                else {
                    $.each(ajaxOutput.Process.Message, function (key, value) {
                        NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                       
                    });
                   
                }
            }
        });
    }
    

    ///Test
    var PageSizeArray;
    function getPageSize(ele, FK_Sales) {
         $.ajax({
               url: "@Url.Action("GetPageSize", "CommonPrintSettings")",
               type: "Get",
               data: '',
               dataType: "json",
               contentType: 'application/x-www-form-urlencoded; charset=utf-8',
               success: function (ajaxOutput) {
                   console.log(ajaxOutput, 'GetPageSize');
                   if (ajaxOutput.Process.IsProcess) {
                       PageSizeArray=ajaxOutput.Data;
                   } else {
                       $.each(ajaxOutput.Process.Message, function (key, value) {
                           NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                       });
                   }
               },
               complete: function () {
                   getinvoiceData(ele, FK_Sales)
               }
         });
    }
    var InvoiceData;
    function getinvoiceData(ele, FK_Sales) {
        let $thisForm = $('[perfect-class="form"]');
        if (FK_Sales == 0) {
            FK_Sales = $thisForm.find('[name="SalesID"]').val();
        }
        let inputData = {
            __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
            FK_Master: FK_Sales,
            TableCount: 0,
            TransMode: SalesTransMode
        };
         $.ajax({
               url: "@Url.Action("Sales_Invoice", "CommonPrintSettings")",
               type: "Post",
               data: inputData,
               dataType: "json",
               contentType: 'application/x-www-form-urlencoded; charset=utf-8',
               success: function (ajaxOutput) {
             //    console.log(ajaxOutput, 'ajaxOutput>>>>');
             //    console.log(ajaxOutput.data1, 'ajaxOutput.table1');
             //    if (ajaxOutput.data1.Process.IsProcess) {
             //        InvoiceData = ajaxOutput.data1.Data[0];
             //        if (ajaxOutput.data1) {
             //            InvoiceData.Data1Data = ajaxOutput.data2.Data;
             //        }
             //        if (ajaxOutput.data2) {
             //            InvoiceData.Data2Data = ajaxOutput.data3.Data;
             //        }
             //        if (ajaxOutput.data3) {
             //            InvoiceData.Data3Data = ajaxOutput.data4.Data;
             //        }
             //        console.log(InvoiceData, 'InvoiceData');
             //    } else {
             //        $.each(ajaxOutput.Process.Message, function (key, value) {
             //            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
             //        });
             //    }
             //},
                 console.log(ajaxOutput, 'ajaxOutput>>>>');
                 var jsonArray1 = JSON.parse(ajaxOutput.jsondata1);          
                   var jsonArray2 = JSON.parse(ajaxOutput.jsondata2);    
                   var jsonArray3 = JSON.parse(ajaxOutput.jsondata3);    
                   var jsonArray4 = JSON.parse(ajaxOutput.jsondata4);    
                   var jsonArray5 = JSON.parse(ajaxOutput.jsondata5);    
                   var jsonArray6 = JSON.parse(ajaxOutput.jsondata6);    
                   if (jsonArray1.Data && jsonArray1.Process.IsProcess) {
                       InvoiceData = jsonArray1;                   
                     console.log(InvoiceData, 'InvoiceData');
                       if (jsonArray2.Data) {
                           InvoiceData.jsonArray1 = jsonArray2;
                     }
                       if (jsonArray3.Data) {
                           InvoiceData.jsonArray2 = jsonArray3;
                     }
                       if (jsonArray4.Data) {
                           InvoiceData.jsonArray3 = jsonArray4;
                       }
                       if (jsonArray5.Data) {
                           InvoiceData.jsonArray4 = jsonArray5;
                       }
                       if (jsonArray6.Data) {
                           InvoiceData.jsonArray5 = jsonArray6;
                       }
                     console.log(InvoiceData, 'InvoiceData');
                 } else {
                     $.each(ajaxOutput.Process.Message, function (key, value) {
                         NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                     });
                 }
             },
               complete: function () {
                        GetTemplate(ele)
               }
         });
    }

    function GetTemplate(ele) {
        var Cmp_obj = {
            table1_last_index: 0,
            table2_last_index: 0,
            table3_last_index: 0,
            table4_last_index: 0,
            table5_last_index: 0,
            table6_last_index: 0,
            table1_SumryIds: false,
            next_page: false
        };
        var mockDiv1 = document.getElementById("Id_mock_div");
        mockDiv1.style.display = "block";
        let $thisForm = $(ele).closest('[perfect-class="form"]');
       var InputData =
       {
           TransMode: 1,
           FK_Master: 89
       };
        $.ajax({
            url: "@Url.Action("GetTemplate", "CommonPrintSettings")",
            type: "POST",
            data: InputData,
            dataType: "json",
            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            success: function (ajaxOutput) {
                console.log(ajaxOutput, 'ajaxOutput');
                if (ajaxOutput.Process.IsProcess) {
                    let div0 = document.getElementById("Id_mock_div");
                    var childElements = div0.getElementsByClassName("child_Page");
                    while (childElements.length > 0) {
                        div0.removeChild(childElements[0]);
                    };
                    let PageWidth = 0;
                    let Pageheigth = 0;
                    PageSizeArray.forEach((data) => {
                        if (data.PValue == ajaxOutput.Data[0].PageSize) {
                            Pageheigth = data.height_in_px+"mm";
                            PageWidth = data.width_in_px+"mm";
                        }
                    });
                   //// let page1 = Create_page('ChildDiv1', PageWidth, Pageheigth);
                   // let page1 = document.getElementById('Id_mock_div');
                   // page1.innerHTML = ajaxOutput.Data[0].FrontSideString;
                   // let main_div=page1.querySelector('#FrontSide');
                   // main_div.style.backgroundImage = 'url(' + ajaxOutput.Data[0].FrntImg + ')';
                   //// let elemt = document.getElementById('Id_mock_div');
                   ////elemt.append(main_div);
                   // let Cmp_binddata_retrn = Cmp_binddata(main_div, Cmp_obj);
                   // Cmp_obj = Cmp_binddata_retrn.Cmp_retrn_obj;
                   // div0.appendChild(Cmp_binddata_retrn.cmp_div);

                    let i = 0;
                    do {
                        let page1 = Create_page('ChildDiv' + i, PageWidth, Pageheigth);
                        page1.innerHTML = ajaxOutput.Data[0].FrontSideString;
                        let main_div = page1.querySelector('#FrontSide');
                        main_div.id = 'FrontSide_' + i;
                        main_div.style.backgroundImage = 'url(' + ajaxOutput.Data[0].FrntImg + ')';
                        div0.appendChild(page1);
                        let Cmp_binddata_retrn = Cmp_binddata(main_div, Cmp_obj);
                        Cmp_obj = Cmp_binddata_retrn.Cmp_obj;
                        i++;
                    } while (Cmp_obj.next_page);

                    let Div0 = div0.innerHTML;
                    getPrint_main({ Pageheigth, PageWidth, Div0  });
                } else {
                    $.each(ajaxOutput.Process.Message, function (key, value) {
                        NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                    });
                }
            },
            complete: function () {
                var mockDiv = document.getElementById("Id_mock_div");
                mockDiv.style.display = "none";
            }
        });
    };

    
     function getPrint_main(layout){
         var IdcardWidth = layout.PageWidth;
         var IdcardHeight = layout.Pageheigth;
         var ICW = '210mm';
         var ICH = '297mm';
         var styles = {
            'A4P': `
                @@page {
                    size: A4 portrait;
                    margin: 10mm;

                }
            `,
            'A4L': `
                @@page {
                    size: A4 landscape;
                    margin: 0mm;
                    size1: '297mm 210mm',
                }
            `,
            'A5P': `
                @@page {
                    size: A5 portrait;
                    margin: 10mm;
                }
            `,
            'A5L': `
                @@page {
                    size: A5 landscape;
                    margin: 10mm;
                }
            `
        };
         var printWindow = window.open('', '', 'width=' + 793+', height=' + 1123);
        printWindow.document.write('<html><head>');
        //printWindow.document.write('<style>' + styles[layout] + '</style>');
        printWindow.document.write('<link rel="stylesheet" href="@Url.Content("~/Assets/css/CommonPrintTemplate.css")" >');
        //printWindow.document.write('<style>@@media print {  * {-webkit-print-color-adjust:exact;} @@page { -webkit-print-color-adjust: exact;size: ' + ICW + ' ' + ICH + ';margin:0;    }   }   </style >');
        //printWindow.document.write('<style>table { border-collapse: collapse;   } tr,th, td { border: 1px solid black; text-align: left; }</style>');
        printWindow.document.write('</head><body style="margin:0px;max-width:' + IdcardWidth +';max-height:' + IdcardHeight + ' ">');
      //  printWindow.document.write('</head><body style="margin:0px;max-width:' + styles[layout].size + ';max-height:' + styles[layout].size + ' ">');
       //// printWindow.document.write('<div id="FrontIDCard" style="background-image: url(\'' + backgroundImageUrl + '\');">');
         //printWindow.document.write(document.getElementById("FrontSideParent").innerHTML);
         printWindow.document.body.innerHTML=layout.Div0;
      ////  printWindow.document.write('</div>');
        printWindow.document.write('</body></html>');
        printWindow.document.close(); // necessary for IE >= 10
        printWindow.focus(); // necessary for IE >= 10*/
     };

    function Create_page(Div_id,width,heigth) {
        var div1 = document.createElement("div");
        div1.className = 'child_Page';
        div1.id = Div_id;
        div1.style.position = 'relative';
        div1.style.width = width;
        div1.style.height = heigth;
        div1.style.border = "1px solid black";
        div1.textContent = "Div 1";
        return div1;
    };
    
    function Cmp_binddata(cmp_div, Cmp_obj) {
        Cmp_obj.next_page = false;
        var SObj = { ...Cmp_obj };
        var Data = {
            PBillDate: "03 Jun 2024",
            table1Data: [
                { sl: 1, ProductName: "ABCABC1", Quantity: "3", HSNCode: "300045", TotalAmount: "155525.5", image: "https://upload.wikimedia.org/wikipedia/commons/b/b6/Image_created_with_a_mobile_phone.png" },
                { sl: 1, ProductName: "Pending ", Quantity: "", HSNCode: "", TotalAmount: "", image: "", subline: true },
                { sl: 2, ProductName: "ABC2 ", Quantity: "3", HSNCode: "300045", TotalAmount: "155525.5", image: "https://upload.wikimedia.org/wikipedia/commons/b/b6/Image_created_with_a_mobile_phone.png" },
                { sl: 3, ProductName: "ABC3 ", Quantity: "3", HSNCode: "300045", TotalAmount: "155525.5", image: "https://upload.wikimedia.org/wikipedia/commons/b/b6/Image_created_with_a_mobile_phone.png" },
                { sl: 4, ProductName: "ABC4 ", Quantity: "3", HSNCode: "300045", TotalAmount: "155525.5", image: "https://upload.wikimedia.org/wikipedia/commons/b/b6/Image_created_with_a_mobile_phone.png" },
                { sl: 5, ProductName: "ABC5 ", Quantity: "3", HSNCode: "300045", TotalAmount: "155525.5", image: "https://upload.wikimedia.org/wikipedia/commons/b/b6/Image_created_with_a_mobile_phone.png" },
                { sl: 6, ProductName: "ABC6 ", Quantity: "3", HSNCode: "300045", TotalAmount: "155525.5", image: "https://upload.wikimedia.org/wikipedia/commons/b/b6/Image_created_with_a_mobile_phone.png" },
                { sl: 7, ProductName: "ABC7", Quantity: "3", HSNCode: "300045", TotalAmount: "155525.5", image: "https://upload.wikimedia.org/wikipedia/commons/b/b6/Image_created_with_a_mobile_phone.png" },
                 { sl: 1, ProductName: "ABCABC1", Quantity: "3", HSNCode: "300045", TotalAmount: "155525.5", image: "https://upload.wikimedia.org/wikipedia/commons/b/b6/Image_created_with_a_mobile_phone.png" },
                { sl: 1, ProductName: "Pending ", Quantity: "", HSNCode: "", TotalAmount: "", image: "", subline: true },
                { sl: 2, ProductName: "ABC2 ", Quantity: "3", HSNCode: "300045", TotalAmount: "155525.5", image: "https://upload.wikimedia.org/wikipedia/commons/b/b6/Image_created_with_a_mobile_phone.png" },
                { sl: 3, ProductName: "ABC3 ", Quantity: "3", HSNCode: "300045", TotalAmount: "155525.5", image: "https://upload.wikimedia.org/wikipedia/commons/b/b6/Image_created_with_a_mobile_phone.png" },
                { sl: 4, ProductName: "ABC4 ", Quantity: "3", HSNCode: "300045", TotalAmount: "155525.5", image: "https://upload.wikimedia.org/wikipedia/commons/b/b6/Image_created_with_a_mobile_phone.png" },
                { sl: 5, ProductName: "ABC5 ", Quantity: "3", HSNCode: "300045", TotalAmount: "155525.5", image: "https://upload.wikimedia.org/wikipedia/commons/b/b6/Image_created_with_a_mobile_phone.png" },
                { sl: 6, ProductName: "ABC6 ", Quantity: "3", HSNCode: "300045", TotalAmount: "155525.5", image: "https://upload.wikimedia.org/wikipedia/commons/b/b6/Image_created_with_a_mobile_phone.png" },
                { sl: 7, ProductName: "ABC7", Quantity: "3", HSNCode: "300045", TotalAmount: "155525.5", image: "https://upload.wikimedia.org/wikipedia/commons/b/b6/Image_created_with_a_mobile_phone.png" },
                 { sl: 1, ProductName: "ABCABC1", Quantity: "3", HSNCode: "300045", TotalAmount: "155525.5", image: "https://upload.wikimedia.org/wikipedia/commons/b/b6/Image_created_with_a_mobile_phone.png" },
                { sl: 1, ProductName: "Pending ", Quantity: "", HSNCode: "", TotalAmount: "", image: "", subline: true },
                { sl: 2, ProductName: "ABC2 ", Quantity: "3", HSNCode: "300045", TotalAmount: "155525.5", image: "https://upload.wikimedia.org/wikipedia/commons/b/b6/Image_created_with_a_mobile_phone.png" },
                { sl: 3, ProductName: "ABC3 ", Quantity: "3", HSNCode: "300045", TotalAmount: "155525.5", image: "https://upload.wikimedia.org/wikipedia/commons/b/b6/Image_created_with_a_mobile_phone.png" },
                { sl: 4, ProductName: "ABC4 ", Quantity: "3", HSNCode: "300045", TotalAmount: "155525.5", image: "https://upload.wikimedia.org/wikipedia/commons/b/b6/Image_created_with_a_mobile_phone.png" },
                { sl: 5, ProductName: "ABC5 ", Quantity: "3", HSNCode: "300045", TotalAmount: "155525.5", image: "https://upload.wikimedia.org/wikipedia/commons/b/b6/Image_created_with_a_mobile_phone.png" },
                { sl: 6, ProductName: "ABC6 ", Quantity: "3", HSNCode: "300045", TotalAmount: "155525.5", image: "https://upload.wikimedia.org/wikipedia/commons/b/b6/Image_created_with_a_mobile_phone.png" },
                { sl: 7, ProductName: "ABC7", Quantity: "3", HSNCode: "300045", TotalAmount: "155525.5", image: "https://upload.wikimedia.org/wikipedia/commons/b/b6/Image_created_with_a_mobile_phone.png" }
            ],
            table2Data: [
                { sl: 1, GSTType: "CGST1 ", Quantity: "3", IGST2: "300045", Amount: "155525.5" },
                { sl: 1, GSTType: "CGST2 ", Quantity: "3", IGST2: "300045", Amount: "155525.5" }
              ]
        };

        const childElements = cmp_div.querySelectorAll('[id]');
        // Separate IDs based on the "PT_" prefix
        const pt1PrefixIds = [];
        const pt2PrefixIds = []; const pt3PrefixIds = []; const pt4PrefixIds = []; const pt5PrefixIds = []; const pt6PrefixIds = []; 
        const otherIds = [];
        let SumryIds = [];
        childElements.forEach(child => {          
            if (child.id.startsWith('PT2_')) {
                pt2PrefixIds.push(child.id);
            }
           else if (child.id.startsWith('PT3_')) {
                pt3PrefixIds.push(child.id);
            }
           else if (child.id.startsWith('PT4_')) {
                pt4PrefixIds.push(child.id);
            }
            else if (child.id.startsWith('PT5_')) {
                pt5PrefixIds.push(child.id);
            }
            else if (child.id.startsWith('PT6_')) {
                pt6PrefixIds.push(child.id);
            }
            else {
                otherIds.push(child.id);
            }
        });
        // Display the separated lists
        pt2PrefixIdsArray2 = []; pt3PrefixIdsArray2 = []; pt4PrefixIdsArray2 = []; pt5PrefixIdsArray2 = []; pt6PrefixIdsArray2 = [];
        pt2PrefixIds.forEach((d, i) => {
            const targetElement = cmp_div.querySelector("#" + d);
            const leftPosition = targetElement.offsetLeft;
            const elementWidth = targetElement.offsetWidth;
            const elementlength = targetElement.style.maxlength;
            var elementLength = targetElement.getAttribute('maxlength');

            const elementFont = targetElement.style.fontFamily;
            const elementFontsize = targetElement.style.fontSize;
            const elementAlign = targetElement.style.getPropertyValue('text-align');
            pt2PrefixIdsArray2.push({ id: d, left: leftPosition, width: elementWidth, fontfamily: elementFont, fontsize: elementFontsize, textalign: elementAlign, maxLength: elementLength });
            if (targetElement) {
                cmp_div.removeChild(targetElement);
            };
        })
        pt3PrefixIds.forEach((d, i) => {
            const targetElement = cmp_div.querySelector("#" + d);
            const leftPosition = targetElement.offsetLeft;
            const elementWidth = targetElement.offsetWidth;
            const elementlength = targetElement.style.maxlength;
            var elementLength = targetElement.getAttribute('maxlength');

            const elementFont = targetElement.style.fontFamily;
            const elementFontsize = targetElement.style.fontSize;
            const elementAlign = targetElement.style.getPropertyValue('text-align');
            pt3PrefixIdsArray2.push({ id: d, left: leftPosition, width: elementWidth, fontfamily: elementFont, fontsize: elementFontsize, textalign: elementAlign, maxLength: elementLength });
            if (targetElement) {
                cmp_div.removeChild(targetElement);
            };
        })
        pt4PrefixIds.forEach((d, i) => {
            const targetElement = cmp_div.querySelector("#" + d);
            const leftPosition = targetElement.offsetLeft;
            const elementWidth = targetElement.offsetWidth;
            const elementlength = targetElement.style.maxlength;
            var elementLength = targetElement.getAttribute('maxlength');

            const elementFont = targetElement.style.fontFamily;
            const elementFontsize = targetElement.style.fontSize;
            const elementAlign = targetElement.style.getPropertyValue('text-align');
            pt4PrefixIdsArray2.push({ id: d, left: leftPosition, width: elementWidth, fontfamily: elementFont, fontsize: elementFontsize, textalign: elementAlign, maxLength: elementLength });
            if (targetElement) {
                cmp_div.removeChild(targetElement);
            };
        })
        pt5PrefixIds.forEach((d, i) => {
            const targetElement = cmp_div.querySelector("#" + d);
            const leftPosition = targetElement.offsetLeft;
            const elementWidth = targetElement.offsetWidth;
            const elementlength = targetElement.style.maxlength;
            var elementLength = targetElement.getAttribute('maxlength');

            const elementFont = targetElement.style.fontFamily;
            const elementFontsize = targetElement.style.fontSize;
            const elementAlign = targetElement.style.getPropertyValue('text-align');
            pt5PrefixIdsArray2.push({ id: d, left: leftPosition, width: elementWidth, fontfamily: elementFont, fontsize: elementFontsize, textalign: elementAlign, maxLength: elementLength });
            if (targetElement) {
                cmp_div.removeChild(targetElement);
            };
        })
        pt6PrefixIds.forEach((d, i) => {
            const targetElement = cmp_div.querySelector("#" + d);
            const leftPosition = targetElement.offsetLeft;
            const elementWidth = targetElement.offsetWidth;
            const elementlength = targetElement.style.maxlength;
            var elementLength = targetElement.getAttribute('maxlength');

            const elementFont = targetElement.style.fontFamily;
            const elementFontsize = targetElement.style.fontSize;
            const elementAlign = targetElement.style.getPropertyValue('text-align');
            pt6PrefixIdsArray2.push({ id: d, left: leftPosition, width: elementWidth, fontfamily: elementFont, fontsize: elementFontsize, textalign: elementAlign, maxLength: elementLength });
            if (targetElement) {
                cmp_div.removeChild(targetElement);
            };
        })
        debugger;
        const idsToRemove = ["ptableMarkerStarter", "ptableMarkerEnder", "ptable2MarkerStarter", "ptable2MarkerEnder", "ptable3MarkerStarter", "ptable3MarkerEnder", "ptable4MarkerStarter", "ptable4MarkerEnder", "ptable5MarkerStarter", "ptable5MarkerEnder", "ptable6MarkerStarter", "ptable6MarkerEnder"];
        otherIds.forEach((data, index) => {
            let element = cmp_div.querySelector("#" + data);
            if (data == "ptableMarkerStarter" || data == "ptableMarkerEnder" || data == "ptable2MarkerStarter" || data == "ptable2MarkerEnder" || data == "ptable3MarkerStarter" || data == "ptable3MarkerEnder" || data == "ptable4MarkerStarter" || data == "ptable4MarkerEnder" || data == "ptable5MarkerStarter" || data == "ptable5MarkerEnder" || data == "ptable6MarkerStarter" || data == "ptable6MarkerEnder") {
            } else {
                if (data.substring(2) == 'logoImage') element.src = InvoiceData[data.substring(2)];
                else if (data.substring(2).includes('Total') || data.substring(2).includes('Net')) {

                    element.innerText = '--//--';
                    SumryIds.push(data);
                }
                else { //element.innerText = InvoiceData[data.substring(2)];              
                    const newData = data.substring(2);
                    let element = cmp_div.querySelector("#" + data);
                    console.log("InvoiceData>>>>>", InvoiceData.Data[0][newData]);
                    element.innerHTML = InvoiceData.Data[0][newData];
                }
            }
        });
        let startPoint = cmp_div.querySelector("#ptableMarkerStarter");
        let startEnd = cmp_div.querySelector("#ptableMarkerEnder");
        let startPoint2 = cmp_div.querySelector("#ptable2MarkerStarter");
        let startEnd2 = cmp_div.querySelector("#ptable2MarkerEnder");
        let startPoint3 = cmp_div.querySelector("#ptable3MarkerStarter");
        let startEnd3 = cmp_div.querySelector("#ptable3MarkerEnder");
        let startPoint4 = cmp_div.querySelector("#ptable4MarkerStarter");
        let startEnd4 = cmp_div.querySelector("#ptable4MarkerEnder");
        let startPoint5 = cmp_div.querySelector("#ptable5MarkerStarter");
        let startEnd5 = cmp_div.querySelector("#ptable5MarkerEnder");
        let startPoint6 = cmp_div.querySelector("#ptable6MarkerStarter");
        let startEnd6 = cmp_div.querySelector("#ptable6MarkerEnder");

        let Starter_Top_Position = 0; let Ender_Top_Position = 0; let Starter_Top_Position2 = 0; let Ender_Top_Position2 = 0; let Starter_Top_Position3 = 0; let Ender_Top_Position3 = 0;
        let Starter_Top_Position4 = 0; let Ender_Top_Position4 = 0; let Starter_Top_Position5 = 0; let Ender_Top_Position5 = 0; let Starter_Top_Position6 = 0; let Ender_Top_Position6 = 0;

        if (startPoint) Starter_Top_Position = startPoint.offsetTop;
        if (startEnd) Ender_Top_Position = startEnd.offsetTop;
        if (startPoint2) Starter_Top_Position2 = startPoint2.offsetTop;
        if (startEnd2) Ender_Top_Position2 = startEnd2.offsetTop;
        if (startPoint3) Starter_Top_Position3 = startPoint3.offsetTop;
        if (startEnd3) Ender_Top_Position3 = startEnd3.offsetTop;

        if (startPoint4) Starter_Top_Position4 = startPoint4.offsetTop;
        if (startEnd4) Ender_Top_Position4 = startEnd4.offsetTop;
        if (startPoint5) Starter_Top_Position5 = startPoint5.offsetTop;
        if (startEnd5) Ender_Top_Position5 = startEnd5.offsetTop;
        if (startPoint6) Starter_Top_Position6 = startPoint6.offsetTop;
        if (startEnd6) Ender_Top_Position6 = startEnd6.offsetTop;

        idsToRemove.forEach(id => {
            const elementToRemove = cmp_div.querySelector("#" + id);
            if (elementToRemove) {
                cmp_div.removeChild(elementToRemove);
            };
        });
        if (pt2PrefixIdsArray2.length > 0) {
            if (InvoiceData.jsonArray1.Data) {
                if (InvoiceData.jsonArray1.Data.length > 0) {
                    let html = "";
                    let topPosition = 0;
                    var num0;
                    //let Count = 0;
                    let Count = 1;
                    InvoiceData.jsonArray1.Data.forEach((data, i) => {
                        if (i >= Cmp_obj.table1_last_index) {
                            if (i == Cmp_obj.table1_last_index) {
                                topPosition += Starter_Top_Position;
                            } else {
                                //if (data.subline) { topPosition += 13 } else { topPosition += 20 }
                                if (data.subline) { topPosition += 13 } else { topPosition += Count * 13 }
                            };
                            pt2PrefixIdsArray2.forEach((data2, i2) => {
                                const newId = data2.id.substring(4);
                                const leftPosition = data2.left;
                                const ElementWidth = data2.width;
                                const fontsize = data2.fontsize;
                                const fontfamily = data2.fontfamily;
                                const txtalign = data2.textalign;
                                const maxLength = data2.maxLength;
                                if (data[newId]) {
                                    if (topPosition > Ender_Top_Position) {
                                        if (num0 == undefined) {
                                            num0 = i;
                                            Cmp_obj.table1_last_index = i;
                                            Cmp_obj.next_page = true;
                                        }
                                    } else {

                                        //if (maxLength != 0 && data[newId].length > maxLength) {                                     
                                        // if (maxLength != 0 && data[newId].length > maxLength) {
                                        if (maxLength != null && data[newId].length > maxLength) {                                         
                                            Count = getWordWrapLineCount(data[newId], maxLength);

                                            //const excess = Math.ceil(data[newId].length / maxLength) - 1;
                                            //NoOflines = parseInt(excess * maxLength);

                                            //var lineCount = getWordWrapLineCount(data[newId]);
                                            //console.log('Word wrap line count:', lineCount);
                                            //if (NoOflines > Count) {
                                            //    Count = NoOflines;
                                            //}
                                        }
                                        if (topPosition + (Count * 13) > Ender_Top_Position) {//checking before printing
                                            if (num0 == undefined) {
                                                num0 = i;
                                                Cmp_obj.table1_last_index = i;
                                                Cmp_obj.next_page = true;
                                            }
                                        }
                                        else if (newId == "ProductImage") {
                                            // html += `<img src="${data[newId]}" alt="Your Image" class="custom-image" style="position: absolute; top: ${topPosition}px; left: ${leftPosition}px; width:10mm;height:10mm;>`;
                                            html += `<img src="data:image/png;base64,${data[newId]}" alt="Your Image" class="custom-image" style="position: absolute; top: ${topPosition}px; left: ${leftPosition}px; width:5mm;height:5mm;>`;
                                        } else {
                                            html += ` <p style="position: absolute; top: ${topPosition}px; left: ${leftPosition}px;color: black; width:${ElementWidth}px; font-size:${fontsize};font-family:${fontfamily};text-align:${txtalign}; overflow:auto ; margin-top: 0px;">${data[newId]} </p>`;
                                        }
                                    };
                                };
                            });
                            // topPosition += Count;
                        }

                        if (i == InvoiceData.jsonArray1.Data.length - 1 && SObj.table1_last_index == Cmp_obj.table1_last_index) {
                            Cmp_obj.table1_last_index = i + 1;

                            if (!Cmp_obj.table1_SumryIds) {
                                SumryIds.forEach((data, index) => {
                                    let element = cmp_div.querySelector("#" + data);
                                    //element.innerText = InvoiceData[data.substring(2)];
                                   // console.log("InvoiceData>>>>>", InvoiceData.Data[0][newData]);
                                   // element.innerHTML = InvoiceData.Data[0][newData];
                                    element.innerText = typeof InvoiceData.Data[0][data.substring(2)] === 'number' ? InvoiceData.Data[0][data.substring(2)].toFixed(2) : InvoiceData.Data[0][data.substring(2)]
                                });
                                Cmp_obj.table1_SumryIds = true;
                            }
                        }
                    });
                    console.log(html, 'html>>>---');
                    cmp_div.insertAdjacentHTML('beforeend', html);
                };
            }
        }
        if (pt3PrefixIdsArray2.length > 0) {
            if (InvoiceData.jsonArray2.Data) {
                if (InvoiceData.jsonArray2.Data.length > 0) {
                    let html = "";
                    let topPosition = 0;
                    var num2;
                    //let Count = 0;
                    let Count = 1;
                    InvoiceData.jsonArray2.Data.forEach((data, i) => {
                        if (i >= Cmp_obj.table2_last_index) {
                            if (i == Cmp_obj.table2_last_index) {
                                topPosition += Starter_Top_Position2;
                            } else {
                                // if (data.subline) { topPosition += 13 } else { topPosition += 20 }
                                if (data.subline) { topPosition += 13 } else { topPosition += Count * 13 }
                            };
                            pt3PrefixIdsArray2.forEach((data2, i2) => {
                                const newId = data2.id.substring(4);
                               // if (data.subline) topPosition -= 10;
                                const leftPosition = data2.left;
                                const fontsize = data2.fontsize;
                                const fontfamily = data2.fontfamily;
                                const txtalign = data2.textalign;
                                const maxLength = data2.maxLength;
                                if (data[newId]) {
                                    if (topPosition >= Ender_Top_Position2) {
                                        if (num2 == undefined) {
                                            num2 = i;
                                            Cmp_obj.table2_last_index = i;
                                            Cmp_obj.next_page = true;
                                        }
                                    } else {
                                        if (maxLength != null && data[newId].length > maxLength) {
                                            //const excess = Math.ceil(data[newId].length / maxLength) - 1;
                                            //NoOflines = parseInt(excess * maxLength);

                                            ////var lineCount = getWordWrapLineCount(data[newId]);
                                            ////console.log('Word wrap line count:', lineCount);
                                            //if (NoOflines > Count) {
                                            //    Count = NoOflines;
                                            //}
                                            Count = getWordWrapLineCount(data[newId], maxLength);
                                        }
                                        if (topPosition + (Count * 13) > Ender_Top_Position2) {//checking before printing
                                            if (num3 == undefined) {
                                                num3 = i;
                                                Cmp_obj.table2_last_index = i;
                                                Cmp_obj.next_page = true;
                                            }
                                        }
                                        else if (newId == "image") {
                                            html += `<img src="${data[newId]}" alt="Your Image" class="custom-image" style="position: absolute; top: ${topPosition}px; left: ${leftPosition}px; width:10mm;height:10mm;>`;
                                        } else {
                                            html += `<p style="position: absolute; top: ${topPosition}px; left: ${leftPosition}px;color: black; margin-top: 0px;font-size:${fontsize};font-family:${fontfamily};text-align:${txtalign};">${data[newId]}</p>`;
                                        };

                                    }
                                }
                            });
                        }
                        if (i == InvoiceData.jsonArray2.Data.length - 1 && SObj.table2_last_index == Cmp_obj.table2_last_index) {
                            Cmp_obj.table2_last_index = i + 1;
                        }
                    });
                    // console.log(html, 'html>>>---');
                    cmp_div.insertAdjacentHTML('beforeend', html);
                };
            }
        }
            //if (InvoiceData.Data3Data) {
            //    if (InvoiceData.Data3Data.length > 0) {
            //        let html = "";
            //        let topPosition = 0;
            //        var num3;
            //        InvoiceData.Data3Data.forEach((data, i) => {
            //            if (i >= Cmp_obj.table3_last_index ) {
            //                if (i == Cmp_obj.table3_last_index) {
            //                    topPosition += Starter_Top_Position3;
            //                } else {
            //                    if (data.subline) { topPosition += 13 } else { topPosition += 20 }
            //                }
            //                ptPrefixIdsArray2.forEach((data2, i2) => {
            //                    //debugger;
            //                    const newId = data2.id.substring(3);
            //                    // let topPosition = Starter_Top_Position3 + i * 20; // Adjust the increment based on your layout
            //                    //const leftPosition = 50 + i2 * 100; // Adjust the increment based on your layout
            //                    if (data.subline) topPosition -= 10;
            //                    const leftPosition = data2.left;
            //                    if (data[newId]) {
            //                        if (topPosition >= Ender_Top_Position3) {
            //                            if (num3 == undefined) {
            //                                num3 = i;
            //                                cmp_div.table3_last_index = i;
            //                                Cmp_obj.next_page = true;
            //                            }
            //                        } else {
            //                            if (newId == "image") {
            //                                html += `<img src="${data[newId]}" alt="Your Image" class="custom-image" style="position: absolute; top: ${topPosition}px; left: ${leftPosition}px; width:10mm;height:10mm;>`;
            //                            } else {
            //                                html += `<p style="position: absolute; top: ${topPosition}px; left: ${leftPosition}px;color: black; margin-top: 0px;">${data[newId]}</p>`;
            //                            }
            //                           // Cmp_obj.next_page = false;
            //                        }
            //                    }
            //                });
            //            }

            //            if (i == InvoiceData.table3Data.length - 1 && SObj.table3_last_index == Cmp_obj.table3_last_index) {
            //                Cmp_obj.table3_last_index = i+1;
            //            }
            //        });
            //        console.log(html, 'html>>>---');
            //       // cmp_div.insertAdjacentHTML('beforeend', html);
            //    };
            //} 
        if (pt4PrefixIdsArray2.length > 0) {
            if (InvoiceData.jsonArray3.Data) {

                if (InvoiceData.jsonArray3.Data.length > 0) {
                    let html = "";
                    let topPosition = 0;
                    var num3; let Count = 1;
                    InvoiceData.jsonArray3.Data.forEach((data, i) => {
                        if (i >= Cmp_obj.table3_last_index) {
                            if (i == Cmp_obj.table3_last_index) {
                                topPosition += Starter_Top_Position3;
                            } else {
                                //if (data.subline) { topPosition += 13 } else { topPosition += 20 }
                                if (data.subline) { topPosition += 13 } else { topPosition += Count * 13 }
                            };
                            pt4PrefixIdsArray2.forEach((data2, i2) => {
                                const newId = data2.id.substring(4);
                                const leftPosition = data2.left;
                                const ElementWidth = data2.width;
                                const fontsize = data2.fontsize;
                                const fontfamily = data2.fontfamily;
                                const txtalign = data2.textalign;
                                const maxLength = data2.maxLength;
                                if (data[newId]) {
                                    if (topPosition > Ender_Top_Position3) {
                                        if (num3 == undefined) {
                                            num3 = i;
                                            Cmp_obj.table3_last_index = i;
                                            Cmp_obj.next_page = true;
                                        }
                                    } else {
                                        //if (maxLength != 0 && data[newId].length > maxLength) {
                                        if (maxLength != null && data[newId].length > maxLength) {
                                            //const excess = Math.ceil(data[newId].length / maxLength) - 1;
                                            //NoOflines = parseInt(excess * maxLength);

                                            ////var lineCount = getWordWrapLineCount(data[newId]);
                                            ////console.log('Word wrap line count:', lineCount);
                                            //if (NoOflines > Count) {
                                            //    Count = NoOflines;
                                            //}
                                            Count = getWordWrapLineCount(data[newId], maxLength);
                                        }
                                        if (topPosition + (Count * 13) > Ender_Top_Position3) {//checking before printing
                                            if (num3 == undefined) {
                                                num3 = i;
                                                Cmp_obj.table3_last_index = i;
                                                Cmp_obj.next_page = true;
                                            }
                                        }
                                        else if (newId == "image") {
                                            // html += `<img src="${data[newId]}" alt="Your Image" class="custom-image" style="position: absolute; top: ${topPosition}px; left: ${leftPosition}px; width:10mm;height:10mm;>`;
                                            html += `<img src="${data[newId]}" alt="Your Image" class="custom-image" style="position: absolute; top: ${topPosition}px; left: ${leftPosition}px; width:5mm;height:5mm;>`;
                                        } else {
                                            html += `<p style="position: absolute; top: ${topPosition}px; left: ${leftPosition}px;color: black; width:${ElementWidth}px; overflow: hidden; margin-top: 0px;font-size:${fontsize};font-family:${fontfamily};text-align:${txtalign};">${data[newId]}</p>`;
                                        }
                                    };
                                };
                            });

                        }
                        if (i == InvoiceData.jsonArray3.Data.length - 1 && SObj.table3_last_index == Cmp_obj.table3_last_index) {
                            Cmp_obj.table3_last_index = i + 1;
                        }
                    });
                    //console.log(html, 'html>>>---');
                    cmp_div.insertAdjacentHTML('beforeend', html);
                };
            }
        }

            //if (InvoiceData.jsonArray4.Data) {
            //    if (InvoiceData.jsonArray4.Data.length > 0) {

            //        let html = "";
            //        let topPosition = 0;
            //        var num3;
            //        InvoiceData.jsonArray4.Data.forEach((data, i) => {
            //            if (i >= Cmp_obj.table3_last_index) {
            //                if (i == Cmp_obj.table3_last_index) {
            //                    topPosition += Starter_Top_Position3;
            //                } else {
            //                    if (data.subline) { topPosition += 13 } else { topPosition += 20 }
            //                }
            //                ptPrefixIdsArray2.forEach((data2, i2) => {
            //                    //
            //                    const newId = data2.id.substring(3);
            //                    // let topPosition = Starter_Top_Position3 + i * 20; // Adjust the increment based on your layout
            //                    //const leftPosition = 50 + i2 * 100; // Adjust the increment based on your layout
            //                    if (data.subline) topPosition -= 10;
            //                    const leftPosition = data2.left;
            //                    const fontsize = data2.fontsize;
            //                    const fontfamily = data2.fontfamily;
            //                    const txtalign = data2.textalign;
            //                    if (data[newId]) {
            //                        if (topPosition >= Ender_Top_Position3) {
            //                            if (num3 == undefined) {
            //                                num3 = i;
            //                                cmp_div.table3_last_index = i;
            //                                Cmp_obj.next_page = true;
            //                            }
            //                        } else {
            //                            if (newId == "image") {
            //                                html += `<img src="${data[newId]}" alt="Your Image" class="custom-image" style="position: absolute; top: ${topPosition}px; left: ${leftPosition}px; width:10mm;height:10mm;>`;
            //                            } else {
            //                                html += `<p style="position: absolute; top: ${topPosition}px; left: ${leftPosition}px;color: black; margin-top: 0px;font-size:${fontsize};font-family:${fontfamily};text-align:${txtalign};">${data[newId]}</p>`;
            //                            }
            //                            // Cmp_obj.next_page = false;
            //                        }
            //                    }
            //                });
            //            }

            //            if (i == InvoiceData.Data4Data.length - 1 && SObj.table3_last_index == Cmp_obj.table3_last_index) {
            //                Cmp_obj.table3_last_index = i + 1;
            //            }
            //        });
            //        console.log(html, 'html>>>---');
            //        // cmp_div.insertAdjacentHTML('beforeend', html);
            //    };
            //} 
        if (pt5PrefixIdsArray2.length > 0) {
            if (InvoiceData.jsonArray4.Data) {

                if (InvoiceData.jsonArray4.Data.length > 0) {
                    let html = "";
                    let topPosition = 0;
                    var num3; let Count = 1;
                    InvoiceData.jsonArray4.Data.forEach((data, i) => {
                        if (i >= Cmp_obj.table4_last_index) {
                            if (i == Cmp_obj.table4_last_index) {
                                topPosition += Starter_Top_Position4;
                            } else {
                                //if (data.subline) { topPosition += 13 } else { topPosition += 20 }
                                if (data.subline) { topPosition += 13 } else { topPosition += Count * 13 }
                            };
                            pt5PrefixIdsArray2.forEach((data2, i2) => {
                                const newId = data2.id.substring(4);
                                const leftPosition = data2.left;
                                const ElementWidth = data2.width;
                                const fontsize = data2.fontsize;
                                const fontfamily = data2.fontfamily;
                                const txtalign = data2.textalign;
                                const maxLength = data2.maxLength;
                                if (data[newId]) {
                                    if (topPosition > Ender_Top_Position4) {
                                        if (num3 == undefined) {
                                            num3 = i;
                                            Cmp_obj.table4_last_index = i;
                                            Cmp_obj.next_page = true;
                                        }
                                    } else {
                                        //if (maxLength != 0 && data[newId].length > maxLength) {
                                        if (maxLength != null && data[newId].length > maxLength) {
                                            //const excess = Math.ceil(data[newId].length / maxLength) - 1;
                                            //NoOflines = parseInt(excess * maxLength);

                                            ////var lineCount = getWordWrapLineCount(data[newId]);
                                            ////console.log('Word wrap line count:', lineCount);
                                            //if (NoOflines > Count) {
                                            //    Count = NoOflines;
                                            //}
                                            Count = getWordWrapLineCount(data[newId], maxLength);
                                        }
                                        if (topPosition + (Count * 13) > Ender_Top_Position4) {//checking before printing
                                            if (num3 == undefined) {
                                                num3 = i;
                                                Cmp_obj.table4_last_index = i;
                                                Cmp_obj.next_page = true;
                                            }
                                        }
                                        else if (newId == "image") {
                                            // html += `<img src="${data[newId]}" alt="Your Image" class="custom-image" style="position: absolute; top: ${topPosition}px; left: ${leftPosition}px; width:10mm;height:10mm;>`;
                                            html += `<img src="${data[newId]}" alt="Your Image" class="custom-image" style="position: absolute; top: ${topPosition}px; left: ${leftPosition}px; width:5mm;height:5mm;>`;
                                        } else {
                                            html += `<p style="position: absolute; top: ${topPosition}px; left: ${leftPosition}px;color: black; width:${ElementWidth}px; overflow: hidden; margin-top: 0px;font-size:${fontsize};font-family:${fontfamily};text-align:${txtalign};">${data[newId]}</p>`;
                                        }
                                    };
                                };
                            });

                        }
                        if (i == InvoiceData.jsonArray4.Data.length - 1 && SObj.table4_last_index == Cmp_obj.table4_last_index) {
                            Cmp_obj.table4_last_index = i + 1;
                        }
                    });
                    //console.log(html, 'html>>>---');
                    cmp_div.insertAdjacentHTML('beforeend', html);
                };
            }
        }
        if (pt6PrefixIdsArray2.length > 0) {
            if (InvoiceData.jsonArray5.Data) {

                if (InvoiceData.jsonArray5.Data.length > 0) {
                    let html = "";
                    let topPosition = 0;
                    var num3; let Count = 1;
                    InvoiceData.jsonArray5.Data.forEach((data, i) => {
                        if (i >= Cmp_obj.table5_last_index) {
                            if (i == Cmp_obj.table5_last_index) {
                                topPosition += Starter_Top_Position5;
                            } else {
                                //if (data.subline) { topPosition += 13 } else { topPosition += 20 }
                                if (data.subline) { topPosition += 13 } else { topPosition += Count * 13 }
                            };
                            pt6PrefixIdsArray2.forEach((data2, i2) => {
                                const newId = data2.id.substring(4);
                                const leftPosition = data2.left;
                                const ElementWidth = data2.width;
                                const fontsize = data2.fontsize;
                                const fontfamily = data2.fontfamily;
                                const txtalign = data2.textalign;
                                const maxLength = data2.maxLength;
                                if (data[newId]) {
                                    if (topPosition > Ender_Top_Position5) {
                                        if (num3 == undefined) {
                                            num3 = i;
                                            Cmp_obj.table5_last_index = i;
                                            Cmp_obj.next_page = true;
                                        }
                                    } else {
                                        //if (maxLength != 0 && data[newId].length > maxLength) {
                                        if (maxLength != null && data[newId].length > maxLength) {
                                            //const excess = Math.ceil(data[newId].length / maxLength) - 1;
                                            //NoOflines = parseInt(excess * maxLength);

                                            ////var lineCount = getWordWrapLineCount(data[newId]);
                                            ////console.log('Word wrap line count:', lineCount);
                                            //if (NoOflines > Count) {
                                            //    Count = NoOflines;
                                            //}
                                            Count = getWordWrapLineCount(data[newId], maxLength);
                                        }
                                        if (topPosition + (Count * 13) > Ender_Top_Position5) {//checking before printing
                                            if (num3 == undefined) {
                                                num3 = i;
                                                Cmp_obj.table5_last_index = i;
                                                Cmp_obj.next_page = true;
                                            }
                                        }
                                        else if (newId == "image") {
                                            // html += `<img src="${data[newId]}" alt="Your Image" class="custom-image" style="position: absolute; top: ${topPosition}px; left: ${leftPosition}px; width:10mm;height:10mm;>`;
                                            html += `<img src="${data[newId]}" alt="Your Image" class="custom-image" style="position: absolute; top: ${topPosition}px; left: ${leftPosition}px; width:5mm;height:5mm;>`;
                                        } else {
                                            html += `<p style="position: absolute; top: ${topPosition}px; left: ${leftPosition}px;color: black; width:${ElementWidth}px; overflow: hidden; margin-top: 0px;font-size:${fontsize};font-family:${fontfamily};text-align:${txtalign};">${data[newId]}</p>`;
                                        }
                                    };
                                };
                            });

                        }
                        if (i == InvoiceData.jsonArray5.Data.length - 1 && SObj.table5_last_index == Cmp_obj.table5_last_index) {
                            Cmp_obj.table5_last_index = i + 1;
                        }
                    });
                    //console.log(html, 'html>>>---');
                    cmp_div.insertAdjacentHTML('beforeend', html);
                };
            }
        }
        return { Cmp_obj, cmp_div };
    }
    //function getWordWrapLineCount(element) {
    //    // Create a clone of the element
    //    var clone = element.cloneNode(true);
    //    clone.style.visibility = 'hidden'; // Hide the clone
    //    clone.style.position = 'absolute'; // Make sure it doesn't affect layout

    //    // Set the width to match the original element's width
    //    clone.style.width = element.offsetWidth + 'px';

    //    // Set the white-space property to normal to ensure word wrapping
    //    clone.style.whiteSpace = 'normal';

    //    // Append the clone to the document body
    //    document.body.appendChild(clone);

    //    // Calculate the number of lines by dividing the clone's height by the line height
    //    var lineHeight = parseFloat(window.getComputedStyle(element).lineHeight);
    //    var lineCount = Math.ceil(clone.offsetHeight / lineHeight);

    //    // Remove the clone from the document
    //    document.body.removeChild(clone);

    //    return lineCount;
    //}
    function getWordWrapLineCount(sentence, maxWidth) {
        // Split the sentence into words
        const words = sentence.split(' ');
        let lineCount = 0;
        let currentLineLength = 0;

        // Iterate through each word in the sentence
        for (let i = 0; i < words.length; i++) {
            const word = words[i];
            const wordLength = word.length;

            // If adding the current word exceeds the maximum width, start a new line
            if (currentLineLength + wordLength > maxWidth) {
                lineCount++;
                currentLineLength = 0;
            }

            // Update the current line length
            currentLineLength += wordLength;

            // Add extra space after the word if it's not the last word on the line
            if (i !== words.length - 1) {
                currentLineLength++; // for the space
            }
        }

        // If there are remaining words, count them as a line
        if (currentLineLength > 0) {
            lineCount++;
        }

        return lineCount;
    }
function getdepartmentbystockid(ele) {
        debugger

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        console.log('stockid', $('[name="StockId"]').val());
        var FK_Stock = $('[name="StockId"]').val() == '' ? '0' : $('[name="StockId"]').val();

        if ($('[name="StockId"]').val() != '') {
            console.log('ajaxOutputFkStock', FK_Stock);
        $.ajax({
            url: "@Url.Action("GetDeparmentbystockID", "Sales")",
            type: "Get",
            data: { FK_Stock },
            dataType: "json",
            contentType: "application/json",
            success: function (ajaxOutput) {
                if (ajaxOutput) {

                    $thisForm.find('[name="FK_Department"]').val(ajaxOutput.departmentList.Data[0].DepartmentID).selectpicker('refresh');




                }
            }
        });
    }
    }

     function fn_SendFeedbackDetails(Selectdata) {
        let ModeID = 2; //For sale
        var inputData = {
            customerId: Selectdata.storedCustomer,
            MobNo: Selectdata.storedMobile,
            ModeId: ModeID,
            ID_Module: Selectdata.ID_Module
        };
        console.log('data', inputData),
        $.ajax({
            type: "POST",
            url: "@Url.Action("GetFeedbackDetails", "CommonAccess")",
            data: inputData,
            success: function (response) {
               
            },
            error: function (error) {
                // Handle error, e.g., show an error message
                console.error("Error saving sale data: ", error);
            }
        });
    }
     function calculateSaldata(ele) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        
        debugger
        var obj = {
            'FK_Sales' : $thisForm.find('[name="SalesID"]').val(),
            'Discount': $thisForm.find('[name="PaymentDiscount"]').val() == "" ? "0" : $thisForm.find('[name="PaymentDiscount"]').val(),
            'ItemWise': $thisForm.find('[name=PMItemwise]').is(":checked"),
             'TransMode': SalesTransMode,
        }
        $.ajax({
            url: "@Url.Action("GetSalesOtherInfo", "Sales")",
            type: "GET",
            data: obj,
            dataType: "json",
            contentType: "application/json",
            success: function (ajaxOutput) {
                var CheckListHTML1 = '';
                if (ajaxOutput.SalesInfo.Process.IsProcess) {
                    
                    if (ajaxOutput.SalesInfo.Data.length > 0) {
                        console.log('out123:', ajaxOutput.SalesInfo.Data)
                        
                        CheckListHTML1 += "<tr class='thead-primary'>";
                        CheckListHTML1 += "<th style='text-align:left;paddingright:20px'>" + "</th>";
                        CheckListHTML1 += "<th style='text-align:left;paddingright:20px'>" + "Existing" + "</th>";
                        CheckListHTML1 += "<th style='text-align:left;paddingright:20px'>" + "New" + "</th>";
                        CheckListHTML1 += "</tr>";
                        
                        $.each(ajaxOutput.SalesInfo.Data, function (i, value) {
                            CheckListHTML1 += "<tr>";
                            CheckListHTML1 += "<td  Class='jq_Header_td' style='text-align:left;font-weight:bold'>" + value.Header + "</td>";
                            CheckListHTML1 += "<td  Class='jq_Existing_td' style='text-align:right;font-weight:bold'>" + parseFloat(value.Existing).toFixed(2) + "</td>";
                            CheckListHTML1 += "<td  Class='jq_New_td' style='text-align:right;font-weight:bold'>" + parseFloat(value.New).toFixed(2) + "</td>";
                            CheckListHTML1 += "</tr>";


                        });

                        $("#SalesBillDetails").html(CheckListHTML1)


                    }
                }


            },
            complete: function () {
               
            }
        });
    }
    function fillNetAmount(ele) {
        debugger
        let $thisForm = $('[perfect-class="form"]');
        $('#SalesBillDetails tr').each(function (i, row) {
            debugger
            var headerCell = $(row).find('td:eq(0)');
           
            if (headerCell.text().trim() === "NetAmount") {
                var NetAmount = parseFloat($(row).find('td:eq(2)').text())
                $thisForm.find('[name="NewBillAmount"]').val(NetAmount);
            }
            
        });
      
      
    }
    function GetPaymentlistsRecalculate(ele) {

        let $thisForm = $("#form");
        let $thisForm2 = $('[perfect-class="form"]');
        fillNetAmount($thisForm2)
        var PrNetAmount = parseFloat($thisForm.find('[name="NewBillAmount"]').val() == "" ? "0" : $thisForm.find('[name="NewBillAmount"]').val());
        $('#formGroupModalpayment').modal({ backdrop: 'static', keyboard: false })
        $('#formGroupModalpayment').modal('show');
        $("#PAmount").val(PrNetAmount.toFixed(2));
        $thisForm.find('[name="SalesRec"]').val(1);
        BillAmountbind($thisForm2);
    }
    function BillAmountRecalculatebind(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let netamt = $thisForm.find('[name="NewBillAmount"]').val() == "" ? "0" : $thisForm.find('[name="NewBillAmount"]').val();
       // $thisForm.find('[name=BalAmt]').text('');
        let billamt = 0;
        let bilamt = 0;

        if ($thisForm.find('[name=BalAmt]').text() == '') {
            bilamt = 0;
        }
        else {
            bilamt = netamt;
        }

        $('#Paymentdethead').find('tbody tr').each(function (index, ele) {

            billamt += parseFloat($(ele).find('.PAmount').text());
            
        });
       
        bilamt = parseFloat(bilamt) - billamt;

        $thisForm.find('[name=BalAmt]').text(bilamt.toFixed(2));
        if (bilamt == 0) {

            return true;

        }
        else {

            return false;

        }
    }
    function Recalculate(ele) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        
        debugger
        var obj = {
            'FK_Sales' : $thisForm.find('[name="SalesID"]').val(),
            'Discount': $thisForm.find('[name="PaymentDiscount"]').val() == "" ? "0" : $thisForm.find('[name="PaymentDiscount"]').val(),
            'ItemWise': $thisForm.find('[name=PMItemwise]').is(":checked"),
             'TransMode': SalesTransMode,
           
        }
        $.ajax({
            url: "@Url.Action("GetSalesRecalculateInfo", "Sales")",
            type: "GET",
            data: obj,
            dataType: "json",
            contentType: "application/json",
            success: function (ajaxOutput) {
                var CheckListHTML1 = '';
                if (ajaxOutput.SalesInfo.Process.IsProcess) {
                    
                    if (ajaxOutput.SalesInfo.Data.length > 0) {
                        console.log('out123:', ajaxOutput.SalesInfo.Data)
                        
                        CheckListHTML1 += "<tr class='thead-primary'>";
                        CheckListHTML1 += "<th style='text-align:left;paddingright:20px'>" + "</th>";
                        CheckListHTML1 += "<th style='text-align:left;paddingright:20px'>" + "Existing" + "</th>";
                        CheckListHTML1 += "<th style='text-align:left;paddingright:20px'>" + "New" + "</th>";
                        CheckListHTML1 += "</tr>";
                        
                        $.each(ajaxOutput.SalesInfo.Data, function (i, value) {
                            CheckListHTML1 += "<tr>";
                            CheckListHTML1 += "<td  Class='jq_Header_td' style='text-align:left;font-weight:bold'>" + value.Header + "</td>";
                            CheckListHTML1 += "<td  Class='jq_Existing_td' style='text-align:right;font-weight:bold'>" + parseFloat(value.Existing).toFixed(2) + "</td>";
                            CheckListHTML1 += "<td  Class='jq_New_td' style='text-align:right;font-weight:bold'>" + parseFloat(value.New).toFixed(2) + "</td>";
                            CheckListHTML1 += "</tr>";


                        });

                        $("#SalesBillDetails").html(CheckListHTML1)
                        fillNetAmount(this);

                    }
                }


            },
            complete: function () {
                HideData();
            }
        });
    }
    function HideData() {
        
        $("#PaymentDiscount").attr('readonly', true);
        $("#PMItemwise").prop('disabled', true);
        $("#btnOtherchargepopup").prop('disabled', true);
    }
    function GetPaymentMethod(ele) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        
        let $placeDropdown = $thisForm.find('[name=PaymentMethod]');//<--- Will give place select html element
        $placeDropdown.empty();
        $placeDropdown.append($('<option/>', { "value": '' }).text('Please select')).selectpicker('refresh');
       
        let inputData = {
            __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
           
        };
        $.ajax({
            url: "@Url.Action("GetpaymentMethod", "Sales")",
            type: "POST",

            data: inputData,
            dataType: "json",
            contentType: "application/x-www-form-urlencoded;charset=utf-8",
            success: function (ajaxOutput) {

                console.log(ajaxOutput.Data, 'ajaxOutput.Data')

                if (ajaxOutput.Process.IsProcess) {
                    
                    $.each(ajaxOutput.Data, function (key, value) {
                       
                        $placeDropdown.append($('<option/>', { "value": value.PaymentmethodID, "PMMode": value.PMMode }).text(value.Name)).selectpicker('refresh')
                    });
                    
                }
                else {
                    $.each(ajaxOutput.Process.Message, function (key, value) {
                        //toastr.warning(value, "Error");
                        //NotificationMessage({ 'type': 'info', 'heading': 'info', 'message': value });
                    });
                }
            },
            complete: function () {
                
            }

        });
    }

            var $custids = '';
    function fn_SalesForm_update(ele) {
        $(ele).prop('disabled', true);
        let printAccess = '@ViewBag.PagedAccessRights.UsrrlPtRpt';
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let salesdetails = [];
        $thisForm.find('[perfect-tempTable="Purchase"]').find('tbody').find('tr').each(function () {

            salesdetails.push($(this).data('pData'));
            console.log($(this).data('pData'), 'pData');
        })

        localStorage.setItem("IDcustomer", $thisForm.find('[name="ID_Customer"]').val());
        localStorage.setItem("CustomerMobile", $thisForm.find('[name="MobileNo"]').val());

        $custids = $thisForm.find('[name="FK_Customer"]').val();

        if (salesdetails.length > 0) {
            if (datencheck(ele)) {
                if (billdatencheck(ele)) {
                    if ($thisForm.valid()) {

                        if (BillAmountbind(ele)) {
                            //disable button to avoid multiple clicks
                            //$(ele).prop('disabled', true);

                            let $thisForm = $(ele).closest('[perfect-class="form"]');
                            let $modal2 = $thisForm.find('#zero_configOthercharge');
                            let OtherCharge = [];
                            var ID_Customer = 0;
                            $modal2.find('tbody').find('tr').each(function () {

                                let OtChargeinfo = {};
                                OtChargeinfo['ID_OtherChargeType'] = $(this).find('.jq_ID_OtherChargeType_td').text();

                                OtChargeinfo['OctyTransType'] = $(this).find('.jq_TransType_td').find('select').val();
                                OtChargeinfo['OctyName'] = $(this).find('.jq_Type_td').text();
                                OtChargeinfo['OctyAmount'] = $(this).find('.jq_OtherChagAmnt_td').find('input').val();
                                console.log('OtChargeinfo', OtChargeinfo);
                                OtherCharge.push(OtChargeinfo);

                            });
                            debugger

                            let warrantysave = [];
                            warrantysave = $thisForm.data('pwarranty');
                            console.log('warrantysave', warrantysave)
                            console.log('OtherCharge', OtherCharge)
                            let imagesave = [];
                            imagesave = $thisForm.data('addpImageselect')
                            if (imagesave != null) {
                                warrantyimagecon(imagesave);
                            }
                            if (warrantysave == null) {
                                warrantysave = [];
                            }
                            ///warrantydirect start
                            if (warrantydetails == null) {
                                warrantydetails = [];
                            }
                            ///end

                            let paymentdetails = [];
                            $thisForm.find('[perfect-tempTable="Payment"]').find('tbody').find('tr').each(function () {
                                paymentdetails.push($(this).data('pData'));
                            })
                            let buybackdetails = [];
                            $thisForm.find('[perfect-tempTable="buyback"]').find('tbody').find('tr').each(function () {
                                buybackdetails.push($(this).data('pData'));
                            })

                            let ID_Hold = 0;
                            if ($thisForm.find('[name="ID_Hold"]').val() == '' || $thisForm.find('[name="ID_Hold"]').val() == null) {
                                ID_Hold = 0;
                            }
                            else {
                                ID_Hold = $thisForm.find('[name="ID_Hold"]').val();

                            }
                            if ($thisForm.find('[name="Supplier"]').val() == '5') {
                                ID_Customer = $thisForm.find('[name="ID_Branch"]').val() == "" ? "0" : $thisForm.find('[name="ID_Branch"]').val();
                            }
                            else {
                                ID_Customer = $thisForm.find('[name="ID_Customer"]').val() == "" ? "0" : $thisForm.find('[name="ID_Customer"]').val();

                            }

                            let Checkstk1;
                            var ChekStandBy;
                            ChekStandBy = '@ViewBag.ChekStandBy';

                            if (ChekStandBy == "True") {
                                Checkstk1 = 1;
                            }
                            else {
                                Checkstk1 = 0;
                            }
                            let Taxinterstate = 0;
                            if ($thisForm.find('[name="GSTINNo"]').val() != "" && ('@ViewBag.FK_State' != $thisForm.find('[name="State"]').val()) && '@ViewBag.BtoB' == 'True') {
                                Taxinterstate = 1;
                            }
                            else if ($thisForm.find('[name="GSTINNo"]').val() != "" && ('@ViewBag.FK_State' == $thisForm.find('[name="State"]').val()) && '@ViewBag.BtoB' == 'True') {
                                Taxinterstate = 0;
                            }

                            let inputData = {

                                __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                                'SalesID': $thisForm.find('[name="SalesID"]').val(),
                                'ID_Hold': ID_Hold,
                                //'TransMode': 'INSL',
                                'LastID': LastID_Sales,
                                'TransMode': SalesTransMode,
                                'BillType': $thisForm.find('[name="BillType"]').val(),
                                'SalBillDate': $thisForm.find('[name="SalBillDate"]').val(),
                                'SalEnterDate': $thisForm.find('[name="SalEnterDate"]').val(),
                                'ID_Customer': ID_Customer,
                                'FK_Lead': $thisForm.find('[name="FK_Lead"]').val(),
                                'FK_Quotation': $thisForm.find('[name="FK_Quotation"]').val(),
                                'FK_CustomerOthers': $thisForm.find('[name="FK_CustomerOthers"]').val(),
                                'FK_Customer': $thisForm.find('[name="FK_Customer"]').val(),
                                'CustomeName': $thisForm.find('[name="CustomeName"]').val(),
                                'MobileNo': $thisForm.find('[name="MobileNo"]').val(),
                                'SalBillTotal': $thisForm.find('[name="SalBillTotal"]').val(),
                                'OtherCharge': $thisForm.find('[name="OtherCharge"]').val(),
                                'SalDiscount': $thisForm.find('[name="SalDiscount"]').val(),
                                'SalRoundoff': $thisForm.find('[name="SalRoundoff"]').val(),
                                'SalNetAmount': $thisForm.find('[name="SalNetAmount"]').val(),
                                'Hold': 0,
                                'StockadjonHold': 0,
                                'AdvAmount': $thisForm.find('[name="AdvAmount"]').val(),
                                'FK_SalesOrder': $thisForm.find('[name="FK_Salesorder"]').val(),
                                'ProductDetail': salesdetails,
                                'PaymentDetail': paymentdetails,
                                'buyback': buybackdetails,
                                'OtherChgDetails': OtherCharge,
                                'WarrantyDetails': warrantydetails/*warrantysave*/,
                                'AdditionalAmount': $thisForm.find('[name="SoAddnAmount"]').val(),
                                'DownPayment': $thisForm.find('[name="SoDownPayment"]').val(),
                                'FK_FinancePlanType': $thisForm.find('[name="FK_FinancePlanType"]').val(),
                                'StartDate': $thisForm.find('[name="SoStartDate"]').val(),
                                'ShpContactName': $thisForm.find('[name="ShpContactName"]').val(),
                                'Address1': $thisForm.find('[name="Address1"]').val(),
                                'Address2': $thisForm.find('[name="Address2"]').val(),
                                'CountryID': $thisForm.find('[name="CountryID"]').val(),
                                'StatesID': $thisForm.find('[name="StatesID"]').val(),
                                'DistrictID': $thisForm.find('[name="DistrictID"]').val(),
                                'AreaID': $thisForm.find('[name="AreaID"]').val(),
                                'PostID': $thisForm.find('[name="PostID"]').val(),
                                'ShpMobile': $thisForm.find('[name="ShpMobile"]').val(),
                                'Transporttype': $thisForm.find('[name="Transporttype"]').val(),
                                'Vehicleno': $thisForm.find('[name="Vehicleno"]').val(),
                                'DrvName': $thisForm.find('[name="DrvName"]').val(),
                                'DrvPhoneno': $thisForm.find('[name="DrvPhoneno"]').val(),
                                'FK_Employee': $thisForm.find('[name="FK_Salesman"]').val(),
                                'ProductSerialNumbers': productSerialNum,
                                'SubproductDetails': SubproductDetailsSave,
                                'ImageList': SalesDocumentUpload,
                                'BankID': $thisForm.find('[name="BankID"]').val(),
                                'ChekStandBy': Checkstk1,
                                'ImportID': $thisForm.find('[name="Supplier"]').val(),
                                'FK_Vehicle': $thisForm.find('[name="FK_Vehicle"]').val(),
                                'Taxinterstate': Taxinterstate

                            };
                            clearSessionValue(LastIDSessionKey);

                            console.log('save56', inputData)
                            $.ajax({
                                url: "@Url.Action("UpdateNewSales", "Sales")",
                                type: "POST",
                                data: inputData,
                                dataType: "json",
                                contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                                success: function (ajaxOutput) {

                                    if (ajaxOutput.Process.IsProcess) {

                                        $.each(ajaxOutput.Process.Message, function (key, value) {
                                            NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });

                                            let FK_SALES = ajaxOutput.Process.code;
                                            var Url = ('@Url.Action("GetBillNo", "Report")?FK_SALES=' + FK_SALES);

                                            popitup(Url);                                            

                                            let storedCustomer = localStorage.getItem("IDcustomer");
                                            let storedMobile = localStorage.getItem("CustomerMobile");

                                            let PassData = {
                                                storedCustomer: storedCustomer,
                                                storedMobile: storedMobile,
                                                ID_Module: FK_SALES
                                            }

                                            fn_SendFeedbackDetails(PassData);

                                        });
                                        //ajaxOutput.Process.code
                                        $thisForm.find('[perfect-ctype="select"]').val('').selectpicker('refresh');
                                        $thisForm.find('[perfect-ctype="input"]').val('');
                                        $thisForm.find('[perfect-ctype="date"]').val('');

                                        // Get the value set in form's perfect-onFormSuccess attribute
                                        let onSuccess = $thisForm.attr('perfect-onFormSuccess')

                                        if (onSuccess) {
                                            window[onSuccess]();
                                        }
                                    }
                                    else {
                                        $.each(ajaxOutput.Process.Message, function (key, value) {
                                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                        });
                                    }
                                },
                                complete: function () {
                                    $(ele).prop('disabled', false);
                                }

                            });

                        }
                        else {
                            $(ele).prop('disabled', false);
                            NotificationMessage({ 'type': 'error', 'heading': 'Warning', 'message': 'In Payment Method Balance Amt. Should be  Zero ' });
                        }
                    }
                    else {
                        $(ele).prop('disabled', false);
                    }
                }
                else {
                    $(ele).prop('disabled', false);
                }
            }
        }
        else {
            $(ele).prop('disabled', false);
            NotificationMessage({ 'type': 'error', 'heading': 'Warning', 'message': 'Enter Atleast One Product' });
        }
    }
    var ViewinfoEnable = 0;

    function DisableMoreinfo(ele) {
        let $thisForm = $('[perfect-class="form"]');
        //viewewaybill
        if (ViewinfoEnable == 1) {
            $("#viewewaybill").attr("disabled", "disabled");
        }
        else {
            $("#viewewaybill").attr("disabled", false);
        }
    }
</script>


