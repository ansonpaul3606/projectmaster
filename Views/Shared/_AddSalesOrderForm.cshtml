

@model PerfectWebERP.Models.SalesOrderModel.SalesOrderView

@*Warranty Window*@
<div class="modal fade" perfect-class="formGroupModalwarranty" id="modalWarrantyWindow">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h5 class="modal-title">Warranty Details</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body" perfect-class="formGroup" style="max-height: calc(100vh - 200px); overflow-y: auto;padding: 1rem;">
                <div class="row">


                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">Sub Product</label>
                            <div class="col-sm-7">
                                <div class="input-group">
                                    <input type="text" class="form-control" name="subProName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly />
                                    <input type="hidden" name="subProductID" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                    <div class="input-group-append">
                                        <button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" BindName="ProdName" BindVal="ProductID" perfect-css="button"></button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Type</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-7">

                                <div class="input-group">
                                    <select class="form-control" name="WarrantyType" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select">
                                        @if (!(Model.ModuleTypeList is null))
                                        {
                                            foreach (var Module in Model.ModuleTypeList)
                                            {
                                                <option value="@Module.Mode">@Module.ModuleName</option>
                                            }
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>


                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Repl. Warranty Date</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-7">
                                <div class="input-group">
                                    <input type="date" class="form-control perfectValidate_date" name="" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" />
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Serv. Warranty Date</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-7">
                                <div class="input-group">
                                    <input type="date" class="form-control perfectValidate_date" name="" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" />
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-10">

                    </div>

                    <div class="col-sm-2">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">&nbsp;</span>

                            </label>
                            <div class="col-sm-7">
                                <div class="input-group">
                                    <button type="button" class="btn btn-primary1 " data-dismiss="modal">Add</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary light" data-dismiss="modal">Submit</button>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="md-2 modal fade" perfect-class="formGroupModalcustmrformGroupModalcustmr" id="formGroupModalcustmr">
    <div class="modal-dialog modal-dialog-centered modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h5 class="modal-title">Add Customer</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body" perfect-class="formGroup" style="max-height: calc(100vh - 200px); overflow-y: auto;padding: 1rem;">
                <div class="row">

                    <div class="col-sm-12" id="custmr-sav">

                    </div>


                </div>

            </div>
        </div>
    </div>
</div>

@*Sales Order Window*@

<div class="card">
    <div class="card-header">
        <h4 class="card-title col-12">@ViewBag.PageTilte</h4>
        @*<span title="To View List" onclick="fn_showListView();"><i class="fa fa-bars card-title" aria-hidden="true"></i></span>*@
        <span title="To View List" onclick="fn_showListView();"><svg id="Layer_1" class="layer" stroke="currentColor" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" height="20" width="20" viewBox="0 0 122.88 122.54"><title>To View List</title><path class="viewlst" d="M4.69,0H46.22a4.71,4.71,0,0,1,4.69,4.69V46a4.69,4.69,0,0,1-4.69,4.69H4.69a4.65,4.65,0,0,1-3.31-1.38l-.09-.09A4.67,4.67,0,0,1,0,46V4.69A4.71,4.71,0,0,1,4.69,0ZM89.44,61.94a26.56,26.56,0,0,1,10.18,2l.07,0a26.61,26.61,0,0,1,15.25,32.16,26.18,26.18,0,0,1-2.7,6.11l10.3,11.24a1.27,1.27,0,0,1-.07,1.8l-7.57,6.9a1.27,1.27,0,0,1-1.79-.07l-9.86-10.85a26.36,26.36,0,0,1-6.1,2.74,26.87,26.87,0,0,1-7.71,1.13,26.51,26.51,0,0,1-10.17-2l-.07,0A26.64,26.64,0,0,1,64.85,78.37l0-.07A26.6,26.6,0,0,1,89.44,61.94Zm15,11.59a21.38,21.38,0,0,0-6.89-4.61l-.06,0a21.22,21.22,0,0,0-23.07,4.64l-.07.07a21.25,21.25,0,0,0-4.54,6.83l0,.06a21.32,21.32,0,0,0-1.58,8.06,21.26,21.26,0,0,0,29.35,19.62,21.54,21.54,0,0,0,6.89-4.61l.07-.07a21.09,21.09,0,0,0,4.54-6.83l0-.06a21.35,21.35,0,0,0,0-16.17,21.34,21.34,0,0,0-4.62-6.9ZM4.69,63.2H46.22a4.71,4.71,0,0,1,4.69,4.7v41.34a4.68,4.68,0,0,1-4.69,4.69H4.69A4.69,4.69,0,0,1,0,109.24V67.9a4.71,4.71,0,0,1,4.69-4.7ZM68.78,0h41.53A4.71,4.71,0,0,1,115,4.69V46a4.71,4.71,0,0,1-4.69,4.69H68.78A4.71,4.71,0,0,1,64.09,46V4.69a4.69,4.69,0,0,1,1.37-3.31l.1-.09A4.67,4.67,0,0,1,68.78,0Z"></path></svg></span>
    </div>

    <div class="card-body">
        <form id="" class="form-valide" perfect-class="form" action="#" method="post" perfect-onFormSuccess="">
            <div>
                @Html.AntiForgeryToken()
                <div class="row">

                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Bill Type</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-7">
                                <select class="form-control perfectValidate_string" name="BillType" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" onchange="Showsalesorderno(this)">
                                    <option value="">Please Select </option>

                                    @if (!(Model.BillTypeListView is null))
                                    {
                                        foreach (var BillType in Model.BillTypeListView)
                                        {
                                            <option value="@BillType.BillTypeID">@BillType.BillType</option>
                                        }
                                    }
                                </select>

                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4" style="display:none">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Sl No</span>
                            </label>
                            <div class="col-sm-7">
                                <input type="number" class="form-control" name="slno" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="input" readonly value="@Model.SortOrder" />
                                <input type="hidden" name="ID_SalesOrder" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4 DivSalesorderno" style="display:none">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Sales Order No#</span>
                            </label>
                            <div class="col-sm-7">
                                <div class="input-group">
                                    <input type="hidden" name="SalesOrder_No" />
                                    <input type="text" class="form-control" name="SalesOrderNo" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly />
                                    <input type="hidden" name="LastID" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Sales Order Date</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-7">
                                <input type="date" class="form-control perfectValidate_date" name="SalesOrderDate" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" />
                            </div>
                        </div>
                    </div>

                </div>
                <div class="row">

                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Import From</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-7">
                                <div class="input-group">
                                    <input type="hidden" name="ImportID" />
                                    <select class="form-control perfectValidate_string" name="ddlImportsList" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" onchange="fn_showandHideNewCustomerButton(this)">
                                        <option value="">Please Select</option>
                                        <option value="1">Customer</option>
                                        <option value="2">Lead</option>
                                        <option value="3">Quotation</option>
                                    </select>

                                    <div class="input-group-append">
                                        <button id="importbutton" data-toggle="tooltip" data-placement="top" data-html="true" title="Import from Customer,Lead" class="btn btn-primary" type="button" perfect-css="button" onclick="fn_showSalesOrderImportList(this)" Function="1"><i class="las la-file-import la-lg"></i></button>
                                        <button id="customerbtn" class="btn btn-primary fa fa-user-plus" type="button" perfect-css="button" onclick="fn_openNewCustomerWindow(this)" style="display:none" title="Add Customer"></button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Customer Name &nbsp;<span class="text-danger">*</span></span>

                            </label>
                            <div class="col-sm-7">
                                <div class="input-group">
                                    <input type="hidden" name="ID_Customer" value="0" />
                                    <input type="hidden" name="FK_Lead" value="0" />
                                    <input type="hidden" name="ID_Quotation" value="0" />
                                    <input type="text" class="form-control perfectValidate_string" name="CustomeName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly />

                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Mobile No</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-7">
                                <div class="input-group">
                                    <input type="text" class="form-control perfectValidate_mobile" name="MobileNo" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Delivery Date</span>
                            </label>
                            <div class="col-sm-7">
                                <input type="date" class="form-control" name="SoDeliveryDate" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" />
                            </div>
                        </div>
                    </div>

                    @*/////*@
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Cost Center</span>
                                @*<span class="text-danger">*</span>*@
                            </label>
                            <div class="col-sm-7">
                                <div class="input-group">
                                    <select class="form-control " id="Costcenter" name="Costcenter" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" data-live-search="true">
                                        <option value="">Please Select </option>
                                        @if (!(Model.CostCenterList is null))
                                        {
                                            foreach (var Costcenter in Model.CostCenterList)
                                            {
                                                <option value="@Costcenter.ID_CostCenterDetails" data-id-costcenter="@Costcenter.ID_CostCenterDetails">@Costcenter.CCName</option>
                                            }
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Salesman</span>
                            </label>
                            <div class="col-sm-7">
                                <div class="input-group">
                                    <input type="hidden" class="form-control" name="FK_Employee" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" value="" />
                                    <input type="text" class="form-control" name="Employee" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly />

                                    <div class="input-group-append">
                                        <button id="addEmployee-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchValAssign(this,69,'Employee Details',[],['Branchs','BranchTypeID','FK_Departement','BranchType','SLNo','FK_Branch'])" criterea2="0" bindname="Employee" bindval="FK_Employee"></button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
                <div class="row">
                    <div class="col-sm-12">
                        <div class="daccordion__header">
                            <span class="accordion__header--text">Product Details</span>
                        </div>
                        <div class="row">
                            <div class="col-sm-12 " perfect-class="TempTableProduct">
                                <br />
                                <div class="row">
                                    <div class="col-sm-3">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-5 col-form-label">Product&nbsp;<span class="text-danger">*</span></label>
                                            <div class="col-sm-7">
                                                <div class="input-group">
                                                    <input type="text" class="form-control " perfect-tempTable-SalesOrder="ProdName" name="ProdName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly />
                                                    <input type="hidden" name="FK_Product" perfect-tempTable-SalesOrder="FK_Product" id="FK_Product" class="form-control " perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                    <input type="hidden" name="MinRate" perfect-tempTable-SalesOrder="MinRate" id="MinRateid" class="form-control " perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                    <input type="hidden" name="MaxRate" perfect-tempTable-SalesOrder="MaxRate" id="MaxRateid" class="form-control " perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                                    <div class="input-group-append">
                                                        <button id="addcountry-jq-searchButton3" name="prdbtn" class="btn btn-primary fa fa-search" type="button" onclick="GetCmnPopUpSearchValAssign(this, 118, 'Product Details', [], ['SLNo','SodMRP','SodSalPrice','Quantity'],SalesorderTransMode)" BindName="ProdName" BindVal="FK_Product" Function="2" perfect-css="button"></button>
                                                    </div>
                                                </div>
                                                <div class="text-danger temptableError"></div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-3">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-5 col-form-label">
                                                <span perfect-class="formGroupLabel">Floor</span>

                                            </label>

                                            <div class="col-sm-7">
                                                <select class="form-control" name="FK_ProductLocation" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" perfect-tempTable-SalesOrder="ProductLocation">
                                                    <option value="0">Please select</option>
                                                    @if (!(Model.ProductLocationList is null))
                                                    {
                                                        foreach (var ProductLocationList in Model.ProductLocationList)
                                                        {
                                                            <option value="@ProductLocationList.FK_ProductLocation">@ProductLocationList.ProductLocation</option>
                                                        }
                                                    }
                                                </select>


                                                <span class="invalid-feedback animated fadeInUp d-block temptableError"></span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-3">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-5 col-form-label">Quantity&nbsp;<span class="text-danger">*</span></label>
                                            <div class="col-sm-7">
                                                <input type="text" class="form-control text-right" perfect-tempTable-SalesOrder="SodSalQuantity" id="SodSalQuantity" name="SodSalQuantity" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" onchange="fn_calculateActualPrice(this), QtyResetEMI(this);" onfocus="this.oldvalue = this.value;" oninput="decimalpnt(this,'SodSalQuantity',4)" maxlength="13" />
                                                <div class="text-danger temptableError"></div>
                                            </div>

                                        </div>
                                    </div>
                                    <div class="col-sm-3">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-5 col-form-label">
                                                <span perfect-class="formGroupLabel">MRP</span>

                                            </label>
                                            <div class="col-sm-7">
                                                <input type="text" class="form-control text-right" perfect-tempTable-SalesOrder="SodMRP" name="SodMRP" id="SodMRP" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" maxlength="12" oninput="decimalpnt(this,'SodMRP',3)" onchange="calcDisfromMrp(this)" readonly="@ViewBag.INSOMR" />
                                                <div class="text-danger temptableError"></div>
                                                <input type="hidden" class="form-control" perfect-tempTable-SalesOrder="Sprice" name="Sprice" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />

                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-sm-3">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-5 col-form-label">

                                                <span perfect-class="formGroupLabel">Sale Price<span class="text-danger">*</span></span>

                                            </label>
                                            <div class="col-sm-7">
                                                <input type="text" class="form-control text-right" perfect-tempTable-SalesOrder="SodSalPrice" id="SodSalPrice" name="SodSalPrice" onchange="fn_salecalc(this)" perfect-class="formGroupControl" maxlength="12" oninput="decimalpnt(this,'SodSalPrice',3)" @*oninput="this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');"*@ perfect-ctype="input" perfect-css="input" />
                                                <div class="text-danger temptableError"></div>
                                                <div class="text-danger temptableError1"></div>
                                            </div>
                                        </div>
                                    </div>


                                    <div class="col-sm-3">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-5 col-form-label">
                                                Disc %
                                            </label>
                                            <div class="col-sm-7">
                                                <input type="number" class="form-control text-right" perfect-tempTable-SalesOrder="SodSalDiscountPercent" id="SodSalDiscountPercent" name="SodSalDiscountPercent" perfect-class="formGroupControl" onchange="fn_calculateDiscAmount(this)" perfect-ctype="input" perfect-css="input" />
                                                <div class="text-danger temptableError2"></div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-sm-3">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-5 col-form-label">
                                                Disc Amt
                                            </label>
                                            <div class="col-sm-7">
                                                <input type="text" class="form-control text-right" perfect-tempTable-SalesOrder="SodSalDiscount" id="SodSalDiscount" name="SodSalDiscount" perfect-class="formGroupControl" onchange="fn_calculateDiscPer(this)" oninput="decimalpnt(this,'SodSalDiscount',3)" maxlenght="12" perfect-ctype="input" perfect-css="input" />
                                                <div class="text-danger temptableError"></div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-sm-3">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-5 col-form-label">
                                                <span perfect-class="formGroupLabel">Tax </span>

                                            </label>
                                            <div class="col-sm-7">
                                                <div class="input-group">
                                                    <input type="number" class="form-control text-right" perfect-tempTable-SalesOrder="SodSalTaxAmount" id="SodSalTaxAmount" name="SodSalTaxAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly />

                                                    <div class="input-group-append">
                                                        <button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="fn_showTaxWindow(this,1)"></button>
                                                        <div class="modal fade" perfect-class="formGroupModalTax" id="formGroupModalTax">
                                                            <div class="modal-dialog modal-dialog-centered" role="document">
                                                                <div class="modal-content  rounded-0">
                                                                    <div class="modal-header border-0">
                                                                        <h5 class="modal-title">Tax Details</h5>
                                                                        <button type="button" class="close" data-dismiss="modal">
                                                                            <span>&times;</span>
                                                                        </button>
                                                                    </div>
                                                                    <div class="modal-body" perfect-class="formGroup" style="max-height: calc(100vh - 200px); overflow-y: auto;padding: 1rem;">
                                                                        <table id="zero_config" class="table mb-0  table-striped  text-black">
                                                                            <thead class="bg-primary text-white">
                                                                                <tr>
                                                                                    <th class="t-head">SlNo</th>
                                                                                    <th class="t-head" style="Display:none">FK_TaxType</th>
                                                                                    <th class="t-head">TaxType</th>
                                                                                    <th class="t-head">Percentage</th>
                                                                                    <th class="t-head">Amount</th>
                                                                                </tr>
                                                                            </thead>
                                                                            <tbody id="formGroupModalTaxbody"></tbody>
                                                                            <tfoot>
                                                                            </tfoot>
                                                                        </table>
                                                                        <div class="modal-footer">

                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <span class="temptableError"></span>

                                            </div>
                                        </div>
                                    </div>


                                    <div class="col-sm-3">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-5 col-form-label">
                                                Total
                                            </label>
                                            <div class="col-sm-7">
                                                <input type="text" class="form-control text-right" perfect-tempTable-SalesOrder="SodSalTotalAmount" id="SodSalTotalAmount" name="SodSalTotalAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');" readonly />
                                                <input type="hidden" perfect-tempTable-SalesOrder="Downpay" id="Downpay" name="Downpay" perfect-ctype="hidden" />
                                                <input type="hidden" perfect-tempTable-SalesOrder="AdditionalPay" id="AdditionalPay" name="AdditionalPay" perfect-ctype="hidden" />
                                                <input type="hidden" perfect-tempTable-SalesOrder="InstallmentAmount" id="InstallmentAmount" name="InstallmentAmount" perfect-ctype="hidden" />
                                                <input type="hidden" perfect-tempTable-SalesOrder="FK_FinancePlan" id="FK_FinancePlan" name="FK_FinancePlan" perfect-ctype="hidden" />
                                                <input type="date" perfect-tempTable-SalesOrder="Emidate" name="Emidate" id="EMIDTS" perfect-ctype="date" perfect-css="date" style="display:none" />
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-sm-3">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-5 col-form-label">
                                                Description
                                            </label>
                                            <div class="col-sm-7">
                                                <textarea class="form-control " perfect-class="formGroupControl" perfect-tempTable-SalesOrder="SodRemarks" name="SodRemarks" rows="1" placeholder="" perfect-ctype="input" maxlength="100" perfect-css="input"></textarea>

                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-sm-3">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-5 col-form-label">
                                                EMI
                                            </label>
                                            <div class="col-sm-1 col-form-label">
                                                <span perfect-class="formGroupLabel"> <input type="checkbox" class="" perfect-tempTable-SalesOrder="" name="EMIProduct" id="EMIProduct" perfect-class="formCheckInput" perfect-ctype="checkbox" perfect-css="checkbox" onclick="ShowEMI(this)" /></span>
                                            </div>
                                            <div class="input-group col-sm-5">
                                                <div class="input-group-append">
                                                    <button id="EMIid" class="btn btn-primary1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" title="EMI" onclick="ShowEMIFields(this)"><i class="fa fa-calculator" aria-hidden="true"></i></button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-3">
                                        <div class="form-group row" perfect-class="formGroup">
                                            @*<label class="col-sm-5 col-form-label">&nbsp;</label>*@

                                            <button class="btn btn-primary1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" title="Add New Product" onclick="fn_createTable(this,'SalesOrder',['FK_Product'])"><i class="fa fa-plus" aria-hidden="true"></i></button>
                                            &nbsp; <button class="btn btn-light1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" onclick="fn_resetSalesOrderItem(this,'SalesOrder')"><i class="fa fa-refresh" aria-hidden="true"></i></button>

                                        </div>
                                    </div>
                                    <div class="col-sm-3">

                                    </div>

                                    @*<div class="card-footer text-right" perfect-class="formFooter">*@


                                    @*</div>*@
                                    @*<div class="row">*@
                                    <div class="col-sm-12 mt-2">
                                        @*<div class="form-group row" perfect-class="formGroup" style="padding-right:15px;padding-left:15px;">*@
                                        <div class="table-responsive" perfect-tempTable="SalesOrder" id="salesOrdeItemHead" perfect-tempTable-lastindex="0" perfect-tempTable-action="0"></div>
                                        @*</div>*@
                                        @*</div>*@
                                    </div>

                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                @*added by anson*@
                <div class="modal fade" perfect-class="formGroupModalEMIProduct" id="formGroupModalEMIProduct">
                    <div class="modal-dialog modal-dialog-centered" role="document">
                        <div class="modal-content  rounded-0">
                            <div class="modal-header border-0">
                                <h5 class="modal-title">EMI Product</h5>
                                <button type="button" class="close" data-dismiss="modal">
                                    <span>&times;</span>
                                </button>
                            </div>
                            <div class="modal-body" perfect-class="formGroup" style="max-height: calc(100vh - 200px); overflow-y: auto;padding: 1rem;">
                                <div class="form-row">
                                    <div class="col-sm-12">
                                        <div class="card" style="margin-bottom: 0rem;">
                                            <div class="card-body" style="padding: 0.1rem;">
                                                @*<div class="table-responsive" style="max-height: 100%; height: 80%; overflow: auto;">*@
                                                <table id="EMIPdt" class="table table2-hover table-responsive-sm table2-striped  text-black">
                                                    <thead class="bg-primary text-white">
                                                        <tr>
                                                            <th class="t-head"></th>
                                                            <th class="t-head" style="display:none">FK_Product</th>
                                                            <th class="t-head">Product</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody id="formGroupModalEMIProductbody">
                                                        <tr id="0">
                                                            <td colspan="4" style="text-align:center;">No Records...</td>
                                                        </tr>
                                                    </tbody>
                                                    <tfoot>
                                                    </tfoot>
                                                </table>
                                                @*</div>*@
                                                @*<div class="modal-body" id="formGroupModalTaxbody">
                                        </div>*@
                                                <div class="modal-footer">
                                                    <button type="button" class="btn btn-primary1" @*data-dismiss="modal"*@ onclick="FindEmiPlans(this,0)">Apply</button>
                                                </div>
                                            </div>
                                        </div>
                                        <!-- /# card -->
                                    </div>

                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="modal fade" perfect-class="formGroupModalEMIDetails" id="EMIDetails">
                    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
                        <div class="modal-content  rounded-0">
                            <div class="modal-header border-0">
                                <h5 class="modal-title">EMI Plans</h5>
                                <button type="button" class="close" data-dismiss="modal">
                                    <span>&times;</span>
                                </button>
                            </div>
                            <div class="modal-body" perfect-class="formGroup" style="max-height: calc(100vh - 250px); overflow-y: auto;padding: 1rem;">
                                <div class="form-row">
                                    <div class="col-sm-12">
                                        <div class="card" style="margin-bottom: 0rem;">
                                            <div class="card-body" style="padding: 0.1rem;">
                                                @*<div class="table-responsive" style="max-height: 100%; height: 80%; overflow: auto;">*@
                                                <table id="EMIdata" class="table table2-hover table-responsive-lg table2-striped  text-black">
                                                    <thead class="bg-primary text-white">
                                                        <tr>
                                                            <th scope="col" style="display:none">SLNo</th>
                                                            <th scope="col"></th>
                                                            <th class="t-head" style="display:none">PlanID</th>
                                                            <th scope="col">Plan Name</th>
                                                            <th scope="col">Duration</th>
                                                            <th scope="col">Period</th>
                                                            <th scope="col">EMI Date</th>
                                                            <th scope="col">Processing Charge</th>
                                                            <th scope="col">Down Payment</th>
                                                            <th scope="col">Installment Amount</th>
                                                            <th class="t-head" style="display:none">Installment Amount</th>
                                                            <th class="t-head" style="display:none">Down Payment</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody id="formGroupModalEMIDetailsbody">
                                                        <tr id="0">
                                                            <td colspan="10" style="text-align:center;">No Records...</td>
                                                        </tr>
                                                    </tbody>
                                                    <tfoot>
                                                    </tfoot>
                                                </table>
                                                @*</div>*@
                                                @*<div class="modal-body" id="formGroupModalTaxbody">
                                        </div>*@
                                                <div class="modal-footer">
                                                    <button type="button" id="EMICalcs" class="btn btn-primary1" @*data-dismiss="modal"*@ onclick="EMICalculate(this)">Apply</button>
                                                </div>
                                            </div>
                                        </div>
                                        <!-- /# card -->
                                    </div>

                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="modal fade" perfect-class="formGroupModalInstallmentDetails" id="InstallmentDetails">
                    <div class="modal-dialog modal-dialog-centered" role="document">
                        <div class="modal-content  rounded-0">
                            <div class="modal-header border-0">
                                <h5 class="modal-title">EMI Plan Details</h5>
                                <button type="button" class="close" data-dismiss="modal">
                                    <span>&times;</span>
                                </button>
                            </div>
                            <div class="modal-body" perfect-class="formGroup" style="max-height: calc(200vh - 400px); overflow-y:auto; padding: 1rem;">
                                <div class="form-row">

                                    <div class="col-sm-12">
                                        <div class="card" style="margin-bottom: 0rem;">
                                            <div class="card-body" style="padding: 0.1rem;">
                                                <div class="col-sm-8 ml-2" style="display:none;">
                                                    <input type="checkbox" class="form-check-input" name="ProductWise" id="ProductWise" perfect-class="formCheckInput" perfect-ctype="checkbox" perfect-css="checkbox" onchange="EMICalculate(this)"><span perfect-class="formCheckInputText">Product Wise</span>

                                                </div>
                                                @*<div class="table-responsive" style="max-height: 100%; height: 80%; overflow: auto;">*@
                                                <table id="EMIdatagrid" class="table table2-hover table-responsive-sm table2-striped  text-black">
                                                    <thead class="bg-primary text-white">
                                                        <tr>
                                                            <th class="t-head">SLNo</th>
                                                            <th class="t-head" style="display:none">FK_Product</th>
                                                            <th class="t-head">EMI Date</th>
                                                            <th class="t-head">Amount</th>
                                                            <th class="t-head">Remarks</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody id="InstallmentDetailsbody">
                                                        <tr id="0">
                                                            <td colspan="4" style="text-align:center;">No Records...</td>
                                                        </tr>
                                                    </tbody>
                                                    <tfoot>
                                                    </tfoot>
                                                </table>
                                                @*</div>*@
                                                @*<div class="modal-body" id="formGroupModalTaxbody">
                                        </div>*@
                                                <div class="modal-footer">
                                                    <button type="button" class="btn btn-primary1" @*data-dismiss="modal"*@ onclick="BindDownpayment(this)">Apply</button>
                                                </div>
                                            </div>
                                        </div>
                                        <!-- /# card -->
                                    </div>

                                </div>
                            </div>
                        </div>
                    </div>
                </div>


                <hr>

                <div class="row">
                    <div class="col-sm-9">

                    </div>

                </div>
                <div class="row">
                    <div class="col-sm-3">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel"> Bill Total</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control perfectValidate_decimal text-right" name="SalBillTotal" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" onchange="fn_roundoff(this)" readonly />

                            </div>
                        </div>
                    </div>



                    <div class="col-sm-3">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Other Charge</span>

                            </label>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <input type="text" class="form-control text-right" name="OtherCharge" perfect-class="formGroupControl" perfect-ctype="input" id="OtherChargeSalesOrder" onchange="fn_roundoff(this);" perfect-css="input" readonly />
                                    <div class="input-group-append">

                                        <button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-credit-card" type="button" perfect-css="button" onclick="fn_showOtherCharges(SalesorderTransMode, SalesOrderid, 'OtherChargeSalesOrder')"></button>

                                        <div class="modal fade" perfect-class="formGroupModalOtherCharge" id="formGroupModalOtherCharge">
                                            <div class="modal-dialog modal-dialog-centered" role="document">
                                                <div class="modal-content  rounded-0">
                                                    <div class="modal-header border-0">
                                                        <h5 class="modal-title">Other Charge Details</h5>
                                                        <button type="button" class="close" data-dismiss="modal">
                                                            <span>&times;</span>
                                                        </button>
                                                    </div>
                                                    <div class="modal-body" perfect-class="formGroup" style="max-height: calc(100vh - 200px); overflow-y: auto;padding: 1rem;">

                                                        <table id="zero_configOthercharge" class="table mb-0  table-striped  text-black">
                                                            <thead class="bg-primary text-white">
                                                                <tr>
                                                                    <th class="t-head">Sl No</th>
                                                                    <th class="t-head" style="display:none">ID_OtherChargeType</th>
                                                                    <th class="t-head">Type</th>
                                                                    <th class="t-head">Trans Type</th>
                                                                    <th class="t-head" style="text-align:right">Amount</th>

                                                                </tr>
                                                            </thead>
                                                            <tbody id="formGroupModalOtherChargebody"></tbody>
                                                            <tfoot>
                                                            </tfoot>
                                                        </table>

                                                        <div class="modal-footer">

                                                            <button type="button" class="btn btn-primary1" data-dismiss="modal" onclick="fn_bindOtherChargesAmount(this)">Apply</button>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-3">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel"> Discount</span>

                            </label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control text-right" name="SalOrderDiscount" onchange="fn_roundoff(this)" perfect-class="formGroupControl" perfect-ctype="input" oninput="this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');" perfect-css="input" maxlength="10" />
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-3" style="display:none">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Roundoff</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control text-right" readonly name="SalOrderRoundoff" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-3 DivAdditionalAmount">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel"> Additional Amount</span>
                            </label>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <input type="text" class="form-control text-right" name="AdditionalAmount" id="AdditionalAmount" perfect-class="formGroupControl" perfect-ctype="input" oninput="this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');" perfect-css="input" readonly />
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-3 DivDownPayment">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel"> Down Payment</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control text-right" name="DownPayment" perfect-class="formGroupControl" onchange="fn_roundoff(this)" perfect-ctype="input" oninput="this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');" perfect-css="input" readonly />
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-3">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel"> Adv. Amount</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control text-right" name="SoAdvcAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');" onchange="fn_compareAdvanceAndNetAmount(this)" maxlength="10" />
                                <div class="invalid-feedback animated fadeInUp limit-check" style="display: block;"></div>

                            </div>
                        </div>
                    </div>
                    <div class="col-sm-3">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel"> Net Amount</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control text-right perfectValidate_decimal" readonly name="SalNetAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-3 AssignedToID">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Assigned To</span>
                            </label>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <input type="text" class="form-control " name="AssignedTo" perfect-class="formGroupControl" placeholder="Select Employee" perfect-ctype="input" perfect-css="input" readonly>
                                    <input type="hidden" class="form-control " name="AssignedToID" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input">
                                    <div class="input-group-append">
                                        <button id="addarea-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchVal(this,6,'Employee List',[])" criterea1="0" bindname="AssignedTo" bindval="AssignedToID"></button>
                                    </div>
                                </div>
                            </div>

                        </div>
                    </div>

                    <div class="col-sm-3">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">Payment Method</label>
                            <div class="col-sm-5">
                                <div class="input-group">

                                    <div class="input-group-append">
                                        &nbsp;<button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-money" type="button" perfect-css="button" title="Add Payment Method" onclick="GetPaymentlistsalesorder(this)"></button>

                                    </div>
                                </div>

                            </div>
                        </div>
                    </div>
                    <div class="col-sm-3">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Narration</span>

                            </label>

                            <div class="col-sm-8">
                                <div class="input-group mb-2">
                                    <div class="input-group-prepend">
                                        <span class="formGroupLabel"></span>
                                    </div>

                                    <textarea class="form-control perfectValidate_string_nm" perfect-class="formGroupControl" name="SODescription" rows="3" placeholder="" perfect-ctype="input" perfect-css="input" maxlength="250"></textarea>

                                </div>
                            </div>
                        </div>


                    </div>
                    <div class="modal fade" perfect-class="formGroupModalpayment" id="formGroupModalpayment">
                        <div class="modal-dialog  modal-dialog-centered modal-md" role="document">
                            <div class="modal-content">
                                <div class="modal-header border-0">
                                    <h5 class="modal-title">Payment Method</h5>
                                    <button type="button" class="close" data-dismiss="modal">
                                        <span>&times;</span>
                                    </button>
                                </div>
                                <div class="modal-body" perfect-class="formGroup" style="max-height: calc(100vh - 200px); overflow-y: auto;padding: 1rem;">
                                    <div class="row">


                                        <div class="col-sm-12">
                                            <div class="form-group row" perfect-class="formGroup">
                                                <label class="col-sm-4 col-form-label">Method <span class="text-danger">*</span></label>
                                                <div class="col-sm-8">
                                                    <div class="input-group">
                                                        <select class="form-control" perfect-tempTable-Payment="PaymentMethod" name="PaymentMethod" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select">
                                                            <option value="">Please Select </option>


                                                            @if (!(Model.PaymentView is null))
                                                            {
                                                                foreach (var Module in Model.PaymentView)
                                                                {
                                                                    if (Module.PMDefault == true)
                                                                    {
                                                                        <option value="@Module.PaymentmethodID" selected>@Module.Name</option>
                                                                    }
                                                                    else
                                                                    {
                                                                        <option value="@Module.PaymentmethodID">@Module.Name</option>
                                                                    }

                                                                }
                                                            }
                                                        </select>


                                                    </div>
                                                    <div class="text-danger temptableError"></div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-12">
                                            <div class="form-group row" perfect-class="formGroup">
                                                <label class="col-sm-4 col-form-label">
                                                    <span perfect-class="formGroupLabel">Ref No.</span>

                                                </label>
                                                <div class="col-sm-8">

                                                    <div class="input-group">
                                                        <input type="text" class="form-control perfectValidate_string_nm" perfect-tempTable-Payment="Refno" name="Refno" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" maxlength="20" />

                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="col-sm-12">
                                            <div class="form-group row" perfect-class="formGroup">
                                                <label class="col-sm-4 col-form-label">
                                                    <span perfect-class="formGroupLabel">Amount</span>
                                                    <span class="text-danger">*</span>
                                                </label>
                                                <div class="col-sm-8">
                                                    <div class="input-group">
                                                        <input type="text" class="form-control text-right" perfect-tempTable-Payment="PAmount" id="PAmount" name="PAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="decimalpnt(this,'PAmount',3)" onchange="Pamount(this)" maxlength="12" />

                                                    </div>
                                                    <div class="text-danger temptableError"></div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-9">


                                        </div>
                                        <div class="col-sm-3 text-right">
                                            <div class="input-group">

                                                <div class="input-group-append">
                                                    <div>
                                                        <button type="button" class="btn btn-primary1 " onclick="createtable(this,'Payment',['PaymentMethod'],paytableOptionsTempOut)"><i class="fa fa-plus" aria-hidden="true"></i></button>
                                                        <button class="btn btn-light1" type="button" onclick="productclear(this, 'Payment')"><i class="fa fa-refresh" aria-hidden="true"></i></button>
                                                    </div>
                                                </div>
                                            </div>

                                        </div>
                                        <div class="col-sm-12">
                                            <div class="form-group row" perfect-class="formGroup">
                                                <label class="col-sm-4 col-form-label">
                                                    <span perfect-class="formGroupLabel" style="font-weight:500;">Bal. Amount :</span>

                                                </label>
                                                <div class="col-sm-8">
                                                    <div class="input-group">

                                                        <label class="col-form-label">
                                                            <span perfect-class="formGroupLabel" style="font-weight:500;" name="BalAmt"></span>
                                                        </label>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>


                                        <div class="col-sm-12">
                                            <div class="form-group row" perfect-class="formGroup">

                                                <div class="table-responsive" perfect-tempTable-Payment="" perfect-tempTable="Payment" id="Paymentdethead" perfect-tempTable-lastindex="0" perfect-tempTable-action="0"></div>
                                                <div class="text-danger temptableError"></div>

                                            </div>
                                        </div>


                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-primary light" onclick="SoBillttlnetchck(this)">Apply</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>

                <div class="card-footer text-right" perfect-class="formFooter">

                    @if (ViewBag.PagedAccessRights.UsrrlMsEdt)
                    {
                        <button id="" type="button" class="btn btn-primary mr-3 addcompany-jq-addnewuserUpdate d-none" name="update" perfect-css="button" onclick="fn_UpdateSalesOrder(this,'update')"><i class="fa fa-refresh fa-spin loaderClass"></i>Update</button>
                        <button type="button" class="btn btn-light d-none" id="idcomprint" name="idcomprint" perfect-css="button" onclick="getPageSize(this)">Print</button>

                    }
                    @if (ViewBag.PagedAccessRights.UsrrlMsAdd)
                    {
                        <button id="addcompany-jq-addnewuser" type="button" class="btn btn-primary mr-3 " name="add" perfect-css="button" onclick="fn_UpdateSalesOrder(this,'new')"><i class="fa fa-refresh fa-spin loaderClass "></i>Save</button>
                    }
                    <button type="button" class="btn btn-light" perfect-css="button" onclick="fn_resetSalesOrder(this)" name="reset">Clear</button>
                </div>
                <div id="Id_mock_div" style="visibility: hidden;"></div>

            </div>
        </form>
    </div>
</div>

<script src="~/Scripts/jqDOM/searchDOMCreation.js"></script>
<script>

 //on load functions
    $(document).ready(function () {
        ShowEMI();
        //AssignToShow(this);
        initFunctions('form');
    });

    //to load Imports List
    function fn_showSalesOrderImportList(element) {

        let $thisForm = $(element).closest('[perfect-class="form"]');


        switch (parseInt($thisForm.find('[name="ddlImportsList"]').val())) {
            case 1:
                GetCmnPopUpSearchValAssign(element, 7, 'Customer List', [], ['ID_Customer', 'CustomeName', 'MobileNo', 'State','GSTINNo'], SalesorderTransMode);
                break;
            case 2:
                GetCmnPopUpSearchValAssign(element, 33, 'Lead List', [], ['FK_Lead', 'FK_CustomerOthers', 'FK_Customer', 'CustomeName', 'MobileNo', 'FK_Employee','Employee'], SalesorderTransMode)
                break;
            case 3:
                fn_GetQuotationList(element);
                break;
            default:
                NotificationMessage({ 'type': 'info', 'heading': 'info', 'message': 'Please Select Import From' });
                break;
        }
    }

    //to show and hide new customer button
    function fn_showandHideNewCustomerButton(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        $thisForm.find('[name="CustomeName"]').val("")
        $thisForm.find('[name="MobileNo"]').val("")
        $thisForm.find('[name="Employee"]').val("")

        if ($thisForm.find('[name="ddlImportsList"]').val() == 1) {
            document.getElementById("customerbtn").style.display = 'block';
        }
        else {
            document.getElementById("customerbtn").style.display = 'none';
        }


        console.log('ID_LEAD', $thisForm.find('[name="FK_Lead"]').val());
        fn_resetSalesOrderItem(ele);
        let $tblcontainer = $thisForm.find('[perfect-tempTable="SalesOrder"]');
        let $Ptblcontainer = $thisForm.find('[perfect-tempTable="Payment"]');
        othrchargelst = [];
        EMIPlandata = [];
        productclear(ele, 'Payment');
        //$thisForm.data({ pwarranty: null });
        $thisForm.data({ pOthrChgData: '' });

        AssignToShow(ele);

        $tblcontainer.empty();
        $Ptblcontainer.empty();
        $thisForm.find('[perfect-tempTable-SalesOrder]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
        $thisForm.find('[perfect-tempTable="SalesOrder"]').html('');
        $thisForm.find('[name="SalBillTotal"]').val('');
        $thisForm.find('[name="SalNetAmount"]').val('');
        $thisForm.find('[name="OtherCharge"]').val('');
        $thisForm.find('[name="SalOrderDiscount"]').val('');
        $thisForm.find('[name="SalNetAmount"]').val('');
        $thisForm.find('[name="SoAdvcAmount"]').val('');
        $thisForm.find('[name="SalOrderRoundoff"]').val('');
        $thisForm.find('[name="AdditionalAmount"]').val('');
        $thisForm.find('[name="DownPayment"]').val('');
        $thisForm.find('[name="AssignedToID"]').val('');
        $thisForm.find('[name="AssignedTo"]').val('');

        $thisForm.find('[name=CustomeName]').attr("readonly", "readonly");

        let $thisform = $(ele).closest('[perfect-class="form"]');
        $thisform.find('[perfect-temptable-SalesOrder]').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-SalesOrder]').closest('[perfect-ctype="select"]').val('0').selectpicker('refresh');
        $thisform.find('[perfect-temptable-SalesOrder]').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-SalesOrder]').closest('[perfect-ctype="date"]').val('');
        $thisform.find('[perfect-temptable-SalesOrder]').closest('[perfect-ctype="hidden"]').val('');
        $thisform.find('[perfect-temptable-SalesOrder]').closest('[perfect-ctype="checkbox"]').val('');

        $('input[type=checkbox]').prop('checked', false);
        ShowEMI(ele);
        $thisForm.data({ Emiplandata: '' });

    }


    //to New Cutomer popup

    var sdvalidationMessage = {
        'BranchID': {
            'required': 'Please select a branch',
            'digits': 'Invalid Branch selected'
        },
        'CustomerTypeID': {
            'required': 'Please select a Customer Type',
            'digits': 'Invalid Customer Type selected'
        },
        'Number': {
            'required': 'Enter customer number',
            'digits': 'Customer number should be digits'
        },
        //'LeadGenerateID': {
        //    'required': 'Please enter Lead no.',
        //    'digits':'Lead number should be digits'
        //},
        'Name': {
            'required': 'Please enter customer name',
            'maxlength': jQuery.validator.format('Customer name should be less than {0} characters'),
            'stringonly': 'Special characters are not allowed in customer name'
        },
        'Address1': {
            'required': 'Please enter Address ',
            'maxlength': jQuery.validator.format('Address  should be less than {0} characters'),
            'stringonly': 'Special characters are not allowed in Address'
        },


        'CountryID': {
            'required': 'Please select a Country',
            'digits': 'Invalid Country selected'
        },
        'StatesID': {
            'required': 'Please select a State',
            'digits': 'Invalid State selected'
        },
        'DistrictID': {
            'required': 'Please select a District',
            'digits': 'Invalid District selected'
        },

        'Mobile': {
            'required': 'Please enter customer mobile',
            'anyphonenumber': 'Invalid mobile number',
            'minlength': jQuery.validator.format('Customer mobile should be more than {0} characters'),
            'maxlength': jQuery.validator.format('Customer mobile should be less than {0} characters')
        },
        'Phone': {

            'anyphonenumber': 'Invalid phone number',
            'minlength': jQuery.validator.format('Customer phone should be more than {0} characters'),
            'maxlength': jQuery.validator.format('Customer phone should be less than {0} characters')
        },

        'CategoryID': {
            'required': 'Please select a Category',
            'digits': 'Invalid Category Mode selected'
        },
        'ContactPerson': {
            'required': 'Please enter Contact Person name',
            'maxlength': jQuery.validator.format('Contact Person name should be less than {0} characters'),
            'stringonly': 'Special characters are not allowed in Contact Person name'
        },

        'ContactMobile': {
            'required': 'Please enter  Contact Mobile',
            'anyphonenumber': 'Invalid Contact Person Phone',
            'minlength': jQuery.validator.format('Contact Person Phone should be more than {0} characters'),
            'maxlength': jQuery.validator.format('Contact Person Phone should be less than {0} characters')
        },

        'BranchTypeID': {
            'required': 'Please select a Branch Type',
            'digits': 'Invalid Branch Type selected'
        },


    };
    function fn_openNewCustomerWindow(ele)
            {

               $('#formGroupModalcustmr').modal('show');
               let $savimgContainer = $('#custmr-sav');
               $savimgContainer.load('@Url.Action("LoadCustomerForm", "Customer")?mtd=z0DVmXs+FMAB3aADRDG8WTWw1evmcvGfMOHu9hkviC4=', function () {
                   let $thisForm = $(this).find('[perfect-class="form"]');
                   $thisForm.validate({ messages: sdvalidationMessage });
                   $thisForm.attr('perfect-onFormSuccess', 'fn_scustomerIndex_initialLoad');
                   initFunctions($thisForm);

                      });
    }
    function fn_scustomerIndex_initialLoad() {

        $('#formGroupModalcustmr').modal('hide');

    }
    //to open warranty window
    function fn_openWarrantyWindow(ele) {
        $('#modalWarrantyWindow').modal('show');
    }


    //to show tax window
    function fn_showTaxWindow(element, mod) {
        debugger
        let $thisForm = $(element).closest('[perfect-class="form"]');
        let taxinfo = [];
        debugger
        if ($thisForm.data('pDataTax')) {
            if ($thisForm.data('pDataTax').length > 0) {
                taxinfo = $thisForm.data('pDataTax');
            }
            else {
                taxinfo.push($thisForm.data('pDataTax'));
            }

            let sum = 0;
            var CheckListHTML = '';
            $.each(taxinfo, function (i, value) {

                sum = sum + parseFloat(value.TaxAmount);
                CheckListHTML += "<tr>";
                CheckListHTML += "<td>" + value.SlNo + "</td>";
                CheckListHTML += "<td Class='jq_ProductID_td' Style='Display:none'>" + value.ProductID + "</td>";
                CheckListHTML += "<td class='jq_taxType_td' Style='Display:none'>" + value.FK_TaxType + "</td>";
                CheckListHTML += "<td class='jq_taxTypeName_td'>" + value.TaxtyName + "</td>";
                CheckListHTML += "<td class='jq_taxPer_td text-center'>" + value.TaxPercentage + "</td>";
                CheckListHTML += "<td class='jq_taxamount_td text-right' >  " + value.Amount + "</td>";
                CheckListHTML += "</tr>";
            })

            $("#formGroupModalTaxbody").html(CheckListHTML)

            if (mod == 1) {
                $('#formGroupModalTax').modal('show');
            }
            else {
                $('#formGroupModalTax').modal('hide');
            }

            fn_bindTaxAmount(element)
        }
        else {
            fn_bindTaxDetails("1", 'formGroupModalTax', element, mod)
        }
    }

    //to bind Tax amount
    function fn_bindTaxAmount(element) {
        let $thisForm = $(element).closest('[perfect-class="form"]');
        let sum = 0;

        $('#formGroupModalTaxbody tr').each(function (index, element) {
            sum = sum + parseFloat($(element).find('.jq_taxamount_td').text());
        });

        $thisForm.find('[name=SodSalTaxAmount]').val(sum.toFixed(2));
        fn_totalAmountItem(element);
    }

    //to bind tax details
    function fn_bindTaxDetails(Mode, ModalID, element, mod)
    {debugger
        let $thisForm = $(element).closest('[perfect-class="form"]');
        let totalAmount = ($thisForm.find('[name=SodSalPrice]').val() * $thisForm.find('[name=SodSalQuantity]').val())
        var InputData =
        {
            FK_Product: $thisForm.find('[name=FK_Product]').val(),
            Includetax: 0,

            Quantity: $thisForm.find('[name=SodSalQuantity]').val(),
            Amount: totalAmount,
        }
        $.ajax({
            url: "@Url.Action("GetTaxAmountNew", "SalesOrder")",
            type: "Get",
            data: InputData,
            dataType: "json",
            contentType: "application/json",
            success: function (ajaxOutput) {
                     if (ajaxOutput.Process.IsProcess) {
                         var CheckListHTML = '';
                         let sum = 0;

                         if (ajaxOutput.Data.length > 0) {
                             $.each(ajaxOutput.Data, function (i, value) {
                                 sum = sum + parseFloat(value.TaxAmount);
                                 CheckListHTML += "<tr>";
                                 CheckListHTML += "<td>" + value.SlNo + "</td>";
                                 CheckListHTML += "<td Class='jq_ProductID_td' Style='Display:none'>" + value.ProductID + "</td>";
                                 CheckListHTML += "<td class='jq_taxType_td' Style='Display:none'>" + value.FK_TaxType + "</td>";
                                 CheckListHTML += "<td class='jq_taxTypeName_td'>" + value.TaxTyName + "</td>";
                                 CheckListHTML += "<td class='jq_taxPer_td text-center'>" + value.TaxPercentage + "</td>";
                                 CheckListHTML += "<td class='jq_taxamount_td text-right' >  "+ value.Amount + "</td>";
                                 CheckListHTML += "</tr>";
                             })
                         }
                         else {
                             CheckListHTML += "<div class='form-group col-md-6'>";
                             CheckListHTML += "<div class='form-check mb-2'>";
                             CheckListHTML += "<input type='checkbox' class='form-check-input' >"
                             CheckListHTML += "<label class='form-check-label' for='check1'>No Records...</label>";
                             CheckListHTML += "</div></div>"
                         }

                         $("#formGroupModalTaxbody").html(CheckListHTML)
                         if (mod == 1) {
                             $('#formGroupModalTax').modal('show');
                         }
                         else {
                             $('#formGroupModalTax').modal('hide');
                         }

                         fn_bindTaxAmount(element)
                     }
                     else {
                         $.each(ajaxOutput.Process.Message, function (key, value) {
                             NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                         });
                     }
                },
                complete: function () {
                    $(element).prop('disabled', false);
                }
            });
    }

  
    var otherchgcalled = 0;
    function fn_bindOtherChargesAmount(ele) {
        otherchgcalled == 1;
        console.log('inside binddatat fn')
        let $modal = $(ele).closest('.modal');
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let sum = 0;
        othrchargelst = [];
        $modal.find('table tbody').find('tr').each(function () {

            let value = parseFloat($(this).find('.jq_OtherChagAmnt_td').find('input').val());;
            if ($(this).find('.jq_OtherChagAmnt_td').find('input').val() == '' || $(this).find('.jq_OtherChagAmnt_td').find('input').val() == null) {
                value = 0;
            }

            if (parseInt($(this).find('.jq_TransType_td').find('select').val()) == 0) {
                value = value * 0;
            }
            else if (parseInt($(this).find('.jq_TransType_td').find('select').val()) == 1) {
                value = value * 1;
            }
            else {
                value = value * -1;
            }
            sum = parseFloat(sum) + value;

            let othrcharge = {
                ID_OtherChargeType: $(this).find('.jq_ID_OtherChargeType_td').text(),
                OctyTransType: $(this).find('.jq_TransType_td').find('select').val(),
                OctyAmount: parseFloat($(this).find('.jq_OtherChagAmnt_td').find('input').val())
            };
            othrchargelst.push(othrcharge);
            console.log('othrchargelst', othrchargelst)

        });

        $thisForm.find('[name=OtherCharge]').val(sum.toFixed(2));
        fn_roundoff(ele);
    }


    var tableOptionsTempOut = {
        iconButton: {
            buttons: [
                {
                    icon: "fa fa-pencil btnPerfectGridEdit",
                    action: function () {
                        let savedData = $(this).closest('tr').data('pData')

                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let tableKey = $tablecontainer.attr('perfect-tempTable');
                        let $thisForm = $tablecontainer.closest('[perfect-class="form"]');

                        let indexname = tableKey + 'index';

                        $thisForm.find('[name=prdbtn]').attr("disabled", "disabled")

                        let rindex = $(this).closest('tr').attr(indexname);

                        $tablecontainer.attr('perfect-tempTable-action', rindex);

                        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                            let $thisNode = $(this);
                            let pf_name = $thisNode.attr('name');
                            if ($thisNode.is('select')) {

                                $thisNode.val(savedData[pf_name]).selectpicker('refresh');

                            }
                            else if ($thisNode.is('input')) {
                                let inputType = $thisNode.attr('type').toLocaleLowerCase();
                                if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                    $thisNode.prop('checked', savedData[pf_name]);
                                }
                                else {

                                    $thisNode.val(savedData[pf_name]);
                                }
                            }
                            else {
                                $thisNode.val(savedData[pf_name]);
                            }
                            console.log('SAVED EMI DATA>>>>>>>', savedData);
                            var plandata = [];
                            console.log(savedData.FK_FinancePlan);
                            let emidt = {
                                FK_FinancePlan: savedData.FK_FinancePlan,
                                EMIDate: savedData.Emidate,
                                AdditionalAmount: savedData.AdditionalPay,
                                Downpayment: savedData.Downpay,
                                Installment: savedData.InstallmentAmount,
                            }
                            plandata.push(emidt);
                            $thisForm.data({ Emiplandata: plandata });
                            ShowEMI(this);
                        });

                    }
                },
                {
                    icon: "fa fa-trash btnPerfectGridDelete",
                    action: function () {
                        debugger
                        let $thistbl = $(this).closest('table');
                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let savedData = $(this).closest('tr').data('pData')
                        let table = $thistbl.DataTable();
                        let valid = true;
                        //valid = RemoveTaxArray(savedData.ProdName);
                        let downpayment = 0;
                        let AdditionalPay = 0;
                        downpayment = savedData.Downpay;
                        AdditionalPay = savedData.AdditionalPay;
                        if (valid) {
                            table.destroy();
                            if ($(this).closest('tbody').find('tr').length > 1) {
                                $(this).closest('tr').remove();
                                pft_table_slreset($thistbl);
                            }
                            else {
                                $thistbl.remove();
                            }
                            let $thisItem = $('[perfect-class="TempTableProduct"]');
                            $thisItem.find('[perfect-ctype="input"]').val('');
                            $thisItem.find('[perfect-ctype="hidden"]').val('');
                            $thisItem.find('[perfect-ctype="select"]').val('0').selectpicker('refresh');
                            let $thisForm = $('[perfect-class="form"]');
                            $thisForm.find('[name=prdbtn]').removeAttr("disabled", "disabled");

                            let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tkey + '"]');
                            $tblcontainer.attr('perfect-tempTable-action', 0);
                        }
                        RemoveEMIArray(this, savedData.FK_Product)
                        fn_roundoff($tablecontainer, downpayment, AdditionalPay);
                        AssignToShow(this);
                       
                      
                    }
                },
            ]
        },

        rowAttribute: ["ProdName", "SodSalPrice", "SodMRP", "SodSalQuantity", "Sprice", "SodSalDiscount", "SodSalTaxAmount", "SodSalTotalAmount", "InstallmentAmount", "Downpay", "AdditionalPay", "Emidate", "FK_FinancePlan","EMIProduct"],
        renameHeader: { "ProdName": "Product", "SodSalQuantity": "Qty", "SodSalPrice": "Sale Price", "SodMRP": "MRP", "Sprice": "Sale Price", "SodSalDiscount": "Discount", "SodSalTaxAmount": "Tax", "SodSalTotalAmount": "Total","ProductLocation":"Floor"},
        hideColumn: ['ID_SalesOrderDetails', 'FK_SalesOrder', 'FK_Product', 'SodSalDiscountPercent', 'SodRemarks', 'Sprice', 'InstallmentAmount', 'Downpay', 'AdditionalPay', 'Emidate', 'FK_FinancePlan', "EMIProduct",'MinRate','MaxRate'],
        serialNo: true,

    };

    //to create sales order items details table
    function fn_createTable(element, tkey, uniq = [])
    {
        let $thisForm = $(element).closest('[perfect-class="form"]');
        let tableKey = tkey;
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');

        let insertData = {};
        let tableOptionsTemp = tableOptionsTempOut;

        let unique = (uniq) ? uniq : [];

        let isValid = true;
        let errorClass = '.temptableError';
        let errorClass1 = '.temptableError1';
        let errorClass2 = '.temptableError2';

        let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
        let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
        let indexname = tkey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);
        let updateCond = '';
        let isNew = true;

        if (thisactionIndex > 0) {
            insertData[indexname] = thisactionIndex;
            updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
            isNew = false;
        }
        else {
            insertData[indexname] = lastIndex + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
            isNew = true;
        }
        if (tableKey == 'SalesOrder') {

            isValid = validwartdetails(element, tableKey, errorClass, isValid);
        }

        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="ProdName"]').val().length == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="ProdName"]').val().length == null) {
            isValid = false;

            $thisForm.find('[perfect-tempTable-' + tableKey + '="ProdName"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please select the Product');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="ProdName"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }

        let prodQty = (isNaN($thisForm.find('[perfect-tempTable-' + tableKey + '="SodSalQuantity"]').val()) ? 0 : $thisForm.find('[perfect-tempTable-' + tableKey + '="SodSalQuantity"]').val())

        if (parseFloat(prodQty) <= 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="SodSalQuantity"]').val().length==0) {
            isValid = false;
            $thisForm.find('[perfect-tempTable-' + tableKey + '="SodSalQuantity"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please enter at least one Quantity');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="SodSalQuantity"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }

        let prodPrice = (isNaN($thisForm.find('[perfect-tempTable-' + tableKey + '="SodSalPrice"]').val()) ? 0 : $thisForm.find('[perfect-tempTable-' + tableKey + '="SodSalPrice"]').val())
        let maxrate = $thisForm.find('[perfect-tempTable-' + tableKey + '="MaxRate"]').val();
        let minrate = $thisForm.find('[perfect-tempTable-' + tableKey + '="MinRate"]').val();



        //let checkadmin = 'True';

            if (parseFloat(prodPrice) <= 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="SodSalPrice"]').val().length == 0) {
                isValid = false;
                $thisForm.find('[perfect-tempTable-' + tableKey + '="SodSalPrice"]').closest('[perfect-class="formGroup"]').find(errorClass1).text('Sales Price Should be greater than 0');
                $thisForm.find('[perfect-tempTable-' + tableKey + '="SodSalPrice"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }
            else {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="SodSalPrice"]').closest('[perfect-class="formGroup"]').find(errorClass1).text('');
            }






        let Mrp = (isNaN(parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="SodMRP"]').val())) ? 0 : parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="SodMRP"]').val()));

        if (parseFloat(Mrp) < parseFloat(prodPrice)) {
            isValid = false;
            $thisForm.find('[perfect-tempTable-' + tableKey + '="SodMRP"]').closest('[perfect-class="formGroup"]').find(errorClass).text('MRP should be Greater than or Equal to Sale Price');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="SodMRP"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }
        if (parseFloat(100) < parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="SodSalDiscountPercent"]').val())) {
            isValid = false;
            $thisForm.find('[perfect-tempTable-' + tableKey + '="SodSalDiscountPercent"]').closest('[perfect-class="formGroup"]').find(errorClass2).text('Discount % Should be less than or equal to 100');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="SodSalDiscountPercent"]').closest('[perfect-class="formGroup"]').find(errorClass2).text('');
        }
        //if ($thisForm.find('[perfect-tempTable-' + tableKey + '="ProductLocation"]').val().length == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="ProductLocation"]').val().length == null || $thisForm.find('[perfect-tempTable-' + tableKey + '="ProductLocation"]').val() == "") {
        //    isValid = false;

        //    $thisForm.find('[perfect-tempTable-' + tableKey + '="ProductLocation"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please select the Product Location');
        //}
        //else {
        //    $thisForm.find('[perfect-tempTable-' + tableKey + '="ProductLocation"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        //}
        if (unique.length > 0) {
            let prevData = [];
            $tblcontainer.find('table > tbody').find('tr').each(function () {
                if (isNew) {
                    prevData.push($(this).data('pData'));
                }
                else {
                    if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                        prevData.push($(this).data('pData'));
                    }

                }

            })

            unique.forEach(function (key, i) {

                let $thisEle = $thisForm.find('[perfect-tempTable-' + tableKey + '="' + key + '"]');

                console.log($thisEle)
                let headerEleName = $thisForm.find('[name="lblProName"]').text();
                let atname = $thisEle.attr('name');
                let cvalue;


                if ($thisEle.length != 0) {
                    let $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
                    let errmessage = headerEleName + " Already exits"

                    if ($thisEle.is('select')) {
                        cvalue = $thisEle.val();

                    }
                    else if ($thisEle.is('input')) {

                        let inputEleType = $thisEle.attr('type').toLocaleLowerCase();

                        if (inputEleType == 'checkbox') {

                            cvalue = $thisEle.is(':checked');
                        }
                        else if (inputEleType == 'hidden') { cvalue = $thisEle.val(); }
                        else { cvalue = $thisEle.val(); }
                    }

                    else {
                        cvalue = $thisEle.val();
                    }

                    if (prevData.find(a => a[atname] == cvalue)) {
                        $errorElement.text(errmessage);
                        isValid = false;
                    }
                }
            });

        }
        var Emivalid = 1;

        debugger
        if (document.getElementById('EMIProduct').checked == true) {
            let EMI = $thisForm.find('[perfect-tempTable-SalesOrder="FK_FinancePlan"]').val();
            console.log('EMI ARRAY>>>>>>>>>>>>>>>>', EMI)
            if (EMI== 0) {
                Emivalid = 0;
            }
            else {
                Emivalid = 1;
            }
        }
        else {
            Emivalid = 1;
            $thisForm.find('[perfect-tempTable-SalesOrder="FK_FinancePlan"]').val('');
        }
        if (isValid) {
            if (Emivalid > 0) {

                $thisForm.data({ Emiplandata: '' });
                if (isNew) {
                    EMIAdd(this);
                }
                else {
                    EMIRet(this);
                }

                $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                    let $this = $(this);
                    let headerName = $this.attr('perfect-tempTable-' + tableKey);
                    let nameAttr = $this.attr('name');

                        if ($this.is('select')) {
                            switch (headerName) {
                                case "ProductLocation":
                                    headerName = "Floor";
                                    break;
                                default:
                                    break
                            }
                        tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                        tableOptionsTemp.hideColumn.push(nameAttr)
                        if ($this.val() != null) {
                            let selectText = ($this.val().length == 0) ? '' : $this.children(":selected").text();
                            insertData[nameAttr + '_d'] = selectText;
                        }
                        else {
                            let selectText = ($this.val() == null) ? '' : $this.children(":selected").text();
                            insertData[nameAttr + '_d'] = selectText;
                        }
                        insertData[nameAttr] = $this.val();
                            if ($this.children(":selected").text() == "Please select") {
                                insertData[nameAttr + '_d'] = "";
                            }
                        $this.val('0').selectpicker('refresh');
                    }
                    else if ($this.is('input')) {

                        let inputType = $this.attr('type').toLocaleLowerCase();

                        if (inputType == 'checkbox') {
                            insertData[nameAttr] = false
                            if ($this.is(':checked')) {
                                insertData[nameAttr] = true
                            }

                            //insertData[nameAttr] = $this.is(':checked');

                            //tableOptionsTemp.isCheckType.push(nameAttr)
                            //clear field
                            $this.prop('checked', false);

                        }
                        else if (inputType == 'hidden') {

                            insertData[nameAttr] = $this.val();
                            $this.val('');

                        }

                        else {

                            insertData[nameAttr] = $this.val();

                            $this.val('');
                        }
                    }
                    else {
                        insertData[nameAttr] = $this.val();

                        $this.val('');
                    }
                });

                if (isNew) {
                    if ($tblcontainer.find('table').length == 0) {
                        $tblcontainer.append(pft_table_createtable([insertData], tableOptionsTemp));
                    }
                    else {
                        let table = $tblcontainer.find('table').DataTable()
                        table.destroy()
                        pft_table_addTableRow($tblcontainer.find('table'), insertData, tableOptionsTemp);
                    }

                }
                else {
                    let table = $tblcontainer.find('table').DataTable()
                    table.destroy()
                    pft_table_replaceTableRow($tblcontainer.find('table'), updateCond, insertData, tableOptionsTemp);


                }

                $tblcontainer.attr('perfect-tempTable-action', 0);
                if (tableKey == 'SalesOrder') {
                    $thisForm.find('[name=prdbtn]').removeAttr("disabled", "disabled");
                }

                ShowEMI();
                AssignToShow(element)
                fn_bindBillDetails(element)
                fn_roundoff(element);
                fn_totalAmountItem(element);
                Bindemivalues = 0;
            }
            else {
                NotificationMessage({ 'type': 'error', 'heading': 'ERROR', 'message': "EMI Details Not Added" });
            }
        }


    }
    function fn_bindBillDetails(element) {
        let $thisForm = $(element).closest('[perfect-class="form"]');
        let sprice = 0;
        let stax = 0;
        let sdisc = 0;
        let billttl = 0;

        $('#salesOrdeItemHead').find('tbody tr').each(function (index, element) {
            sprice = sprice + parseFloat($(element).find('.Sprice').text());
            sdisc = sdisc + parseFloat($(element).find('.SodSalDiscount').text());
            stax = stax + parseFloat($(element).find('.SodSalTaxAmount').text());
        });
        billttl = (sprice)/* - sdisc*/;
        $thisForm.find('[name=SalBillTotal]').val(billttl.toFixed(2));
        fn_totalAmountItem(element);
    }
    function fn_salecalc(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let Spric = $thisForm.find('[name="SodSalPrice"]').val() == "" ? "0" : $thisForm.find('[name="SodSalPrice"]').val();
        let qtys = $thisForm.find('[name="SodSalQuantity"]').val() == "" ? "0" : $thisForm.find('[name="SodSalQuantity"]').val();
        let disamt = $thisForm.find('[name="SodSalDiscount"]').val() == "" ? "0" : $thisForm.find('[name="SodSalDiscount"]').val();
        let disp = $thisForm.find('[name="SodSalDiscountPercent"]').val() == "" ? "0" : $thisForm.find('[name="SodSalDiscountPercent"]').val();
        let MRP = $thisForm.find('[name="SodMRP"]').val() == "" ? "0" : $thisForm.find('[name="SodMRP"]').val();
        let discam = 0;
        if (qtys)
            $thisForm.find('[name="SpdSalQuantity"]').val(parseFloat(qtys).toFixed(3))
        if (parseFloat(MRP) > 0) {
            discam = parseFloat(MRP) - parseFloat(Spric);
        }
        console.log('discam', discam)
        $thisForm.find('[name=SodMRP]').val(parseFloat(MRP).toFixed(2));
        $thisForm.find('[name=SodSalPrice]').val(parseFloat(Spric).toFixed(2));
        $thisForm.find('[name=SodSalDiscount]').val(discam.toFixed(2));
        let discper = (parseFloat(discam) / parseFloat(MRP)) * 100;
        var discpt = discper.toString();
        if (discpt.includes('.')) {
            $thisForm.find('[name=SodSalDiscountPercent]').val(discper.toFixed(2));
        }
        else {
            if (isNaN(discper)) {
                $thisForm.find('[name=SodSalDiscountPercent]').val(0);
            }
            else {
                $thisForm.find('[name=SodSalDiscountPercent]').val(discper);
            }
        }

        fn_showTaxWindow(ele, 0)
        fn_totalAmountItem(ele);
    }
    function fn_calculateActualPrice(element) {
        let $thisForm = $(element).closest('[perfect-class="form"]');
        let Spric = $thisForm.find('[name="SodSalPrice"]').val() == "" ? "0" : $thisForm.find('[name="SodSalPrice"]').val();
        let qtys = $thisForm.find('[name="SodSalQuantity"]').val() == "" ? "0" : $thisForm.find('[name="SodSalQuantity"]').val();

        $thisForm.find('[name=Sprice]').val(parseFloat(Spric)/* * parseFloat(qtys)*/);
        //fn_calculateDiscAmount(element)
        fn_showTaxWindow(element, 0)
        fn_totalAmountItem(element);

    }

    function fn_calculateDiscAmount1(element) {
        let $thisForm = $(element).closest('[perfect-class="form"]');
        let Sprice = $thisForm.find('[name="SodSalPrice"]').val() == "" ? "0" : $thisForm.find('[name="SodSalPrice"]').val();
        let qty = $thisForm.find('[name="SodSalQuantity"]').val() == "" ? "0" : $thisForm.find('[name="SodSalQuantity"]').val();
        let disp = $thisForm.find('[name="SodSalDiscountPercent"]').val() == "" ? "0" : $thisForm.find('[name="SodSalDiscountPercent"]').val();
        let discam = (parseFloat(Sprice)/* * parseFloat(qty)*/ * parseFloat(disp)) / 100;

        $thisForm.find('[name=SodSalDiscount]').val(Number(discam).toFixed(2));
        fn_totalAmountItem(element);
    }
    function fn_calculateDiscPer1(ele) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let Sprice = $thisForm.find('[name="SodSalPrice"]').val() == "" ? "0" : $thisForm.find('[name="SodSalPrice"]').val();
        let qty = $thisForm.find('[name="SodSalQuantity"]').val() == "" ? "0" : $thisForm.find('[name="SodSalQuantity"]').val();
        let disamt = $thisForm.find('[name="SodSalDiscount"]').val() == "" ? "0" : $thisForm.find('[name="SodSalDiscount"]').val();
        let discper = (parseFloat(disamt) * 100) / (parseFloat(Sprice) /** parseFloat(qty)*/);

        $thisForm.find('[name=SodSalDiscountPercent]').val(Number(discper).toFixed(2));
        fn_totalAmountItem(ele);
    }
    //////
    function fn_calculateDiscAmount2(element, mod) {
        debugger
        let $thisForm = $(element).closest('[perfect-class="form"]');
        let MRP = $thisForm.find('[name="SodMRP"]').val() == "" ? "0" : $thisForm.find('[name="SodMRP"]').val();
        let qty = $thisForm.find('[name="SodSalQuantity"]').val() == "" ? "0" : $thisForm.find('[name="SodSalQuantity"]').val();
        let disp = $thisForm.find('[name="SodSalDiscountPercent"]').val() == "" ? "0" : $thisForm.find('[name="SodSalDiscountPercent"]').val();
        let discam = (parseFloat(MRP)/* * parseFloat(qty)*/ * parseFloat(disp)) / 100;

        $thisForm.find('[name=SodSalDiscountPercent]').val(Number(disp).toFixed(2));
        $thisForm.find('[name=SodSalDiscount]').val(Number(discam).toFixed(2));
        let salprice = 0;
        if (mod != 1 && parseFloat(MRP) > 0) {
            salprice = parseFloat(MRP) - parseFloat(discam);
            $thisForm.find('[name=SodSalPrice]').val(salprice.toFixed(2));
        }

        fn_totalAmountItem(element);
    }
    function fn_calculateDiscPer(ele,mod) {
        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let MRP = $thisForm.find('[name="SodMRP"]').val() == "" ? "0" : $thisForm.find('[name="SodMRP"]').val();
        let qty = $thisForm.find('[name="SodSalQuantity"]').val() == "" ? "0" : $thisForm.find('[name="SodSalQuantity"]').val();
        let saleprice = parseFloat($thisForm.find('[name="SodSalPrice"]').val() == "" ? "0" : $thisForm.find('[name="SodSalPrice"]').val());
        let disamt = $thisForm.find('[name="SodSalDiscount"]').val() == "" ? "0" : $thisForm.find('[name="SodSalDiscount"]').val();
        if (parseFloat(disamt) == 0 && parseFloat(MRP) > 0) {
            disamt = parseFloat(MRP) - parseFloat(saleprice);
        }
        let discper = 0;
        if (parseFloat(MRP) > 0) {
            discper = (parseFloat(disamt) * 100) / (parseFloat(MRP) /** parseFloat(qty)*/);
        }
        $thisForm.find('[name=SodSalDiscountPercent]').val(Number(discper).toFixed(2));
        let salprice = 0;
        if (mod != 1 && parseFloat(MRP) > 0) {
            salprice = parseFloat(MRP) - parseFloat(disamt);
            $thisForm.find('[name=SodSalPrice]').val(salprice.toFixed(2));
        }

        fn_totalAmountItem(ele);
    }
    function fn_calculateDiscAmount(element, mod) {
        debugger
        let $thisForm = $(element).closest('[perfect-class="form"]');
        let MRP = $thisForm.find('[name="SodMRP"]').val() == "" ? "0" : $thisForm.find('[name="SodMRP"]').val();
        let qty = $thisForm.find('[name="SodSalQuantity"]').val() == "" ? "0" : $thisForm.find('[name="SodSalQuantity"]').val();
        let disp = $thisForm.find('[name="SodSalDiscountPercent"]').val() == "" ? "0" : $thisForm.find('[name="SodSalDiscountPercent"]').val();
        let SalePrice = $thisForm.find('[name=SodSalPrice]').val();
        let discam = $thisForm.find('[name="SodSalDiscount"]').val() == "" ? "0" : $thisForm.find('[name="SodSalDiscount"]').val();
        if (discam == 0 && parseFloat(MRP) > 0) {
            discam = (parseFloat(MRP) - parseFloat(SalePrice));
        }

        $thisForm.find('[name=SodSalDiscountPercent]').val(Number(disp).toFixed(2));

        let discper = 0;
        if (parseFloat(MRP) > 0) {
            //discam = (parseFloat(disamt) * 100) / (parseFloat(MRP));
            discam = (parseFloat(disp) / 100) * (parseFloat(MRP));
        }
        else {
            discam = 0;
        }
        $thisForm.find('[name=SodSalDiscount]').val(Number(discam).toFixed(2));
        let salprice = 0;
        if (mod != 1 && parseFloat(MRP) > 0) {
            salprice = parseFloat(MRP) - parseFloat(discam);
            $thisForm.find('[name=SodSalPrice]').val(salprice.toFixed(2));
        }

        fn_totalAmountItem(element);
    }
    function calcDisfromMrp(ele,mode) {
        debugger
        let $thisForm = $('[perfect-class="form"]');
        let MRP = $thisForm.find('[name="SodMRP"]').val() == "" ? "0" : $thisForm.find('[name="SodMRP"]').val();
        let qty = $thisForm.find('[name="SodSalQuantity"]').val() == "" ? "0" : $thisForm.find('[name="SodSalQuantity"]').val();
        let disp = 0;
        let SalePrice = $thisForm.find('[name=SodSalPrice]').val() == "" ? "0" : $thisForm.find('[name="SodSalPrice"]').val();
        let discam = 0;

        discam = (parseFloat(MRP) - parseFloat(SalePrice));
        disp = ((parseFloat(MRP) - parseFloat(SalePrice)) / parseFloat(MRP)) * 100

        $thisForm.find('[name="SodSalDiscount"]').val(Number(discam).toFixed(2));
        $thisForm.find('[name="SodSalDiscountPercent"]').val(Number(disp).toFixed(2));
        fn_totalAmountItem(ele);
    }
    function fn_calculateDiscPer2(ele, mod) {
        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let MRP = $thisForm.find('[name="SodMRP"]').val() == "" ? "0" : $thisForm.find('[name="SodMRP"]').val();
        let qty = $thisForm.find('[name="SodSalQuantity"]').val() == "" ? "0" : $thisForm.find('[name="SodSalQuantity"]').val();
        let saleprice = parseFloat($thisForm.find('[name="SodSalPrice"]').val() == "" ? "0" : $thisForm.find('[name="SodSalPrice"]').val());
        let disamt = $thisForm.find('[name="SodSalDiscount"]').val() == "" ? "0" : $thisForm.find('[name="SodSalDiscount"]').val();
        if (parseFloat(disamt) == 0 && parseFloat(MRP) > 0) {
            disamt = parseFloat(MRP) - parseFloat(saleprice);
        }

        let discper = 0;
        if (parseFloat(MRP) > 0) {
            discper = (parseFloat(disamt)/(parseFloat(MRP))) *100;
        }
        $thisForm.find('[name=SodSalDiscountPercent]').val(Number(discper).toFixed(2));
        let salprice = 0;
        if (mod != 1 && parseFloat(MRP) > 0) {
            salprice = parseFloat(MRP) - parseFloat(disamt);
            $thisForm.find('[name=SodSalPrice]').val(salprice.toFixed(2));
        }

        fn_totalAmountItem(ele);
    }
    ///////
    function fn_totalAmountItem(element) {

        let $thisForm = $(element).closest('[perfect-class="form"]');
        //let Sprice = parseFloat($thisForm.find('[name="SodSalPrice"]').val() == "" ? "0" : $thisForm.find('[name="SodSalPrice"]').val());
        //let qty = parseFloat($thisForm.find('[name="SodSalQuantity"]').val() == "" ? "0" : $thisForm.find('[name="SodSalQuantity"]').val());
        //let disamt = parseFloat($thisForm.find('[name="SodSalDiscount"]').val() == "" ? "0" : $thisForm.find('[name="SodSalDiscount"]').val());
        //let taxamt = parseFloat($thisForm.find('[name="SodSalTaxAmount"]').val() == "" ? "0" : $thisForm.find('[name="SodSalTaxAmount"]').val());

        let Sprice = parseFloat(document.getElementById("SodSalPrice").value === "" ? "0" : document.getElementById("SodSalPrice").value);
        let qty = parseFloat(document.getElementById("SodSalQuantity").value === "" ? "0" : document.getElementById("SodSalQuantity").value);
        let disamt = parseFloat(document.getElementById("SodSalDiscount").value === "" ? "0" : document.getElementById("SodSalDiscount").value);
        let taxamt = parseFloat(document.getElementById("SodSalTaxAmount").value === "" ? "0" : document.getElementById("SodSalTaxAmount").value);


        let qtyPrice = Sprice * qty;
        let totamount = (qtyPrice/* - disamt*/);

        $thisForm.find('[name="SodSalTotalAmount"]').val(totamount.toFixed(2));

    }
    function fn_roundoff(element, downpaymnt, addnlpy) {
        debugger
        let $thisForm = $(element).closest('[perfect-class="form"]');
        let biltl = 0;
        let billtotal = 0;
        let otherchg = 0;
        let saldisc = 0;
        let salroundof = 0;
        let advAmt = 0;
        let result = 0;
        let downpayment = 0;
        let Net = 0;
        let downpay = 0;
        let addnlamnt = 0;
        let Fk_finance;
        let additional = 0;
        $('#salesOrdeItemHead').find('tbody tr').each(function (index, ele) {
            debugger
            Fk_finance = $(ele).attr('EMIProduct');
            if (Fk_finance == "true") {
                downpay = downpay + parseFloat(($(ele).attr('downpay')));
                addnlamnt = addnlamnt + parseFloat($(ele).attr('AdditionalPay'));
            }
            else {
                downpay = downpay + parseFloat($(ele).find('.SodSalTotalAmount').text());
            }
            Net = Net + parseFloat($(ele).find('.SodSalTotalAmount').text());
        });

        $thisForm.find('[name="DownPayment"]').val(downpay.toFixed(2));
        $thisForm.find('[name="AdditionalAmount"]').val(addnlamnt.toFixed(2));

        parseFloat($thisForm.find('[name="SalBillTotal"]').val(Net));

        biltl = /*Number(Net).toFixed(2);*/ parseFloat($thisForm.find('[name="SalBillTotal"]').val() == "" ? "0" : $thisForm.find('[name="SalBillTotal"]').val());
        billtotal=parseFloat($thisForm.find('[name="SalBillTotal"]').val(Number(biltl).toFixed(2)));
        otherchg = parseFloat($thisForm.find('[name="OtherCharge"]').val() == "" ? "0" : $thisForm.find('[name="OtherCharge"]').val());
        saldisc = parseFloat($thisForm.find('[name="SalOrderDiscount"]').val() == "" ? "0" : $thisForm.find('[name="SalOrderDiscount"]').val());
        advAmt = parseFloat($thisForm.find('[name="SoAdvcAmount"]').val() == "" ? "0" : $thisForm.find('[name="SoAdvcAmount"]').val());
        downpayment = parseFloat($thisForm.find('[name="DownPayment"]').val() == "" ? "0" : $thisForm.find('[name="DownPayment"]').val());

        result = downpayment + otherchg - saldisc;
        //salroundof = Math.round(result) - (result);
        //$thisForm.find('[name=SalOrderRoundoff]').val(salroundof.toFixed(2));
        $thisForm.find('[name=SoAdvcAmount]').val((advAmt).toFixed(2));
        $thisForm.find('[name=SalNetAmount]').val(((result) - advAmt).toFixed(2));
        fn_totalAmountItem(element);

        let billamt = 0;
        let bilamt = 0;
        bilamt = advAmt;
        $('#Paymentdethead').find('tbody tr').each(function (index, ele) {
            billamt += parseFloat($(ele).find('.PAmount').text());
        });
        bilamt = parseFloat(bilamt) - billamt;
        $thisForm.find('[name=BalAmt]').text(bilamt.toFixed(2));
        $thisForm.find('[name=PAmount]').val(bilamt.toFixed(2));


    }


    function fn_compareAdvanceAndNetAmount(element) {
        let $thisForm = $(element).closest('[perfect-class="form"]');
        let biltl = 0;
        let billtotal = 0;
        let otherchg = 0;
        let saldisc = 0;
        let result = 0;
        let downpayment = 0;
        fn_roundoff(element);
        let netAmount = parseFloat($thisForm.find('[name="SalNetAmount"]').val() == "" ? "0" : $thisForm.find('[name="SalNetAmount"]').val());
        let advanceAmount = parseFloat($thisForm.find('[name="SoAdvcAmount"]').val() == "" ? "0" : $thisForm.find('[name="SoAdvcAmount"]').val());
        biltl = parseFloat($thisForm.find('[name="SalBillTotal"]').val() == "" ? "0" : $thisForm.find('[name="SalBillTotal"]').val());
        billtotal = parseFloat($thisForm.find('[name="SalBillTotal"]').val(Number(biltl).toFixed(2)));
        otherchg = parseFloat($thisForm.find('[name="OtherCharge"]').val() == "" ? "0" : $thisForm.find('[name="OtherCharge"]').val());
        saldisc = parseFloat($thisForm.find('[name="SalOrderDiscount"]').val() == "" ? "0" : $thisForm.find('[name="SalOrderDiscount"]').val());
        downpayment = parseFloat($thisForm.find('[name="DownPayment"]').val() == "" ? "0" : $thisForm.find('[name="DownPayment"]').val());

        result = downpayment + otherchg - saldisc;

        if (parseFloat(advanceAmount) > parseFloat(result)) {
            $thisForm.find('[name=SoAdvcAmount]').focus();
            $thisForm.find('[name="SoAdvcAmount"]').closest('[perfect-class="formGroup"]').find('.limit-check').text(`Advance amount is greater than Net Amount. Please enter valid advance amount.`)
        }
        else {
            $thisForm.find('[name="SoAdvcAmount"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('')
            fn_roundoff(element);
        }
    }

    //to save data
    function fn_UpdateSalesOrder(element,actionType)
    {debugger
        let $thisForm = $(element).closest('[perfect-class="form"]');
        let netAmount = parseFloat($thisForm.find('[name="SalNetAmount"]').val() == "" ? "0" : $thisForm.find('[name="SalNetAmount"]').val());
        let advanceAmount = parseFloat($thisForm.find('[name="SoAdvcAmount"]').val() == "" ? "0" : $thisForm.find('[name="SoAdvcAmount"]').val());
        let AdditionalAmount = $thisForm.find('[name=AdditionalAmount]').val();
        let Downpayment = $thisForm.find('[name=DownPayment]').val();
        let validEMI = 1;
        debugger
        let biltl = 0;
        let billtotal = 0;
        let otherchg = 0;
        let saldisc = 0;
        let result = 0;
        let downpayment = 0;
        biltl = parseFloat($thisForm.find('[name="SalBillTotal"]').val() == "" ? "0" : $thisForm.find('[name="SalBillTotal"]').val());
        billtotal = parseFloat($thisForm.find('[name="SalBillTotal"]').val(Number(biltl).toFixed(2)));
        otherchg = parseFloat($thisForm.find('[name="OtherCharge"]').val() == "" ? "0" : $thisForm.find('[name="OtherCharge"]').val());
        saldisc = parseFloat($thisForm.find('[name="SalOrderDiscount"]').val() == "" ? "0" : $thisForm.find('[name="SalOrderDiscount"]').val());
        downpayment = parseFloat($thisForm.find('[name="DownPayment"]').val() == "" ? "0" : $thisForm.find('[name="DownPayment"]').val());

        result = downpayment + otherchg - saldisc;

        var today = new Date().toISOString().split('T')[0];
        document.getElementsByName("SoDeliveryDate")[0].setAttribute('min', today);

        if (document.getElementById('EMIProduct').checked == false) {
            FK_EMI_Date= "";
        }
        if (parseFloat(advanceAmount) > parseFloat(result)) {
            $thisForm.find('[name=SoAdvcAmount]').focus();
            $thisForm.find('[name="SoAdvcAmount"]').closest('[perfect-class="formGroup"]').find('.limit-check').text(`Advance amount is greater than Net Amount. Please enter valid advance amount.`)
        }

        else {
            $thisForm.find('[name="SoAdvcAmount"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('')

            //if (document.getElementById('EMIProduct').checked == true && (AdditionalAmount == "" || Downpayment == "")) {
            //    FK_EMI_Date = "";
            //    validEMI = 0;
            //}
            //if (document.getElementById('EMIProduct').checked == true && FK_EMI_Date == "") {
            //    validEMI = 0;
            //}

            if (validEMI == 1) {
                console.log('validation',$thisForm.valid())
                if ($thisForm.valid()) {
                    if (BillAmountbinds(element)) {
                        $(element).prop('disabled', true);
                        let $thisForm = $(element).closest('[perfect-class="form"]');
                        let $modal = $thisForm.find('#zero_config');

                        let $modal2 = $thisForm.find('#zero_configOthercharge');
                        othrchargelst;
                        let OtherCharge = [];
                        if (otherchgcalled == 1) {
                            $modal2.find('tbody').find('tr').each(function () {

                                let OtChargeinfo = {};
                                OtChargeinfo['ID_OtherChargeType'] = $(this).find('.jq_ID_OtherChargeType_td').text();

                                OtChargeinfo['OctyTransType'] = $(this).find('.jq_TransType_td').find('select').val();
                                OtChargeinfo['OctyName'] = $(this).find('.jq_Type_td').text();
                                OtChargeinfo['OctyAmount'] = $(this).find('.jq_OtherChagAmnt_td').find('input').val();
                                console.log('OtChargeinfo', OtChargeinfo);

                                OtherCharge.push(OtChargeinfo);

                            });
                        }
                        else {
                            OtherCharge = OtherCharge.concat(othrchargelst);
                        }

                        var ProductList = [];
                        var trs = $("#formGroupModalEMIProductbody tr");
                        if (trs.length > 0) {

                            $('#formGroupModalEMIProductbody tr').each(function (index, ele) {
                                debugger
                                if ($($(ele).find("input[type='checkbox']")).is(":checked") == true) {
                                    var ProductListData = {};
                                    ProductListData['ID_Product'] = $(this).closest("tr").find('.FK_Product').text();
                                    ProductListData['ProdName'] = $(this).closest("tr").find('.Productname').text();
                                    ProductListData['Amount'] = $(this).closest("tr").find('.TotalAmount').text();

                                    ProductList.push(ProductListData);
                                }
                            });

                        }
                        if (ProductList.length == 0) {
                            ProductList = $thisForm.data('pEMIProdData')
                        }

                        var InstallmentDetails = [];

                        let _dateTodays = new Date();
                        var today = _dateTodays.getFullYear() + "/" + _dateTodays.getMonth() + "/" + _dateTodays.getDate();

                        var trs = $("#InstallmentDetailsbody tr");
                        if (trs.length > 0) {

                            $('#InstallmentDetailsbody tr').each(function (index, ele) {

                                var InstallmentListData = {};
                                InstallmentListData['SLNO'] = $(this).closest("tr").find('.SLNO').text();
                                InstallmentListData['EMIDate'] = $(this).closest("tr").find('.EMIDate').text();
                                InstallmentListData['Amount'] = $(this).closest("tr").find('.Amount').text();
                                InstallmentListData['Remarks'] = $(this).closest("tr").find('.Remarks').text();

                                InstallmentDetails.push(InstallmentListData);

                            });

                        }
                        debugger
                        //if (InstallmentDetails[0].Remarks == "") {
                        //    InstallmentDetails = [];
                        //    InstallmentDetails = $thisForm.data('pEmiData');
                        //}
                        //if (EMIPlandata.length < 1) {
                        //    alert(1)
                        //    EMIPlandata.push($thisForm.data('pEmiData'));
                        //    console.log('EMiArrrayyyy>>>>>>>>>>>>>>>>>>>', EMIPlandata)
                        //}

                        let salesOrderItems = [];
                        $thisForm.find('[perfect-tempTable="SalesOrder"]').find('tbody').find('tr').each(function () {
                            salesOrderItems.push($(this).data('pData'));
                        })

                        let paymentdetails = [];
                        $thisForm.find('[perfect-tempTable="Payment"]').find('tbody').find('tr').each(function () {
                            paymentdetails.push($(this).data('pData'));
                        })

                        let _ID_SalesOrder = 0;
                        let _ActionUrl = "";
                        let _LastID = 0;

                        if (actionType === "new") {
                            _LastID = LastID_SalesOrder;
                            _ID_SalesOrder = 0;
                            _ActionUrl = "@Url.Action("AddNewSalesOrder", "SalesOrder")";
                        }
                        else if (actionType === "update") {
                            _ID_SalesOrder = $thisForm.find('[name="ID_SalesOrder"]').val();
                            _ActionUrl = "@Url.Action("UpdateSalesOrder", "SalesOrder")";
                        }
                        debugger
                        console.log('EMiArrrayyyy>>>>>>>>>>>>>>>>>>>', EMIPlandata)
                        //let _dateToday = new Date();
                        //var today = _dateToday.getFullYear() + "/" + _dateToday.getMonth() + "/" + _dateToday.getDate();
                        let inputData = {
                            __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                            'ID_SalesOrder': _ID_SalesOrder,
                            'SoNo': $thisForm.find('[name="SalesOrderNo"]').val(),
                            'TransMode': SalesorderTransMode,
                            'LastID': _LastID,
                            'SoDate': $thisForm.find('[name="SalesOrderDate"]').val(),
                            //'SoDeliverydate': $thisForm.find('[name="SalesOrdExpDate"]').val(),
                            'SoAdvcAmount': $thisForm.find('[name="SoAdvcAmount"]').val(),
                            'SoBillTotal': $thisForm.find('[name="SalBillTotal"]').val(),
                            'SoDiscount': $thisForm.find('[name="SalOrderDiscount"]').val(),
                            'SoOthercharges': $thisForm.find('[name="OtherCharge"]').val(),
                            'SoRoundoff': $thisForm.find('[name="SalOrderRoundoff"]').val(),
                            'SoNetAmount': $thisForm.find('[name="SalNetAmount"]').val(),
                            'SoQuotation': false,
                            'TaxtyIntrastate': $thisForm.find('[name="RoundOff"]').val(),
                            'FK_Customer': $thisForm.find('[name="ID_Customer"]').val(),
                            'FK_LeadGenerate': $thisForm.find('[name="FK_Lead"]').val(),
                            'FK_Quotation': $thisForm.find('[name="ID_Quotation"]').val(),
                            'SalesOrderDetail': salesOrderItems,
                           // 'TaxDetails': tax,
                            'OtherChgDetails': OtherCharge,

                            'ProductDetails': ProductList,
                            'InstallmentDetails': EMIPlandata/*InstallmentDetails*/,
                            //'FK_FinancePlan': FK_EMI_Plans,
                            //'EMIDate': FK_EMI_Date == "" ? today : FK_EMI_Date, //$thisForm.find('[name="SoAdvcAmount"]').val() == "" ? "0" : $thisForm.find('[name="SoAdvcAmount"]').val()
                            'ProductWise': ProductWise,
                            'DownPayment': $thisForm.find('[name=DownPayment]').val(),
                            'AdditionalAmount': $thisForm.find('[name=AdditionalAmount]').val(),
                            'MobileNo': $thisForm.find('[name=MobileNo]').val(),
                            'FK_AssignedTo': $thisForm.find('[name=AssignedToID]').val(),
                            'BillType': $thisForm.find('[name="BillType"]').val(),
                            'SoDeliverydate': $thisForm.find('[name="SoDeliveryDate"]').val(),
                            'PaymentDetail': paymentdetails,
                            'SODescription': $thisForm.find('[name="SODescription"]').val(),
                            'CodeCenter_ID': $thisForm.find('[name="Costcenter"]').val(),
                            'FK_Employee': $thisForm.find('[name="FK_Employee"]').val(),
                        };
                        debugger
                        clearSessionValue(LastIDSessionKey);
                        console.log('EMIDATE0', FK_EMI_Date)
                        FK_EMI_Plans = 0;
                        FK_EMI_Date = '';
                        EMIProductList = [];
                        EMIPlandata = [];
                        let downpayment = 0;
                        let Additionalamount = 0;
                        $thisForm.find('[name="DownPayment"]').val(parseFloat(downpayment).toFixed(2));
                        $thisForm.find('[name="AdditionalAmount"]').val(parseFloat(Additionalamount).toFixed(2));
                        if (salesOrderItems.length > 0) {
                            $.ajax({
                                url: _ActionUrl,
                                type: "POST",
                                data: inputData,
                                dataType: "json",
                                contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                                success: function (ajaxOutput) {
                                    if (ajaxOutput.Process.IsProcess) {
                                        $.each(ajaxOutput.Process.Message, function (key, value) {
                                            NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                                        });
                                    }
                                    else {
                                        $.each(ajaxOutput.Process.Message, function (key, value) {
                                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                            $(element).prop('disabled', false);
                                        });
                                    }

                                    $thisForm.find('[perfect-ctype="select"]').val('').selectpicker('refresh');
                                    $thisForm.find('[perfect-ctype="input"]').val('');
                                    $thisForm.find('[perfect-ctype="date"]').val('');
                                    fn_SaleOrderIndex_InitialLoad();
                                 
                                },
                                complete: function () {
                                    $(element).prop('disabled', false);
                                }
                            });
                        }
                        else {
                            $(element).prop('disabled', false);
                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Enter Atleast One Product' });
                         

                        }
                    }
                    else {
                        $(element).prop('disabled', false);
                        NotificationMessage({ 'type': 'error', 'heading': 'Warning', 'message': 'In Payment Method Balance Amt. Should be  Zero ' });
                    }
                }
            }
            else {
                $(ele).prop('disabled', false);
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'EMI DETAILS IS NOT ADDED' });
            }
        }

    }
    //to reset sales order window
    function fn_resetSalesOrder(ele) {

        fn_SaleOrderIndex_InitialLoad();
        SalesOrderid = 0;
    }
    // to reset Item details
    function fn_resetSalesOrderItem(ele,tkey) {
        let $thisItem = $(ele).closest('[perfect-class="TempTableProduct"]');
        $thisItem.find('[perfect-ctype="input"]').val('');
        $thisItem.find('[perfect-ctype="hidden"]').val('');
        $thisItem.find('[perfect-ctype="select"]').val('0').selectpicker('refresh');
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        $thisForm.find('[name=prdbtn]').removeAttr("disabled", "disabled");

        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tkey + '"]');
        $tblcontainer.attr('perfect-tempTable-action', 0);
    }
    //to show Quotation List
    function fn_GetQuotationList(ele)
    {
          let $thisForm = $(ele).closest('[perfect-class="form"]');
         $.ajax({
                url: '@Url.Action("GetQuotationList", "SalesOrder")',
                type: "Get",
                dataType: "json",
                contentType: "application/x-www-form-urlencoded;charset=utf-8",
                 success: function (ajaxOutput) {

                     if (ajaxOutput.Process.IsProcess) {
                         var stateModel = createSelectList({ data: ajaxOutput.Data, hideColumn: ['ID_Quotation','TotalCount'], headingText: 'Quotation List' });
                                 stateModel.then(function (ret) {
                                     if (ret) {
                                         $thisForm.find('[name=ID_Quotation]').val(ret.ID_Quotation);
                                         let inputData = {
                                             __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                                             ID_Quotation: ret.ID_Quotation
                                         };
                                         fn_fillQuotationDetails(ele,inputData);
                                     }
                                 });
                         }
                         else {
                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                 NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                             });
                         }

                     }
            });
    }
    function fn_fillQuotationDetails(element, inputData) {
        let $thisFormO = $(element).closest('[perfect-class="form"]');
        let $BeforeSelect = $thisFormO.find('[name="SalesOrderDate"]').val();
            $.ajax({
                     url: '@Url.Action("GetQuotationInfo", "SalesOrder")',
                     type: "POST",
                     data: inputData,
                     dataType: "json",
                     contentType: 'application/x-www-form-urlencoded;charset=utf-8',
                     success: function (ajaxOutput)
                             {
                              if (ajaxOutput.quoInfo.Process.IsProcess)
                              {
                                  $formContainer.load("@Url.Action("LoadFormSalesOrder", "SalesOrder")", function () {
                                      let $thisForm = $(this).find('[perfect-class="form"]');
                                      $thisForm.find('[name="ID_Quotation"]').val(inputData.ID_Quotation);
                                        $thisForm.find('[name="SalesOrderDate"]').val(moment($BeforeSelect).format('YYYY-MM-DD'));
                                        $thisForm.find('[name="CustomeName"]').val(ajaxOutput.quoInfo.Data[0]['ContactName']);
                                        $thisForm.find('[name="MobileNo"]').val(ajaxOutput.quoInfo.Data[0]['ContactMobile']);
                                        $thisForm.find('[name="SalBillTotal"]').val(ajaxOutput.quoInfo.Data[0]['QuoBillTotal']);
                                        $thisForm.find('[name="OtherCharge"]').val(ajaxOutput.quoInfo.Data[0]['QuoOthercharges']);
                                        $thisForm.find('[name="SalOrderDiscount"]').val(ajaxOutput.quoInfo.Data[0]['QuoDiscount']);
                                        $thisForm.find('[name="SalOrderRoundoff"]').val(ajaxOutput.quoInfo.Data[0]['QuoRoundoff']);
                                        $thisForm.find('[name="SalNetAmount"]').val(ajaxOutput.quoInfo.Data[0]['QuoNetAmount']);
                                      $thisForm.find('[name="ddlImportsList"]').val(3);
                                        if (ajaxOutput.quoItems.Process.IsProcess) {

                                            $thisForm.find('[perfect-tempTable="SalesOrder"]').empty();
                                            $thisForm.data({ pData: ajaxOutput.quoItems.Data[0] });
                                            fn_fillSalesOrderItem($thisForm, 'SalesOrder', ajaxOutput.quoItems.Data, tableOptionsTempOut)
                                            $thisForm.find('[perfect-tempTable="SalesOrder"]').find('table').dataTable({ searching: false, paging: false, ordering: false, info: false });




                                    }
                                    if (ajaxOutput.OtherCharge.Process.IsProcess) {
                                        $thisForm.data({ pOthrChgData: ajaxOutput.OtherCharge.Data })
                                    }

                                    $thisForm.validate({ messages: validationMessage });

                                });
                              }
                              else {
                                     $.each(ajaxOutput.Process.Message, function (key, value)
                                       {
                                         NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                       });
                               }
                     }
            });
    }

    function RemoveTaxArray(datas,id,ele) {
        debugger
        //let $thisForm = $('[perfect-class="form"]');
        //let deletemessage = "Delete Product Will Reset EMI Details . Are you sure you want to delete" + " " + datas + "?";
        //let addmessage = "Add New Product Will Reset EMI Details. Are you sure you wan't to continue ?";
        //let message;
        //if (id == 1) {
        //    message = addmessage;
        //}
        //else {
        //    message = deletemessage;
        //}
        //if (document.getElementById('EMIProduct').checked == true) {
        //    if (confirm("'" + message + "'")) {
        //        FK_EMI_Plans = 0;
        //        FK_EMI_Date = '';
        //        EMIProductList = [];
        //        $thisForm.data({ pEMIProdData: '' });
        //        $thisForm.data({ pEmiData: '' });
        //        let downpayment = 0;
        //        let Additionalamount = 0;
        //        document.getElementsByClassName('chkbtn').checked = false;
        //        $thisForm.find('[name="DownPayment"]').val(parseFloat(downpayment).toFixed(2));
        //        $thisForm.find('[name="AdditionalAmount"]').val(parseFloat(Additionalamount).toFixed(2));
        //        return true;
        //    }
        //    else {
        //        return false;
        //    }

        //}
        //else {
        //    return true;
        //}
    }


    //var salesOrderItems = [];
    function ShowEMIProduct(ele, inputvalue) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        debugger

        let EMIData;
        //if (ProductTable!=undefined) {
        //    EMIData = ProductTable;
        //}
        //else {
        var salesOrderItems = [];


            $thisForm.find('[perfect-tempTable="SalesOrder"]').find('tbody').find('tr').each(function () {
                salesOrderItems.push($(this).data('pData'));
            })
            if (salesOrderItems.length > 0) {

            EMIData = salesOrderItems;
        //}


        $('#formGroupModalEMIProductbody').empty();


            var CheckListHTML = '';

            if (EMIData.length > 0) {
                //---
                var count = 0;

                debugger
                $.each(EMIData, function (i, value) {


                    debugger

                    let pdt = value.FK_Product;
                    count = count + 1
                    let $CheckListHTML = $('<tr/>');
                    $CheckListHTML.append("<td class='jq_CurrentStatus' ><input id='chekvalue" + i + "' class='chkbtn' type='checkbox'/></td>");
                    $CheckListHTML.append("<td Class='FK_Product' Style='Display:none'>" + value.FK_Product + "</td>");
                    $CheckListHTML.append( "<td Class='TotalAmount' Style='Display:none'>" + value.SodSalTotalAmount + "</td>");
                    $CheckListHTML.append( "<td Class='Productname'>" + value.ProdName + "</td>");

                    $("#formGroupModalEMIProductbody").prepend($CheckListHTML)
                    let pEMIProdData = [];
                    pEMIProdData = $thisForm.data('pEMIProdData')

                    if (pEMIProdData == undefined) {
                        pEMIProdData = [];
                    }
                    console.log('EMIPRODUCT', EMIProductList)
                    console.log('EMIPRODUCTSELECT', pEMIProdData)
                    debugger
                    if (EMIProductList.length > 0 ) {
                        $.each(EMIProductList, function (key, value) {
                            debugger

                            if (value.ID_Product == pdt) {
                                console.log('pdt', pdt)
                                document.getElementById('chekvalue' + i).checked = true;

                            }

                        });

                    }
                    else if (pEMIProdData.length>0) {
                        $.each(pEMIProdData, function (key, value) {
                            debugger

                            if (value.SodEMISale == 1 && value.ID_Product == pdt) {
                                console.log('pdt', pdt)
                                document.getElementById('chekvalue' + i).checked = true;
                            }

                        });

                    }

                })

            }
            else {
                CheckListHTML += "<div class='form-group col-md-6'>";
                CheckListHTML += "<div class='form-check mb-2'>";
                CheckListHTML += "<label class='form-check-label' style='text-align:center;' for='check1'>No Records...</label>";
                CheckListHTML += "</div></div>"
                $("#formGroupModalEMIProductbody").html(CheckListHTML)

            }

            $('#formGroupModalEMIProduct').modal({ backdrop: 'static', keyboard: false })

            $('#formGroupModalEMIProduct').modal('show');
        }
        else {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Add Atleast One Product' });
        }

    }
    ////////////////////////// EMI V2 //////////////////////////////////start


    function ShowEMI(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        debugger

        if (document.getElementById('EMIProduct').checked == true) {
            $('#EMIid').show();
        }
        else {
            $('#EMIid').hide();
            $thisForm.data({ Emiplandata: '' });
        }

    }
    function AssignToShow(ele) {
        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let FK_Financeplan;
        $thisForm.find('[perfect-tempTable="SalesOrder"]').find('tbody').find('tr').each(function () {
            debugger
            $(this).data('pData');
            FK_Financeplan = $(this).data('pData').FK_FinancePlan;
            if (FK_Financeplan > 0) {
                //FK_Financeplan>0
                //break;
                return false;
            }
        });
        if (FK_Financeplan > 0) {
            $('.AssignedToID').show();
        }
        else {
            $('.AssignedToID').hide();

        }
    }
    function ShowEMIFields(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');

        let qty = $thisForm.find('[name="SodSalQuantity"]').val();
        let FK_Product = $thisForm.find('[name="FK_Product"]').val();
        console.log('QTY', qty)
        console.log('FK_Product', FK_Product)
        if (FK_Product == "" || FK_Product == null) {
            NotificationMessage({ 'type': 'info', 'heading': 'info', 'message': 'Select Product' });
            document.getElementById('EMIProduct').checked == false;
        }
        else if (qty == "" || qty == null) {
            NotificationMessage({ 'type': 'info', 'heading': 'info', 'message': 'Enter Quantity' });
            document.getElementById('EMIProduct').checked == false;
        }

        else {
            if (document.getElementById('EMIProduct').checked == true) {
                FindEmiPlans(ele,0);
            }
            else {

                EMIProductList = '';
            }
        }

    }

    EMIProductList = [];

    function FindEmiPlans(ele,EMIShowbit) {
        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');

        let SodSalTotalAmount = $thisForm.find('[name="SodSalTotalAmount"]').val();
        let FK_Product = $thisForm.find('[name="FK_Product"]').val();
        let _EMIData;
        var fk_planId;
        var Emidate;
        var billamount;
        var installmentamount;
        var additionalamount;
        var downpayment;
        var installmentamount_hid;
        var downpayment_hid;
        var SLNo;
        var InputData =
        {
            ID_Product: FK_Product,
            Amount: SodSalTotalAmount
        }

        $.ajax({
            url: "@Url.Action("GetProductEMI", "SalesOrder")",
            type: "POST",
            data: InputData,
            dataType: "json",
            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            success: function (ajaxOutput) {
                if (ajaxOutput.Process.IsProcess) {
                    var CheckListHTML = '';
                    let sum = 0;
                    console.log('AJ_OUT', ajaxOutput.Data);
                    $('#formGroupModalEMIDetailsbody').empty();
                    if (ajaxOutput.Data.length > 0) {
                        $.each(ajaxOutput.Data, function (i, value) {
                            debugger
                            if (value.SLNo != 0) {
                                let $CheckListHTML = $('<tr/>');
                                $CheckListHTML.append("<td Class='SLNo' Style='Display:none'>" + value.SLNo + "</td>");
                                $CheckListHTML.append("<td class='rdButton' ><input type='radio' name='rdstatus' id='rdsButton" + i + "' class='form-control' perfect-ctype='radio' perfect-css='radio'/></td>");
                                $CheckListHTML.append("<td Class='FK_FinancePlan' Style='Display:none'>" + value.PlanID + "</td>");
                                $CheckListHTML.append("<td class='PlanName'>" + value.PlanName + "</td>");
                                $CheckListHTML.append("<td class='Duration'>" + value.Duration + "</td>");
                                $CheckListHTML.append("<td class='Period'>" + value.Period + "</td>");
                                $CheckListHTML.append("<td class='Datemi'><input type='date'  name='emidt' id='emidate" + i + "' class='form-control' perfect-ctype='date' perfect-css='date'/></td>");
                                $CheckListHTML.append("<td class='Additionalamount' style='text-align:right'>" + (value.AddnAmount).toFixed(2) + "</td>");
                                $CheckListHTML.append("<td class='downpay' style='text-align:right'><input type='text'  class='form-control text-right' name='DP' id='downpayment"+i+"'  onkeypress='return isNumberKey(event)' value='" + (value.DownPayment).toFixed(2) + "' min='0' maxlength='13'' /></td></td>");
                                $CheckListHTML.append("<td class='instlamnt' style='text-align:right'><input type='text'  class='form-control text-right' name='qty' id='installmentamount"+i+"'  onkeypress='return isNumberKey(event)' value='" + (value.InstalmentAmt).toFixed(2) + "' min='0' maxlength='13'' /></td></td>");
                                $CheckListHTML.append("<td class='instlamnt_hid' id Style='Display:none'>" + (value.InstalmentAmt).toFixed(2) + "</td>");
                                $CheckListHTML.append("<td class='Downpayment_hid' Style='Display:none'>" + (value.DownPayment).toFixed(2) + "</td>");
                                $CheckListHTML.append("<td class='BillAmount' Style='Display:none'>" + (value.BillAmount).toFixed(2) + "</td>");
                                    //$('[name="emidt"]').val(moment().format('YYYY-MM-DD'));
                                    //CheckListHTML += "</tr>";
                                $("#formGroupModalEMIDetailsbody").prepend($CheckListHTML)
                                _EMIData = $thisForm.data('Emiplandata');
                                let downpay = 0;
                                let installmentamnt = 0;
                                if (_EMIData != '') {

                                    $.each(_EMIData, function (key, value1) {
                                        SLNo = value1.SLNo;
                                        fk_planId = value1.FK_FinancePlan;
                                        Emidate = value1.EMIDate;
                                        additionalamount = value1.AdditionalAmount;
                                        downpayment = Number(value1.Downpayment).toFixed(2);
                                        installmentamount = Number(value1.Installment).toFixed(2);
                                        installmentamount_hid = value1.Installment_hid;
                                        downpayment_hid = value1.Downpayment_hid;
                                        billamount = value1.BillAmount;
                                    });
                                }
                                debugger
                                if (value.PlanID == fk_planId ) {

                                    document.getElementById('rdsButton' + i).checked = true;

                                    //var date = Date(Emidate);
                                    //alert(Emidate)
                                    //var emidt=ConvertJsonDate(Emidate)
                                    if (!moment.isDate(Emidate)) {
                                        const parts = Emidate.split("-");
                                        if (parts.length > 0) {
                                            switch (parts[2].length) {
                                                case 4:
                                                    Emidate = new Date(parts[2], parts[1] - 1, parts[0]);
                                                    break;
                                                case 2:
                                                    Emidate = new Date(parts[0], parts[1] - 1, parts[2]);
                                                    break;
                                            }
                                        }


                                    }
                                    $('#emidate' + i).val(moment(Emidate).format('YYYY-MM-DD'));
                                        $('#downpayment' + i).val(downpayment);
                                        $('#installmentamount' + i).val(installmentamount);
                                    $thisForm.find('[name="Emidate"]').val(moment(Emidate).format('YYYY-MM-DD'))
                                }
                            }
                            else {
                                let $CheckListHTML = $('<tr/>');
                                $CheckListHTML.append("<td colspan='8' style='text-align:center;'><b>" + value.Errmsg + "</b></td>");
                                $("#formGroupModalEMIDetailsbody").prepend($CheckListHTML)
                                EMIProductList = [];
                                $thisForm.find('[name=AdditionalAmount]').val('');
                                $thisForm.find('[name=DownPayment]').val('');
                                $thisForm.data({ pEMIProdData: '' })
                                fn_roundoff(ele);
                                document.getElementById("EMICalcs").disabled = true;
                            }
                        })
                    }
                    else {
                        CheckListHTML += "<div class='form-group col-md-6'>";
                        CheckListHTML += "<div class='form-check mb-2'>";
                        CheckListHTML += "<input type='checkbox' class='form-check-input' >";
                        CheckListHTML += "<label class='form-check-label' style='text-align:center;' for='check1'><b>No Plans Available for these products.</b></label>";
                        CheckListHTML += "</div></div>";
                        $("#formGroupModalEMIDetailsbody").html(CheckListHTML)
                    }
                        //$("#formGroupModalEMIDetailsbody").html(CheckListHTML)
                    debugger
                    if (EMIShowbit == 0) {
                        $('#EMIDetails').modal({ backdrop: 'static', keyboard: false })
                        $('#EMIDetails').modal('show');
                    }
                    else if (EMIShowbit==1) {
                        //$('#EMIDetails').modal({ backdrop: 'static', keyboard: false })
                        $('#EMIDetails').modal('hide');

                    }
                }

                else {
                    $.each(ajaxOutput.Process.Message, function (key, value) {
                       NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': "No Plans Available for this Product." });
                    });
                }
            },
            complete: function () {
                $(ele).prop('disabled', false);

            }
        });

    }


    function EMICalculate(ele) {
        debugger;
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let SalesOrderDate = $thisForm.find('[name="SalesOrderDate"]').val();
        var FK_FinancePlan;
        var EMIDate;
        var radio;
        var Downpayment;
        var Installment;
        var BillAmount;
        var Downpayment_hid;
        var Installment_hid;
        var SLNo;
        var Total = $thisForm.find('[name="SodSalTotalAmount"]').val();
        let FK_Product = $thisForm.find('[name="FK_Product"]').val();

        var PlanId = 0;
        var EMIDate;


    var AdditionalAmount;


        $('#formGroupModalEMIDetailsbody tr').each(function (index, ele) {
            debugger
            if ($($(ele).find("input[type='radio']")).is(":checked") == true) {
                radio = 1;
                SLNo = $(this).closest("tr").find('.SLNo').text();
                FK_FinancePlan=$(this).closest("tr").find('.FK_FinancePlan').text();
                EMIDate = $(this).closest("tr").find('.Datemi').find('input').val();
                AdditionalAmount = $(this).closest("tr").find('.Additionalamount').text();
                Downpayment = $(this).closest("tr").find('.downpay').find('input').val();
                Installment = $(this).closest("tr").find('.instlamnt').find('input').val();
                Installment_hid = $(this).closest("tr").find('.instlamnt_hid').text();
                Downpayment_hid=$(this).closest("tr").find('.Downpayment_hid').text();
                BillAmount = $(this).closest("tr").find('.BillAmount').text();
            }
        });


        console.log('RADIO>', radio);
        console.log('FK_FinancePlan>', FK_FinancePlan);
        console.log('EMIDate>', EMIDate);

        if (parseFloat(Downpayment) > parseFloat(Total)) {
            $(this).closest("tr").find('.downpay').find('input').val(Number(Downpayment_hid).toFixed(2));
            NotificationMessage({ 'type': 'info', 'heading': 'Info', 'message': 'Downpayment can' + "'" + 't be greater than Total' });
        }
        else if (parseFloat(Installment) > parseFloat(Total)) {
            $(this).closest("tr").find('.instlamnt').find('input').val(Number(Downpayment_hid).toFixed(2));
            NotificationMessage({ 'type': 'info', 'heading': 'Info', 'message': 'Installment Amount can' + "'" + 't be greater than Total' });
        }
        else {
            if (radio == 1) {
                if (EMIDate != '') {
                    if (EMIDate >= SalesOrderDate) {
                        if ($.isNumeric(Downpayment) || Downpayment == "") {
                            if ($.isNumeric(Installment) || Installment == "") {
                                FK_EMI_Date = '';
                                FK_EMI_Plans = '';

                                var InputData =
                                {
                                    FK_FinancePlan: FK_FinancePlan,
                                    EMIDate: EMIDate,
                                    Downpayment: Downpayment,
                                    Installment: Installment,
                                    AdditionalAmount: AdditionalAmount,
                                    BillAmount: BillAmount
                                }

                                $.ajax({
                                    url: "@Url.Action("EMICalculate", "SalesOrder")",
                                    type: "POST",
                                    data: InputData,
                                    dataType: "json",
                                    contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                                    success: function (ajaxOutput) {
                                        if (ajaxOutput.Process.IsProcess) {

                                            if (ajaxOutput.Data.length > 0) {
                                                var CheckListHTML = '';
                                                const date = new Date();
                                                $.each(ajaxOutput.Data, function (i, value) {
                                                    if (value.SLNo <= 0) {
                                                        $('#rowid').hide();
                                                        CheckListHTML += "<tr id='rowid'>";
                                                        CheckListHTML += "<td class='SLNO' style='display:none'>" + value.SLNo + "</td>";
                                                        CheckListHTML += "<td class='FK_Product' style='display:none'>" + FK_Product + "</td>";
                                                        CheckListHTML += "<td class='FK_FinancePlan' style='display:none'>" + FK_FinancePlan + "</td>";
                                                        CheckListHTML += "<td class='EMIDate' style='display:none'>" + ConvertJsonDate(value.EMIDate) + "</td>";
                                                        CheckListHTML += "<td class='Amount' style='display:none'>" + value.Amount + "</td>";
                                                        CheckListHTML += "<td class='Remarks' style='display:none'>" + value.Remarks + "</td>";
                                                        CheckListHTML += "</tr>";
                                                        console.log('yes get in')
                                                    }
                                                    else {
                                                        $('#rowid').show();
                                                        CheckListHTML += "<tr id='rowid'>";
                                                        CheckListHTML += "<td class='SLNO'>" + value.SLNo + "</td>";
                                                        CheckListHTML += "<td class='FK_Product' style='display:none'>" + FK_Product + "</td>";
                                                        CheckListHTML += "<td class='FK_FinancePlan' style='display:none'>" + FK_FinancePlan + "</td>";
                                                        CheckListHTML += "<td class='EMIDate'>" + ConvertJsonDate(value.EMIDate) + "</td>";
                                                        CheckListHTML += "<td class='Amount'>" + value.Amount + "</td>";
                                                        CheckListHTML += "<td class='Remarks'>" + value.Remarks + "</td>";
                                                        CheckListHTML += "</tr>";
                                                    }

                                                })
                                            }
                                            else {
                                                CheckListHTML += "<div class='form-group col-md-6'>";
                                                CheckListHTML += "<div class='form-check mb-2'>";
                                                CheckListHTML += "<input type='checkbox' class='form-check-input' >"
                                                CheckListHTML += "<label class='form-check-label' style='text-align:center;' for='check1'><b>No Plans Available.</b></label>";
                                                CheckListHTML += "</div></div>"
                                            }
                                            $("#InstallmentDetailsbody").html(CheckListHTML)
                                            $('#InstallmentDetails').modal({ backdrop: 'static', keyboard: false })
                                            $('#InstallmentDetails').modal('show');


                                            $('#InstallmentDetails').modal('show');
                                            //Bindemi(ele);
                                        }
                                        else {
                                            $.each(ajaxOutput.Process.Message, function (key, value) {
                                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'No Plans Available.' });
                                            });
                                        }
                                    },
                                    complete: function () {
                                        $(ele).prop('disabled', false);

                                    }
                                });
                            }
                            else {
                                NotificationMessage({ 'type': 'info', 'heading': 'Info', 'message': 'Enter A Valid Installment Amount' });
                            }
                        }
                        else {
                            NotificationMessage({ 'type': 'info', 'heading': 'Info', 'message': 'Enter A Valid Downpayment' });
                        }
                    }
                    else {
                        NotificationMessage({ 'type': 'info', 'heading': 'Info', 'message': 'EMI Date Should be greater than or equal to Order Date' });
                    }
                }
                else {
                    NotificationMessage({ 'type': 'info', 'heading': 'Info', 'message': 'Please Enter EMI Date' });
                }
            }
            else {
                NotificationMessage({ 'type': 'info', 'heading': 'Info', 'message': 'Select A EMI Plan' });
            }
        }

    }


    function Bindemi(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        var FK_FinancePlan;
        var EMIDate;
        var radio;
        var Downpayment;
        var Installment;
        var AdditionalAmount
        var BillAmount;
        var Downpayment_hid;
        var Installment_hid;
        $('#formGroupModalEMIDetailsbody tr').each(function (index, ele) {
            debugger
            if ($($(ele).find("input[type='radio']")).is(":checked") == true) {
                radio = 1;
                FK_FinancePlan = $(this).closest("tr").find('.FK_FinancePlan').text();
                EMIDate = $(this).closest("tr").find('.Datemi').find('input').val();
                AdditionalAmount = $(this).closest("tr").find('.Additionalamount').text();
                Downpayment = $(this).closest("tr").find('.downpay').find('input').val();
                Installment = $(this).closest("tr").find('.instlamnt').find('input').val();
                Installment_hid = $(this).closest("tr").find('.instlamnt_hid').text();
                Downpayment_hid = $(this).closest("tr").find('.Downpayment_hid').text();
                BillAmount = $(this).closest("tr").find('.BillAmount').text();
            }
        });
        //$thisForm.find('[name=AdditionalPay]').val(Number(AdditionalAmount).toFixed(2));
        //$thisForm.find('[name=Downpay]').val(Number(Downpayment).toFixed(2));
        $thisForm.find('[name=InstallmentAmount]').val(Number(Installment).toFixed(2));
        $thisForm.find('[name=Emidate]').val(moment(EMIDate).format('YYYY-MM-DD'));
        $thisForm.find('[name=FK_FinancePlan]').val(FK_FinancePlan);
    }
    var Bindemivalues = 0;
    function BindDownpayment(ele) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        var Downpayment = 0;
        var AdditionalPayment = 0;

        var FK_FinancePlan;
        var EMIDate;
        var radio;
        var Downpayment;
        var Installment;
        var BillAmount;
        var Downpayment_hid;
        var Installment_hid;
        var AdditionalAmount
        var SLNo;
        $('#InstallmentDetailsbody tr').each(function (index, ele) {
            debugger

            var slno = $(this).closest("tr").find('.SLNO').text();
            var remarks = $(this).closest("tr").find('.Remarks').text();
            if (slno < 1 && slno >= -1) {
                if (remarks == 'Additional Amount') {
                    AdditionalPayment = $(this).closest("tr").find('.Amount').text();
                }
                else if (remarks == 'Down payment') {
                    Downpayment = $(this).closest("tr").find('.Amount').text();
                }
            }
            else {
                return false;
            }
            Bindemivalues = 1;
        });
        $('#formGroupModalEMIDetailsbody tr').each(function (index, ele) {
            debugger
            if ($($(ele).find("input[type='radio']")).is(":checked") == true) {
                radio = 1;
                SLNo = $(this).closest("tr").find('.SLNo').text();
                FK_FinancePlan = $(this).closest("tr").find('.FK_FinancePlan').text();
                EMIDate = $(this).closest("tr").find('.Datemi').find('input').val();
                AdditionalAmount = $(this).closest("tr").find('.Additionalamount').text();
                Downpayment = $(this).closest("tr").find('.downpay').find('input').val();
                Installment = $(this).closest("tr").find('.instlamnt').find('input').val();
                Installment_hid = $(this).closest("tr").find('.instlamnt_hid').text();
                Downpayment_hid = $(this).closest("tr").find('.Downpayment_hid').text();
                BillAmount = $(this).closest("tr").find('.BillAmount').text();
            }
        });
        var plandata = [];
        let emidt = {
            SLNo: SLNo,
            FK_FinancePlan: FK_FinancePlan,
            EMIDate: EMIDate,
            AdditionalAmount: AdditionalAmount,
            Downpayment: Downpayment,
            Installment: Installment,
            Installment_hid: Installment_hid,
            Downpayment_hid: Downpayment_hid,
            BillAmount: BillAmount,
        }
        plandata.push(emidt);
        $thisForm.data({ Emiplandata: plandata });

        $thisForm.find('[name=AdditionalPay]').val(Number(AdditionalPayment).toFixed(2));
        $thisForm.find('[name=Downpay]').val(Number(Downpayment).toFixed(2));

        $('#formGroupModalEMIProduct').modal('hide');
        $('#EMIDetails').modal('hide');
        $('#InstallmentDetails').modal('hide');
        //EMIAdd(ele)
        $thisForm.find('[name=InstallmentAmount]').val(Number(Installment).toFixed(2));
        $thisForm.find('[name=Emidate]').val(moment(EMIDate).format('YYYY-MM-DD'));
        $thisForm.find('[name=FK_FinancePlan]').val(FK_FinancePlan);
    }

    var $modal = $('#EMIdatagrid');
    var EMIPlandata = [];

    function EMIAdd(ele) {
        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        //let UID = $('[name=UID]').val(cnt);
        $modal.find('tbody').find('tr').each(function () {
            let emiinfo = {};
            //taxinfo['UID'] = $('[name=UID]').val();
            emiinfo['SLNO'] = $(this).find('.SLNO').text();
            emiinfo['FK_Product'] = $(this).find('.FK_Product').text();
            emiinfo['EMIDate'] = $(this).find('.EMIDate').text();
            emiinfo['Amount'] = $(this).find('.Amount').text();
            emiinfo['Remarks'] = $(this).find('.Remarks').text();
            emiinfo['FK_FinancePlan'] = $(this).find('.FK_FinancePlan').text();

            EMIPlandata.push(emiinfo);
        });
        console.log('EMIPlandata>', EMIPlandata);
        $('#EMIdatagrid tbody').empty();
    }
    function EMIRet(ele) {
        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');

        var FK_Product = $("#FK_Product").val();

        var foundItems = [];
        var finalfoundItems = [];
        if (Bindemivalues == 1) {
            $.each(EMIPlandata, function (key, value) {
                debugger

                foundItems = EMIPlandata.filter(x => x.FK_Product.toString() == FK_Product.toString());

                const indexOfObject = EMIPlandata.findIndex(object => {
                    return object.FK_Product.toString() === FK_Product.toString();
                });

                EMIPlandata.splice(indexOfObject, foundItems.length);
            });
        }



        $modal.find('tbody').find('tr').each(function () {
            let emiinfo = {};
            //taxinfo['UID'] = $('[name=UID]').val();
            emiinfo['SLNO'] = $(this).find('.SLNO').text();
            emiinfo['FK_Product'] = $(this).find('.FK_Product').text();
            emiinfo['EMIDate'] = $(this).find('.EMIDate').text();
            emiinfo['Amount'] = $(this).find('.Amount').text();
            emiinfo['Remarks'] = $(this).find('.Remarks').text();
            emiinfo['FK_FinancePlan'] = $(this).find('.FK_FinancePlan').text();
            console.log('EMI INFO', emiinfo);
            EMIPlandata.push(emiinfo);
        });
        let prdid = "";
        $.each(EMIPlandata, function (key, value) {
            debugger
            finalfoundItems = EMIPlandata.filter(x => x.FK_Product.toString() == prdid.toString());
            const indexOfObject = EMIPlandata.findIndex(object => {
                return object.FK_Product.toString() === prdid.toString();
            });
            EMIPlandata.splice(indexOfObject, finalfoundItems.length);
        });
    }
    function RemoveEMIArray(ele, id) {
        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');

        let UID = id; /*$('[name=UID]').val();*/
        var FK_Product = $("#FK_Product").val();
        console.log('TAX>', EMIPlandata);

        var foundItems = [];

        $.each(EMIPlandata, function (key, value) {

            foundItems = EMIPlandata.filter(x => x.FK_Product == FK_Product);
            console.log('EMIPlandata.filter(x => x.EMIPlandata>', EMIPlandata.filter(x => x.FK_Product));

            const indexOfObject = EMIPlandata.findIndex(object => {
                return object.FK_Product === FK_Product;
            });

            console.log('EMIFIND>', EMIPlandata);
            console.log('foundItems length>', foundItems.length);

            EMIPlandata.splice(indexOfObject, foundItems.length);
        });

        console.log('EMIDELETE>', EMIPlandata);

    }
    ////////////////////////// EMI V2 /////////////////////////////////end

    var EMIProductList = [] ;
    @*function FindEmiPlans1(ele) {
        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');



        EMIProductList=[] ;
        var trs = $("#formGroupModalEMIProductbody tr");
        if (trs.length > 0) {

            $('#formGroupModalEMIProductbody tr').each(function (index, ele) {
                debugger
                if ($($(ele).find("input[type='checkbox']")).is(":checked") == true) {
                    var ProductListData = {};
                    ProductListData['ID_Product'] = $(this).closest("tr").find('.FK_Product').text();
                    ProductListData['Amount'] = $(this).closest("tr").find('.TotalAmount').text();
                    EMIProductList.push(ProductListData);
                }
            });

        }

        console.log('EMIProductList>', EMIProductList)
        if (EMIProductList.length > 0) {
            var InputData =
            {
                ProductDetails : EMIProductList
            }

            $.ajax({
                url: "@Url.Action("GetProductEMI", "SalesOrder")",
                type: "POST",
                data: InputData,
                dataType: "json",
                contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                success: function (ajaxOutput) {
                    if (ajaxOutput.Process.IsProcess) {
                        var CheckListHTML = '';
                        let sum = 0;
                        console.log('AJ_OUT', ajaxOutput.Data);
                        $('#formGroupModalEMIDetailsbody').empty();
                        if (ajaxOutput.Data.length > 0) {


                            $.each(ajaxOutput.Data, function (i, value) {
                                debugger
                                if (value.SLNo != 0) {

                                    let $CheckListHTML = $('<tr/>');
                                    $CheckListHTML.append("<td class='rdButton' ><input type='radio' name='rdstatus' id='rdsButton" + i + "' class='form-control' perfect-ctype='radio' perfect-css='radio'/></td>");
                                    $CheckListHTML.append("<td Class='FK_FinancePlan' Style='Display:none'>" + value.PlanID + "</td>");
                                    $CheckListHTML.append("<td class='PlanName'>" + value.PlanName + "</td>");
                                    $CheckListHTML.append("<td class='Duration'>" + value.Duration + "</td>");
                                    $CheckListHTML.append("<td class='Period'>" + value.Period + "</td>");
                                    $CheckListHTML.append("<td class='Datemi'><input type='date' name='emidt' id='emidate"+ i +"' class='form-control' perfect-ctype='date' perfect-css='date'/></td>");
                                    $CheckListHTML.append("<td class='Additionalamount' style='text-align:right'>"+ (value.AddnAmount).toFixed(2) + "</td>");
                                    $CheckListHTML.append("<td class='downpay' style='text-align:right'><input type='text' class='form-control text-right' name='DP' id='downpayment'  onkeypress='return isNumberKey(event)' value='" + (value.DownPayment).toFixed(2) + "' min='0' maxlength='13'' /></td></td>");
                                    $CheckListHTML.append("<td class='instlamnt' style='text-align:right'><input type='text' class='form-control text-right' name='qty' id='installmentamount'  onkeypress='return isNumberKey(event)' value='" + (value.InstalmentAmt).toFixed(2) + "' min='0' maxlength='13'' /></td></td>");
                                    $CheckListHTML.append("<td class='instlamnt_hid' Style='Display:none'>" + (value.InstalmentAmt).toFixed(2) + "</td>");
                                    $CheckListHTML.append("<td class='Downpayment_hid' Style='Display:none'>" + (value.DownPayment).toFixed(2) + "</td>");
                                    $CheckListHTML.append("<td class='BillAmount' Style='Display:none'>" + (value.BillAmount).toFixed(2) + "</td>");
                                    //$('[name="emidt"]').val(moment().format('YYYY-MM-DD'));
                                    //CheckListHTML += "</tr>";
                                    $("#formGroupModalEMIDetailsbody").prepend($CheckListHTML)
                                    document.getElementById("EMICalcs").disabled = false;

                                    if (value.PlanID == FK_EMI_Plans) {
                                        document.getElementById('rdsButton'+i).checked = true;
                                        $('#emidate' + i).val(moment(FK_EMI_Date).format('YYYY-MM-DD'));
                                    }
                                }
                                else {
                                    let $CheckListHTML = $('<tr/>');
                                    $CheckListHTML.append("<td colspan='8' style='text-align:center;'><b>" + value.Errmsg + "</b></td>");
                                    $("#formGroupModalEMIDetailsbody").prepend($CheckListHTML)

                                    EMIProductList = [];
                                    $thisForm.find('[name=AdditionalAmount]').val('');
                                    $thisForm.find('[name=DownPayment]').val('');
                                    $thisForm.data({ pEMIProdData: '' })
                                    fn_roundoff(ele);
                                    document.getElementById("EMICalcs").disabled = true;
                                }
                            })
                        }
                        else {
                            CheckListHTML += "<div class='form-group col-md-6'>";
                            CheckListHTML += "<div class='form-check mb-2'>";
                            CheckListHTML += "<input type='checkbox' class='form-check-input' >"
                            CheckListHTML += "<label class='form-check-label' style='text-align:center;' for='check1'><b>No Plans Available for these products.</b></label>";
                            CheckListHTML += "</div></div>"
                            $("#formGroupModalEMIDetailsbody").html(CheckListHTML)
                        }
                        //$("#formGroupModalEMIDetailsbody").html(CheckListHTML)
                        $('#EMIDetails').modal({ backdrop: 'static', keyboard: false })
                        $('#EMIDetails').modal('show');


                        $('#EMIDetails').modal('show');

                    }
                    else {
                        $.each(ajaxOutput.Process.Message, function (key, value) {
                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                        });
                    }
                },
                complete: function () {
                    $(ele).prop('disabled', false);

                }
            });
        }
        else {
           NotificationMessage({ 'type': 'info', 'heading': 'Info', 'message': 'Select Atleast One Product' });
        }

    }*@

    $("#EMIdata tbody").on("change", ".downpay", function () {
        let $thisForm = $(this).closest('[perfect-class="form"]');
        if ($($(this).find("input[type='radio']")).is(":checked") == true) {
            var FK_FinancePlan;
            var EMIDate;
            var Downpayment;
            var Installment;
            var BillAmount;
            var Downpayment_hid;
            var Installment_hid;
            var BillTotal = $thisForm.find('[name=SalBillTotal]').val();

            FK_FinancePlan = $(this).closest("tr").find('.FK_FinancePlan').text();
            EMIDate = $(this).closest("tr").find('.Datemi').find('input').val();
            AdditionalAmount = $(this).closest("tr").find('.Additionalamount').text();
            Downpayment = $(this).closest("tr").find('.downpay').find('input').val();
            Installment = $(this).closest("tr").find('.instlamnt').find('input').val();
            Installment_hid = $(this).closest("tr").find('.instlamnt_hid').text();
            Downpayment_hid = $(this).closest("tr").find('.Downpayment_hid').text();
            if (parseFloat(Downpayment) > parseFloat(BillTotal)) {
                //$(this).closest("tr").find('.downpay').find('input').val(Number(Downpayment_hid).toFixed(2));
                NotificationMessage({ 'type': 'info', 'heading': 'Info', 'message': 'Downpayment can' + "'" + 't be greater than BillTotal' });
            }
            BillAmount = $(this).closest("tr").find('.BillAmount').text();
        }
    });

    $("#EMIdata tbody").on("change", ".instlamnt", function () {
        let $thisForm = $(this).closest('[perfect-class="form"]');
        if ($($(this).find("input[type='radio']")).is(":checked") == true) {
            var FK_FinancePlan;
            var EMIDate;
            var Downpayment;
            var Installment;
            var BillAmount;
            var Downpayment_hid;
            var Installment_hid;
            var BillTotal = $thisForm.find('[name=SalBillTotal]').val();

            FK_FinancePlan = $(this).closest("tr").find('.FK_FinancePlan').text();
            EMIDate = $(this).closest("tr").find('.Datemi').find('input').val();
            AdditionalAmount = $(this).closest("tr").find('.Additionalamount').text();
            Downpayment = $(this).closest("tr").find('.downpay').find('input').val();
            Installment = $(this).closest("tr").find('.instlamnt').find('input').val();
            Installment_hid = $(this).closest("tr").find('.instlamnt_hid').text();
            Downpayment_hid = $(this).closest("tr").find('.Downpayment_hid').text();
            if (parseFloat(Installment) > parseFloat(BillTotal)) {
                //$(this).closest("tr").find('.instlamnt').find('input').val(Number(Installment_hid).toFixed(2));
                NotificationMessage({ 'type': 'info', 'heading': 'Info', 'message': 'Installment Amount can' + "'" + 't be greater than BillTotal' });
            }
            BillAmount = $(this).closest("tr").find('.BillAmount').text();
        }
    });

    var FK_EMI_Plans;
    var FK_EMI_Date;
    var ProductWise;
    @*function EMICalculate1(ele) {
        debugger;
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let SalesOrderDate = $thisForm.find('[name="SalesOrderDate"]').val();
        var FK_FinancePlan;
        var EMIDate;
        var radio;
        var Downpayment;
        var Installment;
        var BillAmount;
        var Downpayment_hid;
        var Installment_hid;
        var BillTotal = $thisForm.find('[name=SalBillTotal]').val();
    var AdditionalAmount;

        var ProductList = [];
        var trs = $("#formGroupModalEMIProductbody tr");
        if (trs.length > 0) {

            $('#formGroupModalEMIProductbody tr').each(function (index, ele) {
                debugger
                if ($($(ele).find("input[type='checkbox']")).is(":checked") == true) {
                    var ProductListData = {};
                    ProductListData['ID_Product'] = $(this).closest("tr").find('.FK_Product').text();
                    ProductListData['ProdName'] = $(this).closest("tr").find('.Productname').text();
                    ProductListData['Amount'] = $(this).closest("tr").find('.TotalAmount').text();

                    ProductList.push(ProductListData);
                }
            });

        }



        $('#formGroupModalEMIDetailsbody tr').each(function (index, ele) {
            debugger
            if ($($(ele).find("input[type='radio']")).is(":checked") == true) {
                radio = 1;
                FK_FinancePlan=$(this).closest("tr").find('.FK_FinancePlan').text();
                EMIDate = $(this).closest("tr").find('.Datemi').find('input').val();
                AdditionalAmount = $(this).closest("tr").find('.Additionalamount').text();
                Downpayment = $(this).closest("tr").find('.downpay').find('input').val();
                Installment = $(this).closest("tr").find('.instlamnt').find('input').val();
                Installment_hid = $(this).closest("tr").find('.instlamnt_hid').text();
                Downpayment_hid=$(this).closest("tr").find('.Downpayment_hid').text();
                BillAmount = $(this).closest("tr").find('.BillAmount').text();
            }
        });

        ProductWise;
            debugger
        if ($('#ProductWise').is(":checked")) {
            ProductWise = 1;
        }
        else {
            ProductWise = 0;
        }
        console.log('RADIO>', radio);
        console.log('FK_FinancePlan>', FK_FinancePlan);
        console.log('EMIDate>', EMIDate);
        console.log('EMIProductListCalc>', ProductList);
        if (parseFloat(Downpayment) > parseFloat(BillTotal)) {
            $(this).closest("tr").find('.downpay').find('input').val(Number(Downpayment_hid).toFixed(2));
            NotificationMessage({ 'type': 'info', 'heading': 'Info', 'message': 'Downpayment can' + "'" + 't be greater than BillTotal' });
        }
        else if (parseFloat(Installment) > parseFloat(BillTotal)) {
            $(this).closest("tr").find('.instlamnt').find('input').val(Number(Downpayment_hid).toFixed(2));
            NotificationMessage({ 'type': 'info', 'heading': 'Info', 'message': 'Installment Amount can' + "'" + 't be greater than BillTotal' });
        }
        else {
            if (radio == 1) {
                if (EMIDate != '') {
                    if (EMIDate >= SalesOrderDate) {

                        if (ProductList.length > 0) {
                            FK_EMI_Date = '';
                            FK_EMI_Plans = '';
                            FK_EMI_Plans = FK_FinancePlan;
                            FK_EMI_Date = EMIDate;

                            var InputData =
                            {
                                ProductDetails: ProductList,
                                FK_FinancePlan: FK_FinancePlan,
                                EMIDate: EMIDate,
                                ProductWise: ProductWise,
                                Downpayment: Downpayment,
                                Installment: Installment,
                                //Installment_hid: Installment_hid,
                                //Downpayment_hid: Downpayment_hid,
                                AdditionalAmount: AdditionalAmount,
                                BillAmount: BillAmount
                            }

                            $.ajax({
                                url: "@Url.Action("EMICalculate", "SalesOrder")",
                                type: "POST",
                                data: InputData,
                                dataType: "json",
                                contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                                success: function (ajaxOutput) {
                                    if (ajaxOutput.Process.IsProcess) {

                                        if (ajaxOutput.Data.length > 0) {
                                            var CheckListHTML = '';
                                            const date = new Date();
                                            $.each(ajaxOutput.Data, function (i, value) {
                                                if (value.SLNo <= 0) {
                                                    $('#rowid').hide();
                                                    CheckListHTML += "<tr id='rowid'>";
                                                    CheckListHTML += "<td class='SLNO' style='display:none'>" + value.SLNo + "</td>";
                                                    CheckListHTML += "<td class='EMIDate' style='display:none'>" + ConvertJsonDate(value.EMIDate) + "</td>";
                                                    CheckListHTML += "<td class='Amount' style='display:none'>" + value.Amount + "</td>";
                                                    CheckListHTML += "<td class='Remarks' style='display:none'>" + value.Remarks + "</td>";
                                                    CheckListHTML += "</tr>";
                                                    console.log('yes get in')
                                                }
                                                else {
                                                    $('#rowid').show();
                                                    CheckListHTML += "<tr id='rowid'>";
                                                    CheckListHTML += "<td class='SLNO'>" + value.SLNo + "</td>";
                                                    CheckListHTML += "<td class='EMIDate'>" + ConvertJsonDate(value.EMIDate) + "</td>";
                                                    CheckListHTML += "<td class='Amount'>" + value.Amount + "</td>";
                                                    CheckListHTML += "<td class='Remarks'>" + value.Remarks + "</td>";
                                                    CheckListHTML += "</tr>";
                                                }

                                            })
                                        }
                                        else {
                                            CheckListHTML += "<div class='form-group col-md-6'>";
                                            CheckListHTML += "<div class='form-check mb-2'>";
                                            CheckListHTML += "<input type='checkbox' class='form-check-input' >"
                                            CheckListHTML += "<label class='form-check-label' style='text-align:center;' for='check1'><b>No Plans Available for these products.</b></label>";
                                            CheckListHTML += "</div></div>"
                                        }
                                        $("#InstallmentDetailsbody").html(CheckListHTML)
                                        $('#InstallmentDetails').modal({ backdrop: 'static', keyboard: false })
                                        $('#InstallmentDetails').modal('show');


                                        $('#InstallmentDetails').modal('show');

                                    }
                                    else {
                                        $.each(ajaxOutput.Process.Message, function (key, value) {
                                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                        });
                                    }
                                },
                                complete: function () {
                                    $(ele).prop('disabled', false);

                                }
                            });
                        }
                    }
                    else {
                        NotificationMessage({ 'type': 'info', 'heading': 'Info', 'message': 'EMI Date Should be greater than or equal to Order Date' });
                    }
                }
                else {
                    NotificationMessage({ 'type': 'info', 'heading': 'Info', 'message': 'Please Enter EMI Date' });
                }
            }
            else {
                NotificationMessage({ 'type': 'info', 'heading': 'Info', 'message': 'Select A EMI Plan' });
            }
        }

    }*@


    function BindDownpayment1(ele) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        var Downpayment=0;
        var AdditionalPayment=0;
        $('#InstallmentDetailsbody tr').each(function (index, ele) {
            debugger

            var slno = $(this).closest("tr").find('.SLNO').text();
            var remarks = $(this).closest("tr").find('.Remarks').text();
            if (slno < 1 && slno >= -1) {
                if (remarks == 'Additional Amount') {
                    AdditionalPayment = $(this).closest("tr").find('.Amount').text();
                }
                else if (remarks == 'Down payment') {
                    Downpayment = $(this).closest("tr").find('.Amount').text();
                }


            }
            else {
                return false;
            }
        });


        $thisForm.find('[name=AdditionalAmount]').val(Number(AdditionalPayment).toFixed(2));
        $thisForm.find('[name=DownPayment]').val(Number(Downpayment).toFixed(2));

        $('#formGroupModalEMIProduct').modal('hide');
        $('#EMIDetails').modal('hide');
        $('#InstallmentDetails').modal('hide');
        fn_roundoff(ele);
    }

    function ShowEMIFields1(ele) {
        //if ($($(ele).find("input[name='ProductEMI']")).is(":checked") == true)
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        debugger
        if (document.getElementById('EMIProduct').checked == true){
            $('.DivDownPayment').show();
            $('.DivAdditionalAmount').show();
            $('.AssignedToID').show();

            fn_roundoff(ele);
        }
        else {
            $('.DivDownPayment').hide();
            $('.DivAdditionalAmount').hide();
            $('.AssignedToID').hide();
            FK_EMI_Plans = 0;
            FK_EMI_Date = '';
            EMIProductList = [];
            fn_roundoff(ele);
            $thisForm.data({ pEmiData: '' });
            $thisForm.data({ pEMIProdData: '' })
            $thisForm.find('[name=AdditionalAmount]').val("");
            $thisForm.find('[name=DownPayment]').val("");
            $thisForm.find('[name=AssignedTo]').val("");
            $thisForm.find('[name=AssignedToID]').val("");
        }
    }



    function isNumberKey(evt) {
        var charCode = (evt.which) ? evt.which : event.keyCode
        if (charCode > 31 && (charCode < 46 || charCode > 57))
            return false;

        return true;
    }
    function decimalpnt(ele, name, range, md) {
        debugger
        if (md == 1) {
            ele = $(this).find('[perfect-class="form"]');
        }
        let input = $('#' + name);
        ele.value = ele.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');
        let t = ele.value;
        ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t;

        $(document).on('keydown', '#' + id, function (event) {

            if (ele.value.includes('.')) {

            }
            else if (ele.value === '.' && (event.key === '.' || event.keyCode === 190)) {
                ele.value = '0.00'; // Change the value to '0.00' if only a dot is entered
                // Prevent the dot from being entered in the input field
            }
            var key = event.keyCode || event.charCode;
            if (key == 8 || key == 46) { }
            else {
                if (ele.value.indexOf('.') < 0 && ele.value.indexOf('.') !== 9 && ele.value.length > 8) {
                    ele.value = ele.value + '.';
                }
            }

        });

    }

    function getfunction(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        console.log('ID_LEAD', $thisForm.find('[name="FK_Lead"]').val());
        fn_resetSalesOrderItem(ele);
        let $tblcontainer = $thisForm.find('[perfect-tempTable="SalesOrder"]');
        let $Ptblcontainer = $thisForm.find('[perfect-tempTable="Payment"]');
        othrchargelst = [];
        EMIPlandata = [];
        productclear(ele, 'Payment');
        //$thisForm.data({ pwarranty: null });
        $thisForm.data({ pOthrChgData: '' });

        AssignToShow(ele);

        $tblcontainer.empty();
        $Ptblcontainer.empty();
        $thisForm.find('[perfect-tempTable-SalesOrder]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
        $thisForm.find('[perfect-tempTable="SalesOrder"]').html('');
        $thisForm.find('[name="SalBillTotal"]').val('');
        $thisForm.find('[name="SalNetAmount"]').val('');
        $thisForm.find('[name="OtherCharge"]').val('');
        $thisForm.find('[name="SalOrderDiscount"]').val('');
        $thisForm.find('[name="SalNetAmount"]').val('');
        $thisForm.find('[name="SoAdvcAmount"]').val('');
        $thisForm.find('[name="SalOrderRoundoff"]').val('');
        $thisForm.find('[name="AdditionalAmount"]').val('');
        $thisForm.find('[name="DownPayment"]').val('');
        $thisForm.find('[name="AssignedToID"]').val('');
        $thisForm.find('[name="AssignedTo"]').val('');

        $thisForm.find('[name=CustomeName]').attr("readonly", "readonly");

        let $thisform = $(ele).closest('[perfect-class="form"]');
        $thisform.find('[perfect-temptable-SalesOrder]').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-SalesOrder]').closest('[perfect-ctype="select"]').val('0').selectpicker('refresh');
        $thisform.find('[perfect-temptable-SalesOrder]').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-SalesOrder]').closest('[perfect-ctype="date"]').val('');
        $thisform.find('[perfect-temptable-SalesOrder]').closest('[perfect-ctype="hidden"]').val('');
        $thisform.find('[perfect-temptable-SalesOrder]').closest('[perfect-ctype="checkbox"]').val('');

        $('input[type=checkbox]').prop('checked', false);
        ShowEMI(ele);
        $thisForm.data({ Emiplandata: '' });
        let InputData;
        if ($thisForm.find('[name="ddlImportsList"]').val() == 2) {
            InputData =
            {
                FK_Master: $thisForm.find('[name="FK_Lead"]').val(),
                IsLead: 1
            }
        }
        console.log('InputData', InputData)
        debugger
        if ($thisForm.find('[name="ddlImportsList"]').val() != 1) {
            $.ajax({
                url: "@Url.Action("GetLeadFill", "SalesOrder")",
                type: "Get",
                data: InputData,
                dataType: "json",
                contentType: "application/json",
                success: function (ajaxOutput) {
                    if (ajaxOutput.length>0) {

                        //let table = JSON.parse(ajaxOutput.Data);
                        console.clear();
                        console.log('RENAMED SALES ORDER',ajaxOutput)
                        fillgrid('SalesOrder', tableOptionsLeadItem, $thisForm, ajaxOutput);
                        fn_bindBillDetails(ele)
                        fn_roundoff(ele);
                        fn_totalAmountItem(ele);
                    }
                    else {
                        $.each(ajaxOutput.Process.Message, function (key, value) {
                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': "No Products Found"});
                            //$thisForm.find('[name=AdvAmount]').val('');
                        });

                    }
                },
                complete: function () {
                    $(ele).prop('disabled', false);
                }
            });

        }
    }
    function fillgrid(tablk, wartableOptionsTempOut, $thisForm, data) {
        let tableOptionsTemp = wartableOptionsTempOut;
        let insertData = [];
        let tableKey = tablk;
        let indexname = tableKey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');
        $.each(data, function (keyOne, valOne) {
            let pData = {};
            pData[indexname] = keyOne + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', pData[indexname])

            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                if (typeof valOne[nameAttr] !== undefined) {

                    if ($this.is('select')) {
                        tableOptionsTemp.hideColumn.push(nameAttr);
                        pData[nameAttr + '_d'] = $this.find('[value="' + valOne[nameAttr] + '"]').text();
                        pData[nameAttr] = valOne[nameAttr];
                        if ($this.find('[value="' + valOne[nameAttr] + '"]').text() == "Please select") {
                            pData[nameAttr + '_d'] = "";
                        }
                    }
                    else if ($this.is('input')) {
                        pData[nameAttr] = valOne[nameAttr];
                    }
                }
            });

            insertData.push(pData);

        });
        $tblcontainer.empty();
        $tblcontainer.append(pft_table_createtable(insertData, tableOptionsTemp));

    }

    function validwartdetails(ele, tableKey, errorClass, isValid) {
        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        if (parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="SodMRP"]').val() > 0)) {
            if (parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="SodSalDiscount"]').val()) > parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="SodMRP"]').val())) {
                console.log('false', $thisForm.find('[perfect-tempTable-' + tableKey + '="SalesOrder"]').val());
                isValid = false;
                $thisForm.find('[perfect-tempTable-' + tableKey + '="SodSalDiscount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Discount Amount should be less than or equal to MRP');
            }
            else {
                //isValid = true;
                $thisForm.find('[perfect-tempTable-' + tableKey + '="SodSalDiscount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }
        }
        if (parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="SalPrice"]').val()) > parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="SodMRP"]').val())) {
            console.log('false', $thisForm.find('[perfect-tempTable-' + tableKey + '="SalesOrder"]').val());
            isValid = false;
            $thisForm.find('[perfect-tempTable-' + tableKey + '="SalPrice"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Sale Price should be less than or equal to MRP');
        }
        else {

            $thisForm.find('[perfect-tempTable-' + tableKey + '="SalPrice"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }


        return isValid;

    }
    function getfunctionAssign(ele) {
        let $thisform=$(ele).closest('[perfect-class="form"]');
        //$thisform.find('[perfect-temptable-SalesOrder]').closest('[perfect-ctype="input"]').val('');
        //$thisform.find('[perfect-temptable-SalesOrder]').closest('[perfect-ctype="select"]').val('').selectpicker('refresh');
        //$thisform.find('[perfect-temptable-SalesOrder]').closest('[perfect-ctype="input"]').val('');
        //$thisform.find('[perfect-temptable-SalesOrder]').closest('[perfect-ctype="date"]').val('');
        //$thisform.find('[perfect-temptable-SalesOrder]').closest('[perfect-ctype="hidden"]').val('');
        //$('input[type=checkbox]').prop('checked', false);
        $thisform.find('[name="SodSalDiscountPercent"]').val('');
        $thisform.find('[name="SodSalDiscount"]').val('');
        //fn_calculateDiscPer(ele, 1);
        //fn_calculateDiscAmount(ele, 1);
        calcDisfromMrp(ele);
        $('#EMIProduct').prop('checked', false);
        ShowEMI(ele);
        $thisform.data({ Emiplandata: '' });
        $('#EMIdatagrid tbody').empty();
    }

    function GetPaymentlistsalesorder(ele) {
        $('#formGroupModalpayment').modal({ backdrop: 'static', keyboard: false })

        $('#formGroupModalpayment').modal('show');

    }

    function SoBillttlnetchck(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');

        let balamt = $thisForm.find('[name=BalAmt]').text();

        if (parseFloat(balamt) == 0) {
            $('#formGroupModalpayment').modal('hide');
            $thisForm.find('[perfect-tempTable="Payment"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
        }
        else {

            $thisForm.find('[perfect-tempTable="Payment"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('Balance Amt. should be Zero');

        }
    }
    function productclear(ele, tablekey) {

        let $thisform = $(ele).closest('[perfect-class="form"]');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="select"]').val('').selectpicker('refresh');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="date"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="hidden"]').val('');

        let $tblcontainer = $thisform.find('[perfect-tempTable="' + tablekey + '"]');
        $tblcontainer.attr('perfect-tempTable-action', 0);

        if (tablekey = "Purchase") {
            $thisform.find('[name=prdbtn]').removeAttr("disabled", "disabled")

        }
        else if (tablekey = "Warranty") {

        }
        else if (tablekey = "Payment") {

        }
    }
    function createtable(ele, tkey, uniq = [], tableOptionsTempOut) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let tableKey = tkey;
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');

        let insertData = {};
        let tableOptionsTemp = tableOptionsTempOut;
        console.log('tableOptionsTemp', tableOptionsTemp)
        let unique = (uniq) ? uniq : [];

        let isValid = true;
        let errorClass = '.temptableError';

        //make index
        console.log('check 1');

        let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
        let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
        let indexname = tkey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);
        console.log('tableOptionsTemp.rowAttribute', tableOptionsTemp.rowAttribute)
        let updateCond = '';
        let isNew = true;

        if (thisactionIndex > 0) {
            //means update
            insertData[indexname] = thisactionIndex;
            updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
            isNew = false;
        }
        else {
            //insert
            insertData[indexname] = lastIndex + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
            isNew = true;
        }
        //
        if (tableKey == 'Warranty') {

            isValid = validwartdetail(ele, tableKey, errorClass, isValid);
        }
        else if (tableKey == 'Payment') {
            isValid = validpaymntdetail(ele, tableKey, errorClass, isValid);
        }
        else if (tableKey == 'Purchase') {
            isValid = validsaledetail(ele, tableKey, errorClass, isValid);
        }

        if (unique.length > 0) {
            //getting previous data
            let prevData = [];
            $tblcontainer.find('table > tbody').find('tr').each(function () {
                if (isNew) {
                    prevData.push($(this).data('pData'));
                }
                else {
                    if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                        prevData.push($(this).data('pData'));
                    }

                }

            })
            console.log('previous data', prevData);

            unique.forEach(function (key, i) {
                console.log('unid -> key:' + key + "| index :" + i);
                let $thisEle = $thisForm.find('[perfect-tempTable-' + tableKey + '="' + key + '"]');
                // let headerEleName = $thisForm.find('[name="lblProName"]').text();
                let atname = $thisEle.attr('name');
                let cvalue;
                console.log('atname', atname);
                console.log('$thisEle.length', $thisEle.length);
                if ($thisEle.length != 0) {
                    console.log('len', $thisEle)
                    let $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
                    let errmessage = key + " Already exits"

                    //getting current value in cval
                    if ($thisEle.is('select')) {
                        cvalue = $thisEle.val();
                        //alert(cvalue);
                    }
                    else if ($thisEle.is('input')) {

                        let inputEleType = $thisEle.attr('type').toLocaleLowerCase();

                        if (inputEleType == 'checkbox') { cvalue = $thisEle.is(':checked'); }
                        else if (inputEleType == 'hidden') { cvalue = $thisEle.val(); console.log('cvalue ->', cvalue); }
                        else { cvalue = $thisEle.val(); }
                    }
                    else { cvalue = $thisEle.val(); }

                    //searching in previous data
                    if (prevData.find(a => a[atname] == cvalue)) {
                        // console.log('Search =>' + cvalue + '| attr :' + atname)
                        $errorElement.text(errmessage);
                        isValid = false;
                    }
                }
            });
        }
        console.log('isValid', isValid);

        if (isValid) {

            console.log('check 4.1');
            // this section make table column data
            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                //console.log('nameAttr', nameAttr);
                console.log('headerName', headerName);

                if ($this.is('select')) {

                    //tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                    tableOptionsTemp.hideColumn.push(nameAttr)
                    //displat text of select
                    if ($this.val() != null) {
                        let selectText = ($this.val().length == 0) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    else {
                        let selectText = ($this.val() == null) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    //tableOptionsTemp.onlyShowColumn.push(nameAttr + '_d')
                    insertData[nameAttr] = $this.val();
                    //insertData[nameAttr] = $this.val();

                    $this.val('').selectpicker('refresh');
                }
                else if ($this.is('input')) {

                    insertData[nameAttr] = $this.val();
                    console.log('insertData[nameAttr]', insertData[nameAttr])
                    if (nameAttr == "prodtid") { }
                    else if (nameAttr == "stkid") { }
                    else { $this.val(''); }
                }
            });

            console.log('check 4.2', insertData);
            console.log('check 4.2 tableoption', tableOptionsTemp);

            if (isNew) {
                console.log('check 4.2.1');
                //this section nake table.table row
                if ($tblcontainer.find('table').length == 0) {
                    console.log('check 4.2.3');
                    console.log(insertData);
                    console.log(',tableOptionsTemp', tableOptionsTemp)
                    $tblcontainer.append(pft_table_createtable([insertData], tableOptionsTemp));
                }
                else {
                    console.log('check 4.2.1');
                    let table = $tblcontainer.find('table').DataTable()
                    table.destroy()
                    pft_table_addTableRow($tblcontainer.find('table'), insertData, tableOptionsTemp);
                }
            }
            else {
                let table = $tblcontainer.find('table').DataTable()
                table.destroy()
                pft_table_replaceTableRow($tblcontainer.find('table'), updateCond, insertData, tableOptionsTemp);
            }

            console.log(insertData);
            // resetting the edit value
            $tblcontainer.attr('perfect-tempTable-action', 0);

            if (tableKey == 'Payment') {
                BillAmountbinds(ele);
            }
        }
    }

    var paytableOptionsTempOut = {
        iconButton: {
            buttons: [
                {
                    icon: "fa fa-pencil btnPerfectGridEdit",
                    action: function () {
                        let savedData = $(this).closest('tr').data('pData')

                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let tableKey = $tablecontainer.attr('perfect-tempTable');
                        let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                        //index attribute name in table row
                        let indexname = tableKey + 'index';

                        //index number in table row
                        let rindex = $(this).closest('tr').attr(indexname);

                        $tablecontainer.attr('perfect-tempTable-action', rindex);

                        console.log('Editclick', savedData);
                        //filling data in available inputs
                        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                            let $thisNode = $(this);
                            let pf_name = $thisNode.attr('name');
                            if ($thisNode.is('select')) {
                                $thisNode.val(savedData[pf_name]).selectpicker('refresh');
                            }
                            else if ($thisNode.is('input')){
                               let inputType = $thisNode.attr('type').toLocaleLowerCase();

                               if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox'){
                                    $thisNode.prop('checked', savedData[pf_name]);
                               }
                               else{
                                    $thisNode.val(savedData[pf_name]);
                               }
                            }
                            else{
                                $thisNode.val(savedData[pf_name]);
                            }
                        });
                    }
                },
                {
                    icon: "fa fa-trash btnPerfectGridDelete",
                    action: function () {
                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let $thistbl = $(this).closest('table');
                        let table = $thistbl.DataTable();
                        table.destroy();
                        if ($(this).closest('tbody').find('tr').length > 1) {
                            $(this).closest('tr').remove();
                            pft_table_slreset($thistbl);
                            //$thistbl.dataTable({ paging: true, searchbtn: false });
                        }
                        else {
                            $thistbl.remove();
                        }
                        let $thisform = $('[perfect-class="form"]');
                        $thisform.find('[perfect-temptable-Payment]').closest('[perfect-ctype="input"]').val('');
                        $thisform.find('[perfect-temptable-Payment]').closest('[perfect-ctype="select"]').val('').selectpicker('refresh');
                        $thisform.find('[perfect-temptable-Payment]').closest('[perfect-ctype="input"]').val('');
                        $thisform.find('[perfect-temptable-Payment]').closest('[perfect-ctype="date"]').val('');
                        $thisform.find('[perfect-temptable-Payment]').closest('[perfect-ctype="hidden"]').val('');

                        BillAmountbinds($tablecontainer);
                    }
                },
            ]
        },

        rowAttribute: [],
        onlyShowColumn: ['PAmount', 'Refno', 'PaymentMethod_d'],
        renameHeader: { "PAmount": "Amount1R", "Refno": "Ref No", "PaymentMethod_d": "Method" },
        hideColumn: ['BalAmt'],

        serialNo: true,

    };
    function BillAmountbinds(ele) {
        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let netamt = $thisForm.find('[name="SalNetAmount"]').val() == "" ? "0" : $thisForm.find('[name="SalNetAmount"]').val();
        let advamnt = $thisForm.find('[name="SoAdvcAmount"]').val() == "" ? "0" : $thisForm.find('[name="SoAdvcAmount"]').val();;
        let billamt = 0;
        let bilamt = 0;

        if ($thisForm.find('[name=BalAmt]').text() == '') {
            bilamt = 0;
        }
        else {
            bilamt = advamnt;
        }

        $('#Paymentdethead').find('tbody tr').each(function (index, ele) {
            billamt += parseFloat($(ele).find('.PAmount').text());
        });
        bilamt = parseFloat(bilamt) - billamt;

        $thisForm.find('[name=BalAmt]').text(bilamt.toFixed(2));
        $thisForm.find('[name=PAmount]').val(bilamt.toFixed(2));
        if (bilamt == 0) {
            return true;
        }
        else {
            return false;
        }
    }
    function Pamount(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let amtp = $thisForm.find('[name="PAmount"]').val() == "" ? "0" : $thisForm.find('[name="PAmount"]').val();
        $thisForm.find('[name="PAmount"]').val(parseFloat(amtp).toFixed(2))
    }
    function validpaymntdetail(ele, tableKey, errorClass, isValid) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').val() == null) {

            isValid = false;
            console.log('false', $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').val());
            $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Payment Method');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }

        if (parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="PAmount"]').val()) <= 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="PAmount"]').val() == "") {
            console.log('false', $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').val());
            isValid = false;

            $thisForm.find('[perfect-tempTable-' + tableKey + '="PAmount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please enter a value greater than  0');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="PAmount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }
        return isValid;
    }

    function QtyResetEMI(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        if ($thisForm.data('Emiplandata')) {
            let confirmationDialogBoxOption = { heading: "Warning", body: "<b>Change Quantity will Reset EMI Details.  </b>" + "Do you want to continue? ", cancel: "No", confirm: "Yes" };
            var confirmBoxObj = ConfirmDialog(confirmationDialogBoxOption);
            confirmBoxObj.then(function (selectedOption) {
                if (selectedOption) {
                    $('#EMIProduct').prop('checked', false);
                    $('#EMIid').hide();
                    $thisForm.data({ Emiplandata: '' });
                    $('#EMIdatagrid tbody').empty();
                }
                else{
                    $thisForm.find('[name=SodSalQuantity]').val(ele.oldvalue)
                }
            });

        }

    }


    //$("#EMIdata tbody").bind("cut copy paste", ".instlamnt", function (index) {
    //    alert(1)
    //    var data = $(this).find('.instlamnt' + index).find('input').val();
    //    alert(data)
    //    var dataFull = data.replace(/[^\w\s]/gi, '');
    //    $(this).find('.instlamnt'+index).find('input').val(dataFull);
    //});

    function ConvertJsonDate(Jsondate) {
        var date = "";
        if (Jsondate != "" && Jsondate != null && Jsondate != undefined) {
            var dateString = Jsondate.substr(6);
            var currentTime = new Date(parseInt(dateString));
            var month = currentTime.getMonth() + 1;
            if (month <= 9) {
                month = "0" + month;
            }
            var day = currentTime.getDate();
            if (day <= 9) {
                day = "0" + day;
            }
            var year = currentTime.getFullYear();
            date = day + "/" + month + "/" + year;


        }
        return date;
    }

    function Showsalesorderno(ele)
    {
        let $thisForm = $(ele).closest('[perfect-class="form"]');

        let billtype = $thisForm.find('[name="BillType"]').val();

        if (billtype != 0 && billtype != "" && billtype != 'undefined') {

            getNumberGeneration(SalesorderTransMode, 0, $thisForm, 'SalesOrderNo')
            $('.DivSalesorderno').show();
        }
        else {
            $('.DivSalesorderno').hide();
        }


    }

    function decimalpnt(ele, id, range) {
        debugger
        let input = $('#' + id);

        ele.value = ele.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');
        let t = ele.value;
        ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t;

        $(document).on('keydown', '#' + id, function (event) {

            if (ele.value.includes('.')) {

            }
            else if (ele.value === '.' && (event.key === '.' || event.keyCode === 190)) {
                ele.value = '0.00'; // Change the value to '0.00' if only a dot is entered
                // Prevent the dot from being entered in the input field
            }
            var key = event.keyCode || event.charCode;
            if (key == 8 || key == 46) { }
            else {
                if (ele.value.indexOf('.') < 0 && ele.value.indexOf('.') !== 9 && ele.value.length > 8) {
                    ele.value = ele.value + '.';
                }
            }

        });

    }
      function ShowOtherCharges(ele,mode) {
            debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let Othrinfo = [];
        if ($thisForm.data('pOthrChgData')) {
           

            if ($thisForm.data('pOthrChgData').length > 0) {
                if (otherchgcalled = 0)
                {
                     othrchargelst = $thisForm.data('pOthrChgData');
                }
            }
        }
        //else {
            BindChargeDetails("1", 'formGroupModalOtherCharge', ele)
        //}

            }
     var othrchargelst="";

    function BindChargeDetails(Mode, ModalID, ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
     
        var InputData =
        {
            TransMode: SalesorderTransMode,
        }
      
   
        $.ajax({
            url: "@Url.Action("GetOtherCharges","Purchase")",
            type: "Get",
            data: InputData,
            dataType: "json",
            contentType: "application/json",
            success: function (ajaxOutput) {
                if (ajaxOutput.OtherCharges.Process.IsProcess) {
                         var CheckListHTML = '';
                   
                         if (ajaxOutput.OtherCharges.Data.length > 0) {
                             //---
                          
                         

                             $.each(ajaxOutput.OtherCharges.Data, function (i, value) {
                                 console.log('Transtypelist',ajaxOutput.Transtypelist.Data)

                                 let options = ''
                                 if (othrchargelst != '') {
                                    
                                     $.each(othrchargelst, function (key, value1) {

                                         if (value1.ID_OtherChargeType == value.ID_OtherChargeType) {

                                             value.OctyAmount = value1.OctyAmount;
                                             $.each(ajaxOutput.Transtypelist.Data, function (i, valuea) {
                                                 if (valuea.TransTypeID.toString() == value1.OctyTransType) {
                                                   
                                                     options += '<option value=' + valuea.TransTypeID + ' selected="selected">' + valuea.TransType + '</option>'
                                                 }
                                                 else { 
                                                     options += '<option value=' + valuea.TransTypeID + '>' + valuea.TransType + '</option>'
                                                 }
                                             });
                                         }
                                     
                                        
                                     });

                                 }
                                 else
                                 {
                                    
                                     $.each(ajaxOutput.Transtypelist.Data, function (i, valuea) {
                                         options += '<option value=' + valuea.TransTypeID + '>' + valuea.TransType + '</option>'
                                     });
                                     //---
                                   
                                 }
                                 console.log('optionsl', options)
                                 let $dropdown = '<select class="form-control"name="selector" id="selector" >' + options + '</select>';
                                 CheckListHTML += "<tr>";
                                 CheckListHTML += "<td>" + value.SlNo + "</td>";
                                 CheckListHTML += "<td Class='jq_ID_OtherChargeType_td' Style='Display:none'>" + value.ID_OtherChargeType + "</td>";
                                 CheckListHTML += "<td Class='jq_Type_td'>" + value.OctyName + "</td>";
                                 CheckListHTML += "<td class='jq_TransType_td'>" + $dropdown + "</td>";
                                 CheckListHTML += "<td class='jq_OtherChagAmnt_td' ><input min='0'  class='form-control text-right' type='number' onkeypress='return isNumberKey(event)' value='" + (value.OctyAmount).toFixed(2) + "' ' /></td> /></td>";

                                 CheckListHTML += "</tr>";
                             })
                         }
                         else {
                             CheckListHTML += "<div class='form-group col-md-6'>";
                             CheckListHTML += "<div class='form-check mb-2'>";
                             CheckListHTML += "<label class='form-check-label' for='check1'>No Records...</label>";
                             CheckListHTML += "</div></div>"
                         }
                         //let $model = createSearchModalDOM();
                         //$model.modal.find('.modal-body').append(CheckListHTML);
                         //$model.show
                    $('#formGroupModalOtherCharge').modal({ backdrop: 'static', keyboard: false }) 
                    $("#formGroupModalOtherChargebody").html(CheckListHTML)
                    $('#formGroupModalOtherCharge').modal('show');

              
                        // $thisForm.find('[name=TaxAmount]').val(sum);
                     }
                else {
                  
                    $.each(ajaxOutput.OtherCharges.Process.Message, function (key, value) {
                             NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                         });
                     }
                },
                complete: function () {
                    $(ele).prop('disabled', false);
                    $('select').selectpicker('refresh');
                }
            });
    }


    $("#pssModalOtherCharges").on('hide.bs.modal', function () {
        $("#OtherChargeSalesOrder").trigger("change");
    });


     //Common print settings Pirnt Config:

 var PageSizeArray;
    function getPageSize(ele) {
        debugger;
         $.ajax({
               url: "@Url.Action("GetPageSize", "CommonPrintSettings")",
               type: "Get",
               data: '',
               dataType: "json",
               contentType: 'application/x-www-form-urlencoded; charset=utf-8',
               success: function (ajaxOutput) {
                   console.log(ajaxOutput, 'GetPageSize');
                   if (ajaxOutput.Process.IsProcess) {
                       PageSizeArray=ajaxOutput.Data;
                   } else {
                       $.each(ajaxOutput.Process.Message, function (key, value) {
                           NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                       });
                   }
               },
               complete: function () {
                   getinvoiceData(ele)
               }
         });
    }



    var InvoiceData;
    function getinvoiceData(ele) {
        let $thisForm = $('[perfect-class="form"]');
        let inputData = {
            __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
            TransMode: SalesorderTransMode /*'INSO'*/,
            FK_Master: SalesOrderid,
        };
        console.log("inputData", inputData);
        debugger
         $.ajax({
               url: "@Url.Action("ProjectBilling_Invoice", "CommonPrintSettings")",
               type: "Post",
               data: inputData,
               dataType: "json",
               contentType: 'application/x-www-form-urlencoded; charset=utf-8',
             success: function (ajaxOutput) {
                 debugger;
                   console.log(ajaxOutput, 'ajaxOutput');
                 if (JSON.parse(ajaxOutput.jsondata1).Process.IsProcess) {
                      // InvoiceData = [];
                       InvoiceData = JSON.parse(ajaxOutput.jsondata1).Data[0];
                       if (ajaxOutput.jsondata2) InvoiceData.table1Data = JSON.parse(ajaxOutput.jsondata2).Data;
                       if (ajaxOutput.jsondata3) InvoiceData.table2Data = JSON.parse(ajaxOutput.jsondata3).Data;
                       if (ajaxOutput.jsondata4) InvoiceData.table3Data = JSON.parse(ajaxOutput.jsondata4).Data;
                   } else {
                     $.each(JSON.parse(ajaxOutput.jsondata1).Process.Message, function (key, value) {
                           NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                       });
                   }
               },
               complete: function () {
                        GetTemplate(ele)
               }
         });
    }


    function GetTemplate(ele) {
        var Cmp_obj = {
            table1_last_index: 0,
            table2_last_index: 0,
            table3_last_index: 0,
            table4_last_index: 0,
            next_page: false
        };
        var mockDiv1 = document.getElementById("Id_mock_div");
        mockDiv1.style.display = "block";
        let $thisForm = $(ele).closest('[perfect-class="form"]');
       var InputData =
       {
           TransMode:6,
           FK_Master: 0
       };
        $.ajax({
            url: "@Url.Action("GetTemplate", "Quotation")",
            type: "POST",
            data: InputData,
            dataType: "json",
            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            success: function (ajaxOutput) {
                console.log(ajaxOutput, 'GetTemplate');
                if (ajaxOutput.Process.IsProcess) {
                    let div0 = document.getElementById("Id_mock_div");
                    var childElements = div0.getElementsByClassName("child_Page");
                    while (childElements.length > 0) {
                        div0.removeChild(childElements[0]);
                    };
                    let PageWidth = 0;
                    let Pageheigth = 0;
                    PageSizeArray.forEach((data) => {
                        if (data.PValue == ajaxOutput.Data[0].PageSize) {
                            Pageheigth = data.height_in_px+"mm";
                            PageWidth = data.width_in_px+"mm";
                        }
                    });
                    debugger;
                   //// let page1 = Create_page('ChildDiv1', PageWidth, Pageheigth);
                   // let page1 = document.getElementById('Id_mock_div');
                   // page1.innerHTML = ajaxOutput.Data[0].FrontSideString;
                   // let main_div=page1.querySelector('#FrontSide');
                   // main_div.style.backgroundImage = 'url(' + ajaxOutput.Data[0].FrntImg + ')';
                   //// let elemt = document.getElementById('Id_mock_div');
                   ////elemt.append(main_div);
                   // let Cmp_binddata_retrn = Cmp_binddata(main_div, Cmp_obj);
                   // Cmp_obj = Cmp_binddata_retrn.Cmp_retrn_obj;
                   // div0.appendChild(Cmp_binddata_retrn.cmp_div);

                    let i = 0;
                    let main_div = "";
                    do {
                        let page1 = Create_page('ChildDiv' + i, PageWidth, Pageheigth);
                        page1.innerHTML = ajaxOutput.Data[0].FrontSideString;
                         main_div = page1.querySelector('#FrontSide');
                        main_div.id = 'FrontSide_' + i;
                        main_div.style.backgroundImage = 'url(' + ajaxOutput.Data[0].FrntImg + ')';
                        div0.appendChild(page1);
                        let Cmp_binddata_retrn = Cmp_binddata(main_div, Cmp_obj);
                        Cmp_obj = Cmp_binddata_retrn.Cmp_obj;
                        i++;
                    } while (Cmp_obj.next_page);




                    console.log(main_div);
                    debugger;
                    if (Cmp_obj.next_page == false && main_div) {
                        main_div.id;
                        //= 'FrontSide_' + i;
                       // CmpSum_Binddata(main_div, Cmp_obj);
                       //ClrTempDesign(div0);
                        for (j = 0; j < i - 1; j++) {
                            debugger;
                            main_div = div0.querySelector('#FrontSide_'+j);

                            //main_div.id = 'FrontSide_' + j;
                           // ClrTempDesign(main_div);
                        }
                    }


                    let Div0 = div0.innerHTML;
                    getPrint_main({ Pageheigth, PageWidth, Div0  });
                } else {
                    if (ajaxOutput.Data == null) { NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': "No Print Template Found." }); }
                   else $.each(ajaxOutput.Process.Message, function (key, value) {
                        NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                    });
                }
            },
            complete: function () {
                var mockDiv = document.getElementById("Id_mock_div");
                mockDiv.style.display = "none";
            }
        });
    };


    function getPrint_main(layout){
         debugger;
         var IdcardWidth = layout.PageWidth;
         var IdcardHeight = layout.Pageheigth;
         var ICW = '210mm';
         var ICH = '297mm';
         var styles = {
            'A4P': `
                @@page {
                    size: A4 portrait;
                    margin: 10mm;

                }
            `,
            'A4L': `
                @@page {
                    size: A4 landscape;
                    margin: 0mm;
                    size1: '297mm 210mm',
                }
            `,
            'A5P': `
                @@page {
                    size: A5 portrait;
                    margin: 10mm;
                }
            `,
            'A5L': `
                @@page {
                    size: A5 landscape;
                    margin: 10mm;
                }
            `
        };
         var printWindow = window.open('', '', 'width=' + 793+', height=' + 1123);
        printWindow.document.write('<html><head>');
        //printWindow.document.write('<style>' + styles[layout] + '</style>');
        printWindow.document.write('<link rel="stylesheet" href="@Url.Content("~/Assets/css/CommonPrintTemplate.css")" >');
        //printWindow.document.write('<style>@@media print {  * {-webkit-print-color-adjust:exact;} @@page { -webkit-print-color-adjust: exact;size: ' + ICW + ' ' + ICH + ';margin:0;    }   }   </style >');
        //printWindow.document.write('<style>table { border-collapse: collapse;   } tr,th, td { border: 1px solid black; text-align: left; }</style>');
        printWindow.document.write('</head><body style="margin:0px;max-width:' + IdcardWidth +';max-height:' + IdcardHeight + ' ">');
      //  printWindow.document.write('</head><body style="margin:0px;max-width:' + styles[layout].size + ';max-height:' + styles[layout].size + ' ">');
       //// printWindow.document.write('<div id="FrontIDCard" style="background-image: url(\'' + backgroundImageUrl + '\');">');
         //printWindow.document.write(document.getElementById("FrontSideParent").innerHTML);
         printWindow.document.body.innerHTML=layout.Div0;
      ////  printWindow.document.write('</div>');
        printWindow.document.write('</body></html>');
        printWindow.document.close(); // necessary for IE >= 10
        printWindow.focus(); // necessary for IE >= 10*/
    };



    function Create_page(Div_id, width, heigth) {
        var div1 = document.createElement("div");
        div1.className = 'child_Page';
        div1.id = Div_id;
        div1.style.position = 'relative';
        div1.style.width = width;
        div1.style.height = heigth;
        div1.style.border = "1px solid black";
        div1.textContent = "Div 1";
        return div1;
    };

    function getWordWrapLineCount(sentence, maxWidth) {
        // Split the sentence into words
        const words = sentence.split(' ');
        debugger;
        let lineCount = 0;
        let currentLineLength = 0;

        // Iterate through each word in the sentence
        for (let i = 0; i < words.length; i++) {
            const word = words[i];
            const wordLength = word.length;

            // If adding the current word exceeds the maximum width, start a new line
            if (currentLineLength + wordLength > maxWidth) {
                lineCount++;
                currentLineLength = 0;
            }

            // Update the current line length
            currentLineLength += wordLength;

            // Add extra space after the word if it's not the last word on the line
            if (i !== words.length - 1) {
                currentLineLength++; // for the space
            }
        }

        // If there are remaining words, count them as a line
        if (currentLineLength > 0) {
            lineCount++;
        }

        return lineCount;
    }
    function getDate() {
    var today = new Date();
    var dd = String(today.getDate()).padStart(2, '0');
    var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
    var yyyy = today.getFullYear();

        today = dd + '/' + mm+ '/' + yyyy;
   // document.write(today);
        return today;
    }
   // console.log(getDate())
    

    function Cmp_binddata(cmp_div, Cmp_obj) {
        debugger
        Cmp_obj.next_page = false;
        var SObj = { ...Cmp_obj };


        const childElements = cmp_div.querySelectorAll('[id]');
        // Separate IDs based on the "PT_" prefix
        const ptPrefixIds = [];
        const pt2PrefixIds = []; const pt3PrefixIds = []; const pt4PrefixIds = []; const pt5PrefixIds = []; const pt6PrefixIds = [];
        const pt7PrefixIds = [];
        const otherIds = [];
        let SumryIds = [];
        childElements.forEach(child => {

            if (child.id.startsWith('PT2_')) {
                pt2PrefixIds.push(child.id);
            }
            else if (child.id.startsWith('PT3_')) {
                pt3PrefixIds.push(child.id);
            }
            else if (child.id.startsWith('PT4_')) {
                pt4PrefixIds.push(child.id);
            }
            else if (child.id.startsWith('PT5_')) {
                pt5PrefixIds.push(child.id);
            }
            else if (child.id.startsWith('PT6_')) {
                pt6PrefixIds.push(child.id);
            }
            else if (child.id.startsWith('PT7_')) {
                pt7PrefixIds.push(child.id);
            }
            else {
                otherIds.push(child.id);
            }
        });
        // Display the separated lists
        ptPrefixIdsArray2 = [];
        pt2PrefixIdsArray2 = []; pt3PrefixIdsArray2 = []; pt4PrefixIdsArray2 = []; pt5PrefixIdsArray2 = []; pt6PrefixIdsArray2 = [];
        pt7PrefixIdsArray2 = [];
        pt2PrefixIds.forEach((d, i) => {
            const targetElement = cmp_div.querySelector("#" + d);
            const leftPosition = targetElement.offsetLeft;
            const elementWidth = targetElement.offsetWidth;
            const elementlength = targetElement.style.maxlength;
            var elementLength = targetElement.getAttribute('maxlength');

            const elementFont = targetElement.style.fontFamily;
            const elementFontsize = targetElement.style.fontSize;
            const elementAlign = targetElement.style.getPropertyValue('text-align');
            pt2PrefixIdsArray2.push({ id: d, left: leftPosition, width: elementWidth, fontfamily: elementFont, fontsize: elementFontsize, textalign: elementAlign, maxLength: elementLength });
            if (targetElement) {
                cmp_div.removeChild(targetElement);
            };
        })
        pt3PrefixIds.forEach((d, i) => {
            const targetElement = cmp_div.querySelector("#" + d);
            const leftPosition = targetElement.offsetLeft;
            const elementWidth = targetElement.offsetWidth;
            const elementlength = targetElement.style.maxlength;
            var elementLength = targetElement.getAttribute('maxlength');

            const elementFont = targetElement.style.fontFamily;
            const elementFontsize = targetElement.style.fontSize;
            const elementAlign = targetElement.style.getPropertyValue('text-align');
            pt3PrefixIdsArray2.push({ id: d, left: leftPosition, width: elementWidth, fontfamily: elementFont, fontsize: elementFontsize, textalign: elementAlign, maxLength: elementLength });
            if (targetElement) {
                cmp_div.removeChild(targetElement);
            };
        })
        pt4PrefixIds.forEach((d, i) => {
            const targetElement = cmp_div.querySelector("#" + d);
            const leftPosition = targetElement.offsetLeft;
            const elementWidth = targetElement.offsetWidth;
            const elementlength = targetElement.style.maxlength;
            var elementLength = targetElement.getAttribute('maxlength');

            const elementFont = targetElement.style.fontFamily;
            const elementFontsize = targetElement.style.fontSize;
            const elementAlign = targetElement.style.getPropertyValue('text-align');
            pt4PrefixIdsArray2.push({ id: d, left: leftPosition, width: elementWidth, fontfamily: elementFont, fontsize: elementFontsize, textalign: elementAlign, maxLength: elementLength });
            if (targetElement) {
                cmp_div.removeChild(targetElement);
            };
        })
        pt5PrefixIds.forEach((d, i) => {
            const targetElement = cmp_div.querySelector("#" + d);
            const leftPosition = targetElement.offsetLeft;
            const elementWidth = targetElement.offsetWidth;
            const elementlength = targetElement.style.maxlength;
            var elementLength = targetElement.getAttribute('maxlength');

            const elementFont = targetElement.style.fontFamily;
            const elementFontsize = targetElement.style.fontSize;
            const elementAlign = targetElement.style.getPropertyValue('text-align');
            pt5PrefixIdsArray2.push({ id: d, left: leftPosition, width: elementWidth, fontfamily: elementFont, fontsize: elementFontsize, textalign: elementAlign, maxLength: elementLength });
            if (targetElement) {
                cmp_div.removeChild(targetElement);
            };
        })
        pt6PrefixIds.forEach((d, i) => {
            const targetElement = cmp_div.querySelector("#" + d);
            const leftPosition = targetElement.offsetLeft;
            const elementWidth = targetElement.offsetWidth;
            const elementlength = targetElement.style.maxlength;
            var elementLength = targetElement.getAttribute('maxlength');

            const elementFont = targetElement.style.fontFamily;
            const elementFontsize = targetElement.style.fontSize;
            const elementAlign = targetElement.style.getPropertyValue('text-align');
            pt6PrefixIdsArray2.push({ id: d, left: leftPosition, width: elementWidth, fontfamily: elementFont, fontsize: elementFontsize, textalign: elementAlign, maxLength: elementLength });
            if (targetElement) {
                cmp_div.removeChild(targetElement);
            };
        })

        pt7PrefixIds.forEach((d, i) => {
            const targetElement = cmp_div.querySelector("#" + d);
            const leftPosition = targetElement.offsetLeft;
            const elementWidth = targetElement.offsetWidth;
            const elementlength = targetElement.style.maxlength;
            var elementLength = targetElement.getAttribute('maxlength');

            const elementFont = targetElement.style.fontFamily;
            const elementFontsize = targetElement.style.fontSize;
            const elementAlign = targetElement.style.getPropertyValue('text-align');
            pt7PrefixIdsArray2.push({ id: d, left: leftPosition, width: elementWidth, fontfamily: elementFont, fontsize: elementFontsize, textalign: elementAlign, maxLength: elementLength });
            if (targetElement) {
                cmp_div.removeChild(targetElement);
            };
        })
        const idsToRemove = ["ptableMarkerStarter", "ptableMarkerEnder", "ptable2MarkerStarter", "ptable2MarkerEnder", "ptable3MarkerStarter", "ptable3MarkerEnder"];
        otherIds.forEach((data, index) => {
            let element = cmp_div.querySelector("#" + data);
            if (data == "ptableMarkerStarter" || data == "ptableMarkerEnder" || data == "ptable2MarkerStarter" || data == "ptable2MarkerEnder" || data == "ptable3MarkerStarter" || data == "ptable3MarkerEnder") {
            } else {
                if (data.substring(2) == 'logoImage') element.src = InvoiceData[data.substring(2)];
                else if (data.substring(2).includes('Total') || data.substring(2).includes('Net')) {
                    console.log("hi2");
                    element.innerText = '--//--';
                    SumryIds.push(data);
                }
                else if (data.substring(2).includes('Inwords') || data.substring(2).includes('EOELabel') || data.substring(2).includes('ForCompanyLabel') /*|| data.substring(2).includes('ComputerGenerateLabel')*/ || data.substring(2).includes('SignatureLabel') || data.substring(2).includes('ForLabel')) {
                    console.log("hi2");
                    element.innerText = '';
                    SumryIds.push(data);
                }
                else element.innerText = InvoiceData[data.substring(2)];
            }
        });
        let startPoint = cmp_div.querySelector("#ptableMarkerStarter");
        let startEnd = cmp_div.querySelector("#ptableMarkerEnder");
        let startPoint2 = cmp_div.querySelector("#ptable2MarkerStarter");
        let startEnd2 = cmp_div.querySelector("#ptable2MarkerEnder");
        let startPoint3 = cmp_div.querySelector("#ptable3MarkerStarter");
        let startEnd3 = cmp_div.querySelector("#ptable3MarkerEnder");
        let Starter_Top_Position = 0; let Ender_Top_Position = 0; let Starter_Top_Position2 = 0; let Ender_Top_Position2 = 0; let Starter_Top_Position3 = 0; let Ender_Top_Position3 = 0;
        if (startPoint) Starter_Top_Position = startPoint.offsetTop;
        if (startEnd) Ender_Top_Position = startEnd.offsetTop;
        if (startPoint2) Starter_Top_Position2 = startPoint2.offsetTop;
        if (startEnd2) Ender_Top_Position2 = startEnd2.offsetTop;
        if (startPoint3) Starter_Top_Position3 = startPoint3.offsetTop;
        if (startEnd3) Ender_Top_Position3 = startEnd3.offsetTop;

        //idsToRemove.forEach(id => {
        //    const elementToRemove = cmp_div.querySelector("#" + id);
        //    if (elementToRemove) {
        //       // cmp_div.removeChild(elementToRemove);
        //    };
        //});

        if (pt2PrefixIdsArray2.length > 0) {



            if (InvoiceData.table1Data) {
                debugger;
                if (InvoiceData.table1Data.length > 0) {
                    let html = "";
                    let topPosition = 0;
                    var num0;
                    let Count = 1;
                    InvoiceData.table1Data.forEach((data, i) => {
                        if (i >= Cmp_obj.table1_last_index) {
                            if (i == Cmp_obj.table1_last_index) {
                                topPosition += Starter_Top_Position;
                            } else {
                                //if (data.subline) { topPosition += 13 } else { topPosition += Count > 0 ? Count : 20 }
                                if (data.subline) { topPosition += 13 } else { topPosition += Count * 20 }
                            };
                            //ptPrefixIdsArray2.forEach((data2, i2) => {
                            //    const newId = data2.id.substring(3);
                            //    const leftPosition = data2.left;
                            //    const ElementWidth = data2.width;
                            //    if (data[newId]) {
                            //        if (topPosition > Ender_Top_Position) {
                            //            if (num0 == undefined) {
                            //                num0 = i;
                            //                Cmp_obj.table1_last_index = i;
                            //                Cmp_obj.next_page = true;
                            //            }
                            //        } else {
                            //            if (newId == "image") {
                            //                // html += `<img src="${data[newId]}" alt="Your Image" class="custom-image" style="position: absolute; top: ${topPosition}px; left: ${leftPosition}px; width:10mm;height:10mm;>`;
                            //                html += `<img src="${data[newId]}" alt="Your Image" class="custom-image" style="position: absolute; top: ${topPosition}px; left: ${leftPosition}px; width:5mm;height:5mm;>`;
                            //            } else {
                            //                html += `<p style="position: absolute; top: ${topPosition}px; left: ${leftPosition}px;color: black; width:${ElementWidth}px; overflow: hidden; margin-top: 0px;">${data[newId]}</p>`;
                            //            }
                            //        };
                            //    };
                            //});
                            pt2PrefixIdsArray2.forEach((data2, i2) => {
                                const newId = data2.id.substring(4);
                                const leftPosition = data2.left;
                                const ElementWidth = data2.width;
                                const fontsize = data2.fontsize;
                                const fontfamily = data2.fontfamily;
                                const txtalign = data2.textalign;
                                let maxLength = data2.maxLength;
                                //maxLength = 62;
                                if (data[newId]) {
                                    if (topPosition > Ender_Top_Position) {
                                        if (num0 == undefined) {
                                            num0 = i;
                                            Cmp_obj.table1_last_index = i;
                                            Cmp_obj.next_page = true;
                                        }
                                    } else {

                                        if (maxLength != null && data[newId].length > maxLength) {
                                            debugger;

                                            Count = getWordWrapLineCount(data[newId], maxLength);

                                        }
                                        if (topPosition + (Count * 20) > Ender_Top_Position) {//checking before printing
                                            if (num0 == undefined) {
                                                num0 = i;
                                                Cmp_obj.table1_last_index = i;
                                                Cmp_obj.next_page = true;
                                            }
                                        }
                                        else if (newId == "image") {
                                            // html += `<img src="${data[newId]}" alt="Your Image" class="custom-image" style="position: absolute; top: ${topPosition}px; left: ${leftPosition}px; width:10mm;height:10mm;>`;
                                            html += `<img src="${data[newId]}" alt="Your Image" class="custom-image" style="position: absolute; top: ${topPosition}px; left: ${leftPosition}px; width:5mm;height:5mm;>`;
                                        } else {
                                            html += ` <p style="position: absolute; top: ${topPosition}px; left: ${leftPosition}px;color: black; width:${ElementWidth}px; font-size:${fontsize};font-family:${fontfamily};text-align:${txtalign}; overflow:auto ; margin-top: 0px;">${typeof data[newId] === 'number' & newId != 'SLNO' ? data[newId].toFixed(2) : data[newId]} </p>`;
                                        }
                                    };
                                };
                            });
                            //topPosition += Count;

                        }
                        if (i == InvoiceData.table1Data.length - 1 && SObj.table1_last_index == Cmp_obj.table1_last_index) {
                            Cmp_obj.table1_last_index = i + 1;

                            if (!Cmp_obj.table1_SumryIds) {
                                SumryIds.forEach((data, index) => {
                                    let element = cmp_div.querySelector("#" + data);
                                    //element.innerText = InvoiceData[data.substring(2)];
                                    element.innerText = typeof InvoiceData[data.substring(2)] === 'number' ? InvoiceData[data.substring(2)].toFixed(2) : InvoiceData[data.substring(2)]
                                });
                                Cmp_obj.table1_SumryIds = true;
                            }

                        }
                    });
                    //console.log(html, 'html>>>---');
                    cmp_div.insertAdjacentHTML('beforeend', html);
                };
            }

        };

            if (pt3PrefixIdsArray2.length > 0) {

                if (InvoiceData.table2Data) {

                    if (InvoiceData.table2Data.length > 0) {
                        let html = "";
                        let topPosition = 0;
                        var num2;
                        let Count = 1;
                        InvoiceData.table2Data.forEach((data, i) => {
                            if (i >= Cmp_obj.table2_last_index) {
                                if (i == Cmp_obj.table2_last_index) {
                                    topPosition += Starter_Top_Position2;
                                } else {
                                    if (data.subline) { topPosition += 13 } else { topPosition += Count * 20  }
                                };
                                pt3PrefixIdsArray2.forEach((data2, i2) => {
                                    const newId = data2.id.substring(4);
                                    //if (data.subline) topPosition -= 10;
                                    const leftPosition = data2.left;
                                    const ElementWidth = data2.width;
                                    const fontsize = data2.fontsize;
                                    const fontfamily = data2.fontfamily;
                                    const txtalign = data2.textalign;
                                    let maxLength = data2.maxLength;
                                    if (data[newId]) {
                                        if (topPosition >= Ender_Top_Position2) {
                                            if (num2 == undefined) {
                                                num2 = i;
                                                Cmp_obj.table2_last_index = i;
                                                Cmp_obj.next_page = true;
                                            }
                                        } else {
                                            if (maxLength != null && data[newId].length > maxLength) {
                                                debugger;

                                                Count = getWordWrapLineCount(data[newId], maxLength);

                                            }
                                            if (topPosition + (Count * 20) > Ender_Top_Position) {//checking before printing
                                                if (num0 == undefined) {
                                                    num0 = i;
                                                    Cmp_obj.table1_last_index = i;
                                                    Cmp_obj.next_page = true;
                                                }
                                            }
                                            else if (newId == "image") {
                                                html += `<img src="${data[newId]}" alt="Your Image" class="custom-image" style="position: absolute; top: ${topPosition}px; left: ${leftPosition}px; width:10mm;height:10mm;>`;
                                            } else {
                                                //html += `<p style="position: absolute; top: ${topPosition}px; left: ${leftPosition}px;color: black; margin-top: 0px;">${data[newId]}</p>`;
                                                html += ` <p style="position: absolute; top: ${topPosition}px; left: ${leftPosition}px;color: black; width:${ElementWidth}px; font-size:${fontsize};font-family:${fontfamily};text-align:${txtalign}; overflow:auto ; margin-top: 0px;">${typeof data[newId] === 'number' & newId != 'SLNO' ? data[newId].toFixed(2) : data[newId]} </p>`;

                                            };
                                        }
                                    }
                                });
                            }
                            if (i == InvoiceData.table2Data.length - 1 && SObj.table2_last_index == Cmp_obj.table2_last_index) {
                                Cmp_obj.table2_last_index = i + 1;

                                if (!Cmp_obj.table1_SumryIds) {
                                    SumryIds.forEach((data, index) => {
                                        let element = cmp_div.querySelector("#" + data);
                                        //element.innerText = InvoiceData[data.substring(2)];
                                        element.innerText = typeof InvoiceData[data.substring(2)] === 'number' ? InvoiceData[data.substring(2)].toFixed(2) : InvoiceData[data.substring(2)]
                                    });
                                   // Cmp_obj.table1_SumryIds = true;
                                }
                            }
                        });
                        // console.log(html, 'html>>>---');
                        cmp_div.insertAdjacentHTML('beforeend', html);
                    };
                }
            };

            if (pt4PrefixIdsArray2.length > 0) {
            if (InvoiceData.table3Data) {
                debugger;
                if (InvoiceData.table3Data.length > 0) {
                    let html = "";
                    let topPosition = 0;
                    var num3;
                    let Count = 1;

                    InvoiceData.table3Data.forEach((data, i) => {
                        if (i >= Cmp_obj.table3_last_index) {
                            if (i == Cmp_obj.table3_last_index) {
                                topPosition += Starter_Top_Position3;
                            } else {
                                if (data.subline) { topPosition += 13 } else { topPosition += Count * 20 }
                            };
                            pt4PrefixIdsArray2.forEach((data2, i2) => {
                                const newId = data2.id.substring(4);
                                const leftPosition = data2.left;
                                const ElementWidth = data2.width;

                                const fontsize = data2.fontsize;
                                const fontfamily = data2.fontfamily;
                                const txtalign = data2.textalign;
                                let maxLength = data2.maxLength;
                                //maxLength = 100;


                                if (data[newId]) {
                                    if (topPosition > Ender_Top_Position3) {
                                        if (num3 == undefined) {
                                            num3 = i;
                                            Cmp_obj.table3_last_index = i;
                                            Cmp_obj.next_page = true;
                                        }
                                    } else {

                                        if (maxLength != null && data[newId].length > maxLength) {



                                            Count = getWordWrapLineCount(data[newId], maxLength);


                                        }
                                        if (topPosition + (Count * 20) > Ender_Top_Position3) {//checking before printing
                                            if (num3 == undefined) {
                                                num3 = i;
                                                Cmp_obj.table3_last_index = i;
                                                Cmp_obj.next_page = true;
                                            }
                                        }

                                        else if (newId == "image") {
                                            // html += `<img src="${data[newId]}" alt="Your Image" class="custom-image" style="position: absolute; top: ${topPosition}px; left: ${leftPosition}px; width:10mm;height:10mm;>`;
                                            html += `<img src="${data[newId]}" alt="Your Image" class="custom-image" style="position: absolute; top: ${topPosition}px; left: ${leftPosition}px; width:5mm;height:5mm;>`;
                                        } else {
                                            // html += `<p style="overflow-wrap:break-word;hyphens: auto; position: absolute; top: ${topPosition}px; left: ${leftPosition}px;color: black; width:${ElementWidth}px; overflow: hidden; margin-top: 0px;">${data[newId]}</p>`;
                                            html += ` <p style="position: absolute; top: ${topPosition}px; left: ${leftPosition}px;color: black; width:${ElementWidth}px; font-size:${fontsize};font-family:${fontfamily};text-align:${txtalign}; overflow:auto ; margin-top: 0px;">${data[newId]} </p>`;

                                        }
                                    };
                                };
                            });

                        }
                        if (i == InvoiceData.table3Data.length - 1 && SObj.table3_last_index == Cmp_obj.table3_last_index) {
                            Cmp_obj.table3_last_index = i + 1;



                        }
                    });
                    //console.log(html, 'html>>>---');
                    cmp_div.insertAdjacentHTML('beforeend', html);
                };
            }
            };
            //Final Fill
            //if () {

            //}

        return { Cmp_obj, cmp_div };
    }

    function CmpSum_Binddata(cmp_div, Cmp_obj) {

        debugger
        Cmp_obj.next_page = false;
        var SObj = { ...Cmp_obj };


        const childElements = cmp_div.querySelectorAll('[id]');
        // Separate IDs based on the "PT_" prefix
        const ptPrefixIds = [];
        const otherIds = [];
        childElements.forEach(child => {
            if (child.id.startsWith('PT_')) {
                ptPrefixIds.push(child.id);
            } else {
                otherIds.push(child.id);
            }
        });
        // Display the separated lists
        ptPrefixIdsArray2 = [];
        ptPrefixIds.forEach((d, i) => {
            const targetElement = cmp_div.querySelector("#" + d);
            const leftPosition = targetElement.offsetLeft;
            const elementWidth = targetElement.offsetWidth;
            ptPrefixIdsArray2.push({ id: d, left: leftPosition, width: elementWidth });
            if (targetElement) {
                cmp_div.removeChild(targetElement);
            };
        })
        const idsToRemove = ["ptableMarkerStarter", "ptableMarkerEnder", "ptable2MarkerStarter", "ptable2MarkerEnder", "ptable3MarkerStarter", "ptable3MarkerEnder"];
        otherIds.forEach((data, index) => {
            let element = cmp_div.querySelector("#" + data);
            if (data == "ptableMarkerStarter" || data == "ptableMarkerEnder" || data == "ptable2MarkerStarter" || data == "ptable2MarkerEnder" || data == "ptable3MarkerStarter" || data == "ptable3MarkerEnder") {
            } else {
                if (data == 'logoImage') element.src = InvoiceData[data];
                else element.innerText = InvoiceData[data];
            }
        });
        let startPoint = cmp_div.querySelector("#ptableMarkerStarter");
        let startEnd = cmp_div.querySelector("#ptableMarkerEnder");
        let startPoint2 = cmp_div.querySelector("#ptable2MarkerStarter");
        let startEnd2 = cmp_div.querySelector("#ptable2MarkerEnder");
        let startPoint3 = cmp_div.querySelector("#ptable3MarkerStarter");
        let startEnd3 = cmp_div.querySelector("#ptable3MarkerEnder");
        let Starter_Top_Position = 0; let Ender_Top_Position = 0; let Starter_Top_Position2 = 0; let Ender_Top_Position2 = 0; let Starter_Top_Position3 = 0; let Ender_Top_Position3 = 0;
        if (startPoint) Starter_Top_Position = startPoint.offsetTop;
        if (startEnd) Ender_Top_Position = startEnd.offsetTop;
        if (startPoint2) Starter_Top_Position2 = startPoint2.offsetTop;
        if (startEnd2) Ender_Top_Position2 = startEnd2.offsetTop;
        if (startPoint3) Starter_Top_Position3 = startPoint3.offsetTop;
        if (startEnd3) Ender_Top_Position3 = startEnd3.offsetTop;
        idsToRemove.forEach(id => {
            const elementToRemove = cmp_div.querySelector("#" + id);
            if (elementToRemove) {
                cmp_div.removeChild(elementToRemove);
            };
        });
        if (ptPrefixIdsArray2.length > 0) {

            if (InvoiceData.table2Data) {
                debugger;
                if (InvoiceData.table2Data.length > 0) {
                    let html = "";
                    let topPosition = 0;
                    var num2;
                    InvoiceData.table2Data.forEach((data, i) => {
                        if (i >= Cmp_obj.table2_last_index) {
                            if (i == Cmp_obj.table2_last_index) {
                                topPosition += Starter_Top_Position2;
                            } else {
                                if (data.subline) { topPosition += 13 } else { topPosition += 30 }
                            };
                            ptPrefixIdsArray2.forEach((data2, i2) => {
                                const newId = data2.id.substring(3);
                                if (data.subline) topPosition -= 10;
                                const leftPosition = data2.left;
                                if (data[newId]) {
                                    if (topPosition >= Ender_Top_Position2) {
                                        if (num2 == undefined) {
                                            num2 = i;
                                            Cmp_obj.table2_last_index = i;
                                            Cmp_obj.next_page = true;
                                        }
                                    } else {
                                        if (newId == "image") {
                                            html += `<img src="${data[newId]}" alt="Your Image" class="custom-image" style="position: absolute; top: ${topPosition}px; left: ${leftPosition}px; width:10mm;height:10mm;>`;
                                        } else {
                                            html += `<p style="position: absolute; top: ${topPosition}px; left: ${leftPosition}px;color: black; margin-top: 0px;">${data[newId]}</p>`;
                                        };
                                    }
                                }
                            });
                        }
                        if (i == InvoiceData.table2Data.length - 1 && SObj.table2_last_index == Cmp_obj.table2_last_index) {
                            Cmp_obj.table2_last_index = i + 1;
                        }
                    });
                    // console.log(html, 'html>>>---');
                    cmp_div.insertAdjacentHTML('beforeend', html);
                };
            }
        };
        return { Cmp_obj, cmp_div };
    }

    ClrTempDesign = (cmp_div) => {

        debugger
        //Cmp_obj.next_page = false;
        //var SObj = { ...Cmp_obj };


        const childElements = cmp_div.querySelectorAll('[id]');
        // Separate IDs based on the "PT_" prefix
        const ptPrefixIds = [];
        const otherIds = [];
        childElements.forEach(child => {
            if (child.id.startsWith('PT_')) {
                ptPrefixIds.push(child.id);
            } else {
                otherIds.push(child.id);
            }
        });
        // Display the separated lists
        ptPrefixIdsArray2 = [];
        ptPrefixIds.forEach((d, i) => {
            const targetElement = cmp_div.querySelector("#" + d);
            const leftPosition = targetElement.offsetLeft;
            const elementWidth = targetElement.offsetWidth;
            ptPrefixIdsArray2.push({ id: d, left: leftPosition, width: elementWidth });
            if (targetElement) {
                if (targetElement.id == 'PT_TotalAmount') {
                    targetElement.innerText = '---//---'
                    //targetElement.innerText = 'PTO '
                    targetElement.innerText.bold()
                    /*targetElement.align = 'center'*/
                    targetElement.offsetTop = targetElement.offsetTop-20
                }
                else    cmp_div.removeChild(targetElement);
            };
        })
        const idsToRemove = ["ptableMarkerStarter", "ptableMarkerEnder", "ptable2MarkerStarter", "ptable2MarkerEnder", "ptable3MarkerStarter", "ptable3MarkerEnder"];
        //otherIds.forEach((data, index) => {
        //    let element = cmp_div.querySelector("#" + data);
        //    if (data == "ptableMarkerStarter" || data == "ptableMarkerEnder" || data == "ptable2MarkerStarter" || data == "ptable2MarkerEnder" || data == "ptable3MarkerStarter" || data == "ptable3MarkerEnder") {
        //    } else {
        //        element.innerText = InvoiceData[data];
        //    }
        //});
        let startPoint = cmp_div.querySelector("#ptableMarkerStarter");
        let startEnd = cmp_div.querySelector("#ptableMarkerEnder");
        let startPoint2 = cmp_div.querySelector("#ptable2MarkerStarter");
        let startEnd2 = cmp_div.querySelector("#ptable2MarkerEnder");
        let startPoint3 = cmp_div.querySelector("#ptable3MarkerStarter");
        let startEnd3 = cmp_div.querySelector("#ptable3MarkerEnder");
        let Starter_Top_Position = 0; let Ender_Top_Position = 0; let Starter_Top_Position2 = 0; let Ender_Top_Position2 = 0; let Starter_Top_Position3 = 0; let Ender_Top_Position3 = 0;
        if (startPoint) Starter_Top_Position = startPoint.offsetTop;
        if (startEnd) Ender_Top_Position = startEnd.offsetTop;
        if (startPoint2) Starter_Top_Position2 = startPoint2.offsetTop;
        if (startEnd2) Ender_Top_Position2 = startEnd2.offsetTop;
        if (startPoint3) Starter_Top_Position3 = startPoint3.offsetTop;
        if (startEnd3) Ender_Top_Position3 = startEnd3.offsetTop;
        idsToRemove.forEach(id => {
            const elementToRemove = cmp_div.querySelector("#" + id);
            if (elementToRemove) {
                cmp_div.removeChild(elementToRemove);
            };
        });

        return { cmp_div };
    };

</script>



