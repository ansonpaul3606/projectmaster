

@*----------------------------------------------------------------------
    Created By	: Kavya K
    Created On	: 23/01/2023
    Purpose		: Sales Return
    -------------------------------------------------------------------------
    Modification
    On			By					OMID/Remarks
    -------------------------------------------------------------------------
    -------------------------------------------------------------------------*@



@model PerfectWebERP.Models.SalesReturnModel.SalesReturnView
<style>
</style>

<div class="card ">

    <div class="card-header">
        <h4 class="card-title col-12">@ViewBag.PageTitle</h4>
        <span title="To View List" onclick="fn_showListView();"><svg id="Layer_1" class="layer" stroke="currentColor" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" height="20" width="20" viewBox="0 0 122.88 122.54"><title>To View List</title><path class="viewlst" d="M4.69,0H46.22a4.71,4.71,0,0,1,4.69,4.69V46a4.69,4.69,0,0,1-4.69,4.69H4.69a4.65,4.65,0,0,1-3.31-1.38l-.09-.09A4.67,4.67,0,0,1,0,46V4.69A4.71,4.71,0,0,1,4.69,0ZM89.44,61.94a26.56,26.56,0,0,1,10.18,2l.07,0a26.61,26.61,0,0,1,15.25,32.16,26.18,26.18,0,0,1-2.7,6.11l10.3,11.24a1.27,1.27,0,0,1-.07,1.8l-7.57,6.9a1.27,1.27,0,0,1-1.79-.07l-9.86-10.85a26.36,26.36,0,0,1-6.1,2.74,26.87,26.87,0,0,1-7.71,1.13,26.51,26.51,0,0,1-10.17-2l-.07,0A26.64,26.64,0,0,1,64.85,78.37l0-.07A26.6,26.6,0,0,1,89.44,61.94Zm15,11.59a21.38,21.38,0,0,0-6.89-4.61l-.06,0a21.22,21.22,0,0,0-23.07,4.64l-.07.07a21.25,21.25,0,0,0-4.54,6.83l0,.06a21.32,21.32,0,0,0-1.58,8.06,21.26,21.26,0,0,0,29.35,19.62,21.54,21.54,0,0,0,6.89-4.61l.07-.07a21.09,21.09,0,0,0,4.54-6.83l0-.06a21.35,21.35,0,0,0,0-16.17,21.34,21.34,0,0,0-4.62-6.9ZM4.69,63.2H46.22a4.71,4.71,0,0,1,4.69,4.7v41.34a4.68,4.68,0,0,1-4.69,4.69H4.69A4.69,4.69,0,0,1,0,109.24V67.9a4.71,4.71,0,0,1,4.69-4.7ZM68.78,0h41.53A4.71,4.71,0,0,1,115,4.69V46a4.71,4.71,0,0,1-4.69,4.69H68.78A4.71,4.71,0,0,1,64.09,46V4.69a4.69,4.69,0,0,1,1.37-3.31l.1-.09A4.67,4.67,0,0,1,68.78,0Z"></path></svg></span>
    </div>
    <div class="card-body">
        <form id="" class="form-valide" perfect-class="form" action="#" method="post" perfect-onFormSuccess="">
            <div class="">
                @Html.AntiForgeryToken()
                <div class="row">
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Return Date</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="hidden" class="form-control" perfect-class="formGroupControl" name="ID_SalesReturn" id="ID_SalesReturn" />
                                <input type="hidden" name="FK_Branch" id="FK_Branch" value="@ViewBag.FK_Branch" />
                                <input type="date" class="form-control perfectValidate_date" name="ReturnDate" perfect-class="formGroupControl" max="2050-01-01" perfect-ctype="date" perfect-css="date" onchange="datecheck(this)" />
                                <div class="invalid-feedback animated fadeInUp limit-check" style="display: block;"></div>
                                <div class="text-danger temptableError" style="display: block;"></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Return Type</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <div class="input-group">

                                    <input type="hidden" name="ImportID" />
                                    <select class="form-control perfectValidate_string" name="Returntype" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" onchange="fn_itemSelect(this),CustomerReset(this)">
                                        @*<option value="0" >Please Select</option>*@
                                        <option value="1" >Bill Wise</option>
                                        <option value="2">Item Wise</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4 DivInvoiceNo">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Invoice No</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <input type="text" class="form-control " placeholder="" name="SalInvoiceNo" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" maxlength="18" onchange="fun_searchInvoiceNo(this)" Function="2" readonly/>
                                    <input type="hidden" name="SalesID" class="form-control" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                    <input type="hidden" name="FK_Stock" class="form-control" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                    <input type="hidden" name="FK_Customer" perfect-ctype="hidden" />
                                    <div class="input-group-append">
                                        <button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" onclick="fn_searchInvoiceNo(this)" BindName="SalInvoiceNo" BindVal="SalInvoiceNo" perfect-css="button" Function="2"></button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4 DivInvoiceDate">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Invoice Date</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="hidden" name="SalesID" perfect-ctype="hidden" />
                                <input type="date" class="form-control " name="SalBillDate" perfect-class="formGroupControl" max="2050-01-01" perfect-ctype="date" perfect-css="date" readonly />

                            </div>
                        </div>
                    </div>

                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Customer<span class="text-danger" id="CustomerValid">*</span></span>

                            </label>
                            <div class="col-sm-8">
                                <input type="hidden" name="FK_Customer" perfect-ctype="hidden" />
                                <div class="input-group">
                                    <input type="text" class="form-control " name="CustomeName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" maxlength="150" readonly />
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Reference No</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <input type="text" name="SalReferenceNo" class="form-control perfectValidate_string" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" maxlength="20"/>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4" hidden>
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Bill Type</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <input type="hidden" name="ImportID" />
                                    <select class="form-control" name="Returntype" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" onchange="fn_imports(this)">
                                        <option value="1" selected>Bill Wise</option>
                                        @*<option value="2">Purchase Wise</option>*@
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row" id="DivProductDetails" >
                <div class="col-sm-12">
                    <div class="daccordion__header">
                        <span class="accordion__header--text">Product Details</span>
                    </div>

                    <br />
                    <div class="row" id="">

                        <div class="col-sm-3">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    <span perfect-class="formGroupLabel">Product Criteria</span>
                                    <span class="text-danger">*</span>
                                </label>
                                <div class="col-sm-8">
                                    <div class="input-group">
                                        <select class="form-control" name="ProductCriteria" perfect-tempTable-Sales="ProductCriteria" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" onchange="fn_ShowProductButton(this)">
                                            <option value="1">Stock List</option>
                                            <option value="2">Product List</option>
                                        </select>
                                    </div>
                                    <span class="temptableError"></span>
                                </div>
                            </div>
                        </div>

                        <div class="col-sm-3">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    <span perfect-class="formGroupLabel">Product</span>
                                    <span class="text-danger">*</span>
                                </label>
                                <div class="col-sm-8">
                                    <div class="input-group">
                                        <input type="text" class="form-control " perfect-tempTable-Sales="ProName" name="ProName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled />
                                        <input type="hidden" name="ProductID" perfect-tempTable-Sales="ProductID" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                        <input type="hidden" name="StockId" perfect-tempTable-Sales="StockId" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                        <input type="hidden" name="CrntQnty" perfect-tempTable-Sales="CrntQnty" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                        <div class="input-group-append">
                                            <button id="ProductButton" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchVal(this,40,'Product Details',[],SalesReturnTransMode)" Criterea1="0" Criterea2="0" BindName="ProName" BindVal="ProductID" Function="1"></button>
                                            <button id="ProductStock" name="prdbtn" class="btn btn-primary fa fa-search" type="button" onclick="GetCmnPopUpSearchValAssign(this, 131, 'Product Details', [], ['MRPs','SalePrice','StockId','Department','CrntQnty'],SalesReturnTransMode)" BindName="ProName" BindVal="ProductID" Criterea1="0" Criterea2="0" perfect-css="button" Function="1" ></button>
                                        </div>
                                        <span class="temptableError"></span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="col-sm-3"  id="showunit">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    <span perfect-class="formGroupLabel"> Unit </span>
                                    <span class="text-danger">*</span>
                                </label>
                                <div class="col-sm-8">
                                    <div class="input-group">
                                        <select class="form-control" perfect-tempTable-Sales="ID_Unit"  name="ID_Unit" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" onchange="ItemTotalCalculation(this)">
                                            <option value="0">Master Unit </option>
                                            @*<option value="1">Test</option>*@
                                            @if (!(Model.UnitList is null))
                                            {
                                                foreach (var unit in Model.UnitList)
                                                {
                                                    <option value="@unit.ID_Unit" UnitCountS="@unit.UnitCount">@unit.UnitName</option>
                                                }
                                            }

                                        </select>
                                      
                                    </div>
                                    <span class="temptableError"></span>
                                </div>
                            </div>
                        </div>






                        <div class="col-sm-3">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    <span perfect-class="formGroupLabel">Quantity </span>
                                    <span class="text-danger">*</span>
                                </label>
                                <div class="col-sm-8">
                                    <div class="input-group">
                                        <input type="text" class="form-control text-right" perfect-tempTable-Sales="SpdSalQuantity" placeholder="" id="SpdSalQuantity" oninput="decimalpnt(this,'SpdSalQuantity',4)" name="SpdSalQuantity" onchange="ItemTotalCalculation(this)" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" min="0" maxlength="13" />
                                    </div>
                                    <span class="temptableError"></span>
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-3">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    <span perfect-class="formGroupLabel">MRP</span>
                                </label>
                                <div class="col-sm-8">
                                    <div class="input-group">
                                        <input type="text" class="form-control text-right" perfect-tempTable-Sales="MRPs" name="MRPs" id="MRPs" oninput="decimalpnt(this,'MRPs',3)" onchange="CalcuateDiscountAmount(this)" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" min="0" maxlength="12" />
                                    </div>
                                    <span class="temptableError"></span>
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-3">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    <span perfect-class="formGroupLabel">Sale Price</span>
                                    <span class="text-danger">*</span>
                                </label>
                                <div class="col-sm-8">
                                    <div class="input-group">
                                        <input type="text" class="form-control text-right" perfect-tempTable-Sales="SalePrice" name="SalePrice" id="SalePrice" oninput="decimalpnt(this,'SalePrice',3)" onchange="CalcuateDiscountAmount(this)" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" min="0" maxlength="12" />

                                    </div>
                                    <span class="temptableError"></span>
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-3">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    <span perfect-class="formGroupLabel">Discount</span>
                                </label>
                                <div class="col-sm-8">
                                    <div class="input-group">
                                        <input type="text" class="form-control text-right" perfect-tempTable-Sales="Discount" name="Discount" id="Discount" oninput="decimalpnt(this,'Discount',3)" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" min="0" maxlength="12" />

                                    </div>
                                    <span class="temptableError"></span>
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-3">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    <span perfect-class="formGroupLabel">Tax </span>
                                </label>
                                <div class="col-sm-8">
                                    <div class="input-group">
                                        <input type="number" class="form-control text-right" perfect-tempTable-Sales="Tax" placeholder="" id="TaxAmount" name="Tax" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled />
                                        <div class="input-group-append">
                                            <button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="BindTaxDetails(this,1)"></button>
                                            <div class="modal fade" perfect-class="formGroupModalTax" id="formGroupModalTax">
                                                <div class="modal-dialog modal-dialog-centered" role="document">
                                                    <div class="modal-content  rounded-0">
                                                        <div class="modal-header border-0">
                                                            <h5 class="modal-title">Tax Details</h5>
                                                            <button type="button" class="close" data-dismiss="modal">
                                                                <span>&times;</span>
                                                            </button>
                                                        </div>
                                                        <table id="zero_config" class="table mb-0  table-striped  text-black">
                                                            <thead class="bg-primary text-white">
                                                                <tr>
                                                                    <th class="t-head">Sl No</th>
                                                                    <th class="t-head" style="Display:none">ProductID</th>
                                                                    <th class="t-head" style="Display:none">FK_TaxType</th>
                                                                    <th class="t-head">TaxType</th>
                                                                    <th class="t-head">Percentage</th>
                                                                    <th class="t-head">Amount</th>
                                                                </tr>
                                                            </thead>
                                                            <tbody class="modal-body" id="formGroupModalTaxbody"></tbody>
                                                            <tfoot>
                                                            </tfoot>
                                                        </table>
                                                        <div class="modal-footer">
                                                            <button type="button" class="btn btn-primary1" data-dismiss="modal" onclick="BindTaxAmount(this)">Ok</button>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <span class="temptableError"></span>
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-3">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    <span perfect-class="formGroupLabel">Total Rate</span>
                                    <span class="text-danger">*</span>
                                </label>
                                <div class="col-sm-8">
                                    <input type="text" class="form-control text-right" id="TotalRate" perfect-tempTable-Sales="TotalRate" oninput="decimalpnt(this,'TotalRate',3)" onchange="CalculateRate(this),TaxchangeonNetpurchase(this)" name="TotalRate" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled min="0" maxlength="12">
                                </div>
                            </div>
                            <span class="temptableError"></span>
                        </div>

                        <div class="col-sm-10">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">&nbsp;</label>
                                <div class="col-sm-8">

                                </div>
                            </div>

                        </div>
                        <div class="col-sm-2 ">
                            <div class="form-group row" perfect-class="formGroup">
                                <div class="col-sm-8">
                                    <div class="input-group">
                                        <div class="text-right">
                                            <button class="btn btn-primary1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" title="Add New Product" onclick="fn_createTable(this,'Sales',['StockId'])"><i class="fa fa-plus" aria-hidden="true"></i></button>
                                            <button class="btn btn-light1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" onclick="productclear(this,'Sales')"><i class="fa fa-refresh" aria-hidden="true"></i></button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="col-sm-3">
                            <input type="hidden" min="0" class="form-control text-right" perfect-tempTable-Sales="UID" name="UID" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                        </div>

                        <div class="col-sm-12 mt-2">
                            <div class="table-responsive" perfect-tempTable="Sales" id="salesReturnHeadItem" perfect-tempTable-lastindex="0" perfect-tempTable-action="0"></div>

                        </div>
                    </div>
                </div>
            </div>

            <div class="row" id="BillWiseReturn">
                <div class="col-sm-12">
                    <div class="daccordion__header">
                        <span class="accordion__header--text">Product Details</span>
                    </div>
                    <br />
                    <div class="table-responsive" perfect-tempTable="SalesReturn" id="Salreturn" style="display:none;">
                        <table class="table table-responsive-lg" id="EMPL">
                            <thead class="btn-primary" id="ReturnHead">
                                <tr>
                                    <th scope="col" style="text-align:center">SL.NO</th>
                                    <th style="display:none; text-align:center"><strong>ProductID</strong></th>
                                    <th scope="col" style="text-align:center">Product</th>
                                   
                                    <th scope="col" style="text-align:right; " class="tbunit">Unit</th>
                                  
                                    <th scope="col" style="text-align:right">Quantity</th>
                                    @*<th scope="col" style="text-align:right">Free</th>*@
                                    @*<th scope="col" style="text-align:right">Act.Qty</th>*@
                                    <th scope="col" style="text-align:right">MRP</th>
                                    <th scope="col" style="text-align:right">Sale Price</th>
                                    <th scope="col" style="text-align:right">Discount</th>
                                    <th scope="col" style="display:none;">FK_Sales</th>
                                    <th scope="col" style="text-align:right">Tax</th>
                                    <th scope="col" style="display:none;">FK_Stock</th>
                                    <th scope="col" style="display:none;">HidQuantity</th>
                                    <th scope="col" style="display:none;">HidTax</th>
                                    <th scope="col" style="display:none;">hidTotal Rate</th>
                                    <th scope="col" style="display:none;">hidunitcount</th>
                                    <th scope="col" style="display:none;">hidincludetax</th>
                                    <th scope="col" style="text-align:right">Total Rate</th>
                                    <th scope="col" style="display:none;">UID</th>

                                    <th scope="col" style="text-align:center"></th>

                                </tr>
                            </thead>
                            <tbody id="SalesReturntbody">
                                <tr id="0">
                                    <td style="text-align:center;" colspan="4">No Records..</td>
                                </tr>

                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="col-sm-3">
                <div class="form-group row" perfect-class="formGroup">

                    <div class="col-sm-8">
                        <div class="input-group">

                            <div class="input-group-append">

                                <div class="modal fade" perfect-class="formGroupModalTaxnew" id="formGroupModalTaxnew">
                                    <div class="modal-dialog modal-dialog-centered" role="document">
                                        <div class="modal-content  rounded-0">
                                            <div class="modal-header border-0">
                                                <h5 class="modal-title">Tax Details</h5>
                                                <button type="button" class="close" data-dismiss="modal">
                                                    <span>&times;</span>
                                                </button>
                                            </div>
                                            <table id="zero_confignew" class="table mb-0  table-striped  text-black">
                                                <thead class="bg-primary text-white">
                                                    <tr>
                                                        <th class="t-head">Sl No</th>
                                                        <th class="t-head" style="Display:none">ProductID</th>
                                                        <th class="t-head" style="Display:none">FK_TaxType</th>
                                                        <th class="t-head">TaxType</th>
                                                        <th class="t-head">Percentage</th>
                                                        <th class="t-head">Amount</th>
                                                    </tr>
                                                </thead>
                                                <tbody class="modal-body" id="formGroupModalTaxnewbody"></tbody>
                                                <tfoot>
                                                </tfoot>
                                            </table>
                                            <div class="modal-footer">
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <span class="temptableError"></span>
                    </div>
                </div>
            </div>
            <hr />
            <div class="row">
                <div class="col-sm-12">
                    <div class="row">
                        <div class="col-sm-4">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    <span perfect-class="formGroupLabel">Total Tax</span>

                                </label>
                                <div class="col-sm-8">
                                    <input type="text" class="form-control text-right" name="SalTotaltax" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled />
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-4">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    <span perfect-class="formGroupLabel">Total Amount</span>

                                </label>
                                <div class="col-sm-8">
                                    <input type="text" class="form-control text-right" name="SalBillTotal" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled />
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-4">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    <span perfect-class="formGroupLabel">Other Charge</span>

                                </label>
                                <div class="col-sm-8">
                                    <div class="input-group">
                                        <input type="text" class="form-control text-right" name="OtherCharge" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly />
                                        <div class="input-group-append">
                                            <button id="addcountry-jq-searchButton3" class="btn btn-primary fa fa-credit-card" type="button" perfect-css="button" onclick="ShowOtherCharges(this,0)"></button>
                                            <div class="modal fade" perfect-class="formGroupModalOtherCharge" id="formGroupModalOtherCharge">
                                                <div class="modal-dialog modal-dialog-centered" role="document">
                                                    <div class="modal-content  rounded-0">
                                                        <div class="modal-header border-0">
                                                            <h5 class="modal-title">Other Charge Details</h5>
                                                            <button type="button" class="close" data-dismiss="modal">
                                                                <span>&times;</span>
                                                            </button>
                                                        </div>
                                                        <div class="modal-body" perfect-class="formGroup" style="max-height: calc(100vh - 200px); overflow-y: auto;padding: 1rem;">
                                                            <table id="zero_configOthercharge" class="table mb-0  table-striped  text-black">
                                                                <thead class="bg-primary text-white">
                                                                    <tr>
                                                                        <th class="t-head">Sl No</th>
                                                                        <th class="t-head" style="display:none">ID_OtherChargeType</th>
                                                                        <th class="t-head">Type</th>
                                                                        <th class="t-head">Trans Type</th>
                                                                        <th class="t-head">Amount</th>

                                                                    </tr>
                                                                </thead>
                                                                <tbody id="formGroupModalOtherChargebody"></tbody>
                                                                <tfoot>
                                                                </tfoot>
                                                            </table>
                                                            <div class="modal-footer">
                                                                <button type="button" class="btn btn-primary1" data-dismiss="modal" onclick="BindOtherChargeAmount(this)">Apply</button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                       
                        <div class="col-sm-4">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    <span perfect-class="formGroupLabel">Discount</span>

                                </label>
                                <div class="col-sm-8">
                                    <input type="text" class="form-control text-right" name="SalDiscount" id="SalDiscount" onchange="RoundOffCalcs(this)" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="decimalpnt(this,'SalDiscount',3)" maxlength="12" />
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-4">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    <span perfect-class="formGroupLabel">Round off</span>

                                </label>
                                <div class="col-sm-8">
                                    <input type="text" class="form-control text-right" name="SalRoundOff" id="SalRoundOff" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" onchange="RoundOffCalcTotal(this)" oninput="decimalpntminus(this,'SalRoundOff',3)" />
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-4">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    <span perfect-class="formGroupLabel">Net Amount</span>

                                </label>
                                <div class="col-sm-8">
                                    <input type="text" class="form-control text-right" name="SalNetAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly />
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-4">
                            <div class="form-group row" perfect-class="formGroup">
                                <label class="col-sm-4 col-form-label">
                                    <span perfect-class="formGroupLabel">Remarks</span>

                                </label>
                                <div class="col-sm-8">
                                    <input type="text" class="form-control perfectValidate_Remarks_nm text-right" name="Remarks" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" maxlength="150"/>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
            </div>

            <div class="card-footer text-right" perfect-class="formFooter">
                <button id="SalesReturnUpdate" type="button" class="btn btn-primary mr-3 addcompany-jq-addnewuserUpdate d-none" name="update" perfect-css="button" onclick="fn_SalesReturnForm_update(this)"><i class="fa fa-refresh fa-spin loaderClass"></i>Update</button>
                <button id="addcompany-jq-addnewuser" type="button" class="btn btn-primary mr-3 " name="add" perfect-css="button" onclick="fn_SalesReturnForm_add(this)"><i class="fa fa-refresh fa-spin loaderClass "></i>Save</button>
                <button type="button" id="prreset" class="btn btn-light" perfect-css="button" onclick="ResetButton(this)" name="reset">Clear</button>
            </div>
        </form>
    </div>
</div>

<script src="~/Scripts/jqDOM/searchDOMCreation.js"></script>
<script>


    $(document).ready(function () {
     
        if (Multiunitsettings == '1') {
            $('#showunit').show();
        }
        else {
            $('#showunit').hide();
        }
        initFunctions('form');
        fn_ShowProductButton();
        fn_itemSelect(this)
    });

    var Quantity;
    var CurrentQuantity;

    function ResetButton(ele) {
        fn_SalesReturn_initialLoad();
    }
    function getfunctionAssign(ele) {
        debugger;
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        CustomerReset(ele);

    }
    var tax = [];
    function CustomerReset(ele) {
        let $thisForm = $('[perfect-class="form"]');
   

        //Getdepartmentdefault();
        tax = [];
        othrchargelst = [];
        OtherCharge = [];
        $("#SalesReturntbody").html('');
        $('#Salreturn').css('display', 'none');

        $thisForm.find('[name="ReturnDate"]').val(moment().format('YYYY-MM-DD'));
        //$thisForm.find('[name="Returntype"]').val("").selectpicker('refresh');
        $thisForm.find('[name="ID_SalesReturn"]').val('');
        $thisForm.find('[name="SalInvoiceNo"]').val('');
        $thisForm.find('[name="SalBillDate"]').val('');
        $thisForm.find('[name="SalReferenceNo"]').val('');
        $thisForm.find('[name="SalesID"]').val('');
        $thisForm.find('[name="SalBillTotal"]').val('');
        $thisForm.find('[name="OtherCharge"]').val('');
        $thisForm.find('[name="SalDiscount"]').val('');
        $thisForm.find('[name="SalRoundOff"]').val('');
        $thisForm.find('[name="Remarks"]').val('');
        $thisForm.find('[name="SalNetAmount"]').val('');
        $thisForm.find('[name="SalTotaltax"]').val('');
        $thisForm.find('[name="CustomeName"]').val('');
    }

    function fun_searchInvoiceNo(ele) {
 
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let SalInvoice = $thisForm.find('[name="SalInvoiceNo"]').val();
        let InputData = {
            __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
            InvoiceNo: $thisForm.find('[name="SalInvoiceNo"]').val(),
            TransMode: SalesReturnTransMode
        };
        $.ajax({
            url: '@Url.Action("GetInvoiceDetails", "SalesReturn")',
            type: "POST",
            data: InputData,
            dataType: "json",
            contentType: "application/x-www-form-urlencoded;charset=utf-8",
            success: function (ajaxOutput) {//<----- if ajax method executed succesfully,  we get the data passed from controller in this variable  => success: function (variable) {
                
                //console.log(ajaxOutput);
                if (ajaxOutput.Data != null) {
                    if (ajaxOutput.Data.length > 0) {
                    
                        $thisForm.find('[name=FK_Customer]').val(ajaxOutput.Data[0].FK_Customer);
                        $thisForm.find('[name=SalesID]').focus().val(ajaxOutput.Data[0].SalesID);
                        $thisForm.find('[name=SalInvoiceNo]').val(ajaxOutput.Data[0].InvoiceNo);
                        $thisForm.find('[name=CustomeName]').val(ajaxOutput.Data[0].CustomerName);
                        $thisForm.find('[name=SalBillDate]').val(moment(ajaxOutput.Data[0].SalInvoiceDate).format('YYYY-MM-DD'));              
                        getfunctioninvoice(ele);
                    }
                }
            }
        });

    }
    var popupempty = 0;
    function getfunctioninvoice(ele)
    {
      
    let $thisForm = $(ele).closest('[perfect-class="form"]');
        //Fun_SalesReturn_LoadUnit(ele, $thisForm.find('[name="SalesID"]').val());
    $thisForm.find('[name="OtherCharge"]').val('');
    othrchargelst = [];
    OtherCharge = [];
        let Invoiceno = $thisForm.find('[name="SalInvoiceNo"]').val();
        let SalesID = $thisForm.find('[name="SalesID"]').val();

        if ($thisForm.find('[name="Returntype"]').val() == 1) {

         InputData =
            {
             FK_Master: SalesID,
             SalesID: SalesID,
                Invoiceno: Invoiceno,
                Mode: 3,
                TransMode: SalesReturnTransMode,

            }
                 $.ajax({
                      url: "@Url.Action("GetSalesReturnFill", "SalesReturn")",
                      type: "Get",
                      data: InputData,
                      dataType: "json",
                      contentType: "application/json",
                     success: function (ajaxOutput) {
                         debugger;
                         console.log('ajaxOutputajaxOutput', ajaxOutput);
                         var CheckListHTML = '';
                         if (ajaxOutput.datresponse.Process.IsProcess)
                            {
                             console.log(ajaxOutput.datresponse.Data, 'ajaxOutput.Data');
                             let table = JSON.parse(ajaxOutput.datresponse.Data);
                             let tableunit = JSON.parse(ajaxOutput.MasterUnit.Data);
                                $('#Salreturn').show();
                                let options = ''
                               
                                let $dropdownservice = '<select class="form-control">' + options + '</select>';
                                if (table.dtable.length > 0) {

                                    $.each(table.dtable, function (i, value) {
                                        var list;
                                        debugger
                                       
                                        //let $dropdownservice = '<select class="form-control" name="selector" id="selector" disabled="disabled"></select>';
                                        let rowCount = (i + 1);
                                        CheckListHTML += "<tr Class='jq_ID_tr' id='test_" + rowCount + "'>";
                                        CheckListHTML += "<td style='text-align:center'>" + value.SlNo + "</td>";
                                        CheckListHTML += "<td Class='jq_productId' Style='Display:none'>" + value.ProductID + "</td>";
                                        CheckListHTML += "<td Class='jq_Type_td' style='text-align:center'>" + value.ProName + "</td>";
                                        if (tableunit.dtable.length > 0) {
                                            var list = "";
                                            $.each(tableunit.dtable, function (i, value) {

                                                list += '<option value="' + value.FK_Unit + '" data-UnitCountS="' + value.UnitCount + '">' + value.UnitName + '</option>';

                                                
                                            });

                                        }

                                        if (Multiunitsettings == '1') {
                                            CheckListHTML += "<td class='jq_Unit_td' style='text-align:right'><div class='input-group'><select class='form-control remove-top-bottom-margin valid productselectClass' id='opdrp_" + value.ID_SalesProductDetails + "' name='Unit' productID='" + value.ProductID + "'  onchange='fncheckUnit(this)' >  </select> <div class='input-group-append'> </div></div></td></td>";
                                        }
                                        else {
                                            CheckListHTML += "<td class='jq_Unit_td' style='text-align:right ; display:none'><div class='input-group'><select class='form-control remove-top-bottom-margin valid productselectClass' id='opdrp_" + value.ID_SalesProductDetails + "' name='Unit' productID='" + value.ProductID + "'  onchange='fncheckUnit(this)' >  </select> <div class='input-group-append'> </div></div></td></td>";
                                        }
                                        CheckListHTML += "<td Class='jq_quantity_td' style='text-align:right'><input type='text' class='form-control text-right' name='qty' id='quantity' onchange='fncheckquantity(this)' oninput='decimalpnt(this,'quantity${i},4)' onkeypress='return isNumberKey(event)' value='" + (value.SpdSalQuantity) + "' min='0'  maxlength='13'' /></td></td>";
                                      
                                        CheckListHTML += "<td class='jq_MRP_td' style='text-align:right'>" + (value.MRPs) + "</td>";
                                        CheckListHTML += "<td class='jq_salesprice_td' style='text-align:right'>" + (value.SalePrice) + "</td>";
                                        CheckListHTML += "<td class='jq_salesdiscount_td' style='text-align:right'>" + (value.Discamt) + "</td>";
                                        CheckListHTML += "<td Class='jq_FK_Sales_td' Style='Display:none'>" + value.FK_Sales + "</td>";
                                        /*CheckListHTML += "<td Class='jq_Tax_td' style='text-align:right'>" + (value.TaxAmount).toFixed(2) + "</td>"*/
                                        CheckListHTML += "<td class='jq_Tax_td' style='text-align:right'><div class='input-group'><input type='text'  class='form-control text-right' perfect-class='formGroupControl'   value='" + (value.TaxAmount) + "' maxlength='13' readonly><div class='input-group-append'><button type='button' id='showtaxbutton' class='btn btn-primary fa fa-search' onclick='ShowTaxDetails(this,1)'></button> </div></div></td></td>";
                                        CheckListHTML += "<td Class='jq_FK_STOCK_td'  Style='Display:none'>" + value.FK_Stock + "</td>";
                                        CheckListHTML += "<td Class='jq_quantity_td_hid' Style='Display:none'>" + (value.SpdSalQuantity) + "</td>";
                                        CheckListHTML += "<td Class='jq_Tax_td_hid' Style='Display:none'>" + (value.TaxAmount) + "</td>";
                                        CheckListHTML += "<td Class='jq_TotalAmount_td_hid'  Style='Display:none'>" + (value.NetAmt) + "</td>";
                                        CheckListHTML += "<td Class='jq_TotalAmount_td'  style='text-align:right'>" + (value.NetAmt) + "</td>";
                                      //CheckListHTML += "<td class='jq_Unit_td' style='text-align:right'><div class='input-group'><input type='text'  class='form-control text-right' perfect-class='formGroupControl'   value='" + (value.ID_Unit) + "' maxlength='13' readonly><div class='input-group-append'><button type='button' id='showMasterUnitbutton' class='btn btn-primary fa fa-search' onclick='ShowMasterUnitDetails(this,1)'></button> </div></div></td></td>";
                                        CheckListHTML += "<td style='text-align:center;'><div class='d-flex'><a href='#' class='btn btnPerfectGrid shadow btn-xs sharp mr-1'onclick='RemoveProductdetails(this)' title='Delete'><i class='fa fa-trash btnPerfectGridDelete'></i></a>";
                                        CheckListHTML += "<td Class='jq_UID'  Style='Display:none'>" + value.SlNo + "</td>";
                                       
                                        //CheckListHTML += "<a href='#' class='btn btn-danger shadow btn-xs sharp mr-1' title='Delete'><i class='fa fa-trash'></i></a></div></td>";
                                        CheckListHTML += "</tr>";
                                       
                                        const tbunitElements = document.querySelectorAll('.tbunit');
                                        
                                        if (Multiunitsettings == '1') {
                                            tbunitElements.forEach(element => {
                                                element.style.display = 'block';
                                            });
                                            
                                        } else {
                                            tbunitElements.forEach(element => {
                                                element.style.display = 'none';
                                            });
                                            
                                        }

                                        //startregion
                                        //if (UserData.length > 0) {
                                        //    $.each(UserData, function (key, data) {

                                        //        var Users = this;
                                        //        var list;
                                        //        var tr = '<tr>';
                                        //        tr += '<td >' + data.SL + '</td>';
                                        //        tr += '<td style="display:none;">' + data.ID_Student + '</td>';
                                        //        tr += '<td> <span> ' + data.StuName + '</td>';
                                        //        tr += '<td >' + data.EnrolmentNo + '</td>';
                                        //        tr += "<td > <input type='checkbox' id='chkStd_" + data.ID_Student + "' name='chkStd_" + data.ID_Student + "' class='chkaddSelect' checked='checked' onchange='fnShowStatus(" + data.ID_Student + ")') /></td>";

                                        //        if (combofillData.length > 0) {
                                        //            var list = "";
                                        //            list += "<option value='0' >-Select Status-</option>";
                                        //            $.each(combofillData, function (key, dataCombo) {
                                        //                list += "<option value=" + dataCombo.ID_Mode + ">" + dataCombo.ModeName + "</option>";
                                        //            });
                                        //        }

                                        //        tr += "<td > <select id='Status_" + data.ID_Student + "'  class='form-control' style='display: none;'>" + list + "</select></td>";
                                        //        tr += '</tr>';
                                        //        $('#tblSemStudentsdetails tbody').append(tr);
                                        //    })
                                        //}
                                        //endregion

                                    });
                                    popupempty = 1;
                                }
                                else {
                                    CheckListHTML += "<div class='form-group col-md-6'>";
                                    CheckListHTML += "<div class='form-check mb-2'>";
                                    CheckListHTML += "<label class='form-check-label' for='check1'>No Records...</label>";
                                    CheckListHTML += "</div></div>"
                                    popupempty = 0;
                                }
                             $("#SalesReturntbody").html(CheckListHTML)
                            
                                //maincalculation(this);
                                calculateTotals(ele);
                                RoundOffCalcs(ele);
                             SRBUnitDropdown('#SalesReturntbody',0);

                            }
                            else {
                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                });
                                $("#SalesReturntbody").html('')
                            }
                        },
                        complete: function () {
                            $(ele).prop('disabled', false);
                            fn_SalesReturn_loadTax(ele, $thisForm.find('[name="SalesID"]').val());
                         
                          
                        }
                    });
    }
    else {
        NotificationMessage({ 'type': 'info', 'heading': 'info', 'message': 'Please Select Return Type' });
    }
    }
  

    function RemoveProductdetails(ele) {
     
        let Productname = $(ele).closest("tr").find("td").eq(2).text().trim();
        let UID = $(ele).closest("tr").find('.jq_UID').text().trim();
        let $tablecontainer = $(ele).closest('[perfect-tempTable]');
        if (confirm("Are you sure you want to delete " + " " + Productname + "?")) {
            var row = $(ele).closest('tr');

            var siblings = row.siblings();

            siblings.each(function (index) {
                $(this).children('td').first().text(index + 1);
            });
            // Removing the current row.
            $(ele).closest('tr').remove();
            calculateTotals($tablecontainer);
            RoundOffCalcs($tablecontainer);
            RemoveTaxArray($tablecontainer, UID);
        }
        else {
            return false;
        }

        //If removed all rows
        var rowcount = document.getElementById('SalesReturntbody').rows.length;
        if (rowcount == 0) {
            //$('#EMPL').css('display', 'none');
            $('#Salreturn').hide();
            let CheckListHTML = '';
            CheckListHTML += "<tr id='0'> <td style='text-align:center;' colspan='6'>No Records..</td> </tr>";
            $('#SalesReturntbody').html(CheckListHTML);
            $("#SalesReturntbody tr").remove();
            fn_SalesReturn_initialLoad();
        }
    }

    function RemoveTaxArray(ele, id) {
     
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        debugger
        let UID = id; /*$('[name=UID]').val();*/

        //console.log('TAX>', tax);

        var foundItems = [];

        $.each(tax, function (key, value) {
            
            foundItems = tax.filter(x => x.UID.toString() == UID.toString());
            //console.log('tax.filter(x => x.UID>', tax.filter(x => x.UID.toString()));

            const indexOfObject = tax.findIndex(object => {
                return object.UID.toString() === UID.toString();
            });

            //console.log('TAXFINDSSSS>', tax);
            //console.log('foundItems length>', foundItems.length);

            tax.splice(indexOfObject, foundItems.length);
        });

        //console.log('TAXDELETE>', tax);

    }

    function fn_SalesReturn_loadTax(element, VALUE) {
  
        let $thisRow = $(this).closest('tr');
        let saveddata = $thisRow.data('pData');
        tax = [];
        let $thisForm = $(element).closest('[perfect-class="form"]');
            let inputData = {
                __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                'FK_Master': VALUE,
            };

            $.ajax({
                url: "@Url.Action("GetSalesReturnTaxFill", "SalesReturn")",
                type: "POST",
                data: inputData,
                dataType: "json",
                contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                success: function (ajaxOutput) {
                   // console.log('sss', ajaxOutput)
                    //let $thisForm = $(ele).find('[perfect-class="form"]');
                    if (ajaxOutput.TaxDetails.Process.IsProcess) {
                       // console.log('TAX DATA>', ajaxOutput.TaxDetails.Data)
                    

                             $thisForm.data({ Returntaxdata: ajaxOutput.TaxDetails.Data});



                        }


                },
                complete: function () {

                    Taxdet(element);

                }

            });

    }

    function Taxdet(ele, Arr) {
       
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        //let $modal = $thisForm.find('#zero_config');

        let savedReturndata = $thisForm.data('Returntaxdata');
        //let tax = [];

        $.each(savedReturndata, function (key, value) {
            let taxinfo = {};
            taxinfo['UID'] = value.UID;
            taxinfo['ProductID'] = value.ProductID;
            taxinfo['FK_TaxType'] = value.FK_TaxType;
            taxinfo['TaxTyName'] = value.TaxtyName;
            taxinfo['TaxPercentage'] = value.TaxPercentage;
            taxinfo['TaxAmount'] = value.TaxAmount;
            taxinfo['FK_Transaction'] = value.FK_Transaction;
            taxinfo['FK_Stock'] = value.FK_Stock;



            tax.push(taxinfo);
        });
      console.log('TAX>', tax);
    }

  
    function calculateTotals(ele) {
     //debugger
     //   debugger
        let $thisForm = $('[perfect-class="form"]');
        //console.log('$thisForm', $thisForm)
        let Tax = 0;
        let TotalRate = 0;
        let ActQt = 0;
        let Netamount = 0;

        let TotalBill = parseFloat($thisForm.find('[name=SalBillTotal]').val());
        TotalBill = isNaN(TotalBill) ? 0 : TotalBill;

        let Othercharg = parseFloat($thisForm.find('[name=OtherCharge]').val());
        Othercharg = isNaN(Othercharg) ? 0 : Othercharg;

        let Discount = parseFloat($thisForm.find('[name=SalDiscount]').val());
        Discount = isNaN(Discount) ? 0 : Discount;

        let Roundoff = parseFloat($thisForm.find('[name=SalRoundOff]').val());
        Roundoff = isNaN(Roundoff) ? 0 : Roundoff;

        let ReturnType =  $thisForm.find('[name="Returntype"]').val();

        if (ReturnType == 1) {
            $('#Salreturn').find('tbody tr').each(function (index, ele) {

                let amount = parseFloat($(ele).find('.jq_Tax_td').find('input').val()) || 0;
                let qty = parseFloat($(ele).find('.jq_quantity_td').find('input').val()) || 0;
                //let unitcount = parseFloat($(ele).find('.jq_unit_count').text()) || 0;
                let freeqt = parseFloat($(ele).find('.free_td').find('input').val()) || 0;
                let totAmt = parseFloat($(ele).find('.jq_TotalAmount_td').text()) || 0;
                let unitcount = $(ele).find('[name="Unit"] option:selected').attr('data-unitcounts');
                TotalRate = TotalRate + totAmt;
                Tax = Tax + amount;
             
                    ActQt = (Multiunitsettings == '1' ? ((qty * unitcount) + (freeqt) ): (qty + freeqt));
              
                parseFloat($(ele).find('.ActQty_td').find('input').val(parseFloat(ActQt).toFixed(3)));
              
            });
        }
        else if (ReturnType == 2) {
            $('#salesReturnHeadItem').find('tbody tr').each(function (index, ele) {
                let netamt = parseFloat($(ele).find('.TotalRate').text() == "" ? 0 : $(ele).find('.TotalRate').text());
                let tax = parseFloat($(ele).find('.Tax').text() == "" ? 0 : $(ele).find('.Tax').text());

                TotalRate = TotalRate + netamt;
                Tax = Tax + tax;
            });
        }

        Netamount = parseFloat(TotalRate) + parseFloat(Othercharg) - parseFloat(Discount);
        $thisForm.find('[name=SalTotaltax]').val(Tax.toFixed(2));
        $thisForm.find('[name=SalBillTotal]').val(TotalRate.toFixed(2));
        $thisForm.find('[name=SalNetamount]').val(parseFloat(Netamount).toFixed(2));


    }
    function decimalpnt(ele, id, range) {
        //console.log(ele, 'ele');
        let input = $('#' + id);

        ele.value = ele.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');
        let t = ele.value;
        ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t;

        $(document).on('keydown', '#' + id, function (event) {

            if (ele.value.includes('.')) {

            }
            var key = event.keyCode || event.charCode;
            if (key == 8 || key == 46) { }
            else {
                if (ele.value.indexOf('.') < 0 && ele.value.indexOf('.') !== 9 && ele.value.length > 8) {
                    ele.value = ele.value + '.';
                }
            }

        });

    }

    function decimalpntminus(ele, id, range) {

        let input = $('#' + id);
        ele.value = ele.value.replace(/[^0-9.-]/g, '').replace(/(\..*)\./g, '$1');
        let t = ele.value;
        ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t;
        input.on('keydown', function () {
            if (ele.value.includes('.')) {

            }
            var key = event.keyCode || event.charCode;
            if (key == 8 || key == 46) { }
            else {
                if (ele.value.length == 9) {
                    ele.value = ele.value + '.';
                }
            }

        });

    }

    function blockSpecialChar(e) {
        var k;
        document.all ? k = e.keyCode : k = e.which;
        return ((k != 46 && k > 31) || (k < 48 && k > 57));
    }

    function isNumberKey(evt) {
        var charCode = (evt.which) ? evt.which : event.keyCode
        if (charCode > 31 && (charCode < 46 || charCode > 57))
            return false;

        return true;
    }

    function RoundOffCalcs(ele) {
        //debugger
        let $thisForm = $('[perfect-class="form"]');

        let Discount = $thisForm.find('[name=SalDiscount]').val() == "" ? "0" : $thisForm.find('[name=SalDiscount]').val();
        var RoundOff = $thisForm.find('[name=SalRoundOff]').val() == "" ? "0" : $thisForm.find('[name=SalRoundOff]').val();
        var totalAmount = $thisForm.find('[name=SalNetAmount]').val() == "" ? "0" : $thisForm.find('[name=SalNetAmount]').val();
        var BillTotal = $thisForm.find('[name=SalBillTotal]').val() == "" ? "0" : $thisForm.find('[name=SalBillTotal]').val();
        var OtherCharges = $thisForm.find('[name=OtherCharge]').val() == "" ? "0" : $thisForm.find('[name=OtherCharge]').val();



        var total = Math.round(parseFloat(OtherCharges) + parseFloat(BillTotal) - parseFloat(Discount)) - (parseFloat(OtherCharges) + parseFloat(BillTotal) - parseFloat(Discount));
        $thisForm.find('[name=SalRoundOff]').val(total.toFixed(2));

        let netat = parseFloat(OtherCharges) + parseFloat(BillTotal) - parseFloat(Discount) + parseFloat(total);
        $thisForm.find('[name=SalNetAmount]').val(netat.toFixed(2));
        $thisForm.find('[name=SalDiscount]').val(parseFloat(Discount).toFixed(2));
    }

    


    function ShowOtherCharges(ele, mode) {
        
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let Othrinfo = [];
        if ($thisForm.data('pOthrChgData')) {


            if ($thisForm.data('pOthrChgData').length > 0) {
                if (otherchgcalled = 0) {
                    othrchargelst = $thisForm.data('pOthrChgData');
                }
            }
        }
        //else {
       // BindChargeDetails("1", 'formGroupModalOtherCharge', ele)
        //}

        BindChargeDetails(ele, mode)

    }
        @*function BindChargeDetails(Mode, ModalID, ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');

        var InputData =
        {
            TransMode: SalesReturnTransMode,
        }


        $.ajax({
            url: "@Url.Action("GetOtherCharges","Purchase")",
            type: "Get",
            data: InputData,
            dataType: "json",
            contentType: "application/json",
            success: function (ajaxOutput) {
                if (ajaxOutput.OtherCharges.Process.IsProcess) {
                         var CheckListHTML = '';

                         if (ajaxOutput.OtherCharges.Data.length > 0) {
                             //---



                             $.each(ajaxOutput.OtherCharges.Data, function (i, value) {
                                 console.log('Transtypelist',ajaxOutput.Transtypelist.Data)

                                 let options = ''
                                 if (othrchargelst != '') {

                                     $.each(othrchargelst, function (key, value1) {

                                         if (value1.ID_OtherChargeType == value.ID_OtherChargeType) {

                                             value.OctyAmount = value1.OctyAmount;
                                             $.each(ajaxOutput.Transtypelist.Data, function (i, valuea) {
                                                 if (valuea.TransTypeID.toString() == value1.OctyTransType) {

                                                     options += '<option value=' + valuea.TransTypeID + ' selected="selected">' + valuea.TransType + '</option>'
                                                 }
                                                 else {
                                                     options += '<option value=' + valuea.TransTypeID + '>' + valuea.TransType + '</option>'
                                                 }
                                             });
                                         }


                                     });

                                 }
                                 else
                                 {

                                     $.each(ajaxOutput.Transtypelist.Data, function (i, valuea) {
                                         options += '<option value=' + valuea.TransTypeID + '>' + valuea.TransType + '</option>'
                                     });
                                     //---

                                 }
                                 console.log('optionsl', options)
                                 let $dropdown = '<select class="form-control"name="selector" id="selector" >' + options + '</select>';
                                 CheckListHTML += "<tr>";
                                 CheckListHTML += "<td>" + value.SlNo + "</td>";
                                 CheckListHTML += "<td Class='jq_ID_OtherChargeType_td' Style='Display:none'>" + value.ID_OtherChargeType + "</td>";
                                 CheckListHTML += "<td Class='jq_Type_td'>" + value.OctyName + "</td>";
                                 CheckListHTML += "<td class='jq_TransType_td'>" + $dropdown + "</td>";
                                 CheckListHTML += "<td class='jq_OtherChagAmnt_td' ><input min='0' id='othamnt' class='form-control text-right' type='text' oninput='decimalpnt(this,othamnt,3,1)' onkeypress='return isNumberKey(event)'  value='" + (value.OctyAmount).toFixed(2) + "' ' /></td> /></td>";

                                 CheckListHTML += "</tr>";
                             })
                         }
                         else {
                             CheckListHTML += "<div class='form-group col-md-6'>";
                             CheckListHTML += "<div class='form-check mb-2'>";
                             CheckListHTML += "<label class='form-check-label' for='check1'>No Records...</label>";
                             CheckListHTML += "</div></div>"
                         }
                         //let $model = createSearchModalDOM();
                         //$model.modal.find('.modal-body').append(CheckListHTML);
                         //$model.show
                    $('#formGroupModalOtherCharge').modal({ backdrop: 'static', keyboard: false })
                    $("#formGroupModalOtherChargebody").html(CheckListHTML)
                    $('#formGroupModalOtherCharge').modal('show');


                        // $thisForm.find('[name=TaxAmount]').val(sum);
                     }
                else {

                    $.each(ajaxOutput.OtherCharges.Process.Message, function (key, value) {
                             NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                         });
                     }
                },
                complete: function () {
                    $(ele).prop('disabled', false);
                    $('select').selectpicker('refresh');
                }
            });
    }*@

       function BindChargeDetails(ele, mode) {

        var InputData =
        {
            TransMode: SalesReturnTransMode,
        }
           

        $.ajax({
            url: "@Url.Action("GetOtherCharges","Sales")",
            type: "Get",
            data: InputData,
            dataType: "json",
            contentType: "application/json",
            success: function (ajaxOutput) {
                if (ajaxOutput.OtherCharges.Process.IsProcess) {
                         var CheckListHTML = '';

                         if (ajaxOutput.OtherCharges.Data.length > 0) {

                             $.each(ajaxOutput.OtherCharges.Data, function (i, value) {

                                 let options = ''
                                     if (othrchargelst != '') {

                                         $.each(othrchargelst, function (key, value1) {

                                             if (value1.ID_OtherChargeType == value.ID_OtherChargeType) {

                                                 value.OctyAmount = value1.OctyAmount;
                                                 $.each(ajaxOutput.Transtypelist.Data, function (i, valuea) {
                                                     if (valuea.TransTypeID.toString() == value1.OctyTransType) {

                                                         options += '<option value=' + valuea.TransTypeID + ' selected="selected">' + valuea.TransType + '</option>'
                                                     }
                                                     else {
                                                         options += '<option value=' + valuea.TransTypeID + '>' + valuea.TransType + '</option>'
                                                     }
                                                 });
                                             }


                                         });

                                     }
                                     else
                                     {

                                         $.each(ajaxOutput.Transtypelist.Data, function (i, valuea) {
                                             options += '<option value=' + valuea.TransTypeID + '>' + valuea.TransType + '</option>'
                                         });
                                         //---

                                     }

                                 let $dropdown = '<select class="form-control"name="selector" id="selector" >' + options + '</select>';
                                 CheckListHTML += "<tr>";
                                 CheckListHTML += "<td>" + value.SlNo + "</td>";
                                 CheckListHTML += "<td Class='jq_ID_OtherChargeType_td' Style='Display:none'>" + value.ID_OtherChargeType + "</td>";
                                 CheckListHTML += "<td Class='jq_Type_td'>" + value.OctyName + "</td>";
                                 CheckListHTML += "<td class='jq_TransType_td'>" + $dropdown + "</td>";
                                 //CheckListHTML += "<td class='jq_OtherChagAmnt_td' ><input min='0'  class='form-control text-right' id='othercharge' onkeypress='return isNumberKey(event)'  oninput='decimalpnt(this, 'othercharge', 3)' type='number'  value='" + value.OctyAmount + "' ' /></td> /></td>";
                                 CheckListHTML += "<td class='jq_OtherChagAmnt_td' ><input min='0'  class='form-control text-right'  type='text'  value='" + value.OctyAmount + "' ' maxlength='12' " + ` id="othercharge" name="othercharge"  oninput="decimalpnt(this,'othercharge',3)"` + "'/></td> /></td>";

                                 CheckListHTML += "</tr>";
                             })
                         }
                         else {
                             CheckListHTML += "<div class='form-group col-md-6'>";
                             CheckListHTML += "<div class='form-check mb-2'>";
                             CheckListHTML += "<label class='form-check-label' for='check1'>No Records...</label>";
                             CheckListHTML += "</div></div>"
                         }
                         //let $model = createSearchModalDOM();
                         //$model.modal.find('.modal-body').append(CheckListHTML);
                         //$model.show

                    $("#formGroupModalOtherChargebody").html(CheckListHTML)

                    if (mode == 0) {
                        $('#formGroupModalOtherCharge').modal({ backdrop: 'static', keyboard: false })
                     $('#formGroupModalOtherCharge').modal('show');
                    }
                    else {

                       $('#formGroupModalOtherCharge').modal('hide');
                    }


                     }
                else {

                    $.each(ajaxOutput.OtherCharges.Process.Message, function (key, value) {
                             NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                         });
                     }
                },
                complete: function () {
                    $(ele).prop('disabled', false);
                  //  $('select').selectpicker('refresh');
                }
            });
            }


    var othrchargelst = "";
    var otherchgcalled = 0;
    function BindOtherChargeAmount(ele) {

        otherchgcalled == 1;

        let $modal = $(ele).closest('.modal');
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let sum = 0;
        othrchargelst = [];
        $modal.find('table tbody').find('tr').each(function () {

            let value = parseFloat($(this).find('.jq_OtherChagAmnt_td').find('input').val());;
            if ($(this).find('.jq_OtherChagAmnt_td').find('input').val() == '' || $(this).find('.jq_OtherChagAmnt_td').find('input').val() == null) {
                value = 0;
            }

            if (parseInt($(this).find('.jq_TransType_td').find('select').val()) == 0) {
                value = value * 0;
            }
            else if (parseInt($(this).find('.jq_TransType_td').find('select').val()) == 1) {
                value = value * -1;
            }
            else {
                value = value * 1;
            }
            sum = parseFloat(sum) + value;

            let othrcharge = {
                ID_OtherChargeType: $(this).find('.jq_ID_OtherChargeType_td').text(),
                OctyTransType: $(this).find('.jq_TransType_td').find('select').val(),
                OctyAmount: parseFloat($(this).find('.jq_OtherChagAmnt_td').find('input').val()) || 0
            };
            othrchargelst.push(othrcharge);


        });

        $thisForm.find('[name=OtherCharge]').val(sum.toFixed(2));

        calculateTotals(ele);
        RoundOffCalcs(ele);
    }

   
    function fn_searchInvoiceNo(ele) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let InvoiceNo = $thisForm.find('[name=SalInvoiceNo]').val();
        let InputData = {
            InvoiceNo: InvoiceNo,
            TransMode: SalesReturnTransMode
        };
           $.ajax({
               //url: '@Url.Action("GetSalesInvoiceSearch", "SalesReturn")?TransMode=' + SalesReturnTransMode,
                    url: "@Url.Action("GetSalesInvoiceSearch", "SalesReturn")",
                    type: "Get",
                    data:InputData,
                    dataType: "json",
                    contentType: "application/json",
                    success: function (successData) {
                        if (successData.Process.IsProcess) {
                            if (successData.Data.length> 0) {
                                var sss = createSelectList({
                                    data: successData.Data,
                                    hideColumn: ['SalesID', 'FK_Customer', 'SalInvoiceDate'],
                                    headingText: 'Sales List',
                                    renameHeader: { "SlNo": "Sl No", "InvoiceNo": "Invoice No", "SrBillDate": "Invoice Date", "CustomerName": "Customer","Address":"Address","MobileNo":"Mobile No" },                                   
                                    isDateType: ['SrBillDate'],
                                });

                                sss.then(function (ret) {
                                    if (ret) {
                                       
                                        $thisForm.find('[name=FK_Customer]').val(ret.FK_Customer);
                                        $thisForm.find('[name=SalesID]').focus().val(ret.SalesID);
                                        $thisForm.find('[name=SalInvoiceNo]').val(ret.InvoiceNo);
                                        $thisForm.find('[name=CustomeName]').val(ret.CustomerName);                                      
                                        $thisForm.find('[name=SalBillDate]').val(moment(ret.SalInvoiceDate).format('YYYY-MM-DD'));                                      
                                        $thisForm.find('[name=OtherCharge]').val(0);
                                        $thisForm.find('[name=SalBillTotal]').val(0);
                                        $thisForm.find('[name=SalDiscount]').val(0);
                                        $thisForm.find('[name=SalRoundOff]').val(0);
                                        $thisForm.find('[name=SalNetAmount]').val(0);
                                        $thisForm.data({ pOthrChgData: [] })
                                                                            
                                        getfunctioninvoice(ele);
                                       
                                    }
                                });
                            }
                        }
                        else {
                            $.each(successData.Process.Message, function (key, value) {
                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                               
                            });
                        }

                    },
                    complete: function () {
                    }
                });
    }
    var SalesReturnDetails = [];

    function fn_SalesReturnForm_add(ele) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');

        let upperlimit = $thisForm.find('[name="ReturnDate"]').val();
        let lowerlimit = $thisForm.find('[name="SalBillDate"]').val();
        let ReturnType = $thisForm.find('[name="Returntype"]').val();
        debugger
        var tbVal = false;
        var isvalids = true;
        var qvalid = true;
        let isValid = true;
        let datevalid = 0;
        let errorclass = '.temptableErrors';
        let salesdetails = [];
        let salesreturn = true;
        if (ReturnType == 2) {
            popupempty = 1;

            var enqDate = new Date(upperlimit);
            enqDate.setHours(0, 0, 0, 0)

            var invDate = new Date(lowerlimit);
            invDate.setHours(0, 0, 0, 0)

            var today = new Date();
            today.setHours(0, 0, 0, 0)


            if (enqDate > today) {
                $thisForm.find('[name="ReturnDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').attr("style", "display:block");
                $thisForm.find('[name="ReturnDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('Return Date should be less than or equal to Todays date');
                isValid = false;
            }
            else {
                $thisForm.find('[name="ReturnDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').attr("style", "display:block");
                $thisForm.find('[name="ReturnDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('');
                isValid = true;
            }

            

        }
        else if (ReturnType == 1) {
            var enqDate = new Date(upperlimit);
            enqDate.setHours(0, 0, 0, 0)

            var invDate = new Date(lowerlimit);
            invDate.setHours(0, 0, 0, 0)

            var today = new Date();
            today.setHours(0, 0, 0, 0)


            if (enqDate > today) {
                $thisForm.find('[name="ReturnDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').attr("style", "display:block");
                $thisForm.find('[name="ReturnDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('Return Date should be less than or equal to Todays date');
                isValid = false;
            }
            else if (invDate > enqDate) {
                $('[name="ReturnDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').attr("style", "display:block");
                $('[name="ReturnDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('Return Date should not less than Invoice date');
                isValid = false;
            }
            //else {
            //    $('[name="ReturnDate"]').closest('[perfect-class="formGroup"]').find(errorclass).attr("style", "display:block");
            //    $('[name="ReturnDate"]').closest('[perfect-class="formGroup"]').find(errorclass).text('');
            //    isValid = true;
            //}
            $('#EMPL').find('tbody tr').each(function (index, ele) {
                var i = 1;
                let tr = $(this);
                if (tr.find(".jq_quantity_td").find('input').val() == "" || tr.find(".jq_quantity_td").find('input').val() == 0) {
                    isvalids = false;
                }
                else if (parseFloat(tr.find(".jq_quantity_td").find('input').val()) > parseFloat(tr.find(".jq_quantity_td_hid").text())) {
                    qvalid = false;
                }
                else {
                    isvalids = true;
                }
                return isvalids;
            });

        }

           

       
            if (isValid == true) {
                if ($thisForm.valid()) {
                    if (ReturnType == 2) {
                        $thisForm.find('[perfect-tempTable="Sales"]').find('tbody').find('tr').each(function () {
                            salesdetails.push($(this).data('pData'));
                        })
                        salesreturn = false;
                        if (salesdetails.length > 0) {
                            salesreturn = true;
                        }
                    }
                    if (salesreturn==true) {
                        if (popupempty == 1) {
                            if (isvalids == true) {
                                if (qvalid == true) {

                                    $(ele).prop('disabled', true);

                                    let TotalAmount;
                                    let Quantity;
                                    let Discount;
                                    SalesReturnDetails = [];
                                    if (ReturnType == 1) {
                                        debugger;
                                        $thisForm.find('[perfect-tempTable="SalesReturn"]').find('tbody').find('tr').each(function () {
                                            let tr = $(this);
                                            TotalAmount = tr.find('.jq_TotalAmount_td').text();
                                            Quantity = (tr.find("td:eq(4)").find('input').val());
                                            Discount = (tr.find('.jq_salesdiscount_td').text());
                                            let SalesPrice = (tr.find('.jq_salesprice_td').text());
                                            let amt = (TotalAmount / Quantity).toFixed(2);
                                            let MRP = (tr.find('.jq_MRP_td').text());

                                            let mrp = (parseFloat(SalesPrice) + parseFloat(Discount));
                                            debugger
                                            console.log(tr.find('.jq_Unit_td').html(), 'ddd');
                                            let ddlunit = tr.find('.jq_Unit_td  option:selected').val();
                                            console.log(ddlunit, 'ddlunit')
                                            //console.log(tr.find('.jq_Unit_td option:selected').val(),'sssasss');
                                            let Salesreturndata = {

                                                FK_Product: tr.find("td:eq(1)").text(),
                                                Product: tr.find("td:eq(2)").text(),
                                                Quantity: (tr.find("td:eq(4)").find('input').val()),
                                                free: tr.find("td:eq(5)").find('input').val(),
                                                ActualQty: tr.find("td:eq(6)").find('input').val(),
                                                SalesPrice: SalesPrice,
                                                FK_Sales: tr.find("td:eq(8)").text(),
                                                MRP: MRP,
                                                Tax: tr.find('.jq_Tax_td').find('input').val(),
                                                FK_Stock: tr.find('.jq_FK_STOCK_td').text(),
                                                Discount: tr.find('.jq_salesdiscount_td').text(),
                                                TotalAmount: tr.find('.jq_TotalAmount_td').text(),
                                                UID: tr.find('.jq_UID').text(),
                                                FK_Unit: Multiunitsettings == '1' ? tr.find('.jq_Unit_td  option:selected').val():"0"
                                            }

                                            SalesReturnDetails.push(Salesreturndata);
                                        });
                                    }
                                    else if (ReturnType == 2) {
                                        $thisForm.find('[perfect-tempTable="Sales"]').find('tbody').find('tr').each(function () {
                                            debugger;
                                            //salesdetails.push($(this).data('pData'));
                                            let ReturnData = $(this).data('pData');
                                            console.log("ITEM WISE DETAILS", $(this).data('pData'))

                                            let Salesreturndata = {
                                                ProductCriteria: ReturnData.ProductCriteria,
                                                FK_Product: ReturnData.ProductID,
                                                Product: ReturnData.ProName,
                                                Quantity: ReturnData.SpdSalQuantity,
                                                free: 0,
                                                ActualQty: ReturnData.SpdSalQuantity,
                                                SalesPrice: ReturnData.SalePrice,
                                                FK_Sales: 0,
                                                MRP: ReturnData.MRPs,
                                                Tax: ReturnData.Tax,
                                                FK_Stock: ReturnData.StockId,
                                                Discount: ReturnData.Discount,
                                                TotalAmount: ReturnData.TotalRate,
                                                UID: ReturnData.UID,
                                                FK_Unit: (Multiunitsettings == '1' ? ReturnData.ID_Unit : "0")
                                            }
                                            SalesReturnDetails.push(Salesreturndata);
                                        });
                                    }


                                    var rowcount = document.getElementById('SalesReturntbody').rows.length;

                                    let $modal2 = $thisForm.find('#zero_configOthercharge');
                                    let OtherCharge = [];
                                    $modal2.find('tbody').find('tr').each(function () {

                                        let OtChargeinfo = {};
                                        OtChargeinfo['ID_OtherChargeType'] = $(this).find('.jq_ID_OtherChargeType_td').text();

                                        OtChargeinfo['OctyTransType'] = $(this).find('.jq_TransType_td').find('select').val();
                                        OtChargeinfo['OctyName'] = $(this).find('.jq_Type_td').text();
                                        OtChargeinfo['OctyAmount'] = $(this).find('.jq_OtherChagAmnt_td').find('input').val();


                                        OtherCharge.push(OtChargeinfo);

                                    });


                                    let inputData = {

                                        __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                                        'TransMode': SalesReturnTransMode,
                                        'SrReturnDate': $thisForm.find('[name="ReturnDate"]').val(),
                                        'FK_Customer': $thisForm.find('[name="FK_Customer"]').val() == "" ? 0 : $thisForm.find('[name="FK_Customer"]').val(),
                                        'FK_Department': '',
                                        'Mode': 'S',
                                        'BillType': 0,
                                        'SrReferenceNo': $thisForm.find('[name="SalReferenceNo"]').val(),
                                        'SrBillNo': $thisForm.find('[name="SalInvoiceNo"]').val(),
                                        'FK_Sales': $thisForm.find('[name="SalesID"]').val() == "" ? 0 : $thisForm.find('[name="SalesID"]').val(),
                                        'FK_Stock': $thisForm.find('[name="FK_Stock"]').val() == "" ? 0 : $thisForm.find('[name="FK_Stock"]').val(),
                                        'SrBillDate': /*$thisForm.find('[name="SalBillDate"]').val(),*/ $thisForm.find('[name="Returntype"]').val() == 1 ? $thisForm.find('[name="SalBillDate"]').val() : $thisForm.find('[name="ReturnDate"]').val(),
                                        'TotalTax': $thisForm.find('[name="SalTotaltax"]').val(),
                                        'SrBillTotal': $thisForm.find('[name="SalBillTotal"]').val(),
                                        'SrOthercharges': $thisForm.find('[name="OtherCharge"]').val(),
                                        'SrDiscount': $thisForm.find('[name="SalDiscount"]').val(),
                                        'SrRoundoff': $thisForm.find('[name="SalRoundOff"]').val(),
                                        'SrNetAmount': $thisForm.find('[name="SalNetAmount"]').val(),
                                        'SrRemarks': $thisForm.find('[name="Remarks"]').val(),
                                        'SalesReturnDetails': SalesReturnDetails,
                                        'OtherChgDetails': OtherCharge,
                                        'TaxDetails': tax,
                                        'LastID': LastID_SalesReturn,
                                        'CustomerName': $thisForm.find('[name="CustomeName"]').val(),
                                        'SrReturnType': $thisForm.find('[name="Returntype"]').val(),

                                    };
                                    console.log('inputdata', inputData);
                                    clearSessionValue(LastIDSessionKey);
                                    $.ajax({
                                        url: "@Url.Action("AddSalesReturn", "SalesReturn")",
                                        type: "POST",
                                        data: inputData,
                                        dataType: "json",
                                        contentType: "application/x-www-form-urlencoded; charset=utf-8",
                                        success: function (ajaxOutput) {

                                            if (ajaxOutput.Process.IsProcess) {

                                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                                    NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                                                });

                                                // Get the value set in form's perfect-onFormSuccess attribute
                                                let onSuccess = $thisForm.attr('perfect-onFormSuccess');

                                                if (onSuccess) {
                                                    window[onSuccess]();
                                                }
                                            }
                                            else {
                                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                                });
                                            }
                                        },
                                        complete: function () {
                                            $(ele).prop('disabled', false);

                                        }

                                    });
                                }
                                else {
                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': "Quantity Should not be greater than Available Quantity" });
                                }

                            }

                            else if (isvalids == false) {


                                let message = "Can't Return Product With 0 Quantity."
                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': message });
                            }
                        }
                        else {

                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'No Sales Record Found' });
                        }
                    }
                    else {
                        NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Please Enter Alteast one Product' });
                    }

                }
                

            }
            //else {

            //    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': "Return Date should  not be less than Invoice date and should be less than or equal to Today's date" });
            //}
        
  

    }
    var SalesPrice = 0;
 // Function to Update SalesReturn
    function fn_SalesReturnForm_update(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');

        let upperlimit = $thisForm.find('[name="ReturnDate"]').val();
        let lowerlimit = $thisForm.find('[name="SalBillDate"]').val();
        let ReturnType = $thisForm.find('[name="Returntype"]').val();

        var tbVal = false;
        var isvalids = true;
        var qvalid = true;
        let isValid = true;
        let datevalid = 0;
        let errorclass = '.temptableErrors';
        let salesdetails = [];
        let salesreturn = true;
        if (ReturnType == 2) {
            popupempty = 1;

            var enqDate = new Date(upperlimit);
            enqDate.setHours(0, 0, 0, 0)

            var invDate = new Date(lowerlimit);
            invDate.setHours(0, 0, 0, 0)

            var today = new Date();
            today.setHours(0, 0, 0, 0)


            if (enqDate > today) {
                $thisForm.find('[name="ReturnDate"]').closest('[perfect-class="formGroup"]').find(errorclass).attr("style", "display:block");
                $thisForm.find('[name="ReturnDate"]').closest('[perfect-class="formGroup"]').find(errorclass).text('Return Date should be less than or equal to Todays date');
                isValid = false;
            }
            else {
                $thisForm.find('[name="ReturnDate"]').closest('[perfect-class="formGroup"]').find(errorclass).attr("style", "display:block");
                $thisForm.find('[name="ReturnDate"]').closest('[perfect-class="formGroup"]').find(errorclass).text('');
                isValid = true;
            }

        }
        else if (ReturnType == 1) {
            var enqDate = new Date(upperlimit);
            enqDate.setHours(0, 0, 0, 0)

            var invDate = new Date(lowerlimit);
            invDate.setHours(0, 0, 0, 0)

            var today = new Date();
            today.setHours(0, 0, 0, 0)


            if (enqDate > today) {
                $thisForm.find('[name="ReturnDate"]').closest('[perfect-class="formGroup"]').find(errorclass).attr("style", "display:block");
                $thisForm.find('[name="ReturnDate"]').closest('[perfect-class="formGroup"]').find(errorclass).text('Return Date should be less than or equal to Todays date');
                isValid = false;
            }
            else if (invDate > enqDate) {
                $thisForm.find('[name="ReturnDate"]').closest('[perfect-class="formGroup"]').find(errorclass).attr("style", "display:block");
                $thisForm.find('[name="ReturnDate"]').closest('[perfect-class="formGroup"]').find(errorclass).text('Return Date should not less than Invoice date');
                isValid = false;
            }
            else {
                $thisForm.find('[name="ReturnDate"]').closest('[perfect-class="formGroup"]').find(errorclass).attr("style", "display:block");
                $thisForm.find('[name="ReturnDate"]').closest('[perfect-class="formGroup"]').find(errorclass).text('');
                isValid = true;
            }

            $('#EMPL').find('tbody tr').each(function (index, ele) {
                var i = 1;
                let tr = $(this);
                if (tr.find(".jq_quantity_td").find('input').val() == "" || tr.find(".jq_quantity_td").find('input').val() == 0) {
                    isvalids = false;
                }
                else if (parseFloat(tr.find(".jq_quantity_td").find('input').val()) > parseFloat(tr.find(".jq_quantity_td_hid").text())) {
                    qvalid = false;
                }
                else {
                    isvalids = true;
                }
                return isvalids;
            });

        }
        if (popupempty == 1) {
            if (isValid == true) {
                if ($thisForm.valid() && isvalids == true) {
                    if (ReturnType == 2) {
                        $thisForm.find('[perfect-tempTable="Sales"]').find('tbody').find('tr').each(function () {
                            salesdetails.push($(this).data('pData'));
                        })
                        salesreturn = false;
                        if (salesdetails.length > 0) {
                            salesreturn = true;
                        }
                    }
                    if (salesreturn==true) {
                        if (qvalid == true) {
                            $(ele).prop('disabled', true);
                            let TotalAmount;
                            let Quantity;
                            let Discount;
                            if (ReturnType == 1) {
                                $thisForm.find('[perfect-tempTable="SalesReturn"]').find('tbody').find('tr').each(function () {
                                    let tr = $(this);
                                    TotalAmount = tr.find('.jq_TotalAmount_td').text();
                                    Quantity = (tr.find("td:eq(4)").find('input').val());
                                    Discount = (tr.find('.jq_salesdiscount_td').text());
                                    SalesPrice = (TotalAmount / Quantity).toFixed(2);
                                    let MRP = (parseFloat(SalesPrice) + parseFloat(Discount));
                                    let Salesreturndata = {

                                        FK_Product: tr.find("td:eq(1)").text(),
                                        Product: tr.find("td:eq(2)").text(),
                                        Quantity: (tr.find("td:eq(4)").find('input').val()),
                                        free: tr.find("td:eq(5)").find('input').val(),
                                        ActualQty: tr.find("td:eq(6)").find('input').val(),
                                        SalesPrice: SalesPrice,
                                        FK_Sales: tr.find("td:eq(8)").text(),
                                        MRP: MRP,
                                        Tax: tr.find('.jq_Tax_td').find('input').val(),
                                        FK_Stock: tr.find('.jq_FK_STOCK_td').text(),
                                        Discount: tr.find('.jq_salesdiscount_td').text(),
                                        TotalAmount: tr.find('.jq_TotalAmount_td').text(),
                                        UID: tr.find('.jq_UID').text(),
                                    }
                                    SalesReturnDetails.push(Salesreturndata);
                                })
                            }
                            else if (ReturnType == 2) {

                                $thisForm.find('[perfect-tempTable="Sales"]').find('tbody').find('tr').each(function () {
                                    //salesdetails.push($(this).data('pData'));
                                    let ReturnData = $(this).data('pData');
                                    console.log("ITEM WISE DETAILS", $(this).data('pData'))

                                    let Salesreturndata = {
                                        ProductCriteria: ReturnData.ProductCriteria,
                                        FK_Product: ReturnData.ProductID,
                                        Product: ReturnData.ProName,
                                        Quantity: ReturnData.SpdSalQuantity,
                                        free: 0,
                                        ActualQty: ReturnData.SpdSalQuantity,
                                        SalesPrice: ReturnData.SalePrice,
                                        FK_Sales: 0,
                                        MRP: ReturnData.MRPs,
                                        Tax: ReturnData.Tax,
                                        FK_Stock: ReturnData.StockId,
                                        Discount: ReturnData.Discount,
                                        TotalAmount: ReturnData.TotalRate,
                                        UID: ReturnData.UID,
                                        ID_Unit: ReturnData.Id
                                    }
                                    SalesReturnDetails.push(Salesreturndata);
                                });

                            }



                            let $modal2 = $thisForm.find('#zero_configOthercharge');
                            othrchargelst;
                            let OtherCharge = [];
                            if (otherchgcalled == 1) {
                                $modal2.find('tbody').find('tr').each(function () {

                                    let OtChargeinfo = {};
                                    OtChargeinfo['ID_OtherChargeType'] = $(this).find('.jq_ID_OtherChargeType_td').text();

                                    OtChargeinfo['OctyTransType'] = $(this).find('.jq_TransType_td').find('select').val();
                                    OtChargeinfo['OctyName'] = $(this).find('.jq_Type_td').text();
                                    OtChargeinfo['OctyAmount'] = $(this).find('.jq_OtherChagAmnt_td').find('input').val();

                                    OtherCharge.push(OtChargeinfo);

                                });
                            }
                            else {
                                OtherCharge = OtherCharge.concat(othrchargelst);
                            }
                            console.log("TAXINFO DATA UPDATE", tax)
                            let inputData = {

                                __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                                'TransMode': SalesReturnTransMode,
                                'ID_SalesReturn': $thisForm.find('[name="ID_SalesReturn"]').val(),
                                'SrReturnDate': $thisForm.find('[name="ReturnDate"]').val(),
                                'FK_Customer': $thisForm.find('[name="FK_Customer"]').val(),
                                'FK_Department': '',
                                'Mode': 'S',
                                'BillType': 0,
                                'SrReferenceNo': $thisForm.find('[name="SalReferenceNo"]').val(),
                                'SrBillNo': $thisForm.find('[name="SalInvoiceNo"]').val(),
                                'FK_Sales': $thisForm.find('[name="SalesID"]').val() == "" ? 0 : $thisForm.find('[name="SalesID"]').val(),
                                'FK_Stock': $thisForm.find('[name="FK_Stock"]').val() == "" ? 0 : $thisForm.find('[name="FK_Stock"]').val(),
                                'SrBillDate': $thisForm.find('[name="Returntype"]').val() == 1 ? $thisForm.find('[name="SalBillDate"]').val() : $thisForm.find('[name="ReturnDate"]').val(),
                                'TotalTax': $thisForm.find('[name="SalTotaltax"]').val(),
                                'SrBillTotal': $thisForm.find('[name="SalBillTotal"]').val(),
                                'SrOthercharges': $thisForm.find('[name="OtherCharge"]').val(),
                                'SrDiscount': $thisForm.find('[name="SalDiscount"]').val(),
                                'SrRoundoff': $thisForm.find('[name="SalRoundOff"]').val(),
                                'SrNetAmount': $thisForm.find('[name="SalNetAmount"]').val(),
                                'SrRemarks': $thisForm.find('[name="Remarks"]').val(),
                                'SalesReturnDetails': SalesReturnDetails,
                                'OtherChgDetails': OtherCharge,
                                'TaxDetails': tax,
                                'LastID': LastID_SalesReturn,
                                'CustomerName': $thisForm.find('[name="CustomeName"]').val(),
                                'SrReturnType': $thisForm.find('[name="Returntype"]').val(),
                            };

                            $.ajax({
                                url: "@Url.Action("UpdateSalesReturn", "SalesReturn")",
                                type: "POST",
                                data: inputData,
                                dataType: "json",
                                contentType: "application/x-www-form-urlencoded; charset=utf-8",
                                success: function (ajaxOutput) {

                                    if (ajaxOutput.Process.IsProcess) {

                                        $.each(ajaxOutput.Process.Message, function (key, value) {
                                            NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                                        });

                                        // Get the value set in form's perfect-onFormSuccess attribute
                                        let onSuccess = $thisForm.attr('perfect-onFormSuccess');

                                        if (onSuccess) {
                                            window[onSuccess]();
                                        }
                                    }
                                    else {
                                        $.each(ajaxOutput.Process.Message, function (key, value) {
                                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                        });
                                    }
                                },
                                complete: function () {
                                    $(ele).prop('disabled', false);

                                }

                            });
                        }
                        else {
                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': "Quantity Should not be greater than Available Quantity" });
                        }
                    }
                    else {
                        NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Please Enter Alteast one Product' });
                    }
 

                }
                else if (isvalids == false) {


                    let message = "Can't Return Product With 0 Quantity."
                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': message });
                }
            }
            else {

                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': "Return Date should not be less than Invoice date and should be less than or equal to Today's date" });
            }
        }
        else {

            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'No Sales Record Found' });
        }

    }

   
    $("#EMPL tbody").on("change", ".jq_quantity_td", function () {
        debugger;
        var row = $(this).closest("tr");
         Quantity = row.find('.jq_quantity_td_hid').text() == "" ? "0" : row.find('.jq_quantity_td_hid').text();
         CurrentQuantity = row.find('.jq_quantity_td').find('input').val() == "" ? "0" : row.find('.jq_quantity_td').find('input').val();
        var ActQty = row.find('.ActQty_td').find('input').val();
        var Free = row.find('.free_td').find('input').val() == "" ? "0" : row.find('.free_td').find('input').val();
        var Totalrate = row.find('.jq_TotalAmount_td_hid').text() == "" ? "0" : row.find('.jq_TotalAmount_td_hid').text();
        var Taxamount = row.find('.jq_Tax_td_hid').text() == "" ? "0" : row.find('.jq_Tax_td_hid').text();
        var UnitCount = row.find('[name="Unit"] option:selected').attr('data-unitcounts');
        var includetax = row.find('.jq_includetax').text() == "" ? "0" : row.find('.jq_includetax').text();
        //SalesPrice = row.find('.jq_salesprice_td').text() == "" ? "0" : row.find('.jq_salesprice_td').text();
       
        var Singlerate = 0;
        var Totalamount = 0;
        var Totalamount = 0;
        var Totaltax = 0;
        var NewActQty = 0;
        var currenttotal = 0;
        var UID = row.find('.jq_UID_td').text();
        if (Quantity != 0) {
            if (includetax == 1) {
                Singlerate = (parseFloat(Totalrate)) / (Multiunitsettings == '1' ? (parseFloat(Quantity) * parseFloat(UnitCount)) : parseFloat(Quantity));
                Totalamount = (parseFloat(Singlerate) * (Multiunitsettings == '1' ? (parseFloat(CurrentQuantity) * parseFloat(UnitCount)): parseFloat(CurrentQuantity)));

                Singletax = (parseFloat(Taxamount) / parseFloat(Quantity));
                Totaltax = (parseFloat(Singletax) * (Multiunitsettings == '1' ? (parseFloat(CurrentQuantity) * parseFloat(UnitCount)) : parseFloat(CurrentQuantity)));
            }
            else {
                Singlerate = (parseFloat(Totalrate) / (Multiunitsettings == '1' ? (parseFloat(Quantity) * parseFloat(UnitCount)) : parseFloat(Quantity)));
                Totalamount = (parseFloat(Singlerate) * (Multiunitsettings == '1' ? (parseFloat(CurrentQuantity) * parseFloat(UnitCount)) : parseFloat(CurrentQuantity)));

                Singletax = (parseFloat(Taxamount) / (Multiunitsettings == '1' ? (parseFloat(Quantity) * parseFloat(UnitCount)) : parseFloat(Quantity)));
                Totaltax = (parseFloat(Singletax) * (Multiunitsettings == '1' ? (parseFloat(CurrentQuantity) * parseFloat(UnitCount)) : parseFloat(CurrentQuantity)));
            }

        }
        NewActQty = (Multiunitsettings == '1' ? ((parseFloat(CurrentQuantity) * parseFloat(UnitCount)) + parseFloat(Free)) : ((parseFloat(CurrentQuantity)+ parseFloat(Free))));
        row.find('.jq_TotalAmount_td').text(Totalamount.toFixed(2));
        //row.find('.jq_Tax_td').find('input').val(Totaltax.toFixed(2));
        row.find('.jq_quantity_td').find('input').val(Number(CurrentQuantity).toFixed(3));
        row.find('.ActQty_td').find('input').val(NewActQty.toFixed(3));

        calculateTotals(this);
        RoundOffCalcs(this);
        ShowTaxDetails(this, 0, UID);
     
    });


    function RateCalculation(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        var $tblrows = $("#EMPL tbody tr");
        //    alert($tblrows);

        var row = $(this).find('SalesReturntbody tbody').find('tr');
         Quantity = row.find('.jq_quantity_td').find('input').val();
        let ActQty = $('#actqty').val();
        let Free = $thisForm.find('[name=free]').val();

        let Totalrate = row.find('.jq_TotalAmount_td').text();
        let Taxamount = row.find('.jq_Tax_td').find('input').val();

        $('#actqty').val();
        $('#free').val();
        $('#quantity').val();
        // alert(Quantity);
      //  console.log('TOTALRATE>', Totalrate);
       // console.log('Taxamount>', Taxamount);

        let Singlerate = (parseFloat(Quantity) / parseFloat(Totalrate));
        let Singletax = parseFloat(Taxamount) / parseFloat(Quantity);
        //alert(Singlerate);
        //alert(Singletax);

    }

    function ShowTaxDetails(ele, mod,ud) {
      
        let $thisForm;
        Taxcalled = 1;
        var row;
         Quantity = 0;
         CurrentQuantity = 0;
        var Totalrate=0;
        var SalesPrice=0;
        var includetax=0;
        let productID;
        var includetaxbit = 0;
       // var taxamount = 0;
        var currenttotal = 0;
        var unitcount = 0;
        if (mod == 1 || mod == 0) {
            row = $(ele).closest("tr");
            var taxamt = row.find('.jq_Tax_td_hid').text() == "" ? "0" : row.find('.jq_Tax_td_hid').text();

            var Quantity = row.find('.jq_quantity_td_hid').text() == "" ? "0" : row.find('.jq_quantity_td_hid').text();
            Totalrate = $(ele).closest("tr").find('.jq_TotalAmount_td').text();
            Quantity = $(ele).closest("tr").find('.jq_quantity_td_hid').text() == "" ? "0" : $(ele).closest("tr").find('.jq_quantity_td_hid').text();
            CurrentQuantity = $(ele).closest("tr").find('.jq_quantity_td').find('input').val();
            SalesPrice = $(ele).closest("tr").find('.jq_salesprice_td').text();          
          
            includetax = $(ele).closest("tr").find('.jq_includetax').text();
            productID = $(ele).closest("tr").find('.jq_productId').text();
            Totalratse = $(ele).closest("tr").find('.jq_TotalAmount_td').text();
            unitcount = $(ele).closest("tr").find('[name="Unit"] option:selected').attr('data-unitcounts');
            //alert($(ele).closest("tr").find('.jq_includetax').text());
        }
        else
        {
            $thisForm = $(ele).closest('[perfect-class="form"]');
            CurrentQuantity = $thisForm.find('[name=SpdSalQuantity]').val();
            SalesPrice = $thisForm.find('[name=SalesPrice]').val();
            unitcount = $thisForm.find('[name="ID_Unit"] option:selected').attr('data-unitcounts');
        }
        includetax = 1;
        let NetAmount = (Multiunitsettings == '1' ? (parseFloat(CurrentQuantity) * parseFloat(unitcount)) * (parseFloat(SalesPrice)) : (parseFloat(CurrentQuantity)  * (parseFloat(SalesPrice))));

        var InputData =
        {
            FK_Product: productID,
            Includetax: 0,
            Amount: NetAmount,
        }

        $.ajax({
            url: "@Url.Action("GetTaxAmountNew", "Sales")",
            type: "Get",
            data: InputData,
            dataType: "json",
            contentType: "application/json",
            success: function (ajaxOutput) {
                     if (ajaxOutput.Process.IsProcess) {
                         var CheckListHTML = '';
                         let sum = 0;
                         if (ajaxOutput.Data.length > 0) {

                     
                             $.each(ajaxOutput.Data, function (i, value) {
                                 sum = sum + parseFloat(value.Amount.toFixed(2));

                                 CheckListHTML += "<tr>";
                                 CheckListHTML += "<td>" + value.SlNo + "</td>";
                                 CheckListHTML += "<td Class='jq_ProductID_td' Style='Display:none'>" + value.ProductID + "</td>";
                                 CheckListHTML += "<td class='jq_taxType_td' Style='Display:none'>" + value.FK_TaxType + "</td>";
                                 CheckListHTML += "<td class='jq_taxTypeName_td'>" + value.TaxTyName + "</td>";
                                 CheckListHTML += "<td class='jq_taxPer_td'>" + value.TaxPercentage + "</td>";
                                 CheckListHTML += "<td class='jq_taxamount_td style='text-align:right' >" + value.Amount.toFixed(2) + "</td>";
                                 CheckListHTML += "</tr>";
                             })

                         }
                         else {
                             CheckListHTML += "<div class='form-group col-md-6'>";
                             CheckListHTML += "<div class='form-check mb-2'>";
                             CheckListHTML += "<input type='checkbox' class='form-check-input' >"
                             CheckListHTML += "<label class='form-check-label' for='check1'>No Records...</label>";
                             CheckListHTML += "</div></div>"
                         }

                         $(ele).closest("tr").find('.jq_Tax_td').find('input').val(sum.toFixed(2));
                         //alert($(ele).closest("tr").find('.jq_Tax_td').find('input').val(sum.toFixed(2)))

                         if (Quantity == 0.00) {

                             var taxamount = $(ele).closest("tr").find('.jq_Tax_td').find('input').val();
                             //alert(taxamount)
                             if (includetax == 1) {
                                 currenttotal = Multiunitsettings == '1' ? (parseFloat(SalesPrice) * (parseFloat(CurrentQuantity) * parseFloat(unitcount))) : (parseFloat(SalesPrice) * (parseFloat(CurrentQuantity) ));
                                 //alert(currenttotal)
                             }
                             else {
                                 //  $(ele).closest("tr").find('.jq_Tax_td').find('input').val(sum.toFixed(2));
                                 currenttotal = Multiunitsettings == '1' ? (parseFloat(taxamount) + (parseFloat(SalesPrice) * (parseFloat(CurrentQuantity) * parseFloat(unitcount)))) : (parseFloat(taxamount) + (parseFloat(SalesPrice) * (parseFloat(CurrentQuantity) ))) ;
                             }
       
                             $(ele).closest("tr").find('.jq_TotalAmount_td').text(parseFloat(currenttotal).toFixed(2));
                             //alert($(ele).closest("tr").find('.jq_TotalAmount_td').text(parseFloat(currenttotal).toFixed(2)))
                             calculateTotals(ele);
                             RoundOffCalcs(ele);

                         }
                         if (includetax == 1) {
                             currenttotal = Multiunitsettings == '1' ? (parseFloat(SalesPrice) * (parseFloat(CurrentQuantity) * parseFloat(unitcount))) : (parseFloat(SalesPrice) * (parseFloat(CurrentQuantity)));
                         }
                         else {
                             currenttotal = Multiunitsettings == '1' ? (parseFloat(sum.toFixed(2)) + (parseFloat(SalesPrice) * (parseFloat(CurrentQuantity) * parseFloat(unitcount)))) : (parseFloat(sum.toFixed(2)) + (parseFloat(SalesPrice) * (parseFloat(CurrentQuantity))));
                         }

                         $(ele).closest("tr").find('.jq_TotalAmount_td').text(parseFloat(currenttotal).toFixed(2));
                         calculateTotals(ele);
                         RoundOffCalcs(ele);
                         $("#formGroupModalTaxnewbody").html(CheckListHTML)

                         if (mod == 1) {
                             $('#formGroupModalTaxnew').modal('show');
                         }
                         else {
                             $('#formGroupModalTaxnew').modal('hide');
                         }

                     }

                     else {
                         $.each(ajaxOutput.Process.Message, function (key, value) {
                             NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                         });
                }

                },
                complete: function () {
                    //$(ele).prop('disabled', false);
                    if (ud != null) {
                        EditTax(ele, ud);
                    }
                }
            });
    }

    function EditTax(ele, uid) {
      //debugger
        let Quantity = $(ele).closest("tr").find('.jq_quantity_td').find('input').val() == "" ? "0" : $(ele).closest("tr").find('.jq_quantity_td').find('input').val();
        let ProductId = $(ele).closest("tr").find('.jq_productId').text();
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let UID;

        if (uid != 0) {
            UID = uid;
        }
        else {
            UID = $('[name=UID]').val();
        }


       // console.log('TAX>', tax);

        var foundItems = [];
        if (Taxcalled == 1) {
            $.each(tax, function (key, value) {
               

                foundItems = tax.filter(x => x.UID.toString() == UID.toString());
                //console.log('tax.filter(x => x.UID>', tax.filter(x => x.UID));

                const indexOfObject = tax.findIndex(object => {
                    return object.UID.toString() === UID.toString();
                });

                //console.log('TAXFINDINDEX>', tax);

                //console.log('foundItemsDATA>', foundItems);

                tax.splice(indexOfObject, foundItems.length);
                //console.log('TAXSPLICED>', tax);
            });


            //$modal.find('tbody').find('tr').each(function () {
            //    //alert($thisForm.find('[name=ProductID]').val());
            //    let taxinfo = {};
            //    taxinfo['UID'] = uid;
            //    taxinfo['ProductID'] = ProductId;
            //    taxinfo['FK_TaxType'] = $(this).find('.jq_taxType_td').text();
            //    taxinfo['TaxTyName'] = $(this).find('.jq_taxTypeName_td').text();
            //    taxinfo['TaxPercentage'] = $(this).find('.jq_taxPer_td').text();
            //    taxinfo['TaxAmount'] = $(this).find('.jq_taxamount_td').text();
            //    console.log('taxinfo', taxinfo);



            //    tax.push(taxinfo);
            //    // alert('TAX DET')
            //});
            //console.log('TAXUPDATEFIND>', tax);

        }

    }

    function checksalespriceTax(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let ProductID = $thisForm.find('[name="FK_Product"]').val();
        let ProName = $thisForm.find('[name="ProName"]').val();
        let UnitID = $thisForm.find('[name="UnitID"]').val();
        let salesprice = $thisForm.find('[name="salesprice"]').val();
        let TaxAmount = $thisForm.find('[name="Tax"]').val();
        let IncludeTax = $thisForm.find('[name="IncludeTax"]').val();
        let SpdSalQuantity = $thisForm.find('[name="Quantity"]').val();

        if (salesprice != "" && (SpdSalQuantity != null || SpdSalQuantity != '') && (UnitID != null || UnitID != '') && (ProductID != null || ProductID != 0 || ProName != '')) {
            ShowTax(ele, 1);
        }
        else if ((salesprice == null || salesprice == '') && (SpdSalQuantity == null || SpdSalQuantity == '') && (UnitID == null || UnitID == '') && (ProductID == null || ProductID == 0 || ProName == '')) {
            NotificationMessage({ 'type': 'error', 'heading': 'Warning', 'message': "Please Select Product" });
        }
        else if ((salesprice == null || salesprice == '') && (SpdSalQuantity == null || SpdSalQuantity == '') && (UnitID == null || UnitID == '')) {
            NotificationMessage({ 'type': 'error', 'heading': 'Warning', 'message': "Please Select Product" });
        }
        else if ((salesprice == null || salesprice == '') && (SpdSalQuantity == null || SpdSalQuantity == '')) {
            NotificationMessage({ 'type': 'error', 'heading': 'Warning', 'message': "Please Enter Quantity" });
        }
        else if (salesprice == null || salesprice == '') {
            NotificationMessage({ 'type': 'error', 'heading': 'Warning', 'message': "Please Enter Sales Price" });
        }

    }


    function fncheckquantity(ele) {
     
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let currentRow = $(ele).closest("tr");

        let qnty = $(currentRow).find('.jq_quantity_td').text() == "" ? "0" : $(currentRow).find('.jq_quantity_td').text(); 
        let qty = $(currentRow).find('.jq_quantity_td_hid').text() == "" ? "0" : $(currentRow).find('.jq_quantity_td_hid').text();
      

      
        let quantity = $(currentRow).find('.jq_quantity_td').find('input').val();
        quantity = quantity + '.000';

   

        let q1 = parseFloat(quantity).toFixed(0);
        let q2 = parseFloat(qty).toFixed(0);

        if (quantity < '1.00') {
            NotificationMessage({ 'type': 'error', 'heading': 'Warning', 'message': "Please Enter quantity greater than 1" });
        }

        if (parseFloat(q1) > parseFloat(q2)) {
            NotificationMessage({ 'type': 'error', 'heading': 'Warning', 'message': "Please Enter quantity less than " + qty });
        }
    }


    function datecheck(ele)
    {
     
        let $thisForm = $(ele).closest('[perfect-class="form"]');
            //invalid-feedback
       

        let RegDate = $thisForm.find('[name="ReturnDate"]').val();
        let lowerlimit = $thisForm.find('[name="SalBillDate"]').val();
        RegDate = new Date(RegDate);
        RegDate.setHours(0, 0, 0, 0)

        var invDate = new Date(lowerlimit);
        invDate.setHours(0, 0, 0, 0)

        let today = new Date();
        today.setHours(0, 0, 0, 0);


        if (RegDate > today)
        {

            $thisForm.find('[name="ReturnDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('Return Date should be less than or equal to Todays date')
            return false;

        }
        else if (invDate > RegDate) {
            $thisForm.find('[name="ReturnDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('Return Date should not less than Invoice date')
            return false;
        }
        else {

            $thisForm.find('[name="ReturnDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('');
            return true;
        }


    }


    //New changes

    function fn_itemSelect(ele) {
        let $thisForm = $('[perfect-class="form"]');
        let ReturnType = $thisForm.find('[name="Returntype"]').val();

        $thisForm.find('[name="ReturnDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').attr("style", "display:block");
        $thisForm.find('[name="ReturnDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('');

        if (ReturnType == 2) {
            debugger;
            $(".DivInvoiceDate").hide();
            $(".DivInvoiceNo").hide();
            $thisForm.find('[name="SalInvoiceNo"]').removeClass('perfectValidate_string');
            $thisForm.find('[name="SalBillDate"]').removeClass('perfectValidate_string');
            $thisForm.find('[name="CustomeName"]').removeClass('perfectValidate_string');
            $("#CustomerValid").text('');
            $('#DivProductDetails').show();
            $('#BillWiseReturn').hide();
            //$('#DivProductDetails *').attr("style", "display:block");
            $thisForm.find('[name="CustomeName"]').attr("readonly", false);
            var VALUE = 0;
           
        }
        else {
            $("#CustomerValid").text('*');
            $thisForm.find('[name="SalInvoiceNo"]').addClass('perfectValidate_string');
            $thisForm.find('[name="SalBillDate"]').addClass('perfectValidate_string');
            $thisForm.find('[name="CustomeName"]').addClass('perfectValidate_string');
            $(".DivInvoiceDate").show();
            $(".DivInvoiceNo").show();
            $('#DivProductDetails').hide();
            $('#BillWiseReturn').show();
            //$('#DivProductDetails *').attr("style", "display:none");
            $thisForm.find('[name="CustomeName"]').attr("readonly", true);
        }
        // clear Product details section
        let $thisform = $(ele).closest('[perfect-class="form"]');
        $thisform.find('[perfect-temptable-Sales]').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-Sales]').closest('[perfect-ctype="select"]').val('').selectpicker('refresh');
        $thisform.find('[perfect-temptable-Sales]').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-Sales]').closest('[perfect-ctype="date"]').val('');
        $thisform.find('[perfect-temptable-Sales]').closest('[perfect-ctype="hidden"]').val('');

        $thisForm.find('[name="ProductCriteria"]').val(1).selectpicker('refresh');

        let $tblcontainer = $thisform.find('[perfect-temptable="Sales"]');
        $tblcontainer.attr('perfect-tempTable-action', 0);
        $tblcontainer.empty();
       
        
    }


    function fn_ShowProductButton() {

        let $thisform = $('[perfect-class="form"]');
        let ProductCriteria = $thisform.find('[name="ProductCriteria"]').val();

        $thisform.find('[perfect-temptable-Sales]').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-Sales]').closest('[perfect-ctype="select"]').val(1).selectpicker('refresh');
        $thisform.find('[perfect-temptable-Sales]').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-Sales]').closest('[perfect-ctype="date"]').val('');
        $thisform.find('[perfect-temptable-Sales]').closest('[perfect-ctype="hidden"]').val('');

        $thisform.find('[name="ProductCriteria"]').val(ProductCriteria);

        if (ProductCriteria == 1) {
            $("#ProductButton").hide();
            $("#ProductStock").show();
            $("#MRPs").prop("readonly", true);
            $("#SalePrice").prop("readonly", true);
            $("#Discount").prop("readonly", true);
        }
        else if (ProductCriteria == 2) {
            $("#ProductStock").hide();
            $("#ProductButton").show();
            $("#MRPs").prop("readonly", false);
            $("#SalePrice").prop("readonly", false);
            $("#Discount").prop("readonly", true);
        }
    }
    function fn_EnableDisble() {

        let $thisform = $('[perfect-class="form"]');
        let ProductCriteria = $thisform.find('[name="ProductCriteria"]').val();


        if (ProductCriteria == 1) {
            $("#ProductButton").hide();
            $("#ProductStock").show();
            $("#MRPs").prop("readonly", true);
            $("#SalePrice").prop("readonly", true);
            $("#Discount").prop("readonly", true);
        }
        else if (ProductCriteria == 2) {
            $("#ProductStock").hide();
            $("#ProductButton").show();
            $("#MRPs").prop("readonly", false);
            $("#SalePrice").prop("readonly", false);
            $("#Discount").prop("readonly", true);
        }
    }
    function CalcuateDiscountAmount(ele) {
        let $thisform = $('[perfect-class="form"]');
        let MRP = $("#MRPs").val() == "" ? "0" : $("#MRPs").val();
        let SalePrice = $("#SalePrice").val() == "" ? "0" : $("#SalePrice").val();
        let Discount = 0;
        if (MRP == 0) {
            Discount = (parseFloat(0));
        }
        else {
            Discount = (parseFloat(MRP) - parseFloat(SalePrice));
        }
        
        $("#Discount").val(parseFloat(Discount).toFixed(2));
        ItemTotalCalculation(ele);
    }

    function ItemTotalCalculation(ele) {
        debugger;
        let $thisform = $('[perfect-class="form"]');

        let SalePrice = $("#SalePrice").val() == "" ? "0" : $("#SalePrice").val();
        let Discount = $("#Discount").val() == "" ? "0" : $("#Discount").val();
        let TaxAmount = $("#TaxAmount").val() == "" ? "0" : $("#TaxAmount").val();
        let Quantity = $("#SpdSalQuantity").val() == "" ? "0" : $("#SpdSalQuantity").val();
        let UnitCount = $('[name="ID_Unit"] option:selected').attr('data-unitcounts');
        if (UnitCount == undefined) {
            UnitCount = 0
        }
        
         
        //let Quantity = parseFloat(isNaN($("#SpdSalQuantity").val()) ? 0 : $("#SpdSalQuantity").val());
        //alert()
        let TotalAmount = Multiunitsettings == '1' ? (parseFloat(SalePrice) * (parseFloat(Quantity) * parseFloat(UnitCount))) : (parseFloat(SalePrice) * (parseFloat(Quantity) )) /*- parseFloat(TaxAmount)*/;
        $("#SpdSalQuantity").val(parseFloat(Quantity).toFixed(3));
        $("#TotalRate").val(parseFloat(TotalAmount).toFixed(2));
        BindTaxDetails(ele, 0);
    }
    function getfunction(ele) {
        debugger;
        let $thisform = $('[perfect-class="form"]');
        let ProductCriteria = $thisform.find('[name="ProductCriteria"]').val();
        Fun_SalesReturn_LoadUnit(ele,0);
        if (ProductCriteria == 1) {
            let $tempArr = $thisform.data('popValueData');
            $("#SalePrice").val(parseFloat($tempArr.SalePrice).toFixed(2));
            $("#MRPs").val(parseFloat($tempArr.MRPs).toFixed(2));
            CalcuateDiscountAmount(ele);
            ItemTotalCalculation(ele);
        }
        BindTaxDetails(ele, 0);
      
    }


    var s = 0;
    function fn_createTable(ele, tkey, uniq = []) {
      
        debugger;
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let tableKey = tkey;
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');

        let insertData = {};
        let tableOptionsTemp = tableOptionsTempOutss;
        let ProductCriteria = $('[name="ProductCriteria"]').val();
        //if (ProductCriteria == 1) {
        uniq = ['StockId']
        //}
        //else {
        //    uniq = ['ProductID']
        //}

        let unique = (uniq) ? uniq : [];

        let isValid = true;
        let errorClass = '.temptableError';

        //make index
        console.log('check 1');

        let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
        let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
        let indexname = tkey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);
        console.log('tableOptionsTemp.rowAttribute', tableOptionsTemp.rowAttribute)
        let updateCond = '';
        let isNew = true;
        if (Multiunitsettings=='0') { 
        let showCoulmn = tableOptionsTemp.onlyShowColumn;

        showCoulmn = showCoulmn.filter(item => item !== "ID_Unit_d");
            tableOptionsTemp.onlyShowColumn = showCoulmn;

            //console.log('tempshow1', showCoulmn)
            //console.log('tempShow2', tableOptionsTemp)
    }


        if (thisactionIndex > 0) {
            //means update
            insertData[indexname] = thisactionIndex;
            updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
            isNew = false;
        }
        else {
            //insert
            insertData[indexname] = lastIndex + 1;
            console.log(insertData[indexname], ' insertData[indexname]');
            $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
            isNew = true;
        }
        //
        if (tableKey == 'Sales') {

            isValid = ValidCheckingSalesReturn(ele, tableKey, errorClass, isValid);
        }

        //if (unique.length > 0) {
        //    //getting previous data
        //    let prevData = [];
        //    $tblcontainer.find('table > tbody').find('tr').each(function () {
        //        if (isNew) {
        //            prevData.push($(this).data('pData'));
        //        }
        //        else {
        //            if (parseInt($(this).attr(indexname)) != thisactionIndex) {
        //                prevData.push($(this).data('pData'));
        //            }

        //        }

        //    })
        //    console.log('previous data', prevData);

        //    unique.forEach(function (key, i) {
        //        console.log('unid -> key:' + key + "| index :" + i);
        //        let $thisEle = $thisForm.find('[perfect-tempTable-' + tableKey + '="' + key + '"]');
        //        // let headerEleName = $thisForm.find('[name="lblProName"]').text();
        //        let atname = $thisEle.attr('name');
        //        let cvalue;
        //        console.log('atname', atname);
        //        console.log('$thisEle.length', $thisEle.length);
        //        if ($thisEle.length != 0) {
        //            console.log('len', $thisEle)
        //            let $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
        //            let errmessage = "";
        //            if (key == "StockId") {
        //                errmessage = "Product Already exists"
        //                $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
        //            }
        //            else if (key == "ProductID") {
        //                errmessage = "Product Already exists"
        //                $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
        //            }
        //            //getting current value in cval
        //            if ($thisEle.is('select')) {
        //                cvalue = $thisEle.val();
        //                //alert(cvalue);
        //            }
        //            else if ($thisEle.is('input')) {

        //                let inputEleType = $thisEle.attr('type').toLocaleLowerCase();

        //                if (inputEleType == 'checkbox') { cvalue = $thisEle.is(':checked'); }
        //                else if (inputEleType == 'hidden') { cvalue = $thisEle.val(); console.log('cvalue ->', cvalue); }
        //                else { cvalue = $thisEle.val(); }
        //            }
        //            else { cvalue = $thisEle.val(); }

        //            //searching in previous data
        //            if (prevData.find(a => a[atname] == cvalue)) {
        //                // console.log('Search =>' + cvalue + '| attr :' + atname)
        //                $errorElement.text(errmessage);
        //                isValid = false;
        //            }
        //        }
        //    });
        //}
        //console.log('isValid', isValid);
        debugger;
        let prevData = [];
        $tblcontainer.find('table > tbody').find('tr').each(function () {
            if (isNew) {
                prevData.push($(this).data('pData'));
            }
            else {
                if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                    prevData.push($(this).data('pData'));
                }

            }

        })
        if (prevData.find(a => a['StockId'] == $('[name=StockId]').val() && a['ProductID'] == $('[name=ProductID]').val())) {
            //NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Product Already Exists' });
            //$thisForm.find('[perfect-tempTable-Sales="ProductID"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('Product Already Exists');
            //isValid = false;
        }
        else {
            $thisForm.find('[perfect-tempTable-Sales="ProductID"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
        }

        if (isValid) {
            if (isNew) {
                if ($('#pupdate').is(":visible")) {
                    let savedPDatas = $thisForm.data('purData');
                    //alert(savedPDatas.length)
                    if (savedPDatas.length > 0 || savedPDatas.length == null || !undefined) {
                        if (s == 0) {
                            cnt = savedPDatas.length + 1;
                            s++;
                        }
                        else {
                            cnt++;
                        }
                    }
                }
                else {
                    cnt++;
                }
                Taxdets(this);                
            }
            else {                
                console.log('RETTAX>', tax);
                Taxret(this);
            }
            
            
            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
               
                console.log('headerName', headerName);

                if ($this.is('select')) {
                    debugger;
                   // tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                    tableOptionsTemp.hideColumn.push(nameAttr)
                    //displat text of select
                   
                    if ($this.val() != null) {
                        let selectText = ($this.val().length == 0) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    else {

                        let selectText = ($this.val() == null) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    //tableOptionsTemp.onlyShowColumn.push(nameAttr + '_d')
                    insertData[nameAttr] = $this.val();
                    //insertData[nameAttr] = $this.val();

                    $this.val('').selectpicker('refresh');
                }
                else if ($this.is('input')) {

                    insertData[nameAttr] = $this.val();
                    console.log('insertData[nameAttr]', insertData[nameAttr])
                    if (nameAttr == "prodtid") { }
                    else if (nameAttr == "stkid") { }
                    else { $this.val(''); }
                }
            });

            console.log('check 4.2', insertData);
            console.log('check 4.2 tableoption', tableOptionsTemp);




            if (isNew) {
                console.log('check 4.2.1');
                //this section nake table.table row
                if ($tblcontainer.find('table').length == 0) {
                    console.log('check 4.2.3');
                    console.log(insertData);
                    console.log(',tableOptionsTemp', tableOptionsTemp)
                    $tblcontainer.append(pft_table_createtable([insertData], tableOptionsTemp));
                }
                else {
                    console.log('check 4.2.1');
                    let table = $tblcontainer.find('table').DataTable()
                    table.destroy()
                    pft_table_addTableRow($tblcontainer.find('table'), insertData, tableOptionsTemp);
                }
            }
            else {
                let table = $tblcontainer.find('table').DataTable()
                table.destroy()
                pft_table_replaceTableRow($tblcontainer.find('table'), updateCond, insertData, tableOptionsTemp);
            }

            console.log(insertData);
            // resetting the edit value
            $tblcontainer.attr('perfect-tempTable-action', 0);

            BindItemBilldetails(ele);
            console.log("TAX ADDED END", tax)
            $('[name="ProductCriteria"]').val(1).selectpicker('refresh');
            $('[name="ProductCriteria"]').trigger('change');
        }
    }



    var tableOptionsTempOutss = {
        iconButton: {
            buttons: [
                {
                    icon: "fa fa-pencil btnPerfectGridEdit",
                    action: function () {
                        let savedData = $(this).closest('tr').data('pData')

                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let tableKey = $tablecontainer.attr('perfect-tempTable');
                        let $thisForm = $tablecontainer.closest('[perfect-class="form"]');

                        let indexname = tableKey + 'index';
                        let rindex = $(this).closest('tr').attr(indexname);
                        $tablecontainer.attr('perfect-tempTable-action', rindex);

                        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                            let $thisNode = $(this);
                            let pf_name = $thisNode.attr('name');
                            if ($thisNode.is('select')) {

                                $thisNode.val(savedData[pf_name]).selectpicker('refresh');

                            }
                            else if ($thisNode.is('input')) {
                                let inputType = $thisNode.attr('type').toLocaleLowerCase();
                                if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                    $thisNode.prop('checked', savedData[pf_name]);
                                }
                                else {
                                    $thisNode.val(savedData[pf_name]);
                                }
                            }
                            else {
                                $thisNode.val(savedData[pf_name]);
                            }                            
                            
                        });
                        debugger;
                        Fun_SalesReturn_LoadUnit(this, savedData.ID_Unit);
                       
                        fn_EnableDisble(this);

                    }
                },
                {
                    icon: "fa fa-trash btnPerfectGridDelete",
                    action: function () {
                        debugger
                        let $thistbl = $(this).closest('table');
                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let savedData = $(this).closest('tr').data('pData')
                        let table = $thistbl.DataTable();
                        let valid = true;
                        //valid = RemoveTaxArray(savedData.ProdName);
                        
                        if (valid) {
                            table.destroy();
                            if ($(this).closest('tbody').find('tr').length > 1) {
                                $(this).closest('tr').remove();
                                pft_table_slreset($thistbl);
                            }
                            else {
                                $thistbl.remove();
                            }
                        }
                        BindItemBilldetails(this);
                        RemoveTaxArrays(this, savedData.UID);
                    }
                },
            ]
        },
        onlyShowColumn: ['ProName', 'SpdSalQuantity', 'MRPs', 'SalePrice', 'Discount', 'Tax', 'TotalRate', 'ID_Unit_d'],
        renameHeader: {
            "ProName": "Product", "SpdSalQuantity": "Qty", "MRPs": "MRP", "SalePrice": "Sale Price", "Discount": "Discount", "Tax": "Tax", "TotalRate": "Total Rate", "ID_Unit_d": "Unit"},
        hideColumn: ['StockId', 'ProductID', 'CrntQnty', 'UID', 'ID_Unit'],
        serialNo: true,
        rowAttribute: []

    };

    function ValidCheckingSalesReturn(ele, tableKey, errorClass, isValid) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        debugger
        let ProductID = parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="ProductID"]').val() == "" ? "0" : $thisForm.find('[perfect-tempTable-' + tableKey + '="ProductID"]').val());
        let MRP = parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="MRPs"]').val() == "" ? "0" : $thisForm.find('[perfect-tempTable-' + tableKey + '="MRPs"]').val());
        let SalePrice = parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="SalePrice"]').val() == "" ? "0" : $thisForm.find('[perfect-tempTable-' + tableKey + '="SalePrice"]').val());
        let Quantity = parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="SpdSalQuantity"]').val() == "" ? "0" : $thisForm.find('[perfect-tempTable-' + tableKey + '="SpdSalQuantity"]').val());
        let unit = parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="ID_Unit"]').val() == "" ? "0" : $thisForm.find('[perfect-tempTable-' + tableKey + '="ID_Unit"]').val());
        if (ProductID < 0 || ProductID == "") {
            $thisForm.find('[perfect-tempTable-Sales="ProductID"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('Please Select Product');
            isValid = false;
        }
        //else if (unit < 0 || unit == "")
        //{
        //    $thisForm.find('[perfect-tempTable-Sales="ID_Unit"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('Please Select Unit');
        //    isValid = false;
        //}
        else if (SalePrice == "" || SalePrice < 0) {
            $thisForm.find('[perfect-tempTable-Sales="SalePrice"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('Please Enter Sales Price');
            isValid = false;
        }
        else {
            $thisForm.find('[perfect-tempTable-Sales="ProductID"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
            $thisForm.find('[perfect-tempTable-Sales="SalePrice"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
        }               

        ///MRP AND SALE PRICE CHECKING
        if ((MRP < SalePrice) && (MRP != "" || MRP > 0)) {
            $thisForm.find('[perfect-tempTable-Sales="MRPs"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('MRP Should be greater than or equal to Sales Price');
            $('[name=MRPs]').val(parseFloat(MRP).toFixed(2));
            isValid = false;
        }
        else {
            $thisForm.find('[perfect-tempTable-Sales="MRPs"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
        }        

        if (Quantity < 0 || Quantity == "") {
            $thisForm.find('[perfect-tempTable-Sales="SpdSalQuantity"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('Please Enter Quantity');
            isValid = false;
        }
        else {
            $thisForm.find('[perfect-tempTable-Sales="SpdSalQuantity"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
        }

        return isValid;
    }

    function BindItemBilldetails(ele) {
        
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let netamt = 0;
        $('#salesReturnHeadItem').find('tbody tr').each(function (index, ele) {
            netamt = netamt + parseFloat($(ele).find('.TotalRate').text());
        });
        $thisForm.find('[name=SalBillTotal]').val(netamt.toFixed(2));
        //roundof(ele)
        calculateTotals(ele);
        RoundOffCalcs(ele);
    }

    function productclear(ele, tablekey) {
        debugger
        let $thisform = $(ele).closest('[perfect-class="form"]');

        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="select"]').val(1).selectpicker('refresh');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="date"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="hidden"]').val('');
        $thisform.find('[name="ProductCriteria"]').val(1);
        let $tblcontainer = $thisform.find('[perfect-tempTable="' + tablekey + '"]');
        $tblcontainer.attr('perfect-tempTable-action', 0);       
    }

    var Taxcalled = 0;
    function BindTaxDetails(ele, mod) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        Taxcalled = 1;
        let amount = ($thisForm.find('[name=SalePrice]').val() * $thisForm.find('[name=SpdSalQuantity]').val());
        var InputData =
        {
            FK_Product: $thisForm.find('[name=ProductID]').val(),
            Includetax: 0,
            Quantity: 0,
            Amount: amount,

        }

        $.ajax({
            url: "@Url.Action("GetTaxAmountNew","Sales")",
            type: "Get",
            data: InputData,
            dataType: "json",
            contentType: "application/json",
            success: function (ajaxOutput) {
                if (ajaxOutput.Process.IsProcess) {
                    var CheckListHTML = '';
                    let sum = 0;
                    if (ajaxOutput.Data.length > 0) {


                        $.each(ajaxOutput.Data, function (i, value) {
                            sum = sum + parseFloat(value.TaxAmount);
                            CheckListHTML += "<tr>";
                            CheckListHTML += "<td>" + value.SlNo + "</td>";
                            CheckListHTML += "<td Class='jq_ProductID_td' Style='Display:none'>" + value.ProductID + "</td>";
                            CheckListHTML += "<td class='jq_taxType_td' Style='Display:none'>" + value.FK_TaxType + "</td>";
                            CheckListHTML += "<td class='jq_taxTypeName_td'>" + value.TaxTyName + "</td>";
                            CheckListHTML += "<td class='jq_taxPer_td text-center'>" + value.TaxPercentage + "</td>";
                            CheckListHTML += "<td class='jq_taxamount_td text-right' >  " + value.Amount.toFixed(4) + "</td>";
                            CheckListHTML += "</tr>";
                        })
                    }
                    else {
                        CheckListHTML += "<div class='form-group col-md-6'>";
                        CheckListHTML += "<div class='form-check mb-2'>";
                        CheckListHTML += "<input type='checkbox' class='form-check-input' >"
                        CheckListHTML += "<label class='form-check-label' for='check1'>No Records...</label>";
                        CheckListHTML += "</div></div>"
                    }
                    //let $model = createSearchModalDOM();
                    //$model.modal.find('.modal-body').append(CheckListHTML);
                    //$model.show

                    $("#formGroupModalTaxbody").html(CheckListHTML)
                    if (mod == 1) {
                        $('#formGroupModalTax').modal('show');
                    }
                    else {
                        $('#formGroupModalTax').modal('hide');
                    }

                   BindTaxAmount(ele)

                }
                else {
                    if (mod == 1) {
                        $.each(ajaxOutput.Process.Message, function (key, value) {
                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                        });
                    }
                }
            },
            complete: function () {
                $(ele).prop('disabled', false);
            }
        });
    }

    function BindTaxAmount(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let sum = 0;
        $('#formGroupModalTaxbody tr').each(function (index, ele) {
            sum = sum + parseFloat($(ele).find('.jq_taxamount_td').text());

        });
        $thisForm.find('[name=Tax]').val(sum.toFixed(2));
    }

    var cnt = 0;
    var $modal = $('#zero_config');
    var tax = [];

    function Taxdets(ele, Arr) {       
        let $thisForm = $(ele).closest('[perfect-class="form"]');      

        let UID = $('[name=UID]').val(cnt);

        $modal.find('tbody').find('tr').each(function () {            
            let taxinfo = {};
            taxinfo['UID'] = $('[name=UID]').val();
            taxinfo['ProductID'] = $('[name=ProductID]').val();
            taxinfo['FK_TaxType'] = $(this).find('.jq_taxType_td').text();
            taxinfo['TaxTyName'] = $(this).find('.jq_taxTypeName_td').text();
            taxinfo['TaxPercentage'] = $(this).find('.jq_taxPer_td').text();
            taxinfo['TaxAmount'] = $(this).find('.jq_taxamount_td').text();
            taxinfo['FK_Stock'] = $('[name=StockId]').val();

            tax.push(taxinfo);
           
        });
      
    }


    function Taxret(ele) {

        //debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let UID = $('[name=UID]').val();       

        var foundItems = [];
        if (Taxcalled == 1) {
            $.each(tax, function (key, value) {              

                foundItems = tax.filter(x => x.UID.toString() == UID.toString());              

                const indexOfObject = tax.findIndex(object => {
                    return object.UID.toString() === UID.toString();
                });
                tax.splice(indexOfObject, foundItems.length);               
            });         

            $modal.find('tbody').find('tr').each(function () {
                
                let taxinfo = {};
                taxinfo['UID'] = $('[name=UID]').val();
                taxinfo['ProductID'] = $('[name=ProductID]').val();
                taxinfo['FK_TaxType'] = $(this).find('.jq_taxType_td').text();
                taxinfo['TaxTyName'] = $(this).find('.jq_taxTypeName_td').text();
                taxinfo['TaxPercentage'] = $(this).find('.jq_taxPer_td').text();
                taxinfo['TaxAmount'] = $(this).find('.jq_taxamount_td').text();
                taxinfo['FK_Stock'] = $('[name=StockId]').val();
                console.log('taxinfo', taxinfo);

                tax.push(taxinfo);
               
            });
        }      
    }


    function RemoveTaxArrays(ele, id) {
        //debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');

        let UID = id; /*$('[name=UID]').val();*/

        console.log('TAX>', tax);

        var foundItems = [];

        $.each(tax, function (key, value) {

            foundItems = tax.filter(x => x.UID == UID);
            console.log('tax.filter(x => x.UID>', tax.filter(x => x.UID));

            const indexOfObject = tax.findIndex(object => {
                return object.UID === UID;
            });

            console.log('TAXFINDSSSS>', tax);
            console.log('foundItems length>', foundItems.length);

            tax.splice(indexOfObject, foundItems.length);
        });

        console.log('TAXDELETE>', tax);

    }

    function fillgrid(tablk, wartableOptionsTempOut, $thisForm, data) {
        debugger;
        let tableOptionsTemp = wartableOptionsTempOut;
        let insertData = [];
        let tableKey = tablk;
        let indexname = tableKey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');
        //---
      
        if (Multiunitsettings == '0') {
            let showCoulmn = tableOptionsTemp.onlyShowColumn;

            showCoulmn = showCoulmn.filter(item => item !== "ID_Unit_d");
            tableOptionsTemp.onlyShowColumn = showCoulmn;

            //console.log('tempshow1', showCoulmn)
            //console.log('tempShow2', tableOptionsTemp)
        }




        $.each(data, function (keyOne, valOne) {
            let pData = {};
            pData[indexname] = keyOne + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', pData[indexname])
            //---

            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                console.log(nameAttr, 'nameAttr');
                if (typeof valOne[nameAttr] !== undefined) {
                    debugger;
                    if ($this.is('select')) {
                        tableOptionsTemp.hideColumn.push(nameAttr);
                        pData[nameAttr + '_d'] = $this.find('[value="' + valOne[nameAttr] + '"]').text();
                        pData[nameAttr] = valOne[nameAttr];
                    }
                    
                    else if ($this.is('input')) {
                        if (tableKey == 'Purchase') {
                            if (ChekStandBy1 == "False") {


                                if (nameAttr == "StandByQuantity") {
                                    tableOptionsTemp.hideColumn.push(nameAttr);
                                }
                                else if (nameAttr == "StandByProdName") {
                                    tableOptionsTemp.hideColumn.push(nameAttr);
                                }

                            }

                            if (Multiunitsettings == '0') {
                                if (nameAttr == "ID_Unit") {
                                    tableOptionsTemp.hideColumn.push(nameAttr);
                                }
                                
                                
                            }
                            else {
                            }
                        }

                        pData[nameAttr] = valOne[nameAttr];
                    }
                    else if ($this.is('hidden')) {

                        pData[nameAttr] = valOne[nameAttr];
                    }
                    else {
                        pData[nameAttr] = valOne[nameAttr];
                    }
                }
            });

            insertData.push(pData);
            console.log('pData', pData)
            console.log('insertData', insertData)
        });
        $tblcontainer.empty();
        $tblcontainer.append(pft_table_createtable(insertData, tableOptionsTemp));
        BindItemBilldetails(this);
    }

    function decimalpnt(ele, id, range) {
        let input = $('#' + id);

        ele.value = ele.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');
        let t = ele.value;
        ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t;

        $(document).on('keydown', '#' + id, function (event) {

            if (ele.value.includes('.')) {

            }
            else if (ele.value === '.' && (event.key === '.' || event.keyCode === 190)) {
                ele.value = '0.00'; // Change the value to '0.00' if only a dot is entered
                // Prevent the dot from being entered in the input field
            }
            var key = event.keyCode || event.charCode;
            if (key == 8 || key == 46) { }
            else {
                if (ele.value.indexOf('.') < 0 && ele.value.indexOf('.') !== 9 && ele.value.length > 8) {
                    ele.value = ele.value + '.';
                }
            }
        });
    }

    function Fun_SalesReturn_LoadUnit(element, UnitID) {
        debugger;
        let $thisForm = $(element).closest('[perfect-class="form"]');
        let $dropdown = $thisForm.find('[name="ID_Unit"]');
        $dropdown.empty();
        //$dropdown.append($('<option/>', { value: '' }).text('Please select')).selectpicker('refresh');
            let inputData = {
                __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                'TransMode': SalesReturnTransMode,
                'TransMode': SalesReturnTransMode,
                'ProductID': $thisForm.find('[name="ProductID"]').val(),
                'FK_Transaction':0
            };

            $.ajax({
                url: "@Url.Action("GetSalesReturnUnit", "SalesReturn")",
                type: "POST",
                data: inputData,
                dataType: "json",
                contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                success: function (ajaxOutput) {

                    console.log('ajaxOutputdata>>>>', ajaxOutput);
                    debugger;
                   
                    if (ajaxOutput.Process.IsProcess) {
                     
                      
                       
                        $.each(ajaxOutput.Data, function (key, value) {
                            $dropdown.append($('<option/>', { "value": value.ID_Unit, "data-UnitCountS": value.UnitCount }).text(value.UnitName)).selectpicker('refresh')
                        });
                        if (UnitID > 0)
                            $dropdown.find('[name="ID_Unit"]').val(ID_Unit).selectpicker('refresh');
                        else
                            $dropdown.find('[name="ID_Unit"]').val(ajaxOutput.Data[0].ID_Unit).selectpicker('refresh');
                        $dropdown.find('[name="ID_Unit"]').attr('UnitCountS', ajaxOutput.Data[0].UnitCount);
                       



                        }


                },
                complete: function () {

                }

            });

    }
    function SRBUnitDropdown(element,SR) {
        debugger;
        $(element).find('.jq_ID_tr').each(function () {
            debugger;
            let select = $(this).find('.productselectClass');
            let idsalespr = $(this).find('.productselectClass').attr('id');
            let ID_SalesProductDetails = idsalespr.replace("opdrp_", "");
            
            let prodictid = select.attr('productID');
            let SalesReturnMode = SR;
             let inputData = {
            __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
            'TransMode': SalesReturnTransMode,
                 'ProductID': prodictid,
                 'FK_Transaction': ID_SalesProductDetails,
                 'SalesReturnMode': SalesReturnMode
        };
            $.ajax({
                url: "@Url.Action("GetSalesReturnUnit", "SalesReturn")",
                type: "POST",
                data: inputData,
                dataType: "json",
                contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                success: function (ajaxOutput) {
                    console.log('sss >', ajaxOutput)
                    debugger;
                    if (ajaxOutput.Process.IsProcess) {
                      
                        $.each(ajaxOutput.Data, function (index, value) {
                            debugger;
                            // Create a new option element
                            var $option = $('<option/>', {
                                value: value.ID_Unit,
                                'data-UnitCountS': value.UnitCount
                            }).text(value.UnitName);
                            
                            select.append($option);
                        });
                        
                        }


                },
               

            });


        });

       
       

    }
    $("#EMPL tbody").on("change", ".jq_Unit_td", function () {
        debugger;
        var row = $(this).closest("tr");
        Quantity = row.find('.jq_quantity_td_hid').text() == "" ? "0" : row.find('.jq_quantity_td_hid').text();
        CurrentQuantity = row.find('.jq_quantity_td').find('input').val() == "" ? "0" : row.find('.jq_quantity_td').find('input').val();
        var ActQty = row.find('.ActQty_td').find('input').val();
        var Free = row.find('.free_td').find('input').val() == "" ? "0" : row.find('.free_td').find('input').val();
        var Totalrate = row.find('.jq_TotalAmount_td_hid').text() == "" ? "0" : row.find('.jq_TotalAmount_td_hid').text();
        var Taxamount = row.find('.jq_Tax_td_hid').text() == "" ? "0" : row.find('.jq_Tax_td_hid').text();
        var UnitCount = row.find('[name="Unit"] option:selected').attr('data-unitcounts');
        var includetax = row.find('.jq_includetax').text() == "" ? "0" : row.find('.jq_includetax').text();
        //SalesPrice = row.find('.jq_salesprice_td').text() == "" ? "0" : row.find('.jq_salesprice_td').text();

        var Singlerate = 0;
        var Totalamount = 0;
        var Totalamount = 0;
        var Totaltax = 0;
        var NewActQty = 0;
        var currenttotal = 0;
        var UID = row.find('.jq_UID_td').text();
        if (Quantity != 0) {
           
            if (includetax == 1) {
                Singlerate = (parseFloat(Totalrate)) / (Multiunitsettings == '1' ? (parseFloat(Quantity) * parseFloat(UnitCount)) : (parseFloat(Quantity)));
                Totalamount = (parseFloat(Singlerate) * (Multiunitsettings == '1' ? (parseFloat(Quantity) * parseFloat(UnitCount)) : (parseFloat(Quantity))));

                Singletax = (parseFloat(Taxamount) / parseFloat(Quantity));
                Totaltax = (parseFloat(Singletax) * (Multiunitsettings == '1' ? (parseFloat(Quantity) * parseFloat(UnitCount)) : (parseFloat(Quantity))));
            }
            else {
                Singlerate = (parseFloat(Totalrate) / (Multiunitsettings == '1' ? (parseFloat(Quantity) * parseFloat(UnitCount)) : (parseFloat(Quantity))));
                Totalamount = (parseFloat(Singlerate) * (Multiunitsettings == '1' ? (parseFloat(Quantity) * parseFloat(UnitCount)) : (parseFloat(Quantity))));

                Singletax = (parseFloat(Taxamount) / (Multiunitsettings == '1' ? (parseFloat(Quantity) * parseFloat(UnitCount)) : (parseFloat(Quantity))));
                Totaltax = (parseFloat(Singletax) * (Multiunitsettings == '1' ? (parseFloat(Quantity) * parseFloat(UnitCount)) : (parseFloat(Quantity))));
            }

        }
        NewActQty = Multiunitsettings == '1' ? ((parseFloat(CurrentQuantity) * parseFloat(UnitCount)) + parseFloat(Free)):
            ((parseFloat(CurrentQuantity)  + parseFloat(Free)));
        row.find('.jq_TotalAmount_td').text(Totalamount.toFixed(2));
        //row.find('.jq_Tax_td').find('input').val(Totaltax.toFixed(2));
        row.find('.jq_quantity_td').find('input').val(Number(CurrentQuantity).toFixed(3));
        row.find('.ActQty_td').find('input').val(NewActQty.toFixed(3));

        calculateTotals(this);
        RoundOffCalcs(this);
        ShowTaxDetails(this, 0, UID);

    });
    
    </script>

