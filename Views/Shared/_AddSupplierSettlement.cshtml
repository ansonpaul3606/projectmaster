@*/*----------------------------------------------------------------------
    Created By	: Kavya
    Created On	: 05/11/2022
    Purpose		: Supplier Settlement
    -------------------------------------------------------------------------
    Modification
    On			By					OMID/Remarks
    -------------------------------------------------------------------------


    -------------------------------------------------------------------------*/*@

@model PerfectWebERP.Models.SupplierSettlementModel.DropDownListModelView
<div class="card ">
    <div class="card-header">
        <h4 class="card-title col-12" id="Caption">Supplier Transaction </h4>
        <span title="To View List" onclick="fn_showListView();"><svg id="Layer_1" class="layer" stroke="currentColor" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" height="20" width="20" viewBox="0 0 122.88 122.54"><title>To View List</title><path class="viewlst" d="M4.69,0H46.22a4.71,4.71,0,0,1,4.69,4.69V46a4.69,4.69,0,0,1-4.69,4.69H4.69a4.65,4.65,0,0,1-3.31-1.38l-.09-.09A4.67,4.67,0,0,1,0,46V4.69A4.71,4.71,0,0,1,4.69,0ZM89.44,61.94a26.56,26.56,0,0,1,10.18,2l.07,0a26.61,26.61,0,0,1,15.25,32.16,26.18,26.18,0,0,1-2.7,6.11l10.3,11.24a1.27,1.27,0,0,1-.07,1.8l-7.57,6.9a1.27,1.27,0,0,1-1.79-.07l-9.86-10.85a26.36,26.36,0,0,1-6.1,2.74,26.87,26.87,0,0,1-7.71,1.13,26.51,26.51,0,0,1-10.17-2l-.07,0A26.64,26.64,0,0,1,64.85,78.37l0-.07A26.6,26.6,0,0,1,89.44,61.94Zm15,11.59a21.38,21.38,0,0,0-6.89-4.61l-.06,0a21.22,21.22,0,0,0-23.07,4.64l-.07.07a21.25,21.25,0,0,0-4.54,6.83l0,.06a21.32,21.32,0,0,0-1.58,8.06,21.26,21.26,0,0,0,29.35,19.62,21.54,21.54,0,0,0,6.89-4.61l.07-.07a21.09,21.09,0,0,0,4.54-6.83l0-.06a21.35,21.35,0,0,0,0-16.17,21.34,21.34,0,0,0-4.62-6.9ZM4.69,63.2H46.22a4.71,4.71,0,0,1,4.69,4.7v41.34a4.68,4.68,0,0,1-4.69,4.69H4.69A4.69,4.69,0,0,1,0,109.24V67.9a4.71,4.71,0,0,1,4.69-4.7ZM68.78,0h41.53A4.71,4.71,0,0,1,115,4.69V46a4.71,4.71,0,0,1-4.69,4.69H68.78A4.71,4.71,0,0,1,64.09,46V4.69a4.69,4.69,0,0,1,1.37-3.31l.1-.09A4.67,4.67,0,0,1,68.78,0Z"></path></svg></span>
    </div>

    <div class="card-body">
        <form id="" class="form-valide" perfect-class="form" action="#" method="post" perfect-onFormSuccess="">
            <div class="">
                @Html.AntiForgeryToken()

                <div class="row">
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">List Mode</span>
                                <span class="text-danger">*</span>

                            </label>
                            <div class="col-sm-7">
                                <select class="form-control perfectValidate_string" id="menulist" name="menulist" data-id="menulist-error" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" tabindex="-98" aria-describedby="ID_Report-error" aria-invalid="true" onchange="changetranstype(this),fn_ddltranstype(this)">

                                    @if (!(Model.listMode is null))
                                    {
                                        foreach (var ActionStatus in Model.listMode)
                                        {
                                            <option value="@ActionStatus.ID_Mode">@ActionStatus.ModeName</option>
                                        }
                                    }

                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Trans Type</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-7 bnddrop">
                                <div class="input-group">
                                    <input type="hidden" name="SupplierSettlementID" perfect-ctype="hidden" />
                                    <select class="form-control perfectValidate_numeric" id="ddltransTypeID" name="ddltransType" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" onchange="fn_ddltranstype(this)">
                                        <option value="">Please Select </option>
                                        <option value="1">Purchase authorize</option>
                                        <option value="2">Payment</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Trans Date</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-7">
                                <input type="date" class="form-control perfectValidate_date" name="TransDate" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" max="2050-01-01" onchange="checkdate(this)" />
                                <div class="invalid-feedback animated fadeInUp limit-check" style="display: block;"></div>
                            </div>
                        </div>
                    </div>


                </div>
                <div class="row Divpaymentdetails">
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Supplier</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-7">
                                <div class="input-group">
                                    <input type="hidden" name="FK_BranchCodeSupTr" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" value="" />
                                    <input type="text" class="form-control perfectValidate_string" name="SuppName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled />
                                    <input type="hidden" name="SuppID" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />

                                    <div class="input-group-append">

                                        <button id="addaccounthead-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchValAssign(this,20,'Supplier List',[],['SupplierID','SupplierName'],SupplierSettlementTransMode)" BindName="SuppName" BindVal="SuppID" Function="1" Criterea1="FK_BranchCodeSupTr" Criterea2="menulist" onchange="clearfield(this);"></button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Payable Amount</span>
                            </label>
                            <div class="col-sm-7">
                               <input type="text" class="form-control text-right" id="idPayAmtTot" placeholder="" name="PayAmtTot" perfect-class="formGroupControl" perfect-ctype="input" oninput="decimalpnt(this,'idPayAmtTot',3)" perfect-css="input" maxlength="12" onchange="getfunction(this,2)"/>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-12">
                        <div class="daccordion__header">
                            <span class="accordion__header--text">Details</span>
                        </div>
                        <br />
                        <div class="table-responsive" perfect-tempTable="PaymentDetails" id="Paymenttableid" style="display:none;">
                            <table class="table table-responsive-lg" id="Paymentdetailsid">
                                <thead class="btn-primary" id="ReturnHead">
                                    <tr>

                                        <th></th>
                                        <th scope="col" style="text-align:center">Mode</th>
                                        <th scope="col" style="text-align:center">Reference No</th>
                                        <th scope="col" style="text-align:center">Invoice Date</th>
                                        <th style="display:none; text-align:center"><strong>ID_Purchase</strong></th>
                                        <th style="display:none; text-align:center"><strong>ID_SupplierTransaction</strong></th>
                                        <th style="display:none; text-align:center"><strong>FK_BillType</strong></th>
                                        <th style="display:none; text-align:center"><strong>InvoiceType</strong></th>
                                        <th scope="col" style="text-align:right">Payable Amount</th>
                                        <th scope="col" style="text-align:right">Amount</th>
                                        @*<th style="display:none; text-align:right" id="discountth" scope="col">Discount</th>*@
                                        @*<th id="discountth" scope="col" style="display:none;text-align:right">Discount</th>*@
                                        <th scope="col" style="text-align:right">Balance To Pay</th>
                                        <th scope="col" style="text-align:center"></th>

                                    </tr>
                                </thead>
                                <tbody id="paymentdetailsbody">
                                    <tr id="0">
                                        <td style="text-align:center;" colspan="4">No Records..</td>
                                    </tr>

                                </tbody>
                            </table>

                        </div>
                    </div>
                </div>
                <div class="row divBillType">
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Bill Type</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-7">


                                <select class="form-control perfectValidate_string" name="BillTypeID" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select">
                                    <option value="">Please Select </option>


                                    @if (!(Model.BillTypeListView is null))
                                    {
                                        foreach (var BillType in Model.BillTypeListView)
                                        {
                                            <option value="@BillType.BillTypeID">@BillType.BillType</option>
                                        }
                                    }
                                </select>

                            </div>
                        </div>
                    </div>

                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Branch</span>

                            </label>

                            <div class="col-sm-7">
                                <select class="form-control perfectValidate_string" name="BranchID" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" data-live-search="true" onchange="clearbranchdetails(this)">

                                    <option value="">Please Select </option>

                                    @if (!(Model.BranchList is null))
                                    {
                                        foreach (var branchList in Model.BranchList)
                                        {
                                            <option value="@branchList.BranchID">@branchList.Branch</option>
                                        }

                                    }

                                </select>

                            </div>
                        </div>
                    </div>

                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Department</span>
                            </label>

                            <div class="col-sm-7">
                                <select class="form-control perfectValidate_string" name="DepartmentID" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" data-live-search="true" onchange="cleardepartmentdetails(this)">

                                    <option value="">Please Select </option>

                                    @if (!(Model.DepartmentList is null))
                                    {
                                        foreach (var departmentList in Model.DepartmentList)
                                        {
                                            <option value="@departmentList.DepartmentID">@departmentList.DepartmentName</option>
                                        }

                                    }

                                </select>

                            </div>
                        </div>
                    </div>


                </div>

                <div class="row divddlimport">
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Import From</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-7">
                                <div class="input-group">


                                    <input type="hidden" name="InvoiceNo" perfect-ctype="hidden" />
                                    <input type="hidden" name="ImportID" perfect-ctype="hidden" />
                                    <input type="hidden" name="GroupID" perfect-ctype="hidden" />
                                    <input type="hidden" name="SSTransMode" perfect-ctype="hidden" />
                                    <select class="form-control perfectValidate_string" name="ddlimportfrom" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" onchange="fun_imports(this);BindpaymentMethod(this);">
                                        <option value="">Please Select </option>
                                        <option value="1">Purchase Order</option>
                                        <option value="2">Purchase</option>
                                        <option value="3">Purchase Return</option>
                                    </select>

                                    <div class="input-group-append">
                                        <button id="addcountry-jq-searchButton3" data-toggle="tooltip " data-placement="top" data-html="true" title="Import from Purchase Order,Purchase,Purchase Return " class="btn btn-primary" type="button" perfect-css="button" onclick="fn_showimportlists(this)" Function="2" Criterea1='BranchID' Criterea2='SuppID' Criterea3='DepartmentID'><i class="las la-file-import la-lg"></i></button>
                                        <button id="Newsupplieraddbutton" title="Add New Supplier" class="btn btn-primary fa fa-plus" style="display:none" type="button" perfect-css="button" onclick="fn_supplierForm_loadState(this)"></button>

                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row divinvoice">

                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Invoice Date</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-7">
                                <div class="input-group">
                                    <input type="date" class="form-control perfectValidate_date" name="InvoiceDate" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly />
                                </div>
                            </div>

                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Item Count</span>
                            </label>
                            <div class="col-sm-7">
                                <div class="input-group">
                                    <input type="text" class="form-control perfectValidate_string" name="InvoiceItemCount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled />
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Entered By</span>
                            </label>
                            <div class="col-sm-7">
                                <div class="input-group">
                                    <input type="text" class="form-control perfectValidate_string" name="EnteredBy" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row divinvoicedata">
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Invoice No</span>
                            </label>
                            <div class="col-sm-7">
                                <div class="input-group">
                                    <input type="text" class="form-control perfectValidate_string" name="InvoiceNo" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled />
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Total Amount</span>
                            </label>
                            <div class="col-sm-7">
                                <div class="input-group">
                                    <input type="text" class="form-control perfectValidate_string text-right" name="NetAmount" id="netamt" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled />
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Entered On</span>
                            </label>
                            <div class="col-sm-7">
                                <div class="input-group">
                                    <input type="text" class="form-control perfectValidate_string" name="EnteredOn" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row divBillTotal">
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel"> Bill Total</span>

                            </label>
                            <div class="col-sm-7">
                                <input type="text" class="form-control text-right" placeholder="" readonly name="NetAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Other Charges</span>

                            </label>
                            <div class="col-sm-7">
                                <div class="input-group">
                                    <input type="text" class="form-control text-right" name="OtherCharge" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly />
                                    <div class="input-group-append">
                                        <button id="searchButtonother" class="btn btn-primary fa fa-credit-card" type="button" perfect-css="button" onclick="fn_showOtherCharges(this)" onchange="roundof(this)"></button>
                                    </div>
                                    <div class="modal fade" perfect-class="formGroupModalOtherCharge" id="formGroupModalOtherCharge">
                                        <div class="modal-dialog modal-dialog-centered" role="document">
                                            <div class="modal-content  rounded-0">
                                                <div class="modal-header border-0">
                                                    <h5 class="modal-title">Other Charge Details</h5>
                                                    <button type="button" class="close" data-dismiss="modal">
                                                        <span>&times;</span>
                                                    </button>
                                                </div>
                                                <div class="modal-body" perfect-class="formGroup" style="max-height: calc(100vh - 200px); overflow-y: auto;padding: 1rem;">
                                                    <table id="zero_configOthercharge" class="table mb-0  table-striped  text-black">
                                                        <thead class="bg-primary text-white">
                                                            <tr>
                                                                <th class="t-head">SlNo</th>
                                                                <th class="t-head" style="display:none">ID_OtherChargeType</th>
                                                                <th class="t-head">Type</th>
                                                                <th class="t-head">Trans Type</th>
                                                                <th class="t-head" style='text-align:right'>Amount</th>

                                                            </tr>
                                                        </thead>
                                                        <tbody id="formGroupModalOtherChargebody"></tbody>
                                                        <tfoot>
                                                        </tfoot>
                                                    </table>
                                                    <div class="modal-footer">
                                                        <button type="button" class="btn btn-primary light" data-dismiss="modal" onclick="BindOtherChargeAmount(this)">Apply</button>

                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Discount</span>

                            </label>
                            <div class="col-sm-7">
                                <input type="text" class="form-control text-right" id="iddiscount" placeholder="" name="Discount" perfect-class="formGroupControl" perfect-ctype="input" oninput="decimalpnt(this,'Discount',3)" perfect-css="input" maxlength="12" onchange="roundof(this)" />
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Roundoff</span>

                            </label>
                            <div class="col-sm-7">

                                <input type="text" class="form-control text-right" placeholder="" id="idroundoff" onchange="salroundoff(this)" name="Supproundoff" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="decimalpntminus(this,'Discount',3)" />
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Net Amount</span>

                            </label>
                            <div class="col-sm-7">
                                <input type="text" class="form-control text-right" placeholder="" readonly name="SuppNetAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">Payment Method</label>
                            <div class="col-sm-5">
                                <div class="input-group">

                                    <div class="input-group-append">
                                        &nbsp;    &nbsp;    &nbsp;    &nbsp;    &nbsp;    &nbsp;    &nbsp;  <button id="idpayment" class="btn btn-primary fa fa-money" type="button" perfect-css="button" title="Add Payment Method" onclick="GetPaymentlists(this)"></button>

                                    </div>
                                </div>

                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4 DivAdvanceAmount">
                        <div class="form-group row  Advamt" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Adv. Amount</span>

                            </label>
                            <div class="col-sm-7">
                                <input type="text" class="form-control text-right" placeholder="" readonly name="AdvanceAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                            </div>
                        </div>

                    </div>

                    <div class="modal fade" perfect-class="formGroupModalpayment" id="formGroupModalpayment">
                        <div class="modal-dialog  modal-dialog-centered modal-md" role="document">
                            <div class="modal-content">
                                <div class="modal-header border-0">
                                    <h5 class="modal-title">Payment Method</h5>
                                    <button type="button" class="close" data-dismiss="modal">
                                        <span>&times;</span>
                                    </button>
                                </div>
                                <div class="modal-body" perfect-class="formGroup" style="max-height: calc(100vh - 200px); overflow-y: auto;padding: 1rem;">
                                    <div class="row">


                                        <div class="col-sm-12">
                                            <div class="form-group row" perfect-class="formGroup">
                                                <label class="col-sm-4 col-form-label">Method <span class="text-danger">*</span></label>
                                                <div class="col-sm-8">
                                                    <div class="input-group">
                                                        <select class="form-control" perfect-tempTable-Payment="PaymentMethod" name="PaymentMethod" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select">
                                                            <option value="">Please Select </option>


                                                            @if (!(Model.PaymentView is null))
                                                            {
                                                                foreach (var Module in Model.PaymentView)
                                                                {
                                                                    <option value="@Module.PaymentmethodID">@Module.Name</option>
                                                                }
                                                            }
                                                        </select>


                                                    </div>
                                                    <div class="text-danger temptableError"></div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-12">
                                            <div class="form-group row" perfect-class="formGroup">
                                                <label class="col-sm-4 col-form-label">
                                                    <span perfect-class="formGroupLabel">Ref No.</span>

                                                </label>
                                                <div class="col-sm-8">

                                                    <div class="input-group">
                                                        <input type="text" class="form-control perfectValidate_string_nm" perfect-tempTable-Payment="Refno" name="Refno" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" maxlength="250" />

                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="col-sm-12">
                                            <div class="form-group row" perfect-class="formGroup">
                                                <label class="col-sm-4 col-form-label">
                                                    <span perfect-class="formGroupLabel">Amount</span>
                                                    <span class="text-danger">*</span>
                                                </label>
                                                <div class="col-sm-8">
                                                    <div class="input-group">
                                                        <input type="text" class="form-control text-right" perfect-tempTable-Payment="PAmount" id="PAmount" name="PAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');" onchange="Pamount(this)" maxlength="12" />

                                                    </div>
                                                    <div class="text-danger temptableError"></div>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="col-sm-9">


                                        </div>
                                        <div class="col-sm-3  text-right">
                                            <div class="input-group">

                                                <div class="input-group-append">
                                                    <div>
                                                        <button type="button" class="btn btn-primary1 " onclick="createtable(this,'Payment',['PaymentMethod'],paytableOptionsTempOut)"><i class="fa fa-plus" aria-hidden="true"></i></button>
                                                        <button class="btn btn-light1" id="refresh" type="button" onclick="productclear(this, 'Payment')"><i class="fa fa-refresh" aria-hidden="true"></i></button>
                                                    </div>
                                                </div>
                                            </div>

                                        </div>
                                        <div class="col-sm-12">
                                            <div class="form-group row" perfect-class="formGroup">
                                                <label class="col-sm-5 col-form-label">
                                                    <span perfect-class="formGroupLabel" style="font-weight:500;">Bal. Amount :</span>

                                                </label>
                                                <div class="col-sm-7" id="idbillamount">
                                                    <div class="input-group">

                                                        <label class="col-form-label">
                                                            <span perfect-class="formGroupLabel" style="font-weight:500;" name="BalAmt"></span>
                                                        </label>

                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-4">

                                        </div>

                                        <div class="col-sm-12">
                                            <div class="form-group row" perfect-class="formGroup">

                                                <div class="table-responsive" perfect-tempTable-Payment="" perfect-tempTable="Payment" id="Paymentdethead" perfect-tempTable-lastindex="0" perfect-tempTable-action="0"></div>
                                                <div class="text-danger temptableError"></div>

                                            </div>
                                        </div>


                                    </div>
                                    <div class="modal-footer">

                                        <button type="button" id="idpaymentmethodpopup" class="btn btn-primary light" onclick="Billttlnetchck(this)">Apply</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-4  DivTotalAmount">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Total Amount</span>

                            </label>
                            <div class="col-sm-7">
                                <input type="text" class="form-control perfectValidate_string text-right" placeholder="" name="TotalAmount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" readonly />
                            </div>
                        </div>
                    </div>


                    <div class="col-sm-4 DivTotalDiscount">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">
                                <span perfect-class="formGroupLabel">Total Discount</span>

                            </label>
                            <div class="col-sm-7">
                                <input type="text" class="form-control perfectValidate_string text-right" placeholder="" readonly name="TotalDiscount" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" />
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-4 Divpaymentmethod">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-5 col-form-label">Method <span class="text-danger" id="PaymentMandatory">*</span></label>
                            <div class="col-sm-7">
                                <div class="input-group">
                                    <select class="form-control  perfectValidate_numeric" name="Paymentmethod" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select">
                                        <option value="">Please Select </option>


                                        @if (!(Model.PaymentViewpayment is null))
                                        {
                                            foreach (var Module in Model.PaymentViewpayment)
                                            {
                                                <option value="@Module.PaymentmethodID">@Module.Name</option>
                                            }
                                        }
                                    </select>


                                </div>

                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-footer text-right" perfect-class="formFooter">

                    @if (ViewBag.PagedAccessRights.UsrrlMsAdd)
                    {
                        <button id="addcompany-jq-addnewuser" type="button" class="btn btn-primary mr-3 " name="add" perfect-css="button" onclick="fn_UpdateSupplierSettlement(this,'new')"><i class="fa fa-refresh fa-spin loaderClass "></i>Save</button>
                    }

                    @*<button id="" type="button" class="btn btn-warning mr-3 addcompany-jq-addnewuserdelete d-none" name="delete" perfect-css="button" onclick="DeleteSupplierSettlements(this)"><i class="fa fa-refresh fa-spin loaderClass"></i>Delete</button>*@
                    <button type="button" class="btn btn-light" perfect-css="button" onclick="fn_resetSupplierSettlement(this)" name="reset">Clear</button>


                </div>




            </div>
        </form>
    </div>
</div>


<script>
    (function () {

        jQuery('select').selectpicker();
    })();


    var $thisForm = $(this).closest('[perfect-class="form"]');

    $(document).ready(function () {
        debugger
        initFunctions('form');
       // $('.DivAdvanceAmount').hide();
        $('.DivAdvanceAmount').show();

       

        $('.SupplierPayment').hide();
        $("#PaymentMandatory").hide();
        let $thisForm = $(this).find('[perfect-class="form"]');
        $thisForm.find('[name="FK_BranchCodeSupTr"]').val(FK_BranchCodeSupTr);
    });
    function checkdate(ele) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');

        let transDate = $thisForm.find('[name="TransDate"]').val();
        let lowerlimit = $thisForm.find('[name="NextActionDate"]').val();

        transDate = new Date(transDate);
        transDate.setHours(0, 0, 0, 0)


        let today = new Date();
        today.setHours(0, 0, 0, 0);
        console.log('transDate', transDate)
        console.log('today', today)

        if (transDate > today) {

            console.log('inside limit check if')
            $thisForm.find('[name="TransDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('Entered date should be less than or equal to Todays date')
            return false;

        }
        else {
            console.log('inside limit check else')
            $thisForm.find('[name="TransDate"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('');
            return true;
        }


    }


    function fn_ddltranstype(element) {
        debugger
        let $thisForm = $(element).closest('[perfect-class="form"]');

        $("#paymentdetailsbody tr").remove();

        $thisForm.find('[name="BillTypeID"]').val('').selectpicker('refresh');
        $thisForm.find('[name="BillType"]').val(0);
        $thisForm.find('[name="ddlimportfrom"]').val('').selectpicker('refresh');
        $thisForm.find('[name="SuppID"]').val('');
        $thisForm.find('[name="SuppName"]').val('');
        $thisForm.find('[name="BillTotal"]').val();
        $thisForm.find('[name="Discount"]').val('');
        $thisForm.find('[name="OtherCharge"]').val('');
        $thisForm.find('[name="Supproundoff"]').val('');
        $thisForm.find('[name="NetAmount"]').val('');
        $thisForm.find('[name="SuppNetAmount"]').val('');
        $thisForm.find('[name="PayableAmount"]').val('');
        $thisForm.find('[name="FK_PurchaseOrder"]').val('');
        $thisForm.find('[name="AdvanceAmount"]').val('');
        $thisForm.find('[name="BalAmt"]').val('0');
        $thisForm.find('[name="InvoiceItemCount"]').val('');
        $thisForm.find('[name="EnteredBy"]').val('');
        $thisForm.find('[name="EnteredOn"]').val('');
        $thisForm.find('[name="InvoiceDate"]').val('');
        $thisForm.find('[name="SupplierID"]').val('');
        $thisForm.find('[name="SupplierName"]').val('');
        $thisForm.find('[name="InvoiceNo"]').val('');
        $thisForm.find('[name="TotalAmount"]').val('0');

        let tablekey = 'Payment';
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tablekey + '"]');
        $tblcontainer.attr('perfect-tempTable-action', 0);
        $tblcontainer.empty(); 
        
        if (parseFloat($thisForm.find('[name="ddltransType"]').val()) == 1) {
            $('.divBillType').show();
            $('.divddlimport').show();
            $('.divinvoice').show();
            $('.divinvoicedata').show();
            $('.divBillTotal').show();
            $('.divhr').show();
            $('.Divpaymentdetails').hide();
            $('.Divpaymentmethod').hide();
            $('.DivTotalDiscount').hide();
            $('.DivTotalAmount').hide();
            $('.SupplierPayment').hide();

        }
        else if (
            parseFloat($thisForm.find('[name="ddltransType"]').val()) == 2 &&
            parseFloat($thisForm.find('[name="menulist"]').val()) == 1) {
            $('.DivTotalDiscount').hide();
            $('.divBillType').hide();
            $('.divddlimport').hide();
            $('.divinvoice').hide();
            $('.divinvoicedata').hide();
            $('.divBillTotal').hide();
            $('.divhr').hide();
            $('.Divpaymentdetails').show();
            $('.Divpaymentmethod').show();
            $('.DivTotalAmount').show();
            $('.SupplierPayment').show();
            $('.jq_discount_td').hide();
            $('#discountth').hide();

        }
        else if (
            parseFloat($thisForm.find('[name="ddltransType"]').val()) == 2 &&
            parseFloat($thisForm.find('[name="menulist"]').val()) == 0) {

            $('.divBillType').hide();
            $('.divddlimport').hide();
            $('.divinvoice').hide();
            $('.divinvoicedata').hide();
            $('.divBillTotal').hide();
            $('.divhr').hide();
            $('.Divpaymentdetails').show();
            $('.Divpaymentmethod').show();
            $('.DivTotalDiscount').hide();
            $('.DivTotalAmount').show();
            $('.SupplierPayment').show();
            $('.jq_discount_td').show();
            $('#discountth').show();
        }

        //else if (parseFloat($thisForm.find('[name="ddltransType"]').val()) == 2) {
        //    $('.divBillType').hide();
        //    $('.divddlimport').hide();
        //    $('.divinvoice').hide();
        //    $('.divinvoicedata').hide();
        //    $('.divBillTotal').hide();
        //    $('.divhr').hide();
        //    $('.Divpaymentdetails').show();

        //    $('.Divpaymentmethod').show();
        //    $('.DivTotalDiscount').hide();
        //    $('.DivTotalAmount').show();
        //    $('.SupplierPayment').show();

        //}
        else {
           
            $('#Paymentdetailsid tbody').empty();
            $thisForm.find('[name="TotalAmount"]').val('0');

        }





    }

    function clearbranchdetails(ele) {

        let $container = $(ele).closest('[perfect-class="form"]');
        $container.find('[name=DepartmentID]').val('');
        $container.find('[name=DepartmentID]').val('').selectpicker('refresh');

        $container.find('[name=SuppID]').val('0');
        $container.find('[name=SuppName]').val('');

        productclear(ele, 'Payment');
        $container.data({ pOthrChgData: null });
        $container.data({ pPayment: null });
        $container.find('[name="BillTotal"]').val();
        $container.find('[name="Discount"]').val('');
        $container.find('[name="OtherCharge"]').val('');
        $container.find('[name="Supproundoff"]').val('');
        $container.find('[name="NetAmount"]').val('');
        $container.find('[name="SuppNetAmount"]').val('');
        $container.find('[name="PayableAmount"]').val('');
        $container.find('[name="FK_PurchaseOrder"]').val('');
        $container.find('[name="AdvanceAmount"]').val('');
        $container.find('[name="BalAmt"]').val('');
        $container.find('[name="InvoiceItemCount"]').val('');
        $container.find('[name="EnteredBy"]').val('');
        $container.find('[name="EnteredOn"]').val('');
        $container.find('[name="InvoiceDate"]').val('');
        $container.find('[name="SupplierID"]').val('');
        $container.find('[name="SupplierName"]').val('');
        $container.find('[name="InvoiceNo"]').val('');

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        $thisForm.find('[perfect-tempTable-Payment]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');


    }
    function clearfield(ele) {

        let $container = $(ele).closest('[perfect-class="form"]');

        productclear(ele, 'Payment');
     //   $container.data({ pOthrChgData: null });
        $container.find('[name="BillTotal"]').val();
        $container.find('[name="Discount"]').val('');
        $container.find('[name="OtherCharge"]').val('');
        $container.find('[name="Supproundoff"]').val('');
        $container.find('[name="NetAmount"]').val('');
        $container.find('[name="SuppNetAmount"]').val('');
        $container.find('[name="PayableAmount"]').val('');
        $container.find('[name="FK_PurchaseOrder"]').val('');
        $container.find('[name="AdvanceAmount"]').val('');
        $container.find('[name="BalAmt"]').val('');
        $container.find('[name="InvoiceItemCount"]').val('');
        $container.find('[name="EnteredBy"]').val('');
        $container.find('[name="EnteredOn"]').val('');
        $container.find('[name="InvoiceDate"]').val('');
        $container.find('[name="SupplierID"]').val('');
        $container.find('[name="SupplierName"]').val('');
        $container.find('[name="InvoiceNo"]').val('');
        $container.data({ pPayment: null });
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        $thisForm.find('[perfect-tempTable-Payment]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');


    }


    function cleardepartmentdetails(ele) {


        let $container = $(ele).closest('[perfect-class="form"]');


        $container.find('[name=SuppID]').val('0');
        $container.find('[name=SuppName]').val('');

        productclear(ele, 'Payment');
       // $container.data({ pOthrChgData: null });
        $container.find('[name="BalAmt"]').val('0');
        $container.find('[name="Discount"]').val('');
        $container.find('[name="OtherCharge"]').val('');
        $container.find('[name="Supproundoff"]').val('');
        $container.find('[name="NetAmount"]').val('');
        $container.find('[name="SuppNetAmount"]').val('');
        $container.find('[name="PayableAmount"]').val('');
        $container.find('[name="FK_PurchaseOrder"]').val('');
        $container.find('[name="AdvanceAmount"]').val('');
        $container.find('[name="BalAmt"]').val('');
        $container.find('[name="InvoiceItemCount"]').val('');
        $container.find('[name="EnteredBy"]').val('');
        $container.find('[name="EnteredOn"]').val('');
        $container.find('[name="InvoiceDate"]').val('');
        $container.find('[name="SuppID"]').val('');
        $container.find('[name="SuppName"]').val('');
        $container.find('[name="InvoiceNo"]').val('');


    }

    function Getdepartmentbranchnamedefault() {
            let $thisForm = $('[perfect-class="form"]');
            $.ajax({
                url: '@Url.Action("GetEmployeeLeadDefault", "LeadGeneration")',
                type: "Get",
                dataType: "json",
                contentType: "application/json",
                success: function (ajaxOutput) {//<----- if ajax method executed succesfully,  we get the data passed from controller in this variable  => success: function (variable) {

                    if (ajaxOutput.Process.IsProcess) {

                        $.each(ajaxOutput.Data, function (key, value) {

                            console.log('>_ Search button > list click', value);


                            $thisForm.find('[name=BranchID]').val(value.ID_Branch).selectpicker('refresh');
                            $thisForm.find('[name=DepartmentID]').val(value.FK_Department).selectpicker('refresh');


                        });




                    }
                    else {
                        $.each(ajaxOutput.Process.Message, function (key, value) {
                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                        });
                    }

                },


            });
        }







    function fn_resetSupplierSettlement(ele) {
        SupplierSettlement_initialLoad();
    }

    function getfunction(ele,type) {
        debugger
	     var transtype;
        let $thisForm = $(ele).closest('[perfect-class="form"]');

        if (type != 2) {
            $thisForm.find('[name="PayAmtTot"]').val(0);
        }
        let amt = $thisForm.find('[name="PayAmtTot"]').val();
        let supp = $thisForm.find('[name="SuppID"]').val();

        if ($thisForm.find('[name="ddltransType"]').val() == 2) {
            if (supp > 0) {
                InputData =
                {
                    FK_Supplier: $thisForm.find('[name="SuppID"]').val(),
                    PayAmount: $thisForm.find('[name="PayAmtTot"]').val()

                }

                $.ajax({
                    url: "@Url.Action("GetSupplierPaymentdataFill", "SupplierSettlement")",
                    type: "Get",
                    data: InputData,
                    dataType: "json",
                    contentType: "application/json",
                    success: function (ajaxOutput) {

                        debugger
                        var CheckListHTML = '';
                        console.log('ajaxOutput.Process.IsProcess', ajaxOutput.Process.IsProcess)
                        if (ajaxOutput.Process.IsProcess) {

                            $('#Paymenttableid').show();
                            if (ajaxOutput.Data.length > 0) {

                                $.each(ajaxOutput.Data, function (i, value) {
                                    debugger
                                    let rowCount = (i + 1);
                                    let display = '';

                                    if (parseFloat($thisForm.find('[name="ddltransType"]').val()) == 2 && parseFloat($thisForm.find('[name="menulist"]').val()) == 0) {
                                        display = `Style='Display:none'`
                                    }
                                    else {
                                        display = `Style='Display:none'`
                                    }

                                    if (value.TransType > 0)
                                        transtype = 'Cr'
                                    else
                                        transtype = 'Dr'


                                    CheckListHTML += "<tr id=" + rowCount + ">";
                                    CheckListHTML += "<tr>";

                                    CheckListHTML += "<td class='jq_paymentDetcheckbox_td'><input id='chk2' type='checkbox' value='" + value.ID_Purchase + "' checked /></td>";
                                    CheckListHTML += "<td Class='jq_Mode_td' style='text-align:center'>" + value.Mode + "</td>";
                                    CheckListHTML += "<td Class='jq_Referencrno_td' style='text-align:center'>" + value.RefNo + "</td>";
                                    CheckListHTML += "<td class='jq_Invoicedate_td' style='text-align:center'>" + ConvertJsonDate(value.InvoiceDate) + "</td>";
                                    CheckListHTML += "<td Class='jq_suppliertranscationId' Style='Display:none'>" + value.ID_SupplierTransaction + "</td>";
                                    CheckListHTML += "<td class='jq_ID_Purchase'Style='Display:none'>" + value.ID_Purchase + "</td>";
                                    CheckListHTML += "<td class='jq_billtype_td'Style='Display:none'>" + value.FK_BillType + "</td>";
                                    CheckListHTML += "<td class='jq_invoicetype_td'Style='Display:none'>" + value.InvoiceType + "</td>";
                                    CheckListHTML += "<td class='jq_balanceamount_td_old' Style='Display:none'>" + (value.BalanceToPay).toFixed(2) + "</td>";
                                    CheckListHTML += "<td class='payAmount' style='text-align:right'><input type='text' class='form-control text-right' name='payAmount' id ='payAmountid oninput=decimalpnt(this,'payAmountid',3) onkeypress='return isNumberKey(event)' value='" + (value.PayableAmount).toFixed(2) + "' min='0'  maxlength='13' readonly/></td>";
                                    CheckListHTML += "<td class='jq_balanceamount_td' style='text-align:right'><input type='text' class='form-control text-right' onChange='fn_balanceamountCheck(this);' name='Balance' id='balanceid' oninput=decimalpnt(this,'balanceid',3) onkeypress='return isNumberKey(event)' value='" + (value.Amount).toFixed(2) + "' min='0.00'  maxlength='13' /></td>";
                                    CheckListHTML += "<td class='jq_discount_td' " + display + "><input type='text' class='form-control text-right' onChange='fn_discountamountCheck(this);' name='Discount' id='Discountid' oninput=decimalpnt(this,'Discountid',3)  onkeypress='return isNumberKey(event)' value='" + (value.Discount).toFixed(2) + "' min='0.00'  maxlength='13' /></td>";
                                    CheckListHTML += "<td class='jq_balancetopay_td' style='text-align:right'><input type='text' class='form-control text-right' name='BalanceToPay' id ='balancetopayid oninput=decimalpnt(this,'balancetopayid',3) onkeypress='return isNumberKey(event)' value='" + (value.BalanceToPay).toFixed(2) + "' min='0'  maxlength='13' readonly/></td>";
                                    CheckListHTML += "<td class='jq_TransType_td' style='text-align:left'>" + transtype + "</td>";
                                    CheckListHTML += "<td Class='jq_TransAmount_td' Style='Display:none'>" + value.TransType + "</td>";
                                    CheckListHTML += "</tr>";

                                });

                            }
                            else {
                                CheckListHTML += "<div class='form-group col-md-6'>";
                                CheckListHTML += "<div class='form-check mb-2'>";
                                CheckListHTML += "<label class='form-check-label' for='check1'>No Records...</label>";
                                CheckListHTML += "</div></div>"
                            }
                            $("#paymentdetailsbody").html(CheckListHTML)
                            console.log('table', $("#paymentdetailsbody").html(CheckListHTML));

                        }
                        else {
                            $.each(ajaxOutput.Process.Message, function (key, value) {
                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'No Records...' });
                            });

                        }
                        $("#paymentdetailsbody").html(CheckListHTML)

                        fillAmount(this)
                    }
                });
            } else {
                NotificationMessage({ 'type': 'info', 'heading': 'info', 'message': 'Please Select Supplier' });
            }
           
        }
    }
    function ConvertJsonDate(Jsondate) {
        var date = "";
        if (Jsondate != "" && Jsondate != null && Jsondate != undefined) {
            var dateString = Jsondate.substr(6);
            var currentTime = new Date(parseInt(dateString));
            var month = currentTime.getMonth() + 1;
            if (month <= 9) {
                month = "0" + month;
            }
            var day = currentTime.getDate();
            if (day <= 9) {
                day = "0" + day;
            }
            var year = currentTime.getFullYear();
            date = day + "/" + month + "/" + year;


        }
        return date;
    }


    function fn_discountamountCheck(element) {
        debugger
        var row = $(element).closest("tr");
        var balanceamt = row.find('.jq_balanceamount_td').find('input').val() == "" ? "0.00" : row.find('.jq_balanceamount_td').find('input').val();
        var balanceold = row.find('.jq_balanceamount_td_old').text();
        var balancetopay = row.find('.jq_balancetopay_td').find('input').val() == "" ? "0.00" : row.find('.jq_balancetopay_td').find('input').val();
        var discountamt = $(element).val() == "" ? "0.00" : $(element).val();
        if ((parseFloat(balanceamt) < parseFloat(discountamt)) || (parseFloat(balancetopay) == 0)) {
            //$(element).val(0.00);
            var topay = parseFloat(balanceold) - parseFloat(discountamt) - parseFloat(balanceamt);
            row.find('.jq_balancetopay_td').find('input').val(topay.toFixed(2));

        }

        else {
            var payto = parseFloat(balanceold) - parseFloat(balanceamt) - parseFloat(discountamt);
            row.find('.jq_balancetopay_td').find('input').val(payto.toFixed(2));
        }
        if ((parseFloat(balanceamt) == parseFloat(discountamt)) && (parseFloat(balancetopay) == parseFloat(discountamt) == parseFloat(balanceamt))) {

            var topays = parseFloat(balanceamt) - parseFloat(discountamt);
            row.find('.jq_balancetopay_td').find('input').val(topays.toFixed(2));
            row.find('.jq_discount_td').find('input').val(discountamt);
        }
        var sumcal = parseFloat(balanceamt) + parseFloat(discountamt);
        if (parseFloat(balanceold) == parseFloat(sumcal)) {
            row.find('.jq_discount_td').find('input').val(discountamt);

            row.find('.jq_balancetopay_td').find('input').val(0);
        }
        //else if ((parseFloat(balanceamt) == parseFloat(discountamt)) && (parseFloat(balanceamt) < parseFloat(balanceold)) && (parseFloat(discountamt) < parseFloat(balanceold))) {
        //    let DiffAmount = parseFloat(balanceold) - parseFloat(discountamt);
        //    let CurrentAmount = parseFloat(balanceamt) - parseFloat(DiffAmount);
        //    row.find('.jq_balanceamount_td').find('input').val(Number(CurrentAmount).toFixed(2));
        //}
        else if (parseFloat(balanceold) < parseFloat(discountamt) || parseFloat(balanceold) < parseFloat(sumcal)) {

            row.find('.jq_discount_td').find('input').val(Number(balanceold).toFixed(2));
            row.find('.jq_balanceamount_td').find('input').val(Number(0).toFixed(2));
            row.find('.jq_balancetopay_td').find('input').val(Number(0).toFixed(2));
        }

        calculatetotals(element);

    }

    function fillAmount(ele) {
        debugger
        let totalBalance = 0; 
        $('#paymentdetailsbody tr').each(function (i, row) {
            debugger    
            let balanceAmountText = $(row).find('.jq_balanceamount_td').find('input').val();
            if (!isNaN(parseFloat(balanceAmountText))) {
                let balanceAmount = parseFloat(balanceAmountText);
                totalBalance += balanceAmount;
            }
        });

        let $thisForm = $('[perfect-class="form"]');
        $thisForm.find('[name="TotalAmount"]').val(totalBalance);
        $thisForm.find('[name="PayAmtTot"]').val(0);
    }




    function fn_balanceamountCheck(element) {

        debugger
        var row = $(element).closest("tr");
        var balanceold = row.find('.jq_balanceamount_td_old').text();
        var balancetopay = row.find('.jq_balanceamount_td_old').text();
        var payamount = row.find('.payAmount').find('input').val();
        var balanceamt = $(element).val() == "" ? "0.00" : $(element).val();
        balanceold = payamount;
        var discountamt = row.find('.jq_discount_td').find('input').val() == "" ? "0.00" : row.find('.jq_discount_td').find('input').val();


        if ((parseFloat(balanceamt) < parseFloat(discountamt)) || (parseFloat(balanceold) < parseFloat(balanceamt))) {

            var payto = parseFloat(balancetopay) - parseFloat(balanceold) - parseFloat(discountamt);
            row.find('.jq_balanceamount_td').find('input').val(balanceold);
            row.find('.jq_balancetopay_td').find('input').val(payto.toFixed(2));
        }
        //else if (parseFloat(balanceamt) > parseFloat(discountamt)) {
        //    var payto = parseFloat(balanceold) - parseFloat(balanceamt) - parseFloat(discountamt) ;
        //    row.find('.jq_balancetopay_td').find('input').val(payto.toFixed(2));
        //}
        else {
            var payto = parseFloat(balanceold) - parseFloat(balanceamt) - parseFloat(discountamt);
            row.find('.jq_balancetopay_td').find('input').val(payto.toFixed(2));
        }
        //if (parseFloat(balanceamt) == parseFloat(discountamt)) {

        //    var topays = parseFloat(balanceamt) - parseFloat(discountamt);
        //    row.find('.jq_balancetopay_td').find('input').val(topays.toFixed(2));
        //    row.find('.jq_discount_td').find('input').val(discountamt);
        //}
        if (parseFloat(balanceamt) == 0) {

            var paytos = parseFloat(balanceold) - parseFloat(discountamt);
            row.find('.jq_balancetopay_td').find('input').val(paytos.toFixed(2));

        }

        var sumcal = parseFloat(balanceamt) + parseFloat(discountamt);
        if (parseFloat(balanceold) == parseFloat(sumcal)) {
            row.find('.jq_balanceamount_td').find('input').val(Number(balanceamt).toFixed(2));

            row.find('.jq_balancetopay_td').find('input').val(0);
        }
        //else if ((parseFloat(balanceamt) == parseFloat(discountamt)) && (parseFloat(balanceamt) < parseFloat(balanceold)) && (parseFloat(discountamt) < parseFloat(balanceold))){
        //    let DiffAmount = parseFloat(balanceold) - parseFloat(balanceamt);
        //    let CurrentDis = parseFloat(discountamt) - parseFloat(DiffAmount);
        //    row.find('.jq_discount_td').find('input').val(Number(CurrentDis).toFixed(2));
        //}
        else if (parseFloat(balanceold) < parseFloat(balanceamt) || parseFloat(balanceold) < parseFloat(sumcal)) {
            row.find('.jq_balanceamount_td').find('input').val(Number(balanceold).toFixed(2));
            row.find('.jq_discount_td').find('input').val(Number(0).toFixed(2));
            row.find('.jq_balancetopay_td').find('input').val(Number(0).toFixed(2));
        }
        calculatetotals(element);


    }

    function fn_balanceamountCheck1(element) {

        debugger
        var row = $(element).closest("tr");
        var balanceold = row.find('.jq_balanceamount_td_old').text();
        var balancetopay = row.find('.jq_balanceamount_td_old').text();
        var balanceamt = $(element).val() == "" ? "0.00" : $(element).val();
        var discountamt = row.find('.jq_discount_td').find('input').val() == "" ? "0.00" : row.find('.jq_discount_td').find('input').val();
        if ((parseFloat(balanceamt) < parseFloat(discountamt)) || (parseFloat(balanceold) < parseFloat(balanceamt))) {

            var payto = parseFloat(balancetopay) - parseFloat(balanceold) - parseFloat(discountamt);
            row.find('.jq_balanceamount_td').find('input').val(balanceold);
            row.find('.jq_balancetopay_td').find('input').val(payto.toFixed(2));
        }
        else {
            var payto = parseFloat(balanceold) - parseFloat(balanceamt) - parseFloat(discountamt);
            row.find('.jq_balancetopay_td').find('input').val(payto.toFixed(2));
        }
        if (parseFloat(balanceamt) == parseFloat(discountamt)) {

            var topays = parseFloat(balanceamt) - parseFloat(discountamt);
            row.find('.jq_balancetopay_td').find('input').val(topays.toFixed(2));
            row.find('.jq_discount_td').find('input').val(discountamt);
        }
        if (parseFloat(balanceamt) == 0) {

            var paytos = parseFloat(balanceold) - parseFloat(discountamt);
            row.find('.jq_balancetopay_td').find('input').val(paytos.toFixed(2));

        }

        var sumcal = parseFloat(balanceamt) + parseFloat(discountamt);
        if (balanceold == sumcal) {
            row.find('.jq_balanceamount_td').find('input').val(balanceamt);

            row.find('.jq_balancetopay_td').find('input').val(0);
        }
        calculatetotals(element);


    }




    $("#Paymentdetailsid tbody").on("change", ".jq_paymentDetcheckbox_td", function () {
        calculatetotals(this);
    });




    function calculatetotals(ele) {
        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');


        var totalamount = 0;
        var totaldiscount = 0;
		//var Tot=0;
		var creditBalance=0;
		var debitBalance=0
		var TrType="";
		var creditTotal=0;
		var debitTotal=0;
        $('#Paymentdetailsid').find('tbody tr').each(function (index, ele) {
            if ($($(ele).find("input[type='checkbox']")).is(":checked") == true) {
			     console.log(ele,'ele');
			var	Tot= parseFloat(($(ele).find('.jq_balanceamount_td').find('input').val()) == ""?"0.00": ($(ele).find('.jq_balanceamount_td').find('input').val()));

				if ($(ele).find('.jq_TransType_td').text() === 'Cr') {
				creditTotal += Tot;
				//alert(debitBalance);
					}
					if ($(ele).find('.jq_TransType_td').text() === 'Dr'){
					debitTotal += (-Tot);

					}

		  }


        });

		creditBalance += creditTotal;
		debitBalance += debitTotal;
		var totalamount= parseFloat(creditBalance) + parseFloat(debitBalance);
		if(creditBalance+debitBalance<0)
		TrType='Dr'
		else
		TrType='Cr'
		//SUM(creditbalace)+SUM(debitBalance)
        $thisForm.find('[name=TotalAmount]').val(Math.abs(totalamount).toFixed(2)+TrType);
        $thisForm.find('[name=TotalDiscount]').val(totaldiscount.toFixed(2));

    }



    function isNumberKey(evt) {
        var charCode = (evt.which) ? evt.which : event.keyCode
        if (charCode > 31 && (charCode < 46 || charCode > 57))
            return false;

        return true;
    }
    function decimalpnt(ele, name, range, md) {
        debugger
        if (md == 1) {
            ele = $(this).find('[perfect-class="form"]');
        }
        let input = $('#' + name);
        ele.value = ele.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');
        let t = ele.value;
        ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t;
        input.on('keydown', function () {
            if (ele.value.includes('.')) {

            }
            var key = event.keyCode || event.charCode;
            if (key == 8 || key == 46) { }
            else {
                if (ele.value.length == 9) {
                    ele.value = ele.value + '.';
                }
            }

        });

    }
    function fn_showimportlists(ele) {
        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');

       $thisForm = $(ele).closest('[perfect-class="form"]');

        switch (parseInt($thisForm.find('[name="ddlimportfrom"]').val()))
        {
            case 1:
                GetCmnPopUpSearchValAssign(ele, 66, 'Purchase Order List', [], ['ImportID', 'SuppID', 'BranchID', 'DepartmentID', 'InvoiceNo', 'InvoiceDate', 'InvoiceItemCount', 'EnteredBy', 'EnteredOn', 'NetAmount', 'NetAmounts1R', 'SuppName', 'AdvanceAmount', 'SSTransMode','SuppNetAmount'], SupplierSettlementTransMode);


                break;
            case 2:
                GetCmnPopUpSearchValAssign(ele, 65, 'Purchase List', [], ['ImportID', 'SuppID', 'BranchID', 'DepartmentID', 'InvoiceNo', 'InvoiceDate', 'SuppName', 'InvoiceItemCount', 'EnteredBy', 'EnteredOn', 'NetAmount', 'NetAmounts1R', 'OtherCharge', 'SSTransMode', 'Discount', 'Supproundoff', 'SuppNetAmount', 'AdvanceAmount'], SupplierSettlementTransMode);

                break;
            case 3:

                GetCmnPopUpSearchValAssign(ele, 67, 'Purchase Return List', [], ['ImportID', 'SuppID', 'BranchID', 'DepartmentID', 'InvoiceNo', 'InvoiceDate', 'SuppName', 'InvoiceItemCount', 'PrInvoiceDate', 'EnteredBy', 'EnteredOn', 'NetAmount', 'NetAmounts1R', 'OtherCharge', 'SSTransMode', 'Discount', 'Supproundoff','SuppNetAmount'], SupplierSettlementTransMode);

                break;
            default:
                NotificationMessage({ 'type': 'info', 'heading': 'info', 'message': 'Please Select Import From' });
                break;


        }



    }

    function fun_imports(ele) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        $thisForm.find('[name="Discount"]').attr('readonly', false);
        $('#searchButtonother').show();

        if ($thisForm.find('[name="ddlimportfrom"]').val() == 1) {
            $thisForm.find('[name="Discount"]').attr('readonly', true);

            $thisForm.find('[name="Supproundoff"]').attr('readonly', true);
            $('#searchButtonother').hide();

            $('.DivAdvanceAmount').show();
        }
        else if ($thisForm.find('[name="ddlimportfrom"]').val() == 2) {
            $('.DivAdvanceAmount').show();
        }
        else {

            $('.DivAdvanceAmount').hide();
        }


        tax = [];
        othrchargelst = [];
        OtherCharge = [];

        $thisForm.data({ pDatas: null });
        $thisForm.data({ pData: null });
        $thisForm.data({ pDataTax: null });

        $thisForm.data({ pTranstype: null });
        $thisForm.data({ pPurchaseproduct: null });
        $thisForm.data({ prtTaxData: null });
        $thisForm.data({ prtothchgData: null });
      // $thisForm.data({ pOthrChgData: null });
        let $Ptblcontainer = $thisForm.find('[perfect-tempTable="Payment"]');
        $Ptblcontainer.empty();
        $thisForm.find('[name=BalAmt]').text('');
        $thisForm.data({ pPayment: null });

        $thisForm.data({ quantitydata: '' });
        $thisForm.data({ pdiscdata: '' });
        $thisForm.data({ saldisdata: '' });


        $thisForm.find('[name="BillTotal"]').val('');
        $thisForm.find('[name="Discount"]').val('');
        $thisForm.find('[name="OtherCharge"]').val('');
        $thisForm.find('[name="RoundOff"]').val('');
        $thisForm.find('[name="NetAmount"]').val('');
        $thisForm.find('[name="PayableAmount"]').val('');
        $thisForm.find('[name="FK_PurchaseOrder"]').val('');
        $thisForm.find('[name="AdvanceAmount"]').val('');
        $thisForm.find('[name="InvoiceItemCount"]').val('');
        $thisForm.find('[name="EnteredBy"]').val('');
        $thisForm.find('[name="EnteredOn"]').val('');
        $thisForm.find('[name="InvoiceDate"]').val('');
        $thisForm.find('[name="SupplierID"]').val('');
        $thisForm.find('[name="SupplierName"]').val('');
        $thisForm.find('[name="InvoiceNo"]').val('');
        $thisForm.find('[name="PAmount"]').val('');
        $thisForm.find('[name="SuppNetAmount"]').val('');
        $thisForm.find('[name="NetAmounts"]').val('');
        $thisForm.find('[name="Supproundoff"]').val('');


    }

    function salroundoff(ele) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let salroundof = $thisForm.find('[name="Supproundoff"]').val() == "" ? 0 : $thisForm.find('[name="Supproundoff"]').val();
        if (salroundof != "" || salroundof != null) {
            $thisForm.find('[name=Supproundoff]').val(parseFloat(salroundof).toFixed(2));

            let biltl = 0;
            let otherchg = 0;
            let saldisc = 0;

            let netat = 0;
            let advamt = 0;
            let netamt = 0;

            biltl = $thisForm.find('[name="NetAmount"]').val() == "" ? "0" : $thisForm.find('[name="NetAmount"]').val();
            otherchg = $thisForm.find('[name="OtherCharge"]').val() == "" ? "0" : $thisForm.find('[name="OtherCharge"]').val();
            saldisc = $thisForm.find('[name="Discount"]').val() == "" ? "0" : $thisForm.find('[name="Discount"]').val();
            advamt = $thisForm.find('[name="AdvanceAmount"]').val() == "" ? "0" : $thisForm.find('[name="AdvanceAmount"]').val();


            if (saldisc == biltl) {

                $thisForm.find('[name=SuppNetAmount]').val(saldisc.toFixed(2));

            }
            else {

                netat = parseFloat(biltl) + parseFloat(otherchg) - parseFloat(saldisc) + parseFloat(salroundof);
                netamt = netat - parseFloat(advamt);


                $thisForm.find('[name=SuppNetAmount]').val(netamt.toFixed(2));
            }



            let billamt = 0;
            let bilamt = 0;

            if ($thisForm.find('[name=BalAmt]').text() == '') {
                bilamt = 0;
            }
            else {
                bilamt = netamt;
            }

            $('#Paymentdethead').find('tbody tr').each(function (index, ele) {
                billamt += parseFloat($(ele).find('.PAmount').text());

            });

            bilamt = parseFloat(bilamt) - billamt;

            $thisForm.find('[name=BalAmt]').text(bilamt.toFixed(2));

        }
    }
    function RoundOffCalcTotal(ele) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let RoundOff = $thisForm.find('[name=Supproundoff]').val() == "" ? "0" : $thisForm.find('[name=Supproundoff]').val();
        let BillTotal = $thisForm.find('[name=NetAmount]').val() == "" ? "0" : $thisForm.find('[name=NetAmount]').val();
        let OtherCharge = $thisForm.find('[name=OtherCharge]').val() == "" ? "0" : $thisForm.find('[name=OtherCharge]').val();
        let Discount = $thisForm.find('[name=Discount]').val() == "" ? "0" : $thisForm.find('[name=Discount]').val();
        let AdvanceAmount = $thisForm.find('[name=AdvanceAmount]').val() == "" ? "0" : $thisForm.find('[name=AdvanceAmount]').val();


        let Total = parseFloat(BillTotal) + parseFloat(OtherCharge) + parseFloat(RoundOff) - parseFloat(Discount) - parseFloat(AdvanceAmount);

        if (parseFloat(BillTotal) == parseFloat(Discount)) {
            $thisForm.find('[name=SuppNetAmount]').val(Discount.toFixed(2));
        }


        else {
            $thisForm.find('[name=SuppNetAmount]').val(Total.toFixed(2));
        }


        let amount = $thisForm.find('[name=SuppNetAmount]').val(Total.toFixed(2));
        $thisForm.find('[name=BalAmt]').val(amount);

    }

    function productclear(ele, tablekey) {

        let $thisform = $(ele).closest('[perfect-class="form"]');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="select"]').val('').selectpicker('refresh');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="date"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="hidden"]').val('');

        let $tblcontainer = $thisform.find('[perfect-tempTable="' + tablekey + '"]');
        $tblcontainer.attr('perfect-tempTable-action', 0);

     if (tablekey = "Payment") {

        }
    }
    function getfunctionAssign(ele) {

        debugger


        initialloadroundof(ele);




        fn_showOtherCharges(ele,1);

        productclear(ele, 'Payment');
    }


    var othrchargelst = [];

    function fn_showOtherCharges(element,ID) {

         let $thisForm = $(element).closest('[perfect-class="form"]');
         groupid = $thisForm.find('[name=SupplierSettlementID]').val();
         idimport = $thisForm.find('[name="ImportID"]').val();
         idsuppliertransactionid = $thisForm.find('[name="SupplierSettlementID"]').val();
         idInvoicetype = $thisForm.find('[name="ddlimportfrom"]').val();
         let inputData;
         if (groupid == 0) {
             inputData = {
                 __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                 ImportID: idimport,
                 ddlimportfrom: idInvoicetype,

             };
         }
         else {
             inputData = {
                 __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                 ImportID: groupid,
                 ddlimportfrom: 0,

             };
         }
        let $dropDownList = [];

        $.ajax({
        url: "@Url.Action("GetOtherchargeInfoNew", "SupplierSettlement")",
                type: "POST",
                data: inputData,
                dataType: "json",
                contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            success: function (ajaxOutput)            {


                if (ajaxOutput.OtherCharge.Process.IsProcess) {

                    var CheckListHTML = '';
                    let sum = 0;
                    let $tempArr = $thisForm.data('pOthrChgData');

                    if (ajaxOutput.OtherCharge.Data.length > 0) {
                        let othechg = ajaxOutput.OtherCharge.Data;
                        $.each(ajaxOutput.OtherCharge.Data, function (i, value) {

                            let options = ''

                            $tempArr = $tempArr.concat(othechg);

                            if ($tempArr.length > 0) {
                                $.each($tempArr, function (key, valueTemp) {
                                    if (valueTemp.ID_OtherChargeType == value.ID_OtherChargeType) {

                                        value.OctyAmount = valueTemp.OctyAmount;
                                        $.each(ajaxOutput.Transtypelist.Data, function (i, valuea) {

                                                if (parseInt(valuea.TransTypeID) == parseInt(valueTemp.OctyTransType)) {
                                                    if (valuea.TransTypeID != 0) {
                                                        if (valuea.TransTypeID == 1) {
                                                            valuea.TransType = "Payment";
                                                        } else if (valuea.TransTypeID == 2) {

                                                            valuea.TransType = "Receipt";
                                                        }



                                                        let optionValue = '<option value=' + valuea.TransTypeID + ' selected="selected">' + valuea.TransType + '</option>';
                                                        if (!$dropDownList.includes(optionValue)) {
                                                            $dropDownList.push(optionValue)
                                                        }
                                                    }
                                                }
                                                else {
                                                    if (valuea.TransTypeID != 0) {
                                                        if (valuea.TransTypeID == 1) {
                                                            valuea.TransType = "Payment";
                                                        } else if (valuea.TransTypeID == 2) {
                                                            valuea.TransType = "Receipt";
                                                        }
                                                        let optionValue = '<option value=' + valuea.TransTypeID + '>' + valuea.TransType + '</option>';
                                                        if (!$dropDownList.includes(optionValue)) {
                                                            $dropDownList.push(optionValue)
                                                        }
                                                    }

                                                }

                                        });
                                    }
                                });
                            }
                            else {

                                $.each(ajaxOutput.Transtypelist.Data, function (i, valuea) {
                                    if (valuea.TransTypeID != 0) {
                                        if (valuea.TransTypeID == 1) {
                                            valuea.TransType = "Payment";
                                        } else if (valuea.TransTypeID == 2) {
                                            valuea.TransType = "Receipt";
                                        }
                                        let optionValue = '<option value=' + valuea.TransTypeID + '>' + valuea.TransType + '</option>';
                                        if (!$dropDownList.includes(optionValue)) {
                                            $dropDownList.push(optionValue)
                                        }
                                    }
                                });
                            }


                            $.each($dropDownList, function (i, value) {
                                options += value;
                            });

                            $dropDownList = [];
                            let $dropdown = '<select class="form-control" >' + options + '</select>';
                            sum = sum + parseFloat(value.OctyAmount);
                            CheckListHTML += "<tr>";
                            CheckListHTML += "<td>" + value.SlNo + "</td>";
                            CheckListHTML += "<td Class='jq_ID_OtherChargeType_td' Style='Display:none'>" + value.ID_OtherChargeType + "</td>";
                            CheckListHTML += "<td Class='jq_Type_td'>" + value.OctyName + "</td>";
                            CheckListHTML += "<td class='jq_TransType_td'>" + $dropdown + "</td>";
                            CheckListHTML += "<td class='jq_OtherChagAmnt_td' ><input  class='form-control text-right' type='number'  value='" + value.OctyAmount + "' ' /></td> /></td>";
                            CheckListHTML += "</tr>";


                        });
                    }
                    else {
                        CheckListHTML += "<div class='form-group col-md-6'>";
                        CheckListHTML += "<div class='form-check mb-2'>";
                        CheckListHTML += "<label class='form-check-label' for='check1'>No Records...</label>";
                        CheckListHTML += "</div></div>"
                    }
                    $("#formGroupModalOtherChargebody").html(CheckListHTML)
                    if (ID == 1) {

                        $('#formGroupModalOtherCharge').modal('hide');
                    }
                    else {

                        $('#formGroupModalOtherCharge').modal('show');
                    }

                }
                else {
                    $.each(ajaxOutput.OtherCharge.Process.Message, function (key, value) {
                        NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'No Data Found'});
                    });
                }
            },
            complete: function ()
            {
                $(element).prop('disabled', false);
                $('select').selectpicker('refresh');
            }
        });
    }






    var otherchgcalled = 0;
    function BindOtherChargeAmount(ele) {

        console.log('inside binddatat fn')
        let $modal = $(ele).closest('.modal');
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let sum = 0;
        othrchargelst = [];
        $modal.find('table tbody').find('tr').each(function () {

            let value = parseFloat($(this).find('.jq_OtherChagAmnt_td').find('input').val());;
            if ($(this).find('.jq_OtherChagAmnt_td').find('input').val() == '' || $(this).find('.jq_OtherChagAmnt_td').find('input').val() == null) {
                value = 0;
            }
            if ($thisForm.find('[name="ddlimportfrom"]').val() == 3) {
                if (parseInt($(this).find('.jq_TransType_td').find('select').val()) == 0) {
                    value = value * 0;
                }

                else if (parseInt($(this).find('.jq_TransType_td').find('select').val()) == 1) {
                    value = value * -1;
                }
                else {
                    value = value * 1;
                }
                sum = sum + value;

            }
            else {
                if (parseInt($(this).find('.jq_TransType_td').find('select').val()) == 0) {
                    value = value * 0;
                }

                else if (parseInt($(this).find('.jq_TransType_td').find('select').val()) == 1) {
                    value = value * 1;
                }
                else {
                    value = value * -1;
                }
                sum = sum + value;
            }

            //sum = sum + value;

            let othrcharge = {
                ID_OtherChargeType: $(this).find('.jq_ID_OtherChargeType_td').text(),
                OctyTransType: $(this).find('.jq_TransType_td').find('select').val(),
                OctyAmount: parseFloat($(this).find('.jq_OtherChagAmnt_td').find('input').val())
            };
            othrchargelst.push(othrcharge);
            $thisForm.data({ pOthrChgData: othrchargelst });
            console.log('othrchargelst', othrchargelst)

        });

        $thisForm.find('[name=OtherCharge]').val(sum);
        roundof(ele);
        let tempArr = $thisForm.data('pOthrChgData')
        if (parseInt(tempArr.length) > 0) {
            tempArr.map(val => {
                let OtChargeinfo = {};
                OtChargeinfo['ID_OtherChargeType'] = val.ID_OtherChargeType;
                OtChargeinfo['OctyTransType'] = val.OctyTransType;
                OtChargeinfo['OctyName'] = val.OctyName;
                OtChargeinfo['OctyAmount'] = val.OctyAmount;
                othrchargelst.push(OtChargeinfo);
            });
            if ($thisForm.data('pOthrChgData').length > 0) {
                if (otherchgcalled = 0) {
                    othrchargelst = $thisForm.data('pOthrChgData');
                }
            }
            $thisForm.data({ pOthrChgData: othrchargelst });
        }
    }



    function decimalpnt(ele, id, range) {

        let input = $('#' + id);
        ele.value = ele.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');
        let t = ele.value;
        ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t;
        input.on('keydown', function () {
            if (ele.value.includes('.')) {

            }
            var key = event.keyCode || event.charCode;
            if (key == 8 || key == 46) { }
            else {
                if (ele.value.length == 9) {
                    ele.value = ele.value + '.';
                }
            }

        });

    }

    function decimalpntminus(ele, id, range) {

        let input = $('#' + id);
        ele.value = ele.value.replace(/[^0-9.-]/g, '').replace(/(\..*)\./g, '$1');
        let t = ele.value;
        ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t;
        input.on('keydown', function () {
            if (ele.value.includes('.')) {

            }
            var key = event.keyCode || event.charCode;
            if (key == 8 || key == 46) { }
            else {
                if (ele.value.length == 8) {
                    ele.value = ele.value + '.';
                }
            }

        });

    }

    function GetPaymentlists(ele) {
        $('#formGroupModalpayment').modal({ backdrop: 'static', keyboard: false })

        $('#formGroupModalpayment').modal('show');

    }

    function Billttlnetchck(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');

        let balamt = $thisForm.find('[name=BalAmt]').text();


        if (parseFloat(balamt) == 0) {
            $('#formGroupModalpayment').modal('hide');
            $thisForm.find('[perfect-tempTable="Payment"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
        }
        else {

            $thisForm.find('[perfect-tempTable="Payment"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('Balance Amt. should be Zero');

        }
    }



    var paytableOptionsTempOut = {
        iconButton: {
            buttons: [

                {
                    icon: "fa fa-pencil btnPerfectGridEdit",
                    class: "btnPerfectGridEdit",
                    action: function () {
                        let savedData = $(this).closest('tr').data('pData')

                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let tableKey = $tablecontainer.attr('perfect-tempTable');
                        let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                        //index attribute name in table row
                        let indexname = tableKey + 'index';

                        //index number in table row
                        let rindex = $(this).closest('tr').attr(indexname);

                        $tablecontainer.attr('perfect-tempTable-action', rindex);

                        console.log('Editclick', savedData);
                        //filling data in available inputs
                        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                            let $thisNode = $(this);
                            let pf_name = $thisNode.attr('name');
                            if ($thisNode.is('select')) {

                                $thisNode.val(savedData[pf_name]).selectpicker('refresh');

                            }
                            else if ($thisNode.is('input')) {
                                let inputType = $thisNode.attr('type').toLocaleLowerCase();
                                if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                    $thisNode.prop('checked', savedData[pf_name]);
                                }

                                else {

                                    $thisNode.val(savedData[pf_name]);
                                }

                            }
                            else {
                                $thisNode.val(savedData[pf_name]);
                            }


                        });



                    }
                },
                {
                    icon: "fa fa-trash btnPerfectGridDelete",
                    class: "btnPerfectGridDelete",
                    action: function () {
                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let $thistbl = $(this).closest('table');
                        let table = $thistbl.DataTable();
                        table.destroy();
                        if ($(this).closest('tbody').find('tr').length > 1) {
                            $(this).closest('tr').remove();
                            pft_table_slreset($thistbl);
                            //$thistbl.dataTable({ paging: true, searchbtn: false });
                        }
                        else {
                            $thistbl.remove();
                        }
                        $('#refresh').click();
                        BillAmountbind($tablecontainer);
                    }
                },
            ]
        },

        rowAttribute: [],
        onlyShowColumn: ['PAmount', 'Refno', 'PaymentMethod_d'],
        renameHeader: { "PAmount": "Amount1R", "Refno": "Ref No", "PaymentMethod_d": "Method" },
        hideColumn: ['BalAmt'],
        serialNo: true,

    };

    function Pamount(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let amtp = $thisForm.find('[name="PAmount"]').val() == "" ? "0" : $thisForm.find('[name="PAmount"]').val();
        $thisForm.find('[name="PAmount"]').val(parseFloat(amtp).toFixed(2));
        //salroundoff(ele);
    }

    //function changetranstype(ele) {

    //    var $listDropdown = $('#menulist');
    //    var selectedValue = $listDropdown.val();

    //     Clear the existing newDropdownContainer
    //    $('#newDropdownContainer').empty();

    //    if (selectedValue === "1") {
    //        var newDropdown = $('<select class="form-control perfectValidate_string" id="newDropdown" name="newDropdown" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" onchange="fn_newDropdown(this)">');

    //        newDropdown.append('<option value="">Please Select</option>');
    //        newDropdown.append('<option value="3">Option 3</option>');
    //        newDropdown.append('<option value="4">Option 4</option>');

    //        $('#newDropdownContainer').append(newDropdown);
    //    }
    //}


    function changetranstype(ele) {
        debugger

        var selectedValue = $(ele).val();
        $('#ddltransTypeID').html(""); var opthtml = "";
        if (selectedValue === "1") {
            opthtml = "<option value=''>Please Select </option>"+
               //" <option value='1'>Purchase authorize</option>"+
                "<option value='2'>Payment</option>";
            //$('#ddltransTypeID option[value="1"]').remove();
        } else {
            opthtml = "<option value=''>Please Select </option>" +
                " <option value='1'>Purchase authorize</option>"+
                "<option value='2'>Payment</option>";

        } $('#ddltransTypeID').append(opthtml);
        $('#ddltransTypeID').selectpicker('refresh');
    }



    function validpaymntdetail(ele, tableKey, errorClass, isValid) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').val() == null) {

            isValid = false;
            console.log('false', $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').val());
            $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Payment Method');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }

        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="PAmount"]').val() < 1) {
            console.log('false', $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').val());
            isValid = false;

            $thisForm.find('[perfect-tempTable-' + tableKey + '="PAmount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please enter a value greater than or equal to 1');
        }
        else {

            $thisForm.find('[perfect-tempTable-' + tableKey + '="PAmount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }


        return isValid;

    }
    function fillgrid(tablk, wartableOptionsTempOut, $thisForm, data) {
        let tableOptionsTemp = wartableOptionsTempOut;
        let insertData = [];
        let tableKey = tablk;
        let indexname = tableKey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');
        $.each(data, function (keyOne, valOne) {
            let pData = {};
            pData[indexname] = keyOne + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', pData[indexname])
            //---

            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                //console.log('name', valOne[nameAttr])
                if (typeof valOne[nameAttr] !== undefined) {

                    if ($this.is('select')) {
                        //tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                        tableOptionsTemp.hideColumn.push(nameAttr);
                        //displat text of select
                        pData[nameAttr + '_d'] = $this.find('[value="' + valOne[nameAttr] + '"]').text();
                        pData[nameAttr] = valOne[nameAttr];
                        console.log('select', $this.find('options[value="' + valOne[nameAttr] + '"]').text());

                    }
                    else if ($this.is('input')) {

                        pData[nameAttr] = valOne[nameAttr];

                    }

                }

            });

            insertData.push(pData);
            console.log('pData', pData)
            console.log('insertData', insertData)
            //----

        });
        $tblcontainer.empty();
        $tblcontainer.append(pft_table_createtable(insertData, tableOptionsTemp));

    }

    function fillTableSales(ele, tkey, data, tableOptionsTempOut) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let tableOptionsTempfill = tableOptionsTempOut;
        let insertData = []
        let tableKey = tkey;
        let indexname = tkey + 'index';
        tableOptionsTempfill.rowAttribute.push(indexname);
        tableOptionsTempfill.hideColumn.push(indexname);
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');
        $.each(data, function (keyOne, valOne) {

            let pData = {};

            pData[indexname] = keyOne + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', pData[indexname])
            //---

            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                //console.log('tfhyrtname', nameAttr)
                if (typeof valOne[nameAttr] !== undefined) {

                    if ($this.is('select')) {
                        // tableOptionsTempfill.renameHeader[nameAttr + '_d'] = headerName;
                        tableOptionsTempfill.hideColumn.push(nameAttr);
                        //displat text of select
                        pData[nameAttr + '_d'] = $this.find('[value="' + valOne[nameAttr] + '"]').text();
                        pData[nameAttr] = valOne[nameAttr];
                        console.log('select', $this.find('options[value="' + valOne[nameAttr] + '"]').text());

                    }
                    else if ($this.is('input')) {

                        let inputType = $this.attr('type').toLocaleLowerCase();
                        console.log(inputType)


                        if (inputType == 'date') {

                            if (valOne[nameAttr] == null) {
                                pData[nameAttr] = valOne[nameAttr];
                            }
                            else {
                                pData[nameAttr] = moment(valOne[nameAttr]).format('YYYY-MM-DD');
                            }


                        }
                        else {
                            pData[nameAttr] = valOne[nameAttr];


                        }
                    }
                    else {
                        pData[nameAttr] = valOne[nameAttr];


                    }
                }



            });

            insertData.push(pData);


            //----

        });
        $tblcontainer.empty();
        $tblcontainer.append(pft_table_createtable(insertData, tableOptionsTempfill));

    }

    function createtable(ele, tkey, uniq = [], tableOptionsTempOut) {

        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let tableKey = tkey;
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');

        let insertData = {};
        let tableOptionsTemp = tableOptionsTempOut;
        console.log('tableOptionsTemp', tableOptionsTemp)
        let unique = (uniq) ? uniq : [];

        let isValid = true;
        let errorClass = '.temptableError';

        //make index
        console.log('check 1');

        let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
        let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
        let indexname = tkey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);
        console.log('tableOptionsTemp.rowAttribute', tableOptionsTemp.rowAttribute)
        let updateCond = '';
        let isNew = true;

        if (thisactionIndex > 0) {
            //means update
            insertData[indexname] = thisactionIndex;
            updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
            isNew = false;
        }
        else {
            //insert
            insertData[indexname] = lastIndex + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
            isNew = true;
        }
        //
        if (tableKey == 'Warranty') {

            isValid = validwartdetail(ele, tableKey, errorClass, isValid);
        }
        else if (tableKey == 'Payment') {
            isValid = validpaymntdetail(ele, tableKey, errorClass, isValid);
        }
        else if (tableKey == 'Purchase') {
            isValid = validsaledetail(ele, tableKey, errorClass, isValid);
        }

        if (unique.length > 0) {
            //getting previous data
            let prevData = [];
            $tblcontainer.find('table > tbody').find('tr').each(function () {
                if (isNew) {
                    prevData.push($(this).data('pData'));
                }
                else {
                    if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                        prevData.push($(this).data('pData'));
                    }

                }

            })
            console.log('previous data', prevData);

            unique.forEach(function (key, i) {
                console.log('unid -> key:' + key + "| index :" + i);
                let $thisEle = $thisForm.find('[perfect-tempTable-' + tableKey + '="' + key + '"]');
                // let headerEleName = $thisForm.find('[name="lblProName"]').text();
                let atname = $thisEle.attr('name');
                let cvalue;
                console.log('atname', atname);
                console.log('$thisEle.length', $thisEle.length);
                if ($thisEle.length != 0) {
                    console.log('len', $thisEle)
                    let $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
                    let errmessage = key + " Already exits"

                    //getting current value in cval
                    if ($thisEle.is('select')) {
                        cvalue = $thisEle.val();
                        //alert(cvalue);
                    }
                    else if ($thisEle.is('input')) {

                        let inputEleType = $thisEle.attr('type').toLocaleLowerCase();

                        if (inputEleType == 'checkbox') { cvalue = $thisEle.is(':checked'); }
                        else if (inputEleType == 'hidden') { cvalue = $thisEle.val(); console.log('cvalue ->', cvalue); }
                        else { cvalue = $thisEle.val(); }
                    }
                    else { cvalue = $thisEle.val(); }



                    //searching in previous data
                    if (prevData.find(a => a[atname] == cvalue)) {
                        // console.log('Search =>' + cvalue + '| attr :' + atname)
                        $errorElement.text(errmessage);
                        isValid = false;
                    }
                }
            });

        }

        console.log('isValid', isValid);

        if (isValid) {

            console.log('check 4.1');
            // this section make table column data
            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                //console.log('nameAttr', nameAttr);
                console.log('headerName', headerName);

                if ($this.is('select')) {

                    //tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                    tableOptionsTemp.hideColumn.push(nameAttr)
                    //displat text of select
                    if ($this.val() != null) {
                        let selectText = ($this.val().length == 0) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    else {
                        let selectText = ($this.val() == null) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }

                    insertData[nameAttr] = $this.val();


                    $this.val('').selectpicker('refresh');


                }
                else if ($this.is('input')) {

                    insertData[nameAttr] = $this.val();
                    console.log('insertData[nameAttr]', insertData[nameAttr])
                    if (nameAttr == "prodtid") { }
                    else if (nameAttr == "stkid") { }
                    else {
                        $this.val('');
                    }
                }

            });
            console.log('check 4.2', insertData);
            console.log('check 4.2 tableoption', tableOptionsTemp);
            if (isNew) {
                console.log('check 4.2.1');
                //this section nake table.table row
                if ($tblcontainer.find('table').length == 0) {
                    console.log('check 4.2.3');
                    console.log(insertData);
                    console.log(',tableOptionsTemp', tableOptionsTemp)
                    $tblcontainer.append(pft_table_createtable([insertData], tableOptionsTemp));

                    //  $tblcontainer.find('table').dataTable({ paging: false, ordering: false });
                }
                else {
                    console.log('check 4.2.1');
                    let table = $tblcontainer.find('table').DataTable()
                    table.destroy()
                    pft_table_addTableRow($tblcontainer.find('table'), insertData, tableOptionsTemp);


                }

            }
            else {

                let table = $tblcontainer.find('table').DataTable()
                table.destroy()

                pft_table_replaceTableRow($tblcontainer.find('table'), updateCond, insertData, tableOptionsTemp);

            }

            console.log(insertData);
            //alert(1);
            // resetting the edit value
            $tblcontainer.attr('perfect-tempTable-action', 0);

            if (tableKey == 'Warranty') {


            }
            else if (tableKey == 'Payment') {
                BillAmountbind(ele);
            }
            else if (tableKey == 'Purchase') {
                $thisForm.find('[name=prdbtn]').removeAttr("disabled", "disabled")

                $thisForm.data({ pwarranty: warrantydetails });
                console.log('check 123', $thisForm.data('pwarranty'));
                $thisForm.data({ addpImageselect: $thisForm.data('pImageselect') });
                console.log('addpImageselect', $thisForm.data('addpImageselect'))
                BindBilldetails(ele);

            }

        }


        console.log('check 5');
    }
    function BillAmountbind(ele) {

        debugger;
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let netamt = $thisForm.find('[name="SuppNetAmount"]').val() == "" ? 0 : $thisForm.find('[name="SuppNetAmount"]').val();
        let billamt = 0;
        let bilamt = 0;

        if ($thisForm.find('[name=BalAmt]').text() == '') {
            bilamt = 0;
        }
        else {

            bilamt = netamt;
        }

        $thisForm.find('[name=SuppNetAmount]').val(Number(netamt).toFixed(2));

        $('#Paymentdethead').find('tbody tr').each(function (index, ele) {
            billamt += parseFloat($(ele).find('.PAmount').text());

        });
        bilamt = parseFloat(bilamt) - parseFloat(billamt);

        $thisForm.find('[name=BalAmt]').text(bilamt.toFixed(2));
        if (bilamt == 0) {

            return true;

        }
        else {

            return false;

        }
    }


    function validpaymntdetail(ele, tableKey, errorClass, isValid) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').val() == null) {

            isValid = false;
            console.log('false', $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').val());
            $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Payment Method');
        }
        else {
            $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }

        if ($thisForm.find('[perfect-tempTable-' + tableKey + '="PAmount"]').val() < 1) {
            console.log('false', $thisForm.find('[perfect-tempTable-' + tableKey + '="PaymentMethod"]').val());
            isValid = false;

            $thisForm.find('[perfect-tempTable-' + tableKey + '="PAmount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please enter a value greater than or equal to 1');
        }
        else {

            $thisForm.find('[perfect-tempTable-' + tableKey + '="PAmount"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }


        return isValid;

    }



    function roundof(ele) {

        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let biltl = 0;
        let otherchg = 0;
        let disc = 0;
        let salroundof = 0;
        let netat = 0;
        let advamt = 0;
        let netamt = 0;
        let calnet = 0;

        biltl = $thisForm.find('[name="NetAmount"]').val() == "" ? "0" : $thisForm.find('[name="NetAmount"]').val();
        otherchg = $thisForm.find('[name="OtherCharge"]').val() == "" ? "0" : $thisForm.find('[name="OtherCharge"]').val();
       disc = $thisForm.find('[name="Discount"]').val() == "" ? "0" : $thisForm.find('[name="Discount"]').val();
        advamt = $thisForm.find('[name="AdvanceAmount"]').val() == "" ? "0" : $thisForm.find('[name="AdvanceAmount"]').val();

        salroundof = Math.round(parseFloat(biltl) + parseFloat(otherchg) - parseFloat(advamt) - parseFloat(disc)) - (parseFloat(biltl) + parseFloat(otherchg)-parseFloat(advamt) - parseFloat(disc));

        netat = (parseFloat(biltl) + parseFloat(otherchg) - parseFloat(disc) + parseFloat(salroundof));
        netamt = parseFloat(netat) - parseFloat(advamt);
        let netatpord = 0;
        netatpord = parseFloat(advamt) + parseFloat(otherchg) - parseFloat(disc) + parseFloat(salroundof);

        $thisForm.find('[name=Supproundoff]').val(salroundof.toFixed(2));
        $thisForm.find('[name="OtherCharge"]').val(parseFloat(otherchg).toFixed(2))
        $thisForm.find('[name=Discount]').val(parseFloat(disc).toFixed(2));

        if (parseInt($thisForm.find('[name="ddlimportfrom"]').val()) == 1) {
            $thisForm.find('[name=SuppNetAmount]').val(parseFloat(netatpord).toFixed(2));
        }
        else {


            if (parseFloat(disc) == parseFloat(biltl)) {

                calnet = parseFloat(disc) + parseFloat(otherchg);
                $thisForm.find('[name=SuppNetAmount]').val(parseFloat(calnet).toFixed(2));
            }
            else {

                $thisForm.find('[name=SuppNetAmount]').val(parseFloat(netamt).toFixed(2));
            }
            if (parseFloat(advamt) == parseFloat(biltl)) {


                calnet = parseFloat(advamt) - parseFloat(otherchg);
                $thisForm.find('[name=SuppNetAmount]').val(parseFloat(advamt).toFixed(2));
            }
            else {

                $thisForm.find('[name=SuppNetAmount]').val(parseFloat(netamt).toFixed(2));
            }

        }

       // alert($thisForm.find('[name=SuppNetAmount]').val());
        let billamt = 0;
        let bilamt = 0;

        if (parseInt($thisForm.find('[name="ddlimportfrom"]').val()) == 1) {

                bilamt = netatpord;
        }

            else {
                bilamt = netamt;
            }

        $('#Paymentdethead').find('tbody tr').each(function (index, ele) {
            billamt += parseFloat($(ele).find('.PAmount').text());

        });

        bilamt = parseFloat(bilamt) - billamt;

        $thisForm.find('[name=BalAmt]').text(bilamt.toFixed(2));


    }
    function initialloadroundof(ele) {
        debugger

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let biltl = 0;
        let otherchg = 0;
        let disc = 0;
        let salroundof = 0;
        let netat = 0;
        let advamt = 0;
        let netamt = 0;
        let calnet = 0;

        biltl = $thisForm.find('[name="NetAmount"]').val() == "" ? "0" : $thisForm.find('[name="NetAmount"]').val();
        otherchg = $thisForm.find('[name="OtherCharge"]').val() == "" ? "0" : $thisForm.find('[name="OtherCharge"]').val();
        disc = $thisForm.find('[name="Discount"]').val() == "" ? "0" : $thisForm.find('[name="Discount"]').val();
        advamt = $thisForm.find('[name="AdvanceAmount"]').val() == "" ? "0" : $thisForm.find('[name="AdvanceAmount"]').val();

        
        //salroundof = Math.round(parseFloat(biltl) + parseFloat(otherchg) - parseFloat(disc)) - (parseFloat(biltl) + parseFloat(otherchg) - parseFloat(disc));
        salroundof = $thisForm.find('[name="Supproundoff"]').val() == "" ? "0" : $thisForm.find('[name="Supproundoff"]').val();
        netat = parseFloat(biltl) + parseFloat(otherchg) - parseFloat(disc) + parseFloat(salroundof);
        netamt = parseFloat(netat) - parseFloat(advamt);
        let netatpord = 0;
       // alert(advamt); alert(otherchg); alert(disc); alert(salroundof);
        netatpord = parseFloat(advamt) + parseFloat(otherchg) - parseFloat(disc) + parseFloat(salroundof);
        let billamt = 0;
        let bilamt = 0;

        if (parseInt($thisForm.find('[name="ddlimportfrom"]').val()) == 1) {
            var SuppNetAmount = $thisForm.find('[name="SuppNetAmount"]').val() == "" ? "0" : $thisForm.find('[name="SuppNetAmount"]').val();
            var nearestWholeNumber = Math.round(SuppNetAmount); // nearestWholeNumber = 5

            // Calculate the adjustment needed
            var adjustment = nearestWholeNumber - SuppNetAmount; // adjustment = 5 - 5.32 = -0.32
            adjustment = adjustment.toFixed(2);
           // var round = parseFloat($thisForm.find('[name="SuppNetAmount"]').val()) - RoundOff(SuppNetAmount, 0);
           // alert(round);
           // //salroundof = Math.round((parseFloat(biltl) + parseFloat(otherchg) - parseFloat(advamt) - parseFloat(disc))) - Math.round((parseFloat(biltl) + parseFloat(otherchg) - parseFloat(advamt) - parseFloat(disc)));

           // //bilamt = parseFloat(netatpord).toFixed(2);
           // //$thisForm.find('[name="Supproundoff"]').val(parseFloat(salroundof).toFixed(2));
           // var total = Math.round(parseFloat(otherchg) + parseFloat(biltl) - parseFloat(disc) - parseFloat(advamt)) - (parseFloat(otherchg) + parseFloat(biltl) - parseFloat(disc) - parseFloat(advamt));
           // salroundof = total.toFixed(2)
           // if (salroundof >= 0.5) { salroundof = salroundof }
           // else { salroundof = -1 * parseFloat(salroundof)}
           // //$thisForm.find('[name=Supproundoff]').val(salroundof);
            $thisForm.find('[name=Supproundoff]').val(adjustment);
           // //salroundof = total.toFixed(2);
           // //salroundof = Math.round(parseFloat(biltl) + parseFloat(otherchg) - parseFloat(advamt) - parseFloat(disc)) - (parseFloat(biltl) + parseFloat(otherchg) - parseFloat(advamt) - parseFloat(disc));
           //// netat = parseFloat(otherchg) + parseFloat(BillTotal) - parseFloat(Discount) - parseFloat(AdvanceAmount) + parseFloat(total);
           // netatpord = parseFloat(advamt) + parseFloat(otherchg) - parseFloat(disc) + parseFloat(salroundof);
            $thisForm.find('[name=SuppNetAmount]').val(parseFloat(advamt) + parseFloat(adjustment));
            netat = parseFloat(advamt) + parseFloat(adjustment)
            bilamt = parseFloat(netat).toFixed(2);
           
        }

        else {
            bilamt = parseFloat(netamt).toFixed(2);
        }

        $('#Paymentdethead').find('tbody tr').each(function (index, ele) {
            billamt += parseFloat($(ele).find('.PAmount').text());

        });
      //  alert(bilamt);
        bilamt = parseFloat(bilamt) - billamt;

        $thisForm.find('[name=BalAmt]').text(bilamt.toFixed(2));


    }

    function fn_UpdateSupplierSettlement(ele,actionType)
    {

        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
		var creditBalance=0;
		var debitBalance=0;
		var creditTotal=0;
        var debitTotal = 0;
        var crBalance = 0;
        var drBalance = 0;
        var crtTotal = 0;
        var drTotal = 0;
        var trTotal = 0;
		 let Isvalid = true;
		 let IsvalidData = true;
		$('#Paymenttableid').find('tbody tr').each(function (index, ele) {
		if ($(this).find('.jq_paymentDetcheckbox_td').find('[type="checkbox"]').is(':checked') == true)
		{
		       console.log(ele,'ele');
               let bilamt = 0;
			   // bilamt +=parseFloat($(this).find('.jq_balancetopay_td').find('input').val());
				var	Tot= parseFloat(($(ele).find('.jq_balanceamount_td').find('input').val()) == ""?"0.00": ($(ele).find('.jq_balanceamount_td').find('input').val()));
				//alert(Tot);
				if ($(ele).find('.jq_TransType_td').text() === 'Cr') {
                    creditTotal += Tot;
                    crtTotal += Tot;
				//alert(creditTotal);
					}
					if ($(ele).find('.jq_TransType_td').text() === 'Dr'){
                        debitTotal += (Tot);
                        drTotal += (-Tot);
					//alert(debitTotal);
					}


	    }

            });
			creditBalance+= creditTotal;
		debitBalance+= debitTotal;
        crBalance += crtTotal;
        drBalance += drTotal;
        trTotal = parseFloat(crtTotal) + parseFloat(drTotal);
		var totalamount= parseFloat(creditBalance) + parseFloat(debitBalance);
		if(totalamount>0)
		IsvalidData =false ;
		else
		IsvalidData = true;
        console.log('$thisForm', $thisForm)

        if(parseFloat($thisForm.find('[name="ddltransType"]').val()) == 1) {

            $thisForm.find('[name="TotalAmount"]').removeClass('perfectValidate_string');
            $thisForm.find('[name="TotalDiscount"]').removeClass('perfectValidate_string');
            $thisForm.find('[name="Paymentmethod"]').removeClass('perfectValidate_numeric');
            $thisForm.find('[name="SuppName"]').addClass('perfectValidate_string');
            $thisForm.find('[name="BillTypeID"]').addClass('perfectValidate_string');
            $thisForm.find('[name="BranchID"]').addClass('perfectValidate_string');
            $thisForm.find('[name="DepartmentID"]').addClass('perfectValidate_string');
            $thisForm.find('[name="ddlimportfrom"]').addClass('perfectValidate_string');
            $thisForm.find('[name="InvoiceDate"]').addClass('perfectValidate_date');


            $thisForm.find('[name="TotalAmount"]').val('');
            $thisForm.find('[name="TotalDiscount"]').val('');
            $thisForm.find('[name="Paymentmethod"]').val('');

            let transdate = $thisForm.find('[name="TransDate"]').val();
            let invoicedate = $thisForm.find('[name="InvoiceDate"]').val();


            if (invoicedate > transdate) {

                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Transdate Date should greater than or equal to Invoice Date' });
                Isvalid = false;
            }

        }
        else {
            $thisForm.find('[name="BillTypeID"]').removeClass('perfectValidate_string');
            $thisForm.find('[name="BranchID"]').removeClass('perfectValidate_string');
            $thisForm.find('[name="DepartmentID"]').removeClass('perfectValidate_string');
            $thisForm.find('[name="ddlimportfrom"]').removeClass('perfectValidate_string');
            $thisForm.find('[name="InvoiceDate"]').removeClass('perfectValidate_date');

            $thisForm.find('[name="SuppName"]').addClass('perfectValidate_string');
            $thisForm.find('[name="TotalAmount"]').addClass('perfectValidate_string');
            $thisForm.find('[name="TotalDiscount"]').removeClass('perfectValidate_string');

            if (trTotal == 0) {
                $thisForm.find('[name="Paymentmethod"]').removeClass('perfectValidate_numeric');
                $("#PaymentMandatory").hide();
            }
            else {
                $("#PaymentMandatory").show();
                $thisForm.find('[name="Paymentmethod"]').addClass('perfectValidate_numeric');
                

            }



        }
        debugger

		if(IsvalidData)
		{
        if ((parseFloat($thisForm.find('[name="ddltransType"]').val()) == 2) &&
            (parseFloat($thisForm.find('[name="TotalAmount"]').val()) == 0)
           ) {
            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Total   Amount should not be zero' });
            Isvalid = false;

        }
        else {

        }
		}
        let netamount = $thisForm.find('[name="NetAmount"]').val();
        let othercharge = $thisForm.find('[name="OtherCharge"]').val();
        let advamount = $thisForm.find('[name="AdvanceAmount"]').val();
        let sum = parseFloat(netamount) + parseFloat(othercharge) - parseFloat(advamount);
        if ((parseFloat($thisForm.find('[name="Discount"]').val())) > (parseFloat(sum)) ){


            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Discount Amount should not be greater than Total Amount ' });
            Isvalid = false;

        }
        else {}



        if (checkdate(ele) && Isvalid) {
            
                if ($thisForm.valid()) {
                    var check = true;
                    if ($thisForm.find('[name="ddltransType"]').val() == 1) {
                        check = BillAmountbind(ele);
                        console.log('check val', check)

                    }
                    if (check == true) {

                        let $errorMsg = '';
                        let $blnSuccess = true;

                        $(ele).prop('disabled', true);
                        let $thisForm = $(ele).closest('[perfect-class="form"]');




                        let $modal2 = $thisForm.find('#zero_configOthercharge');

                        let OtherCharge = [];
                        $modal2.find('tbody').find('tr').each(function () {

                            let OtChargeinfo = {};
                            OtChargeinfo['ID_OtherChargeType'] = $(this).find('.jq_ID_OtherChargeType_td').text();

                            OtChargeinfo['OctyTransType'] = $(this).find('.jq_TransType_td').find('select').val();
                            OtChargeinfo['OctyName'] = $(this).find('.jq_Type_td').text();
                            OtChargeinfo['OctyAmount'] = $(this).find('.jq_OtherChagAmnt_td').find('input').val();
                            console.log('OtChargeinfo', OtChargeinfo);

                            OtherCharge.push(OtChargeinfo);

                        });


                        let paymentdetails = [];
                        $thisForm.find('[perfect-tempTable="Payment"]').find('tbody').find('tr').each(function () {
                            paymentdetails.push($(this).data('pData'));
                        })



                        var tablereplacedetailsrws = $("#paymentdetailsbody tr");

                        let SupplierpaymentDetails = [];

                        if (tablereplacedetailsrws.length > 0) {


                            $('#paymentdetailsbody tr').each(function (index, ele) {


                                if ($(this).find('.jq_paymentDetcheckbox_td').find('[type="checkbox"]').is(':checked') == true) {
                                    let PaymentDetinfo = {};
                                        
                                    PaymentDetinfo['ID_Purchase'] = $(this).find('.jq_ID_Purchase').text();

                                    PaymentDetinfo['Mode'] = $(this).find('.jq_Mode_td').text();
                                    PaymentDetinfo['RefNo'] = $(this).find('.jq_Referencrno_td').text();
                                    PaymentDetinfo['InvoiceDate'] = $(this).find('.jq_Invoicedate_td').text();


                                    PaymentDetinfo['ID_SupplierTransaction'] = $(this).find('.jq_suppliertranscationId').text();
                                    PaymentDetinfo['FK_BillType'] = $(this).find('.jq_billtype_td').text();
                                    PaymentDetinfo['InvoiceType'] = $(this).find('.jq_invoicetype_td').text();
                                    PaymentDetinfo['Amount'] = $(this).find('.jq_balanceamount_td').find('input').val();
									PaymentDetinfo['TransType'] = $(this).find('.jq_TransType_td').text();
                                    PaymentDetinfo['Discount'] = $(this).find('.jq_discount_td').find('input').val();
                                    PaymentDetinfo['BalanceToPay'] = $(this).find('.jq_balancetopay_td').find('input').val();



                                    SupplierpaymentDetails.push(PaymentDetinfo);


                                }

                            });
                        }
                        console.log('SupplierpaymentDetails', SupplierpaymentDetails);

                        let SupplierSettlementID = 0;
                        let _ActionUrl = "";

                        if (actionType === "new") {
                            SupplierSettlementID = 0;
                            _ActionUrl = "@Url.Action("AddNewSuppSettlement", "SupplierSettlement")";
                        }
                        else if (actionType === "update") {
                            SupplierSettlementID = $thisForm.find('[name="ID_SupplierSettlement"]').val();
                            _ActionUrl = "@Url.Action("UpdateSuppSettlement", "SupplierSettlement")";
                        }
                        debugger
                        let inputData = {
                            __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                            'SupplierSettlementID': SupplierSettlementID,
                            'ddltransType': $thisForm.find('[name="ddltransType"]').val(),
                            'TransMode': SupplierSettlementTransMode,
                            'LastID': LastID_Suppliertransaction,
                            'TransDate': $thisForm.find('[name="TransDate"]').val(),
                            'SuppID': $thisForm.find('[name="SuppID"]').val(),
                            'BranchID': $thisForm.find('[name=BranchID]').val(),
                            'DepartmentID':$thisForm.find('[name=DepartmentID]').val(),
                            'BillTypeID': $thisForm.find('[name="BillTypeID"]').val(),

                            'ddlimportfrom': $thisForm.find('[name="ddlimportfrom"]').val(),
                            'ImportID': $thisForm.find('[name="ImportID"]').val(),
                            'StOtherCharge': $thisForm.find('[name="OtherCharge"]').val(),
                            'SuppNetAmount': $thisForm.find('[name="SuppNetAmount"]').val(),
                            'NetAmount': $thisForm.find('[name="NetAmount"]').val(),
                            'OtherChgDetails': OtherCharge,
                            'Discount': $thisForm.find('[name="Discount"]').val(),
                            'PaymentDetail': paymentdetails,
                            'Supproundoff': $thisForm.find('[name="Supproundoff"]').val(),
                            'AdvanceAmount': $thisForm.find('[name="AdvanceAmount"]').val() == "" ? "0" : $thisForm.find('[name="AdvanceAmount"]').val(),

                            'TotalAmount': $thisForm.find('[name="TotalAmount"]').val(),
                            'TotalDiscount': $thisForm.find('[name="TotalDiscount"]').val(),
                            'FK_PaymentMethod': $thisForm.find('[name="Paymentmethod"]').val(),
                            'SupplierPaymentDetails': SupplierpaymentDetails
                        };
                        clearSessionValue(LastIDSessionKey);
                        console.log('inputData', inputData);
                        if ($blnSuccess) {
                            $.ajax({
                                url: _ActionUrl,
                                type: "POST",
                                data: inputData,
                                dataType: "json",
                                contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                                success: function (ajaxOutput) {
                                    if (ajaxOutput.Process.IsProcess) {
                                        $.each(ajaxOutput.Process.Message, function (key, value) {

                                            NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                                            $thisForm.find('[perfect-ctype="select"]').val('').selectpicker('refresh');
                                            $thisForm.find('[perfect-ctype="input"]').val('');
                                            $thisForm.find('[perfect-ctype="date"]').val('');
											 let onSuccess = $thisForm.attr('perfect-onFormSuccess')
											if (onSuccess) {
												window[onSuccess]();

											}
                                        });
                                    }
                                    else {
                                        $.each(ajaxOutput.Process.Message, function (key, value) {
                                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                        });
                                    }



                                },
                                complete: function () {
                                    $(ele).prop('disabled', false);
                                }
                            });
                        }
                        else {

                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': $errorMsg });
                            $(ele).prop('disabled', false);
                        }

                    }
                    else {
                        $(ele).prop('disabled', false);
                        NotificationMessage({ 'type': 'error', 'heading': 'Warning', 'message': 'In Payment Method Balance Amt. Should be  Zero ' });
                    }
            }


            }
            else {
                $(ele).prop('disabled', false);
            }



        }


    function BindpaymentMethod(ele) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
		   ddlimportfrom =$thisForm.find('[name="ddlimportfrom"]').val();

		   let $placeDropdown = $thisForm.find('[name=PaymentMethod]');//<--- Will give place select html element
        $placeDropdown.empty();
        $placeDropdown.append($('<option/>', { "value": '' }).text('Please select')).selectpicker('refresh');
        let inputData = {
            __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
            ddlimportfrom : $thisForm.find('[name=ddlimportfrom ]').val(),
        };
        $.ajax({
            url: "@Url.Action("GetPayemntMethod", "SupplierSettlement")",
            type: "POST",

            data: inputData,
            dataType: "json",
            contentType: "application/x-www-form-urlencoded;charset=utf-8",
            success: function (ajaxOutput) {

                if (ajaxOutput.Process.IsProcess) {

                    $.each(ajaxOutput.Data, function (key, value) {
                        $placeDropdown.append($('<option/>', { "value": value.PaymentmethodID }).text(value.Name)).selectpicker('refresh')
                    });

                }
                else {

                }
            }

        });

    }


    @*function DeleteSupplierSettlements(ele) {

        let $row = $(this).closest('tr');
          let $thisForm = $(ele).closest('[perfect-class="form"]');
          let Saveddata = $thisForm.data('pData');
          console.log('Delete function', Saveddata)

           // let Saveddata = $row.data('pData');

            $('.dataTable tr').removeClass("SelectForDelete");
            $(this).closest('tr').addClass('SelectForDelete');

            console.log("Saved data", Saveddata);
        $.ajax({
            url: "@Url.Action("GetSupplierSettlementReasonList", "SupplierSettlement")",
            type: "GET",

            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            success: function (ajaxReasonOutput) {
                if (ajaxReasonOutput.Process.IsProcess) {

                    console.log('Inside res ajax', ajaxReasonOutput.Data)


                    let confirmationDialogBoxOption = { heading: "Are you Sure?", body: "Do you want to Delete Supplier Transaction Details of : " + "<b>" + Saveddata.SuppName + " ?", cancel: "No", confirm: "Yes", reason: ajaxReasonOutput.Data };
                    var res = ConfirmDialog(confirmationDialogBoxOption);



                    res.then(function (ret) {
                        if (ret) {

                            let inputData = {
                                __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                                GroupID: Saveddata.GroupID,
                                ReasonID: ret
                            };


                            $.ajax({
                                url: "@Url.Action("DeleteSupplierSettlement", "SupplierSettlement")",
                                type: "POST",
                                data: inputData,
                                contentType: 'application/x-www-form-urlencoded;charset=utf-8',

                                    success: function (ajaxOutput) {
                                        if (ajaxOutput.Process.IsProcess) {
                                            //let table = $row.closest('table').DataTable()
                                            //table.row($row).remove().draw();
                                            $.each(ajaxOutput.Process.Message, function (key, value) {
                                                NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': 'Deleted Successfully' });
                                            });
                                            let onSuccess = $thisForm.attr('perfect-onFormSuccess')

                                            if (onSuccess) {
                                                window[onSuccess]();
                                            }
                                        }
                                        else {
                                            $.each(ajaxOutput.Process.Message, function (key, value) {
                                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                            });
                                        }
                                    }
                                });
                        }
                        else {
                            NotificationMessage({ 'message': 'No option selected' });
                        }

                    });
                }
                else {
                }
            }
        });
    };*@


</script>
