<style>
</style>

<div class="card">
    <div class="card-header">
        <h4 class="card-title col-12">Tax Group Settings</h4>
        <span title="To View List" onclick="fn_showListView();"><svg id="Layer_1" class="layer" stroke="currentColor" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" height="20" width="20" viewBox="0 0 122.88 122.54"><title>To View List</title><path class="viewlst" d="M4.69,0H46.22a4.71,4.71,0,0,1,4.69,4.69V46a4.69,4.69,0,0,1-4.69,4.69H4.69a4.65,4.65,0,0,1-3.31-1.38l-.09-.09A4.67,4.67,0,0,1,0,46V4.69A4.71,4.71,0,0,1,4.69,0ZM89.44,61.94a26.56,26.56,0,0,1,10.18,2l.07,0a26.61,26.61,0,0,1,15.25,32.16,26.18,26.18,0,0,1-2.7,6.11l10.3,11.24a1.27,1.27,0,0,1-.07,1.8l-7.57,6.9a1.27,1.27,0,0,1-1.79-.07l-9.86-10.85a26.36,26.36,0,0,1-6.1,2.74,26.87,26.87,0,0,1-7.71,1.13,26.51,26.51,0,0,1-10.17-2l-.07,0A26.64,26.64,0,0,1,64.85,78.37l0-.07A26.6,26.6,0,0,1,89.44,61.94Zm15,11.59a21.38,21.38,0,0,0-6.89-4.61l-.06,0a21.22,21.22,0,0,0-23.07,4.64l-.07.07a21.25,21.25,0,0,0-4.54,6.83l0,.06a21.32,21.32,0,0,0-1.58,8.06,21.26,21.26,0,0,0,29.35,19.62,21.54,21.54,0,0,0,6.89-4.61l.07-.07a21.09,21.09,0,0,0,4.54-6.83l0-.06a21.35,21.35,0,0,0,0-16.17,21.34,21.34,0,0,0-4.62-6.9ZM4.69,63.2H46.22a4.71,4.71,0,0,1,4.69,4.7v41.34a4.68,4.68,0,0,1-4.69,4.69H4.69A4.69,4.69,0,0,1,0,109.24V67.9a4.71,4.71,0,0,1,4.69-4.7ZM68.78,0h41.53A4.71,4.71,0,0,1,115,4.69V46a4.71,4.71,0,0,1-4.69,4.69H68.78A4.71,4.71,0,0,1,64.09,46V4.69a4.69,4.69,0,0,1,1.37-3.31l.1-.09A4.67,4.67,0,0,1,68.78,0Z"></path></svg></span>

    </div>
    <div class="card-body">
        <form id="" class="form-valide" perfect-class="form" action="#" method="post" perfect-onFormSuccess="">
            <div class="">

                <div class="row">

                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-lg-4 col-form-label">
                                <span perfect-class="formGroupLabel">Trans Date</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="date" class="form-control perfectValidate_date" onchange="datecheck(this)" name="TransDate" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" />



                                <div class="text-danger temptableError"></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-lg-4 col-form-label">
                                <span perfect-class="formGroupLabel">Effect Date</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="date" class="form-control perfectValidate_date"  onchange="datecheck(this)" name="EffectDate" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" />

                                <div class="text-danger temptableError"></div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-sm-12">
                        <div class="daccordion__header">
                            <span class="accordion__header--text">Details</span>
                        </div>
                        <div class="row">
                            <div class="col-sm-12 " perfect-class="TempTableTaxGroupSettings">
                                <br />

                                <div class="row">

                                    <div class="col-sm-4">

                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">Product</span>
                                                <span class="text-danger">*</span>
                                            </label>

                                            <div class="col-sm-7 PerError">
                                                <div class="input-group">

                                                    <input type="text" class="form-control" name="ProductName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" perfect-tempTable-TaxGroupSettings="ProductName" autocomplete="off" />
                                                    <input type="hidden" name="FK_Product" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-tempTable-TaxGroupSettings="FK_Product" perfect-css="input" autocomplete="off" />

                                                    <div class="input-group-append">
                                                        @{
                                                            <button id="prdbtn" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick=" GetCmnPopUpSearchValAssign(this, 40, 'Product Details', [], [], TaxGroupSettingsTransMode)" criterea1="0" criterea2="0" BindName="ProductName" BindVal="FK_Product" Function="2"></button>
                                                        }
                                                    </div>

                                                </div>

                                                <span class="invalid-feedback animated fadeInUp d-block temptableError"></span>
                                            </div>


                                        </div>
                                    </div>
                                    <div class="col-sm-4">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <label class="col-sm-4 col-form-label">
                                                <span perfect-class="formGroupLabel">Tax Group</span>
                                                <span class="text-danger">*</span>
                                            </label>
                                            <div class="col-sm-6">
                                                <select class="form-control perfectValidate_string_nm" name="FK_TaxGroup" perfect-tempTable-TaxGroupSettings="FK_TaxGroup" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" data-live-search="true">
                                                    <option value="0">Please Select </option>

                                                    @if (!(Model.TaxgroupList is null))
                                                    {
                                                        foreach (var unit in Model.TaxgroupList)
                                                        {
                                                            <option value="@unit.TaxGroupID">@unit.TaxGroupName</option>
                                                        }
                                                    }

                                                </select>
                                                <span class="invalid-feedback animated fadeInUp d-block temptableError"></span>
                                            </div>


                                        </div>
                                    </div>
                                    <div class="col-sm-4">
                                        <label class="form-check-label" perfect-class="formCheckLabel">
                                            <input type="checkbox" class="form-check-input" name="TgsEffectExistStock" perfect-tempTable-TaxGroupSettings="TgsEffectExistStock" perfect-class="formCheckInput" perfect-ctype="checkbox" perfect-css="checkbox">Effect Old Stock
                                        </label>
                                        &nbsp;&nbsp;&nbsp;&nbsp;<button class="btn btn-primary1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" title="Add New Tax Group Settings" onclick="AddTaxGropSettingsDetails(this,'TaxGroupSettings', ['FK_Product'])"><i class="fa fa-plus" aria-hidden="true"></i></button>
                                        &nbsp;&nbsp;<button class="btn btn-light1" id="reset"  type="button" data-toggle="tooltip" data-placement="top" data-html="true" onclick="ClearProduct(this,'TaxGroupSettings')"><i class="fa fa-refresh" aria-hidden="true"></i></button>
                                        <div class="text-danger temptableError"></div>
                                    </div>
                                </div>



                                <div class="card-footer text-right" perfect-class="formFooter">

                                </div>
                                <div class="row">
                                    <div class="col-sm-12" style="padding-right:25px;padding-left:25px;">
                                        <div class="form-group row" perfect-class="formGroup">
                                            <div class="table-responsive" perfect-tempTable="TaxGroupSettings" id="TaxGroupSettingsItemHead" perfect-tempTable-lastindex="0" perfect-tempTable-action="0"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>






                <input type="hidden" name="SalesID" perfect-ctype="hidden" />


                <div class="card-footer text-right" perfect-class="formFooter">
                    @*<button id="" type="button" class="btn btn-primary mr-3 addcompany-jq-addnewuserUpdate d-none" name="update" perfect-css="button" onclick="fn_TaxGroupSettingsForm_update(this)"><i class="fa fa-refresh fa-spin loaderClass"></i>Update</button>*@
                    <button id="addcompany-jq-addnewuser" type="button" class="btn btn-primary mr-3 " name="add" perfect-css="button" onclick="fn_TaxGroupSettingsForm_add(this)"><i class="fa fa-refresh fa-spin loaderClass "></i>Save</button>
                    <button type="button" class="btn btn-light" perfect-css="button" onclick="ResetAll(this)" name="reset">Clear</button>
                </div>
            </div>
        </form>
    </div>
</div>
<script src="~/Scripts/jqDOM/searchDOMCreation.js"></script>
<script>

    //on load functions
    $(document).ready(function () {
        initFunctions('form');
    });

    // Function to Add TaxGroupSettings
    function fn_TaxGroupSettingsForm_add(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]'); var _continue=true;
        //if ($("#TransDate-error").text().trim() != "" || $(".temptableError").text().trim() != "" || $("#EffectDate-error").text().trim() != "") {
        //    _continue=false;
        //}
        
        let _TransDate = $thisForm.find('[name="TransDate"]').val();
        let TransDate = new Date(_TransDate);
        TransDate.setHours(0, 0, 0, 0);
        let _EffectDate = $thisForm.find('[name="EffectDate"]').val();
        let EffectDate = new Date(_EffectDate);
        EffectDate.setHours(0, 0, 0, 0); var valid = true;
        var tday = new Date().setHours(0, 0, 0, 0);
        var maxdate = new Date('01/01/2050').setHours(0, 0, 0, 0); console.log(_continue);
        if (tday > EffectDate || maxdate < EffectDate) {
            _continue = false;
        }

        console.log(tday + "===" + new Date(_EffectDate) + "===" + maxdate);

        console.log(_continue + "1");
        if (tday >TransDate || maxdate <TransDate) {
            
            _continue = false;
        } console.log(_continue + "2");
        if (Date.parse(TransDate) > Date.parse(EffectDate)) {
            _continue = false;
        }
        console.log(_continue + "3");
        if ($thisForm.valid()&&_continue) {
            let prevData = [];
            $thisForm.find('[perfect-tempTable="TaxGroupSettings"]').find('table>tbody').find('tr').each(function () {

                prevData.push($(this).data('pData'));

            })
            if (prevData.length != 0) {

                var inputData = {
                    __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                    TransDate: $thisForm.find('[name=TransDate]').val(),
                    EffectDate: $thisForm.find('[name=EffectDate]').val(),
                     TransMode: TaxGroupSettingsTransMode,
                    LastID: LastID_TaxGroupSettings,
                    TaxGroupSettingsDetails: prevData


                }
                console.log(prevData);
                //clearSessionValue(LastIDSessionKeySTKCONV);
                $.ajax({
                          url: "@Url.Action("AddNewTaxGroupSettings", "TaxGroupSettings")",
                                    type: "POST",
                                    data: inputData,
                                    dataType: "json",
                                    contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                                    success: function (ajaxOutput) {
                                             if (ajaxOutput.Process.IsProcess) {
                                                 $.each(ajaxOutput.Process.Message, function (key, value) {
                                                     NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                                                     $(ele).prop('disabled', false);
                                                     TaxGroupSettingsInitialLoad();
                                                 });
                                             }
                                             else {
                                                 $.each(ajaxOutput.Process.Message, function (key, value) {
                                                     NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                                     $(ele).prop('disabled', false);
                                                     TaxGroupSettingsInitialLoad();
                                                 });
                                             }

                                             $thisForm.find('[perfect-ctype="select"]').val('').selectpicker('refresh');
                                             $thisForm.find('[perfect-ctype="input"]').val('');
                                             $thisForm.find('[perfect-ctype="date"]').val('');
                                             let onSuccess = $thisForm.attr('perfect-onFormSuccess')
                                             if (onSuccess) {
                                                 window[onSuccess]();

                                             }
                                         },
                                    complete: function () {
                                        $(ele).prop('disabled', false);
                                    }

                                });

            } else {


                NotificationMessage({ 'type': 'error', 'heading': 'info', 'message': 'Please Enter At least One Tax Group Settings Details!!!' });
            }
        }




    }

    function ResetAll(ele) {
        TaxGroupSettingsLoad();
        fn_resetTaxGroupSettings();
    }
    function fn_resetTaxGroupSettings(ele) {

        let $container = $(ele).closest('[perfect-class="form"]');
        $container.find('[name=FK_Product]').val('').selectpicker('refresh');
        $container.find('[name=FK_TaxGroup]').val('').selectpicker('refresh');;
        $container.find('[name=TgsEffectExistStock]').val('0').selectpicker('refresh');;

        $container.find('[name="ID_Stock"]').val('')
        $container.find('[name="prodtid"]').val('')
        //$container.validate().resetForm();
    }

    var tableOptionsTempOutTGS = {
        iconButton: {
            buttons: [
                {
                    icon: "fa fa-pencil btnPerfectGridEdit",
                    action: function () {
                        let savedData = $(this).closest('tr').data('pData')
                        getfunctionAssign(this);
                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let tableKey = $tablecontainer.attr('perfect-tempTable');
                        let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                        let indexname = tableKey + 'index';
                        let rindex = $(this).closest('tr').attr(indexname);
                        $tablecontainer.attr('perfect-tempTable-action', rindex);
                        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                            let $thisNode = $(this);
                            let pf_name = $thisNode.attr('name');
                            if ($thisNode.is('select')) {

                                $thisNode.val(savedData[pf_name]).selectpicker('refresh');
                            }
                            else if ($thisNode.is('input')) {

                                if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                    $thisNode.prop('checked', savedData[pf_name]);
                                }
                                else {

                                    $thisNode.val(savedData[pf_name]);
                                }

                            }
                            else {
                                $thisNode.val(savedData[pf_name]);
                            }


                        });
                    }
                },

                {

                    icon: "fa fa-trash btnPerfectGridDelete",
                    action: function () {
                        let $thistbl = $(this).closest('table');
                        let table = $thistbl.DataTable();
                        table.destroy();
                        if ($(this).closest('tbody').find('tr').length > 1) {
                            $(this).closest('tr').remove();
                            pft_table_slreset($thistbl);

                        }
                        else {

                            $thistbl.remove();
                        }
                        $("#reset").click();

                    }
                },
            ]
        },
        onlyShowColumn: [],
        hideColumn: ['Stock', 'FK_Product', 'FK_TaxGroup'],
        serialNo: true,
        renameHeader: {
             "TgsEffectExistStock": "Effect Old Stock"},
        rowAttribute: [],
        isCheckType: []
    };

    function AddTaxGropSettingsDetails(ele, tkey, uniq) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let tableKey = tkey;
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');

        let insertData = {};
        let tableOptionsTemp = tableOptionsTempOutTGS;

        let unique = (uniq) ? uniq : [];

        let isValid = true;
        let errorClass = '.temptableError';


        let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
        let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
        let indexname = tkey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);
        let updateCond = '';
        let isNew = true;
        console.log(thisactionIndex);
        if (thisactionIndex > 0) {
            insertData[indexname] = thisactionIndex;
            updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
            isNew = false;
        }
        else {
            insertData[indexname] = lastIndex + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
            isNew = true;
        }



       if ($thisForm.find("[name='FK_Product']").val() == "" || $thisForm.find("[name='FK_Product']").val() <= 0 || $thisForm.find("[name='FK_Product']").val() == undefined) {
            isValid = false;
            $thisForm.find("[name='FK_Product']").closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Product');
        } else {
            $thisForm.find("[name='FK_Product']").closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }

        if ($thisForm.find("[name='FK_TaxGroup']").val() == "" || $thisForm.find("[name='FK_TaxGroup']").val() <= 0 || $thisForm.find("[name='FK_TaxGroup']").val() == undefined) {
            isValid = false;
            $thisForm.find("[name='FK_TaxGroup']").closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Tax Group');

        }
        else {
            $thisForm.find("[name='FK_TaxGroup']").closest('[perfect-class="formGroup"]').find(errorClass).text('');
        }



        if (unique.length > 0) {
            let prevData = [];
            $tblcontainer.find('table > tbody').find('tr').each(function () {
                if (isNew) {
                    prevData.push($(this).data('pData'));
                }
                else {
                    if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                        prevData.push($(this).data('pData'));
                    }

                }

            })

            unique.forEach(function (key, i) {
                let $thisEle = $thisForm.find('[perfect-tempTable-' + tableKey + '="' + key + '"]');
                let headerEleName = $thisForm.find('[name="lblType"]').text();
                let atname = $thisEle.attr('name');
                let cvalue;


                if ($thisEle.length != 0) {
                    let $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
                    let errmessage = headerEleName + " Already exits"

                    if ($thisEle.is('select')) {
                        cvalue = $thisEle.val();

                    }
                    else if ($thisEle.is('input')) {

                        let inputEleType = $thisEle.attr('type').toLocaleLowerCase();

                        if (inputEleType == 'checkbox') { cvalue = $thisEle.is(':checked'); }
                        else if (inputEleType == 'hidden') { cvalue = $thisEle.val(); }
                        else { cvalue = $thisEle.val(); }
                    }
                    else {
                        cvalue = $thisEle.val();
                    }

                    if (prevData.find(a => a[atname] == cvalue)) {
                        $errorElement.text(errmessage);
                        isValid = false;
                    }
                }
            });

        }

        if (isValid) {
            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                if ($this.is('select')) {
                    if (nameAttr == "FK_TaxGroup") {
                        headerName = "Tax Group";
                    }
                    tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                    tableOptionsTemp.hideColumn.push(nameAttr)
                    if ($this.val() != null) {
                        let selectText = ($this.val().length == 0) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    else {
                        let selectText = ($this.val() == null) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    insertData[nameAttr] = $this.val();

                    $this.val('').selectpicker('refresh');
                }
                else if ($this.is('input')) {

                    let inputType = $this.attr('type').toLocaleLowerCase();

                    if (inputType == 'checkbox') {
                        //if (nameAttr == "TgsEffectExistStock") {
                        //    nameAttr = "Effect Old Stock";
                        //}
                        insertData[nameAttr] = $this.is(':checked');

                        tableOptionsTemp.isCheckType.push(nameAttr)
                        $this.prop('checked', false);

                    }
                    else if (inputType == 'hidden') {
                        insertData[nameAttr] = $this.val();
                        $this.val('');

                    }

                    else {
                        insertData[nameAttr] = $this.val();

                        $this.val('');
                    }
                }
                else {
                    if (nameAttr == "ProductName") {
                            headerName = "Product Name";
                        }
                    insertData[nameAttr] = $this.val();

                    $this.val('');
                }
            });

            if (isNew) {
                if ($tblcontainer.find('table').length == 0) {
                    $tblcontainer.append(pft_table_createtable([insertData], tableOptionsTemp));
                }
                else {
                    let table = $tblcontainer.find('table').DataTable()
                    table.destroy()
                    pft_table_addTableRow($tblcontainer.find('table'), insertData, tableOptionsTemp);
                }
            }
            else {
                let table = $tblcontainer.find('table').DataTable()
                table.destroy()
                pft_table_replaceTableRow($tblcontainer.find('table'), updateCond, insertData, tableOptionsTemp);
            }

            $tblcontainer.attr('perfect-tempTable-action', 0);
            //$thisForm.find('[name="AldAmountTo"]').attr('readonly', true);
        }






























        //let isValid = true;

        //let $thisForm = $(ele).closest('[perfect-class="form"]');
        //let tableKey = tkey; let errorClass = '.temptableError';


        //let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');

        //let insertData = {};
        //let tableOptionsTemp = tableOptionsTempOutTGS;

        //let unique = (uniq) ? uniq : [];


        //let ValueExist = false;

        //let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
        //let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
        //let indexname = tkey + 'index';
        //tableOptionsTemp.rowAttribute.push(indexname);
        //tableOptionsTemp.hideColumn.push(indexname);
        //let updateCond = '';
        //let isNew = true;
        //console.log("hiiiiiiiiiiii"+thisactionIndex);
        //if (thisactionIndex > 0) {
        //    //means update
        //    insertData[indexname] = thisactionIndex;
        //    updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
        //    isNew = false;
        //}
        //else {
        //    //insert
        //    insertData[indexname] = lastIndex + 1;
        //    $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
        //    isNew = true;
        //}




        //if ($thisForm.find("[name='FK_Product']").val() == "" || $thisForm.find("[name='FK_Product']").val() <= 0 || $thisForm.find("[name='FK_Product']").val() == undefined) {
        //    isValid = false;
        //    $thisForm.find("[name='FK_Product']").closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Product');
        //} else {
        //    $thisForm.find("[name='FK_Product']").closest('[perfect-class="formGroup"]').find(errorClass).text('');
        //}

        //if ($thisForm.find("[name='FK_TaxGroup']").val() == "" || $thisForm.find("[name='FK_TaxGroup']").val() <= 0 || $thisForm.find("[name='FK_TaxGroup']").val() == undefined) {
        //    isValid = false;
        //    $thisForm.find("[name='FK_TaxGroup']").closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Tax Group');

        //}
        //else {
        //    $thisForm.find("[name='FK_TaxGroup']").closest('[perfect-class="formGroup"]').find(errorClass).text('');
        //}



        //if (unique.length > 0) {
        //    let prevData = [];
        //    $tblcontainer.find('table > tbody').find('tr').each(function () {
        //        if (isNew) {
        //            prevData.push($(this).data('pData'));
        //        }
        //        else {
        //            if (parseInt($(this).attr(indexname)) != thisactionIndex) {
        //                prevData.push($(this).data('pData'));
        //            }

        //        }

        //    })

        //    unique.forEach(function (key, i) {
        //        let $thisEle = $thisForm.find('[perfect-tempTable-' + tableKey + '="' + key + '"]');
        //        let headerEleName = "Product";// $thisForm.find('[name="lblType"]').text();
        //        let atname = $thisEle.attr('name');
        //        let cvalue;


        //        if ($thisEle.length != 0) {
        //            let $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
        //            let errmessage = headerEleName + " Already exits"

        //            if ($thisEle.is('select')) {
        //                cvalue = $thisEle.val();

        //            }
        //            else if ($thisEle.is('input')) {

        //                let inputEleType = $thisEle.attr('type').toLocaleLowerCase();

        //                if (inputEleType == 'checkbox') { cvalue = $thisEle.is(':checked'); }
        //                else if (inputEleType == 'hidden') { cvalue = $thisEle.val(); }
        //                else { cvalue = $thisEle.val(); }
        //            }
        //            else {
        //                cvalue = $thisEle.val();
        //            }

        //            if (prevData.find(a => a[atname] == cvalue)) {
        //                $errorElement.text(errmessage);
        //                isValid = false;
        //            }
        //        }
        //    });

        //}

        //if (isValid == true ) {

        //    $thisForm.find("[name='FK_Product']").closest('[perfect-class="formGroup"]').find(errorClass).text('');
        //    $('#stockavailable').hide();
        //    $('#stockstandby').hide();

        //    $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
        //        let $this = $(this);
        //        let headerName = $this.attr('perfect-tempTable-' + tableKey);
        //        let nameAttr = $this.attr('name');

        //        if ($this.is('select')) {

        //            if (nameAttr == "FK_TaxGroup") {
        //                headerName = "Tax Group";
        //            }
        //            tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
        //            tableOptionsTemp.hideColumn.push(nameAttr)

        //            if ($this.val() != null) {
        //                let selectText = ($this.val().length == 0) ? '' : $this.children(":selected").text();
        //                insertData[nameAttr + '_d'] = selectText;
        //            }
        //            else {
        //                let selectText = ($this.val() == null) ? '' : $this.children(":selected").text();
        //                insertData[nameAttr + '_d'] = selectText;
        //            }

        //            insertData[nameAttr] = $this.val();



        //            $this.val('').selectpicker('refresh');
        //        }
        //        else if ($this.is('input')) {

        //            let inputType = $this.attr('type').toLocaleLowerCase();

        //            if (inputType == 'checkbox') {

        //                if (nameAttr == "TgsEffectExistStock") {
        //                    nameAttr = "Effect Old Stock";
        //                }
        //                insertData[nameAttr] = $this.is(':checked');

        //                tableOptionsTemp.isCheckType.push(nameAttr)

        //                $this.prop('checked', false);

        //            }
        //            else if (inputType == 'hidden') {

        //                tableOptionsTemp.hideColumn.push(nameAttr)
        //                insertData[nameAttr] = $this.val();


        //                $this.val('');
        //            }
        //            else if (inputType == 'date') {


        //                insertData[nameAttr] = $this.val();


        //                $this.val('');
        //            }
        //            else {
        //                if (nameAttr == "ProductName") {
        //                    headerName = "Product Name";
        //                }
        //                tableOptionsTemp.renameHeader[nameAttr] = headerName;
        //                insertData[nameAttr] = $this.val();


        //                $this.val('');
        //            }
        //        }
        //        else {

        //            insertData[nameAttr] = $this.val();

        //            $this.val('');

        //        }




        //    });

        //    if (isNew) {

        //        if ($tblcontainer.find('table').length == 0) {

        //            $tblcontainer.append(pft_table_createtable([insertData], tableOptionsTemp));

        //        }
        //        else {

        //            let table = $tblcontainer.find('table').DataTable()
        //            table.destroy()
        //            pft_table_addTableRow($tblcontainer.find('table'), insertData, tableOptionsTemp);


        //        }



        //        if (insertData[indexname] > 0) {


        //            console.log('1234', insertData[indexname])
        //            $thisForm.find('[name="DepartmentID"]').attr("disabled", "disabled");
        //            $thisForm.find('[name="BranchID"]').attr("disabled", "disabled");


        //        }
        //        else {

        //        }



        //    }
        //    else {

        //        let table = $tblcontainer.find('table').DataTable()
        //        table.destroy()

        //        pft_table_replaceTableRow($tblcontainer.find('table'), updateCond, insertData, tableOptionsTemp);



        //    }

        //    $tblcontainer.attr('perfect-tempTable-action', 0);
        //}


    }

    function getfunctionAssign(ele) {
            }

    function ClearProduct(ele, tablekey) {

        let $thisform = $(ele).closest('[perfect-class="form"]');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="text"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="select"]').val('').selectpicker('refresh');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="input"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="date"]').val('');
        $thisform.find('[perfect-temptable-' + tablekey + ']').closest('[perfect-ctype="hidden"]').val('');
        $('input[type=checkbox]').prop('checked', false);
        let $tblcontainer = $thisform.find('[perfect-tempTable="' + tablekey + '"]');
        let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
        $tblcontainer.attr('perfect-tempTable-action', 0);
        $thisform.find('[name=prdbtn]').removeAttr("disabled", "disabled");
        $thisform.find('[name=FK_TaxGroup]').removeAttr("disabled", "disabled");


    }
    function datecheck(ele) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');


        let errorclass = '.temptableErrors';


        var _name = $(ele).attr("name");
        let _TransDate = $thisForm.find('[name="TransDate"]').val();
        let TransDate = new Date(_TransDate);
        TransDate.setHours(0, 0, 0, 0);
        let _EffectDate = $thisForm.find('[name="EffectDate"]').val();
        let EffectDate = new Date(_EffectDate);
        EffectDate.setHours(0, 0, 0, 0); var valid = true;
        var tday = new Date().setHours(0, 0, 0, 0);
        console.log(tday);


        var currentTime = new Date();
        var month = ("0" + (currentTime.getMonth() + 1)).slice(-2);
        var day = ("0" + currentTime.getDate()).slice(-2);
        var year = currentTime.getFullYear();
        var newdate = year + '-' + month + '-' + day;     
        var maxdate = new Date('01/01/2050').setHours(0, 0, 0, 0);


        if (_name == "EffectDate") {
            $thisForm.find('[name="EffectDate"]').closest('[perfect-class="formGroup"]').find('#EffectDate-error').prop("style", "display:none");
            $thisForm.find('[name="EffectDate"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
            if (tday > EffectDate || maxdate < EffectDate) {
                $thisForm.find('[name="EffectDate"]').val(newdate);
                valid = false;
            }
            
        }
        else {
            $thisForm.find('[name="TransDate"]').closest('[perfect-class="formGroup"]').find('#TransDate-error').prop("style", "display:none");
            $thisForm.find('[name="TransDate"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
            if (tday > TransDate || maxdate < TransDate) {
                  $thisForm.find('[name="TransDate"]').val(newdate);
                      
                valid = false;
            }
        }
        if (valid) {
            if (Date.parse(TransDate) > Date.parse(EffectDate)) {

                console.log(_name);
                if (_name == "EffectDate") {

                    $thisForm.find('[name="EffectDate"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('Effect Date should be greater than Trans Date');
                    valid = false;
                } else {

                    $thisForm.find('[name="TransDate"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('Trans Date should be less than  Effect Date');
                    valid = false;
                }

            } else {
                $thisForm.find('[name="EffectDate"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');
                $thisForm.find('[name="TransDate"]').closest('[perfect-class="formGroup"]').find('.temptableError').text('');

            }
        }
     
        return valid;



    }

</script>

