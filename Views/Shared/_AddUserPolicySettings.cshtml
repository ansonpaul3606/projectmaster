@model PerfectWebERP.Models.UserPolicySettingsModel.UserPolicySettingsView

<div class="card ">

    <div class="card-header">
        <h4 class="card-title col-12">User Policy Settings</h4>
       
    </div>
    <div class="card-body">
        <form id="" class="form-valide" perfect-class="form" action="#" method="post" perfect-onFormSuccess="">
            <div class="">
                @Html.AntiForgeryToken()
                <div class="row">


                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Password Combination</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <select class="form-control perfectValidate_numeric Action" perfect-tempTable-Purchase="Password"  name="Passwordcombination" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" >
                                    <option value="">Please Select</option>
                                    <option value="1">Alpha Numeric</option>
                                    <option value="2">Numeric Only</option>
                                    <option value="3">Alpha Only</option>
                                    <option value="4">Alpha Numeric + Special Characters + at least 1 Upper Case </option>
                                </select>
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Minimum Length</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control perfectValidate_numeric" placeholder="" perfect-tempTable-Purchase="Password" name="Passwordminimumlength" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" @*value="@Model.SortOrder"*@ onkeypress="return isNumberKey(event)" min="1" maxlength="2"/>
                                <div class="invalid-feedback animated fadeInUp limit-check" style="display: block;"></div>
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Maximum Length</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control perfectValidate_numeric " placeholder="" perfect-tempTable-Purchase="Password" id="Passwordmaximumlengthid" name="Passwordmaximumlength" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" @*value="@Model.SortOrder"*@ onkeypress="return isNumberKey(event)" onchange="checkLimit(this)" min="1" maxlength="2"/>
                                <div class="invalid-feedback animated fadeInUp limit-check" style="display: block;"></div>
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Change Period</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control perfectValidate_numeric "  placeholder="" perfect-tempTable-Purchase="Password" id="Passwordchangeperiodid" name="Passwordchangeperiod" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" @*value="@Model.SortOrder"*@onkeypress="return isNumberKey(event)" onchange="checkLimit(this)"/>
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Login Attempt Count</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control perfectValidate_numeric "  placeholder="" perfect-tempTable-Purchase="Password" id="Passwordloginattemptid" name="Passwordloginattempt" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" @*value="@Model.SortOrder"*@onkeypress="return isNumberKey(event)" min="1" maxlength="2"/>
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">History Check</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control perfectValidate_numeric " title="History check in month"  placeholder="" perfect-tempTable-Purchase="Password" id="Passwordhistorycheckid" name="Passwordhistorycheck" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" @*value="@Model.SortOrder"*@ onkeypress="return isNumberKey(event)"/>
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-6">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Unused User Ban Period</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control perfectValidate_numeric " title="Period in month" placeholder="" perfect-tempTable-Purchase="Password" id="Unuseduserbanperiodid" name="Unuseduserbanperiod" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" @*value="@Model.SortOrder"*@onkeypress="return isNumberKey(event)" />
                            </div>
                        </div>
                    </div>

                </div>


            </div>
            <div class="card-footer text-right" perfect-class="formFooter">
                @if (ViewBag.PagedAccessRights.UsrrlStEdt)
                {
                    <button id="" type="button" class="btn btn-primary mr-3 addcompany-jq-addnewuserUpdate d-none" name="update" perfect-css="button" onclick="UpdatePaymentMethod(this)"><i class="fa fa-refresh fa-spin  loaderClass"></i>Update</button>
                }
                @if (ViewBag.PagedAccessRights.UsrrlStAdd)
                {
                    <button id="addcompany-jq-addnewuser" type="button" class="btn btn-primary mr-3 " name="save" perfect-css="button" onclick="fn_PaymentMethodForm_add(this)"><i class="fa fa-refresh fa-spin loaderClass "></i>Save</button>
                }
                    <button type="button" class="btn btn-light" perfect-css="button" onclick="ResetButton(this)" name="reset">Clear</button>
                </div>
        </form>
    </div>


</div>
<script>
    (function () {
        /*jQuery('form').validate();*///<-----  Validate/initialize our form on page load
        jQuery('select').selectpicker();
       
        
    })();

    function checkLimit(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        //invalid-feedback
        let upperlimit = $thisForm.find('[name=Passwordminimumlength]').val();
        let lowerlimit = $thisForm.find('[name=Passwordmaximumlength]').val();
        //   alert(upperlimit);
        //  alert(lowerlimit);
        if (parseFloat(upperlimit) > parseFloat(lowerlimit)) {
            // alert(1);
            console.log('inside limit check if')
            $thisForm.find('[name="Passwordmaximumlength"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('password maximum length should be greater than password minimum length')
        }
        else {
            // alert(2);
            console.log('inside limit check else')
            $thisForm.find('[name="Passwordmaximumlength"]').closest('[perfect-class="formGroup"]').find('.limit-check').text('')
        }


    }

    function ResetButton(ele) {


        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let pData = $thisForm.data('pData');
        if (pData) {

            $thisForm.find('[name=Passwordcombination]').val(pData.Data[0].UplSecValue).selectpicker('refresh'),
                $thisForm.find('[name=Passwordminimumlength]').val(pData.Data[1].UplSecValue),
                $thisForm.find('[name=Passwordmaximumlength]').val(pData.Data[2].UplSecValue),
                $thisForm.find('[name=Passwordchangeperiod]').val(pData.Data[3].UplSecValue),
                $thisForm.find('[name=Passwordloginattempt]').val(pData.Data[4].UplSecValue),
                $thisForm.find('[name=Passwordhistorycheck]').val(pData.Data[5].UplSecValue),
                $thisForm.find('[name=Unuseduserbanperiod]').val(pData.Data[6].UplSecValue)
        } else {
            
            $thisForm.find('[perfect-ctype="input"]').val('');
            $thisForm.find('[perfect-ctype="number"]').val('');
            $thisForm.find('[perfect-ctype="digit"]').val('');
            $thisForm.find('[perfect-ctype="select"]').val('').selectpicker('refresh');

        }

        $thisForm.validate().resetForm();
    }

    function fn_PaymentMethodForm_add(ele) {


        let $thisForm = $(ele).closest('[perfect-class="form"]');

        //<------Form element :  Our Form which contain our input elements ,saved in a variable for reusability

        // if (($thisForm.find('[name=Sales]').is(":checked") || $thisForm.find('[name=SalesReturn]').is(":checked") || $thisForm.find('[name=Purchase]').is(":checked") || $thisForm.find('[name=PurchaseReturn]').is(":checked") || $thisForm.find('[name=Other]').is(":checked"))) {
        
            //$(ele).find('i').removeClass();

            console.log('> Add userpolicysettings form IS valid', $thisForm.valid())
        if ($thisForm.valid() && ($thisForm.find('[name="Passwordminimumlength"]').val() != null || $thisForm.find('[name="Passwordmaximumlength"]').val() != null)) {//<---------Validation :  To Check whether the form is vaild(ie; values in the form contrls are valid)
            let upperlimit = $thisForm.find('[name="Passwordminimumlength"]').val();
            let lowerlimit = $thisForm.find('[name="Passwordmaximumlength"]').val();
            if (parseFloat(upperlimit) > parseFloat(lowerlimit)) {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Password maximumlength should greater than Password minimumlength' });
            }
            else {
                $(ele).prop('disabled', true); // avoiding form submit the double click

                var Passwordcombinationid = 1;
                var Passwordminimumlengthid = 2;
                var Passwordmaximumlengthid = 3;
                var Passwordchangeperiodid = 4;
                var Passwordloginattemptid = 5;
                var Passwordhistorycheckid = 6;
                var Unuseduserbanperiodid = 7;

                var Passwordcombination = $thisForm.find('[name=Passwordcombination]').val();
                var Passwordminimumlength = $thisForm.find('[name=Passwordminimumlength]').val().trim();
                var Passwordmaximumlength = $thisForm.find('[name=Passwordmaximumlength]').val().trim();
                var Passwordchangeperiod = $thisForm.find('[name=Passwordchangeperiod]').val().trim();
                var Passwordloginattempt = $thisForm.find('[name=Passwordloginattempt]').val().trim();
                var Passwordhistorycheck = $thisForm.find('[name=Passwordhistorycheck]').val().trim();
                var Unuseduserbanperiod = $thisForm.find('[name=Unuseduserbanperiod]').val().trim();

                //let UplSecMod = [];

                //UplSecMod.push(Passwordcombinationid, Passwordminimumlengthid, Passwordmaximumlengthid, Passwordchangeperiodid, Passwordloginattemptid, Passwordhistorycheckid, Unuseduserbanperiodid);
                //console.log('save', UplSecMod);

                //let UplSecVal = [];

                //$thisForm.find('[perfect-tempTable-Purchase="Password"]').find('tbody').find('tr').each(function () {
                //   UplSecVal.push(Passwordcombination, Passwordminimumlength,
                //    Passwordmaximumlength, Passwordchangeperiod, Passwordloginattempt,
                //   Passwordhistorycheck, Unuseduserbanperiod);
                //})

                //console.log('save', UplSecVal);
                //alert(UplSecVal);

                //let UplSecMod = [];
                ////let secmod = {};
                ////secmod['Passwordcombinationid'] = 1;
                ////secmod['Passwordminimumlengthid'] = 2;
                ////secmod['Passwordmaximumlengthid'] = 3;
                ////secmod['Passwordchangeperiodid'] = 4;
                ////secmod['Passwordloginattemptid'] = 5;
                ////secmod['Passwordhistorycheckid'] = 6;
                ////secmod['Unuseduserbanperiodid'] = 7;
                ////console.log('save', secmod);
                ////UplSecMod.push(secmod)
                //UplSecMod.push(Passwordcombinationid, Passwordminimumlengthid, Passwordmaximumlengthid, Passwordchangeperiodid,
                //    Passwordloginattemptid, Passwordhistorycheckid, Unuseduserbanperiodid);
                //console.log('save', UplSecMod);
                //alert(UplSecMod);

                //let UplSecVal = [];
                ////let info = {};
                ////info['Passwordcombination'] = $thisForm.find('[name=Passwordcombination]').val();
                ////info['Passwordminimumlength'] = $thisForm.find('[name=Passwordminimumlength]').val();
                ////info['Passwordmaximumlength'] = $thisForm.find('[name=Passwordmaximumlength]').val();
                ////info['Passwordchangeperiod'] = $thisForm.find('[name=Passwordchangeperiod]').val();
                ////info['Passwordloginattempt'] = $thisForm.find('[name=Passwordloginattempt]').val();
                ////info['Passwordhistorycheck'] = $thisForm.find('[name=Passwordhistorycheck]').val();
                ////info['Unuseduserbanperiod'] = $thisForm.find('[name=Unuseduserbanperiod]').val();
                ////console.log('save', info);
                ////UplSecVal.push(info)
                //UplSecVal.push(Passwordcombination, Passwordminimumlength,
                //    Passwordmaximumlength, Passwordchangeperiod, Passwordloginattempt,
                //    Passwordhistorycheck, Unuseduserbanperiod);
                //console.log('save', UplSecVal);


                //alert(UplSecVal);

                let UpSecdatas = [];
                var MODE1 = { UplSecMode: Passwordcombinationid, UplSecValue: Passwordcombination }
                var MODE2 = { UplSecMode: Passwordminimumlengthid, UplSecValue: Passwordminimumlength }
                var MODE3 = { UplSecMode: Passwordmaximumlengthid, UplSecValue: Passwordmaximumlength }
                var MODE4 = { UplSecMode: Passwordchangeperiodid, UplSecValue: Passwordchangeperiod }
                var MODE5 = { UplSecMode: Passwordloginattemptid, UplSecValue: Passwordloginattempt }
                var MODE6 = { UplSecMode: Passwordhistorycheckid, UplSecValue: Passwordhistorycheck }
                var MODE7 = { UplSecMode: Unuseduserbanperiodid, UplSecValue: Unuseduserbanperiod }

                UpSecdatas.push(MODE1);
                UpSecdatas.push(MODE2);
                UpSecdatas.push(MODE3);
                UpSecdatas.push(MODE4);
                UpSecdatas.push(MODE5);
                UpSecdatas.push(MODE6);
                UpSecdatas.push(MODE7);

                //alert(UpSecdatas);
                //console.log("pwdcombination", UpSecdatas);

                var inputData = {//<---- Input Json : this is the variable we pass to controller
                    __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                    //'UplSecMods': UplSecMod,
                    'UplSecdata': UpSecdatas,

                };


                console.log('> Add userpolicysettings ajax input', inputData);


                $.ajax({
                    url: "@Url.Action("AddNewUserPolicySettings", "UserPolicySettings")",
                    type: "POST",
                    data: inputData,//<---- Input json : data passed to controller
                    dataType: "json",

                    contentType: 'application/x-www-form-urlencoded;charset=utf-8',
                    success: function (ajaxOutput) {//<----- if ajax method executed succesfully,  we get the data passed from controller in this variable  => success: function (variable) {

                        if (ajaxOutput.Process.IsProcess) {
                          
                            $.each(ajaxOutput.Process.Message, function (key, value) {
                                //toastr.success(value, "Success");
                                NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                            });
                            $thisForm.find('[perfect-ctype="select"]').val('').selectpicker('refresh');
                            $thisForm.find('[perfect-ctype="input"]').val('');
                            $thisForm.find('[perfect-ctype="number"]').val('');



                            //let onSuccess = $thisForm.attr('perfect-onFormSuccess')

                            getuserpolicydatas();

                            //---------- Do stuff if success

                            console.log('> Add new userpolicysettings success data', ajaxOutput);
                        }
                        else {
                            $.each(ajaxOutput.Process.Message, function (key, value) {
                                //toastr.warning(value, "Error");
                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                            });
                        }
                    },
                    complete: function () {
                        $(ele).prop('disabled', false);
                    }

                });
                //refreshPage();
            }


        }

    }
    function refreshPage() {
        window.location.reload();
    } 

    function UpdatePaymentMethod(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');//<------Form element :  Our Form which contain our input elements ,saved in a variable for reusability

        //perfectCRMvalidation.init($thisForm);

        if ($thisForm.valid() && ($thisForm.find('[name="Passwordminimumlength"]').val() != null || $thisForm.find('[name="Passwordmaximumlength"]').val() != null)) {//<---------Validation :  To Check whether the form is vaild(ie; values in the form contrls are valid)
            let upperlimit = $thisForm.find('[name="Passwordminimumlength"]').val();
            let lowerlimit = $thisForm.find('[name="Passwordmaximumlength"]').val();
            if (parseFloat(upperlimit) > parseFloat(lowerlimit)) {
                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Password maximumlength should greater than Password minimumlength' });
            }
            else {
                $(ele).prop('disabled', true);

                let pdata = $thisForm.data('pData');

                console.log('> Update userpolicy form data saved', pdata);

                var Passwordcombinationid = 1;
                var Passwordminimumlengthid = 2;
                var Passwordmaximumlengthid = 3;
                var Passwordchangeperiodid = 4;
                var Passwordloginattemptid = 5;
                var Passwordhistorycheckid = 6;
                var Unuseduserbanperiodid = 7;

                var Passwordcombination = $thisForm.find('[name=Passwordcombination]').val().trim();
                var Passwordminimumlength = $thisForm.find('[name=Passwordminimumlength]').val().trim();
                var Passwordmaximumlength = $thisForm.find('[name=Passwordmaximumlength]').val().trim();
                var Passwordchangeperiod = $thisForm.find('[name=Passwordchangeperiod]').val().trim();
                var Passwordloginattempt = $thisForm.find('[name=Passwordloginattempt]').val().trim();
                var Passwordhistorycheck = $thisForm.find('[name=Passwordhistorycheck]').val().trim();
                var Unuseduserbanperiod = $thisForm.find('[name=Unuseduserbanperiod]').val().trim();

                let UpSecdatas = [];
                var MODE1 = { UplSecMode: Passwordcombinationid, UplSecValue: Passwordcombination }
                var MODE2 = { UplSecMode: Passwordminimumlengthid, UplSecValue: Passwordminimumlength }
                var MODE3 = { UplSecMode: Passwordmaximumlengthid, UplSecValue: Passwordmaximumlength }
                var MODE4 = { UplSecMode: Passwordchangeperiodid, UplSecValue: Passwordchangeperiod }
                var MODE5 = { UplSecMode: Passwordloginattemptid, UplSecValue: Passwordloginattempt }
                var MODE6 = { UplSecMode: Passwordhistorycheckid, UplSecValue: Passwordhistorycheck }
                var MODE7 = { UplSecMode: Unuseduserbanperiodid, UplSecValue: Unuseduserbanperiod }

                UpSecdatas.push(MODE1);
                UpSecdatas.push(MODE2);
                UpSecdatas.push(MODE3);
                UpSecdatas.push(MODE4);
                UpSecdatas.push(MODE5);
                UpSecdatas.push(MODE6);
                UpSecdatas.push(MODE7);

                //alert(UpSecdatas);
                //console.log("pwdcombination", UpSecdatas);
                var inputData = {//<---- Input Json : this is the variable we pass to controller
                    __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                    'UplSecdata': UpSecdatas,

                };

                console.log('> pwdcombination', inputData);
                $.ajax({
                    url: "@Url.Action("UpdateUserpolicySettings", "UserPolicySettings")",
                    type: "POST",
                    data: inputData,//<---- Input json : data passed to controller
                    dataType: "json",
                    contentType: 'application/x-www-form-urlencoded;charset=utf-8',
                    success: function (ajaxOutput) { //<----- if ajax method executed succesfully,  we get the data passed from controller in this variable  => success: function (variable) {

                        if (ajaxOutput.Process.IsProcess) {
                            
                            $.each(ajaxOutput.Process.Message, function (key, value) {
                                //toastr.success(value, "Success");
                                NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': 'Updated Successfully' });
                            });


                            let onSuccess = $thisForm.attr('perfect-onFormSuccess')
                            if (onSuccess) {
                                window[onSuccess]($thisForm);
                            }



                            //---------- Do stuff if success
                            //toastr.success("Inside success", "Confirmation Box in table");

                            console.log('> update new PaymentMethod data', ajaxOutput);
                            getuserpolicydatas();
                        }
                        else {
                            $.each(ajaxOutput.Process.Message, function (key, value) {
                                //toastr.warning(value, "Error");
                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                            });
                        }


                    },
                    complete: function () {
                        $(ele).prop('disabled', false);


                    }

                });
                //refreshPage();
            }
        }
    }

    @*function getuserpolicydatas() {
        let row = $(this).closest('tr');

        let Saveddata = row.data('pData');
        console.log("Saved data", Saveddata);
        let inputData = {
            __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
           //PaymentmethodID: Saveddata.PaymentmethodID

        };

        $.ajax({
            url: '@Url.Action("Getuserpolicydata", "UserPolicySettings")',
            type: "GET",

            data: inputData,
            dataType: "json",
            contentType: 'application/x-www-form-urlencoded;charset=utf-8',
            success: function (ajaxOutput) {


                console.log("Return", ajaxOutput);
                if (ajaxOutput.Process.IsProcess) {

                    console.log('>_ Inside GetPaymentMethodById', ajaxOutput)

                    $sideMenuOptions.close();

                    $formContainer.load("@Url.Action("LoadUserPolicySettingsForm", "UserPolicySettings")", function () {

                        //$(this).find('[perfect-class=formTitle]').text('UPDATE : ' + ajaxOutput.Data[0].Name)
                        console.log('Inside load');

                        let $thisForm = $(this).find('[perfect-class="form"]');

                        $thisForm.validate({ messages: validationMessage });

                        $thisForm.data({ pData: ajaxOutput.Data[0] }); //setting the pdata value in form for update -id is taking

                        $thisForm.attr('perfect-onFormSuccess', 'PaymentMethodInitialLoad');
                        // alert(ajaxOutput.Data[0].BranchTypeID);
                        $thisForm.find('button[name=save]').addClass('d-none');
                        $thisForm.find('button[name=update]').removeClass('d-none');
                       
                            $thisForm.find('[name="Passwordcombination"]').val(ajaxOutput.Data[0].UplSecValue).selectpicker('refresh'),
                            $thisForm.find('[name="Passwordminimumlength"]').val(ajaxOutput.Data[1].UplSecValue),
                            $thisForm.find('[name="Passwordmaximumlength"]').val(ajaxOutput.Data[2].UplSecValue),
                            $thisForm.find('[name="Passwordchangeperiod"]').val(ajaxOutput.Data[3].UplSecValue),
                            $thisForm.find('[name="Passwordloginattempt"]').val(ajaxOutput.Data[4].UplSecValue),
                            $thisForm.find('[name="Passwordhistorycheck"]').val(ajaxOutput.Data[5].UplSecValue),
                            $thisForm.find('[name="Unuseduserbanperiod"]').val(ajaxOutput.Data[6].UplSecValue)
                       
                    });
                }
                else {
                    console.log('>_ Inside GetPaymentMethodById :false')

                    $.each(ajaxOutput.Process.Message, function (key, value) {
                        NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                    });
                }
            },

        });

        }*@
    function isNumberKey(evt) {
        var charCode = (evt.which) ? evt.which : event.keyCode
        if (charCode > 31 && (charCode < 48 || charCode > 57))
            return false;

        return true;
    }
</script>