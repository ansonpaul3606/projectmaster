@model PerfectWebERP.Models.EMIDetailsGridModel.EmiViewList

<style>
    .tableFixHead {
        overflow: auto;
        height: 500px;
    }

        .tableFixHead thead tr {
            position: sticky;
            top: 0;
            z-index: 1;
        }

    table {
        border-collapse: collapse;
        width: 100%;
    }

    th, td {
        padding: 8px 16px;
    }

    th {
        background: var(--perfect-primary);
    }

    .btn-export {
        /*//height:10px;*/
        background-color: #2aa2ad;
        color: white;
    }

    .div-export {
        float: right;
        margin-left: 3px;
        /*background-color:red;*/
        height: 41px;
        /*// width:90px;*/
    }

        .div-export:hover {
            color: white !important;
        }

    .btn-export :hover {
        color: white !important;
    }
</style>


<div class="card ">

    <div class="card-header">
        <div class="col-xl-4">
            <h4 class="card-title col-12">EMI Monitoring Report</h4>
        </div>
        <div class="col-xl-4 text-right">
            <button id="refreshLeadMgt" type="button" class="btn  btn-primary btn-sm" name="Search" perfect-css="button" onclick="fn_LeadMgtIndex_loadLeadMgtAddForm()" title="To Refresh"><i class="fa fa-refresh"></i></button>
            <button id="addcompany-jq-addnewuser" type="button" class="btn  btn-primary btn-sm" name="Search" perfect-css="button" onclick="fn_showFilter()" title="To Filter"><i class="fa fa-filter"></i></button>
            <div class="dropdown div-export" id="exppdf" style="display:none   ">

                <button class="btn  dropdown-toggle btn-sm btn-export" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    <span><i class="fa fa-file-o" style="font-size:16px"></i> </span>

                </button>
                <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                    <a class="dropdown-item" href="#" onclick="generatePdf(this)">PDF</a>
                    <a class="dropdown-item" href="#" onclick="onExell()">EXCEL </a>

                </div>
            </div>




        </div>


    </div>

    <div class="card-body jq_leadgeneration_body ">
        <form id="" class="form-valide" perfect-class="form" action="#" method="post" perfect-onFormSuccess="">
            <div class="leadformSesction">
                @Html.AntiForgeryToken()
                <div class="row">

                    <div class="col-sm-3">
                        <div class="form-group">
                            <label>Finance Plan Type</label>
                            <select id="LeadFrom" class="form-control exptbttontoogle" name="FK_FinancePlanType" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select">
                                <option value="0">Please select</option>
                                @if (!(Model.FinancePlanlists is null))
                                {
                                    foreach (var FinPlan in Model.FinancePlanlists)
                                    {
                                        <option value="@FinPlan.FinancePlanTypeID">@FinPlan.FinanceName</option>
                                    }
                                }
                            </select>
                        </div>
                    </div>
                    <div class="col-sm-3">
                        <div class="form-group">
                            <label>As On Date</label>
                            <input type="date" class="form-control exptbttontoogle " name="FromDate" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" />
                        </div>
                    </div>

                    <div class="col-sm-3" style="display:none">
                        <div class="form-group">
                            <label>To Date</label>
                            <input type="date" class="form-control exptbttontoogle " name="ToDate" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" />
                        </div>
                    </div>
                    <div class="col-sm-3">
                        <div class="form-group">
                            <label>EMI No</label>
                            <input type='text' class="form-control exptbttontoogle" name="EMINo" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="this.value = this.value.replace(/[^A-Za-z0-9.-]/g, '').replace(/(\..*)\./g, '$1');" maxlength="20" />
                        </div>
                    </div>
                    <div class="col-sm-3">
                        <div class="form-group">
                            <label>Category</label>
                            <select class="form-control exptbttontoogle" name="FK_Category" perfect-class="formGroupControl" placeholder="Select Catogory" perfect-ctype="select" perfect-css="select">
                                <option value="0">Please select</option>
                                @if (!(Model.CategoryList is null))
                                {
                                    foreach (var category in Model.CategoryList)
                                    {
                                        <option value="@category.ID_Catg">@category.CatgName</option>
                                    }
                                }
                            </select>
                        </div>
                    </div>
                    <div class="col-sm-3">
                        <div class="form-group">
                            <label>Branch</label>
                            <input type="hidden" name="FK_BranchMode" class="form-control" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                            <select class="form-control exptbttontoogle" name="FK_Branch" id="BranchID" perfect-class="formGroupControl" placeholder="Select Branch" perfect-ctype="select" perfect-css="select">
                                <option value="0">Please select</option>
                                @if (!(Model.BranchList is null))
                                {
                                    foreach (var Branch in Model.BranchList)
                                    {
                                        <option value="@Branch.ID_Branch">@Branch.BranchName</option>
                                    }
                                }
                            </select>
                        </div>
                    </div>
                    <div class="col-sm-3">
                        <div class="form-group " perfect-class="formGroup">
                            <label>Product</label>
                            <div class="input-group">
                                <span perfect-class="formGroupLabel"></span>
                                <input type="text" class="form-control exptbttontoogle " name="ProdName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" placeholder="Select Product" readonly />
                                <input type="hidden" class="exptbttontoogle" name="ID_Product" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />

                                <div class="input-group-append">
                                    <button id="addEmployee-jq-searchButton3" class="btn btn-primary fa fa-search" name="ProdBtn" type="button" perfect-css="button" onclick="GetCmnPopUpSearchVal(this,18,'Product Details',[])" Criterea1="0" Criterea2="0" BindName="ProdName" BindVal="ID_Product" Function="1"></button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-3">
                        <div class="form-group">
                            <label>Customer</label>
                            <div class="input-group">
                                <input type="text" class="form-control exptbttontoogle" name="CustomerName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" placeholder="Select Customer" disabled />
                                <input type="hidden" name="FK_Customer" class="form-control exptbttontoogle" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                <div class="input-group-append">
                                    <button id="addproduct-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchValAssign(this,24,'Customer List',[],['CustomerMobile','OtherMobile','CustomerAddress','CusMode'])" Criterea1="0" Criterea2="0" BindName="CustomerName" BindVal="FK_Customer" Function="1"></button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-3">
                        <div class="form-group">
                            <label>District</label>                           
                                <div class="input-group">
                                    <input type="text" class="form-control exptbttontoogle" name="District" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" placeholder="Select District" disabled />
                                    <input type="hidden" name="DistrictID" class="form-control exptbttontoogle" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                    <div class="input-group-append">                                       
                                        <button id="addproduct-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchVal(this,19,'District List',['','','Area_ID','Area'])" Criterea1="0" Criterea2="0" BindName="District" BindVal="DistrictID" Function="1"></button>
                                    </div>
                                </div>                           
                        </div>
                    </div>
                    <div class="col-sm-3">
                        <div class="form-group">
                            <label>Area</label>
                            <div class="input-group">
                                <input type="text" class="form-control exptbttontoogle" name="Area" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" placeholder="Select Area" disabled />
                                <input type="hidden" name="Area_ID" class="form-control exptbttontoogle" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                <div class="input-group-append">
                                    <button id="addproduct-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchVal(this,14,'Area List',[])" Criterea1="DistrictID" Criterea2="0" BindName="Area" BindVal="Area_ID" Function="1"></button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-3">
                        <div class="form-group">
                            <label>Demand</label>
                            <input type="text" class="form-control exptbttontoogle" placeholder="Demand in Days" name="Demand" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" oninput="this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');" maxlength="3" />
                        </div>
                    </div>


                    <div class="col-sm-10">
                        <div class="form-group">
                        </div>
                    </div>

                    <div class="col-sm-2">

                        <button id="addcompany-jq-addnewuser" type="button" class="btn btn-primary" name="Search" perfect-css="button" onclick=" fn_showFilter(); fn_LeadSearchbyfilter(this);"><i class="fa fa-refresh fa-spin loaderClass "></i>Search</button>

                        <button type="button" id="clear" class="btn btn-light1" perfect-css="button" onclick="Cleardetailsfilter(this)">Clear</button>



                    </div>
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-xl-12">

                    <div class="default-tab">
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="nav-item">
                                <a class="nav-link active" id="Todolist" data-toggle="tab" href="#home" onclick="fn_LeadManagement_search(this,1)"><i class="las la-tasks  mr-2"></i> Todays Collection List &nbsp;&nbsp;<span><label id="todayscollectionbadge" class="badge badge-circle badge-info">0</label></span> </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" id="OverdueList" data-toggle="tab" href="#profile" onclick="fn_LeadManagement_search(this,2)"><i class="las la-exclamation mr-2"></i> Over Due&nbsp;&nbsp;<label id="overduebadge" class="badge badge-circle badge-primary">0</label></a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" id="UpcomingList" data-toggle="tab" href="#contact" onclick="fn_LeadManagement_search(this,3)"><i class="las la-scroll mr-2"></i>Demand&nbsp;&nbsp;<label id="demandbadge" class="badge badge-circle badge-success">0</label></a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" id="UpcomingList" data-toggle="tab" href="#intimation" onclick=""><i class="fa fa-bell mr-2"></i>Send Intimation&nbsp;&nbsp;<label id="Smsbadge" class=""></label></a>
                            </li>


                        </ul>

                        <div class="tab-content">
                            <div class="tab-pane fade active show" id="home" role="tabpanel">
                                <br />
                                <div class="row">

                                    <div class="table-responsive col-md-12 SearchLoadDiv tableFixHead" name="home" id="home"></div>

                                </div>
                            </div>
                            <div class="tab-pane fade" id="profile">
                                <br />
                                <div class="row">

                                    <div class="table-responsive col-md-12 SearchLoadDiv tableFixHead" name="profile" id="profile"></div>

                                </div>
                            </div>
                            <div class="tab-pane fade" id="contact">
                                <br />
                                <div class="row">

                                    <div class="table-responsive col-md-12 SearchLoadDiv tableFixHead" name="contact" id="contact"></div>

                                </div>
                            </div>

                            <div class="tab-pane fade" id="message">
                                <br />
                                <div class="row">

                                    <div class="table-responsive col-md-12 SearchLoadDiv tableFixHead" name="SearchLoadDiv"></div>

                                </div>
                            </div>
                            <div class="tab-pane fade" id="intimation" style="width:100%; height:300px;  align-items: center; justify-content: center; height: 100%;">
                                <br />
                                <div id="stage1">
                                    <div class="row" style="margin:10px">





                                        <div class="col-sm-4">
                                            <div class="form-group row" perfect-class="formGroup">
                                                <label class="col-sm-4 col-form-label">
                                                    <span perfect-class="formGroupLabel">Intimation Type</span>
                                                    <span class="text-danger">*</span>
                                                </label>
                                                <div class="col-sm-8">
                                                    <select class="form-control" id="IntimationType" name="IntimationType" perfect-class="formGroupControl" onchange="" perfect-ctype="select" perfect-css="select">
                                                        <option value=0>Please Select </option>
                                                        @if (!(Model.ActionStatusList is null))
                                                        {
                                                            foreach (var FinPlan in Model.ActionStatusList)
                                                            {
                                                                <option value="@FinPlan.ID_Mode">@FinPlan.ModeName</option>
                                                            }
                                                        }

                                                    </select>
                                                    <span class="temptableError" id="IntimationTypeErr"></span>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="col-sm-4">
                                            <div class="form-group row" perfect-class="formGroup">
                                                <label class="col-sm-4 col-form-label">
                                                    <span perfect-class="formGroupLabel">Send To</span>
                                                    <span class="text-danger">*</span>
                                                </label>
                                                <div class="col-sm-8">
                                                    <select class="form-control" id="SendTo" name="SendTo" perfect-class="formGroupControl" onchange="" perfect-ctype="select" perfect-css="select">
                                                        <option value="2">Over Due</option>
                                                        <option value="3">Demand</option>


                                                    </select>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="card-footer text-right" perfect-class="formFooter">


                                            <button id="addcompany-jq-addnewuser" type="button" class="btn btn-primary mr-3 " name="add" perfect-css="button" onclick="SendIntimation(this)"><i class="fa fa-refresh fa-spin loaderClass "></i>Send</button>

                                            <button type="button" class="btn btn-light" perfect-css="button" onclick="Clearintimation(this)" name="reset">Clear</button>
                                        </div>




                                    </div>
                                </div>


                            </div>
                        </div>
                </div>
            </div>

            <div style="display:none;" id="exportpdf"></div>

            @*<div id="pssExportTable">
                    <div class="row">
                        <div class="table-responsive col-md-12 SearchLoadDiv " name="pssExportTable" id="pssExportTable"></div>
                    </div>
                </div>*@
        </form>
        <div class="jq_leadgeneration_followup_status">

        </div>
        <input type="hidden" id="ID_LeadGenerateActionhdn" />
    </div>
</div>

<script src="~/Scripts/jqDOM/searchDOMCreation.js"></script>
<script>

    var Data;
    var EmiType;
    $(document).ready(function () {
        //$('.dividsearch').hide();
       
        initFunctions('form');
        Getdepartmentdefault(this);

        //$('#Todolist')[0].click();
       
    });
    

    function Getdepartmentdefault() {
        let $thisForm = $('[perfect-class="form"]');
        $.ajax({
            url: '@Url.Action("GetEmployeeLeadDefault", "ServiceReport")',
            type: "Get",
            dataType: "json",
            contentType: "application/json",
            success: function (ajaxOutput) {//<----- if ajax method executed succesfully,  we get the data passed from controller in this variable  => success: function (variable) {

                if (ajaxOutput.Process.IsProcess) {
                    //var stateModel = createSelectList({ data: ajaxOutput.Data, hideColumn: ['EmpID'] });
                    $.each(ajaxOutput.Data, function (key, value) {

                        console.log('>_ Search button > list click', value);

                        $thisForm.find('[name=FK_Branch]').val(value.ID_Branch).selectpicker('refresh');
                        $thisForm.find('[name=DepartmentID]').val(value.FK_Department).selectpicker('refresh');
                        $thisForm.find('[name=FK_BranchMode]').val(value.FK_BranchMode);

                        let Mode = $thisForm.find('[name=FK_BranchMode]').val();

                        if (parseFloat(Mode) == 1) {

                            $('#BranchID').prop('disabled', false);
                        }
                        else {
                            $('#BranchID').prop('disabled', true);
                        }


                    });




                }
                else {
                    $.each(ajaxOutput.Process.Message, function (key, value) {
                        NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                    });
                }

            },


        });
    }


    var tableOptions = {

        onlyShowColumn: ['SlNo.', 'EMINo','CusNumber', 'Customer', 'CustomerAddress', 'StartDate', 'Mobile', 'Product', 'FinancePlan', 'LastTransaction', 'NetAmount','TotalPaid', 'NextEMIDate', 'DueDate', 'DueAmount',  'Balance','Remark','InstNo'],
        hideColumn: ["ID_CustomerWiseEMI", "FineAmount"],
        //rowClickAction:,
        serialNo: false,
        renameHeader: {
            "EMINo": "EMI No","CusNumber":"Customer No", "Customer": "Customer Name", "CustomerAddress": "Address", "Mobile": "Mobile", "Product": "Product/Project", "StartDate": "Date of Installation/Sale", "FinancePlan": "Finance Plan", "NetAmount": "Total Amount", "TotalPaid":"Total Paid", "NextEMIDate": "Next EMI Date","Remark":"Remarks", "DueAmount": "DueAmount1R", "FineAmount": "FineAmount1R", "Balance": "Balance1R"},
        isDateType: ['LastTransaction', 'NextEMIDate', 'DueDate','StartDate'],
    };

    function fn_LeadSearchbyfilter(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        $thisForm.find('[name=home]').empty();
        $thisForm.find('[name=profile]').empty();
        $thisForm.find('[name=contact]').empty();

        //$(".nav-link").removeClass("active");
        //$('#Todolist').addClass('active');       

        let inputData = {
            __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
            'FK_FinancePlanType': $('[name=FK_FinancePlanType]').val().trim(),
            'FromDate': $('[name=FromDate]').val(),
            'ToDate': $('[name=ToDate]').val(),
            'EMINo': $('[name=EMINo]').val().trim(),
            'FK_Branch': $('[name=FK_Branch]').val().trim(),
            'FK_Area': $('[name=Area_ID]').val(),
            'FK_District': $('[name=DistrictID]').val(),
            'FK_Category': $('[name=FK_Category]').val(),
            'FK_Product': $('[name=ID_Product]').val(),
            'FK_Customer': $('[name=FK_Customer]').val(),
            'Demand': $('[name=Demand]').val().trim(),
            'PageSize': 10,
            'PageIndex': 0,
            'Mode': 0,           
        };

           $.ajax({
                url: "@Url.Action("GetEmiList", "EMIDetailsGridRpt")",
                type: "POST",
                data: inputData,
                dataType: "json",
                contentType: "application/x-www-form-urlencoded;charset=utf-8",
               success: function (ajaxOutput) {
                   console.log("ajaxOutput>1", ajaxOutput);                  
                    if (ajaxOutput.Process.IsProcess && ajaxOutput.Data[0].Masterid > 0) {
                       
                        $('#todayscollectionbadge').html("" + ajaxOutput.Data[0].Value + "");
                        $('#overduebadge').html("" + ajaxOutput.Data[1].Value + "");
                        $('#demandbadge').html("" + ajaxOutput.Data[2].Value + "");
                        $("#Todolist")[0].click();
                        $('html,body').animate({ scrollTop: $($thisForm.closest('.jq_leadgeneration_body').find('.SearchLoadDiv')).offset().top }, 1000);                           
                    }
                },
                complete: function () {
                    
                }
        });       

    }

    var titlepdf;

    function fn_LeadManagement_search(ele, MasterID) {
        debugger
        let $sidemenu = $sideMenuOptions.body;
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let $pssExportTable = $thisForm.find('[name=pssExportTable]');
            $pssExportTable.empty();
        let $formDivContainer;

        if (MasterID == 1) {
            titlepdf = "To-do List";
            $formDivContainer = $thisForm.find('[name=home]');
            $formDivContainer.empty();

        }
        else if (MasterID == 2) {
            titlepdf = "Over Due";
            $formDivContainer = $thisForm.find('[name=profile]');
            $formDivContainer.empty();

        }
        else if (MasterID == 3) {
            titlepdf = "Upcoming Tasks";
            $formDivContainer = $thisForm.find('[name=contact]');
            $formDivContainer.empty();

        }

        var InputData = {
            'FK_FinancePlanType': $('[name=FK_FinancePlanType]').val().trim(),
            'FromDate': $('[name=FromDate]').val(),
            'ToDate': $('[name=ToDate]').val(),
            'EMINo': $('[name=EMINo]').val().trim(),
            'FK_Branch': $('[name=FK_Branch]').val().trim(),
            'FK_Area': $('[name=Area_ID]').val(),
            'FK_District': $('[name=DistrictID]').val(),
            'FK_Category': $('[name=FK_Category]').val(),
            'FK_Product': $('[name=ID_Product]').val(),
            'FK_Customer': $('[name=FK_Customer]').val(),
            'Demand': $('[name=Demand]').val().trim(),
            'PageSize': 10,
            'PageIndex': 0,
            'Mode': MasterID,           
        };

        let pageUrl = '@Url.Action("GetEmiList", "EMIDetailsGridRpt")';
            $.ajax({
                url:pageUrl,
                type: "POST",
                data: InputData,
                dataType: "json",
                contentType: "application/x-www-form-urlencoded; charset=utf-8",
                success: function (ajaxOutput) {

                    console.log(ajaxOutput,"ajaxOutput")

                    if (ajaxOutput.Process.IsProcess && ajaxOutput.Data[0].Masterid <= 0) {
                        if (ajaxOutput.Data.length >= 1) {
                            document.querySelector('#exppdf').style.display = 'block';
                        } else {
                            document.querySelector('#exppdf').style.display = 'none';
                        };
                        EmiType = titlepdf;
                        MstrId = MasterID;
                        console.log(ajaxOutput, "--ajaxOutput--");
                        Data = ajaxOutput.Data;
                        $formDivContainer.append($('<div/>', { class: "col-md-12 table_temp_class" }).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))
                        //$formDivContainer.append('<div class="d-flex justify-content-end mb-3 position-relative"><div class="col-md-1 position-absolute top-1 z-index1"><div class="input-group testSearchBox" id="pssExportButtons"></div></div></div>', $('<div/>', { class: "col-md-12 table_temp_class" }).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))
                        let $table = '';
                        $table = $formDivContainer.find('table');

                        $table.dataTable({
                            "serverSide": true,
                            "processing": true,
                            "lengthMenu": [
                                [10, 15, 20, 25, 50, 100, 0],
                                ["10", "15", "20", "25", "50", "100", "All"]
                            ],
                            "searching": false,
                            "ordering": false,
                            "deferLoading": ajaxOutput.totalrecord,
                            "displayStart": ajaxOutput.PageIndex * ajaxOutput.PageSize,
                            "pageLength": ajaxOutput.PageSize,
                            "recordsFiltered": ajaxOutput.PageSize,
                            "ajax": returnajaxPagination({
                                apiurl: pageUrl,
                                pageSize: ajaxOutput.PageSize,
                                FK_FinancePlanType: $('[name=FK_FinancePlanType]').val().trim(),
                                FromDate: $('[name=FromDate]').val(),
                                ToDate: $('[name=ToDate]').val(),
                                EMINo: $('[name=EMINo]').val(),
                                FK_Branch: $('[name=FK_Branch]').val(),
                                FK_Area: $('[name=Area_ID]').val(),
                                FK_District: $('[name=DistrictID]').val(),
                                FK_Category: $('[name=FK_Category]').val(),
                                FK_Product: $('[name=FK_Product]').val(),
                                FK_Customer: $('[name=FK_Customer]').val(),
                                Demand: $('[name=Demand]').val(),
                                Mode: MasterID                                
                            }, tableOptions, $table, titlepdf)
                        });
                        fn_setExportTableHead($table, titlepdf, [0, 2, 3, 4, 5, 6], "landscape", $thisForm);
                        $('html,body').animate({ scrollTop: $($thisForm.closest('.jq_leadgeneration_body').find('.SearchLoadDiv')).offset().top }, 1000);
                    }
                    else {
                        if (ajaxOutput.Process.Status = "NoData") {

                            $formDivContainer.append($('<div/>', { class: "col-md-12 table_temp_class" }).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))
                            let $table = '';
                            $table = $formDivContainer.find('table');
                            $table.dataTable({
                                "serverSide": true,
                                "processing": true,
                                "lengthMenu": [10, 15, 20, 25, 50, 100],
                                "searching": false,
                                "ordering": false,
                                "deferLoading": ajaxOutput.totalrecord,
                                "displayStart": ajaxOutput.PageIndex * ajaxOutput.PageSize,
                                "pageLength": ajaxOutput.PageSize,
                                "recordsFiltered": ajaxOutput.pageSize,

                                "ajax": returnajaxPagination({
                                    apiurl: pageUrl,
                                    pageSize: ajaxOutput.PageSize,
                                    FK_FinancePlanType: $('[name=FK_FinancePlanType]').val().trim(),
                                    FromDate: $('[name=FromDate]').val(),
                                    ToDate: $('[name=ToDate]').val(),
                                    EMINo: $('[name=EMINo]').val().trim(),
                                    FK_Branch: $('[name=FK_Branch]').val(),
                                    FK_Area: $('[name=Area_ID]').val(),
                                    FK_District: $('[name=DistrictID]').val(),
                                    FK_Category: $('[name=FK_Category]').val(),
                                    FK_Product: $('[name=FK_Product]').val(),
                                    FK_Customer: $('[name=FK_Customer]').val(),
                                    Demand: $('[name=Demand]').val(),
                                    Mode: MasterID                                   
                                }, tableOptions, $table, titlepdf)
                            });

                            fn_setExportTableHead($table, titlepdf, [0, 2, 3, 4, 5, 6], "landscape", $thisForm);
                            $('html,body').animate({ scrollTop: $($thisForm.closest('.jq_leadgeneration_body').find('.SearchLoadDiv')).offset().top }, 1000);
                        }
                        else {
                            document.querySelector('#exppdf').style.display = 'none';
                            $.each(ajaxOutput.Process.Message, function (key, value) {
                                NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                            });
                        }
                        document.querySelector('#exppdf').style.display = 'none';
                    }

            },
            complete: function () {

            }
        });
    }

    function returnajaxPagination(ajaxInfo, tableOptions, tableid, title) {

        return {
            url: ajaxInfo.apiurl,
            type: "post",
            data: function () {
                var info = tableid.DataTable().page.info();

                let input = {
                    PageSize: info.length,
                    PageIndex: info.page,
                    FK_FinancePlanType: ajaxInfo.FK_FinancePlanType,
                    FromDate: ajaxInfo.FromDate,
                    ToDate: ajaxInfo.ToDate,
                    EMINo: ajaxInfo.EMINo,
                    FK_Branch: ajaxInfo.FK_Branch,
                    FK_Area: ajaxInfo.FK_Area,
                    FK_District: ajaxInfo.FK_District,
                    FK_Category: ajaxInfo.FK_Category,
                    FK_Product: ajaxInfo.FK_Product,
                    FK_Customer: ajaxInfo.FK_Customer,
                    Demand: ajaxInfo.Demand,
                    Mode: ajaxInfo.Mode,                    
                };
                return input
            },
            dataType: "json",
            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            success: function (dtajaxOutput) {
                console.log(dtajaxOutput, "--dtajaxOutput--");

                Data = dtajaxOutput.Data;
                console.log(Data, "--maindata--inside  assign ");

                let table = tableid.DataTable();
                table.destroy();
                pft_table_newTableBody(tableid,dtajaxOutput.Data, tableOptions);
                tableid.dataTable({
                    "serverSide": true,
                    "processing": true,
                    "lengthMenu": [ [10, 15, 20, 25, 50, 100, 0],["10", "15", "20", "25", "50", "100", "All"] ],
                    "searching": false,
                    "ordering": false,
                    "deferLoading": dtajaxOutput.totalrecord,
                    "displayStart": dtajaxOutput.PageIndex * dtajaxOutput.PageSize,
                    "pageLength": dtajaxOutput.PageSize,
                    "recordsFiltered": dtajaxOutput.PageSize,
                    "ajax": returnajaxPagination(ajaxInfo, tableOptions, tableid, title)
                })
              fn_setExportTableHead(tableid, title, [0, 2, 3, 4, 5, 6, 7, 8, 9])
            },
        }
    }

    function Cleardetailsfilter(ele) {

        let $container = $(ele).closest('[perfect-class="form"]');

        $container.find('[perfect-ctype="select"]').val(0).selectpicker('refresh');
        $container.find('[perfect-ctype="date"]').val(moment().format('YYYY-MM-DD'));
        $container.find('[perfect-ctype="hidden"]').val('');
        $container.find('[perfect-ctype="input"]').val('');
        $('[name=Demand]').val(30);
        $container.find('[name="FK_Branch"]').val(@ViewBag.FK_Branch).selectpicker('refresh');
    }

    var renameHeader1;
    function generatePdf(ele) {
        var cdata;
        if (EmiType == 'To-do List') {
            renameHeader1 = "Todays Collection List";

        }
        if (EmiType == 'Over Due') {
            renameHeader1 = "Over Due";

        }
        if (EmiType == 'Upcoming Tasks') {
            renameHeader1 = "Demand";

        }

        let $container = $(ele).closest('[perfect-class="form"]');
        const obj = {
            "Finance Plan Type": $("#LeadFrom option:selected").text(),



            // Employee: $container.find('[name="FK_Employee"]').val(),
            "Finance Plan Type": $('select[name="FK_FinancePlanType"] option:selected').text(),
            "Branch": $('select[name="FK_Branch"] option:selected').text(),
            "Area": $('select[name="FK_Area"] option:selected').text(),
            "Category": $('select[name="FK_Category"] option:selected').text(),
            Product: $('select[name="FK_Product"] option:selected').text(),
            "Customer": $('select[name="FK_Customer"] option:selected').text(),
            "Demand": $('input[name="Demand"]').val(),
            EMINo: $('input[name="EMINo"').val(),
            "As On Date": $('input[name=FromDate]').val() === "" ? $('input[name=FromDate]').val() : changeDateFormat($('input[name=FromDate]').val()),


            

        };
        const obj2 = {
            //"From ": $('input[name="FromDate"]').val(),
            //"To": $('input[name="ToDate"]').val()
        }



        console.log(obj, '--obj--');
        console.log(obj2, '--obj2--');


        var str = "Filter By : ";
        var str2 = "";

        for (var i in obj) {
            if (obj[i] != "" && obj[i].toUpperCase() != "PLEASE SELECT" && obj[i] != 0) {

                str = str + i + ' : ' + obj[i] + ' , ';
            }

        };
        for (var i in obj2) {
            if (obj2[i] != "" && obj2[i] != undefined) {

                str2 = str2 + i + ' : ' + changeDateFormat(obj2[i]) + ' , ';
            }

        };


        var upperhead = {


            columnStyles: { 0: { halign: 'left', textColor: "black", fontSize: 14, fillColor: false, } },
            columnStyles: { 0: { halign: 'left', textColor: "black", fontSize: 11, fillColor: false, } },

            body: [

                [

                    renameHeader1  + '   ' + str2


                    //'\n' +


                ],
                [
                    str
                ]



            ],
            theme: 'plain',
            styles: {
                // fillColor: '#3366ff',
                color: 'black'
            },
            didDrawCell: function (data) {
                data.cell.styles.lineHeight = 0.8; // Adjust the line height value to your preference
            }


        };


       Namehead="EMI Monitoring"




        if (EmiType == 'To-do List') {

            Data.forEach((x) => {
                const ticksRegex = /^\/Date\(\d+\)\/$/;

                if (ticksRegex.test(x['LastTransaction'])) {
                    const dateString1 = x['LastTransaction'];
                    const timestamp1 = parseInt(dateString1.match(/\d+/)[0]);
                    let date = new Date(timestamp1);
                    var formattedDate = `${("0" + date.getDate()).slice(-2)}/${("0" + (date.getMonth() + 1)).slice(-2)}/${date.getFullYear()}`;
                    x['LastTransaction'] = formattedDate;
                }
                if (ticksRegex.test(x['DueDate'])) {
                    const dateString2 = x['DueDate'];
                    const timestamp2 = parseInt(dateString2.match(/\d+/)[0]);
                    let date2 = new Date(timestamp2);
                    var formattedDate2 = `${("0" + date2.getDate()).slice(-2)}/${("0" + (date2.getMonth() + 1)).slice(-2)}/${date2.getFullYear()}`;
                    x['DueDate'] = formattedDate2;
                }
                if (ticksRegex.test(x['NextEMIDate'])) {
                    const dateString3 = x['NextEMIDate'];
                    const timestamp3 = parseInt(dateString3.match(/\d+/)[0]);
                    let date3 = new Date(timestamp3);
                    var formattedDate3 = `${("0" + date3.getDate()).slice(-2)}/${("0" + (date3.getMonth() + 1)).slice(-2)}/${date3.getFullYear()}`;
                    x['NextEMIDate'] = formattedDate3;
                }

                if (ticksRegex.test(x['StartDate'])) {
                    const dateString3 = x['StartDate'];
                    const timestamp3 = parseInt(dateString3.match(/\d+/)[0]);
                    let date3 = new Date(timestamp3);
                    var formattedDate3 = `${("0" + date3.getDate()).slice(-2)}/${("0" + (date3.getMonth() + 1)).slice(-2)}/${date3.getFullYear()}`;
                    x['StartDate'] = formattedDate3;
                }
                ////console.log(x['AssignedDate'], "x");
                //// Create a Date object from the initial date string
                //let date = new Date(x['NextActionDate']);
                //let date2 = new Date(x['LgLeadDate']);

                //// Format the date to "dd/mm/yyyy" format
                //var formattedDate = `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;
                //var formattedDate2 = `${date2.getDate()}/${date2.getMonth() + 1}/${date2.getFullYear()}`;

                //x['NextActionDate'] = formattedDate;
                //x['LgLeadDate'] = formattedDate2;
                ////console.log(formattedDate);
            });
        }
        if (EmiType == 'Over Due') {

            Data.forEach((x) => {

                const ticksRegex = /^\/Date\(\d+\)\/$/;

                if (ticksRegex.test(x['LastTransaction'])) {
                    const dateString1 = x['LastTransaction'];
                    const timestamp1 = parseInt(dateString1.match(/\d+/)[0]);

                    const date = new Date(timestamp1);
                    const formattedDate = `${("0" + date.getDate()).slice(-2)}/${("0" + (date.getMonth() + 1)).slice(-2)}/${date.getFullYear()}`;
                    x['LastTransaction'] = formattedDate;
                }
                if (ticksRegex.test(x['DueDate'])) {

                    const dateString2 = x['DueDate'];
                    const timestamp2 = parseInt(dateString2.match(/\d+/)[0]);

                    const date2 = new Date(timestamp2);
                    const formattedDate2 = `${("0" + date2.getDate()).slice(-2)}/${("0" + (date2.getMonth() + 1)).slice(-2)}/${date2.getFullYear()}`;
                    x['DueDate'] = formattedDate2;
                }
                if (ticksRegex.test(x['NextEMIDate'])) {

                    const dateString3 = x['NextEMIDate'];
                    const timestamp3 = parseInt(dateString3.match(/\d+/)[0]);

                    const date3 = new Date(timestamp3);
                    const formattedDate3 = `${("0" + date3.getDate()).slice(-2)}/${("0" + (date3.getMonth() + 1)).slice(-2)}/${date3.getFullYear()}`;
                    x['NextEMIDate'] = formattedDate3;
                }



            });
        }
        if (EmiType == 'Upcoming Tasks') {
            Data.forEach((x) => {


                const ticksRegex = /^\/Date\(\d+\)\/$/;

                if (ticksRegex.test(x['LastTransaction'])) {
                    const dateString1 = x['LastTransaction'];
                    const timestamp1 = parseInt(dateString1.match(/\d+/)[0]);

                    const date = new Date(timestamp1);
                    const formattedDate = `${("0" + date.getDate()).slice(-2)}/${("0" + (date.getMonth() + 1)).slice(-2)}/${date.getFullYear()}`;
                    x['LastTransaction'] = formattedDate;
                }
                if (ticksRegex.test(x['DueDate'])) {

                    const dateString2 = x['DueDate'];
                    const timestamp2 = parseInt(dateString2.match(/\d+/)[0]);

                    const date2 = new Date(timestamp2);
                    const formattedDate2 = `${("0" + date2.getDate()).slice(-2)}/${("0" + (date2.getMonth() + 1)).slice(-2)}/${date2.getFullYear()}`;
                    x['DueDate'] = formattedDate2;
                }
                if (ticksRegex.test(x['NextEMIDate'])) {

                    const dateString3 = x['NextEMIDate'];
                    const timestamp3 = parseInt(dateString3.match(/\d+/)[0]);

                    const date3 = new Date(timestamp3);
                    const formattedDate3 = `${("0" + date3.getDate()).slice(-2)}/${("0" + (date3.getMonth() + 1)).slice(-2)}/${date3.getFullYear()}`;
                    x['NextEMIDate'] = formattedDate3;
                }



            });
            console.log(Data,"Data>>--")
        }



        ///Test




        ///Test

         $.ajax({
              url: '@Url.Action("GetCompanyDetails", "Home")',
              type: "GET",
              dataType: "json",
              contentType: "application/x-www-form-urlencoded;charset=utf-8",
                 success: function (ajaxOutput) {


                     cdata = ajaxOutput;

                },
             complete: function () {

                 //LeadType = 'My Leads';
                 var head = [];
                 var ptableData = {};
                 debugger;
                 if (EmiType == 'Todays Collection List') {
                     head = ["SL No.", "EMI No.","Customer No", "Customer", "Address", "Mobile", "Product/Project","StartDate", "Finance Plan", "Last Transaction","Net Amount", "Due Amount", "Fine Amount", "Balance", "Due Date", "Next EMI Date","Remark", "Inst No."];
                     ptableData = {
                         columns: [
                             { title: "SLNo", dataKey: "SLNo" },
                             { title: "EMINo", dataKey: "EMINo" },
                             { title: "Customer No", dataKey: "CusNumber" },
                             { title: "Customer Name", dataKey: "Customer" },
                             { title: "Address", dataKey: "CustomerAddress" },
                             { title: "Mobile", dataKey: "Mobile" },
                             { title: "Product/Project", dataKey: "Product" },
                             { title: "Date of Installation/Sale", dataKey: "StartDate" },
                             { title: "Finance Plan", dataKey: "FinancePlan" },
                             { title: "Last Transaction", dataKey: "LastTransaction" },
                             { title: "NetAmount", dataKey: "NetAmount" },
                             { title: "Total Paid", dataKey: "TotalPaid" },
                             { title: "DueAmount", dataKey: "DueAmount" },
                             { title: "FineAmount", dataKey: "FineAmount" },
                             { title: "Balance", dataKey: "Balance" },
                             { title: "Due Date", dataKey: "DueDate" },
                             { title: "Next EMI Date", dataKey: "NextEMIDate" },
                             { title: "Remarks", dataKey: "Remark" },
                             { title: "Inst No", dataKey: "InstNo" }
                             
                         ],
                         rows: Data

                     };


                 } else if (EmiType == 'Over Due') {
                     head = ["SL No.", "EMI No.","Customer No", "Customer", "Address", "Mobile", "Product/Project","StartDate", "Finance Plan", "Last Transaction","NetAmount","TotalPaid", "Due Amount", "Fine Amount", "Balance", "Due Date", "Next EMI Date","Remarks", "Inst No."];
                         ptableData = {
                             columns: [

                                 { title: "EMINo", dataKey: "EMINo" },
                                 { title: "Customer No", dataKey: "CusNumber" },
                                 { title: "Customer Name", dataKey: "Customer" },
                                 { title: "Address", dataKey: "CustomerAddress" },
                                 { title: "Mobile", dataKey: "Mobile" },
                                 { title: "Product/Project", dataKey: "Product" },
                                 { title: "Date of Installation/Sale", dataKey: "StartDate" },
                                 { title: "Finance Plan", dataKey: "FinancePlan" },
                                 { title: "Last Transaction", dataKey: "LastTransaction" },
                                 { title: "NetAmount", dataKey: "NetAmount" },
                                 { title: "Total Paid", dataKey: "TotalPaid" },
                                 { title: "DueAmount", dataKey: "DueAmount" },
                                 { title: "FineAmount", dataKey: "FineAmount" },
                                 { title: "Balance", dataKey: "Balance" },
                                 { title: "Due Date", dataKey: "DueDate" },
                                 { title: "Next EMI Date", dataKey: "NextEMIDate" },
                                 { title: "Remarks", dataKey: "Remark" },
                                 { title: "Inst No", dataKey: "InstNo" }

                             ],
                             rows: Data

                         };



                 } else  {
                     head = ["SL No.", "EMI No.", "Customer No", "Customer", "Address", "Mobile", "Product/Project", "StartDate","Finance Plan", "Last Transaction","Net Amount","Total Paid", "Due Amount", "Fine Amount", "Balance", "Due Date", "Next EMI Date","Remarks", "Inst No."];
                     ptableData = {
                         columns: [


                             { title: "EMINo", dataKey: "EMINo" },
                             { title: "Customer No", dataKey: "CusNumber" },
                             { title: "Customer Name", dataKey: "Customer" },
                             { title: "Address", dataKey: "CustomerAddress" },
                             { title: "Mobile", dataKey: "Mobile" },
                             { title: "Product/Project", dataKey: "Product" },
                             { title: "Date of Installation/Sale", dataKey: "StartDate" },
                             { title: "Finance Plan", dataKey: "FinancePlan" },
                             { title: "Last Transaction", dataKey: "LastTransaction" },
                             { title: "NetAmount", dataKey: "NetAmount" },
                             { title: "Total Paid", dataKey: "TotalPaid" },
                             { title: "DueAmount", dataKey: "DueAmount" },
                             { title: "FineAmount", dataKey: "FineAmount" },
                             { title: "Balance", dataKey: "Balance" },
                             { title: "Due Date", dataKey: "DueDate" },
                             { title: "Next EMI Date", dataKey: "NextEMIDate" },
                             { title: "Remarks", dataKey: "Remark" },
                             { title: "Inst No", dataKey: "InstNo" }

                         ],
                         rows: Data

                     };
                 }


                 console.log(ptableData, 'ptableData>>>>>>>');

                 ptableData.rows.forEach((i) => {                    
                     i['InstNo'] = (i.InstNo).toString();
                     i['Balance'] = parseFloat(i.Balance);
                     i['FineAmount'] = parseFloat(i.FineAmount);
                     i['DueAmount'] = parseFloat(i.DueAmount);
                 })
                

                 exportPdf(Namehead, [head], cdata, upperhead, "", ptableData, "", EmiType, "a4","","","l");
              

                }
         });
    }



    function onExell() {


        var cdata;
       if (EmiType == 'To-do List') {
            renameHeader1 = "Todays Collection List";

        }
        if (EmiType == 'Over Due') {
            renameHeader1 = "Over Due";

        }
        if (EmiType == 'Upcoming Tasks') {
            renameHeader1 = "Demand";

        }

        Namehead = "EMI Monitoring"

        if (EmiType == 'To-do List') {

            Data.forEach((x) => {

                const ticksRegex = /^\/Date\(\d+\)\/$/;

                if (ticksRegex.test(x['LastTransaction'])) {
                    const dateString1 = x['LastTransaction'];
                    const timestamp1 = parseInt(dateString1.match(/\d+/)[0]);
                    let date = new Date(timestamp1);
                    var formattedDate = `${("0" + date1.getDate()).slice(-2)}/${("0" + (date.getMonth() + 1)).slice(-2)}/${date.getFullYear()}`;
                    x['LastTransaction'] = formattedDate;
                }
                if (ticksRegex.test(x['DueDate']) ) {
                    const dateString2 = x['DueDate'];
                    const timestamp2 = parseInt(dateString2.match(/\d+/)[0]);
                    let date2 = new Date(timestamp2);
                    var formattedDate2 = `${("0" + date2.getDate()).slice(-2)}/${("0" + (date2.getMonth() + 1)).slice(-2) + 1}/${date2.getFullYear()}`;
                    x['DueDate'] = formattedDate2;
                }
                if (ticksRegex.test(x['NextEMIDate'])) {
                    const dateString3 = x['NextEMIDate'];
                    const timestamp3 = parseInt(dateString3.match(/\d+/)[0]);
                    let date3 = new Date(timestamp3);
                    var formattedDate3 = `${("0" + date3.getDate()).slice(-2)}/${d("0" + (date3.getMonth() + 1)).slice(-2)}/${date3.getFullYear()}`;
                    x['NextEMIDate'] = formattedDate3;
                }
                if (ticksRegex.test(x['StartDate'])) {
                    const dateString3 = x['StartDate'];
                    const timestamp3 = parseInt(dateString3.match(/\d+/)[0]);
                    let date3 = new Date(timestamp3);
                    var formattedDate3 = `${("0" + date3.getDate()).slice(-2)}/${d("0" + (date3.getMonth() + 1)).slice(-2)}/${date3.getFullYear()}`;
                    x['StartDate'] = formattedDate3;
                }
                
            });

        }
        if (EmiType == 'Over Due') {

            Data.forEach((x) => {

                const ticksRegex = /^\/Date\(\d+\)\/$/;

                if (ticksRegex.test(x['LastTransaction']) ) {
                    const dateString1 = x['LastTransaction'];
                    const timestamp1 = parseInt(dateString1.match(/\d+/)[0]);

                    const date = new Date(timestamp1);
                    const formattedDate = `${("0" + date.getDate()).slice(-2)}/${("0" + (date.getMonth() + 1)).slice(-2)}/${date.getFullYear()}`;
                    x['LastTransaction'] = formattedDate;
                }
                if (ticksRegex.test(x['DueDate']) ) {

                    const dateString2 = x['DueDate'];
                    const timestamp2 = parseInt(dateString2.match(/\d+/)[0]);

                    const date2 = new Date(timestamp2);
                    const formattedDate2 = `${("0" + date2.getDate()).slice(-2)}/${("0" + (date2.getMonth() + 1)).slice(-2)}/${date2.getFullYear()}`;
                    x['DueDate'] = formattedDate2;
                }
                if (ticksRegex.test(x['NextEMIDate'])) {

                    const dateString3 = x['NextEMIDate'];
                    const timestamp3 = parseInt(dateString3.match(/\d+/)[0]);

                    const date3 = new Date(timestamp3);
                    const formattedDate3 = `${("0" + date3.getDate()).slice(-2)}/${("0" + (date3.getMonth() + 1)).slice(-2)}/${date3.getFullYear()}`;
                    x['NextEMIDate'] = formattedDate3;
                }
                if (ticksRegex.test(x['StartDate'])) {
                    const dateString3 = x['StartDate'];
                    const timestamp3 = parseInt(dateString3.match(/\d+/)[0]);
                    let date3 = new Date(timestamp3);
                    var formattedDate3 = `${("0" + date3.getDate()).slice(-2)}/${d("0" + (date3.getMonth() + 1)).slice(-2)}/${date3.getFullYear()}`;
                    x['StartDate'] = formattedDate3;
                }

            });
            
        }
        if (EmiType == 'Upcoming Tasks') {
            Data.forEach((x) => {

                const ticksRegex = /^\/Date\(\d+\)\/$/;

                if (ticksRegex.test(x['LastTransaction'])) {
                    const dateString1 = x['LastTransaction'];
                    const timestamp1 = parseInt(dateString1.match(/\d+/)[0]);

                    const date = new Date(timestamp1);
                    const formattedDate = `${("0" + date.getDate()).slice(-2)}/${("0" + (date.getMonth() + 1)).slice(-2)}/${date.getFullYear()}`;
                    x['LastTransaction'] = formattedDate;
                }
                if (ticksRegex.test(x['DueDate'])) {

                    const dateString2 = x['DueDate'];
                    const timestamp2 = parseInt(dateString2.match(/\d+/)[0]);

                    const date2 = new Date(timestamp2);
                    const formattedDate2 = `${("0" + date2.getDate()).slice(-2)}/${("0" + (date2.getMonth() + 1)).slice(-2)}/${date2.getFullYear()}`;
                    x['DueDate'] = formattedDate2;
                }
                if (ticksRegex.test(x['NextEMIDate'])) {

                    const dateString3 = x['NextEMIDate'];
                    const timestamp3 = parseInt(dateString3.match(/\d+/)[0]);

                    const date3 = new Date(timestamp3);
                    const formattedDate3 = `${("0" + date3.getDate()).slice(-2)}/${("0" + (date3.getMonth() + 1)).slice(-2)}/${date3.getFullYear()}`;
                    x['NextEMIDate'] = formattedDate3;
                }
                if (ticksRegex.test(x['StartDate'])) {
                    const dateString3 = x['StartDate'];
                    const timestamp3 = parseInt(dateString3.match(/\d+/)[0]);
                    let date3 = new Date(timestamp3);
                    var formattedDate3 = `${("0" + date3.getDate()).slice(-2)}/${d("0" + (date3.getMonth() + 1)).slice(-2)}/${date3.getFullYear()}`;
                    x['StartDate'] = formattedDate3;
                }

            });
        }

        /////*****Test-start
        let ReportName;

        const obj = {
            "Finance Plan Type": $("#LeadFrom option:selected").text(),



            // Employee: $container.find('[name="FK_Employee"]').val(),
            "Finance Plan Type": $('select[name="FK_FinancePlanType"] option:selected').text(),
            "Branch": $('select[name="FK_Branch"] option:selected').text(),
            "Area": $('select[name="FK_Area"] option:selected').text(),
            "Category": $('select[name="FK_Category"] option:selected').text(),
            Product: $('select[name="FK_Product"] option:selected').text(),
            "Customer": $('select[name="FK_Customer"] option:selected').text(),
            "Demand": $('input[name="Demand"]').val(),
            EMINo: $('input[name="EMINo"').val(),
            "As On Date": $('input[name=FromDate]').val() === "" ? $('input[name=FromDate]').val() : changeDateFormat($('input[name=FromDate]').val()),




        };
        const obj2 = {
            //"From ": $('input[name="FromDate"]').val(),
            //"To": $('input[name="ToDate"]').val()
            //"As On Date": $('input[name="FromDate"]').val(),
        }




        console.log(obj, '--obj--');
        console.log(obj2, '--obj2--');


        var str = "Filter By : ";
        var str2 = "";

        for (var i in obj) {
            if (obj[i] != "" && obj[i].toUpperCase() != "PLEASE SELECT" && obj[i] != 0) {

                str = str + i + ' : ' + obj[i] + ' , ';
            }

        };
        for (var i in obj2) {
            if (obj2[i] != "" && obj2[i] != undefined) {

                str2 = str2 + i + ' : ' + changeDateFormat(obj2[i]) + ' , ';
            }

        };


        $.ajax({
            url: '@Url.Action("GetCompanyDetails", "Home")',
            type: "GET",
            dataType: "json",
            contentType: "application/x-www-form-urlencoded;charset=utf-8",
            success: function (ajaxOutput) {


                cdata = ajaxOutput;

            },
            complete: function () {
                console.log(cdata, "---cdata----");



                if (EmiType == 'To-do List') {
                    head = ["SL No.", "EMI No.", "Customer No", "Customer", "Address", "Mobile", "Product/Project", "StartDate", "Finance Plan", "Last Transaction", "Net Amount","Total Paid", "Due Amount", "Fine Amount", "Balance", "Due Date", "Next EMI Date","Remark" ,"Inst No."];
                    ptableData = {
                        columns: [

                            { title: "EMINo", dataKey: "EMINo" },
                            { title: "Customer No", dataKey: "CusNumber" },
                            { title: "Customer Name", dataKey: "Customer" },
                            { title: "Address", dataKey: "CustomerAddress" },
                            { title: "Mobile", dataKey: "Mobile" },
                            { title: "Product/Project", dataKey: "Product" },
                            { title: "Date of Installation/Sale", dataKey: "StartDate" },
                            { title: "Finance Plan", dataKey: "FinancePlan" },
                            { title: "Last Transaction", dataKey: "LastTransaction" },
                            { title: "NetAmount", dataKey: "NetAmount" },
                            { title: "Total Paid", dataKey: "TotalPaid" },
                            { title: "DueAmount", dataKey: "DueAmount" },
                            { title: "FineAmount", dataKey: "FineAmount" },
                            { title: "Balance", dataKey: "Balance" },
                            { title: "Due Date", dataKey: "DueDate" },
                            { title: "Next EMI Date", dataKey: "NextEMIDate" },
                            { title: "Remarks", dataKey: "Remark" },
                            { title: "Inst No", dataKey: "InstNo" }

                        ],
                        rows: Data

                    };
                } else if (EmiType == 'Over Due') {
                    head = ["SL No.", "EMI No.", "Customer No", "Customer", "Address", "Mobile", "Product/Project", "StartDate", "Finance Plan", "Last Transaction", "Net Amount","Total Paid", "Due Amount", "Fine Amount", "Balance", "Due Date", "Next EMI Date", "Remark", "Inst No."];
                    ptableData = {
                        columns: [

                            { title: "EMINo", dataKey: "EMINo" },
                            { title: "Customer No", dataKey: "CusNumber" },
                            { title: "Customer Name", dataKey: "Customer" },
                            { title: "Address", dataKey: "CustomerAddress" },
                            { title: "Mobile", dataKey: "Mobile" },
                            { title: "Product/Project", dataKey: "Product" },
                            { title: "Date of Installation/Sale", dataKey: "StartDate" },
                            { title: "Finance Plan", dataKey: "FinancePlan" },
                            { title: "Last Transaction", dataKey: "LastTransaction" },
                            { title: "NetAmount", dataKey: "NetAmount" },
                            { title: "Total Paid", dataKey: "TotalPaid" },
                            { title: "DueAmount", dataKey: "DueAmount" },
                            { title: "FineAmount", dataKey: "FineAmount" },
                            { title: "Balance", dataKey: "Balance" },
                            { title: "Due Date", dataKey: "DueDate" },
                            { title: "Next EMI Date", dataKey: "NextEMIDate" },
                            { title: "Remarks", dataKey: "Remark" },
                            { title: "Inst No", dataKey: "InstNo" }

                        ],
                        rows: Data

                    };



                }
                else {
                    head = ["SL No.", "EMI No.", "Customer No", "Customer", "Address", "Mobile", "Product/Project", "StartDate", "Finance Plan", "Last Transaction","Net Amount" ,"Total Paid","Due Amount", "Fine Amount", "Balance", "Due Date", "Next EMI Date","Remarks", "Inst No."];
                    ptableData = {
                        columns: [

                            { title: "EMINo", dataKey: "EMINo" },
                            { title: "Customer No", dataKey: "CusNumber" },
                            { title: "Customer Name", dataKey: "Customer" },
                            { title: "Address", dataKey: "CustomerAddress" },
                            { title: "Mobile", dataKey: "Mobile" },
                            { title: "Product/Project", dataKey: "Product" },
                            { title: "Date of Installation/Sale", dataKey: "StartDate" },
                            { title: "Finance Plan", dataKey: "FinancePlan" },
                            { title: "Last Transaction", dataKey: "LastTransaction" },
                            { title: "NetAmount", dataKey: "NetAmount" },
                            { title: "Total Paid", dataKey: "TotalPaid" },
                            { title: "DueAmount", dataKey: "DueAmount" },
                            { title: "FineAmount", dataKey: "FineAmount" },
                            { title: "Balance", dataKey: "Balance" },
                            { title: "Due Date", dataKey: "DueDate" },
                            { title: "Next EMI Date", dataKey: "NextEMIDate" },
                            { title: "Remarks", dataKey: "Remark" },
                            { title: "Inst No", dataKey: "InstNo" }

                        ],
                        rows: Data

                    };
                }


                ptableData.rows.forEach((i) => {
                    i['InstNo'] = (i.InstNo).toString();
                    i['Balance'] = parseFloat(i.Balance);
                    i['FineAmount'] = parseFloat(i.FineAmount);
                    i['DueAmount'] = parseFloat(i.DueAmount);
                })



                ReportName = `${cdata.Company} \n${cdata.Branch}\n    ${Namehead} Report    \n  ${renameHeader1} \n ${str2} \n ${str} `
                generateExell(ReportName, [head], ptableData, "", "", `${Namehead} Report`, str);


                //ReportName = `${cdata.Company} \n${cdata.Branch}\n   ${Namehead}   \n  ${str2} \n ${str} `
                //generateExell(ReportName, [head], ptableData, "", "", Namehead , str);

            }
        });

    }
    function changeDateFormat(date) {
        /*var date = '2023-06-05';*/

        // Split the date into year, month, and day components
        var dateComponents = date.split('-');

        // Rearrange the components to form the desired format
        var formattedDate = dateComponents[2] + '/' + dateComponents[1] + '/' + dateComponents[0];

        console.log(formattedDate); // Output: 05/06/23
        return formattedDate;
    }
    function exportbuttonhide() {
        document.querySelector('#exppdf').style.display = 'none';
        console.log('Input value changed:');
    }

    var inputElements = document.getElementsByClassName('exptbttontoogle');
    for (var i = 0; i < inputElements.length; i++) {
        inputElements[i].addEventListener('change', function (event) {
            // Handle the change event here
            // var inputValue = event.target.value;
            document.querySelector('#exppdf').style.display = 'none';
            console.log('Input value changed:');
        });
    }
    function getfunction() {
        document.querySelector('#exppdf').style.display = 'none';
    }

    function SendIntimation(ele) {
        debugger
        if ($('#IntimationType').val() != 0) {
            $(ele).prop('disabled', true);
            $('#IntimationTypeErr').text('');
            var RefSMSMode = $('[name=IntimationType]').val();

            var InputData = {
                'FK_FinancePlanType': $('[name=FK_FinancePlanType]').val().trim(),
                'FromDate': $('[name=FromDate]').val(),
                'ToDate': $('[name=ToDate]').val(),
                'EMINo': $('[name=EMINo]').val().trim(),
                'FK_Branch': $('[name=FK_Branch]').val().trim(),
                'FK_Area': $('[name=Area_ID]').val(),
                'FK_District': $('[name=DistrictID]').val(),
                'FK_Category': $('[name=FK_Category]').val(),
                'FK_Product': $('[name=ID_Product]').val(),
                'FK_Customer': $('[name=FK_Customer]').val(),
                'Demand': $('[name=Demand]').val().trim(),
                'PageSize': 10,
                'PageIndex': 0,
                'Mode': $('[name=SendTo]').val(),
                'SMSMode': $('[name=IntimationType]').val()
            };

            $.ajax({
                url: "@Url.Action("SendIntimation", "EMIDetailsGridRpt")",
                type: "POST",
                data: InputData,
                dataType: "json",
                contentType: "application/x-www-form-urlencoded;charset=utf-8",
                success: function (ajaxOutput) {

                    console.log(ajaxOutput, "ajaxOutput")

                    if (ajaxOutput.Process) {
                        Clearintimation();
                        if (RefSMSMode != 3) {
                            NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': `${ajaxOutput.Count} Intimation Sent Successfully ` });

                        } else {
                            NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': ` ${ajaxOutput.CountObj.SMSCount} SMS  & ${ajaxOutput.CountObj.EmailCount} Email \n Sent Successfully  ` });
                        } 
                        
                    } else {
                        NotificationMessage({ 'type': 'error', 'heading': 'Warning', 'message': 'Intimation Sended Failed' });
                    }
                    
                    
                },
                complete: function () {
                    $(ele).prop('disabled', false);

                }
            });
        } else {
            $('#IntimationTypeErr').text('Please Select Intimation type');
           
        }

    };
    function Clearintimation(ele) {
        debugger 
        $('[name=IntimationType]').val(0).selectpicker('refresh');
        $('[name="SendTo"]').val(2).selectpicker('refresh');

    };

</script>

<script src="~/Scripts/exportFile.js"></script>
<script src="~/Scripts/jspdf.min.js"></script>
<script src="~/Scripts/jspdf.plugin.autotable.min.js"></script>
<script src="~/Scripts/xlsx.min.js"></script>
