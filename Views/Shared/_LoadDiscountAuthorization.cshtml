@model PerfectWebERP.Models.DiscountAuthorizationModel.DiscountAuthorizationViewList


<div class="card ">

    <div class="card-header">
        <h4 class="card-title col-12">@ViewBag.PageTitle </h4>
        <span title="To View List" onclick="fn_showListView();"><svg id="Layer_1" class="layer" stroke="currentColor" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" height="20" width="20" viewBox="0 0 122.88 122.54"><title>To View List</title><path class="viewlst" d="M4.69,0H46.22a4.71,4.71,0,0,1,4.69,4.69V46a4.69,4.69,0,0,1-4.69,4.69H4.69a4.65,4.65,0,0,1-3.31-1.38l-.09-.09A4.67,4.67,0,0,1,0,46V4.69A4.71,4.71,0,0,1,4.69,0ZM89.44,61.94a26.56,26.56,0,0,1,10.18,2l.07,0a26.61,26.61,0,0,1,15.25,32.16,26.18,26.18,0,0,1-2.7,6.11l10.3,11.24a1.27,1.27,0,0,1-.07,1.8l-7.57,6.9a1.27,1.27,0,0,1-1.79-.07l-9.86-10.85a26.36,26.36,0,0,1-6.1,2.74,26.87,26.87,0,0,1-7.71,1.13,26.51,26.51,0,0,1-10.17-2l-.07,0A26.64,26.64,0,0,1,64.85,78.37l0-.07A26.6,26.6,0,0,1,89.44,61.94Zm15,11.59a21.38,21.38,0,0,0-6.89-4.61l-.06,0a21.22,21.22,0,0,0-23.07,4.64l-.07.07a21.25,21.25,0,0,0-4.54,6.83l0,.06a21.32,21.32,0,0,0-1.58,8.06,21.26,21.26,0,0,0,29.35,19.62,21.54,21.54,0,0,0,6.89-4.61l.07-.07a21.09,21.09,0,0,0,4.54-6.83l0-.06a21.35,21.35,0,0,0,0-16.17,21.34,21.34,0,0,0-4.62-6.9ZM4.69,63.2H46.22a4.71,4.71,0,0,1,4.69,4.7v41.34a4.68,4.68,0,0,1-4.69,4.69H4.69A4.69,4.69,0,0,1,0,109.24V67.9a4.71,4.71,0,0,1,4.69-4.7ZM68.78,0h41.53A4.71,4.71,0,0,1,115,4.69V46a4.71,4.71,0,0,1-4.69,4.69H68.78A4.71,4.71,0,0,1,64.09,46V4.69a4.69,4.69,0,0,1,1.37-3.31l.1-.09A4.67,4.67,0,0,1,68.78,0Z"></path></svg></span>
    </div>
    <div class="card-body">
        <form id="" class="form-valide" perfect-class="form" action="#" method="post" perfect-onFormSuccess="">

            <div class="">
                @Html.AntiForgeryToken()

                <div class="row">

                    <div class="col-sm-4">
                        <input type="hidden" name="ID_DiscountAuthorizationSettings" class="form-control " perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Module</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <input type="hidden" name="ID_CommonSettings" value="0" />
                                    <select class="form-control perfectValidate_string" id="FK_Module" name="FK_Module" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" onchange="fn_fillSubModule(this)">
                                        <option value="">Please Select </option>
                                        @if (!(Model.ModuleList is null))
                                        {
                                            foreach (var menuGroup in Model.ModuleList)
                                            {
                                                <option value="@menuGroup.ID_MenuGroup">@menuGroup.MnuGrpName</option>
                                            }
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Sub Module</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <select class="form-control perfectValidate_string" id="SubModule" name="SubModule" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select">
                                    <option value="">Please Select</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-lg-4 col-form-label">
                                <span perfect-class="formGroupLabel">Effect Date </span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-lg-8">
                                <input type="date" class="form-control perfectValidate_date" name="EffectDate" perfect-class="formGroupControl" perfect-ctype="date" perfect-css="date" />
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Category</span>
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-8">
                                <select class="form-control perfectValidate_string" name="CategoryID" perfect-selectButtonAction="testing" perfect-class="formGroupControl" perfect-ctype="select" onchange="fn_selectSubcategory(this)" perfect-css="select">
                                    <option value="">Please Select </option>


                                    @if (!(Model.CategoryList is null))
                                    {
                                        foreach (var cat in Model.CategoryList)
                                        {
                                            <option value="@cat.CategoryID">@cat.CategoryName</option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Sub Category</span>
                            </label>
                            <div class="col-sm-8">
                                <select class="form-control" name="FK_SubCategory" perfect-selectButtonAction="countryadding" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select">
                                    <option value="">Please Select </option>
                                    @if (!(Model.SubCategoryList is null))
                                    {
                                        foreach (var Subcat in Model.SubCategoryList)
                                        {
                                            <option value="@Subcat.ID_SubCategory">@Subcat.SubCatName</option>
                                        }
                                    }


                                </select>
                            </div>
                        </div>
                    </div>


                    <div class="col-sm-4">
                        <div class="form-group row" perfect-class="formGroup">
                            <label class="col-sm-4 col-form-label">
                                <span perfect-class="formGroupLabel">Product</span>
                            </label>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <input type="text" class="form-control " name="ProductName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" disabled />
                                    <input type="hidden" name="ProductID" class="" perfect-class="formGroupControl" perfect-ctype="hidden" perfect-css="input" />
                                    <div class="input-group-append">
                                        <button id="addproduct-jq-searchButton3" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="GetCmnPopUpSearchVal(this,85,'Product List',[])" Criterea1="CategoryID" Criterea2="FK_SubCategory" BindName="ProductName" BindVal="ProductID"></button>

                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    @*<div class="col-sm-4 DivService">
                <div class="form-group row" perfect-class="formGroup">
                    <label class="col-lg-4 col-form-label">
                        <span perfect-class="formGroupLabel">Complaint</span>

                    </label>
                    <div class="col-lg-8">
                        <select class="form-control " name="ComplaintID" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select">
                            <option value="">Please select</option>
                            @if (!(Model.ComplaintLists is null))
                            {
                                foreach (var Complaintlist in Model.ComplaintLists)
                                {
                                    <option value="@Complaintlist.ComplaintListID">@Complaintlist.Complaint</option>
                                }
                            }
                        </select>
                    </div>
                </div>
            </div>*@

                </div>


                <div class="row">
                    <div class="col-sm-12">
                        <div class="daccordion__header" id="Discount">
                            <span class="accordion__header--text">Details</span>
                        </div>
                        <br />
                        <div class="row">

                            <div class="col-sm-3 ">
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-lg-4 col-form-label">
                                        <span perfect-class="formGroupLabel">User Role</span>
                                        <span class="text-danger">*</span>
                                    </label>
                                    <div class="col-lg-8">
                                        <select class="form-control " perfect-tempTable-Discount="UserRole" name="FK_UserRole" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" onchange="fn_getUserlist(this);">
                                            <option value="">Please select</option>
                                            @if (!(Model.UserRolelists is null))
                                            {
                                                foreach (var userroleList in Model.UserRolelists)
                                                {
                                                    <option value="@userroleList.UserRoleID">@userroleList.UserRole</option>
                                                }
                                            }

                                        </select>
                                        <div class="text-danger temptableError"></div>

                                    </div>
                                </div>
                            </div>

                            <div class="col-sm-3">
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-4 col-form-label">
                                        <span perfect-class="formGroupLabel">User</span>
                                    </label>

                                    <div class="col-sm-8">
                                        <select class="form-control" perfect-tempTable-Discount="FK_Users" name="FK_Users" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select">
                                            <option value="">Please Select </option>

                                        </select>
                                        <span class="temptableError"></span>
                                    </div>
                                </div>
                            </div>



                            <div class="col-sm-3 ">
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-lg-4 col-form-label">
                                        <span perfect-class="formGroupLabel">Calculation Criteria</span>
                                        <span class="text-danger">*</span>

                                    </label>
                                    <div class="col-lg-8">
                                        <select class="form-control " perfect-tempTable-Discount="Criteria" name="DiscSettingsCriteria" perfect-class="formGroupControl" perfect-ctype="select" perfect-css="select" onchange="ShowDiscount(this)">
                                            <option value="">Please select</option>
                                            <option value="1">Percentage</option>
                                            <option value="2">Amount</option>

                                        </select>
                                        <div class="text-danger temptableError"></div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-sm-3 DivDisAmt">
                                <div class="form-group row" perfect-class="formGroup">
                                    <label class="col-sm-4 col-form-label">
                                        <span perfect-class="formGroupLabel" class="label_name_Amount">Discount Amt From/To</span>
                                        <span class="text-danger">*</span>
                                    </label>
                                    <div class="col-sm-8">
                                        <div class="input-group">
                                            <input type="text" class="form-control text-right" perfect-tempTable-Discount="DisCountFrom" name="DisCountFrom" id="DisCountFrom" perfect-class="formGroupControl" oninput="decimalpnt(this,'DisCountFrom',3)" perfect-ctype="input" perfect-css="input" maxlength="12" />
                                            <input type="text" class="form-control text-right" perfect-tempTable-Discount="DisCountTo" id="DisCountTo" name="DisCountTo" perfect-class="formGroupControl" oninput="decimalpnt(this,'DisCountTo',3)" perfect-ctype="input" perfect-css="input" maxlength="12" />
                                            <div class="text-danger temptableError ib1 " id="ib1"></div>
                                            <div class="text-danger temptableError ib2" id="ib2"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="col-sm-12 text-right mb-3">

                                <button class="btn btn-primary1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" title="Add New Product" onclick="createatable(this,'Discount',[''])"><i class="fa fa fa-plus" aria-hidden="true"></i></button>
                                <button class="btn btn-light1" type="button" data-toggle="tooltip" data-placement="top" data-html="true" id="btnresetMtrl" onclick="MaterialDetailsclear(this,'Discount')"><i class="fa fa-refresh" aria-hidden="true"></i></button>

                            </div>
                        </div>
                    </div>
                    <div class="col-sm-12">
                        <div class="form-group row" perfect-class="formGroup">

                            <div class="table-responsive" perfect-tempTable="Discount" id="Discount" perfect-tempTable-lastindex="0" perfect-tempTable-action="0"></div>
                        </div>
                    </div>

                </div>
                <div class="row">
                    <div class="col-sm-8">

                    </div>


                    <div class="col-sm-2">
                        <div class="form-group row" perfect-class="formGroup">
                            <div class="col-sm-12 float-right">
                                <input type="checkbox" id="SkipPreviousLevel" name="SkipPreviousLevel" value="0">
                                <label for="SkipPreviousLevel">&nbsp;&nbsp;Skip Previous Level</label><br>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-2">
                        <div class="form-group row" perfect-class="formGroup">
                            <div class="col-sm-12 float-right">
                                <input type="checkbox" id="ActiveCorrectionOption" name="ActiveCorrectionOption" value="0">
                                <label for="ActiveCorrectionOption">&nbsp;&nbsp;Active Correction Option</label><br>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="card-footer text-right" perfect-class="formFooter">
                <button id="" type="button" class="btn btn-primary mr-3 addcompany-jq-addnewuserUpdate d-none" name="update" perfect-css="button" onclick="AddDiscountAuthorization(this,'update')"><i class="fa fa-refresh fa-spin loaderClass"></i>Update</button>
                <button id="addcompany-jq-addnewuser" type="button" class="btn btn-primary mr-3 " name="add" perfect-css="button" onclick="AddDiscountAuthorization(this,'add')"><i class="fa fa-refresh fa-spin loaderClass "></i>Save</button>
                <button type="button" class="btn btn-light" perfect-css="button" onclick="ResetButton(this)" name="reset">Clear</button>
            </div>
        </form>
    </div>
</div>
<script src="~/Scripts/jqDOM/searchDOMCreation.js"></script>
<script>
    $(document).ready(function () {
        initFunctions('form');
        //$('.DivDisPer').hide();
        $('.DivDisAmt').hide();
        $('.DivService').hide();
    });

    //function ShowService(ele) {
    //    $thisForm = $('[perfect-class="form"]');
    //    if ($thisForm.find('[name=FK_Module]').val() == "CU") {
    //        $('.DivService').show();
    //    }
    //    else {
    //        $('.DivService').hide();
    //    }

    //}
    function ShowDiscount(ele) {
        debugger
        let $thisForm = $('[perfect-class="form"]');

        if ($thisForm.find('[name=DiscSettingsCriteria]').val() == 2) {
            $thisForm.find(".label_name_Amount").text("Discount Amt From/To");
            $('.DivDisAmt').show();
        }
        else if ($thisForm.find('[name=DiscSettingsCriteria]').val() == 1) {
            $thisForm.find(".label_name_Amount").text("Discount % From/To");
            $('.DivDisAmt').show();
        }
        else {
            $('.DivDisAmt').hide();
        }
    }
    function decimalpnt(ele, id, range) {
        let input = $('#' + id);

        ele.value = ele.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');
        let t = ele.value;
        ele.value = (t.indexOf(".") >= 0) ? (t.substr(0, t.indexOf(".")) + t.substr(t.indexOf("."), range)) : t;

        $(document).on('keydown', '#' + id, function (event) {

            if (ele.value.includes('.')) {

            }
            var key = event.keyCode || event.charCode;
            if (key == 8 || key == 46) { }
            else {
                if (ele.value.indexOf('.') < 0 && ele.value.indexOf('.') !== 9 && ele.value.length > 8) {
                    ele.value = ele.value + '.';
                }
            }

        });

    }
    function fn_getUserlist(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let $actionDropdown = $thisForm.find('[name="FK_Users"]');
        $actionDropdown.empty();
        $actionDropdown.append($('<option/>', { value: '' }).text('Please select')).selectpicker('refresh');

        let inputData = {
            __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
            FK_UserRole: parseInt($thisForm.find('[name=FK_UserRole]').val())
        };

        $.ajax({
            url: "@Url.Action("GetUserList", "DiscountAuthorization")",
            type: "POST",
            dataType: "json",
            data: inputData,
            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            success: function (ajaxOutput) {
                if (ajaxOutput.Process.IsProcess) {
                    $.each(ajaxOutput.Data, function (key, value) {
                        $actionDropdown.append($('<option/>', { value: value.UserID }).text(value.UserName)).selectpicker('refresh');
                    });
                    if ($actionDropdown.attr('perfect-onloadSelect')) {
                        $actionDropdown.val($actionDropdown.attr('perfect-onloadSelect')).selectpicker('refresh')
                    }
                }
            }
        });
    }

    function fn_fillSubModule(ele) {
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let $actionDropdown = $thisForm.find('[name="SubModule"]');
        $actionDropdown.empty();
        $actionDropdown.append($('<option/>', { value: '' }).text('Please select')).selectpicker('refresh');
        let inputData =
        {
            __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
            'FK_MenuGroup': $thisForm.find('[name=FK_Module]').val()
        };

        $.ajax({
            url: "@Url.Action("FillMenuWithoutParent", "Menu")",
            type: "POST",
            dataType: "json",
            data: inputData,
            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            success: function (ajaxOutput) {
                if (ajaxOutput.length > 0) {
                    $.each(ajaxOutput, function (key, value) {
                        $actionDropdown.append($('<option/>', { value: value.ID_MenuList }).text(value.MnuLstName)).selectpicker('refresh');
                    });
                    if ($actionDropdown.attr('perfect-onloadSelect')) {
                        $actionDropdown.val($actionDropdown.attr('perfect-onloadSelect')).selectpicker('refresh')
                    }
                }
                else {
                    $.each(ajaxOutput.Process.Message, function (key, value) {
                        NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                    });
                }
            }
        });
    }


    function fn_selectSubcategory(ele) {



        let $thisForm = $(ele).closest('[perfect-class="form"]');

        let CategoryID = $(ele).val();


        $.ajax({
            url: "@Url.Action("GetSubcategory", "DiscountAuthorization")",
            type: "POST",

            data: JSON.stringify({ CategoryID: CategoryID }),
            dataType: "json",
            contentType: "application/json",
            success: function (ajaxOutput) {


                        //let $placeDropdown = $thisForm.find('[name=TeamID]');//<--- Will give place select html element
                        //$placeDropdown.empty().selectpicker('refresh');
                        //$placeDropdown.append($('<option/>', { value: '' }).text('Please select')).selectpicker('refresh');
                        let $placeDropdown = $thisForm.find('[name=FK_SubCategory]');//<--- Will give place select html element
                        $placeDropdown.empty().selectpicker('refresh');
                        $placeDropdown.append($('<option/>', { value: '' }).text('Please select')).selectpicker('refresh');

                        if (ajaxOutput.Process.IsProcess) {

                            $.each(ajaxOutput.Data, function (key, value) {
                                $placeDropdown.append($('<option/>', { "value": value.ID_SubCategory }).text(value.SubCatName)).selectpicker('refresh')

                            });
                            if ($placeDropdown.attr('perfect-onloadSelect')) {
                                $placeDropdown.val($placeDropdown.attr('perfect-onloadSelect')).selectpicker('refresh')
                            }

                        }
                        else {
                            $.each(ajaxOutput.Process.Message, function (key, value) {

                            });
                        }
                    }



                });


            }







    var tableOptionsTempOut = {
        iconButton: {
            buttons: [

                {
                    icon: "fa fa-pencil btnPerfectGridEdit",
                    action: function () {
                        let savedData = $(this).closest('tr').data('pData')

                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let tableKey = $tablecontainer.attr('perfect-tempTable');
                        let $thisForm = $tablecontainer.closest('[perfect-class="form"]');
                        let indexname = tableKey + 'index';
                        let rindex = $(this).closest('tr').attr(indexname);
                        $tablecontainer.attr('perfect-tempTable-action', rindex);

                        console.log('Editclick', savedData);
                        $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                            let $thisNode = $(this);
                            let pf_name = $thisNode.attr('name');
                            //if ($thisNode.is('select')) {

                            //    $thisNode.val(savedData[pf_name]).selectpicker('refresh');

                            //}
                            if ($thisNode.is('select')) {
                                switch (pf_name) {

                                    case "FK_UserRole":
                                        $thisNode.val(savedData[pf_name]).selectpicker('refresh');
                                        $thisNode.trigger('change');
                                        break;
                                    case "FK_Users":
                                        $thisNode.attr('perfect-onloadSelect', savedData[pf_name]);

                                        break;

                                    default:
                                        $thisNode.val(savedData[pf_name]).selectpicker('refresh');
                                        break;


                                }


                            }
                            else if ($thisNode.is('input')) {
                                let inputType = $thisNode.attr('type').toLocaleLowerCase();
                                if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

                                    $thisNode.prop('checked', savedData[pf_name]);
                                }
                                else if (inputType == 'date') {
                                    console.log('datess', savedData)
                                    console.log('datess', savedData[pf_name])
                                    $thisNode.val(savedData[pf_name]);
                                }
                                else {

                                    $thisNode.val(savedData[pf_name]);
                                }

                            }
                            else {
                                $thisNode.val(savedData[pf_name]);
                            }


                        });

                        ShowDiscount(this);

                    }
                },
                {
                    icon: "fa fa-trash btnPerfectGridDelete",
                    action: function () {
                        let $tablecontainer = $(this).closest('[perfect-tempTable]');
                        let $thistbl = $(this).closest('table');
                        let table = $thistbl.DataTable();
                        table.destroy();
                        if ($(this).closest('tbody').find('tr').length > 1) {
                            $(this).closest('tr').remove();
                            pft_table_slreset($thistbl);
                        }
                        else {
                            $thistbl.remove();
                        }
                        $("#btnresetMtrl").click();
                    }
                },
            ]
        },



        //onlyShowColumn: ["FK_UserRole_d", "FK_Users_d", "UserName","DiscSettingsCriteria_d", "DisCountFrom", "DisCountTo"],
        hideColumn: ["UserName"],
        serialNo: true,
        renameHeader: {
            "FK_UserRole_d": "User Role", "FK_Users_d": "Users","DiscSettingsCriteria_d": "Criteria", "DisCountFrom": "Discount From", "DisCountTo": "Discount To" },
        rowAttribute: [],
        isCheckType: [],
        isDateType: [],
    };

    //var tableOptionsTempOut2 = {
    //    iconButton: {
    //        buttons: [

    //            {

    //                icon: "fa fa-pencil btnPerfectGridEdit",

    //                action: function () {

    //                    let savedData = $(this).closest('tr').data('pData')
    //                    console.log('', savedData);


    //                    let $tablecontainer = $(this).closest('[perfect-tempTable]');
    //                    let tableKey = $tablecontainer.attr('perfect-tempTable');
    //                    let $thisForm = $tablecontainer.closest('[perfect-class="form"]');

    //                    let indexname = tableKey + 'index';
    //                    let rindex = $(this).closest('tr').attr(indexname);
    //                    $tablecontainer.attr('perfect-tempTable-action', rindex);

    //                    console.log('Editclick', savedData);
    //                    $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
    //                        let $thisNode = $(this);
    //                        let pf_name = $thisNode.attr('name');
    //                        if ($thisNode.is('select')) {

    //                            $thisNode.val(savedData[pf_name]).selectpicker('refresh');
    //                        }
    //                        else if ($thisNode.is('input')) {

    //                            if ($thisNode.attr('type').toLocaleLowerCase() == 'checkbox') {

    //                                $thisNode.prop('checked', savedData[pf_name]);
    //                            }
    //                            else {
    //                                $thisNode.val(savedData[pf_name]);
    //                            }

    //                        }
    //                        else {
    //                            $thisNode.val(savedData[pf_name]);
    //                        }


    //                    });

    //                    ShowDiscount(this);

    //                }
    //            },

    //            {

    //                icon: "fa fa-trash btnPerfectGridDelete",
    //                action: function () {
    //                    let $tablecontainer = $(this).closest('[perfect-tempTable]');
    //                    let $thistbl = $(this).closest('table');
    //                    let table = $thistbl.DataTable();
    //                    table.destroy();
    //                    if ($(this).closest('tbody').find('tr').length > 1) {
    //                        $(this).closest('tr').remove();
    //                        pft_table_slreset($thistbl);

    //                    }
    //                    else {

    //                        $thistbl.remove();
    //                    }

    //                    $("#btnresetMtrl").click();

    //                }
    //            },
    //        ]
    //    },

    //    onlyShowColumn: ["FK_UserRole_d", "FK_Users_d", "DiscSettingsCriteria_d", "DisCountFrom", "DisCountTo"],
    //    hideColumn: [],
    //    serialNo: true,
    //    renameHeader: {
    //        "FK_UserRole_d": "User Role", "FK_Users_d": "User", "DiscSettingsCriteria_d": "Criteria", "DisCountFrom": "Discount From", "DisCountTo": "Discount To"},
    //    rowAttribute: [],
    //    isCheckType: []
    //};
    function ComDetailsTable_Fill(ele, tkey, data, tableOptionsTempOut) {
        debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');
        let tableOptionsTempfill = tableOptionsTempOut;
        let insertData = []
        let tableKey = tkey;
        let indexname = tkey + 'index';
        tableOptionsTempfill.rowAttribute.push(indexname);
        tableOptionsTempfill.hideColumn.push(indexname);
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');
        $.each(data, function (keyOne, valOne) {

            let pData = {};

            pData[indexname] = keyOne + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', pData[indexname])

            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);
                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');



                    if (typeof valOne[nameAttr] !== undefined) {


                       // alert(headerName)
                        if ($this.is('select')) {
                            switch (headerName) {


                                case "FK_Users":
                                    headerName = "User";
                                    break;

                                default:
                                    break;
                            }
                            tableOptionsTempOut.renameHeader[nameAttr + '_d'] = headerName;
                            tableOptionsTempOut.hideColumn.push(nameAttr);
                            pData[nameAttr + '_d'] = $this.find('[value="' + valOne[nameAttr] + '"]').text();
                            pData[nameAttr] = valOne[nameAttr];

                            console.log('kkkkkkkkkkkkkk', pData)
                        }
                    else if ($this.is('input')) {

                        let inputType = $this.attr('type').toLocaleLowerCase();
                        console.log(inputType)


                        if (inputType == 'date') {

                            if (valOne[nameAttr] == null) {
                                pData[nameAttr] = valOne[nameAttr];
                            }
                            else {
                                pData[nameAttr] = moment(valOne[nameAttr]).format('YYYY-MM-DD');
                            }


                        }
                        else {
                            pData[nameAttr] = valOne[nameAttr];


                        }
                    }
                    else {
                        pData[nameAttr] = valOne[nameAttr];


                    }
                }



            });
            pData["FK_Users_d"] = valOne['UserName']
            insertData.push(pData);


            //----

        });
        $tblcontainer.empty();
        $tblcontainer.append(pft_table_createtable(insertData, tableOptionsTempfill));


    }
    function createatable(ele, tkey, uniq = []) {
        debugger

        let tableKey = tkey;
        let $thisForm = $('[perfect-class="form"]');
        let $tblcontainer = $thisForm.find('[perfect-tempTable="' + tableKey + '"]');

        let insertData = {};
        let tableOptionsTemp = tableOptionsTempOut;

        let unique = (uniq) ? uniq : [];

        let isValid = true;
        let isValidQty = true;
        let errorClass = '.temptableError';

        //make index
        console.log('check 1');

        let lastIndex = ($tblcontainer.attr('perfect-tempTable-lastindex')) ? parseInt($tblcontainer.attr('perfect-tempTable-lastindex')) : 0;
        let thisactionIndex = ($tblcontainer.attr('perfect-tempTable-action')) ? parseInt($tblcontainer.attr('perfect-tempTable-action')) : 0;
        let indexname = tkey + 'index';
        tableOptionsTemp.rowAttribute.push(indexname);
        tableOptionsTemp.hideColumn.push(indexname);
        let updateCond = '';
        let isNew = true;
        if (thisactionIndex > 0) {
            //means update
            insertData[indexname] = thisactionIndex;
            updateCond = '[' + indexname + '="' + thisactionIndex + '"]';
            isNew = false;
        }
        else {
            //insert
            insertData[indexname] = lastIndex + 1;
            $tblcontainer.attr('perfect-tempTable-lastindex', lastIndex + 1);
            isNew = true;
        }//

        let prevData = [];
        $tblcontainer.find('table > tbody').find('tr').each(function () {
            if (isNew) {
                prevData.push($(this).data('pData'));
            }
            else {
                if (parseInt($(this).attr(indexname)) != thisactionIndex) {
                    prevData.push($(this).data('pData'));
                }

            }

        })
       // console.log("prevData",prevData)

        if (tableKey == "Discount") {



            if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Criteria"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="Criteria"]').val() == null) {

                isValid = false;
                $thisForm.find('[perfect-tempTable-' + tableKey + '="Criteria"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select Criteria');
            }
            else {
                //
                if (prevData.find(a => a['DiscSettingsCriteria'] != $('[name=DiscSettingsCriteria]').val())) {
                    $thisForm.find('[perfect-tempTable-' + tableKey + '="Criteria"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Invalid Criteria');
                    isValid = false;
                }
                //
                else {
                    $thisForm.find('[perfect-tempTable-' + tableKey + '="Criteria"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
                }

            }
             if ($thisForm.find('[perfect-tempTable-' + tableKey + '="UserRole"]').val() == 0 || $thisForm.find('[perfect-tempTable-' + tableKey + '="UserRole"]').val() == null) {

                isValid = false;
                console.log('false');
                $thisForm.find('[perfect-tempTable-' + tableKey + '="UserRole"]').closest('[perfect-class="formGroup"]').find(errorClass).text('Please Select User Role');
             }

            else if (prevData.find(a => a['FK_Users'] == $('[name=FK_Users]').val()) && prevData.find(a => a['FK_Users'] != "")) {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="FK_Users"]').closest('[perfect-class="formGroup"]').find(errorClass).text('User Already Exists');
                $thisForm.find('[perfect-tempTable-' + tableKey + '="UserRole"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
                isValid = false;
            }
            else if ($('[name=FK_Users]').val() == "" && prevData.find(a => a['FK_UserRole'] == $('[name=FK_UserRole]').val())) {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="UserRole"]').closest('[perfect-class="formGroup"]').find(errorClass).text('User Role Already Exists');
                $thisForm.find('[perfect-tempTable-' + tableKey + '="FK_Users"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
                isValid = false;
            }
            else if ($('[name=FK_Users]').val() != "" && prevData.find(a => a['FK_UserRole'] == $('[name=FK_UserRole]').val()) && prevData.find(a => a['FK_Users'] == $('[name=FK_Users]').val())) {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="UserRole"]').closest('[perfect-class="formGroup"]').find(errorClass).text('User Role Already Exists');
                $thisForm.find('[perfect-tempTable-' + tableKey + '="FK_Users"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
                isValid = false;
            }
            else if (prevData.find(a => a['FK_Users'] == "") && prevData.find(a => a['FK_UserRole'] == $('[name=FK_UserRole]').val())) {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="UserRole"]').closest('[perfect-class="formGroup"]').find(errorClass).text('User Role Already Exists');
                isValid = false;
            }
            else {
                $thisForm.find('[perfect-tempTable-' + tableKey + '="UserRole"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
                $thisForm.find('[perfect-tempTable-' + tableKey + '="FK_Users"]').closest('[perfect-class="formGroup"]').find(errorClass).text('');
            }
            ///
            debugger



            if ($thisForm.find('[perfect-tempTable-' + tableKey + '="DisCountFrom"]').val() == '' || $thisForm.find('[perfect-tempTable-' + tableKey + '="DisCountFrom"]').val() == null) {

                isValid = false;
                if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Criteria"]').val() == 1) {
                    $thisForm.find('.ib1').text('Please Enter Discount % From ');
                }
                else if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Criteria"]').val() == 2){
                    $thisForm.find('.ib1').text('Please Enter Discount Amt From ');
                }

            }
            else if ((parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="DisCountFrom"]').val())) > (parseFloat($thisForm.find('[perfect-tempTable-' + tableKey + '="DisCountTo"]').val()))) {
                isValid = false;
                if ($thisForm.find('[name=DiscSettingsCriteria]').val() == 2) {
                    $thisForm.find('.ib1').text('Discount Amt From Should be less than Discount Amt To ');
                }
                else if ($thisForm.find('[name=DiscSettingsCriteria]').val() == 1) {
                    $thisForm.find('.ib1').text('Discount % From Should be less than Discount % To ');
                }

            }
            else if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Criteria"]').val() == 1) {
                debugger
                let valmethod = $thisForm.find('[perfect-tempTable-' + tableKey + '="DisCountFrom"]').val();
                if (valmethod > 100) {
                    $thisForm.find('.ib1').text('Please Enter % in Between 1 to 100');
                    isValid = false;
                }
                else {
                    $thisForm.find('.ib1').text('');
                }
            }
            else {
                $thisForm.find('.ib1').text('');
            }



            if ($thisForm.find('[perfect-tempTable-' + tableKey + '="DisCountTo"]').val() =='' || $thisForm.find('[perfect-tempTable-' + tableKey + '="DisCountTo"]').val() == null) {
                isValid = false;
                if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Criteria"]').val() == 1) {
                    $thisForm.find('.ib2').text('Please Enter Discount % To');
                }
                else if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Criteria"]').val() == 2) {
                    $thisForm.find('.ib2').text('Please Enter Discount Amt To');
                }

            }
            else if ($thisForm.find('[perfect-tempTable-' + tableKey + '="Criteria"]').val() == 1) {
                debugger
                let valmethod = $thisForm.find('[perfect-tempTable-' + tableKey + '="DisCountTo"]').val();
                if (valmethod > 100) {
                    var c = $('#ib1').text();
                    if (c.length > 0) {

                    } else {
                        $thisForm.find('.ib2').text('Please Enter % in Between 1 to 100');
                    }

                    isValid = false;
                }
                else {

                    $thisForm.find('.ib2').text('');
                }

            }
            else {
                $thisForm.find('.ib2').text('');
            }





        }





        let upperlimit = $thisForm.find('[name="RegDate"]').val();
        let lowerlimit = $thisForm.find('[name="NextActionDate"]').val();
        var enqDate = new Date(upperlimit);
        var nxtDate = new Date(lowerlimit);
        var today = new Date();





        if (unique.length > 0) {
            //getting previous data

            console.log('previous data', prevData);

            unique.forEach(function (key, i) {
                console.log('unid -> key:' + key + "| index :" + i);
                let $thisEle = $thisForm.find('[perfect-tempTable-' + tableKey + '="' + key + '"]');
                let $thisEleMode = $thisForm.find('[perfect-tempTable-' + tableKey + '= Mode]');
                let headerEleName = tableKey == "Discount" ? $thisForm.find('[name="lblProduct"]').text() : $thisForm.find('[name="lblEmployee"]').text();
                let atname = $thisEle.attr('name');
                let mdName = $thisEleMode.attr('name');
                let cvalue; let cValueMode;


                //console.log('len')
                if ($thisEle.length != 0) {
                    console.log('len', $thisEle)
                    let $errorElement = $thisEle.closest('[perfect-class="formGroup"]').find(errorClass);
                    let errmessage = headerEleName + " Already exits"

                    //getting current value in cval
                    if ($thisEle.is('select')) {
                        cvalue = $thisEle.val();
                        //alert(cvalue);
                    }
                    else if ($thisEle.is('input')) {

                        let inputEleType = $thisEle.attr('type').toLocaleLowerCase();

                        if (inputEleType == 'checkbox') { cvalue = $thisEle.is(':checked'); }
                        else if (inputEleType == 'hidden') { cvalue = $thisEle.val(); }
                        else { cvalue = $thisEle.val(); }
                    }
                    else { cvalue = $thisEle.val(); }
                    /////Mode///
                    if ($thisEleMode.is('select')) {
                        cValueMode = $thisEleMode.val();
                        //alert(cvalue);
                    }
                    else if ($thisEleMode.is('input')) {

                        let inputEleType = $thisEleMode.attr('type').toLocaleLowerCase();

                        if (inputEleType == 'checkbox') { cValueMode = $thisEleMode.is(':checked'); }
                        else if (inputEleType == 'hidden') { cValueMode = $thisEleMode.val(); }
                        else { cValueMode = $thisEleMode.val(); }
                    }
                    else { cValueMode = $thisEleMode.val(); }

                    // console.log('cvalue ->' + cvalue);

                    //searching in previous data
                    if (prevData.find(a => a[atname] == cvalue && a[mdName] == cValueMode)) {
                        // console.log('Search =>' + cvalue + '| attr :' + atname)
                        $errorElement.text(errmessage);
                        isValid = false;
                    }
                }
            });

        }

        //if (prevData.find(a => a['FK_Category'] == $('[name=FK_Category]').val() && a['FK_Product'] == $('[name=FK_Product]').val())) {
        //    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Already Exists' });
        //    isValid = false;
        //}
        //else if (prevData.find(a => a['FK_Category'] == $('[name=FK_Category]').val() && $('[name=FK_Product]').val() === "")) {
        //    if (prevData.find(a => a['FK_Category'] == $('[name=FK_Category]').val())) {
        //        NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Already Exists' });
        //        isValid = false;
        //    }
        //}
        //else if (prevData.find(a => a['FK_Category'] == $('[name=FK_Category]').val() && $('[name=FK_Product]').val() != "")) {
        //    if (prevData.find(a => a['FK_Category'] == $('[name=FK_Category]').val() && a['FK_Product'] === "")) {
        //        NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Already Exists' });
        //        isValid = false;
        //    }
        //    else if (prevData.find(a => a['FK_Category'] == $('[name=FK_Category]').val() && a['FK_Product'] == $('[name=FK_Product]').val())) {
        //        NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': 'Already Exists' });
        //        isValid = false;
        //    }
        //}

        if (isValid) {

            console.log('check 4.1');
            // this section make table column data
            $thisForm.find('[perfect-tempTable-' + tableKey + ']').each(function () {
                let $this = $(this);

                let headerName = $this.attr('perfect-tempTable-' + tableKey);
                let nameAttr = $this.attr('name');
                //console.log('nameAttr', nameAttr);
                console.log('headerName', headerName);

                if ($this.is('select')) {
                    switch (headerName) {
                        case "FK_Users":
                            headerName = "User";
                            break;

                        default:
                            break
                    }
                    tableOptionsTemp.renameHeader[nameAttr + '_d'] = headerName;
                    tableOptionsTemp.hideColumn.push(nameAttr)
                    if ($this.val() != null) {
                        let selectText = ($this.val().length == 0) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    else {
                        let selectText = ($this.val() == null) ? '' : $this.children(":selected").text();
                        insertData[nameAttr + '_d'] = selectText;
                    }
                    insertData[nameAttr] = $this.val();

                    $this.val('').selectpicker('refresh');

                }
                else if ($this.is('input')) {

                    let inputType = $this.attr('type').toLocaleLowerCase();

                    if (inputType == 'checkbox') {

                        insertData[nameAttr] = $this.is(':checked');

                        tableOptionsTemp.isCheckType.push(nameAttr)
                        //clear field
                        $this.prop('checked', false);

                    }
                    else if (inputType == 'hidden') {

                        tableOptionsTemp.hideColumn.push(nameAttr)
                        insertData[nameAttr] = $this.val();

                        //clear field
                        $this.val('');
                    }
                    else if (inputType == 'date') {


                        insertData[nameAttr] = $this.val();

                        //clear field
                        $this.val('');
                    }

                    else {
                        insertData[nameAttr] = $this.val();

                        $this.val('');
                    }
                }

                else {
                    insertData[nameAttr] = $this.val();

                    //clear field
                    $this.val('');

                }



            });
            console.log('check 4.2', insertData);
            console.log('check 4.2 tableoption', tableOptionsTemp);
            if (isNew) {
                console.log('check 4.2.1');
                //this section nake table.table row
                if ($tblcontainer.find('table').length == 0) {
                    console.log('check 4.2.3');
                    console.log(insertData);
                    $tblcontainer.append(pft_table_createtable([insertData], tableOptionsTemp));
                    //  $tblcontainer.find('table').dataTable({ paging: false, ordering: false });
                }
                else {
                    console.log('check 4.2.1');
                    let table = $tblcontainer.find('table').DataTable()
                    table.destroy()
                    pft_table_addTableRow($tblcontainer.find('table'), insertData, tableOptionsTemp);


                }
                console.log('check 4.2.1');
            }
            else {
                console.log('check 4.3');
                let table = $tblcontainer.find('table').DataTable()
                table.destroy()
                console.log('check 4.4');
                console.log('table', $tblcontainer.find('table'))
                console.log('check 4.5');
                pft_table_replaceTableRow($tblcontainer.find('table'), updateCond, insertData, tableOptionsTemp);



            }

            console.log(insertData);

            $tblcontainer.attr('perfect-tempTable-action', 0);
        }
        console.log('check 5');





    }


    function MaterialDetailsclear(ele, tableKey) {

        let $thisForm = $(ele).closest('[perfect-class="form"]');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="input"]').val('');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="select"]').val('').selectpicker('refresh');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="text"]').val('');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="date"]').val('');
        $thisForm.find('[perfect-tempTable-' + tableKey + ']').closest('[perfect-ctype="hidden"]').val('');

    }

     function AddDiscountAuthorization(ele, actiontype) {
         debugger
        let $thisForm = $(ele).closest('[perfect-class="form"]');

        let prevData = [];
         $thisForm.find('[perfect-tempTable="Discount"]').find('table > tbody').find('tr').each(function () {

            prevData.push($(this).data('pData'));

        })


         if ($thisForm.valid() && prevData.length != 0) {



             $(ele).prop('disabled', true);

             console.log("prevData >", prevData)
             var inputData = {
                 __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                 'ID_DiscountAuthorizationSettings': isNaN(parseInt($thisForm.find('[name=ID_DiscountAuthorizationSettings]').val())) ? 0 : parseInt($thisForm.find('[name=ID_DiscountAuthorizationSettings]').val()),
                 'EffectDate': $thisForm.find('[name=EffectDate]').val().trim(),
                 'FK_MenuGroup': $thisForm.find('[name="FK_Module"]').val(),
                 'FK_MenuList': $thisForm.find('[name="SubModule"]').val(),
                 'FK_Category': $thisForm.find('[name=CategoryID]').val(),
                 'FK_SubCategory': $thisForm.find('[name=FK_SubCategory]').val(),
                 'FK_Product': $thisForm.find('[name=ProductID]').val(),
                 'SkipPreviousLevel': $thisForm.find('[name="SkipPreviousLevel"]').is(':checked'),
                 'ActiveCorrectionOption': $thisForm.find('[name="ActiveCorrectionOption"]').is(':checked'),
                 'DetailsView': prevData

             };

             let _ActionUrl = "";
             if (actiontype == "add") { _ActionUrl = "@Url.Action("AddDiscountAuthorization", "DiscountAuthorization")"; } else { _ActionUrl = "@Url.Action("UpdateDiscountAuthorization", "DiscountAuthorization")"; }

             $.ajax({
                 url: (actiontype == "add") ? "@Url.Action("AddDiscountAuthorization", "DiscountAuthorization")" : "@Url.Action("UpdateDiscountAuthorization", "DiscountAuthorization")",
                 type: "POST",
                 data: inputData,
                 dataType: "json",
                 contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                 success: function (data) {

                     if (data.Process.IsProcess) {

                         $.each(data.Process.Message, function (key, value) {
                             NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                         });
                         $thisForm.find('[perfect-ctype="select"]').val('').selectpicker('refresh');
                         $thisForm.find('[perfect-ctype="input"]').val('');
                         $thisForm.find('[perfect-ctype="date"]').val('');
                         $thisForm.find('[perfect-ctype="hidden"]').val('');



                         let onSuccess = $thisForm.attr('perfect-onFormSuccess')

                         if (onSuccess) {
                             fn_DiscountAuthrizationIndex_initialLoad();

                         }

                     }
                     else {
                         $.each(data.Process.Message, function (key, value) {
                             //toastr.warning(value, "Error");
                             NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                         });
                     }
                 },
                 complete: function () {
                     $(ele).prop('disabled', false);
                 }

             });


         }

        else {

            NotificationMessage({ 'type': 'error', 'heading': 'info', 'message': 'Please Fill all mandatory fields' });
        }
    }


    function ResetButton() {
        fn_DiscountAuthrizationIndex_initialLoad();

    }



</script>