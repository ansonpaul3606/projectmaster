
@{
    ViewBag.Title = "";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="container-fluid">

    <div class="row">
        <div class="col-lg-12" id="EmployeeStocktransfer_formContainer">

        </div>
    </div>


</div>
@section scripts{

    <script type="text/javascript">

        const LastIDSessionKeyST = 'StockTransferLastID';       
        var LastID_StockTransfer;
      
        const $formContainer = $('#EmployeeStocktransfer_formContainer');

        var tableOptions = {
            dropdown: {
                buttons: [
                    { displayName: "View", action: viewdetails},
                    { type: "divider" },
                    {
                        displayName: "Delete", action:deleteEmployeestocktransfer
                    }
                ],
                class: "btn btn-success light sharp"
            },
            onlyShowColumn: ["SlNo", "TransDate", "BranchName", "DepartmentName", "EmployeeName", "DepartmentNameTo"],
            hideColumn: [],
            rowClickAction: viewdetails,
            renameHeader: { "SlNo": "SL NO", "TransDate": "Date", "BranchName": "Branch", "DepartmentName": "DepartmentFrom", "EmployeeName": "Employee From", "DepartmentNameTo": "DepartmentTo"  },
            isDateType: ["TransDate"],
        };

        var validationMessage = {


            'ProductID': {
                'required': 'Please select a Product',
                'stringonly': 'Invalid Product selected',

            },
            'TransDate': {
                'required': 'Please Enter A Date',
                'max': jQuery.validator.format('Future Date Not Allowed'),
        },

            'EmployeeID': {
                'required': 'Please select a Employee',
                'stringonly': 'Invalid Employee selected',

            },
            'DepartmentID': {
                'required': 'Please select a Department',
                'stringonly': 'Invalid Department selected',

            },
            'DepartmentName': {
                'required': 'Please select a Department',
                'stringonly': 'Invalid Department selected',

            },
            'DepartmentIDTo': {
                'required': 'Please select a Department',
                'stringonly': 'Invalid Department selected',

            },
            'DepartmentNameTo': {
                'required': 'Please select a Department',
                'stringonly': 'Invalid Department selected',

            },
            'BranchIDTo': {
                'required': 'Please select a Branch',
                'stringonly': 'Invalid Department selected',

            },
            'BranchNameTo': {
                'required': 'Please select a Branch',
                'stringonly': 'Invalid Department selected',

            },

        }

        $(document).ready(function () {
            debugger;


            fn_EmployeeStockTransferIndex_initialLoad()
             Multiunitsettings = '@ViewBag.Multiunitsettings' == 'True' ?'1':'0';
        });


        function fn_EmployeeStockTransferIndex_initialLoad() {

         
                
            loademployeestocktransferrequestList(this, employeestocktransferlist_loadform);

        }



        function employeestocktransferlist_loadform() {


            $formContainer.load('@Url.Action("LoadFormEmployeeStockTransfer", "StockTransferRequest")?TransMode=' + '@ViewBag.TransMode', function () {

                let $thisForm = $(this).find('[perfect-class="form"]');
                $thisForm.find('[name=TransDate]').val(moment().format('YYYY-MM-DD'));
                Getdepartmentdefault();
                $thisForm.validate({

                    messages: validationMessage

                });
                $thisForm.attr('perfect-onFormSuccess', 'fn_EmployeeStockTransferIndex_initialLoad');

                 initFunctions($thisForm);
                 getSessionValue(LastIDSessionKeyST, function (result) {
                     LastID_StockTransfer = result;

                 });
                


            });

        }


        function loademployeestocktransferrequestList(ele,callback) {

           // debugger;
        let $sidemenu = $sideMenuOptions.body;

       // let $thisForm = $(ele).closest('.Search-Control');

        let $thisForm = $(ele).closest('.testSearchBox');
        let SearchName = $thisForm.find('input').val();
            console.log("GH", SearchName)
            if (SearchName == undefined) {
                SearchName = "";
            }
        $sideMenuOptions.title.find('h4').text('Stock Transfer Request List');
          let pageUrl = '@Url.Action("GetEmployeeStockTransferList", "StockTransferRequest")';
            $.ajax({
                url:pageUrl,
                type: "POST",
                data: { pageSize: 15, pageIndex: 0, Name: SearchName, TransModes: '@ViewBag.TransMode'},
                dataType: "json",
                contentType: "application/x-www-form-urlencoded; charset=utf-8",
                success: function (ajaxOutput) {


                    if (ajaxOutput.Process.IsProcess) {

                        setSessionValue(LastIDSessionKeyST, ajaxOutput.Data[0]["LastID"]);

                              console.log('TaxGroup', ajaxOutput);
                              $sidemenu.find('.jq_sidemenu_title').text("StockTransfer");

                        $sidemenu.empty().append('<div class="d-flex justify-content-end mb-2 position-relative"><div class="col-md-6 position-absolute top-1 z-index"> <div class="input-group testSearchBox"><input type="text" class="form-control " name="SearchName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" value="' + SearchName +'"  /><div class="input-group-append"><button id="addcountry-jq-searchButton6" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="loademployeestocktransferrequestList(this)"></button></div></div></div></div>', $('<div/>', {class:"col-md-12 table_temp_class"}).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))
                             // $sidemenu.find('table').dataTable({ paging: true });


                              let $table = $sidemenu.find('table');
                              $table.dataTable({
                                  "serverSide": true,//no change
                                  "processing": true,//-- process text when clicked
                                  //"lengthChange": false,
                                  "lengthMenu": [10, 15, 20, 25, 50, 100],//---drop down page size
                                  "searching": false,//--no change
                                  "ordering": false,//--sorting
                                  "deferLoading": ajaxOutput.totalrecord,//<----to total number of record from db
                                  "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,//<----starting record
                                  "pageLength": ajaxOutput.pageSize,//<----page size
                                  "recordsFiltered": ajaxOutput.pageSize,//<---page size

                                  "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize, searchkey: SearchName, TransModes: '@ViewBag.TransMode' }, tableOptions, $table)
                              });

                          }
                    else {

                        setSessionValue(LastIDSessionKeyST, 0);
                              if (ajaxOutput.Process.Status = "NoData") {

                                  $sidemenu.find('.jq_sidemenu_title').text("Product");

                                  $sidemenu.empty().append('<div class="d-flex justify-content-end mb-2"><div class="col-md-6 position-absolute top-1 z-index"> <div class="input-group testSearchBox"><input type="text" class="form-control " name="SearchName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input" value="' + SearchName +'"  /><div class="input-group-append"><button id="addcountry-jq-searchButton6" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="loademployeestocktransferrequestList(this)"></button></div></div></div></div>', $('<div/>', { class: "col-md-12 table_temp_class" }).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))
                        // $sidemenu.find('table').dataTable({ paging: true });


                        let $table = $sidemenu.find('table');
                        $table.dataTable({
                            "serverSide": true,//no change
                            "processing": true,//-- process text when clicked
                           // "lengthChange": false,
                           "lengthMenu": [],//---drop down page size
                            "searching": false,//--no change
                            "ordering": false,//--sorting
                            "deferLoading": ajaxOutput.totalrecord,//<----to total number of record from db
                            "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,//<----starting record
                            "pageLength": ajaxOutput.pageSize,//<----page size
                            "recordsFiltered": ajaxOutput.pageSize,//<---page size

                            "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize, TransModes: '@ViewBag.TransMode'}, tableOptions, $table)
                        });
                    }
                    else {
                        $.each(ajaxOutput.Process.Message, function (key, value) {
                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                        });
                    }
                }




            },
            complete: function () {
                if (callback) {


                    callback();
                }
            }
        });
    }
        function returnajaxPagination(ajaxInfo, tableOptions, tableid) {

        //{ apiurl, pageSize }
        return {
            url: ajaxInfo.apiurl,
            type: "post",
            data: function () {
                var info = tableid.DataTable().page.info();
                console.log('RETURN AJAX', info)
                //return { <antiforgery>:<antiforgery>, length: ajaxInfo.pageSize, page: info.page }
                let input = { pageSize: info.length, pageIndex: info.page, TransModes: ajaxInfo.TransModes};
                if (ajaxInfo.searchkey) {
                    input["Name"] = ajaxInfo.searchkey;
                }
                return input
            },
            dataType: "json",
            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            success: function (dtajaxOutput) {
                // $sideMenuOptions.body.html(pft_table_createtable(dtajaxOutput.Data, tableOptions));
                let table = tableid.DataTable();
                table.destroy();
                pft_table_newTableBody(tableid, dtajaxOutput.Data, tableOptions);

                tableid.dataTable({
                    "serverSide": true,
                    "processing": true,
                    //"lengthChange": false,
                    "lengthMenu": [10, 15, 20, 25, 50, 100],
                    "searching": false,
                    "ordering": false,
                    "deferLoading": dtajaxOutput.totalrecord,
                    "displayStart": dtajaxOutput.pageIndex * dtajaxOutput.pageSize,
                    "pageLength": dtajaxOutput.pageSize,
                    "recordsFiltered": dtajaxOutput.pageSize,
                    "ajax": returnajaxPagination(ajaxInfo, tableOptions, tableid)
                })

            },

        }
        }

        function viewdetails() {
          //  debugger;
            let $thisUser = $(this).closest('tr');
             let savedData = $thisUser.data('pData');

            $('.dataTable tr').removeClass("SelectForDelete");
            $(this).closest('tr').addClass('SelectForDelete');
                let inputData = {
                    __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),

                    StockTransferID: savedData.StockTransferID,
                    TransMode: '@ViewBag.TransMode'
                };
             console.log(inputData);
            //dbcall
                //$('#Servicemapping_formContainer').empty();
                    $.ajax({
                 url: '@Url.Action("GetEmployeeStockTransferInfo", "StockTransferRequest")',
                type: "POST",
                 // headers: { "token_key": "1234" },
                 data: inputData,//<---- Input json : data passed to controller
                dataType: "json",
              contentType: 'application/x-www-form-urlencoded;charset=utf-8',
                        success: function (ajaxOutput) {//<----- if ajax method executed succesfully,  we get the data passed from controller in this variable  => success: function (variable) {
                            console.log(ajaxOutput);
                         ///success
                            if (ajaxOutput.Process.IsProcess) {


                                $('#EmployeeStocktransfer_formContainer').load('@Url.Action("LoadFormEmployeeStockTransfer", "StockTransferRequest")?TransMode=' + '@ViewBag.TransMode', function () {

                                    let $thisForm = $(this).find('[perfect-class="form"]');

                                    $thisForm.validate({ messages: validationMessage });

                                    $thisForm.data({ 'pData': ajaxOutput.Data[0] });//setting pdata : which is used to get PostID when updating the  form in partial page


                                   // ComDetailsTable_Fill($thisForm, 'cstatus', ajaxOutput.Data[0].Subservicemapping, tableOptionsTempOutFill)
                                    ComDetailsTable_Fill($thisForm, 'Opening', ajaxOutput.Data[0].SubEmployeeStockTransfers, tableOptionsTempOut2)

                                    getfunctionAssign(this);
                                    $thisForm.find('[name="TransDate"]').val(moment(ajaxOutput.Data[0].TransDate).format('YYYY-MM-DD')),
                                    $thisForm.find('[name=BranchID]').val(ajaxOutput.Data[0].BranchID).selectpicker('refresh'),
                                        $thisForm.find('[name="BranchTypeID"]').val(ajaxOutput.Data[0].BranchTypeID).selectpicker('refresh'),
                                        $thisForm.find('[name=BranchName]').val(ajaxOutput.Data[0].Branch),

                                        $thisForm.find('[name=DepartmentID]').val(ajaxOutput.Data[0].DepartmentID).selectpicker('refresh'),
                                        $thisForm.find('[name=DepartmentName]').val(ajaxOutput.Data[0].Department),
                                        $thisForm.find('[name=EmployeeName]').val(ajaxOutput.Data[0].EmployeeName),
                                        $thisForm.find('[name=EmployeeID]').val(ajaxOutput.Data[0].EmployeeID).selectpicker('refresh'),
                                        $thisForm.find('[name="DepartmentID"]').attr("disabled", "disabled");
                                        $('#employeefromid').attr("disabled", true);

                                        $thisForm.find('[name=ModeTR]').val(ajaxOutput.Data[0].ModeTR).selectpicker('refresh'),
                                        $thisForm.find('[name=BranchIDTo]').val(ajaxOutput.Data[0].BranchIDTo).selectpicker('refresh'),
                                        $thisForm.find('[name=BranchNameTo]').val(ajaxOutput.Data[0].BranchNameTo),
                                        $thisForm.find('[name=DepartmentIDTo]').val(ajaxOutput.Data[0].DepartmentIDTo).selectpicker('refresh'),
                                        $thisForm.find('[name=DepartmentNameTo]').val(ajaxOutput.Data[0].DepartmentNameTo),
                                        $thisForm.find('[name=EmployeeNameTo]').val(ajaxOutput.Data[0].EmployeeNameTo),
                                        $thisForm.find('[name=EmployeeIDTo]').val(ajaxOutput.Data[0].EmployeeIDTo).selectpicker('refresh'),
                                        $('#stockavailable').show();
                                       $('#stockstandby').show();

                                    $thisForm.find('button[name=add]').addClass('d-none');
                                    $thisForm.find('button[name=update]').removeClass('d-none');
                                    $thisForm.attr('perfect-onFormSuccess', 'fn_EmployeeStockTransferIndex_initialLoad');
                                    $sideMenuOptions.close();

                                });
                            }



                },


            });

        }





        function deleteEmployeestocktransfer() {
             let $row = $(this).closest('tr');
            let Saveddata = $row.data('pData');


            console.log('Delete function', Saveddata)

            $('.dataTable tr').removeClass("SelectForDelete");
            $(this).closest('tr').addClass('SelectForDelete');

            //get reason list-

               $.ajax({
                   url: "@Url.Action("GetEmployeeStockTransferReasonList", "StockTransferRequest")",
                   type: "GET",
                  // data: inputReason,
                   contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                   success: function (ajaxReasonOutput) {
                       if (ajaxReasonOutput.Process.IsProcess) {

                           console.log('Inside res ajax', ajaxReasonOutput.Data)


                          // let confirmationDialogBoxOption = { body: "Do you want to remove  ?", cancel: "No", confirm: "Yes", reason: ajaxReasonOutput.Data };
                            let confirmationDialogBoxOption = { heading: "Are you Sure?", body: "Do you want to remove " + " ?", cancel: "No", confirm: "Yes", reason: ajaxReasonOutput.Data };
                            var res = ConfirmDialog(confirmationDialogBoxOption);

                          res.then(function (selectedOption) {
                                if (selectedOption) {
                                   //  console.log('customerIndex> delete function:',selectedOption)

                                    let inputData = {
                                        __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(), //antiforgery token
                                        StockTransferID: Saveddata.StockTransferID,

                                        ReasonID: selectedOption
                                    };
                                    $.ajax({
                                        url: "@Url.Action("DeleteEmployeeStocktransfer", "StockTransferRequest")",
                                        type: "POST",
                                        data: inputData,
                                        contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                                        success: function (ajaxOutput) {
                                            if (ajaxOutput.Process.IsProcess) {

                                                let table = $row.closest('table').DataTable()
                                                table.row($row).remove().draw();

                                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                                    NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': 'Deleted Successfully' });
                                                });

                                                //removing a data
                                                $('.dataTable tr').removeClass("SelectForDelete");

                                            }
                                            else {
                                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                                    $('.dataTable tr').removeClass("SelectForDelete");
                                                });
                                            }
                                        }
                                    });
                                }
                                else {
                                    NotificationMessage({ 'message': 'No option selected' });
                                }

                            });


                        }
                        else {



                        }
                   }

               });




        };

        function Getdepartmentdefault() {
            let $thisForm = $('[perfect-class="form"]');
            $.ajax({
                url: '@Url.Action("GetEmployeeLeadDefault", "LeadGeneration")',
                type: "Get",
                dataType: "json",
                contentType: "application/json",
                success: function (ajaxOutput) {//<----- if ajax method executed succesfully,  we get the data passed from controller in this variable  => success: function (variable) {

                    if (ajaxOutput.Process.IsProcess) {
                        //var stateModel = createSelectList({ data: ajaxOutput.Data, hideColumn: ['EmpID'] });
                        $.each(ajaxOutput.Data, function (key, value) {

                            console.log('>_ Search button > list click', value);

                            //$thisForm.find('[name=BranchTypeID]').val(value.ID_BranchType).selectpicker('refresh');
                            $thisForm.find('[name=BranchID]').val(value.ID_Branch).selectpicker('refresh');
                            $thisForm.find('[name=DepartmentID]').val(value.FK_Department).selectpicker('refresh');


                        });




                    }
                    else {
                        $.each(ajaxOutput.Process.Message, function (key, value) {
                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                        });
                    }

                },


            });
        }

    </script>
}


