

@{
    ViewBag.Title = "SubCategory";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="container-fluid">
    @Html.AntiForgeryToken()
    <div class="row">
        <div class="col-lg-12" id="SubCategory-sample-form">

        </div>
    </div>


</div>

@section scripts{

    <script>

        var tableOptions = {
            dropdown: {
                buttons: [

                
                 @if (ViewBag.PagedAccessRights.UsrrlMsView) {
        <text> { displayName: "View", action: editSubCategory },</text>
    }

                    { type: "divider" },
     @if (ViewBag.PagedAccessRights.UsrrlMsDel)
             {
                 <text> { displayName: "Delete", action: deleteSubCategory },</text>

              }
                   
                 
                ],
                class: "btn btn-success light sharp"
            },
            onlyShowColumn: ["SubCatName", "SubCatShortName"],
            hideColumn: [],
            rowClickAction: editSubCategory,
            serialNo: true,
            renameHeader: { "SubCatName": "Name", "SubCatShortName": "Short Name" }

        };

        var validationMessage = {
            'SubCatName': {
                'required': 'Please Enter a Name',
                'maxlength': jQuery.validator.format(' Name should be less than {0} characters'),
                'stringonly': 'Special characters are not allowed in  Name'

            },
            'SubCatShortName': {
                'required': 'Please Enter a Short Name',
                'maxlength': jQuery.validator.format(' Name should be less than {0} characters'),
                'alphanumeric': 'Special characters are not allowed in short name'
            },

            'Mode': {
                'required': 'Please Select a Mode',
                'digits': 'Invalid Mode selected'
            },
            'CategoryID': {
                'required': 'Please Select a Category',
                'digits': 'Invalid Category selected'
            },

        };

        function initialLoadSubCategory() {

             @if (ViewBag.PagedAccessRights.UsrrlMsView)
              {
                 <text>   loadSubCategoryList(this); </text>
              }
           
            loadAddSubCategoryForm();
        }

        $(document).ready(function () {

            //load SubCategory data
            initialLoadSubCategory();
        });

        function loadAddSubCategoryForm() {
            $('#SubCategory-sample-form').load("@Url.Action("LoadSubCategoryViewForm", "SubCategory")", function () {

                let $thisForm = $(this).find('[perfect-class=form]');

                // ... Custom validation message
                $thisForm.validate({ messages: validationMessage});
                // ... Custom validation message

                $thisForm.attr('perfect-onFormSuccess', 'initialLoadSubCategory');
                initFunctions($thisForm);

            });
        }



        function loadSubCategoryList(ele) {
        let $sidemenu = $sideMenuOptions.body;
       
       // let $thisForm = $(ele).closest('.Search-Control');

        let $thisForm = $(ele).closest('.testSearchBox');
        let SearchName = $thisForm.find('input').val();
        console.log("GH",SearchName)
            $sideMenuOptions.title.find('h4').text('Sub Category List');
          let pageUrl = '@Url.Action("GetSubCategoryList", "SubCategory")';
            $.ajax({
                url:pageUrl,
                type: "POST",
                data: { pageSize: 15, pageIndex: 0, Name: SearchName, TransModes: localStorage.getItem("FRM_TRANSMODE") },
                dataType: "json",
                contentType: "application/x-www-form-urlencoded; charset=utf-8",
                success: function (ajaxOutput) {


                          if (ajaxOutput.Process.IsProcess) {
                              console.log('SubCategory', ajaxOutput);
                              $sidemenu.find('.jq_sidemenu_title').text("SubCategory");

                              $sidemenu.empty().append('<div class="d-flex justify-content-end mb-2"><div class="col-md-6 position-absolute top-1 z-index"> <div class="input-group testSearchBox"><input type="text" class="form-control " name="SearchName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input"  /><div class="input-group-append"><button id="addcountry-jq-searchButton6" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="loadSubCategoryList(this)"></button></div></div></div></div>', $('<div/>', {class:"col-md-12 table_temp_class"}).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))
                             // $sidemenu.find('table').dataTable({ paging: true });


                              let $table = $sidemenu.find('table');
                              $table.dataTable({
                                  "serverSide": true,//no change
                                  "processing": true,//-- process text when clicked
                                  //"lengthChange": false,
                                  "lengthMenu": [10, 15, 20, 25, 50, 100],//---drop down page size
                                  "searching": false,//--no change
                                  "ordering": false,//--sorting
                                  "deferLoading": ajaxOutput.totalrecord,//<----to total number of record from db
                                  "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,//<----starting record
                                  "pageLength": ajaxOutput.pageSize,//<----page size
                                  "recordsFiltered": ajaxOutput.pageSize,//<---page size

                                  "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize, searchkey: SearchName }, tableOptions, $table)
                              });

                          }
                else {
                              if (ajaxOutput.Process.Status = "NoData") {
                                 
                                  $sidemenu.find('.jq_sidemenu_title').text("SubCategory");

                                  $sidemenu.empty().append('<div class="d-flex justify-content-end mb-2"><div class="col-md-6 position-absolute top-1 z-index"> <div class="input-group testSearchBox"><input type="text" class="form-control " name="SearchName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input"  /><div class="input-group-append"><button id="addcountry-jq-searchButton6" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="loadSubCategoryList(this)"></button></div></div></div></div>', $('<div/>', { class: "col-md-12 table_temp_class" }).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))
                        // $sidemenu.find('table').dataTable({ paging: true });


                        let $table = $sidemenu.find('table');
                        $table.dataTable({
                            "serverSide": true,//no change
                            "processing": true,//-- process text when clicked
                           // "lengthChange": false,
                           "lengthMenu": [],//---drop down page size
                            "searching": false,//--no change
                            "ordering": false,//--sorting
                            "deferLoading": ajaxOutput.totalrecord,//<----to total number of record from db
                            "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,//<----starting record
                            "pageLength": ajaxOutput.pageSize,//<----page size
                            "recordsFiltered": ajaxOutput.pageSize,//<---page size

                            "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize }, tableOptions, $table)
                        });
                    }
                    else {
                        $.each(ajaxOutput.Process.Message, function (key, value) {
                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                        });
                    }
                }




            },
            complete: function () {

            }
        });
    }
    function returnajaxPagination(ajaxInfo, tableOptions, tableid) {
        //{ apiurl, pageSize }
        return {
            url: ajaxInfo.apiurl,
            type: "post",
            data: function () {
                var info = tableid.DataTable().page.info();
                console.log('RETURN AJAX', info)
                //return { <antiforgery>:<antiforgery>, length: ajaxInfo.pageSize, page: info.page }
                let input = { pageSize: info.length, pageIndex: info.page, TransModes: localStorage.getItem("FRM_TRANSMODE") };
                if (ajaxInfo.searchkey) {
                    input["Name"] = ajaxInfo.searchkey;
                }
                return input
            },
            dataType: "json",
            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            success: function (dtajaxOutput) {
                // $sideMenuOptions.body.html(pft_table_createtable(dtajaxOutput.Data, tableOptions));
                let table = tableid.DataTable();
                table.destroy();
                pft_table_newTableBody(tableid, dtajaxOutput.Data, tableOptions);

                tableid.dataTable({
                    "serverSide": true,
                    "processing": true,
                    //"lengthChange": false,
                    "lengthMenu": [10, 15, 20, 25, 50, 100],
                    "searching": false,
                    "ordering": false,
                    "deferLoading": dtajaxOutput.totalrecord,
                    "displayStart": dtajaxOutput.pageIndex * dtajaxOutput.pageSize,
                    "pageLength": dtajaxOutput.pageSize,
                    "recordsFiltered": dtajaxOutput.pageSize,
                    "ajax": returnajaxPagination(ajaxInfo, tableOptions, tableid)
                })

            },

        }
    }
        function loadSubCategoryList1() {
            let $sidemenu = $sideMenuOptions.body;
            $sideMenuOptions.title.find('h4').text('Sub Category ');
        //    alert("ss")

            $.ajax({
                url: "@Url.Action("GetSubCategoryList", "SubCategory")",
                type: "Get",
                dataType: "json",
                contentType: "application/json",
                success: function (ajaxOutput) {

                    if (ajaxOutput.Process.IsProcess) {
                        $sidemenu.html(pft_table_createtable(ajaxOutput.Data, tableOptions))
                        $sidemenu.find('table').dataTable({ paging: true });
                    }
                    else {
                        $.each(data.Process.Message, function (key, value) {
                           // toastr.warning(value, "Error");
                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                        });
                    }
                },
                complete: function () {

                }
            });
        }


         function editSubCategory() {

            let $thisUser = $(this).closest('tr');

             let savedData = $thisUser.data('pData');

             $('.dataTable tr').removeClass("SelectForDelete");
             $(this).closest('tr').addClass('SelectForDelete');

             let inputData = {
                 __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                 SubCategoryID: savedData.SubCategoryID
             };

            //dbcall

                 $.ajax({
                 url: '@Url.Action("GetSubCategoryInfo", "SubCategory")',//<----- Controller URL : url path in our controller eq: /Home/InsertSampleData or http://localhost:64212/Home/InsertSampleData
                type: "POST",
                data: inputData,
                dataType: "json",
                        contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                        success: function (ajaxOutput) {//<----- if ajax method executed succesfully,  we get the data passed from controller in this variable  => success: function (variable) {

                            //$.each(ajaxOutput.Process.Message, function (key, value) {
                            //    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                            //});
                            if (ajaxOutput.Process.IsProcess) {


                                $('#SubCategory-sample-form').load("@Url.Action("LoadSubCategoryViewForm", "SubCategory")", function () {
                                    $(this).find('[perfect-class=formTitle]').text('update : ' + ajaxOutput.Data[0].SubCatName)
                                console.log('Inside load');

                                let $thisForm = $(this).find('[perfect-class="form"]');
                                 // ... Custom validation message
                                $thisForm.validate({ messages: validationMessage});
                                // ... Custom validation message
                                $thisForm.data({ 'pData': ajaxOutput.Data[0] });//setting pdata : which is used to get PostID when updating the  form in partial page
                                //console.log('ajaxOutput', ajaxOutput.Data[0]);



                                //console.log(ajaxOutput.Data[0].FK_District);

                                $thisForm.find('[name=SubCatName]').val(ajaxOutput.Data[0].SubCatName),
                                    $thisForm.find('[name=SubCatShortName]').val(ajaxOutput.Data[0].SubCatShortName),

                                    $thisForm.find('[name=Mode]').val(ajaxOutput.Data[0].Mode).selectpicker('refresh'),
                                    $thisForm.find('[name=Mode]').trigger('change');
                                    // $thisForm.find('[name=CategoryID]').val(ajaxOutput.Data[0].Category).selectpicker('refresh'),
                                    $thisForm.find('[name=CategoryID]').attr('perfect-onSelectLoad', ajaxOutput.Data[0].Category);
                                
                                $thisForm.find('[name=SortOrder]').val(ajaxOutput.Data[0].SortOrder)
                                //show update button
                                $thisForm.find('button[name=add]').addClass('d-none');
                                $thisForm.find('button[name=update]').removeClass('d-none');

                                $thisForm.attr('perfect-onFormSuccess', 'initialLoadSubCategory');

                                $sideMenuOptions.close();

                            });
                            }
                            else {
                                console.log('>_ Inside GetMediaMasterInfo :false')

                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                });
                            }
                         },


                     });

          }


         @*function deleteSubCategory() {
            let $row = $(this).closest('tr');

            let Saveddata = $row.data('pData');

            let inputData = {
                SubCategoryID: Saveddata.SubCategoryID
            };

            let confirmationDialogBoxOption = { heading: "Are you Sure?", body: "Do you want to remove " + Saveddata.PostName + " ?", cancel: "No", confirm: "Yes" };
            var res = ConfirmDialog(confirmationDialogBoxOption);



           res.then(function (ret) {
                if (ret) {
                   // toastr.success("Clicked yes in the comfirmation box", "Confirmation Box in table");

                    $.ajax({
                        url: "@Url.Action("DeleteSubCategory", "SubCategory")",
                        type: "POST",
                        // headers: { "token_key": "1234" },
                        data: JSON.stringify(inputData),
                        // dataType: "json",
                        contentType: "application/json",
                        success: function (data) {

                            if (data.Process.IsProcess) {

                                let table = $row.closest('table').DataTable()
                                table.row($row).remove().draw();
                                    loadAddSubCategoryForm();
                                }

                            else {
                                $.each(data.Process.Message, function (key, value) {
                                   // toastr.warning(value, "Error");
                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                });
                            }

                        }
                    });


                }
                else {
                    NotificationMessage({ 'message': 'No option selected' });
                }

            });
        };*@

          // Function to delete customer
        function deleteSubCategory() {
             let $row = $(this).closest('tr');
            let Saveddata = $row.data('pData');


            $('.dataTable tr').removeClass("SelectForDelete");
            $(this).closest('tr').addClass('SelectForDelete');
            //console.log('Delete function', Saveddata)

            //get reason list-

               $.ajax({
                   url: "@Url.Action("GetSubCategoryReasonList", "SubCategory")",
                   type: "GET",
                  // data: inputReason,
                   contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                   success: function (ajaxReasonOutput) {
                       if (ajaxReasonOutput.Process.IsProcess) {

                           console.log('Inside res ajax', ajaxReasonOutput.Data)

                           let confirmationDialogBoxOption = { heading: "Are you Sure?", body: "Do you want to remove  " + Saveddata.SubCatName + " ?", cancel: "No", confirm: "Yes", reason: ajaxReasonOutput.Data };
                           var confirmBoxObj = ConfirmDialog(confirmationDialogBoxOption);
                           
                            confirmBoxObj.then(function (selectedOption) {
                                if (selectedOption) {
                                     console.log('customerIndex> delete function:',selectedOption)

                                    let inputData = {
                                        __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                                        SubCategoryID: Saveddata['SubCategoryID'],
                                        ReasonID: selectedOption
                                    };
                                    $.ajax({
                                        url: "@Url.Action("DeleteSubCategory", "SubCategory")",
                                        type: "POST",
                                        data: inputData,
                                        contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                                        success: function (ajaxOutput) {
                                            if (ajaxOutput.Process.IsProcess) {

                                                let table = $row.closest('table').DataTable()
                                                table.row($row).remove().draw();

                                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                                    NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': 'Deleted Successfully' });
                                                });

                                                //removing a data


                                            }
                                            else {
                                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                                });
                                            }
                                        }
                                    });
                                }
                                else {
                                    NotificationMessage({ 'message': 'No option selected' });
                                }

                            });


                        }
                        else {

                        }
                   }
               });

        };





    </script>

}
