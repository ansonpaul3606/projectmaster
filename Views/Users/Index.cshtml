
@{
    ViewBag.Title = "";
}




<div class="container-fluid">
    @Html.AntiForgeryToken()
    <div class="row">
        <div class="col-lg-12" id="users-form">

        </div>
    </div>
</div>

@section scripts{

<script type="text/javascript">

        const $formContainer = $('#users-form');

        $(document).ready(function () {
            UsersInitialLoad();

        });


        var tableOptions = {
            dropdown: {
                buttons: [
                 @if (ViewBag.PagedAccessRights.UsrrlSecurUser)
                  {
                    <text>{ displayName: "View", action: editUsers }, </text>//
                    //{ displayName: "Go to", action: "" },
                  }
                    { type: "divider" },
                    @if (ViewBag.PagedAccessRights.UsrrlSecurUser)
                            {
                                <text>{ displayName: "Delete", action: deleteUsers }</text>
                            }
                ],
                class: "btn btn-success light sharp"
            },
            onlyShowColumn: ["SlNo", "Employee", "UserCode", "Branch","UserRole"],
            hideColumn: [],
            rowClickAction: editUsers,
            //serialNo: true,
            renameHeader: { "SlNo": "Sl No", "Employee": "User", "UserCode": "User Code","UserRole":"User Role", "Branch": "Branch" }
        };
        var validationMessage = {
            'UserCode': {

                'required': 'Please Enter a User Code',
                'minlength': jQuery.validator.format('Please Enter At Least 6 Characters'),
                'maxlength': jQuery.validator.format('Please Enter No More Than 10 Characters'),
               'specialCharUserpwd': 'Not all Special characters allowed in User Code'

            },

            'BranchTypeID': {
                'required': 'Please Select a Branch Type',
                'digits': 'Invalid Branch Type selected'
            },
            'BranchID': {
                'required': 'Please Select a Branch',
                'digits': 'Invalid Branch selected'
            },
            'UserRoleID': {
                'required': 'Please Select a User Role',
                'digits': 'Invalid User Role selected'
            },
            'Employee': {
                'required': 'Please Select a User',
            },
        };

        function UsersInitialLoad() {
             @if (ViewBag.PagedAccessRights.UsrrlSecurUser)
              {
                 <text> loadUsersList(this); </text>
              }

             loadUsersAddForm();
        }


           // Fucntion to load Branch ADD form
        function loadUsersAddForm() {

            $formContainer.load('@Url.Action("LoadFormusers", "Users")?mtd=@ViewBag.mtd', function () {

                let $thisForm = $(this).find('[perfect-class="form"]');

                // ... Custom validation message
               $thisForm.validate({ messages: validationMessage });
                // ... Custom validation message

                $thisForm.attr('perfect-onFormSuccess', 'UsersInitialLoad');
            });

        };


        function loadUsersList(ele) {
        let $sidemenu = $sideMenuOptions.body;

       // let $thisForm = $(ele).closest('.Search-Control');

        let $thisForm = $(ele).closest('.testSearchBox');
        let SearchName = $thisForm.find('input').val();
        console.log("GH",SearchName)
            $sideMenuOptions.title.find('h4').text('Users List');
          let pageUrl = '@Url.Action("GetusersList", "Users")';
            $.ajax({
                url:pageUrl,
                type: "POST",
                data: { pageSize: 15, pageIndex: 0, Name: SearchName },
                dataType: "json",
                contentType: "application/x-www-form-urlencoded; charset=utf-8",
                success: function (ajaxOutput) {


                          if (ajaxOutput.Process.IsProcess) {
                              console.log('Users', ajaxOutput);
                              $sidemenu.find('.jq_sidemenu_title').text("Users");

                              $sidemenu.empty().append('<div class="d-flex justify-content-end mb-2"><div class="col-md-6 position-absolute top-1 z-index"> <div class="input-group testSearchBox"><input type="text" class="form-control " name="SearchName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input"  /><div class="input-group-append"><button id="addcountry-jq-searchButton6" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="loadUsersList(this)"></button></div></div></div></div>', $('<div/>', {class:"col-md-12 table_temp_class"}).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))
                             // $sidemenu.find('table').dataTable({ paging: true });


                              let $table = $sidemenu.find('table');
                              $table.dataTable({
                                  "serverSide": true,//no change
                                  "processing": true,//-- process text when clicked
                                  //"lengthChange": false,
                                  "lengthMenu": [10, 15, 20, 25, 50, 100],//---drop down page size
                                  "searching": false,//--no change
                                  "ordering": false,//--sorting
                                  "deferLoading": ajaxOutput.totalrecord,//<----to total number of record from db
                                  "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,//<----starting record
                                  "pageLength": ajaxOutput.pageSize,//<----page size
                                  "recordsFiltered": ajaxOutput.pageSize,//<---page size

                                  "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize, searchkey: SearchName }, tableOptions, $table)
                              });

                          }
                else {
                              if (ajaxOutput.Process.Status = "NoData") {

                                  $sidemenu.find('.jq_sidemenu_title').text("Users");

                                  $sidemenu.empty().append('<div class="d-flex justify-content-end mb-2"><div class="col-md-6 position-absolute top-1 z-index"> <div class="input-group testSearchBox"><input type="text" class="form-control " name="SearchName" perfect-class="formGroupControl" perfect-ctype="input" perfect-css="input"  /><div class="input-group-append"><button id="addcountry-jq-searchButton6" class="btn btn-primary fa fa-search" type="button" perfect-css="button" onclick="loadUsersList(this)"></button></div></div></div></div>', $('<div/>', { class: "col-md-12 table_temp_class" }).html(pft_table_createtable(ajaxOutput.Data, tableOptions)))
                        // $sidemenu.find('table').dataTable({ paging: true });


                        let $table = $sidemenu.find('table');
                        $table.dataTable({
                            "serverSide": true,//no change
                            "processing": true,//-- process text when clicked
                           // "lengthChange": false,
                           "lengthMenu": [0],//---drop down page size
                            "searching": false,//--no change
                            "ordering": false,//--sorting
                            "deferLoading": ajaxOutput.totalrecord,//<----to total number of record from db
                            "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,//<----starting record
                            "pageLength": ajaxOutput.pageSize,//<----page size
                            "recordsFiltered": ajaxOutput.pageSize,//<---page size

                            "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize }, tableOptions, $table)
                        });
                    }
                    else {
                        $.each(ajaxOutput.Process.Message, function (key, value) {
                            NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                        });
                    }
                }




            },
            complete: function () {

            }
        });
    }
    function returnajaxPagination(ajaxInfo, tableOptions, tableid) {
        //{ apiurl, pageSize }
        return {
            url: ajaxInfo.apiurl,
            type: "post",
            data: function () {
                var info = tableid.DataTable().page.info();
                console.log('RETURN AJAX', info)
                //return { <antiforgery>:<antiforgery>, length: ajaxInfo.pageSize, page: info.page }
                let input = { pageSize: info.length, pageIndex: info.page };
                if (ajaxInfo.searchkey) {
                    input["Name"] = ajaxInfo.searchkey;
                }
                return input
            },
            dataType: "json",
            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            success: function (dtajaxOutput) {
                // $sideMenuOptions.body.html(pft_table_createtable(dtajaxOutput.Data, tableOptions));
                let table = tableid.DataTable();
                table.destroy();
                pft_table_newTableBody(tableid, dtajaxOutput.Data, tableOptions);

                tableid.dataTable({
                    "serverSide": true,
                    "processing": true,
                    //"lengthChange": false,
                    "lengthMenu": [10, 15, 20, 25, 50, 100],
                    "searching": false,
                    "ordering": false,
                    "deferLoading": dtajaxOutput.totalrecord,
                    "displayStart": dtajaxOutput.pageIndex * dtajaxOutput.pageSize,
                    "pageLength": dtajaxOutput.pageSize,
                    "recordsFiltered": dtajaxOutput.pageSize,
                    "ajax": returnajaxPagination(ajaxInfo, tableOptions, tableid)
                })

            },

        }
    }
        function loadUsersList1() {
            let $sidemenu = $sideMenuOptions.body;
            $sideMenuOptions.title.find('h4').text('Users');

       let pageUrl = '@Url.Action("GetusersList", "Users")';
            $.ajax({
                url:pageUrl,
                type: "POST",
                data: { pageSize: 15, pageIndex: 0 },
                dataType: "json",
                contentType: "application/x-www-form-urlencoded; charset=utf-8",
                success: function (ajaxOutput) {


                          if (ajaxOutput.Process.IsProcess) {
                              console.log('Users', ajaxOutput);
                              $sidemenu.find('.jq_sidemenu_title').text("Users");

                              $sidemenu.html(pft_table_createtable(ajaxOutput.Data, tableOptions))
                             // $sidemenu.find('table').dataTable({ paging: true });


                              let $table = $sidemenu.find('table');
                              $table.dataTable({
                                  "serverSide": true,//no change
                                  "processing": true,//-- process text when clicked
                                  //"lengthChange": false,
                                  "lengthMenu": [10, 15, 20, 25, 50, 100],//---drop down page size
                                  "searching": true,//--no change
                                  "ordering": false,//--sorting
                                  "deferLoading": ajaxOutput.totalrecord,//<----to total number of record from db
                                  "displayStart": ajaxOutput.pageIndex * ajaxOutput.pageSize,//<----starting record
                                  "pageLength": ajaxOutput.pageSize,//<----page size
                                  "recordsFiltered": ajaxOutput.pageSize,//<---page size

                                  "ajax": returnajaxPagination({ apiurl: pageUrl, pageSize: ajaxOutput.pageSize }, tableOptions, $table)
                              });

                          }
                          else {
                              if (ajaxOutput.Process.Status = "NoData") { }
                              else {
                                  $.each(ajaxOutput.Process.Message, function (key, value) {
                                      NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                  });
                              }
                          }




                      },
                      complete: function () {

                      }
                  });
          }
        function returnajaxPagination(ajaxInfo, tableOptions, tableid) {
            //{ apiurl, pageSize }
            return {
                url: ajaxInfo.apiurl,
                type: "post",
                data: function () {
                    var info = tableid.DataTable().page.info();
                    console.log('RETURN AJAX', info)
                    //return { <antiforgery>:<antiforgery>, length: ajaxInfo.pageSize, page: info.page }
                    return { pageSize: info.length, pageIndex: info.page }
                },
                dataType: "json",
                contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                success: function (dtajaxOutput) {
                    // $sideMenuOptions.body.html(pft_table_createtable(dtajaxOutput.Data, tableOptions));
                    let table = tableid.DataTable();
                    table.destroy();
                    pft_table_newTableBody(tableid, dtajaxOutput.Data, tableOptions);

                    tableid.dataTable({
                        "serverSide": true,
                        "processing": true,
                        //"lengthChange": false,
                        "lengthMenu": [10, 15, 20, 25, 50, 100],
                        "searching": false,
                        "ordering": false,
                        "deferLoading": dtajaxOutput.totalrecord,
                        "displayStart": dtajaxOutput.pageIndex * dtajaxOutput.pageSize,
                        "pageLength": dtajaxOutput.pageSize,
                        "recordsFiltered": dtajaxOutput.pageSize,
                        "ajax": returnajaxPagination(ajaxInfo, tableOptions, tableid)
                    })

                },

            }
        }

//side table view delete






        function editUsers() {
            let row = $(this).closest('tr');

            let Saveddata = row.data('pData');
            console.log("Saved data", Saveddata);
            let inputData = {
                __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                UsersID: Saveddata.UsersID
                //console.log("id", UsersID);
            };

            $.ajax({
                url: '@Url.Action("GetUsersInfoByID", "Users")',
                        type: "POST",

                        data: inputData,
                        dataType: "json",
                        contentType: 'application/x-www-form-urlencoded;charset=utf-8',
                        success: function (ajaxOutput) {


                        console.log("Return", ajaxOutput.Data[0]);
                            if (ajaxOutput.Process.IsProcess)
                            {

                                console.log('>_ Inside GetUsersInfo', ajaxOutput)

                                $sideMenuOptions.close();

                                $formContainer.load("@Url.Action("LoadFormusers", "Users")?mtd=@ViewBag.mtd", function () {



                                    //Fn_FillBranchByTypeId(ajaxOutput.Data[0].BranchTypeID);


                                    $(this).find('[perfect-class=formTitle]').text('update : ' + ajaxOutput.Data[0].Employee)


                                    let $thisForm = $(this).find('[perfect-class="form"]');

                                    $thisForm.validate({ messages: validationMessage });

                                    $thisForm.data({ pData: ajaxOutput.Data[0] }); //setting the pdata value in form for update -id is taking

                                    $thisForm.attr('perfect-onFormSuccess', 'UsersInitialLoad');

                                    $thisForm.find('button[name=add]').addClass('d-none');
                                    $thisForm.find('button[name=update]').removeClass('d-none')

                                   // $thisForm.find('[name="BranchID"]').val(ajaxOutput.Data[0].BranchID).selectpicker('refresh');

                                    $thisForm.find('[name="BranchTypeID"]').val(ajaxOutput.Data[0].BranchTypeID).selectpicker('refresh').attr("disabled", "disabled"); 

                                    $thisForm.find('[name=BranchTypeID]').trigger('change').attr("disabled", "disabled");
                                    // $thisForm.find('[name=CategoryID]').val(ajaxOutput.Data[0].Category).selectpicker('refresh'),
                                    $thisForm.find('[name=BranchID]').attr('perfect-onSelectLoad', ajaxOutput.Data[0].BranchID).attr("disabled", "disabled");
                                    $thisForm.find('[name=Branch]').attr('perfect-onSelectLoad', ajaxOutput.Data[0].Branch).attr("disabled", "disabled");
                                    $thisForm.find('[name="EmployeeID"]').val(ajaxOutput.Data[0].EmployeeID).attr("disabled", "disabled");
                                    $thisForm.find('[name="Employee"]').val(ajaxOutput.Data[0].Employee).attr("disabled", "disabled");
                                    $thisForm.find('[name="UserRoleID"]').val(ajaxOutput.Data[0].UserRoleID).selectpicker('refresh');
                                    $thisForm.find('[name="UserCode"]').val(ajaxOutput.Data[0].UserCode).attr("disabled", "disabled");
                                    $thisForm.find('[name="CashLimit"]').val(ajaxOutput.Data[0].CashLimit);
                                    $thisForm.find('[name="UserMrpEdit"]').prop('checked', ajaxOutput.Data[0].UserMrpEdit); 
                                    $thisForm.find('[name="UserPriceEdit"]').prop('checked', ajaxOutput.Data[0].UserPriceEdit); 
                                    $("#adddistrict-jq-searchButton3").attr('disabled', true);

                                  


                                });
                            }
                            else {
                                console.log('>_ Inside GetUsersInfo :false')

                                $.each(ajaxOutput.Process.Message, function (key, value)
                                {
                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                });
                            }
                },

            });

        }

        function deleteUsers() {
             let $row = $(this).closest('tr');
            let Saveddata = $row.data('pData');


            console.log('Delete function', Saveddata)

            //get reason list-

               $.ajax({
                   url: "@Url.Action("GetUsersDeleteReasonList", "Users")",
                   type: "GET",
                  // data: inputReason,
                   contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                   success: function (ajaxReasonOutput) {
                       if (ajaxReasonOutput.Process.IsProcess) {

                           console.log('Inside res ajax', ajaxReasonOutput.Data)

                           //let confirmationDialogBoxOption = { body: "Do you want to remove  ?", cancel: "No", confirm: "Yes", reason: ajaxReasonOutput.Data };
                           let confirmationDialogBoxOption = { heading: "Are you Sure?", body: "Do you want to remove " + Saveddata.UserCode + " ?", cancel: "No", confirm: "Yes", reason: ajaxReasonOutput.Data };
                           var confirmBoxObj = ConfirmDialog(confirmationDialogBoxOption);

                            confirmBoxObj.then(function (selectedOption) {
                                if (selectedOption) {
                                   //  console.log('customerIndex> delete function:',selectedOption)

                                    let inputData = {
                                        __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(),
                                        ID_Users: Saveddata['UsersID'],
                                        ReasonID: selectedOption
                                    };
                                    $.ajax({
                                        url: "@Url.Action("Deleteusers", "Users")",
                                        type: "POST",
                                        data: inputData,
                                        contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                                        success: function (ajaxOutput) {
                                            if (ajaxOutput.Process.IsProcess) {

                                                let table = $row.closest('table').DataTable()
                                                table.row($row).remove().draw();

                                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                                    NotificationMessage({ 'type': 'success', 'heading': 'Success', 'message': value });
                                                });

                                                //removing a data


                                            }
                                            else {
                                                $.each(ajaxOutput.Process.Message, function (key, value) {
                                                    NotificationMessage({ 'type': 'error', 'heading': 'Error', 'message': value });
                                                });
                                            }
                                        }
                                    });
                                }
                                else {
                                    NotificationMessage({ 'message': 'No option selected' });
                                }

                            });


                        }
                        else {



                        }
                   }

               });




        };


</script>



}